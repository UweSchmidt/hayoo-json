[
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-AgentNamer.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eAssigns a unique ID upon request. IDs generated by an \u003ccode\u003eAgentNamer\u003c/code\u003e \n are guaranteed to be unique within a given universe, across all \n simulation runs.\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "ALife.Creatur.AgentNamer",
        "fct-package": "creatur",
        "fct-signature": "module",
        "fct-source": "src/ALife-Creatur-AgentNamer.html",
        "fct-type": "module",
        "title": "AgentNamer"
      },
      "index": {
        "description": "Assigns unique ID upon request IDs generated by an AgentNamer are guaranteed to be unique within given universe across all simulation runs",
        "hierarchy": "ALife Creatur AgentNamer",
        "module": "ALife.Creatur.AgentNamer",
        "name": "AgentNamer",
        "normalized": "",
        "package": "creatur",
        "partial": "Agent Namer",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-AgentNamer.html#t:AgentNamer",
      "description": {
        "fct-module": "ALife.Creatur.AgentNamer",
        "fct-package": "creatur",
        "fct-signature": "class",
        "fct-source": "src/ALife-Creatur-AgentNamer.html#AgentNamer",
        "fct-type": "class",
        "title": "AgentNamer"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur AgentNamer",
        "module": "ALife.Creatur.AgentNamer",
        "name": "AgentNamer",
        "normalized": "",
        "package": "creatur",
        "partial": "Agent Namer",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-AgentNamer.html#t:SimpleAgentNamer",
      "description": {
        "fct-module": "ALife.Creatur.AgentNamer",
        "fct-package": "creatur",
        "fct-signature": "data",
        "fct-source": "src/ALife-Creatur-AgentNamer.html#SimpleAgentNamer",
        "fct-type": "data",
        "title": "SimpleAgentNamer"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur AgentNamer",
        "module": "ALife.Creatur.AgentNamer",
        "name": "SimpleAgentNamer",
        "normalized": "",
        "package": "creatur",
        "partial": "Simple Agent Namer",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-AgentNamer.html#v:genName",
      "description": {
        "fct-descr": "\u003cp\u003eAssign a unique ID using the supplied prefix.\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.AgentNamer",
        "fct-package": "creatur",
        "fct-signature": "StateT n IO AgentId",
        "fct-source": "src/ALife-Creatur-AgentNamer.html#genName",
        "fct-type": "method",
        "title": "genName"
      },
      "index": {
        "description": "Assign unique ID using the supplied prefix",
        "hierarchy": "ALife Creatur AgentNamer",
        "module": "ALife.Creatur.AgentNamer",
        "name": "genName",
        "normalized": "",
        "package": "creatur",
        "partial": "Name",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-AgentNamer.html#v:mkSimpleAgentNamer",
      "description": {
        "fct-module": "ALife.Creatur.AgentNamer",
        "fct-package": "creatur",
        "fct-signature": "String -\u003e FilePath -\u003e SimpleAgentNamer",
        "fct-source": "src/ALife-Creatur-AgentNamer.html#mkSimpleAgentNamer",
        "fct-type": "function",
        "title": "mkSimpleAgentNamer"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur AgentNamer",
        "module": "ALife.Creatur.AgentNamer",
        "name": "mkSimpleAgentNamer",
        "normalized": "String-\u003eFilePath-\u003eSimpleAgentNamer",
        "package": "creatur",
        "partial": "Simple Agent Namer",
        "signature": "String-\u003eFilePath-\u003eSimpleAgentNamer"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Clock.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eAn internal simulation clock which persists between runs. This is a\n simple counter, completely independent from any system clock or\n hardware clock. The clock does not automatically advance, it only\n advances when \u003ccode\u003e\u003ccode\u003e\u003ca\u003eincTime\u003c/a\u003e\u003c/code\u003e\u003c/code\u003e is called. In this way, the Cr&#233;at&#250;r \n framework will run consistently, treating all agents fairly,\n regardless of current processor load. It also ensures that data\n obtained from simulation runs on different machines with different\n CPU performance can still be meaningfully compared.\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "ALife.Creatur.Clock",
        "fct-package": "creatur",
        "fct-signature": "module",
        "fct-source": "src/ALife-Creatur-Clock.html",
        "fct-type": "module",
        "title": "Clock"
      },
      "index": {
        "description": "An internal simulation clock which persists between runs This is simple counter completely independent from any system clock or hardware clock The clock does not automatically advance it only advances when incTime is called In this way the Cr at framework will run consistently treating all agents fairly regardless of current processor load It also ensures that data obtained from simulation runs on different machines with different CPU performance can still be meaningfully compared",
        "hierarchy": "ALife Creatur Clock",
        "module": "ALife.Creatur.Clock",
        "name": "Clock",
        "normalized": "",
        "package": "creatur",
        "partial": "Clock",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Clock.html#t:Clock",
      "description": {
        "fct-descr": "\u003cp\u003eA clock representing the time in a Cr&#233;at&#250;r universe.\n   It is used to schedule events and ensure that each agent gets its\n   fair share of the CPU.\n   This clock is entirely separate from the system clock.\n   It advances only when \u003ccode\u003e\u003ccode\u003e\u003ca\u003eincTime\u003c/a\u003e\u003c/code\u003e\u003c/code\u003e is called.\n   This allows Cr&#233;at&#250;r to run without being affected by other\n   processes which might be using the CPU at the same time.\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Clock",
        "fct-package": "creatur",
        "fct-signature": "class",
        "fct-source": "src/ALife-Creatur-Clock.html#Clock",
        "fct-type": "class",
        "title": "Clock"
      },
      "index": {
        "description": "clock representing the time in Cr at universe It is used to schedule events and ensure that each agent gets its fair share of the CPU This clock is entirely separate from the system clock It advances only when incTime is called This allows Cr at to run without being affected by other processes which might be using the CPU at the same time",
        "hierarchy": "ALife Creatur Clock",
        "module": "ALife.Creatur.Clock",
        "name": "Clock",
        "normalized": "",
        "package": "creatur",
        "partial": "Clock",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Clock.html#v:currentTime",
      "description": {
        "fct-descr": "\u003cp\u003eThe current time, measured in \u003ca\u003eticks\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Clock",
        "fct-package": "creatur",
        "fct-signature": "StateT c IO Time",
        "fct-source": "src/ALife-Creatur-Clock.html#currentTime",
        "fct-type": "method",
        "title": "currentTime"
      },
      "index": {
        "description": "The current time measured in ticks",
        "hierarchy": "ALife Creatur Clock",
        "module": "ALife.Creatur.Clock",
        "name": "currentTime",
        "normalized": "",
        "package": "creatur",
        "partial": "Time",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Clock.html#v:incTime",
      "description": {
        "fct-descr": "\u003cp\u003eAdvance the clock to the next \u003ca\u003etick\u003c/a\u003e.\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Clock",
        "fct-package": "creatur",
        "fct-signature": "StateT c IO ()",
        "fct-source": "src/ALife-Creatur-Clock.html#incTime",
        "fct-type": "method",
        "title": "incTime"
      },
      "index": {
        "description": "Advance the clock to the next tick",
        "hierarchy": "ALife Creatur Clock",
        "module": "ALife.Creatur.Clock",
        "name": "incTime",
        "normalized": "StateT a IO()",
        "package": "creatur",
        "partial": "Time",
        "signature": "StateT c IO()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Counter.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eA simple counter which persists between runs.\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "ALife.Creatur.Counter",
        "fct-package": "creatur",
        "fct-signature": "module",
        "fct-source": "src/ALife-Creatur-Counter.html",
        "fct-type": "module",
        "title": "Counter"
      },
      "index": {
        "description": "simple counter which persists between runs",
        "hierarchy": "ALife Creatur Counter",
        "module": "ALife.Creatur.Counter",
        "name": "Counter",
        "normalized": "",
        "package": "creatur",
        "partial": "Counter",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Counter.html#t:Counter",
      "description": {
        "fct-module": "ALife.Creatur.Counter",
        "fct-package": "creatur",
        "fct-signature": "class",
        "fct-source": "src/ALife-Creatur-Counter.html#Counter",
        "fct-type": "class",
        "title": "Counter"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Counter",
        "module": "ALife.Creatur.Counter",
        "name": "Counter",
        "normalized": "",
        "package": "creatur",
        "partial": "Counter",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Counter.html#t:PersistentCounter",
      "description": {
        "fct-module": "ALife.Creatur.Counter",
        "fct-package": "creatur",
        "fct-signature": "data",
        "fct-source": "src/ALife-Creatur-Counter.html#PersistentCounter",
        "fct-type": "data",
        "title": "PersistentCounter"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Counter",
        "module": "ALife.Creatur.Counter",
        "name": "PersistentCounter",
        "normalized": "",
        "package": "creatur",
        "partial": "Persistent Counter",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Counter.html#v:current",
      "description": {
        "fct-module": "ALife.Creatur.Counter",
        "fct-package": "creatur",
        "fct-signature": "StateT c IO Int",
        "fct-source": "src/ALife-Creatur-Counter.html#current",
        "fct-type": "method",
        "title": "current"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Counter",
        "module": "ALife.Creatur.Counter",
        "name": "current",
        "normalized": "",
        "package": "creatur",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Counter.html#v:increment",
      "description": {
        "fct-module": "ALife.Creatur.Counter",
        "fct-package": "creatur",
        "fct-signature": "StateT c IO ()",
        "fct-source": "src/ALife-Creatur-Counter.html#increment",
        "fct-type": "method",
        "title": "increment"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Counter",
        "module": "ALife.Creatur.Counter",
        "name": "increment",
        "normalized": "StateT a IO()",
        "package": "creatur",
        "partial": "",
        "signature": "StateT c IO()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Counter.html#v:mkPersistentCounter",
      "description": {
        "fct-descr": "\u003cp\u003eCreates a counter that will store its value in the specified file.\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Counter",
        "fct-package": "creatur",
        "fct-signature": "FilePath -\u003e PersistentCounter",
        "fct-source": "src/ALife-Creatur-Counter.html#mkPersistentCounter",
        "fct-type": "function",
        "title": "mkPersistentCounter"
      },
      "index": {
        "description": "Creates counter that will store its value in the specified file",
        "hierarchy": "ALife Creatur Counter",
        "module": "ALife.Creatur.Counter",
        "name": "mkPersistentCounter",
        "normalized": "FilePath-\u003ePersistentCounter",
        "package": "creatur",
        "partial": "Persistent Counter",
        "signature": "FilePath-\u003ePersistentCounter"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Daemon.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eProvides a UNIX daemon to run an experiment using the Cr&#233;at&#250;r\n framework.\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "ALife.Creatur.Daemon",
        "fct-package": "creatur",
        "fct-signature": "module",
        "fct-source": "src/ALife-Creatur-Daemon.html",
        "fct-type": "module",
        "title": "Daemon"
      },
      "index": {
        "description": "Provides UNIX daemon to run an experiment using the Cr at framework",
        "hierarchy": "ALife Creatur Daemon",
        "module": "ALife.Creatur.Daemon",
        "name": "Daemon",
        "normalized": "",
        "package": "creatur",
        "partial": "Daemon",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Daemon.html#t:Daemon",
      "description": {
        "fct-module": "ALife.Creatur.Daemon",
        "fct-package": "creatur",
        "fct-signature": "data",
        "fct-source": "src/ALife-Creatur-Daemon.html#Daemon",
        "fct-type": "data",
        "title": "Daemon"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Daemon",
        "module": "ALife.Creatur.Daemon",
        "name": "Daemon",
        "normalized": "",
        "package": "creatur",
        "partial": "Daemon",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Daemon.html#v:Daemon",
      "description": {
        "fct-module": "ALife.Creatur.Daemon",
        "fct-package": "creatur",
        "fct-signature": "Daemon",
        "fct-source": "src/ALife-Creatur-Daemon.html#Daemon",
        "fct-type": "function",
        "title": "Daemon"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Daemon",
        "module": "ALife.Creatur.Daemon",
        "name": "Daemon",
        "normalized": "",
        "package": "creatur",
        "partial": "Daemon",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Daemon.html#v:launch",
      "description": {
        "fct-descr": "\u003cp\u003e\u003ccode\u003e\u003ccode\u003e\u003ca\u003elaunch\u003c/a\u003e\u003c/code\u003e daemon state\u003c/code\u003e creates a daemon running under the current\n   user's real userID, which invokes \u003ccode\u003etask\u003c/code\u003e.\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Daemon",
        "fct-package": "creatur",
        "fct-signature": "Daemon s -\u003e s -\u003e IO ()",
        "fct-source": "src/ALife-Creatur-Daemon.html#launch",
        "fct-type": "function",
        "title": "launch"
      },
      "index": {
        "description": "launch daemon state creates daemon running under the current user real userID which invokes task",
        "hierarchy": "ALife Creatur Daemon",
        "module": "ALife.Creatur.Daemon",
        "name": "launch",
        "normalized": "Daemon a-\u003ea-\u003eIO()",
        "package": "creatur",
        "partial": "",
        "signature": "Daemon s-\u003es-\u003eIO()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Daemon.html#v:onException",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "ALife.Creatur.Daemon",
        "fct-package": "creatur",
        "fct-signature": "s -\u003e SomeException -\u003e IO s",
        "fct-source": "src/ALife-Creatur-Daemon.html#Daemon",
        "fct-type": "function",
        "title": "onException"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Daemon",
        "module": "ALife.Creatur.Daemon",
        "name": "onException",
        "normalized": "a-\u003eSomeException-\u003eIO a",
        "package": "creatur",
        "partial": "Exception",
        "signature": "s-\u003eSomeException-\u003eIO s"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Daemon.html#v:onShutdown",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "ALife.Creatur.Daemon",
        "fct-package": "creatur",
        "fct-signature": "s -\u003e IO ()",
        "fct-source": "src/ALife-Creatur-Daemon.html#Daemon",
        "fct-type": "function",
        "title": "onShutdown"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Daemon",
        "module": "ALife.Creatur.Daemon",
        "name": "onShutdown",
        "normalized": "a-\u003eIO()",
        "package": "creatur",
        "partial": "Shutdown",
        "signature": "s-\u003eIO()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Daemon.html#v:onStartup",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "ALife.Creatur.Daemon",
        "fct-package": "creatur",
        "fct-signature": "s -\u003e IO s",
        "fct-source": "src/ALife-Creatur-Daemon.html#Daemon",
        "fct-type": "function",
        "title": "onStartup"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Daemon",
        "module": "ALife.Creatur.Daemon",
        "name": "onStartup",
        "normalized": "a-\u003eIO a",
        "package": "creatur",
        "partial": "Startup",
        "signature": "s-\u003eIO s"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Daemon.html#v:sleepTime",
      "description": {
        "fct-descr": "\u003cp\u003eNumber of microseconds to sleep between agent tasks.\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Daemon",
        "fct-package": "creatur",
        "fct-signature": "Int",
        "fct-source": "src/ALife-Creatur-Daemon.html#Daemon",
        "fct-type": "function",
        "title": "sleepTime"
      },
      "index": {
        "description": "Number of microseconds to sleep between agent tasks",
        "hierarchy": "ALife Creatur Daemon",
        "module": "ALife.Creatur.Daemon",
        "name": "sleepTime",
        "normalized": "",
        "package": "creatur",
        "partial": "Time",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Daemon.html#v:task",
      "description": {
        "fct-descr": "\u003cp\u003eThe agent task.\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Daemon",
        "fct-package": "creatur",
        "fct-signature": "StateT s IO ()",
        "fct-source": "src/ALife-Creatur-Daemon.html#Daemon",
        "fct-type": "function",
        "title": "task"
      },
      "index": {
        "description": "The agent task",
        "hierarchy": "ALife Creatur Daemon",
        "module": "ALife.Creatur.Daemon",
        "name": "task",
        "normalized": "StateT a IO()",
        "package": "creatur",
        "partial": "",
        "signature": "StateT s IO()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Daemon.html#v:username",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "ALife.Creatur.Daemon",
        "fct-package": "creatur",
        "fct-signature": "String",
        "fct-source": "src/ALife-Creatur-Daemon.html#Daemon",
        "fct-type": "function",
        "title": "username"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Daemon",
        "module": "ALife.Creatur.Daemon",
        "name": "username",
        "normalized": "",
        "package": "creatur",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Database-FileSystem.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eA ridiculously simple database that stores each record in a\n separate file. The name of the file is the record's key.\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "ALife.Creatur.Database.FileSystem",
        "fct-package": "creatur",
        "fct-signature": "module",
        "fct-source": "src/ALife-Creatur-Database-FileSystem.html",
        "fct-type": "module",
        "title": "FileSystem"
      },
      "index": {
        "description": "ridiculously simple database that stores each record in separate file The name of the file is the record key",
        "hierarchy": "ALife Creatur Database FileSystem",
        "module": "ALife.Creatur.Database.FileSystem",
        "name": "FileSystem",
        "normalized": "",
        "package": "creatur",
        "partial": "File System",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Database-FileSystem.html#t:FSDatabase",
      "description": {
        "fct-descr": "\u003cp\u003eA simple database where each record is stored in a separate file, \n   and the name of the file is the record's key.\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Database.FileSystem",
        "fct-package": "creatur",
        "fct-signature": "data",
        "fct-source": "src/ALife-Creatur-Database-FileSystem.html#FSDatabase",
        "fct-type": "data",
        "title": "FSDatabase"
      },
      "index": {
        "description": "simple database where each record is stored in separate file and the name of the file is the record key",
        "hierarchy": "ALife Creatur Database FileSystem",
        "module": "ALife.Creatur.Database.FileSystem",
        "name": "FSDatabase",
        "normalized": "",
        "package": "creatur",
        "partial": "FSDatabase",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Database-FileSystem.html#v:mkFSDatabase",
      "description": {
        "fct-descr": "\u003cp\u003e\u003ccode\u003e\u003ccode\u003e\u003ca\u003emkFSDatabase\u003c/a\u003e\u003c/code\u003e d\u003c/code\u003e (re)creates the FSDatabase in the\n   directory \u003ccode\u003ed\u003c/code\u003e.\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Database.FileSystem",
        "fct-package": "creatur",
        "fct-signature": "FilePath -\u003e FSDatabase r",
        "fct-source": "src/ALife-Creatur-Database-FileSystem.html#mkFSDatabase",
        "fct-type": "function",
        "title": "mkFSDatabase"
      },
      "index": {
        "description": "mkFSDatabase re creates the FSDatabase in the directory",
        "hierarchy": "ALife Creatur Database FileSystem",
        "module": "ALife.Creatur.Database.FileSystem",
        "name": "mkFSDatabase",
        "normalized": "FilePath-\u003eFSDatabase a",
        "package": "creatur",
        "partial": "FSDatabase",
        "signature": "FilePath-\u003eFSDatabase r"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Database.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eDatabase interface for the Cr&#233;at&#250;r framework.\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "ALife.Creatur.Database",
        "fct-package": "creatur",
        "fct-signature": "module",
        "fct-source": "src/ALife-Creatur-Database.html",
        "fct-type": "module",
        "title": "Database"
      },
      "index": {
        "description": "Database interface for the Cr at framework",
        "hierarchy": "ALife Creatur Database",
        "module": "ALife.Creatur.Database",
        "name": "Database",
        "normalized": "",
        "package": "creatur",
        "partial": "Database",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Database.html#t:Database",
      "description": {
        "fct-descr": "\u003cp\u003eA database offering storage and retrieval for records.\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Database",
        "fct-package": "creatur",
        "fct-signature": "class",
        "fct-source": "src/ALife-Creatur-Database.html#Database",
        "fct-type": "class",
        "title": "Database"
      },
      "index": {
        "description": "database offering storage and retrieval for records",
        "hierarchy": "ALife Creatur Database",
        "module": "ALife.Creatur.Database",
        "name": "Database",
        "normalized": "",
        "package": "creatur",
        "partial": "Database",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Database.html#t:Record",
      "description": {
        "fct-module": "ALife.Creatur.Database",
        "fct-package": "creatur",
        "fct-signature": "class",
        "fct-source": "src/ALife-Creatur-Database.html#Record",
        "fct-type": "class",
        "title": "Record"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Database",
        "module": "ALife.Creatur.Database",
        "name": "Record",
        "normalized": "",
        "package": "creatur",
        "partial": "Record",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Database.html#v:archivedKeys",
      "description": {
        "fct-descr": "\u003cp\u003eGet a list of all archived keys in the database. If the database\n   does not implement archiving, it may return an empty list.\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Database",
        "fct-package": "creatur",
        "fct-signature": "StateT d IO [String]",
        "fct-source": "src/ALife-Creatur-Database.html#archivedKeys",
        "fct-type": "method",
        "title": "archivedKeys"
      },
      "index": {
        "description": "Get list of all archived keys in the database If the database does not implement archiving it may return an empty list",
        "hierarchy": "ALife Creatur Database",
        "module": "ALife.Creatur.Database",
        "name": "archivedKeys",
        "normalized": "StateT a IO[String]",
        "package": "creatur",
        "partial": "Keys",
        "signature": "StateT d IO[String]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Database.html#v:delete",
      "description": {
        "fct-descr": "\u003cp\u003eRemove a record from the database.\n   The database may archive records rather than simply deleting them.\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Database",
        "fct-package": "creatur",
        "fct-signature": "String -\u003e StateT d IO ()",
        "fct-source": "src/ALife-Creatur-Database.html#delete",
        "fct-type": "method",
        "title": "delete"
      },
      "index": {
        "description": "Remove record from the database The database may archive records rather than simply deleting them",
        "hierarchy": "ALife Creatur Database",
        "module": "ALife.Creatur.Database",
        "name": "delete",
        "normalized": "String-\u003eStateT a IO()",
        "package": "creatur",
        "partial": "",
        "signature": "String-\u003eStateT d IO()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Database.html#v:key",
      "description": {
        "fct-module": "ALife.Creatur.Database",
        "fct-package": "creatur",
        "fct-signature": "r -\u003e String",
        "fct-source": "src/ALife-Creatur-Database.html#key",
        "fct-type": "method",
        "title": "key"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Database",
        "module": "ALife.Creatur.Database",
        "name": "key",
        "normalized": "a-\u003eString",
        "package": "creatur",
        "partial": "",
        "signature": "r-\u003eString"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Database.html#v:keys",
      "description": {
        "fct-descr": "\u003cp\u003eGet a list of all active keys in the database.\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Database",
        "fct-package": "creatur",
        "fct-signature": "StateT d IO [String]",
        "fct-source": "src/ALife-Creatur-Database.html#keys",
        "fct-type": "method",
        "title": "keys"
      },
      "index": {
        "description": "Get list of all active keys in the database",
        "hierarchy": "ALife Creatur Database",
        "module": "ALife.Creatur.Database",
        "name": "keys",
        "normalized": "StateT a IO[String]",
        "package": "creatur",
        "partial": "",
        "signature": "StateT d IO[String]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Database.html#v:lookup",
      "description": {
        "fct-descr": "\u003cp\u003eRead an active record from the database.\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Database",
        "fct-package": "creatur",
        "fct-signature": "String -\u003e StateT d IO (Either String (DBRecord d))",
        "fct-source": "src/ALife-Creatur-Database.html#lookup",
        "fct-type": "method",
        "title": "lookup"
      },
      "index": {
        "description": "Read an active record from the database",
        "hierarchy": "ALife Creatur Database",
        "module": "ALife.Creatur.Database",
        "name": "lookup",
        "normalized": "String-\u003eStateT a IO(Either String(DBRecord a))",
        "package": "creatur",
        "partial": "",
        "signature": "String-\u003eStateT d IO(Either String(DBRecord d))"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Database.html#v:lookupInArchive",
      "description": {
        "fct-descr": "\u003cp\u003eRead an archived record from the database.\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Database",
        "fct-package": "creatur",
        "fct-signature": "String -\u003e StateT d IO (Either String (DBRecord d))",
        "fct-source": "src/ALife-Creatur-Database.html#lookupInArchive",
        "fct-type": "method",
        "title": "lookupInArchive"
      },
      "index": {
        "description": "Read an archived record from the database",
        "hierarchy": "ALife Creatur Database",
        "module": "ALife.Creatur.Database",
        "name": "lookupInArchive",
        "normalized": "String-\u003eStateT a IO(Either String(DBRecord a))",
        "package": "creatur",
        "partial": "In Archive",
        "signature": "String-\u003eStateT d IO(Either String(DBRecord d))"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Database.html#v:store",
      "description": {
        "fct-descr": "\u003cp\u003eWrite a record to the database. \n   If an agent with the same name already exists, it will be overwritten.\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Database",
        "fct-package": "creatur",
        "fct-signature": "DBRecord d -\u003e StateT d IO ()",
        "fct-source": "src/ALife-Creatur-Database.html#store",
        "fct-type": "method",
        "title": "store"
      },
      "index": {
        "description": "Write record to the database If an agent with the same name already exists it will be overwritten",
        "hierarchy": "ALife Creatur Database",
        "module": "ALife.Creatur.Database",
        "name": "store",
        "normalized": "DBRecord a-\u003eStateT a IO()",
        "package": "creatur",
        "partial": "",
        "signature": "DBRecord d-\u003eStateT d IO()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-Analysis.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003e???\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "ALife.Creatur.Genetics.Analysis",
        "fct-package": "creatur",
        "fct-signature": "module",
        "fct-source": "src/ALife-Creatur-Genetics-Analysis.html",
        "fct-type": "module",
        "title": "Analysis"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Genetics Analysis",
        "module": "ALife.Creatur.Genetics.Analysis",
        "name": "Analysis",
        "normalized": "",
        "package": "creatur",
        "partial": "Analysis",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-Analysis.html#t:Analysable",
      "description": {
        "fct-module": "ALife.Creatur.Genetics.Analysis",
        "fct-package": "creatur",
        "fct-signature": "class",
        "fct-source": "src/ALife-Creatur-Genetics-Analysis.html#Analysable",
        "fct-type": "class",
        "title": "Analysable"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Genetics Analysis",
        "module": "ALife.Creatur.Genetics.Analysis",
        "name": "Analysable",
        "normalized": "",
        "package": "creatur",
        "partial": "Analysable",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-Analysis.html#v:analyse",
      "description": {
        "fct-descr": "\u003cp\u003eWrites a gene to a sequence.\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Genetics.Analysis",
        "fct-package": "creatur",
        "fct-signature": "g -\u003e String",
        "fct-source": "src/ALife-Creatur-Genetics-Analysis.html#analyse",
        "fct-type": "method",
        "title": "analyse"
      },
      "index": {
        "description": "Writes gene to sequence",
        "hierarchy": "ALife Creatur Genetics Analysis",
        "module": "ALife.Creatur.Genetics.Analysis",
        "name": "analyse",
        "normalized": "a-\u003eString",
        "package": "creatur",
        "partial": "",
        "signature": "g-\u003eString"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-BRGCBool.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eUtilities for working with genes that are encoded as a sequence of\n bits, using a Binary Reflected Gray Code (BRGC).\n\u003c/p\u003e\u003cp\u003eA Gray code maps values to codes in a way that guarantees that the\n codes for two consecutive values will differ by only one bit. This\n feature can be useful in evolutionary programming because the genes\n resulting from a crossover operation are likely to be similar to\n the inputs. This helps to ensure that offspring are similar to\n their parents, as any radical changes from one generation to the\n next are the result of mutation alone.\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "ALife.Creatur.Genetics.BRGCBool",
        "fct-package": "creatur",
        "fct-signature": "module",
        "fct-source": "src/ALife-Creatur-Genetics-BRGCBool.html",
        "fct-type": "module",
        "title": "BRGCBool"
      },
      "index": {
        "description": "Utilities for working with genes that are encoded as sequence of bits using Binary Reflected Gray Code BRGC Gray code maps values to codes in way that guarantees that the codes for two consecutive values will differ by only one bit This feature can be useful in evolutionary programming because the genes resulting from crossover operation are likely to be similar to the inputs This helps to ensure that offspring are similar to their parents as any radical changes from one generation to the next are the result of mutation alone",
        "hierarchy": "ALife Creatur Genetics BRGCBool",
        "module": "ALife.Creatur.Genetics.BRGCBool",
        "name": "BRGCBool",
        "normalized": "",
        "package": "creatur",
        "partial": "BRGCBool",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-BRGCBool.html#t:DiploidReader",
      "description": {
        "fct-module": "ALife.Creatur.Genetics.BRGCBool",
        "fct-package": "creatur",
        "fct-signature": "type",
        "fct-source": "src/ALife-Creatur-Genetics-BRGCBool.html#DiploidReader",
        "fct-type": "type",
        "title": "DiploidReader"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Genetics BRGCBool",
        "module": "ALife.Creatur.Genetics.BRGCBool",
        "name": "DiploidReader",
        "normalized": "",
        "package": "creatur",
        "partial": "Diploid Reader",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-BRGCBool.html#t:DiploidSequence",
      "description": {
        "fct-module": "ALife.Creatur.Genetics.BRGCBool",
        "fct-package": "creatur",
        "fct-signature": "type",
        "fct-source": "src/ALife-Creatur-Genetics-BRGCBool.html#DiploidSequence",
        "fct-type": "type",
        "title": "DiploidSequence"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Genetics BRGCBool",
        "module": "ALife.Creatur.Genetics.BRGCBool",
        "name": "DiploidSequence",
        "normalized": "",
        "package": "creatur",
        "partial": "Diploid Sequence",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-BRGCBool.html#t:Genetic",
      "description": {
        "fct-descr": "\u003cp\u003eA class representing anything which is represented in, and\n   determined by, an agent's genome.\n   This might include traits, parameters, \u003ca\u003eorgans\u003c/a\u003e (components of\n   agents), or even entire agents.\n   Instances of this class can be thought of as genes, i.e.,\n   instructions for building an agent.\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Genetics.BRGCBool",
        "fct-package": "creatur",
        "fct-signature": "class",
        "fct-source": "src/ALife-Creatur-Genetics-BRGCBool.html#Genetic",
        "fct-type": "class",
        "title": "Genetic"
      },
      "index": {
        "description": "class representing anything which is represented in and determined by an agent genome This might include traits parameters organs components of agents or even entire agents Instances of this class can be thought of as genes i.e instructions for building an agent",
        "hierarchy": "ALife Creatur Genetics BRGCBool",
        "module": "ALife.Creatur.Genetics.BRGCBool",
        "name": "Genetic",
        "normalized": "",
        "package": "creatur",
        "partial": "Genetic",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-BRGCBool.html#t:Reader",
      "description": {
        "fct-module": "ALife.Creatur.Genetics.BRGCBool",
        "fct-package": "creatur",
        "fct-signature": "type",
        "fct-source": "src/ALife-Creatur-Genetics-BRGCBool.html#Reader",
        "fct-type": "type",
        "title": "Reader"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Genetics BRGCBool",
        "module": "ALife.Creatur.Genetics.BRGCBool",
        "name": "Reader",
        "normalized": "",
        "package": "creatur",
        "partial": "Reader",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-BRGCBool.html#t:Sequence",
      "description": {
        "fct-module": "ALife.Creatur.Genetics.BRGCBool",
        "fct-package": "creatur",
        "fct-signature": "type",
        "fct-source": "src/ALife-Creatur-Genetics-BRGCBool.html#Sequence",
        "fct-type": "type",
        "title": "Sequence"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Genetics BRGCBool",
        "module": "ALife.Creatur.Genetics.BRGCBool",
        "name": "Sequence",
        "normalized": "",
        "package": "creatur",
        "partial": "Sequence",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-BRGCBool.html#t:Writer",
      "description": {
        "fct-module": "ALife.Creatur.Genetics.BRGCBool",
        "fct-package": "creatur",
        "fct-signature": "type",
        "fct-source": "src/ALife-Creatur-Genetics-BRGCBool.html#Writer",
        "fct-type": "type",
        "title": "Writer"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Genetics BRGCBool",
        "module": "ALife.Creatur.Genetics.BRGCBool",
        "name": "Writer",
        "normalized": "",
        "package": "creatur",
        "partial": "Writer",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-BRGCBool.html#v:consumed",
      "description": {
        "fct-descr": "\u003cp\u003eReturn the portion of the genome that has been read.\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Genetics.BRGCBool",
        "fct-package": "creatur",
        "fct-signature": "Reader Sequence",
        "fct-source": "src/ALife-Creatur-Genetics-BRGCBool.html#consumed",
        "fct-type": "function",
        "title": "consumed"
      },
      "index": {
        "description": "Return the portion of the genome that has been read",
        "hierarchy": "ALife Creatur Genetics BRGCBool",
        "module": "ALife.Creatur.Genetics.BRGCBool",
        "name": "consumed",
        "normalized": "",
        "package": "creatur",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-BRGCBool.html#v:consumed2",
      "description": {
        "fct-descr": "\u003cp\u003eReturn the portion of the genome that has been read.\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Genetics.BRGCBool",
        "fct-package": "creatur",
        "fct-signature": "DiploidReader DiploidSequence",
        "fct-source": "src/ALife-Creatur-Genetics-BRGCBool.html#consumed2",
        "fct-type": "function",
        "title": "consumed2"
      },
      "index": {
        "description": "Return the portion of the genome that has been read",
        "hierarchy": "ALife Creatur Genetics BRGCBool",
        "module": "ALife.Creatur.Genetics.BRGCBool",
        "name": "consumed2",
        "normalized": "",
        "package": "creatur",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-BRGCBool.html#v:copy",
      "description": {
        "fct-descr": "\u003cp\u003eReturn the entire genome.\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Genetics.BRGCBool",
        "fct-package": "creatur",
        "fct-signature": "Reader Sequence",
        "fct-source": "src/ALife-Creatur-Genetics-BRGCBool.html#copy",
        "fct-type": "function",
        "title": "copy"
      },
      "index": {
        "description": "Return the entire genome",
        "hierarchy": "ALife Creatur Genetics BRGCBool",
        "module": "ALife.Creatur.Genetics.BRGCBool",
        "name": "copy",
        "normalized": "",
        "package": "creatur",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-BRGCBool.html#v:copy2",
      "description": {
        "fct-descr": "\u003cp\u003eReturn the entire genome.\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Genetics.BRGCBool",
        "fct-package": "creatur",
        "fct-signature": "DiploidReader DiploidSequence",
        "fct-source": "src/ALife-Creatur-Genetics-BRGCBool.html#copy2",
        "fct-type": "function",
        "title": "copy2"
      },
      "index": {
        "description": "Return the entire genome",
        "hierarchy": "ALife Creatur Genetics BRGCBool",
        "module": "ALife.Creatur.Genetics.BRGCBool",
        "name": "copy2",
        "normalized": "",
        "package": "creatur",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-BRGCBool.html#v:get",
      "description": {
        "fct-descr": "\u003cp\u003eReads the next gene in a sequence.\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Genetics.BRGCBool",
        "fct-package": "creatur",
        "fct-signature": "Reader (Either [String] g)",
        "fct-source": "src/ALife-Creatur-Genetics-BRGCBool.html#get",
        "fct-type": "method",
        "title": "get"
      },
      "index": {
        "description": "Reads the next gene in sequence",
        "hierarchy": "ALife Creatur Genetics BRGCBool",
        "module": "ALife.Creatur.Genetics.BRGCBool",
        "name": "get",
        "normalized": "Reader(Either[String]a)",
        "package": "creatur",
        "partial": "",
        "signature": "Reader(Either[String]g)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-BRGCBool.html#v:getAndExpress",
      "description": {
        "fct-descr": "\u003cp\u003eRead the next pair of genes from twin sequences of genetic\n   information, and return the resulting gene (after taking\n   into account any dominance relationship) and the remaining\n   (unread) portion of the two nucleotide strands.\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Genetics.BRGCBool",
        "fct-package": "creatur",
        "fct-signature": "DiploidReader (Either [String] g)",
        "fct-source": "src/ALife-Creatur-Genetics-BRGCBool.html#getAndExpress",
        "fct-type": "function",
        "title": "getAndExpress"
      },
      "index": {
        "description": "Read the next pair of genes from twin sequences of genetic information and return the resulting gene after taking into account any dominance relationship and the remaining unread portion of the two nucleotide strands",
        "hierarchy": "ALife Creatur Genetics BRGCBool",
        "module": "ALife.Creatur.Genetics.BRGCBool",
        "name": "getAndExpress",
        "normalized": "DiploidReader(Either[String]a)",
        "package": "creatur",
        "partial": "And Express",
        "signature": "DiploidReader(Either[String]g)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-BRGCBool.html#v:getAndExpressWithDefault",
      "description": {
        "fct-module": "ALife.Creatur.Genetics.BRGCBool",
        "fct-package": "creatur",
        "fct-signature": "g -\u003e DiploidReader g",
        "fct-source": "src/ALife-Creatur-Genetics-BRGCBool.html#getAndExpressWithDefault",
        "fct-type": "function",
        "title": "getAndExpressWithDefault"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Genetics BRGCBool",
        "module": "ALife.Creatur.Genetics.BRGCBool",
        "name": "getAndExpressWithDefault",
        "normalized": "a-\u003eDiploidReader a",
        "package": "creatur",
        "partial": "And Express With Default",
        "signature": "g-\u003eDiploidReader g"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-BRGCBool.html#v:getWithDefault",
      "description": {
        "fct-module": "ALife.Creatur.Genetics.BRGCBool",
        "fct-package": "creatur",
        "fct-signature": "g -\u003e Reader g",
        "fct-source": "src/ALife-Creatur-Genetics-BRGCBool.html#getWithDefault",
        "fct-type": "method",
        "title": "getWithDefault"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Genetics BRGCBool",
        "module": "ALife.Creatur.Genetics.BRGCBool",
        "name": "getWithDefault",
        "normalized": "a-\u003eReader a",
        "package": "creatur",
        "partial": "With Default",
        "signature": "g-\u003eReader g"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-BRGCBool.html#v:put",
      "description": {
        "fct-descr": "\u003cp\u003eWrites a gene to a sequence.\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Genetics.BRGCBool",
        "fct-package": "creatur",
        "fct-signature": "g -\u003e Writer ()",
        "fct-source": "src/ALife-Creatur-Genetics-BRGCBool.html#put",
        "fct-type": "method",
        "title": "put"
      },
      "index": {
        "description": "Writes gene to sequence",
        "hierarchy": "ALife Creatur Genetics BRGCBool",
        "module": "ALife.Creatur.Genetics.BRGCBool",
        "name": "put",
        "normalized": "a-\u003eWriter()",
        "package": "creatur",
        "partial": "",
        "signature": "g-\u003eWriter()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-BRGCBool.html#v:read",
      "description": {
        "fct-module": "ALife.Creatur.Genetics.BRGCBool",
        "fct-package": "creatur",
        "fct-signature": "Sequence -\u003e Either [String] g",
        "fct-source": "src/ALife-Creatur-Genetics-BRGCBool.html#read",
        "fct-type": "function",
        "title": "read"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Genetics BRGCBool",
        "module": "ALife.Creatur.Genetics.BRGCBool",
        "name": "read",
        "normalized": "Sequence-\u003eEither[String]a",
        "package": "creatur",
        "partial": "",
        "signature": "Sequence-\u003eEither[String]g"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-BRGCBool.html#v:readAndExpress",
      "description": {
        "fct-module": "ALife.Creatur.Genetics.BRGCBool",
        "fct-package": "creatur",
        "fct-signature": "DiploidSequence -\u003e Either [String] g",
        "fct-source": "src/ALife-Creatur-Genetics-BRGCBool.html#readAndExpress",
        "fct-type": "function",
        "title": "readAndExpress"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Genetics BRGCBool",
        "module": "ALife.Creatur.Genetics.BRGCBool",
        "name": "readAndExpress",
        "normalized": "DiploidSequence-\u003eEither[String]a",
        "package": "creatur",
        "partial": "And Express",
        "signature": "DiploidSequence-\u003eEither[String]g"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-BRGCBool.html#v:runDiploidReader",
      "description": {
        "fct-module": "ALife.Creatur.Genetics.BRGCBool",
        "fct-package": "creatur",
        "fct-signature": "DiploidReader g -\u003e DiploidSequence -\u003e g",
        "fct-source": "src/ALife-Creatur-Genetics-BRGCBool.html#runDiploidReader",
        "fct-type": "function",
        "title": "runDiploidReader"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Genetics BRGCBool",
        "module": "ALife.Creatur.Genetics.BRGCBool",
        "name": "runDiploidReader",
        "normalized": "DiploidReader a-\u003eDiploidSequence-\u003ea",
        "package": "creatur",
        "partial": "Diploid Reader",
        "signature": "DiploidReader g-\u003eDiploidSequence-\u003eg"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-BRGCBool.html#v:runReader",
      "description": {
        "fct-module": "ALife.Creatur.Genetics.BRGCBool",
        "fct-package": "creatur",
        "fct-signature": "Reader g -\u003e Sequence -\u003e g",
        "fct-source": "src/ALife-Creatur-Genetics-BRGCBool.html#runReader",
        "fct-type": "function",
        "title": "runReader"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Genetics BRGCBool",
        "module": "ALife.Creatur.Genetics.BRGCBool",
        "name": "runReader",
        "normalized": "Reader a-\u003eSequence-\u003ea",
        "package": "creatur",
        "partial": "Reader",
        "signature": "Reader g-\u003eSequence-\u003eg"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-BRGCBool.html#v:runWriter",
      "description": {
        "fct-module": "ALife.Creatur.Genetics.BRGCBool",
        "fct-package": "creatur",
        "fct-signature": "Writer () -\u003e Sequence",
        "fct-source": "src/ALife-Creatur-Genetics-BRGCBool.html#runWriter",
        "fct-type": "function",
        "title": "runWriter"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Genetics BRGCBool",
        "module": "ALife.Creatur.Genetics.BRGCBool",
        "name": "runWriter",
        "normalized": "Writer()-\u003eSequence",
        "package": "creatur",
        "partial": "Writer",
        "signature": "Writer()-\u003eSequence"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-BRGCBool.html#v:write",
      "description": {
        "fct-module": "ALife.Creatur.Genetics.BRGCBool",
        "fct-package": "creatur",
        "fct-signature": "x -\u003e Sequence",
        "fct-source": "src/ALife-Creatur-Genetics-BRGCBool.html#write",
        "fct-type": "function",
        "title": "write"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Genetics BRGCBool",
        "module": "ALife.Creatur.Genetics.BRGCBool",
        "name": "write",
        "normalized": "a-\u003eSequence",
        "package": "creatur",
        "partial": "",
        "signature": "x-\u003eSequence"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-BRGCWord8.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eUtilities for working with genes that are encoded as a sequence of\n bytes, using a Binary Reflected Gray Code (BRGC).\n\u003c/p\u003e\u003cp\u003eA Gray code maps values to codes in a way that guarantees that the\n codes for two consecutive values will differ by only one bit. This\n feature can be useful in evolutionary programming because the genes\n resulting from a crossover operation are likely to be similar to\n the inputs. This helps to ensure that offspring are similar to\n their parents, as any radical changes from one generation to the\n next are the result of mutation alone.\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "ALife.Creatur.Genetics.BRGCWord8",
        "fct-package": "creatur",
        "fct-signature": "module",
        "fct-source": "src/ALife-Creatur-Genetics-BRGCWord8.html",
        "fct-type": "module",
        "title": "BRGCWord8"
      },
      "index": {
        "description": "Utilities for working with genes that are encoded as sequence of bytes using Binary Reflected Gray Code BRGC Gray code maps values to codes in way that guarantees that the codes for two consecutive values will differ by only one bit This feature can be useful in evolutionary programming because the genes resulting from crossover operation are likely to be similar to the inputs This helps to ensure that offspring are similar to their parents as any radical changes from one generation to the next are the result of mutation alone",
        "hierarchy": "ALife Creatur Genetics BRGCWord8",
        "module": "ALife.Creatur.Genetics.BRGCWord8",
        "name": "BRGCWord8",
        "normalized": "",
        "package": "creatur",
        "partial": "BRGCWord",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-BRGCWord8.html#t:DiploidReader",
      "description": {
        "fct-module": "ALife.Creatur.Genetics.BRGCWord8",
        "fct-package": "creatur",
        "fct-signature": "type",
        "fct-source": "src/ALife-Creatur-Genetics-BRGCWord8.html#DiploidReader",
        "fct-type": "type",
        "title": "DiploidReader"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Genetics BRGCWord8",
        "module": "ALife.Creatur.Genetics.BRGCWord8",
        "name": "DiploidReader",
        "normalized": "",
        "package": "creatur",
        "partial": "Diploid Reader",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-BRGCWord8.html#t:DiploidSequence",
      "description": {
        "fct-module": "ALife.Creatur.Genetics.BRGCWord8",
        "fct-package": "creatur",
        "fct-signature": "type",
        "fct-source": "src/ALife-Creatur-Genetics-BRGCWord8.html#DiploidSequence",
        "fct-type": "type",
        "title": "DiploidSequence"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Genetics BRGCWord8",
        "module": "ALife.Creatur.Genetics.BRGCWord8",
        "name": "DiploidSequence",
        "normalized": "",
        "package": "creatur",
        "partial": "Diploid Sequence",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-BRGCWord8.html#t:Genetic",
      "description": {
        "fct-descr": "\u003cp\u003eA class representing anything which is represented in, and\n   determined by, an agent's genome.\n   This might include traits, parameters, \u003ca\u003eorgans\u003c/a\u003e (components of\n   agents), or even entire agents.\n   Instances of this class can be thought of as genes, i.e.,\n   instructions for building an agent.\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Genetics.BRGCWord8",
        "fct-package": "creatur",
        "fct-signature": "class",
        "fct-source": "src/ALife-Creatur-Genetics-BRGCWord8.html#Genetic",
        "fct-type": "class",
        "title": "Genetic"
      },
      "index": {
        "description": "class representing anything which is represented in and determined by an agent genome This might include traits parameters organs components of agents or even entire agents Instances of this class can be thought of as genes i.e instructions for building an agent",
        "hierarchy": "ALife Creatur Genetics BRGCWord8",
        "module": "ALife.Creatur.Genetics.BRGCWord8",
        "name": "Genetic",
        "normalized": "",
        "package": "creatur",
        "partial": "Genetic",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-BRGCWord8.html#t:Reader",
      "description": {
        "fct-module": "ALife.Creatur.Genetics.BRGCWord8",
        "fct-package": "creatur",
        "fct-signature": "type",
        "fct-source": "src/ALife-Creatur-Genetics-BRGCWord8.html#Reader",
        "fct-type": "type",
        "title": "Reader"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Genetics BRGCWord8",
        "module": "ALife.Creatur.Genetics.BRGCWord8",
        "name": "Reader",
        "normalized": "",
        "package": "creatur",
        "partial": "Reader",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-BRGCWord8.html#t:Sequence",
      "description": {
        "fct-module": "ALife.Creatur.Genetics.BRGCWord8",
        "fct-package": "creatur",
        "fct-signature": "type",
        "fct-source": "src/ALife-Creatur-Genetics-BRGCWord8.html#Sequence",
        "fct-type": "type",
        "title": "Sequence"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Genetics BRGCWord8",
        "module": "ALife.Creatur.Genetics.BRGCWord8",
        "name": "Sequence",
        "normalized": "",
        "package": "creatur",
        "partial": "Sequence",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-BRGCWord8.html#t:Writer",
      "description": {
        "fct-module": "ALife.Creatur.Genetics.BRGCWord8",
        "fct-package": "creatur",
        "fct-signature": "type",
        "fct-source": "src/ALife-Creatur-Genetics-BRGCWord8.html#Writer",
        "fct-type": "type",
        "title": "Writer"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Genetics BRGCWord8",
        "module": "ALife.Creatur.Genetics.BRGCWord8",
        "name": "Writer",
        "normalized": "",
        "package": "creatur",
        "partial": "Writer",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-BRGCWord8.html#v:consumed",
      "description": {
        "fct-descr": "\u003cp\u003eReturn the portion of the genome that has been read.\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Genetics.BRGCWord8",
        "fct-package": "creatur",
        "fct-signature": "Reader Sequence",
        "fct-source": "src/ALife-Creatur-Genetics-BRGCWord8.html#consumed",
        "fct-type": "function",
        "title": "consumed"
      },
      "index": {
        "description": "Return the portion of the genome that has been read",
        "hierarchy": "ALife Creatur Genetics BRGCWord8",
        "module": "ALife.Creatur.Genetics.BRGCWord8",
        "name": "consumed",
        "normalized": "",
        "package": "creatur",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-BRGCWord8.html#v:consumed2",
      "description": {
        "fct-descr": "\u003cp\u003eReturn the portion of the genome that has been read.\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Genetics.BRGCWord8",
        "fct-package": "creatur",
        "fct-signature": "DiploidReader DiploidSequence",
        "fct-source": "src/ALife-Creatur-Genetics-BRGCWord8.html#consumed2",
        "fct-type": "function",
        "title": "consumed2"
      },
      "index": {
        "description": "Return the portion of the genome that has been read",
        "hierarchy": "ALife Creatur Genetics BRGCWord8",
        "module": "ALife.Creatur.Genetics.BRGCWord8",
        "name": "consumed2",
        "normalized": "",
        "package": "creatur",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-BRGCWord8.html#v:copy",
      "description": {
        "fct-descr": "\u003cp\u003eReturn the entire genome.\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Genetics.BRGCWord8",
        "fct-package": "creatur",
        "fct-signature": "Reader Sequence",
        "fct-source": "src/ALife-Creatur-Genetics-BRGCWord8.html#copy",
        "fct-type": "function",
        "title": "copy"
      },
      "index": {
        "description": "Return the entire genome",
        "hierarchy": "ALife Creatur Genetics BRGCWord8",
        "module": "ALife.Creatur.Genetics.BRGCWord8",
        "name": "copy",
        "normalized": "",
        "package": "creatur",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-BRGCWord8.html#v:copy2",
      "description": {
        "fct-descr": "\u003cp\u003eReturn the entire genome.\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Genetics.BRGCWord8",
        "fct-package": "creatur",
        "fct-signature": "DiploidReader DiploidSequence",
        "fct-source": "src/ALife-Creatur-Genetics-BRGCWord8.html#copy2",
        "fct-type": "function",
        "title": "copy2"
      },
      "index": {
        "description": "Return the entire genome",
        "hierarchy": "ALife Creatur Genetics BRGCWord8",
        "module": "ALife.Creatur.Genetics.BRGCWord8",
        "name": "copy2",
        "normalized": "",
        "package": "creatur",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-BRGCWord8.html#v:get",
      "description": {
        "fct-descr": "\u003cp\u003eReads the next gene in a sequence.\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Genetics.BRGCWord8",
        "fct-package": "creatur",
        "fct-signature": "Reader (Either [String] g)",
        "fct-source": "src/ALife-Creatur-Genetics-BRGCWord8.html#get",
        "fct-type": "method",
        "title": "get"
      },
      "index": {
        "description": "Reads the next gene in sequence",
        "hierarchy": "ALife Creatur Genetics BRGCWord8",
        "module": "ALife.Creatur.Genetics.BRGCWord8",
        "name": "get",
        "normalized": "Reader(Either[String]a)",
        "package": "creatur",
        "partial": "",
        "signature": "Reader(Either[String]g)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-BRGCWord8.html#v:getAndExpress",
      "description": {
        "fct-descr": "\u003cp\u003eRead the next pair of genes from twin sequences of genetic\n   information, and return the resulting gene (after taking\n   into account any dominance relationship) and the remaining\n   (unread) portion of the two nucleotide strands.\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Genetics.BRGCWord8",
        "fct-package": "creatur",
        "fct-signature": "DiploidReader (Either [String] g)",
        "fct-source": "src/ALife-Creatur-Genetics-BRGCWord8.html#getAndExpress",
        "fct-type": "function",
        "title": "getAndExpress"
      },
      "index": {
        "description": "Read the next pair of genes from twin sequences of genetic information and return the resulting gene after taking into account any dominance relationship and the remaining unread portion of the two nucleotide strands",
        "hierarchy": "ALife Creatur Genetics BRGCWord8",
        "module": "ALife.Creatur.Genetics.BRGCWord8",
        "name": "getAndExpress",
        "normalized": "DiploidReader(Either[String]a)",
        "package": "creatur",
        "partial": "And Express",
        "signature": "DiploidReader(Either[String]g)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-BRGCWord8.html#v:getAndExpressWithDefault",
      "description": {
        "fct-module": "ALife.Creatur.Genetics.BRGCWord8",
        "fct-package": "creatur",
        "fct-signature": "g -\u003e DiploidReader g",
        "fct-source": "src/ALife-Creatur-Genetics-BRGCWord8.html#getAndExpressWithDefault",
        "fct-type": "function",
        "title": "getAndExpressWithDefault"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Genetics BRGCWord8",
        "module": "ALife.Creatur.Genetics.BRGCWord8",
        "name": "getAndExpressWithDefault",
        "normalized": "a-\u003eDiploidReader a",
        "package": "creatur",
        "partial": "And Express With Default",
        "signature": "g-\u003eDiploidReader g"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-BRGCWord8.html#v:getRawWord8",
      "description": {
        "fct-descr": "\u003cp\u003eRead a Word8 value from the genome without decoding it\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Genetics.BRGCWord8",
        "fct-package": "creatur",
        "fct-signature": "Reader (Either [String] Word8)",
        "fct-source": "src/ALife-Creatur-Genetics-BRGCWord8.html#getRawWord8",
        "fct-type": "function",
        "title": "getRawWord8"
      },
      "index": {
        "description": "Read Word8 value from the genome without decoding it",
        "hierarchy": "ALife Creatur Genetics BRGCWord8",
        "module": "ALife.Creatur.Genetics.BRGCWord8",
        "name": "getRawWord8",
        "normalized": "Reader(Either[String]Word)",
        "package": "creatur",
        "partial": "Raw Word",
        "signature": "Reader(Either[String]Word)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-BRGCWord8.html#v:getRawWord8s",
      "description": {
        "fct-descr": "\u003cp\u003eRead a raw sequence of Word8 values from the genome\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Genetics.BRGCWord8",
        "fct-package": "creatur",
        "fct-signature": "Int -\u003e Reader (Either [String] [Word8])",
        "fct-source": "src/ALife-Creatur-Genetics-BRGCWord8.html#getRawWord8s",
        "fct-type": "function",
        "title": "getRawWord8s"
      },
      "index": {
        "description": "Read raw sequence of Word8 values from the genome",
        "hierarchy": "ALife Creatur Genetics BRGCWord8",
        "module": "ALife.Creatur.Genetics.BRGCWord8",
        "name": "getRawWord8s",
        "normalized": "Int-\u003eReader(Either[String][Word])",
        "package": "creatur",
        "partial": "Raw Word",
        "signature": "Int-\u003eReader(Either[String][Word])"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-BRGCWord8.html#v:getWithDefault",
      "description": {
        "fct-module": "ALife.Creatur.Genetics.BRGCWord8",
        "fct-package": "creatur",
        "fct-signature": "g -\u003e Reader g",
        "fct-source": "src/ALife-Creatur-Genetics-BRGCWord8.html#getWithDefault",
        "fct-type": "method",
        "title": "getWithDefault"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Genetics BRGCWord8",
        "module": "ALife.Creatur.Genetics.BRGCWord8",
        "name": "getWithDefault",
        "normalized": "a-\u003eReader a",
        "package": "creatur",
        "partial": "With Default",
        "signature": "g-\u003eReader g"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-BRGCWord8.html#v:put",
      "description": {
        "fct-descr": "\u003cp\u003eWrites a gene to a sequence.\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Genetics.BRGCWord8",
        "fct-package": "creatur",
        "fct-signature": "g -\u003e Writer ()",
        "fct-source": "src/ALife-Creatur-Genetics-BRGCWord8.html#put",
        "fct-type": "method",
        "title": "put"
      },
      "index": {
        "description": "Writes gene to sequence",
        "hierarchy": "ALife Creatur Genetics BRGCWord8",
        "module": "ALife.Creatur.Genetics.BRGCWord8",
        "name": "put",
        "normalized": "a-\u003eWriter()",
        "package": "creatur",
        "partial": "",
        "signature": "g-\u003eWriter()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-BRGCWord8.html#v:putRawWord8",
      "description": {
        "fct-descr": "\u003cp\u003eWrite a Word8 value to the genome without encoding it\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Genetics.BRGCWord8",
        "fct-package": "creatur",
        "fct-signature": "Word8 -\u003e Writer ()",
        "fct-source": "src/ALife-Creatur-Genetics-BRGCWord8.html#putRawWord8",
        "fct-type": "function",
        "title": "putRawWord8"
      },
      "index": {
        "description": "Write Word8 value to the genome without encoding it",
        "hierarchy": "ALife Creatur Genetics BRGCWord8",
        "module": "ALife.Creatur.Genetics.BRGCWord8",
        "name": "putRawWord8",
        "normalized": "Word-\u003eWriter()",
        "package": "creatur",
        "partial": "Raw Word",
        "signature": "Word-\u003eWriter()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-BRGCWord8.html#v:putRawWord8s",
      "description": {
        "fct-descr": "\u003cp\u003eWrite a raw sequence of Word8 values to the genome\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Genetics.BRGCWord8",
        "fct-package": "creatur",
        "fct-signature": "[Word8] -\u003e Writer ()",
        "fct-source": "src/ALife-Creatur-Genetics-BRGCWord8.html#putRawWord8s",
        "fct-type": "function",
        "title": "putRawWord8s"
      },
      "index": {
        "description": "Write raw sequence of Word8 values to the genome",
        "hierarchy": "ALife Creatur Genetics BRGCWord8",
        "module": "ALife.Creatur.Genetics.BRGCWord8",
        "name": "putRawWord8s",
        "normalized": "[Word]-\u003eWriter()",
        "package": "creatur",
        "partial": "Raw Word",
        "signature": "[Word]-\u003eWriter()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-BRGCWord8.html#v:read",
      "description": {
        "fct-module": "ALife.Creatur.Genetics.BRGCWord8",
        "fct-package": "creatur",
        "fct-signature": "Sequence -\u003e Either [String] g",
        "fct-source": "src/ALife-Creatur-Genetics-BRGCWord8.html#read",
        "fct-type": "function",
        "title": "read"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Genetics BRGCWord8",
        "module": "ALife.Creatur.Genetics.BRGCWord8",
        "name": "read",
        "normalized": "Sequence-\u003eEither[String]a",
        "package": "creatur",
        "partial": "",
        "signature": "Sequence-\u003eEither[String]g"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-BRGCWord8.html#v:readAndExpress",
      "description": {
        "fct-module": "ALife.Creatur.Genetics.BRGCWord8",
        "fct-package": "creatur",
        "fct-signature": "DiploidSequence -\u003e Either [String] g",
        "fct-source": "src/ALife-Creatur-Genetics-BRGCWord8.html#readAndExpress",
        "fct-type": "function",
        "title": "readAndExpress"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Genetics BRGCWord8",
        "module": "ALife.Creatur.Genetics.BRGCWord8",
        "name": "readAndExpress",
        "normalized": "DiploidSequence-\u003eEither[String]a",
        "package": "creatur",
        "partial": "And Express",
        "signature": "DiploidSequence-\u003eEither[String]g"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-BRGCWord8.html#v:runDiploidReader",
      "description": {
        "fct-module": "ALife.Creatur.Genetics.BRGCWord8",
        "fct-package": "creatur",
        "fct-signature": "DiploidReader g -\u003e DiploidSequence -\u003e g",
        "fct-source": "src/ALife-Creatur-Genetics-BRGCWord8.html#runDiploidReader",
        "fct-type": "function",
        "title": "runDiploidReader"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Genetics BRGCWord8",
        "module": "ALife.Creatur.Genetics.BRGCWord8",
        "name": "runDiploidReader",
        "normalized": "DiploidReader a-\u003eDiploidSequence-\u003ea",
        "package": "creatur",
        "partial": "Diploid Reader",
        "signature": "DiploidReader g-\u003eDiploidSequence-\u003eg"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-BRGCWord8.html#v:runReader",
      "description": {
        "fct-module": "ALife.Creatur.Genetics.BRGCWord8",
        "fct-package": "creatur",
        "fct-signature": "Reader g -\u003e Sequence -\u003e g",
        "fct-source": "src/ALife-Creatur-Genetics-BRGCWord8.html#runReader",
        "fct-type": "function",
        "title": "runReader"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Genetics BRGCWord8",
        "module": "ALife.Creatur.Genetics.BRGCWord8",
        "name": "runReader",
        "normalized": "Reader a-\u003eSequence-\u003ea",
        "package": "creatur",
        "partial": "Reader",
        "signature": "Reader g-\u003eSequence-\u003eg"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-BRGCWord8.html#v:runWriter",
      "description": {
        "fct-module": "ALife.Creatur.Genetics.BRGCWord8",
        "fct-package": "creatur",
        "fct-signature": "Writer () -\u003e Sequence",
        "fct-source": "src/ALife-Creatur-Genetics-BRGCWord8.html#runWriter",
        "fct-type": "function",
        "title": "runWriter"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Genetics BRGCWord8",
        "module": "ALife.Creatur.Genetics.BRGCWord8",
        "name": "runWriter",
        "normalized": "Writer()-\u003eSequence",
        "package": "creatur",
        "partial": "Writer",
        "signature": "Writer()-\u003eSequence"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-BRGCWord8.html#v:write",
      "description": {
        "fct-module": "ALife.Creatur.Genetics.BRGCWord8",
        "fct-package": "creatur",
        "fct-signature": "x -\u003e Sequence",
        "fct-source": "src/ALife-Creatur-Genetics-BRGCWord8.html#write",
        "fct-type": "function",
        "title": "write"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Genetics BRGCWord8",
        "module": "ALife.Creatur.Genetics.BRGCWord8",
        "name": "write",
        "normalized": "a-\u003eSequence",
        "package": "creatur",
        "partial": "",
        "signature": "x-\u003eSequence"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-Code.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eLookup table for encoding genes.\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "ALife.Creatur.Genetics.Code",
        "fct-package": "creatur",
        "fct-signature": "module",
        "fct-source": "src/ALife-Creatur-Genetics-Code.html",
        "fct-type": "module",
        "title": "Code"
      },
      "index": {
        "description": "Lookup table for encoding genes",
        "hierarchy": "ALife Creatur Genetics Code",
        "module": "ALife.Creatur.Genetics.Code",
        "name": "Code",
        "normalized": "",
        "package": "creatur",
        "partial": "Code",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-Code.html#t:Code",
      "description": {
        "fct-descr": "\u003cp\u003eAn encoding scheme.\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Genetics.Code",
        "fct-package": "creatur",
        "fct-signature": "data",
        "fct-source": "src/ALife-Creatur-Genetics-Code.html#Code",
        "fct-type": "data",
        "title": "Code"
      },
      "index": {
        "description": "An encoding scheme",
        "hierarchy": "ALife Creatur Genetics Code",
        "module": "ALife.Creatur.Genetics.Code",
        "name": "Code",
        "normalized": "",
        "package": "creatur",
        "partial": "Code",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-Code.html#v:Code",
      "description": {
        "fct-module": "ALife.Creatur.Genetics.Code",
        "fct-package": "creatur",
        "fct-signature": "Code",
        "fct-source": "src/ALife-Creatur-Genetics-Code.html#Code",
        "fct-type": "function",
        "title": "Code"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Genetics Code",
        "module": "ALife.Creatur.Genetics.Code",
        "name": "Code",
        "normalized": "",
        "package": "creatur",
        "partial": "Code",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-Code.html#v:cSize",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "ALife.Creatur.Genetics.Code",
        "fct-package": "creatur",
        "fct-signature": "Int",
        "fct-source": "src/ALife-Creatur-Genetics-Code.html#Code",
        "fct-type": "function",
        "title": "cSize"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Genetics Code",
        "module": "ALife.Creatur.Genetics.Code",
        "name": "cSize",
        "normalized": "",
        "package": "creatur",
        "partial": "Size",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-Code.html#v:cTable",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "ALife.Creatur.Genetics.Code",
        "fct-package": "creatur",
        "fct-signature": "[(a, [b])]",
        "fct-source": "src/ALife-Creatur-Genetics-Code.html#Code",
        "fct-type": "function",
        "title": "cTable"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Genetics Code",
        "module": "ALife.Creatur.Genetics.Code",
        "name": "cTable",
        "normalized": "[(a,[b])]",
        "package": "creatur",
        "partial": "Table",
        "signature": "[(a,[b])]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-Code.html#v:decode",
      "description": {
        "fct-descr": "\u003cp\u003eReturns the value corresponding to a sequence of letters in the\n   code alphabet.\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Genetics.Code",
        "fct-package": "creatur",
        "fct-signature": "Code a b -\u003e [b] -\u003e Maybe a",
        "fct-source": "src/ALife-Creatur-Genetics-Code.html#decode",
        "fct-type": "function",
        "title": "decode"
      },
      "index": {
        "description": "Returns the value corresponding to sequence of letters in the code alphabet",
        "hierarchy": "ALife Creatur Genetics Code",
        "module": "ALife.Creatur.Genetics.Code",
        "name": "decode",
        "normalized": "Code a b-\u003e[b]-\u003eMaybe a",
        "package": "creatur",
        "partial": "",
        "signature": "Code a b-\u003e[b]-\u003eMaybe a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-Code.html#v:decodeNext",
      "description": {
        "fct-descr": "\u003cp\u003eDecodes a value from a sequence, and returns the value and the\n   unused portion of the sequence.\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Genetics.Code",
        "fct-package": "creatur",
        "fct-signature": "Code a b -\u003e [b] -\u003e Maybe (a, [b])",
        "fct-source": "src/ALife-Creatur-Genetics-Code.html#decodeNext",
        "fct-type": "function",
        "title": "decodeNext"
      },
      "index": {
        "description": "Decodes value from sequence and returns the value and the unused portion of the sequence",
        "hierarchy": "ALife Creatur Genetics Code",
        "module": "ALife.Creatur.Genetics.Code",
        "name": "decodeNext",
        "normalized": "Code a b-\u003e[b]-\u003eMaybe(a,[b])",
        "package": "creatur",
        "partial": "Next",
        "signature": "Code a b-\u003e[b]-\u003eMaybe(a,[b])"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-Code.html#v:encode",
      "description": {
        "fct-descr": "\u003cp\u003eEncodes a value as a sequence of letters in the code alphabet.\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Genetics.Code",
        "fct-package": "creatur",
        "fct-signature": "Code a b -\u003e a -\u003e Maybe [b]",
        "fct-source": "src/ALife-Creatur-Genetics-Code.html#encode",
        "fct-type": "function",
        "title": "encode"
      },
      "index": {
        "description": "Encodes value as sequence of letters in the code alphabet",
        "hierarchy": "ALife Creatur Genetics Code",
        "module": "ALife.Creatur.Genetics.Code",
        "name": "encode",
        "normalized": "Code a b-\u003ea-\u003eMaybe[b]",
        "package": "creatur",
        "partial": "",
        "signature": "Code a b-\u003ea-\u003eMaybe[b]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-Code.html#v:encodeNext",
      "description": {
        "fct-descr": "\u003cp\u003eEncodes a value and append it to the sequence provided. If the\n   value cannot be encoded, the sequence is returned unmodified.\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Genetics.Code",
        "fct-package": "creatur",
        "fct-signature": "Code a b -\u003e a -\u003e [b] -\u003e [b]",
        "fct-source": "src/ALife-Creatur-Genetics-Code.html#encodeNext",
        "fct-type": "function",
        "title": "encodeNext"
      },
      "index": {
        "description": "Encodes value and append it to the sequence provided If the value cannot be encoded the sequence is returned unmodified",
        "hierarchy": "ALife Creatur Genetics Code",
        "module": "ALife.Creatur.Genetics.Code",
        "name": "encodeNext",
        "normalized": "Code a b-\u003ea-\u003e[b]-\u003e[b]",
        "package": "creatur",
        "partial": "Next",
        "signature": "Code a b-\u003ea-\u003e[b]-\u003e[b]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-Diploid.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eTODO\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "ALife.Creatur.Genetics.Diploid",
        "fct-package": "creatur",
        "fct-signature": "module",
        "fct-source": "src/ALife-Creatur-Genetics-Diploid.html",
        "fct-type": "module",
        "title": "Diploid"
      },
      "index": {
        "description": "TODO",
        "hierarchy": "ALife Creatur Genetics Diploid",
        "module": "ALife.Creatur.Genetics.Diploid",
        "name": "Diploid",
        "normalized": "",
        "package": "creatur",
        "partial": "Diploid",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-Diploid.html#t:Diploid",
      "description": {
        "fct-descr": "\u003cp\u003eA \u003cem\u003ediploid\u003c/em\u003e agent has two complete sets of genetic instructions.\n   Instances of this class can be thought of as paired genes or\n   paired instructions for building an agent.\n   When two instructions in a pair differ, \u003cem\u003edominance\u003c/em\u003e relationships\n   determine how the genes will be \u003cem\u003eexpressed\u003c/em\u003e in the agent.\n   Minimal complete definition: \u003ccode\u003e\u003ccode\u003e\u003ca\u003eexpress\u003c/a\u003e\u003c/code\u003e\u003c/code\u003e.\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Genetics.Diploid",
        "fct-package": "creatur",
        "fct-signature": "class",
        "fct-source": "src/ALife-Creatur-Genetics-Diploid.html#Diploid",
        "fct-type": "class",
        "title": "Diploid"
      },
      "index": {
        "description": "diploid agent has two complete sets of genetic instructions Instances of this class can be thought of as paired genes or paired instructions for building an agent When two instructions in pair differ dominance relationships determine how the genes will be expressed in the agent Minimal complete definition express",
        "hierarchy": "ALife Creatur Genetics Diploid",
        "module": "ALife.Creatur.Genetics.Diploid",
        "name": "Diploid",
        "normalized": "",
        "package": "creatur",
        "partial": "Diploid",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-Diploid.html#v:express",
      "description": {
        "fct-descr": "\u003cp\u003eGiven two possible forms of a gene, \u003ccode\u003e\u003ccode\u003e\u003ca\u003eexpress\u003c/a\u003e\u003c/code\u003e\u003c/code\u003e takes into\n   account any dominance relationship, and returns a gene\n   representing the result.\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Genetics.Diploid",
        "fct-package": "creatur",
        "fct-signature": "g -\u003e g -\u003e g",
        "fct-source": "src/ALife-Creatur-Genetics-Diploid.html#express",
        "fct-type": "method",
        "title": "express"
      },
      "index": {
        "description": "Given two possible forms of gene express takes into account any dominance relationship and returns gene representing the result",
        "hierarchy": "ALife Creatur Genetics Diploid",
        "module": "ALife.Creatur.Genetics.Diploid",
        "name": "express",
        "normalized": "a-\u003ea-\u003ea",
        "package": "creatur",
        "partial": "",
        "signature": "g-\u003eg-\u003eg"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-Diploid.html#v:expressMaybe",
      "description": {
        "fct-module": "ALife.Creatur.Genetics.Diploid",
        "fct-package": "creatur",
        "fct-signature": "Maybe g -\u003e Maybe g -\u003e Maybe g",
        "fct-source": "src/ALife-Creatur-Genetics-Diploid.html#expressMaybe",
        "fct-type": "function",
        "title": "expressMaybe"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Genetics Diploid",
        "module": "ALife.Creatur.Genetics.Diploid",
        "name": "expressMaybe",
        "normalized": "Maybe a-\u003eMaybe a-\u003eMaybe a",
        "package": "creatur",
        "partial": "Maybe",
        "signature": "Maybe g-\u003eMaybe g-\u003eMaybe g"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-Recombination.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eProvides a mechanism to break apart and rejoin sequences of data. \n Inspired by DNA recombination in biology, this technique can be used\n to recombine \"genetic\" instructions for building artificial life.\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "ALife.Creatur.Genetics.Recombination",
        "fct-package": "creatur",
        "fct-signature": "module",
        "fct-source": "src/ALife-Creatur-Genetics-Recombination.html",
        "fct-type": "module",
        "title": "Recombination"
      },
      "index": {
        "description": "Provides mechanism to break apart and rejoin sequences of data Inspired by DNA recombination in biology this technique can be used to recombine genetic instructions for building artificial life",
        "hierarchy": "ALife Creatur Genetics Recombination",
        "module": "ALife.Creatur.Genetics.Recombination",
        "name": "Recombination",
        "normalized": "",
        "package": "creatur",
        "partial": "Recombination",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-Recombination.html#v:crossover",
      "description": {
        "fct-descr": "\u003cp\u003eCuts two lists at the specified location, swaps the ends, and \n   splices them. This is a variation of \u003ccode\u003e\u003ca\u003ecutAndSplice\u003c/a\u003e\u003c/code\u003e where n == m.\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Genetics.Recombination",
        "fct-package": "creatur",
        "fct-signature": "Int -\u003e ([a], [a]) -\u003e ([a], [a])",
        "fct-source": "src/ALife-Creatur-Genetics-Recombination.html#crossover",
        "fct-type": "function",
        "title": "crossover"
      },
      "index": {
        "description": "Cuts two lists at the specified location swaps the ends and splices them This is variation of cutAndSplice where",
        "hierarchy": "ALife Creatur Genetics Recombination",
        "module": "ALife.Creatur.Genetics.Recombination",
        "name": "crossover",
        "normalized": "Int-\u003e([a],[a])-\u003e([a],[a])",
        "package": "creatur",
        "partial": "",
        "signature": "Int-\u003e([a],[a])-\u003e([a],[a])"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-Recombination.html#v:cutAndSplice",
      "description": {
        "fct-descr": "\u003cp\u003eCuts two lists at the specified locations, swaps the ends, and \n   splices them. The resulting lists will be:\n   \u003ccode\u003e\n     a[0..n-1] ++ b[m..]\n     b[0..m-1] ++ a[n..]\n   \u003c/code\u003e\n   Here are some examples.\n   \u003ccode\u003e\n     \u003cem\u003eExpression\u003c/em\u003e                               \u003cem\u003eResult\u003c/em\u003e\n     \u003ccode\u003e\u003ca\u003ecutAndSplice\u003c/a\u003e\u003c/code\u003e 2 5 (\"abcdef\", \"ABCDEF\")    (\"abF\",\"ABCDEcdef\")\n     \u003ccode\u003e\u003ca\u003ecutAndSplice\u003c/a\u003e\u003c/code\u003e 3 1 (\"abcd\", \"ABCDEFG\")     (\"abcBCDEFG\",\"Ad\")\n     \u003ccode\u003e\u003ca\u003ecutAndSplice\u003c/a\u003e\u003c/code\u003e 4 4 (\"abcdef\", \"ABCDEF\")    (\"abcdEF\",\"ABCDef\")\n   \u003c/code\u003e\n   If n \u003c= 0 or m \u003c= 0, the corresponding input list will be completely\n   transferred to the other.\n   \u003ccode\u003e\n     \u003cem\u003eExpression\u003c/em\u003e                               \u003cem\u003eResult\u003c/em\u003e\n     \u003ccode\u003e\u003ca\u003ecutAndSplice\u003c/a\u003e\u003c/code\u003e 0 4 (\"abcdef\", \"ABCDEF\")    (\"EF\",\"ABCDabcdef\")\n     \u003ccode\u003e\u003ca\u003ecutAndSplice\u003c/a\u003e\u003c/code\u003e (-2) 4 (\"abcd\", \"ABCDEFGH\") (\"EFGH\",\"ABCDabcd\")\n     \u003ccode\u003e\u003ca\u003ecutAndSplice\u003c/a\u003e\u003c/code\u003e 5 0 (\"abcdef\", \"ABCDEF\")    (\"abcdeABCDEF\",\"f\")\n   \u003c/code\u003e\n   If n or m are greater than or equal to length of the corresponding list,\n   that list will not be transferred.\n   \u003ccode\u003e\n     \u003cem\u003eExpression\u003c/em\u003e                               \u003cem\u003eResult\u003c/em\u003e\n     \u003ccode\u003e\u003ca\u003ecutAndSplice\u003c/a\u003e\u003c/code\u003e 10 0 (\"abcdef\", \"ABCDEF\")   (\"abcdefABCDEF\",\"\")\n     \u003ccode\u003e\u003ca\u003ecutAndSplice\u003c/a\u003e\u003c/code\u003e 0 0 (\"\", \"ABCDEF\")          (\"ABCDEF\",\"\")\n   \u003c/code\u003e\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Genetics.Recombination",
        "fct-package": "creatur",
        "fct-signature": "Int -\u003e Int -\u003e ([a], [a]) -\u003e ([a], [a])",
        "fct-source": "src/ALife-Creatur-Genetics-Recombination.html#cutAndSplice",
        "fct-type": "function",
        "title": "cutAndSplice"
      },
      "index": {
        "description": "Cuts two lists at the specified locations swaps the ends and splices them The resulting lists will be n-1 m-1 Here are some examples Expression Result cutAndSplice abcdef ABCDEF abF ABCDEcdef cutAndSplice abcd ABCDEFG abcBCDEFG Ad cutAndSplice abcdef ABCDEF abcdEF ABCDef If or the corresponding input list will be completely transferred to the other Expression Result cutAndSplice abcdef ABCDEF EF ABCDabcdef cutAndSplice abcd ABCDEFGH EFGH ABCDabcd cutAndSplice abcdef ABCDEF abcdeABCDEF If or are greater than or equal to length of the corresponding list that list will not be transferred Expression Result cutAndSplice abcdef ABCDEF abcdefABCDEF cutAndSplice ABCDEF ABCDEF",
        "hierarchy": "ALife Creatur Genetics Recombination",
        "module": "ALife.Creatur.Genetics.Recombination",
        "name": "cutAndSplice",
        "normalized": "Int-\u003eInt-\u003e([a],[a])-\u003e([a],[a])",
        "package": "creatur",
        "partial": "And Splice",
        "signature": "Int-\u003eInt-\u003e([a],[a])-\u003e([a],[a])"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-Recombination.html#v:mutateList",
      "description": {
        "fct-descr": "\u003cp\u003eMutates a random element in the list.\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Genetics.Recombination",
        "fct-package": "creatur",
        "fct-signature": "[n] -\u003e Rand g [n]",
        "fct-source": "src/ALife-Creatur-Genetics-Recombination.html#mutateList",
        "fct-type": "function",
        "title": "mutateList"
      },
      "index": {
        "description": "Mutates random element in the list",
        "hierarchy": "ALife Creatur Genetics Recombination",
        "module": "ALife.Creatur.Genetics.Recombination",
        "name": "mutateList",
        "normalized": "[a]-\u003eRand b[a]",
        "package": "creatur",
        "partial": "List",
        "signature": "[n]-\u003eRand g[n]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-Recombination.html#v:mutatePairedLists",
      "description": {
        "fct-descr": "\u003cp\u003eMutates a random element in one list in a pair.\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Genetics.Recombination",
        "fct-package": "creatur",
        "fct-signature": "([n], [n]) -\u003e Rand g ([n], [n])",
        "fct-source": "src/ALife-Creatur-Genetics-Recombination.html#mutatePairedLists",
        "fct-type": "function",
        "title": "mutatePairedLists"
      },
      "index": {
        "description": "Mutates random element in one list in pair",
        "hierarchy": "ALife Creatur Genetics Recombination",
        "module": "ALife.Creatur.Genetics.Recombination",
        "name": "mutatePairedLists",
        "normalized": "([a],[a])-\u003eRand b([a],[a])",
        "package": "creatur",
        "partial": "Paired Lists",
        "signature": "([n],[n])-\u003eRand g([n],[n])"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-Recombination.html#v:randomCrossover",
      "description": {
        "fct-descr": "\u003cp\u003eSame as \u003ccode\u003e\u003ccode\u003e\u003ca\u003ecrossover\u003c/a\u003e\u003c/code\u003e\u003c/code\u003e, except that the location is chosen at \n   random.\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Genetics.Recombination",
        "fct-package": "creatur",
        "fct-signature": "([a], [a]) -\u003e Rand g ([a], [a])",
        "fct-source": "src/ALife-Creatur-Genetics-Recombination.html#randomCrossover",
        "fct-type": "function",
        "title": "randomCrossover"
      },
      "index": {
        "description": "Same as crossover except that the location is chosen at random",
        "hierarchy": "ALife Creatur Genetics Recombination",
        "module": "ALife.Creatur.Genetics.Recombination",
        "name": "randomCrossover",
        "normalized": "([a],[a])-\u003eRand b([a],[a])",
        "package": "creatur",
        "partial": "Crossover",
        "signature": "([a],[a])-\u003eRand g([a],[a])"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-Recombination.html#v:randomCutAndSplice",
      "description": {
        "fct-descr": "\u003cp\u003eSame as \u003ccode\u003e\u003ccode\u003e\u003ca\u003ecutAndSplice\u003c/a\u003e\u003c/code\u003e\u003c/code\u003e, except that the two locations are\n   chosen at random.\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Genetics.Recombination",
        "fct-package": "creatur",
        "fct-signature": "([a], [a]) -\u003e Rand g ([a], [a])",
        "fct-source": "src/ALife-Creatur-Genetics-Recombination.html#randomCutAndSplice",
        "fct-type": "function",
        "title": "randomCutAndSplice"
      },
      "index": {
        "description": "Same as cutAndSplice except that the two locations are chosen at random",
        "hierarchy": "ALife Creatur Genetics Recombination",
        "module": "ALife.Creatur.Genetics.Recombination",
        "name": "randomCutAndSplice",
        "normalized": "([a],[a])-\u003eRand b([a],[a])",
        "package": "creatur",
        "partial": "Cut And Splice",
        "signature": "([a],[a])-\u003eRand g([a],[a])"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-Recombination.html#v:randomOneOfList",
      "description": {
        "fct-module": "ALife.Creatur.Genetics.Recombination",
        "fct-package": "creatur",
        "fct-signature": "[a] -\u003e Rand g a",
        "fct-source": "src/ALife-Creatur-Genetics-Recombination.html#randomOneOfList",
        "fct-type": "function",
        "title": "randomOneOfList"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Genetics Recombination",
        "module": "ALife.Creatur.Genetics.Recombination",
        "name": "randomOneOfList",
        "normalized": "[a]-\u003eRand b a",
        "package": "creatur",
        "partial": "One Of List",
        "signature": "[a]-\u003eRand g a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-Recombination.html#v:randomOneOfPair",
      "description": {
        "fct-module": "ALife.Creatur.Genetics.Recombination",
        "fct-package": "creatur",
        "fct-signature": "(a, a) -\u003e Rand g a",
        "fct-source": "src/ALife-Creatur-Genetics-Recombination.html#randomOneOfPair",
        "fct-type": "function",
        "title": "randomOneOfPair"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Genetics Recombination",
        "module": "ALife.Creatur.Genetics.Recombination",
        "name": "randomOneOfPair",
        "normalized": "(a,a)-\u003eRand b a",
        "package": "creatur",
        "partial": "One Of Pair",
        "signature": "(a,a)-\u003eRand g a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-Recombination.html#v:repeatWithProbability",
      "description": {
        "fct-descr": "\u003cp\u003ePerforms an operation a random number of times.\n   The probability of repeating the operation \u003ccode\u003en\u003c/code\u003e times is \u003ccode\u003ep^n\u003c/code\u003e.\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Genetics.Recombination",
        "fct-package": "creatur",
        "fct-signature": "Double -\u003e (b -\u003e Rand g b) -\u003e b -\u003e Rand g b",
        "fct-source": "src/ALife-Creatur-Genetics-Recombination.html#repeatWithProbability",
        "fct-type": "function",
        "title": "repeatWithProbability"
      },
      "index": {
        "description": "Performs an operation random number of times The probability of repeating the operation times is",
        "hierarchy": "ALife Creatur Genetics Recombination",
        "module": "ALife.Creatur.Genetics.Recombination",
        "name": "repeatWithProbability",
        "normalized": "Double-\u003e(a-\u003eRand b a)-\u003ea-\u003eRand b a",
        "package": "creatur",
        "partial": "With Probability",
        "signature": "Double-\u003e(b-\u003eRand g b)-\u003eb-\u003eRand g b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-Recombination.html#v:withProbability",
      "description": {
        "fct-descr": "\u003cp\u003ePerforms an operation with the specified probability.\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Genetics.Recombination",
        "fct-package": "creatur",
        "fct-signature": "Double -\u003e (b -\u003e Rand g b) -\u003e b -\u003e Rand g b",
        "fct-source": "src/ALife-Creatur-Genetics-Recombination.html#withProbability",
        "fct-type": "function",
        "title": "withProbability"
      },
      "index": {
        "description": "Performs an operation with the specified probability",
        "hierarchy": "ALife Creatur Genetics Recombination",
        "module": "ALife.Creatur.Genetics.Recombination",
        "name": "withProbability",
        "normalized": "Double-\u003e(a-\u003eRand b a)-\u003ea-\u003eRand b a",
        "package": "creatur",
        "partial": "Probability",
        "signature": "Double-\u003e(b-\u003eRand g b)-\u003eb-\u003eRand g b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-Reproduction-Asexual.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eA reproduction method for artificial lifeforms where:\n\u003c/p\u003e\u003cul\u003e\u003cli\u003e Each agent has a \u003cem\u003esingle\u003c/em\u003e strand of genetic information.\n\u003c/li\u003e\u003cli\u003e Each child has two parents.\n\u003c/li\u003e\u003cli\u003e Each parent contributes approximately half of its genetic\n   information to the offspring.\n\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e",
        "fct-module": "ALife.Creatur.Genetics.Reproduction.Asexual",
        "fct-package": "creatur",
        "fct-signature": "module",
        "fct-source": "src/ALife-Creatur-Genetics-Reproduction-Asexual.html",
        "fct-type": "module",
        "title": "Asexual"
      },
      "index": {
        "description": "reproduction method for artificial lifeforms where Each agent has single strand of genetic information Each child has two parents Each parent contributes approximately half of its genetic information to the offspring",
        "hierarchy": "ALife Creatur Genetics Reproduction Asexual",
        "module": "ALife.Creatur.Genetics.Reproduction.Asexual",
        "name": "Asexual",
        "normalized": "",
        "package": "creatur",
        "partial": "Asexual",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-Reproduction-Asexual.html#t:Reproductive",
      "description": {
        "fct-descr": "\u003cp\u003eA species that reproduces, transmitting genetic information to\n   its offspring. Minimal complete definition: all except \u003ccode\u003emate\u003c/code\u003e.\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Genetics.Reproduction.Asexual",
        "fct-package": "creatur",
        "fct-signature": "class",
        "fct-source": "src/ALife-Creatur-Genetics-Reproduction-Asexual.html#Reproductive",
        "fct-type": "class",
        "title": "Reproductive"
      },
      "index": {
        "description": "species that reproduces transmitting genetic information to its offspring Minimal complete definition all except mate",
        "hierarchy": "ALife Creatur Genetics Reproduction Asexual",
        "module": "ALife.Creatur.Genetics.Reproduction.Asexual",
        "name": "Reproductive",
        "normalized": "",
        "package": "creatur",
        "partial": "Reproductive",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-Reproduction-Asexual.html#v:build",
      "description": {
        "fct-descr": "\u003cp\u003eBuilds an agent based on the genome provided, if it is possible\n   to do so.\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Genetics.Reproduction.Asexual",
        "fct-package": "creatur",
        "fct-signature": "AgentId -\u003e Base a -\u003e Either [String] a",
        "fct-source": "src/ALife-Creatur-Genetics-Reproduction-Asexual.html#build",
        "fct-type": "method",
        "title": "build"
      },
      "index": {
        "description": "Builds an agent based on the genome provided if it is possible to do so",
        "hierarchy": "ALife Creatur Genetics Reproduction Asexual",
        "module": "ALife.Creatur.Genetics.Reproduction.Asexual",
        "name": "build",
        "normalized": "AgentId-\u003eBase a-\u003eEither[String]a",
        "package": "creatur",
        "partial": "",
        "signature": "AgentId-\u003eBase a-\u003eEither[String]a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-Reproduction-Asexual.html#v:makeOffspring",
      "description": {
        "fct-descr": "\u003cp\u003e\u003ccode\u003e\u003ccode\u003e\u003ca\u003emakeOffspring\u003c/a\u003e\u003c/code\u003e (parent1, parent2) name\u003c/code\u003e uses the genetic\n   information from \u003ccode\u003eparent1\u003c/code\u003e and \u003ccode\u003eparent2\u003c/code\u003e to produce a child with\n   the agent ID \u003ccode\u003ename\u003c/code\u003e. The default implementation:\n\u003c/p\u003e\u003col\u003e\u003cli\u003e Calls \u003ccode\u003e\u003ccode\u003e\u003ca\u003erecombine\u003c/a\u003e\u003c/code\u003e\u003c/code\u003e to create a genome for the child.\n\u003c/li\u003e\u003cli\u003e Calls \u003ccode\u003e\u003ccode\u003e\u003ca\u003ebuild\u003c/a\u003e\u003c/code\u003e\u003c/code\u003e to construct a child with this genome.\n\u003c/li\u003e\u003c/ol\u003e",
        "fct-module": "ALife.Creatur.Genetics.Reproduction.Asexual",
        "fct-package": "creatur",
        "fct-signature": "a -\u003e a -\u003e AgentId -\u003e Rand r (Either [String] a)",
        "fct-source": "src/ALife-Creatur-Genetics-Reproduction-Asexual.html#makeOffspring",
        "fct-type": "method",
        "title": "makeOffspring"
      },
      "index": {
        "description": "makeOffspring parent1 parent2 name uses the genetic information from parent1 and parent2 to produce child with the agent ID name The default implementation Calls recombine to create genome for the child Calls build to construct child with this genome",
        "hierarchy": "ALife Creatur Genetics Reproduction Asexual",
        "module": "ALife.Creatur.Genetics.Reproduction.Asexual",
        "name": "makeOffspring",
        "normalized": "a-\u003ea-\u003eAgentId-\u003eRand b(Either[String]a)",
        "package": "creatur",
        "partial": "Offspring",
        "signature": "a-\u003ea-\u003eAgentId-\u003eRand r(Either[String]a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-Reproduction-Asexual.html#v:recombine",
      "description": {
        "fct-descr": "\u003cp\u003eRecombines the genetic information from two parents, creating\n   genetic information for potential offspring.\n\u003c/p\u003e\u003cp\u003eTypically this involves the following steps:\n\u003c/p\u003e\u003col\u003e\u003cli\u003e Recombine the two strands of genetic information (one from\n      each parent) to obtain two new strands.\n\u003c/li\u003e\u003cli\u003e Discard one strand, and return the remaining one.\n\u003c/li\u003e\u003c/ol\u003e",
        "fct-module": "ALife.Creatur.Genetics.Reproduction.Asexual",
        "fct-package": "creatur",
        "fct-signature": "a -\u003e a -\u003e Rand r (Base a)",
        "fct-source": "src/ALife-Creatur-Genetics-Reproduction-Asexual.html#recombine",
        "fct-type": "method",
        "title": "recombine"
      },
      "index": {
        "description": "Recombines the genetic information from two parents creating genetic information for potential offspring Typically this involves the following steps Recombine the two strands of genetic information one from each parent to obtain two new strands Discard one strand and return the remaining one",
        "hierarchy": "ALife Creatur Genetics Reproduction Asexual",
        "module": "ALife.Creatur.Genetics.Reproduction.Asexual",
        "name": "recombine",
        "normalized": "a-\u003ea-\u003eRand b(Base a)",
        "package": "creatur",
        "partial": "",
        "signature": "a-\u003ea-\u003eRand r(Base a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-Reproduction-Sexual.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eA reproduction method for artificial lifeforms where:\n\u003c/p\u003e\u003cul\u003e\u003cli\u003e Each agent has \u003cem\u003etwo\u003c/em\u003e strands of genetic information.\n\u003c/li\u003e\u003cli\u003e Each child has two parents.\n\u003c/li\u003e\u003cli\u003e Each parent contributes approximately half of its genetic\n   information to the offspring.\n\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e",
        "fct-module": "ALife.Creatur.Genetics.Reproduction.Sexual",
        "fct-package": "creatur",
        "fct-signature": "module",
        "fct-source": "src/ALife-Creatur-Genetics-Reproduction-Sexual.html",
        "fct-type": "module",
        "title": "Sexual"
      },
      "index": {
        "description": "reproduction method for artificial lifeforms where Each agent has two strands of genetic information Each child has two parents Each parent contributes approximately half of its genetic information to the offspring",
        "hierarchy": "ALife Creatur Genetics Reproduction Sexual",
        "module": "ALife.Creatur.Genetics.Reproduction.Sexual",
        "name": "Sexual",
        "normalized": "",
        "package": "creatur",
        "partial": "Sexual",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-Reproduction-Sexual.html#t:Reproductive",
      "description": {
        "fct-descr": "\u003cp\u003eA species that reproduces, transmitting genetic information to\n   its offspring. Minimal complete definition: all except \u003ccode\u003emate\u003c/code\u003e.\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Genetics.Reproduction.Sexual",
        "fct-package": "creatur",
        "fct-signature": "class",
        "fct-source": "src/ALife-Creatur-Genetics-Reproduction-Sexual.html#Reproductive",
        "fct-type": "class",
        "title": "Reproductive"
      },
      "index": {
        "description": "species that reproduces transmitting genetic information to its offspring Minimal complete definition all except mate",
        "hierarchy": "ALife Creatur Genetics Reproduction Sexual",
        "module": "ALife.Creatur.Genetics.Reproduction.Sexual",
        "name": "Reproductive",
        "normalized": "",
        "package": "creatur",
        "partial": "Reproductive",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-Reproduction-Sexual.html#v:build",
      "description": {
        "fct-descr": "\u003cp\u003eBuilds an agent based on the genome provided, if it is possible\n   to do so.\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Genetics.Reproduction.Sexual",
        "fct-package": "creatur",
        "fct-signature": "AgentId -\u003e (Base a, Base a) -\u003e Either [String] a",
        "fct-source": "src/ALife-Creatur-Genetics-Reproduction-Sexual.html#build",
        "fct-type": "method",
        "title": "build"
      },
      "index": {
        "description": "Builds an agent based on the genome provided if it is possible to do so",
        "hierarchy": "ALife Creatur Genetics Reproduction Sexual",
        "module": "ALife.Creatur.Genetics.Reproduction.Sexual",
        "name": "build",
        "normalized": "AgentId-\u003e(Base a,Base a)-\u003eEither[String]a",
        "package": "creatur",
        "partial": "",
        "signature": "AgentId-\u003e(Base a,Base a)-\u003eEither[String]a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-Reproduction-Sexual.html#v:makeOffspring",
      "description": {
        "fct-descr": "\u003cp\u003e\u003ccode\u003e\u003ccode\u003e\u003ca\u003emakeOffspring\u003c/a\u003e\u003c/code\u003e (parent1, parent2) name\u003c/code\u003e uses the genetic\n   information from \u003ccode\u003eparent1\u003c/code\u003e and \u003ccode\u003eparent2\u003c/code\u003e to produce a child with\n   the agent ID \u003ccode\u003ename\u003c/code\u003e. The default implementation:\n\u003c/p\u003e\u003col\u003e\u003cli\u003e Calls \u003ccode\u003e\u003ccode\u003e\u003ca\u003eproduceGamete\u003c/a\u003e\u003c/code\u003e\u003c/code\u003e to produce a single strand of genetic\n      information from each parent.\n\u003c/li\u003e\u003cli\u003e Pairs the two strands to create a genome for the child.\n\u003c/li\u003e\u003cli\u003e Calls \u003ccode\u003e\u003ccode\u003e\u003ca\u003ebuild\u003c/a\u003e\u003c/code\u003e\u003c/code\u003e construct a child with this genome.\n\u003c/li\u003e\u003c/ol\u003e",
        "fct-module": "ALife.Creatur.Genetics.Reproduction.Sexual",
        "fct-package": "creatur",
        "fct-signature": "a -\u003e a -\u003e AgentId -\u003e Rand r (Either [String] a)",
        "fct-source": "src/ALife-Creatur-Genetics-Reproduction-Sexual.html#makeOffspring",
        "fct-type": "method",
        "title": "makeOffspring"
      },
      "index": {
        "description": "makeOffspring parent1 parent2 name uses the genetic information from parent1 and parent2 to produce child with the agent ID name The default implementation Calls produceGamete to produce single strand of genetic information from each parent Pairs the two strands to create genome for the child Calls build construct child with this genome",
        "hierarchy": "ALife Creatur Genetics Reproduction Sexual",
        "module": "ALife.Creatur.Genetics.Reproduction.Sexual",
        "name": "makeOffspring",
        "normalized": "a-\u003ea-\u003eAgentId-\u003eRand b(Either[String]a)",
        "package": "creatur",
        "partial": "Offspring",
        "signature": "a-\u003ea-\u003eAgentId-\u003eRand r(Either[String]a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Genetics-Reproduction-Sexual.html#v:produceGamete",
      "description": {
        "fct-descr": "\u003cp\u003eFrom the \u003cem\u003etwo\u003c/em\u003e strands of the genetic information from this \n   agent, creates a \u003cem\u003esingle\u003c/em\u003e strand that will contribute to the\n   child's genome. \n   (This is analogous to creating either a single sperm or ova.)\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Genetics.Reproduction.Sexual",
        "fct-package": "creatur",
        "fct-signature": "a -\u003e Rand r (Base a)",
        "fct-source": "src/ALife-Creatur-Genetics-Reproduction-Sexual.html#produceGamete",
        "fct-type": "method",
        "title": "produceGamete"
      },
      "index": {
        "description": "From the two strands of the genetic information from this agent creates single strand that will contribute to the child genome This is analogous to creating either single sperm or ova",
        "hierarchy": "ALife Creatur Genetics Reproduction Sexual",
        "module": "ALife.Creatur.Genetics.Reproduction.Sexual",
        "name": "produceGamete",
        "normalized": "a-\u003eRand b(Base a)",
        "package": "creatur",
        "partial": "Gamete",
        "signature": "a-\u003eRand r(Base a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Logger.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eA simple rotating log, tailored to the needs of the Cr&#233;at&#250;r \n framework.\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "ALife.Creatur.Logger",
        "fct-package": "creatur",
        "fct-signature": "module",
        "fct-source": "src/ALife-Creatur-Logger.html",
        "fct-type": "module",
        "title": "Logger"
      },
      "index": {
        "description": "simple rotating log tailored to the needs of the Cr at framework",
        "hierarchy": "ALife Creatur Logger",
        "module": "ALife.Creatur.Logger",
        "name": "Logger",
        "normalized": "",
        "package": "creatur",
        "partial": "Logger",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Logger.html#t:Logger",
      "description": {
        "fct-module": "ALife.Creatur.Logger",
        "fct-package": "creatur",
        "fct-signature": "class",
        "fct-source": "src/ALife-Creatur-Logger.html#Logger",
        "fct-type": "class",
        "title": "Logger"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Logger",
        "module": "ALife.Creatur.Logger",
        "name": "Logger",
        "normalized": "",
        "package": "creatur",
        "partial": "Logger",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Logger.html#t:SimpleRotatingLogger",
      "description": {
        "fct-descr": "\u003cp\u003eA rotating logger.\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Logger",
        "fct-package": "creatur",
        "fct-signature": "data",
        "fct-source": "src/ALife-Creatur-Logger.html#SimpleRotatingLogger",
        "fct-type": "data",
        "title": "SimpleRotatingLogger"
      },
      "index": {
        "description": "rotating logger",
        "hierarchy": "ALife Creatur Logger",
        "module": "ALife.Creatur.Logger",
        "name": "SimpleRotatingLogger",
        "normalized": "",
        "package": "creatur",
        "partial": "Simple Rotating Logger",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Logger.html#v:mkSimpleRotatingLogger",
      "description": {
        "fct-descr": "\u003cp\u003e\u003ccode\u003e\u003ccode\u003e\u003ca\u003emkSimpleRotatingLogger\u003c/a\u003e\u003c/code\u003e d prefix n\u003c/code\u003e creates a logger that will write to\n   directory \u003ccode\u003ed\u003c/code\u003e. The log \"rotates\" (starts a new log file) every \u003ccode\u003en\u003c/code\u003e\n   records. Log files follow the naming convention \u003ccode\u003eprefix\u003c/code\u003e.\u003cem\u003ek\u003c/em\u003e, where \u003cem\u003ek\u003c/em\u003e \n   is the number of the last log record contained in the file. If logging\n   has already been set up in \u003ccode\u003edirectory\u003c/code\u003e, then logging will continue where\n   it left off; appending to the most recent log file.\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Logger",
        "fct-package": "creatur",
        "fct-signature": "FilePath -\u003e String -\u003e Int -\u003e SimpleRotatingLogger",
        "fct-source": "src/ALife-Creatur-Logger.html#mkSimpleRotatingLogger",
        "fct-type": "function",
        "title": "mkSimpleRotatingLogger"
      },
      "index": {
        "description": "mkSimpleRotatingLogger prefix creates logger that will write to directory The log rotates starts new log file every records Log files follow the naming convention prefix where is the number of the last log record contained in the file If logging has already been set up in directory then logging will continue where it left off appending to the most recent log file",
        "hierarchy": "ALife Creatur Logger",
        "module": "ALife.Creatur.Logger",
        "name": "mkSimpleRotatingLogger",
        "normalized": "FilePath-\u003eString-\u003eInt-\u003eSimpleRotatingLogger",
        "package": "creatur",
        "partial": "Simple Rotating Logger",
        "signature": "FilePath-\u003eString-\u003eInt-\u003eSimpleRotatingLogger"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Logger.html#v:writeToLog",
      "description": {
        "fct-descr": "\u003cp\u003e\u003ccode\u003e\u003ccode\u003e\u003ca\u003ewriteToLog\u003c/a\u003e\u003c/code\u003e msg\u003c/code\u003e formats and writes a new log message.\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Logger",
        "fct-package": "creatur",
        "fct-signature": "String -\u003e StateT l IO ()",
        "fct-source": "src/ALife-Creatur-Logger.html#writeToLog",
        "fct-type": "method",
        "title": "writeToLog"
      },
      "index": {
        "description": "writeToLog msg formats and writes new log message",
        "hierarchy": "ALife Creatur Logger",
        "module": "ALife.Creatur.Logger",
        "name": "writeToLog",
        "normalized": "String-\u003eStateT a IO()",
        "package": "creatur",
        "partial": "To Log",
        "signature": "String-\u003eStateT l IO()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Universe-Task.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eProvides tasks that you can use with a daemon. These tasks handle\n reading and writing agents, which reduces the amount of code you\n need to write. \n\u003c/p\u003e\u003cp\u003eIt&#8217;s also easy to write your own tasks, using these as a guide.)\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "ALife.Creatur.Universe.Task",
        "fct-package": "creatur",
        "fct-signature": "module",
        "fct-source": "src/ALife-Creatur-Universe-Task.html",
        "fct-type": "module",
        "title": "Task"
      },
      "index": {
        "description": "Provides tasks that you can use with daemon These tasks handle reading and writing agents which reduces the amount of code you need to write It also easy to write your own tasks using these as guide",
        "hierarchy": "ALife Creatur Universe Task",
        "module": "ALife.Creatur.Universe.Task",
        "name": "Task",
        "normalized": "",
        "package": "creatur",
        "partial": "Task",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Universe-Task.html#t:AgentProgram",
      "description": {
        "fct-descr": "\u003cp\u003eA program for an agent which doesn't interact with other agents.\n   The input parameter is the agent whose turn it is to use the CPU.\n   The program must return the agent (which may have been modified),\n   along with any data (e.g., statistics) to be used by the summary\n   program.\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Universe.Task",
        "fct-package": "creatur",
        "fct-signature": "type",
        "fct-source": "src/ALife-Creatur-Universe-Task.html#AgentProgram",
        "fct-type": "type",
        "title": "AgentProgram"
      },
      "index": {
        "description": "program for an agent which doesn interact with other agents The input parameter is the agent whose turn it is to use the CPU The program must return the agent which may have been modified along with any data e.g statistics to be used by the summary program",
        "hierarchy": "ALife Creatur Universe Task",
        "module": "ALife.Creatur.Universe.Task",
        "name": "AgentProgram",
        "normalized": "",
        "package": "creatur",
        "partial": "Agent Program",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Universe-Task.html#t:AgentsProgram",
      "description": {
        "fct-descr": "\u003cp\u003eA program which allows an agent to interact with one or more of\n   its neighbours.\n\u003c/p\u003e\u003cp\u003eThe input parameter is a list of agents. The first agent in the\n   list is the agent whose turn it is to use the CPU. The rest of\n   the list contains agents it could interact with. For example, if\n   agents reproduce sexually, the program might check if the first\n   agent in the list is female, and the second one is male, and if so,\n   mate them to produce offspring. The input list is generated in a\n   way that guarantees that every possible sequence of agents has an\n   equal chance of occurring.\n\u003c/p\u003e\u003cp\u003eThe program must return a list of agents that it has modified,\n   along with any data (e.g., statistics) to be used by the summary\n   program.\n   The order of the output list is not important.\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Universe.Task",
        "fct-package": "creatur",
        "fct-signature": "type",
        "fct-source": "src/ALife-Creatur-Universe-Task.html#AgentsProgram",
        "fct-type": "type",
        "title": "AgentsProgram"
      },
      "index": {
        "description": "program which allows an agent to interact with one or more of its neighbours The input parameter is list of agents The first agent in the list is the agent whose turn it is to use the CPU The rest of the list contains agents it could interact with For example if agents reproduce sexually the program might check if the first agent in the list is female and the second one is male and if so mate them to produce offspring The input list is generated in way that guarantees that every possible sequence of agents has an equal chance of occurring The program must return list of agents that it has modified along with any data e.g statistics to be used by the summary program The order of the output list is not important",
        "hierarchy": "ALife Creatur Universe Task",
        "module": "ALife.Creatur.Universe.Task",
        "name": "AgentsProgram",
        "normalized": "",
        "package": "creatur",
        "partial": "Agents Program",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Universe-Task.html#t:SummaryProgram",
      "description": {
        "fct-descr": "\u003cp\u003eA program that processes the outputs from all the agent programs.\n   For example, this program might aggregate the statistics and\n   record the result.\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Universe.Task",
        "fct-package": "creatur",
        "fct-signature": "type",
        "fct-source": "src/ALife-Creatur-Universe-Task.html#SummaryProgram",
        "fct-type": "type",
        "title": "SummaryProgram"
      },
      "index": {
        "description": "program that processes the outputs from all the agent programs For example this program might aggregate the statistics and record the result",
        "hierarchy": "ALife Creatur Universe Task",
        "module": "ALife.Creatur.Universe.Task",
        "name": "SummaryProgram",
        "normalized": "",
        "package": "creatur",
        "partial": "Summary Program",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Universe-Task.html#v:exceptionHandler",
      "description": {
        "fct-module": "ALife.Creatur.Universe.Task",
        "fct-package": "creatur",
        "fct-signature": "u -\u003e SomeException -\u003e IO u",
        "fct-source": "src/ALife-Creatur-Universe-Task.html#exceptionHandler",
        "fct-type": "function",
        "title": "exceptionHandler"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Universe Task",
        "module": "ALife.Creatur.Universe.Task",
        "name": "exceptionHandler",
        "normalized": "a-\u003eSomeException-\u003eIO a",
        "package": "creatur",
        "partial": "Handler",
        "signature": "u-\u003eSomeException-\u003eIO u"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Universe-Task.html#v:noSummary",
      "description": {
        "fct-module": "ALife.Creatur.Universe.Task",
        "fct-package": "creatur",
        "fct-signature": "SummaryProgram c l d n x a s",
        "fct-source": "src/ALife-Creatur-Universe-Task.html#noSummary",
        "fct-type": "function",
        "title": "noSummary"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Universe Task",
        "module": "ALife.Creatur.Universe.Task",
        "name": "noSummary",
        "normalized": "",
        "package": "creatur",
        "partial": "Summary",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Universe-Task.html#v:runInteractingAgents",
      "description": {
        "fct-module": "ALife.Creatur.Universe.Task",
        "fct-package": "creatur",
        "fct-signature": "AgentsProgram c l d n x a s -\u003e SummaryProgram c l d n x a s -\u003e StateT (Universe c l d n x a) IO ()",
        "fct-source": "src/ALife-Creatur-Universe-Task.html#runInteractingAgents",
        "fct-type": "function",
        "title": "runInteractingAgents"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Universe Task",
        "module": "ALife.Creatur.Universe.Task",
        "name": "runInteractingAgents",
        "normalized": "AgentsProgram a b c d e f g-\u003eSummaryProgram a b c d e f g-\u003eStateT(Universe a b c d e f)IO()",
        "package": "creatur",
        "partial": "Interacting Agents",
        "signature": "AgentsProgram c l d n x a s-\u003eSummaryProgram c l d n x a s-\u003eStateT(Universe c l d n x a)IO()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Universe-Task.html#v:runNoninteractingAgents",
      "description": {
        "fct-module": "ALife.Creatur.Universe.Task",
        "fct-package": "creatur",
        "fct-signature": "AgentProgram c l d n x a s -\u003e SummaryProgram c l d n x a s -\u003e StateT (Universe c l d n x a) IO ()",
        "fct-source": "src/ALife-Creatur-Universe-Task.html#runNoninteractingAgents",
        "fct-type": "function",
        "title": "runNoninteractingAgents"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Universe Task",
        "module": "ALife.Creatur.Universe.Task",
        "name": "runNoninteractingAgents",
        "normalized": "AgentProgram a b c d e f g-\u003eSummaryProgram a b c d e f g-\u003eStateT(Universe a b c d e f)IO()",
        "package": "creatur",
        "partial": "Noninteracting Agents",
        "signature": "AgentProgram c l d n x a s-\u003eSummaryProgram c l d n x a s-\u003eStateT(Universe c l d n x a)IO()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Universe-Task.html#v:shutdownHandler",
      "description": {
        "fct-module": "ALife.Creatur.Universe.Task",
        "fct-package": "creatur",
        "fct-signature": "u -\u003e IO ()",
        "fct-source": "src/ALife-Creatur-Universe-Task.html#shutdownHandler",
        "fct-type": "function",
        "title": "shutdownHandler"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Universe Task",
        "module": "ALife.Creatur.Universe.Task",
        "name": "shutdownHandler",
        "normalized": "a-\u003eIO()",
        "package": "creatur",
        "partial": "Handler",
        "signature": "u-\u003eIO()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Universe-Task.html#v:simpleDaemon",
      "description": {
        "fct-module": "ALife.Creatur.Universe.Task",
        "fct-package": "creatur",
        "fct-signature": "String -\u003e Daemon u",
        "fct-source": "src/ALife-Creatur-Universe-Task.html#simpleDaemon",
        "fct-type": "function",
        "title": "simpleDaemon"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Universe Task",
        "module": "ALife.Creatur.Universe.Task",
        "name": "simpleDaemon",
        "normalized": "String-\u003eDaemon a",
        "package": "creatur",
        "partial": "Daemon",
        "signature": "String-\u003eDaemon u"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Universe-Task.html#v:startupHandler",
      "description": {
        "fct-module": "ALife.Creatur.Universe.Task",
        "fct-package": "creatur",
        "fct-signature": "String -\u003e u -\u003e IO u",
        "fct-source": "src/ALife-Creatur-Universe-Task.html#startupHandler",
        "fct-type": "function",
        "title": "startupHandler"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Universe Task",
        "module": "ALife.Creatur.Universe.Task",
        "name": "startupHandler",
        "normalized": "String-\u003ea-\u003eIO a",
        "package": "creatur",
        "partial": "Handler",
        "signature": "String-\u003eu-\u003eIO u"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Universe-Task.html#v:withAgent",
      "description": {
        "fct-module": "ALife.Creatur.Universe.Task",
        "fct-package": "creatur",
        "fct-signature": "AgentProgram c l d n x a s -\u003e AgentId -\u003e StateT (Universe c l d n x a) IO (Maybe s)",
        "fct-source": "src/ALife-Creatur-Universe-Task.html#withAgent",
        "fct-type": "function",
        "title": "withAgent"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Universe Task",
        "module": "ALife.Creatur.Universe.Task",
        "name": "withAgent",
        "normalized": "AgentProgram a b c d e f g-\u003eAgentId-\u003eStateT(Universe a b c d e f)IO(Maybe g)",
        "package": "creatur",
        "partial": "Agent",
        "signature": "AgentProgram c l d n x a s-\u003eAgentId-\u003eStateT(Universe c l d n x a)IO(Maybe s)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Universe-Task.html#v:withAgents",
      "description": {
        "fct-module": "ALife.Creatur.Universe.Task",
        "fct-package": "creatur",
        "fct-signature": "AgentsProgram c l d n x a s -\u003e [AgentId] -\u003e StateT (Universe c l d n x a) IO (Maybe s)",
        "fct-source": "src/ALife-Creatur-Universe-Task.html#withAgents",
        "fct-type": "function",
        "title": "withAgents"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Universe Task",
        "module": "ALife.Creatur.Universe.Task",
        "name": "withAgents",
        "normalized": "AgentsProgram a b c d e f g-\u003e[AgentId]-\u003eStateT(Universe a b c d e f)IO(Maybe g)",
        "package": "creatur",
        "partial": "Agents",
        "signature": "AgentsProgram c l d n x a s-\u003e[AgentId]-\u003eStateT(Universe c l d n x a)IO(Maybe s)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Universe.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eProvides a habitat for artificial life.\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "ALife.Creatur.Universe",
        "fct-package": "creatur",
        "fct-signature": "module",
        "fct-source": "src/ALife-Creatur-Universe.html",
        "fct-type": "module",
        "title": "Universe"
      },
      "index": {
        "description": "Provides habitat for artificial life",
        "hierarchy": "ALife Creatur Universe",
        "module": "ALife.Creatur.Universe",
        "name": "Universe",
        "normalized": "",
        "package": "creatur",
        "partial": "Universe",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Universe.html#t:SimpleUniverse",
      "description": {
        "fct-module": "ALife.Creatur.Universe",
        "fct-package": "creatur",
        "fct-signature": "type",
        "fct-source": "src/ALife-Creatur-Universe.html#SimpleUniverse",
        "fct-type": "type",
        "title": "SimpleUniverse"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Universe",
        "module": "ALife.Creatur.Universe",
        "name": "SimpleUniverse",
        "normalized": "",
        "package": "creatur",
        "partial": "Simple Universe",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Universe.html#t:Universe",
      "description": {
        "fct-descr": "\u003cp\u003eA habitat containing artificial life.\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Universe",
        "fct-package": "creatur",
        "fct-signature": "data",
        "fct-source": "src/ALife-Creatur-Universe.html#Universe",
        "fct-type": "data",
        "title": "Universe"
      },
      "index": {
        "description": "habitat containing artificial life",
        "hierarchy": "ALife Creatur Universe",
        "module": "ALife.Creatur.Universe",
        "name": "Universe",
        "normalized": "",
        "package": "creatur",
        "partial": "Universe",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Universe.html#v:Universe",
      "description": {
        "fct-module": "ALife.Creatur.Universe",
        "fct-package": "creatur",
        "fct-signature": "Universe",
        "fct-source": "src/ALife-Creatur-Universe.html#Universe",
        "fct-type": "function",
        "title": "Universe"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Universe",
        "module": "ALife.Creatur.Universe",
        "name": "Universe",
        "normalized": "",
        "package": "creatur",
        "partial": "Universe",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Universe.html#v:_agentDB",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "ALife.Creatur.Universe",
        "fct-package": "creatur",
        "fct-signature": "d",
        "fct-source": "src/ALife-Creatur-Universe.html#Universe",
        "fct-type": "function",
        "title": "_agentDB"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Universe",
        "module": "ALife.Creatur.Universe",
        "name": "_agentDB",
        "normalized": "",
        "package": "creatur",
        "partial": "DB",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Universe.html#v:_clock",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "ALife.Creatur.Universe",
        "fct-package": "creatur",
        "fct-signature": "c",
        "fct-source": "src/ALife-Creatur-Universe.html#Universe",
        "fct-type": "function",
        "title": "_clock"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Universe",
        "module": "ALife.Creatur.Universe",
        "name": "_clock",
        "normalized": "",
        "package": "creatur",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Universe.html#v:_dirName",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "ALife.Creatur.Universe",
        "fct-package": "creatur",
        "fct-signature": "FilePath",
        "fct-source": "src/ALife-Creatur-Universe.html#Universe",
        "fct-type": "function",
        "title": "_dirName"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Universe",
        "module": "ALife.Creatur.Universe",
        "name": "_dirName",
        "normalized": "",
        "package": "creatur",
        "partial": "Name",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Universe.html#v:_extra",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "ALife.Creatur.Universe",
        "fct-package": "creatur",
        "fct-signature": "x",
        "fct-source": "src/ALife-Creatur-Universe.html#Universe",
        "fct-type": "function",
        "title": "_extra"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Universe",
        "module": "ALife.Creatur.Universe",
        "name": "_extra",
        "normalized": "",
        "package": "creatur",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Universe.html#v:_initialised",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "ALife.Creatur.Universe",
        "fct-package": "creatur",
        "fct-signature": "Bool",
        "fct-source": "src/ALife-Creatur-Universe.html#Universe",
        "fct-type": "function",
        "title": "_initialised"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Universe",
        "module": "ALife.Creatur.Universe",
        "name": "_initialised",
        "normalized": "",
        "package": "creatur",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Universe.html#v:_logger",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "ALife.Creatur.Universe",
        "fct-package": "creatur",
        "fct-signature": "l",
        "fct-source": "src/ALife-Creatur-Universe.html#Universe",
        "fct-type": "function",
        "title": "_logger"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Universe",
        "module": "ALife.Creatur.Universe",
        "name": "_logger",
        "normalized": "",
        "package": "creatur",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Universe.html#v:_namer",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "ALife.Creatur.Universe",
        "fct-package": "creatur",
        "fct-signature": "n",
        "fct-source": "src/ALife-Creatur-Universe.html#Universe",
        "fct-type": "function",
        "title": "_namer"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Universe",
        "module": "ALife.Creatur.Universe",
        "name": "_namer",
        "normalized": "",
        "package": "creatur",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Universe.html#v:addAgent",
      "description": {
        "fct-module": "ALife.Creatur.Universe",
        "fct-package": "creatur",
        "fct-signature": "DBRecord d -\u003e StateT (Universe c l d n x a) IO ()",
        "fct-source": "src/ALife-Creatur-Universe.html#addAgent",
        "fct-type": "function",
        "title": "addAgent"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Universe",
        "module": "ALife.Creatur.Universe",
        "name": "addAgent",
        "normalized": "DBRecord a-\u003eStateT(Universe b c a d e f)IO()",
        "package": "creatur",
        "partial": "Agent",
        "signature": "DBRecord d-\u003eStateT(Universe c l d n x a)IO()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Universe.html#v:agentDB",
      "description": {
        "fct-module": "ALife.Creatur.Universe",
        "fct-package": "creatur",
        "fct-signature": "forall c l d n x a d a.  Lens (Universe c l d n x a) (Universe c l d n x a) d d",
        "fct-source": "src/ALife-Creatur-Universe.html#agentDB",
        "fct-type": "function",
        "title": "agentDB"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Universe",
        "module": "ALife.Creatur.Universe",
        "name": "agentDB",
        "normalized": "",
        "package": "creatur",
        "partial": "DB",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Universe.html#v:agentIds",
      "description": {
        "fct-module": "ALife.Creatur.Universe",
        "fct-package": "creatur",
        "fct-signature": "StateT (Universe c l d n x a) IO [String]",
        "fct-source": "src/ALife-Creatur-Universe.html#agentIds",
        "fct-type": "function",
        "title": "agentIds"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Universe",
        "module": "ALife.Creatur.Universe",
        "name": "agentIds",
        "normalized": "StateT(Universe a b c d e f)IO[String]",
        "package": "creatur",
        "partial": "Ids",
        "signature": "StateT(Universe c l d n x a)IO[String]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Universe.html#v:archiveAgent",
      "description": {
        "fct-module": "ALife.Creatur.Universe",
        "fct-package": "creatur",
        "fct-signature": "DBRecord d -\u003e StateT (Universe c l d n x a) IO ()",
        "fct-source": "src/ALife-Creatur-Universe.html#archiveAgent",
        "fct-type": "function",
        "title": "archiveAgent"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Universe",
        "module": "ALife.Creatur.Universe",
        "name": "archiveAgent",
        "normalized": "DBRecord a-\u003eStateT(Universe b c a d e f)IO()",
        "package": "creatur",
        "partial": "Agent",
        "signature": "DBRecord d-\u003eStateT(Universe c l d n x a)IO()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Universe.html#v:archivedAgentIds",
      "description": {
        "fct-module": "ALife.Creatur.Universe",
        "fct-package": "creatur",
        "fct-signature": "StateT (Universe c l d n x a) IO [String]",
        "fct-source": "src/ALife-Creatur-Universe.html#archivedAgentIds",
        "fct-type": "function",
        "title": "archivedAgentIds"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Universe",
        "module": "ALife.Creatur.Universe",
        "name": "archivedAgentIds",
        "normalized": "StateT(Universe a b c d e f)IO[String]",
        "package": "creatur",
        "partial": "Agent Ids",
        "signature": "StateT(Universe c l d n x a)IO[String]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Universe.html#v:clock",
      "description": {
        "fct-module": "ALife.Creatur.Universe",
        "fct-package": "creatur",
        "fct-signature": "forall c l d n x a c a.  Lens (Universe c l d n x a) (Universe c l d n x a) c c",
        "fct-source": "src/ALife-Creatur-Universe.html#clock",
        "fct-type": "function",
        "title": "clock"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Universe",
        "module": "ALife.Creatur.Universe",
        "name": "clock",
        "normalized": "",
        "package": "creatur",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Universe.html#v:extra",
      "description": {
        "fct-module": "ALife.Creatur.Universe",
        "fct-package": "creatur",
        "fct-signature": "forall c l d n x a x a.  Lens (Universe c l d n x a) (Universe c l d n x a) x x",
        "fct-source": "src/ALife-Creatur-Universe.html#extra",
        "fct-type": "function",
        "title": "extra"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Universe",
        "module": "ALife.Creatur.Universe",
        "name": "extra",
        "normalized": "",
        "package": "creatur",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Universe.html#v:getAgent",
      "description": {
        "fct-module": "ALife.Creatur.Universe",
        "fct-package": "creatur",
        "fct-signature": "String -\u003e StateT (Universe c l d n x a) IO (Either String a)",
        "fct-source": "src/ALife-Creatur-Universe.html#getAgent",
        "fct-type": "function",
        "title": "getAgent"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Universe",
        "module": "ALife.Creatur.Universe",
        "name": "getAgent",
        "normalized": "String-\u003eStateT(Universe a b c d e f)IO(Either String f)",
        "package": "creatur",
        "partial": "Agent",
        "signature": "String-\u003eStateT(Universe c l d n x a)IO(Either String a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Universe.html#v:getAgentFromArchive",
      "description": {
        "fct-module": "ALife.Creatur.Universe",
        "fct-package": "creatur",
        "fct-signature": "String -\u003e StateT (Universe c l d n x a) IO (Either String a)",
        "fct-source": "src/ALife-Creatur-Universe.html#getAgentFromArchive",
        "fct-type": "function",
        "title": "getAgentFromArchive"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Universe",
        "module": "ALife.Creatur.Universe",
        "name": "getAgentFromArchive",
        "normalized": "String-\u003eStateT(Universe a b c d e f)IO(Either String f)",
        "package": "creatur",
        "partial": "Agent From Archive",
        "signature": "String-\u003eStateT(Universe c l d n x a)IO(Either String a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Universe.html#v:logger",
      "description": {
        "fct-module": "ALife.Creatur.Universe",
        "fct-package": "creatur",
        "fct-signature": "forall c l d n x a l a.  Lens (Universe c l d n x a) (Universe c l d n x a) l l",
        "fct-source": "src/ALife-Creatur-Universe.html#logger",
        "fct-type": "function",
        "title": "logger"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Universe",
        "module": "ALife.Creatur.Universe",
        "name": "logger",
        "normalized": "",
        "package": "creatur",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Universe.html#v:mkSimpleUniverse",
      "description": {
        "fct-module": "ALife.Creatur.Universe",
        "fct-package": "creatur",
        "fct-signature": "String -\u003e FilePath -\u003e Int -\u003e SimpleUniverse a",
        "fct-source": "src/ALife-Creatur-Universe.html#mkSimpleUniverse",
        "fct-type": "function",
        "title": "mkSimpleUniverse"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Universe",
        "module": "ALife.Creatur.Universe",
        "name": "mkSimpleUniverse",
        "normalized": "String-\u003eFilePath-\u003eInt-\u003eSimpleUniverse a",
        "package": "creatur",
        "partial": "Simple Universe",
        "signature": "String-\u003eFilePath-\u003eInt-\u003eSimpleUniverse a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Universe.html#v:multiLookup",
      "description": {
        "fct-module": "ALife.Creatur.Universe",
        "fct-package": "creatur",
        "fct-signature": "[AgentId] -\u003e StateT d IO (Either String [DBRecord d])",
        "fct-source": "src/ALife-Creatur-Universe.html#multiLookup",
        "fct-type": "function",
        "title": "multiLookup"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Universe",
        "module": "ALife.Creatur.Universe",
        "name": "multiLookup",
        "normalized": "[AgentId]-\u003eStateT a IO(Either String[DBRecord a])",
        "package": "creatur",
        "partial": "Lookup",
        "signature": "[AgentId]-\u003eStateT d IO(Either String[DBRecord d])"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Universe.html#v:storeOrArchive",
      "description": {
        "fct-module": "ALife.Creatur.Universe",
        "fct-package": "creatur",
        "fct-signature": "a -\u003e StateT d IO ()",
        "fct-source": "src/ALife-Creatur-Universe.html#storeOrArchive",
        "fct-type": "function",
        "title": "storeOrArchive"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Universe",
        "module": "ALife.Creatur.Universe",
        "name": "storeOrArchive",
        "normalized": "a-\u003eStateT b IO()",
        "package": "creatur",
        "partial": "Or Archive",
        "signature": "a-\u003eStateT d IO()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Util.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eUtility functions that don't fit anywhere else.\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "ALife.Creatur.Util",
        "fct-package": "creatur",
        "fct-signature": "module",
        "fct-source": "src/ALife-Creatur-Util.html",
        "fct-type": "module",
        "title": "Util"
      },
      "index": {
        "description": "Utility functions that don fit anywhere else",
        "hierarchy": "ALife Creatur Util",
        "module": "ALife.Creatur.Util",
        "name": "Util",
        "normalized": "",
        "package": "creatur",
        "partial": "Util",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Util.html#v:boolsToBits",
      "description": {
        "fct-descr": "\u003cp\u003eConvert a list of bits to a string of \u003ccode\u003e0\u003c/code\u003es and \u003ccode\u003e1\u003c/code\u003es.\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Util",
        "fct-package": "creatur",
        "fct-signature": "[Bool] -\u003e String",
        "fct-source": "src/ALife-Creatur-Util.html#boolsToBits",
        "fct-type": "function",
        "title": "boolsToBits"
      },
      "index": {
        "description": "Convert list of bits to string of and",
        "hierarchy": "ALife Creatur Util",
        "module": "ALife.Creatur.Util",
        "name": "boolsToBits",
        "normalized": "[Bool]-\u003eString",
        "package": "creatur",
        "partial": "To Bits",
        "signature": "[Bool]-\u003eString"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Util.html#v:catEithers",
      "description": {
        "fct-descr": "\u003cp\u003eTakes a list of \u003ccode\u003e\u003ca\u003eEither\u003c/a\u003e\u003c/code\u003es and returns a list of all the \u003ccode\u003e\u003ca\u003eRight\u003c/a\u003e\u003c/code\u003e\n   values. \n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Util",
        "fct-package": "creatur",
        "fct-signature": "[Either e a] -\u003e [a]",
        "fct-source": "src/ALife-Creatur-Util.html#catEithers",
        "fct-type": "function",
        "title": "catEithers"
      },
      "index": {
        "description": "Takes list of Either and returns list of all the Right values",
        "hierarchy": "ALife Creatur Util",
        "module": "ALife.Creatur.Util",
        "name": "catEithers",
        "normalized": "[Either a b]-\u003e[b]",
        "package": "creatur",
        "partial": "Eithers",
        "signature": "[Either e a]-\u003e[a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Util.html#v:cropRect",
      "description": {
        "fct-descr": "\u003cp\u003eAssuming \u003ccode\u003exs\u003c/code\u003e is a sequence containing the elements of a matrix with \u003ccode\u003ek\u003c/code\u003e\n   columns, \u003ccode\u003e\u003ccode\u003e\u003ca\u003ecropRect\u003c/a\u003e\u003c/code\u003e (a,b) (c, d) k xs\u003c/code\u003e returns the elements of the\n   submatrix from \u003ccode\u003e(a,b)\u003c/code\u003e in the upper left corner to \u003ccode\u003e(c,d)\u003c/code\u003e in the lower\n   right corner).\n   Note: Matrix indices begin at \u003ccode\u003e(0,0)\u003c/code\u003e.\n\u003c/p\u003e\u003cp\u003eExample: Suppose we have a \u003cem\u003e4\u003c/em\u003ex\u003cem\u003e6\u003c/em\u003e matrix and we want to extract the\n   submatrix from (1,2) to (2,4), as illustrated below.\n\u003c/p\u003e\u003cpre\u003e a b c d e f\n g h i j k l    ---\u003e   i j k\n m n o p q r           o p q\n s t u v w x\n\u003c/pre\u003e\u003cp\u003eWe can represent the elements of the original matrix as \u003ccode\u003e['a'..'x']\u003c/code\u003e.\n   The elements of the submatrix are\n   \u003ccode\u003e['i', 'j', 'k', 'o', 'p', 'q']\u003c/code\u003e, or equivalently,\n   \u003ccode\u003e\"ijkopq\"\u003c/code\u003e. And that is what \u003ccode\u003e\u003ccode\u003e\u003ca\u003ecropRect\u003c/a\u003e\u003c/code\u003e (1,2) (2,4) 6 ['a'..'x']\u003c/code\u003e\n   returns.\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Util",
        "fct-package": "creatur",
        "fct-signature": "(Int, Int) -\u003e (Int, Int) -\u003e [a] -\u003e Int -\u003e [a]",
        "fct-source": "src/ALife-Creatur-Util.html#cropRect",
        "fct-type": "function",
        "title": "cropRect"
      },
      "index": {
        "description": "Assuming xs is sequence containing the elements of matrix with columns cropRect xs returns the elements of the submatrix from in the upper left corner to in the lower right corner Note Matrix indices begin at Example Suppose we have matrix and we want to extract the submatrix from to as illustrated below We can represent the elements of the original matrix as The elements of the submatrix are or equivalently ijkopq And that is what cropRect returns",
        "hierarchy": "ALife Creatur Util",
        "module": "ALife.Creatur.Util",
        "name": "cropRect",
        "normalized": "(Int,Int)-\u003e(Int,Int)-\u003e[a]-\u003eInt-\u003e[a]",
        "package": "creatur",
        "partial": "Rect",
        "signature": "(Int,Int)-\u003e(Int,Int)-\u003e[a]-\u003eInt-\u003e[a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Util.html#v:cropSquare",
      "description": {
        "fct-descr": "\u003cp\u003eAssuming \u003ccode\u003exs\u003c/code\u003e is a sequence containing the elements of a square matrix,\n   \u003ccode\u003e\u003ccode\u003e\u003ca\u003ecropSquare\u003c/a\u003e\u003c/code\u003e n xs\u003c/code\u003e returns the elements of the submatrix of size \u003ccode\u003en\u003c/code\u003ex\u003ccode\u003en\u003c/code\u003e,\n   centred within the original matrix \u003ccode\u003exs\u003c/code\u003e.\n\u003c/p\u003e\u003cp\u003eExample: Suppose we have a \u003cem\u003e5\u003c/em\u003ex\u003cem\u003e5\u003c/em\u003e matrix and we want to extract the\n   central \u003cem\u003e3\u003c/em\u003ex\u003cem\u003e3\u003c/em\u003e submatrix, as illustrated below.\n\u003c/p\u003e\u003cpre\u003e a b c d e\n f g h i j            g h i\n k l m n o    ---\u003e    l m n\n p q r s t            q r s\n u v w x y\n\u003c/pre\u003e\u003cp\u003eWe can represent the elements of the original matrix as \u003ccode\u003e['a'..'y']\u003c/code\u003e.\n   The elements of the submatrix are\n   \u003ccode\u003e['g', 'h', 'i', 'l', 'm', 'n', 'q', 'r', 's']\u003c/code\u003e,\n   or equivalently, \u003ccode\u003e\"ghilmnqrs\"\u003c/code\u003e. And that is what\n   \u003ccode\u003e\u003ccode\u003e\u003ca\u003ecropSquare\u003c/a\u003e\u003c/code\u003e 3 ['a'..'y']\u003c/code\u003e returns.\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Util",
        "fct-package": "creatur",
        "fct-signature": "Int -\u003e [a] -\u003e [a]",
        "fct-source": "src/ALife-Creatur-Util.html#cropSquare",
        "fct-type": "function",
        "title": "cropSquare"
      },
      "index": {
        "description": "Assuming xs is sequence containing the elements of square matrix cropSquare xs returns the elements of the submatrix of size centred within the original matrix xs Example Suppose we have matrix and we want to extract the central submatrix as illustrated below We can represent the elements of the original matrix as The elements of the submatrix are or equivalently ghilmnqrs And that is what cropSquare returns",
        "hierarchy": "ALife Creatur Util",
        "module": "ALife.Creatur.Util",
        "name": "cropSquare",
        "normalized": "Int-\u003e[a]-\u003e[a]",
        "package": "creatur",
        "partial": "Square",
        "signature": "Int-\u003e[a]-\u003e[a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Util.html#v:fromEither",
      "description": {
        "fct-descr": "\u003cp\u003eThe \u003ccode\u003e\u003ca\u003efromEither\u003c/a\u003e\u003c/code\u003e function takes a default value and an \u003ccode\u003e\u003ca\u003eEither\u003c/a\u003e\u003c/code\u003e\n   value.  If the \u003ccode\u003e\u003ca\u003eEither\u003c/a\u003e\u003c/code\u003e is \u003ccode\u003e\u003ca\u003eLeft\u003c/a\u003e\u003c/code\u003e, it returns the default value;\n   otherwise, it returns the value contained in the \u003ccode\u003e\u003ca\u003eRight\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Util",
        "fct-package": "creatur",
        "fct-signature": "a -\u003e Either e a -\u003e a",
        "fct-source": "src/ALife-Creatur-Util.html#fromEither",
        "fct-type": "function",
        "title": "fromEither"
      },
      "index": {
        "description": "The fromEither function takes default value and an Either value If the Either is Left it returns the default value otherwise it returns the value contained in the Right",
        "hierarchy": "ALife Creatur Util",
        "module": "ALife.Creatur.Util",
        "name": "fromEither",
        "normalized": "a-\u003eEither b a-\u003ea",
        "package": "creatur",
        "partial": "Either",
        "signature": "a-\u003eEither e a-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Util.html#v:getLift",
      "description": {
        "fct-descr": "\u003cp\u003eInvoke a function in the inner monad, and pass the state as\n   a parameter.\n   Similar to modifyLift, but the function being invoked doesn't\n   have a return value, so the state is not modified.\n   For example,\n\u003c/p\u003e\u003cpre\u003e s \u003c- get\n s' = lift $ f s\n\u003c/pre\u003e\u003cp\u003ecan be replaced with\n\u003c/p\u003e\u003cpre\u003e getLift f\n\u003c/pre\u003e",
        "fct-module": "ALife.Creatur.Util",
        "fct-package": "creatur",
        "fct-signature": "(s -\u003e m ()) -\u003e StateT s m ()",
        "fct-source": "src/ALife-Creatur-Util.html#getLift",
        "fct-type": "function",
        "title": "getLift"
      },
      "index": {
        "description": "Invoke function in the inner monad and pass the state as parameter Similar to modifyLift but the function being invoked doesn have return value so the state is not modified For example get lift can be replaced with getLift",
        "hierarchy": "ALife Creatur Util",
        "module": "ALife.Creatur.Util",
        "name": "getLift",
        "normalized": "(a-\u003eb())-\u003eStateT a b()",
        "package": "creatur",
        "partial": "Lift",
        "signature": "(s-\u003em())-\u003eStateT s m()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Util.html#v:ilogBase",
      "description": {
        "fct-descr": "\u003cp\u003e\u003ccode\u003e\u003ccode\u003e\u003ca\u003eilogBase\u003c/a\u003e\u003c/code\u003e n m\u003c/code\u003e returns the greatest integer not greater than the log\n   base n of \u003ccode\u003em\u003c/code\u003e.\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Util",
        "fct-package": "creatur",
        "fct-signature": "a -\u003e b -\u003e c",
        "fct-source": "src/ALife-Creatur-Util.html#ilogBase",
        "fct-type": "function",
        "title": "ilogBase"
      },
      "index": {
        "description": "ilogBase returns the greatest integer not greater than the log base of",
        "hierarchy": "ALife Creatur Util",
        "module": "ALife.Creatur.Util",
        "name": "ilogBase",
        "normalized": "a-\u003eb-\u003ec",
        "package": "creatur",
        "partial": "Base",
        "signature": "a-\u003eb-\u003ec"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Util.html#v:isPowerOf",
      "description": {
        "fct-descr": "\u003cp\u003e\u003ccode\u003en \u003ccode\u003e\u003ca\u003eisPowerOf\u003c/a\u003e\u003c/code\u003e m\u003c/code\u003e returns \u003ccode\u003eTrue\u003c/code\u003e if \u003ccode\u003en\u003c/code\u003e is a power of m (i.e., if \n   there exists an _integer_ k such that m^k = n)\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Util",
        "fct-package": "creatur",
        "fct-signature": "a -\u003e a -\u003e Bool",
        "fct-source": "src/ALife-Creatur-Util.html#isPowerOf",
        "fct-type": "function",
        "title": "isPowerOf"
      },
      "index": {
        "description": "isPowerOf returns True if is power of i.e if there exists an integer such that",
        "hierarchy": "ALife Creatur Util",
        "module": "ALife.Creatur.Util",
        "name": "isPowerOf",
        "normalized": "a-\u003ea-\u003eBool",
        "package": "creatur",
        "partial": "Power Of",
        "signature": "a-\u003ea-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Util.html#v:isqrt",
      "description": {
        "fct-descr": "\u003cp\u003e\u003ccode\u003e\u003ccode\u003e\u003ca\u003eisqrt\u003c/a\u003e\u003c/code\u003e n\u003c/code\u003e returns the greatest integer not greater than the square root\n   of \u003ccode\u003en\u003c/code\u003e.\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Util",
        "fct-package": "creatur",
        "fct-signature": "a -\u003e b",
        "fct-source": "src/ALife-Creatur-Util.html#isqrt",
        "fct-type": "function",
        "title": "isqrt"
      },
      "index": {
        "description": "isqrt returns the greatest integer not greater than the square root of",
        "hierarchy": "ALife Creatur Util",
        "module": "ALife.Creatur.Util",
        "name": "isqrt",
        "normalized": "a-\u003eb",
        "package": "creatur",
        "partial": "",
        "signature": "a-\u003eb"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Util.html#v:modifyLift",
      "description": {
        "fct-descr": "\u003cp\u003eLike modify, but the function that maps the old state to the\n   new state operates in the inner monad.\n   For example,\n\u003c/p\u003e\u003cpre\u003e s \u003c- get\n s' = lift $ f s\n put s'\n\u003c/pre\u003e\u003cp\u003ecan be replaced with\n\u003c/p\u003e\u003cpre\u003e modifyLift f\n\u003c/pre\u003e",
        "fct-module": "ALife.Creatur.Util",
        "fct-package": "creatur",
        "fct-signature": "(s -\u003e m s) -\u003e StateT s m ()",
        "fct-source": "src/ALife-Creatur-Util.html#modifyLift",
        "fct-type": "function",
        "title": "modifyLift"
      },
      "index": {
        "description": "Like modify but the function that maps the old state to the new state operates in the inner monad For example get lift put can be replaced with modifyLift",
        "hierarchy": "ALife Creatur Util",
        "module": "ALife.Creatur.Util",
        "name": "modifyLift",
        "normalized": "(a-\u003eb a)-\u003eStateT a b()",
        "package": "creatur",
        "partial": "Lift",
        "signature": "(s-\u003em s)-\u003eStateT s m()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Util.html#v:perfectSquare",
      "description": {
        "fct-descr": "\u003cp\u003e\u003ccode\u003e\u003ccode\u003e\u003ca\u003eperfectSquare\u003c/a\u003e\u003c/code\u003e n\u003c/code\u003e returns \u003ccode\u003eTrue\u003c/code\u003e if \u003ccode\u003en\u003c/code\u003e is a perfect square (i.e., if \n   there exists an _integer_ m such that m*m = n)\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Util",
        "fct-package": "creatur",
        "fct-signature": "a -\u003e Bool",
        "fct-source": "src/ALife-Creatur-Util.html#perfectSquare",
        "fct-type": "function",
        "title": "perfectSquare"
      },
      "index": {
        "description": "perfectSquare returns True if is perfect square i.e if there exists an integer such that",
        "hierarchy": "ALife Creatur Util",
        "module": "ALife.Creatur.Util",
        "name": "perfectSquare",
        "normalized": "a-\u003eBool",
        "package": "creatur",
        "partial": "Square",
        "signature": "a-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Util.html#v:replaceElement",
      "description": {
        "fct-descr": "\u003cp\u003e\u003ccode\u003e\u003ccode\u003e\u003ca\u003ereplaceElement\u003c/a\u003e\u003c/code\u003e xs n x\u003c/code\u003e returns a copy of \u003ccode\u003exs\u003c/code\u003e in which the \u003ccode\u003en\u003c/code\u003eth\n   element has been replaced with \u003ccode\u003ex\u003c/code\u003e. Causes an exception if \u003ccode\u003exs\u003c/code\u003e has\n   fewer than \u003ccode\u003en+1\u003c/code\u003e elements. Compare with \u003ccode\u003e\u003ccode\u003e\u003ca\u003esafeReplaceElement\u003c/a\u003e\u003c/code\u003e\u003c/code\u003e.\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Util",
        "fct-package": "creatur",
        "fct-signature": "[a] -\u003e Int -\u003e a -\u003e [a]",
        "fct-source": "src/ALife-Creatur-Util.html#replaceElement",
        "fct-type": "function",
        "title": "replaceElement"
      },
      "index": {
        "description": "replaceElement xs returns copy of xs in which the th element has been replaced with Causes an exception if xs has fewer than elements Compare with safeReplaceElement",
        "hierarchy": "ALife Creatur Util",
        "module": "ALife.Creatur.Util",
        "name": "replaceElement",
        "normalized": "[a]-\u003eInt-\u003ea-\u003e[a]",
        "package": "creatur",
        "partial": "Element",
        "signature": "[a]-\u003eInt-\u003ea-\u003e[a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Util.html#v:reverseLookup",
      "description": {
        "fct-module": "ALife.Creatur.Util",
        "fct-package": "creatur",
        "fct-signature": "b -\u003e [(a, b)] -\u003e Maybe a",
        "fct-source": "src/ALife-Creatur-Util.html#reverseLookup",
        "fct-type": "function",
        "title": "reverseLookup"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Util",
        "module": "ALife.Creatur.Util",
        "name": "reverseLookup",
        "normalized": "a-\u003e[(b,a)]-\u003eMaybe b",
        "package": "creatur",
        "partial": "Lookup",
        "signature": "b-\u003e[(a,b)]-\u003eMaybe a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Util.html#v:rotate",
      "description": {
        "fct-module": "ALife.Creatur.Util",
        "fct-package": "creatur",
        "fct-signature": "[a] -\u003e [a]",
        "fct-source": "src/ALife-Creatur-Util.html#rotate",
        "fct-type": "function",
        "title": "rotate"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Util",
        "module": "ALife.Creatur.Util",
        "name": "rotate",
        "normalized": "[a]-\u003e[a]",
        "package": "creatur",
        "partial": "",
        "signature": "[a]-\u003e[a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Util.html#v:safeReplaceElement",
      "description": {
        "fct-descr": "\u003cp\u003e\u003ccode\u003e\u003ccode\u003e\u003ca\u003esafeReplaceElement\u003c/a\u003e\u003c/code\u003e xs n x\u003c/code\u003e returns a copy of \u003ccode\u003exs\u003c/code\u003e in which the \u003ccode\u003en\u003c/code\u003eth\n   element (if it exists) has been replaced with \u003ccode\u003ex\u003c/code\u003e.\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Util",
        "fct-package": "creatur",
        "fct-signature": "[a] -\u003e Int -\u003e a -\u003e [a]",
        "fct-source": "src/ALife-Creatur-Util.html#safeReplaceElement",
        "fct-type": "function",
        "title": "safeReplaceElement"
      },
      "index": {
        "description": "safeReplaceElement xs returns copy of xs in which the th element if it exists has been replaced with",
        "hierarchy": "ALife Creatur Util",
        "module": "ALife.Creatur.Util",
        "name": "safeReplaceElement",
        "normalized": "[a]-\u003eInt-\u003ea-\u003e[a]",
        "package": "creatur",
        "partial": "Replace Element",
        "signature": "[a]-\u003eInt-\u003ea-\u003e[a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Util.html#v:showBin",
      "description": {
        "fct-descr": "\u003cp\u003eShow \u003cem\u003enon-negative\u003c/em\u003e \u003ccode\u003e\u003ca\u003eIntegral\u003c/a\u003e\u003c/code\u003e numbers in binary.\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Util",
        "fct-package": "creatur",
        "fct-signature": "a -\u003e ShowS",
        "fct-source": "src/ALife-Creatur-Util.html#showBin",
        "fct-type": "function",
        "title": "showBin"
      },
      "index": {
        "description": "Show non-negative Integral numbers in binary",
        "hierarchy": "ALife Creatur Util",
        "module": "ALife.Creatur.Util",
        "name": "showBin",
        "normalized": "a-\u003eShowS",
        "package": "creatur",
        "partial": "Bin",
        "signature": "a-\u003eShowS"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Util.html#v:shuffle",
      "description": {
        "fct-descr": "\u003cp\u003eFrom \u003ca\u003ehttp://www.haskell.org/haskellwiki/Random_shuffle\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur.Util",
        "fct-package": "creatur",
        "fct-signature": "[a] -\u003e Rand g [a]",
        "fct-source": "src/ALife-Creatur-Util.html#shuffle",
        "fct-type": "function",
        "title": "shuffle"
      },
      "index": {
        "description": "From http www.haskell.org haskellwiki Random shuffle",
        "hierarchy": "ALife Creatur Util",
        "module": "ALife.Creatur.Util",
        "name": "shuffle",
        "normalized": "[a]-\u003eRand b[a]",
        "package": "creatur",
        "partial": "",
        "signature": "[a]-\u003eRand g[a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur-Util.html#v:stateMap",
      "description": {
        "fct-module": "ALife.Creatur.Util",
        "fct-package": "creatur",
        "fct-signature": "(s -\u003e t) -\u003e (t -\u003e s) -\u003e StateT s m a -\u003e StateT t m a",
        "fct-source": "src/ALife-Creatur-Util.html#stateMap",
        "fct-type": "function",
        "title": "stateMap"
      },
      "index": {
        "description": "",
        "hierarchy": "ALife Creatur Util",
        "module": "ALife.Creatur.Util",
        "name": "stateMap",
        "normalized": "(a-\u003eb)-\u003e(b-\u003ea)-\u003eStateT a c d-\u003eStateT b c d",
        "package": "creatur",
        "partial": "Map",
        "signature": "(s-\u003et)-\u003e(t-\u003es)-\u003eStateT s m a-\u003eStateT t m a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eDefinitions used throughout the Cr&#233;at&#250;r framework.\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "ALife.Creatur",
        "fct-package": "creatur",
        "fct-signature": "module",
        "fct-source": "src/ALife-Creatur.html",
        "fct-type": "module",
        "title": "Creatur"
      },
      "index": {
        "description": "Definitions used throughout the Cr at framework",
        "hierarchy": "ALife Creatur",
        "module": "ALife.Creatur",
        "name": "Creatur",
        "normalized": "",
        "package": "creatur",
        "partial": "Creatur",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur.html#t:Agent",
      "description": {
        "fct-descr": "\u003cp\u003eAn artificial life species.\n   All species used in Cr&#233;at&#250;r must be an instance of this class.\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur",
        "fct-package": "creatur",
        "fct-signature": "class",
        "fct-source": "src/ALife-Creatur.html#Agent",
        "fct-type": "class",
        "title": "Agent"
      },
      "index": {
        "description": "An artificial life species All species used in Cr at must be an instance of this class",
        "hierarchy": "ALife Creatur",
        "module": "ALife.Creatur",
        "name": "Agent",
        "normalized": "",
        "package": "creatur",
        "partial": "Agent",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur.html#t:AgentId",
      "description": {
        "fct-descr": "\u003cp\u003eA unique ID associated with an agent.\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur",
        "fct-package": "creatur",
        "fct-signature": "type",
        "fct-source": "src/ALife-Creatur.html#AgentId",
        "fct-type": "type",
        "title": "AgentId"
      },
      "index": {
        "description": "unique ID associated with an agent",
        "hierarchy": "ALife Creatur",
        "module": "ALife.Creatur",
        "name": "AgentId",
        "normalized": "",
        "package": "creatur",
        "partial": "Agent Id",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur.html#t:Time",
      "description": {
        "fct-descr": "\u003cp\u003eThe internal clock used by Cr&#233;at&#250;r is a simple counter.\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur",
        "fct-package": "creatur",
        "fct-signature": "type",
        "fct-source": "src/ALife-Creatur.html#Time",
        "fct-type": "type",
        "title": "Time"
      },
      "index": {
        "description": "The internal clock used by Cr at is simple counter",
        "hierarchy": "ALife Creatur",
        "module": "ALife.Creatur",
        "name": "Time",
        "normalized": "",
        "package": "creatur",
        "partial": "Time",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur.html#v:agentId",
      "description": {
        "fct-descr": "\u003cp\u003eReturns the agent ID.\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur",
        "fct-package": "creatur",
        "fct-signature": "a -\u003e AgentId",
        "fct-source": "src/ALife-Creatur.html#agentId",
        "fct-type": "method",
        "title": "agentId"
      },
      "index": {
        "description": "Returns the agent ID",
        "hierarchy": "ALife Creatur",
        "module": "ALife.Creatur",
        "name": "agentId",
        "normalized": "a-\u003eAgentId",
        "package": "creatur",
        "partial": "Id",
        "signature": "a-\u003eAgentId"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/creatur/docs/ALife-Creatur.html#v:isAlive",
      "description": {
        "fct-descr": "\u003cp\u003eReturns True if the agent is alive, false otherwise.\n\u003c/p\u003e",
        "fct-module": "ALife.Creatur",
        "fct-package": "creatur",
        "fct-signature": "a -\u003e Bool",
        "fct-source": "src/ALife-Creatur.html#isAlive",
        "fct-type": "method",
        "title": "isAlive"
      },
      "index": {
        "description": "Returns True if the agent is alive false otherwise",
        "hierarchy": "ALife Creatur",
        "module": "ALife.Creatur",
        "name": "isAlive",
        "normalized": "a-\u003eBool",
        "package": "creatur",
        "partial": "Alive",
        "signature": "a-\u003eBool"
      }
    }
  }
]