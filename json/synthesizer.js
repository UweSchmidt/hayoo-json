[
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Sound-Signal-Block.html#t:Chunk",
      "description": {
        "fct-module": "Sound.Signal.Block",
        "fct-package": "synthesizer",
        "fct-signature": "data",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Sound-Signal-Block.html#Chunk",
        "fct-type": "unknown",
        "title": "Chunk"
      },
      "index": {
        "description": "",
        "hierarchy": "Sound Signal Block",
        "module": "Sound.Signal.Block",
        "name": "Chunk",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Chunk",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Sound-Signal-Block.html#t:ChunkSize",
      "description": {
        "fct-module": "Sound.Signal.Block",
        "fct-package": "synthesizer",
        "fct-signature": "type",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Sound-Signal-Block.html#ChunkSize",
        "fct-type": "unknown",
        "title": "ChunkSize"
      },
      "index": {
        "description": "",
        "hierarchy": "Sound Signal Block",
        "module": "Sound.Signal.Block",
        "name": "ChunkSize",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Chunk Size",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Sound-Signal-Block.html#t:T",
      "description": {
        "fct-module": "Sound.Signal.Block",
        "fct-package": "synthesizer",
        "fct-signature": "newtype",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Sound-Signal-Block.html#T",
        "fct-type": "unknown",
        "title": "T"
      },
      "index": {
        "description": "",
        "hierarchy": "Sound Signal Block",
        "module": "Sound.Signal.Block",
        "name": "T",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Sound-Signal-Block.html#v:append",
      "description": {
        "fct-module": "Sound.Signal.Block",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Sound-Signal-Block.html#append",
        "fct-type": "unknown",
        "title": "append"
      },
      "index": {
        "description": "",
        "hierarchy": "Sound Signal Block",
        "module": "Sound.Signal.Block",
        "name": "append",
        "normalized": "T a-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "T a-\u003eT a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Sound-Signal-Block.html#v:defaultChunkSize",
      "description": {
        "fct-module": "Sound.Signal.Block",
        "fct-package": "synthesizer",
        "fct-signature": "ChunkSize",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Sound-Signal-Block.html#defaultChunkSize",
        "fct-type": "unknown",
        "title": "defaultChunkSize"
      },
      "index": {
        "description": "",
        "hierarchy": "Sound Signal Block",
        "module": "Sound.Signal.Block",
        "name": "defaultChunkSize",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Chunk Size",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Sound-Signal-Block.html#v:fromList",
      "description": {
        "fct-module": "Sound.Signal.Block",
        "fct-package": "synthesizer",
        "fct-signature": "ChunkSize -\u003e [a] -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Sound-Signal-Block.html#fromList",
        "fct-type": "unknown",
        "title": "fromList"
      },
      "index": {
        "description": "",
        "hierarchy": "Sound Signal Block",
        "module": "Sound.Signal.Block",
        "name": "fromList",
        "normalized": "ChunkSize-\u003e[a]-\u003eT a",
        "package": "synthesizer",
        "partial": "List",
        "signature": "ChunkSize-\u003e[a]-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Sound-Signal-Block.html#v:head",
      "description": {
        "fct-module": "Sound.Signal.Block",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Sound-Signal-Block.html#head",
        "fct-type": "unknown",
        "title": "head"
      },
      "index": {
        "description": "",
        "hierarchy": "Sound Signal Block",
        "module": "Sound.Signal.Block",
        "name": "head",
        "normalized": "T a-\u003ea",
        "package": "synthesizer",
        "partial": "",
        "signature": "T a-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Sound-Signal-Block.html#v:isEmpty",
      "description": {
        "fct-module": "Sound.Signal.Block",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e Bool",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Sound-Signal-Block.html#isEmpty",
        "fct-type": "unknown",
        "title": "isEmpty"
      },
      "index": {
        "description": "",
        "hierarchy": "Sound Signal Block",
        "module": "Sound.Signal.Block",
        "name": "isEmpty",
        "normalized": "T a-\u003eBool",
        "package": "synthesizer",
        "partial": "Empty",
        "signature": "T a-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Sound-Signal-Block.html#v:mapAccumL",
      "description": {
        "fct-module": "Sound.Signal.Block",
        "fct-package": "synthesizer",
        "fct-signature": "ChunkSize -\u003e (x -\u003e acc -\u003e Maybe (y, acc)) -\u003e acc -\u003e T x -\u003e (acc, T y)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Sound-Signal-Block.html#mapAccumL",
        "fct-type": "unknown",
        "title": "mapAccumL"
      },
      "index": {
        "description": "",
        "hierarchy": "Sound Signal Block",
        "module": "Sound.Signal.Block",
        "name": "mapAccumL",
        "normalized": "ChunkSize-\u003e(a-\u003eb-\u003eMaybe(c,b))-\u003eb-\u003eT a-\u003e(b,T c)",
        "package": "synthesizer",
        "partial": "Accum",
        "signature": "ChunkSize-\u003e(x-\u003eacc-\u003eMaybe(y,acc))-\u003eacc-\u003eT x-\u003e(acc,T y)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Sound-Signal-Block.html#v:minLength",
      "description": {
        "fct-module": "Sound.Signal.Block",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e [a] -\u003e Int",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Sound-Signal-Block.html#minLength",
        "fct-type": "unknown",
        "title": "minLength"
      },
      "index": {
        "description": "",
        "hierarchy": "Sound Signal Block",
        "module": "Sound.Signal.Block",
        "name": "minLength",
        "normalized": "Int-\u003e[a]-\u003eInt",
        "package": "synthesizer",
        "partial": "Length",
        "signature": "Int-\u003e[a]-\u003eInt"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Sound-Signal-Block.html#v:reduceL",
      "description": {
        "fct-module": "Sound.Signal.Block",
        "fct-package": "synthesizer",
        "fct-signature": "(a -\u003e acc -\u003e Maybe acc) -\u003e acc -\u003e T a -\u003e acc",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Sound-Signal-Block.html#reduceL",
        "fct-type": "unknown",
        "title": "reduceL"
      },
      "index": {
        "description": "",
        "hierarchy": "Sound Signal Block",
        "module": "Sound.Signal.Block",
        "name": "reduceL",
        "normalized": "(a-\u003eb-\u003eMaybe b)-\u003eb-\u003eT a-\u003eb",
        "package": "synthesizer",
        "partial": "",
        "signature": "(a-\u003eacc-\u003eMaybe acc)-\u003eacc-\u003eT a-\u003eacc"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Sound-Signal-Block.html#v:singleton",
      "description": {
        "fct-module": "Sound.Signal.Block",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Sound-Signal-Block.html#singleton",
        "fct-type": "unknown",
        "title": "singleton"
      },
      "index": {
        "description": "",
        "hierarchy": "Sound Signal Block",
        "module": "Sound.Signal.Block",
        "name": "singleton",
        "normalized": "a-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Sound-Signal-Block.html#v:tail",
      "description": {
        "fct-module": "Sound.Signal.Block",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Sound-Signal-Block.html#tail",
        "fct-type": "unknown",
        "title": "tail"
      },
      "index": {
        "description": "",
        "hierarchy": "Sound Signal Block",
        "module": "Sound.Signal.Block",
        "name": "tail",
        "normalized": "T a-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "T a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Sound-Signal-Block.html#v:tails",
      "description": {
        "fct-module": "Sound.Signal.Block",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e [T a]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Sound-Signal-Block.html#tails",
        "fct-type": "unknown",
        "title": "tails"
      },
      "index": {
        "description": "",
        "hierarchy": "Sound Signal Block",
        "module": "Sound.Signal.Block",
        "name": "tails",
        "normalized": "T a-\u003e[T a]",
        "package": "synthesizer",
        "partial": "",
        "signature": "T a-\u003e[T a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Sound-Signal-Block.html#v:toList",
      "description": {
        "fct-module": "Sound.Signal.Block",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e [a]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Sound-Signal-Block.html#toList",
        "fct-type": "unknown",
        "title": "toList"
      },
      "index": {
        "description": "",
        "hierarchy": "Sound Signal Block",
        "module": "Sound.Signal.Block",
        "name": "toList",
        "normalized": "T a-\u003e[a]",
        "package": "synthesizer",
        "partial": "List",
        "signature": "T a-\u003e[a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Sound-Signal-Block.html#v:toListAlt",
      "description": {
        "fct-module": "Sound.Signal.Block",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e [a]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Sound-Signal-Block.html#toListAlt",
        "fct-type": "unknown",
        "title": "toListAlt"
      },
      "index": {
        "description": "",
        "hierarchy": "Sound Signal Block",
        "module": "Sound.Signal.Block",
        "name": "toListAlt",
        "normalized": "T a-\u003e[a]",
        "package": "synthesizer",
        "partial": "List Alt",
        "signature": "T a-\u003e[a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Sound-Signal-Block.html#v:unfoldR",
      "description": {
        "fct-module": "Sound.Signal.Block",
        "fct-package": "synthesizer",
        "fct-signature": "ChunkSize -\u003e (acc -\u003e Maybe (y, acc)) -\u003e acc -\u003e (acc, T y)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Sound-Signal-Block.html#unfoldR",
        "fct-type": "unknown",
        "title": "unfoldR"
      },
      "index": {
        "description": "",
        "hierarchy": "Sound Signal Block",
        "module": "Sound.Signal.Block",
        "name": "unfoldR",
        "normalized": "ChunkSize-\u003e(a-\u003eMaybe(b,a))-\u003ea-\u003e(a,T b)",
        "package": "synthesizer",
        "partial": "",
        "signature": "ChunkSize-\u003e(acc-\u003eMaybe(y,acc))-\u003eacc-\u003e(acc,T y)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Sound-Signal-Block.html#v:zipWith",
      "description": {
        "fct-module": "Sound.Signal.Block",
        "fct-package": "synthesizer",
        "fct-signature": "ChunkSize -\u003e (a -\u003e b -\u003e c) -\u003e T a -\u003e T b -\u003e T c",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Sound-Signal-Block.html#zipWith",
        "fct-type": "unknown",
        "title": "zipWith"
      },
      "index": {
        "description": "",
        "hierarchy": "Sound Signal Block",
        "module": "Sound.Signal.Block",
        "name": "zipWith",
        "normalized": "ChunkSize-\u003e(a-\u003eb-\u003ec)-\u003eT a-\u003eT b-\u003eT c",
        "package": "synthesizer",
        "partial": "With",
        "signature": "ChunkSize-\u003e(a-\u003eb-\u003ec)-\u003eT a-\u003eT b-\u003eT c"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Sound-Signal-StrictBlock.html#t:T",
      "description": {
        "fct-module": "Sound.Signal.StrictBlock",
        "fct-package": "synthesizer",
        "fct-signature": "data",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Sound-Signal-StrictBlock.html#T",
        "fct-type": "unknown",
        "title": "T"
      },
      "index": {
        "description": "",
        "hierarchy": "Sound Signal StrictBlock",
        "module": "Sound.Signal.StrictBlock",
        "name": "T",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Sound-Signal-StrictBlock.html#v:++",
      "description": {
        "fct-module": "Sound.Signal.StrictBlock",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Sound-Signal-StrictBlock.html#%2B%2B",
        "fct-type": "unknown",
        "title": "++"
      },
      "index": {
        "description": "",
        "hierarchy": "Sound Signal StrictBlock",
        "module": "Sound.Signal.StrictBlock",
        "name": "++",
        "normalized": "T a-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "T a-\u003eT a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Sound-Signal-StrictBlock.html#v:foldl'",
      "description": {
        "fct-module": "Sound.Signal.StrictBlock",
        "fct-package": "synthesizer",
        "fct-signature": "(acc -\u003e a -\u003e acc) -\u003e acc -\u003e T a -\u003e acc",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Sound-Signal-StrictBlock.html#foldl%27",
        "fct-type": "unknown",
        "title": "foldl'"
      },
      "index": {
        "description": "",
        "hierarchy": "Sound Signal StrictBlock",
        "module": "Sound.Signal.StrictBlock",
        "name": "foldl'",
        "normalized": "(a-\u003eb-\u003ea)-\u003ea-\u003eT b-\u003ea",
        "package": "synthesizer",
        "partial": "",
        "signature": "(acc-\u003ea-\u003eacc)-\u003eacc-\u003eT a-\u003eacc"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Sound-Signal-StrictBlock.html#v:singleton",
      "description": {
        "fct-module": "Sound.Signal.StrictBlock",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Sound-Signal-StrictBlock.html#singleton",
        "fct-type": "unknown",
        "title": "singleton"
      },
      "index": {
        "description": "",
        "hierarchy": "Sound Signal StrictBlock",
        "module": "Sound.Signal.StrictBlock",
        "name": "singleton",
        "normalized": "a-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Sound-Signal-StrictBlock.html#v:toChunkList",
      "description": {
        "fct-module": "Sound.Signal.StrictBlock",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e [UArray Int a]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Sound-Signal-StrictBlock.html#toChunkList",
        "fct-type": "unknown",
        "title": "toChunkList"
      },
      "index": {
        "description": "",
        "hierarchy": "Sound Signal StrictBlock",
        "module": "Sound.Signal.StrictBlock",
        "name": "toChunkList",
        "normalized": "T a-\u003e[UArray Int a]",
        "package": "synthesizer",
        "partial": "Chunk List",
        "signature": "T a-\u003e[UArray Int a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Sound-Signal.html#v:++",
      "description": {
        "fct-module": "Sound.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "s a -\u003e s a -\u003e s a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Sound-Signal.html#%2B%2B",
        "fct-type": "unknown",
        "title": "++"
      },
      "index": {
        "description": "",
        "hierarchy": "Sound Signal",
        "module": "Sound.Signal",
        "name": "++",
        "normalized": "a b-\u003ea b-\u003ea b",
        "package": "synthesizer",
        "partial": "",
        "signature": "s a-\u003es a-\u003es a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Sound-Signal.html#v:C",
      "description": {
        "fct-module": "Sound.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "class",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Sound-Signal.html#C",
        "fct-type": "unknown",
        "title": "C"
      },
      "index": {
        "description": "",
        "hierarchy": "Sound Signal",
        "module": "Sound.Signal",
        "name": "C",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Sound-Signal.html#v:crochetL",
      "description": {
        "fct-module": "Sound.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(x -\u003e acc -\u003e Maybe (y, acc)) -\u003e acc -\u003e s x -\u003e s y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Sound-Signal.html#crochetL",
        "fct-type": "unknown",
        "title": "crochetL"
      },
      "index": {
        "description": "",
        "hierarchy": "Sound Signal",
        "module": "Sound.Signal",
        "name": "crochetL",
        "normalized": "(a-\u003eb-\u003eMaybe(c,b))-\u003eb-\u003ed a-\u003ed c",
        "package": "synthesizer",
        "partial": "",
        "signature": "(x-\u003eacc-\u003eMaybe(y,acc))-\u003eacc-\u003es x-\u003es y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Sound-Signal.html#v:cycle",
      "description": {
        "fct-module": "Sound.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "s a -\u003e s a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Sound-Signal.html#cycle",
        "fct-type": "unknown",
        "title": "cycle"
      },
      "index": {
        "description": "",
        "hierarchy": "Sound Signal",
        "module": "Sound.Signal",
        "name": "cycle",
        "normalized": "a b-\u003ea b",
        "package": "synthesizer",
        "partial": "",
        "signature": "s a-\u003es a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Sound-Signal.html#v:delay1",
      "description": {
        "fct-descr": "This is a fusion friendly implementation of delay.\nHowever, in order to be a \u003ctt\u003e\u003ca\u003ecrochetL\u003c/a\u003e\u003c/tt\u003e\nthe output has the same length as the input,\nthat is, the last element is removed - at least for finite input.\n",
        "fct-module": "Sound.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e s a -\u003e s a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Sound-Signal.html#delay1",
        "fct-type": "unknown",
        "title": "delay1"
      },
      "index": {
        "description": "This is fusion friendly implementation of delay However in order to be crochetL the output has the same length as the input that is the last element is removed at least for finite input",
        "hierarchy": "Sound Signal",
        "module": "Sound.Signal",
        "name": "delay1",
        "normalized": "a-\u003eb a-\u003eb a",
        "package": "synthesizer",
        "partial": "",
        "signature": "a-\u003es a-\u003es a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Sound-Signal.html#v:foldL'",
      "description": {
        "fct-module": "Sound.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(x -\u003e acc -\u003e acc) -\u003e acc -\u003e s x -\u003e acc",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Sound-Signal.html#foldL%27",
        "fct-type": "unknown",
        "title": "foldL'"
      },
      "index": {
        "description": "",
        "hierarchy": "Sound Signal",
        "module": "Sound.Signal",
        "name": "foldL'",
        "normalized": "(a-\u003eb-\u003eb)-\u003eb-\u003ec a-\u003eb",
        "package": "synthesizer",
        "partial": "L'",
        "signature": "(x-\u003eacc-\u003eacc)-\u003eacc-\u003es x-\u003eacc"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Sound-Signal.html#v:fromList",
      "description": {
        "fct-module": "Sound.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "[y] -\u003e s y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Sound-Signal.html#fromList",
        "fct-type": "unknown",
        "title": "fromList"
      },
      "index": {
        "description": "",
        "hierarchy": "Sound Signal",
        "module": "Sound.Signal",
        "name": "fromList",
        "normalized": "[a]-\u003eb a",
        "package": "synthesizer",
        "partial": "List",
        "signature": "[y]-\u003es y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Sound-Signal.html#v:generate",
      "description": {
        "fct-module": "Sound.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(acc -\u003e Maybe (y, acc)) -\u003e acc -\u003e s y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Sound-Signal.html#generate",
        "fct-type": "unknown",
        "title": "generate"
      },
      "index": {
        "description": "",
        "hierarchy": "Sound Signal",
        "module": "Sound.Signal",
        "name": "generate",
        "normalized": "(a-\u003eMaybe(b,a))-\u003ea-\u003ec b",
        "package": "synthesizer",
        "partial": "",
        "signature": "(acc-\u003eMaybe(y,acc))-\u003eacc-\u003es y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Sound-Signal.html#v:iterate",
      "description": {
        "fct-module": "Sound.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(a -\u003e a) -\u003e a -\u003e s a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Sound-Signal.html#iterate",
        "fct-type": "unknown",
        "title": "iterate"
      },
      "index": {
        "description": "",
        "hierarchy": "Sound Signal",
        "module": "Sound.Signal",
        "name": "iterate",
        "normalized": "(a-\u003ea)-\u003ea-\u003eb a",
        "package": "synthesizer",
        "partial": "",
        "signature": "(a-\u003ea)-\u003ea-\u003es a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Sound-Signal.html#v:lengthSlow",
      "description": {
        "fct-descr": "can be used to check against native length implementation \n",
        "fct-module": "Sound.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "s a -\u003e Int",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Sound-Signal.html#lengthSlow",
        "fct-type": "unknown",
        "title": "lengthSlow"
      },
      "index": {
        "description": "can be used to check against native length implementation",
        "hierarchy": "Sound Signal",
        "module": "Sound.Signal",
        "name": "lengthSlow",
        "normalized": "a b-\u003eInt",
        "package": "synthesizer",
        "partial": "Slow",
        "signature": "s a-\u003eInt"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Sound-Signal.html#v:map",
      "description": {
        "fct-module": "Sound.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(a -\u003e b) -\u003e s a -\u003e s b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Sound-Signal.html#map",
        "fct-type": "unknown",
        "title": "map"
      },
      "index": {
        "description": "",
        "hierarchy": "Sound Signal",
        "module": "Sound.Signal",
        "name": "map",
        "normalized": "(a-\u003eb)-\u003ec a-\u003ec b",
        "package": "synthesizer",
        "partial": "",
        "signature": "(a-\u003eb)-\u003es a-\u003es b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Sound-Signal.html#v:mapAccumL",
      "description": {
        "fct-module": "Sound.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(x -\u003e acc -\u003e Maybe (y, acc)) -\u003e acc -\u003e s x -\u003e (acc, s y)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Sound-Signal.html#mapAccumL",
        "fct-type": "unknown",
        "title": "mapAccumL"
      },
      "index": {
        "description": "",
        "hierarchy": "Sound Signal",
        "module": "Sound.Signal",
        "name": "mapAccumL",
        "normalized": "(a-\u003eb-\u003eMaybe(c,b))-\u003eb-\u003ed a-\u003e(b,d c)",
        "package": "synthesizer",
        "partial": "Accum",
        "signature": "(x-\u003eacc-\u003eMaybe(y,acc))-\u003eacc-\u003es x-\u003e(acc,s y)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Sound-Signal.html#v:recourse",
      "description": {
        "fct-module": "Sound.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(acc -\u003e Maybe acc) -\u003e acc -\u003e acc",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Sound-Signal.html#recourse",
        "fct-type": "unknown",
        "title": "recourse"
      },
      "index": {
        "description": "",
        "hierarchy": "Sound Signal",
        "module": "Sound.Signal",
        "name": "recourse",
        "normalized": "(a-\u003eMaybe a)-\u003ea-\u003ea",
        "package": "synthesizer",
        "partial": "",
        "signature": "(acc-\u003eMaybe acc)-\u003eacc-\u003eacc"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Sound-Signal.html#v:reduceL",
      "description": {
        "fct-module": "Sound.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(x -\u003e acc -\u003e Maybe acc) -\u003e acc -\u003e s x -\u003e acc",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Sound-Signal.html#reduceL",
        "fct-type": "unknown",
        "title": "reduceL"
      },
      "index": {
        "description": "",
        "hierarchy": "Sound Signal",
        "module": "Sound.Signal",
        "name": "reduceL",
        "normalized": "(a-\u003eb-\u003eMaybe b)-\u003eb-\u003ec a-\u003eb",
        "package": "synthesizer",
        "partial": "",
        "signature": "(x-\u003eacc-\u003eMaybe acc)-\u003eacc-\u003es x-\u003eacc"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Sound-Signal.html#v:repeat",
      "description": {
        "fct-module": "Sound.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e s a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Sound-Signal.html#repeat",
        "fct-type": "unknown",
        "title": "repeat"
      },
      "index": {
        "description": "",
        "hierarchy": "Sound Signal",
        "module": "Sound.Signal",
        "name": "repeat",
        "normalized": "a-\u003eb a",
        "package": "synthesizer",
        "partial": "",
        "signature": "a-\u003es a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Sound-Signal.html#v:replicate",
      "description": {
        "fct-module": "Sound.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e a -\u003e s a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Sound-Signal.html#replicate",
        "fct-type": "unknown",
        "title": "replicate"
      },
      "index": {
        "description": "",
        "hierarchy": "Sound Signal",
        "module": "Sound.Signal",
        "name": "replicate",
        "normalized": "Int-\u003ea-\u003eb a",
        "package": "synthesizer",
        "partial": "",
        "signature": "Int-\u003ea-\u003es a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Sound-Signal.html#v:scanL",
      "description": {
        "fct-module": "Sound.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(x -\u003e acc -\u003e acc) -\u003e acc -\u003e s x -\u003e s acc",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Sound-Signal.html#scanL",
        "fct-type": "unknown",
        "title": "scanL"
      },
      "index": {
        "description": "",
        "hierarchy": "Sound Signal",
        "module": "Sound.Signal",
        "name": "scanL",
        "normalized": "(a-\u003eb-\u003eb)-\u003eb-\u003ec a-\u003ec b",
        "package": "synthesizer",
        "partial": "",
        "signature": "(x-\u003eacc-\u003eacc)-\u003eacc-\u003es x-\u003es acc"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Sound-Signal.html#v:singleton",
      "description": {
        "fct-module": "Sound.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e s a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Sound-Signal.html#singleton",
        "fct-type": "unknown",
        "title": "singleton"
      },
      "index": {
        "description": "",
        "hierarchy": "Sound Signal",
        "module": "Sound.Signal",
        "name": "singleton",
        "normalized": "a-\u003eb a",
        "package": "synthesizer",
        "partial": "",
        "signature": "a-\u003es a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Sound-Signal.html#v:take",
      "description": {
        "fct-module": "Sound.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e s a -\u003e s a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Sound-Signal.html#take",
        "fct-type": "unknown",
        "title": "take"
      },
      "index": {
        "description": "",
        "hierarchy": "Sound Signal",
        "module": "Sound.Signal",
        "name": "take",
        "normalized": "Int-\u003ea b-\u003ea b",
        "package": "synthesizer",
        "partial": "",
        "signature": "Int-\u003es a-\u003es a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Sound-Signal.html#v:takeWhile",
      "description": {
        "fct-module": "Sound.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(a -\u003e Bool) -\u003e s a -\u003e s a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Sound-Signal.html#takeWhile",
        "fct-type": "unknown",
        "title": "takeWhile"
      },
      "index": {
        "description": "",
        "hierarchy": "Sound Signal",
        "module": "Sound.Signal",
        "name": "takeWhile",
        "normalized": "(a-\u003eBool)-\u003eb a-\u003eb a",
        "package": "synthesizer",
        "partial": "While",
        "signature": "(a-\u003eBool)-\u003es a-\u003es a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Sound-Signal.html#v:unfoldR",
      "description": {
        "fct-module": "Sound.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(acc -\u003e Maybe (y, acc)) -\u003e acc -\u003e (acc, s y)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Sound-Signal.html#unfoldR",
        "fct-type": "unknown",
        "title": "unfoldR"
      },
      "index": {
        "description": "",
        "hierarchy": "Sound Signal",
        "module": "Sound.Signal",
        "name": "unfoldR",
        "normalized": "(a-\u003eMaybe(b,a))-\u003ea-\u003e(a,c b)",
        "package": "synthesizer",
        "partial": "",
        "signature": "(acc-\u003eMaybe(y,acc))-\u003eacc-\u003e(acc,s y)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Sound-Signal.html#v:unzip",
      "description": {
        "fct-module": "Sound.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "s (a, b) -\u003e (s a, s b)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Sound-Signal.html#unzip",
        "fct-type": "unknown",
        "title": "unzip"
      },
      "index": {
        "description": "",
        "hierarchy": "Sound Signal",
        "module": "Sound.Signal",
        "name": "unzip",
        "normalized": "a(b,c)-\u003e(a b,a c)",
        "package": "synthesizer",
        "partial": "",
        "signature": "s(a,b)-\u003e(s a,s b)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Sound-Signal.html#v:zipWith",
      "description": {
        "fct-module": "Sound.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(a -\u003e b -\u003e c) -\u003e s a -\u003e s b -\u003e s c",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Sound-Signal.html#zipWith",
        "fct-type": "unknown",
        "title": "zipWith"
      },
      "index": {
        "description": "",
        "hierarchy": "Sound Signal",
        "module": "Sound.Signal",
        "name": "zipWith",
        "normalized": "(a-\u003eb-\u003ec)-\u003ed a-\u003ed b-\u003ed c",
        "package": "synthesizer",
        "partial": "With",
        "signature": "(a-\u003eb-\u003ec)-\u003es a-\u003es b-\u003es c"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Sound-Signal.html#v:zipWith3",
      "description": {
        "fct-module": "Sound.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(a -\u003e b -\u003e c -\u003e d) -\u003e s a -\u003e s b -\u003e s c -\u003e s d",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Sound-Signal.html#zipWith3",
        "fct-type": "unknown",
        "title": "zipWith3"
      },
      "index": {
        "description": "",
        "hierarchy": "Sound Signal",
        "module": "Sound.Signal",
        "name": "zipWith3",
        "normalized": "(a-\u003eb-\u003ec-\u003ed)-\u003ee a-\u003ee b-\u003ee c-\u003ee d",
        "package": "synthesizer",
        "partial": "With",
        "signature": "(a-\u003eb-\u003ec-\u003ed)-\u003es a-\u003es b-\u003es c-\u003es d"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Sound-Signal.html#v:zipWith4",
      "description": {
        "fct-module": "Sound.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(a -\u003e b -\u003e c -\u003e d -\u003e e) -\u003e s a -\u003e s b -\u003e s c -\u003e s d -\u003e s e",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Sound-Signal.html#zipWith4",
        "fct-type": "unknown",
        "title": "zipWith4"
      },
      "index": {
        "description": "",
        "hierarchy": "Sound Signal",
        "module": "Sound.Signal",
        "name": "zipWith4",
        "normalized": "(a-\u003eb-\u003ec-\u003ed-\u003ee)-\u003ef a-\u003ef b-\u003ef c-\u003ef d-\u003ef e",
        "package": "synthesizer",
        "partial": "With",
        "signature": "(a-\u003eb-\u003ec-\u003ed-\u003ee)-\u003es a-\u003es b-\u003es c-\u003es d-\u003es e"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Amplitude-Control.html#v:constant",
      "description": {
        "fct-descr": "value \n",
        "fct-module": "Synthesizer.Amplitude.Control",
        "fct-package": "synthesizer",
        "fct-signature": "y'-\u003e T y y' y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Amplitude-Control.html#constant",
        "fct-type": "unknown",
        "title": "constant"
      },
      "index": {
        "description": "value",
        "hierarchy": "Synthesizer Amplitude Control",
        "module": "Synthesizer.Amplitude.Control",
        "name": "constant",
        "normalized": "a-\u003eT b a b",
        "package": "synthesizer",
        "partial": "",
        "signature": "y'-\u003eT y y' y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Amplitude-Control.html#v:constantVector",
      "description": {
        "fct-descr": "amplitude \nvalue \n",
        "fct-module": "Synthesizer.Amplitude.Control",
        "fct-package": "synthesizer",
        "fct-signature": "y'-\u003e yv-\u003e T y y' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Amplitude-Control.html#constantVector",
        "fct-type": "unknown",
        "title": "constantVector"
      },
      "index": {
        "description": "amplitude value",
        "hierarchy": "Synthesizer Amplitude Control",
        "module": "Synthesizer.Amplitude.Control",
        "name": "constantVector",
        "normalized": "a-\u003eb-\u003eT c a b",
        "package": "synthesizer",
        "partial": "Vector",
        "signature": "y'-\u003eyv-\u003eT y y' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Amplitude-Control.html#v:mapExponential",
      "description": {
        "fct-descr": "range: one is mapped to \u003ctt\u003ecenter*range\u003c/tt\u003e, must be positive \ncenter: zero is mapped to \u003ctt\u003ecenter\u003c/tt\u003e \n",
        "fct-module": "Synthesizer.Amplitude.Control",
        "fct-package": "synthesizer",
        "fct-signature": "y-\u003e y'-\u003e T y y y-\u003e T y y' y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Amplitude-Control.html#mapExponential",
        "fct-type": "unknown",
        "title": "mapExponential"
      },
      "index": {
        "description": "range one is mapped to center range must be positive center zero is mapped to center",
        "hierarchy": "Synthesizer Amplitude Control",
        "module": "Synthesizer.Amplitude.Control",
        "name": "mapExponential",
        "normalized": "a-\u003eb-\u003eT a a a-\u003eT a b a",
        "package": "synthesizer",
        "partial": "Exponential",
        "signature": "y-\u003ey'-\u003eT y y y-\u003eT y y' y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Amplitude-Control.html#v:mapLinear",
      "description": {
        "fct-descr": "range: one is mapped to \u003ctt\u003ecenter+range\u003c/tt\u003e \ncenter: zero is mapped to \u003ctt\u003ecenter\u003c/tt\u003e \n",
        "fct-module": "Synthesizer.Amplitude.Control",
        "fct-package": "synthesizer",
        "fct-signature": "y'-\u003e y'-\u003e T y y' y-\u003e T y y' y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Amplitude-Control.html#mapLinear",
        "fct-type": "unknown",
        "title": "mapLinear"
      },
      "index": {
        "description": "range one is mapped to center range center zero is mapped to center",
        "hierarchy": "Synthesizer Amplitude Control",
        "module": "Synthesizer.Amplitude.Control",
        "name": "mapLinear",
        "normalized": "a-\u003ea-\u003eT b a b-\u003eT b a b",
        "package": "synthesizer",
        "partial": "Linear",
        "signature": "y'-\u003ey'-\u003eT y y' y-\u003eT y y' y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Amplitude-Cut.html#v:append",
      "description": {
        "fct-module": "Synthesizer.Amplitude.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "T y y' yv -\u003e T y y' yv -\u003e T y y' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Amplitude-Cut.html#append",
        "fct-type": "unknown",
        "title": "append"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Amplitude Cut",
        "module": "Synthesizer.Amplitude.Cut",
        "name": "append",
        "normalized": "T a b c-\u003eT a b c-\u003eT a b c",
        "package": "synthesizer",
        "partial": "",
        "signature": "T y y' yv-\u003eT y y' yv-\u003eT y y' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Amplitude-Cut.html#v:appendVolume",
      "description": {
        "fct-module": "Synthesizer.Amplitude.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "y' -\u003e T y y' yv -\u003e T y y' yv -\u003e T y y' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Amplitude-Cut.html#appendVolume",
        "fct-type": "unknown",
        "title": "appendVolume"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Amplitude Cut",
        "module": "Synthesizer.Amplitude.Cut",
        "name": "appendVolume",
        "normalized": "a-\u003eT b a c-\u003eT b a c-\u003eT b a c",
        "package": "synthesizer",
        "partial": "Volume",
        "signature": "y'-\u003eT y y' yv-\u003eT y y' yv-\u003eT y y' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Amplitude-Cut.html#v:concat",
      "description": {
        "fct-descr": "Similar to \u003ctt\u003efoldr1 append\u003c/tt\u003e but more efficient and accurate,\nbecause it reduces the number of amplifications.\nDoes not work for infinite lists,\nbecause no maximum amplitude can be computed.\n",
        "fct-module": "Synthesizer.Amplitude.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "[T y y' yv] -\u003e T y y' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Amplitude-Cut.html#concat",
        "fct-type": "unknown",
        "title": "concat"
      },
      "index": {
        "description": "Similar to foldr1 append but more efficient and accurate because it reduces the number of amplifications Does not work for infinite lists because no maximum amplitude can be computed",
        "hierarchy": "Synthesizer Amplitude Cut",
        "module": "Synthesizer.Amplitude.Cut",
        "name": "concat",
        "normalized": "[T a b c]-\u003eT a b c",
        "package": "synthesizer",
        "partial": "",
        "signature": "[T y y' yv]-\u003eT y y' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Amplitude-Cut.html#v:concatVolume",
      "description": {
        "fct-descr": "Give the output volume explicitly.\nDoes also work for infinite lists.\n",
        "fct-module": "Synthesizer.Amplitude.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "y' -\u003e [T y y' yv] -\u003e T y y' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Amplitude-Cut.html#concatVolume",
        "fct-type": "unknown",
        "title": "concatVolume"
      },
      "index": {
        "description": "Give the output volume explicitly Does also work for infinite lists",
        "hierarchy": "Synthesizer Amplitude Cut",
        "module": "Synthesizer.Amplitude.Cut",
        "name": "concatVolume",
        "normalized": "a-\u003e[T b a c]-\u003eT b a c",
        "package": "synthesizer",
        "partial": "Volume",
        "signature": "y'-\u003e[T y y' yv]-\u003eT y y' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Amplitude-Cut.html#v:unzip",
      "description": {
        "fct-module": "Synthesizer.Amplitude.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "T y y' (yv0, yv1) -\u003e (T y y' yv0, T y y' yv1)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Amplitude-Cut.html#unzip",
        "fct-type": "unknown",
        "title": "unzip"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Amplitude Cut",
        "module": "Synthesizer.Amplitude.Cut",
        "name": "unzip",
        "normalized": "T a b(c,c)-\u003e(T a b c,T a b c)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T y y'(yv,yv)-\u003e(T y y' yv,T y y' yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Amplitude-Cut.html#v:unzip3",
      "description": {
        "fct-module": "Synthesizer.Amplitude.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "T y y' (yv0, yv1, yv2) -\u003e (T y y' yv0, T y y' yv1, T y y' yv2)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Amplitude-Cut.html#unzip3",
        "fct-type": "unknown",
        "title": "unzip3"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Amplitude Cut",
        "module": "Synthesizer.Amplitude.Cut",
        "name": "unzip3",
        "normalized": "T a b(c,c,c)-\u003e(T a b c,T a b c,T a b c)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T y y'(yv,yv,yv)-\u003e(T y y' yv,T y y' yv,T y y' yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Amplitude-Cut.html#v:zip",
      "description": {
        "fct-module": "Synthesizer.Amplitude.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "T y y' yv0 -\u003e T y y' yv1 -\u003e T y y' (yv0, yv1)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Amplitude-Cut.html#zip",
        "fct-type": "unknown",
        "title": "zip"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Amplitude Cut",
        "module": "Synthesizer.Amplitude.Cut",
        "name": "zip",
        "normalized": "T a b c-\u003eT a b c-\u003eT a b(c,c)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T y y' yv-\u003eT y y' yv-\u003eT y y'(yv,yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Amplitude-Cut.html#v:zip3",
      "description": {
        "fct-module": "Synthesizer.Amplitude.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "T y y' yv0 -\u003e T y y' yv1 -\u003e T y y' yv2 -\u003e T y y' (yv0, yv1, yv2)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Amplitude-Cut.html#zip3",
        "fct-type": "unknown",
        "title": "zip3"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Amplitude Cut",
        "module": "Synthesizer.Amplitude.Cut",
        "name": "zip3",
        "normalized": "T a b c-\u003eT a b c-\u003eT a b c-\u003eT a b(c,c,c)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T y y' yv-\u003eT y y' yv-\u003eT y y' yv-\u003eT y y'(yv,yv,yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Amplitude-Cut.html#v:zip3Volume",
      "description": {
        "fct-module": "Synthesizer.Amplitude.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "y' -\u003e T y y' yv0 -\u003e T y y' yv1 -\u003e T y y' yv2 -\u003e T y y' (yv0, yv1, yv2)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Amplitude-Cut.html#zip3Volume",
        "fct-type": "unknown",
        "title": "zip3Volume"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Amplitude Cut",
        "module": "Synthesizer.Amplitude.Cut",
        "name": "zip3Volume",
        "normalized": "a-\u003eT b a c-\u003eT b a c-\u003eT b a c-\u003eT b a(c,c,c)",
        "package": "synthesizer",
        "partial": "Volume",
        "signature": "y'-\u003eT y y' yv-\u003eT y y' yv-\u003eT y y' yv-\u003eT y y'(yv,yv,yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Amplitude-Cut.html#v:zipVolume",
      "description": {
        "fct-module": "Synthesizer.Amplitude.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "y' -\u003e T y y' yv0 -\u003e T y y' yv1 -\u003e T y y' (yv0, yv1)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Amplitude-Cut.html#zipVolume",
        "fct-type": "unknown",
        "title": "zipVolume"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Amplitude Cut",
        "module": "Synthesizer.Amplitude.Cut",
        "name": "zipVolume",
        "normalized": "a-\u003eT b a c-\u003eT b a c-\u003eT b a(c,c)",
        "package": "synthesizer",
        "partial": "Volume",
        "signature": "y'-\u003eT y y' yv-\u003eT y y' yv-\u003eT y y'(yv,yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Amplitude-Displacement.html#v:mix",
      "description": {
        "fct-descr": "Mix two signals.\n    In opposition to \u003ctt\u003e\u003ca\u003ezipWith\u003c/a\u003e\u003c/tt\u003e the result has the length of the longer signal. \n",
        "fct-module": "Synthesizer.Amplitude.Displacement",
        "fct-package": "synthesizer",
        "fct-signature": "T y y' yv -\u003e T y y' yv -\u003e T y y' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Amplitude-Displacement.html#mix",
        "fct-type": "unknown",
        "title": "mix"
      },
      "index": {
        "description": "Mix two signals In opposition to zipWith the result has the length of the longer signal",
        "hierarchy": "Synthesizer Amplitude Displacement",
        "module": "Synthesizer.Amplitude.Displacement",
        "name": "mix",
        "normalized": "T a b c-\u003eT a b c-\u003eT a b c",
        "package": "synthesizer",
        "partial": "",
        "signature": "T y y' yv-\u003eT y y' yv-\u003eT y y' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Amplitude-Displacement.html#v:mixMulti",
      "description": {
        "fct-descr": "Mix one or more signals. \n",
        "fct-module": "Synthesizer.Amplitude.Displacement",
        "fct-package": "synthesizer",
        "fct-signature": "[T y y' yv] -\u003e T y y' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Amplitude-Displacement.html#mixMulti",
        "fct-type": "unknown",
        "title": "mixMulti"
      },
      "index": {
        "description": "Mix one or more signals",
        "hierarchy": "Synthesizer Amplitude Displacement",
        "module": "Synthesizer.Amplitude.Displacement",
        "name": "mixMulti",
        "normalized": "[T a b c]-\u003eT a b c",
        "package": "synthesizer",
        "partial": "Multi",
        "signature": "[T y y' yv]-\u003eT y y' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Amplitude-Displacement.html#v:mixMultiVolume",
      "description": {
        "fct-module": "Synthesizer.Amplitude.Displacement",
        "fct-package": "synthesizer",
        "fct-signature": "y' -\u003e [T y y' yv] -\u003e T y y' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Amplitude-Displacement.html#mixMultiVolume",
        "fct-type": "unknown",
        "title": "mixMultiVolume"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Amplitude Displacement",
        "module": "Synthesizer.Amplitude.Displacement",
        "name": "mixMultiVolume",
        "normalized": "a-\u003e[T b a c]-\u003eT b a c",
        "package": "synthesizer",
        "partial": "Multi Volume",
        "signature": "y'-\u003e[T y y' yv]-\u003eT y y' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Amplitude-Displacement.html#v:mixVolume",
      "description": {
        "fct-module": "Synthesizer.Amplitude.Displacement",
        "fct-package": "synthesizer",
        "fct-signature": "y' -\u003e T y y' yv -\u003e T y y' yv -\u003e T y y' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Amplitude-Displacement.html#mixVolume",
        "fct-type": "unknown",
        "title": "mixVolume"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Amplitude Displacement",
        "module": "Synthesizer.Amplitude.Displacement",
        "name": "mixVolume",
        "normalized": "a-\u003eT b a c-\u003eT b a c-\u003eT b a c",
        "package": "synthesizer",
        "partial": "Volume",
        "signature": "y'-\u003eT y y' yv-\u003eT y y' yv-\u003eT y y' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Amplitude-Displacement.html#v:raise",
      "description": {
        "fct-descr": "Add a number to all of the signal values.\n    This is useful for adjusting the center of a modulation. \n",
        "fct-module": "Synthesizer.Amplitude.Displacement",
        "fct-package": "synthesizer",
        "fct-signature": "y' -\u003e yv -\u003e T y y' yv -\u003e T y y' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Amplitude-Displacement.html#raise",
        "fct-type": "unknown",
        "title": "raise"
      },
      "index": {
        "description": "Add number to all of the signal values This is useful for adjusting the center of modulation",
        "hierarchy": "Synthesizer Amplitude Displacement",
        "module": "Synthesizer.Amplitude.Displacement",
        "name": "raise",
        "normalized": "a-\u003eb-\u003eT c a b-\u003eT c a b",
        "package": "synthesizer",
        "partial": "",
        "signature": "y'-\u003eyv-\u003eT y y' yv-\u003eT y y' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Amplitude-Filter.html#v:amplify",
      "description": {
        "fct-descr": "The amplification factor must be positive. \n",
        "fct-module": "Synthesizer.Amplitude.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "y' -\u003e T y y' yv -\u003e T y y' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Amplitude-Filter.html#amplify",
        "fct-type": "unknown",
        "title": "amplify"
      },
      "index": {
        "description": "The amplification factor must be positive",
        "hierarchy": "Synthesizer Amplitude Filter",
        "module": "Synthesizer.Amplitude.Filter",
        "name": "amplify",
        "normalized": "a-\u003eT b a c-\u003eT b a c",
        "package": "synthesizer",
        "partial": "",
        "signature": "y'-\u003eT y y' yv-\u003eT y y' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Amplitude-Filter.html#v:envelope",
      "description": {
        "fct-descr": "the envelope \nthe signal to be enveloped \n",
        "fct-module": "Synthesizer.Amplitude.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "T y y' y0-\u003e T y y' yv-\u003e T y y' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Amplitude-Filter.html#envelope",
        "fct-type": "unknown",
        "title": "envelope"
      },
      "index": {
        "description": "the envelope the signal to be enveloped",
        "hierarchy": "Synthesizer Amplitude Filter",
        "module": "Synthesizer.Amplitude.Filter",
        "name": "envelope",
        "normalized": "T a b a-\u003eT a b c-\u003eT a b c",
        "package": "synthesizer",
        "partial": "",
        "signature": "T y y' y-\u003eT y y' yv-\u003eT y y' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Amplitude-Filter.html#v:negate",
      "description": {
        "fct-module": "Synthesizer.Amplitude.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "T y y' yv -\u003e T y y' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Amplitude-Filter.html#negate",
        "fct-type": "unknown",
        "title": "negate"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Amplitude Filter",
        "module": "Synthesizer.Amplitude.Filter",
        "name": "negate",
        "normalized": "T a b c-\u003eT a b c",
        "package": "synthesizer",
        "partial": "",
        "signature": "T y y' yv-\u003eT y y' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Amplitude-Signal.html#t:T",
      "description": {
        "fct-module": "Synthesizer.Amplitude.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "data",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Amplitude-Signal.html#T",
        "fct-type": "unknown",
        "title": "T"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Amplitude Signal",
        "module": "Synthesizer.Amplitude.Signal",
        "name": "T",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Amplitude-Signal.html#v:replaceAmplitude",
      "description": {
        "fct-module": "Synthesizer.Amplitude.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "y1' -\u003e T y y0' yv -\u003e T y y1' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Amplitude-Signal.html#replaceAmplitude",
        "fct-type": "unknown",
        "title": "replaceAmplitude"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Amplitude Signal",
        "module": "Synthesizer.Amplitude.Signal",
        "name": "replaceAmplitude",
        "normalized": "a-\u003eT a a b-\u003eT a a b",
        "package": "synthesizer",
        "partial": "Amplitude",
        "signature": "y-\u003eT y y yv-\u003eT y y yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Amplitude-Signal.html#v:replaceSamples",
      "description": {
        "fct-module": "Synthesizer.Amplitude.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "[yv1] -\u003e T y y' yv0 -\u003e T y y' yv1",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Amplitude-Signal.html#replaceSamples",
        "fct-type": "unknown",
        "title": "replaceSamples"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Amplitude Signal",
        "module": "Synthesizer.Amplitude.Signal",
        "name": "replaceSamples",
        "normalized": "[a]-\u003eT b c a-\u003eT b c a",
        "package": "synthesizer",
        "partial": "Samples",
        "signature": "[yv]-\u003eT y y' yv-\u003eT y y' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Amplitude-Signal.html#v:scalarSamples",
      "description": {
        "fct-module": "Synthesizer.Amplitude.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(y' -\u003e y) -\u003e T y y' y -\u003e [y]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Amplitude-Signal.html#scalarSamples",
        "fct-type": "unknown",
        "title": "scalarSamples"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Amplitude Signal",
        "module": "Synthesizer.Amplitude.Signal",
        "name": "scalarSamples",
        "normalized": "(a-\u003eb)-\u003eT b a b-\u003e[b]",
        "package": "synthesizer",
        "partial": "Samples",
        "signature": "(y'-\u003ey)-\u003eT y y' y-\u003e[y]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Amplitude-Signal.html#v:toAmplitudeScalar",
      "description": {
        "fct-module": "Synthesizer.Amplitude.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T y y' yv -\u003e y' -\u003e y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Amplitude-Signal.html#toAmplitudeScalar",
        "fct-type": "unknown",
        "title": "toAmplitudeScalar"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Amplitude Signal",
        "module": "Synthesizer.Amplitude.Signal",
        "name": "toAmplitudeScalar",
        "normalized": "T a b c-\u003eb-\u003ea",
        "package": "synthesizer",
        "partial": "Amplitude Scalar",
        "signature": "T y y' yv-\u003ey'-\u003ey"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Amplitude-Signal.html#v:vectorSamples",
      "description": {
        "fct-module": "Synthesizer.Amplitude.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(y' -\u003e y) -\u003e T y y' yv -\u003e [yv]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Amplitude-Signal.html#vectorSamples",
        "fct-type": "unknown",
        "title": "vectorSamples"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Amplitude Signal",
        "module": "Synthesizer.Amplitude.Signal",
        "name": "vectorSamples",
        "normalized": "(a-\u003eb)-\u003eT b a c-\u003e[c]",
        "package": "synthesizer",
        "partial": "Samples",
        "signature": "(y'-\u003ey)-\u003eT y y' yv-\u003e[yv]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-ApplicativeUtility.html#v:$#",
      "description": {
        "fct-module": "Synthesizer.ApplicativeUtility",
        "fct-package": "synthesizer",
        "fct-signature": "f (a -\u003e b) -\u003e a -\u003e f b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-ApplicativeUtility.html#%24%23",
        "fct-type": "unknown",
        "title": "$#"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer ApplicativeUtility",
        "module": "Synthesizer.ApplicativeUtility",
        "name": "$#",
        "normalized": "a(b-\u003ec)-\u003eb-\u003ea c",
        "package": "synthesizer",
        "partial": "",
        "signature": "f(a-\u003eb)-\u003ea-\u003ef b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-ApplicativeUtility.html#v:$:",
      "description": {
        "fct-descr": "This corresponds to \u003ctt\u003e\u003ca\u003e\u003c*\u003e\u003c/a\u003e\u003c/tt\u003e\n",
        "fct-module": "Synthesizer.ApplicativeUtility",
        "fct-package": "synthesizer",
        "fct-signature": "f (a -\u003e b) -\u003e f a -\u003e f b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-ApplicativeUtility.html#%24%3A",
        "fct-type": "unknown",
        "title": "$:"
      },
      "index": {
        "description": "This corresponds to",
        "hierarchy": "Synthesizer ApplicativeUtility",
        "module": "Synthesizer.ApplicativeUtility",
        "name": "$:",
        "normalized": "a(b-\u003ec)-\u003ea b-\u003ea c",
        "package": "synthesizer",
        "partial": "",
        "signature": "f(a-\u003eb)-\u003ef a-\u003ef b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-ApplicativeUtility.html#v:$::",
      "description": {
        "fct-descr": "Instead of \u003ctt\u003emixMulti $:: map f xs\u003c/tt\u003e\nthe caller should write \u003ctt\u003emixMulti $: mapM f xs\u003c/tt\u003e\nin order to save the user from learning another infix operator.\n",
        "fct-module": "Synthesizer.ApplicativeUtility",
        "fct-package": "synthesizer",
        "fct-signature": "f (t a -\u003e b) -\u003e t (f a) -\u003e f b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-ApplicativeUtility.html#%24%3A%3A",
        "fct-type": "unknown",
        "title": "$::"
      },
      "index": {
        "description": "Instead of mixMulti map xs the caller should write mixMulti mapM xs in order to save the user from learning another infix operator",
        "hierarchy": "Synthesizer ApplicativeUtility",
        "module": "Synthesizer.ApplicativeUtility",
        "name": "$::",
        "normalized": "a(b c-\u003ed)-\u003eb(a c)-\u003ea d",
        "package": "synthesizer",
        "partial": "",
        "signature": "f(t a-\u003eb)-\u003et(f a)-\u003ef b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-ApplicativeUtility.html#v:$^",
      "description": {
        "fct-module": "Synthesizer.ApplicativeUtility",
        "fct-package": "synthesizer",
        "fct-signature": "(a -\u003e b) -\u003e f a -\u003e f b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-ApplicativeUtility.html#%24%5E",
        "fct-type": "unknown",
        "title": "$^"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer ApplicativeUtility",
        "module": "Synthesizer.ApplicativeUtility",
        "name": "$^",
        "normalized": "(a-\u003eb)-\u003ec a-\u003ec b",
        "package": "synthesizer",
        "partial": "",
        "signature": "(a-\u003eb)-\u003ef a-\u003ef b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-ApplicativeUtility.html#v:.:",
      "description": {
        "fct-module": "Synthesizer.ApplicativeUtility",
        "fct-package": "synthesizer",
        "fct-signature": "f (b -\u003e c) -\u003e f (a -\u003e b) -\u003e f (a -\u003e c)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-ApplicativeUtility.html#.%3A",
        "fct-type": "unknown",
        "title": ".:"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer ApplicativeUtility",
        "module": "Synthesizer.ApplicativeUtility",
        "name": ".:",
        "normalized": "a(b-\u003ec)-\u003ea(d-\u003eb)-\u003ea(d-\u003ec)",
        "package": "synthesizer",
        "partial": "",
        "signature": "f(b-\u003ec)-\u003ef(a-\u003eb)-\u003ef(a-\u003ec)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-ApplicativeUtility.html#v:.^",
      "description": {
        "fct-module": "Synthesizer.ApplicativeUtility",
        "fct-package": "synthesizer",
        "fct-signature": "(b -\u003e c) -\u003e f (a -\u003e b) -\u003e f (a -\u003e c)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-ApplicativeUtility.html#.%5E",
        "fct-type": "unknown",
        "title": ".^"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer ApplicativeUtility",
        "module": "Synthesizer.ApplicativeUtility",
        "name": ".^",
        "normalized": "(a-\u003eb)-\u003ec(d-\u003ea)-\u003ec(d-\u003eb)",
        "package": "synthesizer",
        "partial": "",
        "signature": "(b-\u003ec)-\u003ef(a-\u003eb)-\u003ef(a-\u003ec)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-ApplicativeUtility.html#v:liftA4",
      "description": {
        "fct-module": "Synthesizer.ApplicativeUtility",
        "fct-package": "synthesizer",
        "fct-signature": "(a -\u003e b -\u003e c -\u003e d -\u003e e) -\u003e f a -\u003e f b -\u003e f c -\u003e f d -\u003e f e",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-ApplicativeUtility.html#liftA4",
        "fct-type": "unknown",
        "title": "liftA4"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer ApplicativeUtility",
        "module": "Synthesizer.ApplicativeUtility",
        "name": "liftA4",
        "normalized": "(a-\u003eb-\u003ec-\u003ed-\u003ee)-\u003ef a-\u003ef b-\u003ef c-\u003ef d-\u003ef e",
        "package": "synthesizer",
        "partial": "",
        "signature": "(a-\u003eb-\u003ec-\u003ed-\u003ee)-\u003ef a-\u003ef b-\u003ef c-\u003ef d-\u003ef e"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-ApplicativeUtility.html#v:liftA5",
      "description": {
        "fct-module": "Synthesizer.ApplicativeUtility",
        "fct-package": "synthesizer",
        "fct-signature": "(a -\u003e b -\u003e c -\u003e d -\u003e e -\u003e g) -\u003e f a -\u003e f b -\u003e f c -\u003e f d -\u003e f e -\u003e f g",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-ApplicativeUtility.html#liftA5",
        "fct-type": "unknown",
        "title": "liftA5"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer ApplicativeUtility",
        "module": "Synthesizer.ApplicativeUtility",
        "name": "liftA5",
        "normalized": "(a-\u003eb-\u003ec-\u003ed-\u003ee-\u003ef)-\u003eg a-\u003eg b-\u003eg c-\u003eg d-\u003eg e-\u003eg f",
        "package": "synthesizer",
        "partial": "",
        "signature": "(a-\u003eb-\u003ec-\u003ed-\u003ee-\u003eg)-\u003ef a-\u003ef b-\u003ef c-\u003ef d-\u003ef e-\u003ef g"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-ApplicativeUtility.html#v:liftA6",
      "description": {
        "fct-module": "Synthesizer.ApplicativeUtility",
        "fct-package": "synthesizer",
        "fct-signature": "(a -\u003e b -\u003e c -\u003e d -\u003e e -\u003e g -\u003e h) -\u003e f a -\u003e f b -\u003e f c -\u003e f d -\u003e f e -\u003e f g -\u003e f h",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-ApplicativeUtility.html#liftA6",
        "fct-type": "unknown",
        "title": "liftA6"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer ApplicativeUtility",
        "module": "Synthesizer.ApplicativeUtility",
        "name": "liftA6",
        "normalized": "(a-\u003eb-\u003ec-\u003ed-\u003ee-\u003ef-\u003eg)-\u003eh a-\u003eh b-\u003eh c-\u003eh d-\u003eh e-\u003eh f-\u003eh g",
        "package": "synthesizer",
        "partial": "",
        "signature": "(a-\u003eb-\u003ec-\u003ed-\u003ee-\u003eg-\u003eh)-\u003ef a-\u003ef b-\u003ef c-\u003ef d-\u003ef e-\u003ef g-\u003ef h"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-ApplicativeUtility.html#v:liftP",
      "description": {
        "fct-descr": "Our signal processors have types like \u003ctt\u003ef (a -\u003e b -\u003e c)\u003c/tt\u003e.\nThey could also have the type \u003ctt\u003ea -\u003e b -\u003e f c\u003c/tt\u003e\nor \u003ctt\u003ef a -\u003e f b -\u003e f c\u003c/tt\u003e.\nWe did not choose the last variant for reduction of redundancy in type signatures,\nand we did not choose the second variant for easy composition of processors.\nHowever the forms are freely convertible,\nand if you prefer the last one because you do not want to sprinkle '($:)' in your code,\nthen you may want to convert the processors using the following functions,\nthat can be defined purely in the \u003ctt\u003e\u003ca\u003eApplicative\u003c/a\u003e\u003c/tt\u003e class.\n",
        "fct-module": "Synthesizer.ApplicativeUtility",
        "fct-package": "synthesizer",
        "fct-signature": "f (a -\u003e b) -\u003e f a -\u003e f b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-ApplicativeUtility.html#liftP",
        "fct-type": "unknown",
        "title": "liftP"
      },
      "index": {
        "description": "Our signal processors have types like They could also have the type or We did not choose the last variant for reduction of redundancy in type signatures and we did not choose the second variant for easy composition of processors However the forms are freely convertible and if you prefer the last one because you do not want to sprinkle in your code then you may want to convert the processors using the following functions that can be defined purely in the Applicative class",
        "hierarchy": "Synthesizer ApplicativeUtility",
        "module": "Synthesizer.ApplicativeUtility",
        "name": "liftP",
        "normalized": "a(b-\u003ec)-\u003ea b-\u003ea c",
        "package": "synthesizer",
        "partial": "",
        "signature": "f(a-\u003eb)-\u003ef a-\u003ef b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-ApplicativeUtility.html#v:liftP2",
      "description": {
        "fct-module": "Synthesizer.ApplicativeUtility",
        "fct-package": "synthesizer",
        "fct-signature": "f (a -\u003e b -\u003e c) -\u003e f a -\u003e f b -\u003e f c",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-ApplicativeUtility.html#liftP2",
        "fct-type": "unknown",
        "title": "liftP2"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer ApplicativeUtility",
        "module": "Synthesizer.ApplicativeUtility",
        "name": "liftP2",
        "normalized": "a(b-\u003ec-\u003ed)-\u003ea b-\u003ea c-\u003ea d",
        "package": "synthesizer",
        "partial": "",
        "signature": "f(a-\u003eb-\u003ec)-\u003ef a-\u003ef b-\u003ef c"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-ApplicativeUtility.html#v:liftP3",
      "description": {
        "fct-module": "Synthesizer.ApplicativeUtility",
        "fct-package": "synthesizer",
        "fct-signature": "f (a -\u003e b -\u003e c -\u003e d) -\u003e f a -\u003e f b -\u003e f c -\u003e f d",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-ApplicativeUtility.html#liftP3",
        "fct-type": "unknown",
        "title": "liftP3"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer ApplicativeUtility",
        "module": "Synthesizer.ApplicativeUtility",
        "name": "liftP3",
        "normalized": "a(b-\u003ec-\u003ed-\u003ee)-\u003ea b-\u003ea c-\u003ea d-\u003ea e",
        "package": "synthesizer",
        "partial": "",
        "signature": "f(a-\u003eb-\u003ec-\u003ed)-\u003ef a-\u003ef b-\u003ef c-\u003ef d"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-ApplicativeUtility.html#v:liftP4",
      "description": {
        "fct-module": "Synthesizer.ApplicativeUtility",
        "fct-package": "synthesizer",
        "fct-signature": "f (a -\u003e b -\u003e c -\u003e d -\u003e e) -\u003e f a -\u003e f b -\u003e f c -\u003e f d -\u003e f e",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-ApplicativeUtility.html#liftP4",
        "fct-type": "unknown",
        "title": "liftP4"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer ApplicativeUtility",
        "module": "Synthesizer.ApplicativeUtility",
        "name": "liftP4",
        "normalized": "a(b-\u003ec-\u003ed-\u003ee-\u003ef)-\u003ea b-\u003ea c-\u003ea d-\u003ea e-\u003ea f",
        "package": "synthesizer",
        "partial": "",
        "signature": "f(a-\u003eb-\u003ec-\u003ed-\u003ee)-\u003ef a-\u003ef b-\u003ef c-\u003ef d-\u003ef e"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-ApplicativeUtility.html#v:loop",
      "description": {
        "fct-descr": "process chain that shall be looped \n",
        "fct-module": "Synthesizer.ApplicativeUtility",
        "fct-package": "synthesizer",
        "fct-signature": "f (a -\u003e a)-\u003e f a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-ApplicativeUtility.html#loop",
        "fct-type": "unknown",
        "title": "loop"
      },
      "index": {
        "description": "process chain that shall be looped",
        "hierarchy": "Synthesizer ApplicativeUtility",
        "module": "Synthesizer.ApplicativeUtility",
        "name": "loop",
        "normalized": "a(b-\u003eb)-\u003ea b",
        "package": "synthesizer",
        "partial": "",
        "signature": "f(a-\u003ea)-\u003ef a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-Binary.html#v:C",
      "description": {
        "fct-module": "Synthesizer.Basic.Binary",
        "fct-package": "synthesizer",
        "fct-signature": "class",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-Binary.html#C",
        "fct-type": "unknown",
        "title": "C"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Basic Binary",
        "module": "Synthesizer.Basic.Binary",
        "name": "C",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-Binary.html#v:fromCanonicalWith",
      "description": {
        "fct-module": "Synthesizer.Basic.Binary",
        "fct-package": "synthesizer",
        "fct-signature": "(real -\u003e int) -\u003e real -\u003e int",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-Binary.html#fromCanonicalWith",
        "fct-type": "unknown",
        "title": "fromCanonicalWith"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Basic Binary",
        "module": "Synthesizer.Basic.Binary",
        "name": "fromCanonicalWith",
        "normalized": "(a-\u003eb)-\u003ea-\u003eb",
        "package": "synthesizer",
        "partial": "Canonical With",
        "signature": "(real-\u003eint)-\u003ereal-\u003eint"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-Binary.html#v:int16FromCanonical",
      "description": {
        "fct-module": "Synthesizer.Basic.Binary",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e Int16",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-Binary.html#int16FromCanonical",
        "fct-type": "unknown",
        "title": "int16FromCanonical"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Basic Binary",
        "module": "Synthesizer.Basic.Binary",
        "name": "int16FromCanonical",
        "normalized": "a-\u003eInt",
        "package": "synthesizer",
        "partial": "From Canonical",
        "signature": "a-\u003eInt"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-Binary.html#v:int16FromDouble",
      "description": {
        "fct-module": "Synthesizer.Basic.Binary",
        "fct-package": "synthesizer",
        "fct-signature": "Double -\u003e Int16",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-Binary.html#int16FromDouble",
        "fct-type": "unknown",
        "title": "int16FromDouble"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Basic Binary",
        "module": "Synthesizer.Basic.Binary",
        "name": "int16FromDouble",
        "normalized": "Double-\u003eInt",
        "package": "synthesizer",
        "partial": "From Double",
        "signature": "Double-\u003eInt"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-Binary.html#v:int16FromFloat",
      "description": {
        "fct-module": "Synthesizer.Basic.Binary",
        "fct-package": "synthesizer",
        "fct-signature": "Float -\u003e Int16",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-Binary.html#int16FromFloat",
        "fct-type": "unknown",
        "title": "int16FromFloat"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Basic Binary",
        "module": "Synthesizer.Basic.Binary",
        "name": "int16FromFloat",
        "normalized": "Float-\u003eInt",
        "package": "synthesizer",
        "partial": "From Float",
        "signature": "Float-\u003eInt"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-Binary.html#v:int16ToCanonical",
      "description": {
        "fct-module": "Synthesizer.Basic.Binary",
        "fct-package": "synthesizer",
        "fct-signature": "Int16 -\u003e a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-Binary.html#int16ToCanonical",
        "fct-type": "unknown",
        "title": "int16ToCanonical"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Basic Binary",
        "module": "Synthesizer.Basic.Binary",
        "name": "int16ToCanonical",
        "normalized": "Int-\u003ea",
        "package": "synthesizer",
        "partial": "To Canonical",
        "signature": "Int-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-Binary.html#v:numberOfChannels",
      "description": {
        "fct-module": "Synthesizer.Basic.Binary",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e Int",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-Binary.html#numberOfChannels",
        "fct-type": "unknown",
        "title": "numberOfChannels"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Basic Binary",
        "module": "Synthesizer.Basic.Binary",
        "name": "numberOfChannels",
        "normalized": "a-\u003eInt",
        "package": "synthesizer",
        "partial": "Of Channels",
        "signature": "a-\u003eInt"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-Binary.html#v:numberOfSignalChannels",
      "description": {
        "fct-module": "Synthesizer.Basic.Binary",
        "fct-package": "synthesizer",
        "fct-signature": "sig yv -\u003e Int",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-Binary.html#numberOfSignalChannels",
        "fct-type": "unknown",
        "title": "numberOfSignalChannels"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Basic Binary",
        "module": "Synthesizer.Basic.Binary",
        "name": "numberOfSignalChannels",
        "normalized": "a b-\u003eInt",
        "package": "synthesizer",
        "partial": "Of Signal Channels",
        "signature": "sig yv-\u003eInt"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-Binary.html#v:outputFromCanonical",
      "description": {
        "fct-module": "Synthesizer.Basic.Binary",
        "fct-package": "synthesizer",
        "fct-signature": "(int -\u003e out) -\u003e a -\u003e out",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-Binary.html#outputFromCanonical",
        "fct-type": "unknown",
        "title": "outputFromCanonical"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Basic Binary",
        "module": "Synthesizer.Basic.Binary",
        "name": "outputFromCanonical",
        "normalized": "(a-\u003eb)-\u003ec-\u003eb",
        "package": "synthesizer",
        "partial": "From Canonical",
        "signature": "(int-\u003eout)-\u003ea-\u003eout"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-Binary.html#v:toCanonical",
      "description": {
        "fct-module": "Synthesizer.Basic.Binary",
        "fct-package": "synthesizer",
        "fct-signature": "int -\u003e real",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-Binary.html#toCanonical",
        "fct-type": "unknown",
        "title": "toCanonical"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Basic Binary",
        "module": "Synthesizer.Basic.Binary",
        "name": "toCanonical",
        "normalized": "a-\u003eb",
        "package": "synthesizer",
        "partial": "Canonical",
        "signature": "int-\u003ereal"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-Distortion.html#v:clip",
      "description": {
        "fct-descr": "limit, fuzz booster\n",
        "fct-module": "Synthesizer.Basic.Distortion",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-Distortion.html#clip",
        "fct-type": "unknown",
        "title": "clip"
      },
      "index": {
        "description": "limit fuzz booster",
        "hierarchy": "Synthesizer Basic Distortion",
        "module": "Synthesizer.Basic.Distortion",
        "name": "clip",
        "normalized": "a-\u003ea",
        "package": "synthesizer",
        "partial": "",
        "signature": "a-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-Distortion.html#v:logit",
      "description": {
        "fct-descr": "logit, tanh\n",
        "fct-module": "Synthesizer.Basic.Distortion",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-Distortion.html#logit",
        "fct-type": "unknown",
        "title": "logit"
      },
      "index": {
        "description": "logit tanh",
        "hierarchy": "Synthesizer Basic Distortion",
        "module": "Synthesizer.Basic.Distortion",
        "name": "logit",
        "normalized": "a-\u003ea",
        "package": "synthesizer",
        "partial": "",
        "signature": "a-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-Distortion.html#v:quantize",
      "description": {
        "fct-module": "Synthesizer.Basic.Distortion",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-Distortion.html#quantize",
        "fct-type": "unknown",
        "title": "quantize"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Basic Distortion",
        "module": "Synthesizer.Basic.Distortion",
        "name": "quantize",
        "normalized": "a-\u003ea",
        "package": "synthesizer",
        "partial": "",
        "signature": "a-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-Distortion.html#v:sine",
      "description": {
        "fct-descr": "sine\n",
        "fct-module": "Synthesizer.Basic.Distortion",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-Distortion.html#sine",
        "fct-type": "unknown",
        "title": "sine"
      },
      "index": {
        "description": "sine",
        "hierarchy": "Synthesizer Basic Distortion",
        "module": "Synthesizer.Basic.Distortion",
        "name": "sine",
        "normalized": "a-\u003ea",
        "package": "synthesizer",
        "partial": "",
        "signature": "a-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-Distortion.html#v:zigZag",
      "description": {
        "fct-descr": "zig-zag\n",
        "fct-module": "Synthesizer.Basic.Distortion",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-Distortion.html#zigZag",
        "fct-type": "unknown",
        "title": "zigZag"
      },
      "index": {
        "description": "zig-zag",
        "hierarchy": "Synthesizer Basic Distortion",
        "module": "Synthesizer.Basic.Distortion",
        "name": "zigZag",
        "normalized": "a-\u003ea",
        "package": "synthesizer",
        "partial": "Zag",
        "signature": "a-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-DistortionControlled.html#v:clip",
      "description": {
        "fct-descr": "limit, fuzz booster\n",
        "fct-module": "Synthesizer.Basic.DistortionControlled",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e a -\u003e a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-DistortionControlled.html#clip",
        "fct-type": "unknown",
        "title": "clip"
      },
      "index": {
        "description": "limit fuzz booster",
        "hierarchy": "Synthesizer Basic DistortionControlled",
        "module": "Synthesizer.Basic.DistortionControlled",
        "name": "clip",
        "normalized": "a-\u003ea-\u003ea",
        "package": "synthesizer",
        "partial": "",
        "signature": "a-\u003ea-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-DistortionControlled.html#v:logit",
      "description": {
        "fct-descr": "logit, tanh\n",
        "fct-module": "Synthesizer.Basic.DistortionControlled",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e a -\u003e a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-DistortionControlled.html#logit",
        "fct-type": "unknown",
        "title": "logit"
      },
      "index": {
        "description": "logit tanh",
        "hierarchy": "Synthesizer Basic DistortionControlled",
        "module": "Synthesizer.Basic.DistortionControlled",
        "name": "logit",
        "normalized": "a-\u003ea-\u003ea",
        "package": "synthesizer",
        "partial": "",
        "signature": "a-\u003ea-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-DistortionControlled.html#v:quantize",
      "description": {
        "fct-module": "Synthesizer.Basic.DistortionControlled",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e a -\u003e a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-DistortionControlled.html#quantize",
        "fct-type": "unknown",
        "title": "quantize"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Basic DistortionControlled",
        "module": "Synthesizer.Basic.DistortionControlled",
        "name": "quantize",
        "normalized": "a-\u003ea-\u003ea",
        "package": "synthesizer",
        "partial": "",
        "signature": "a-\u003ea-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-DistortionControlled.html#v:sine",
      "description": {
        "fct-descr": "sine\n",
        "fct-module": "Synthesizer.Basic.DistortionControlled",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e a -\u003e a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-DistortionControlled.html#sine",
        "fct-type": "unknown",
        "title": "sine"
      },
      "index": {
        "description": "sine",
        "hierarchy": "Synthesizer Basic DistortionControlled",
        "module": "Synthesizer.Basic.DistortionControlled",
        "name": "sine",
        "normalized": "a-\u003ea-\u003ea",
        "package": "synthesizer",
        "partial": "",
        "signature": "a-\u003ea-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-DistortionControlled.html#v:zigZag",
      "description": {
        "fct-descr": "zig-zag\n",
        "fct-module": "Synthesizer.Basic.DistortionControlled",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e a -\u003e a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-DistortionControlled.html#zigZag",
        "fct-type": "unknown",
        "title": "zigZag"
      },
      "index": {
        "description": "zig-zag",
        "hierarchy": "Synthesizer Basic DistortionControlled",
        "module": "Synthesizer.Basic.DistortionControlled",
        "name": "zigZag",
        "normalized": "a-\u003ea-\u003ea",
        "package": "synthesizer",
        "partial": "Zag",
        "signature": "a-\u003ea-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-Phase.html#t:T",
      "description": {
        "fct-module": "Synthesizer.Basic.Phase",
        "fct-package": "synthesizer",
        "fct-signature": "data",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-Phase.html#T",
        "fct-type": "unknown",
        "title": "T"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Basic Phase",
        "module": "Synthesizer.Basic.Phase",
        "name": "T",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-Phase.html#v:decrement",
      "description": {
        "fct-module": "Synthesizer.Basic.Phase",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-Phase.html#decrement",
        "fct-type": "unknown",
        "title": "decrement"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Basic Phase",
        "module": "Synthesizer.Basic.Phase",
        "name": "decrement",
        "normalized": "a-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "a-\u003eT a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-Phase.html#v:fromRepresentative",
      "description": {
        "fct-module": "Synthesizer.Basic.Phase",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-Phase.html#fromRepresentative",
        "fct-type": "unknown",
        "title": "fromRepresentative"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Basic Phase",
        "module": "Synthesizer.Basic.Phase",
        "name": "fromRepresentative",
        "normalized": "a-\u003eT a",
        "package": "synthesizer",
        "partial": "Representative",
        "signature": "a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-Phase.html#v:increment",
      "description": {
        "fct-module": "Synthesizer.Basic.Phase",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-Phase.html#increment",
        "fct-type": "unknown",
        "title": "increment"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Basic Phase",
        "module": "Synthesizer.Basic.Phase",
        "name": "increment",
        "normalized": "a-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "a-\u003eT a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-Phase.html#v:multiply",
      "description": {
        "fct-module": "Synthesizer.Basic.Phase",
        "fct-package": "synthesizer",
        "fct-signature": "b -\u003e T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-Phase.html#multiply",
        "fct-type": "unknown",
        "title": "multiply"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Basic Phase",
        "module": "Synthesizer.Basic.Phase",
        "name": "multiply",
        "normalized": "a-\u003eT b-\u003eT b",
        "package": "synthesizer",
        "partial": "",
        "signature": "b-\u003eT a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-Phase.html#v:toRepresentative",
      "description": {
        "fct-module": "Synthesizer.Basic.Phase",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-Phase.html#toRepresentative",
        "fct-type": "unknown",
        "title": "toRepresentative"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Basic Phase",
        "module": "Synthesizer.Basic.Phase",
        "name": "toRepresentative",
        "normalized": "T a-\u003ea",
        "package": "synthesizer",
        "partial": "Representative",
        "signature": "T a-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-ToneModulation.html#t:Coords",
      "description": {
        "fct-module": "Synthesizer.Basic.ToneModulation",
        "fct-package": "synthesizer",
        "fct-signature": "type",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-ToneModulation.html#Coords",
        "fct-type": "unknown",
        "title": "Coords"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Basic ToneModulation",
        "module": "Synthesizer.Basic.ToneModulation",
        "name": "Coords",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Coords",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-ToneModulation.html#t:Skip",
      "description": {
        "fct-module": "Synthesizer.Basic.ToneModulation",
        "fct-package": "synthesizer",
        "fct-signature": "type",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-ToneModulation.html#Skip",
        "fct-type": "unknown",
        "title": "Skip"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Basic ToneModulation",
        "module": "Synthesizer.Basic.ToneModulation",
        "name": "Skip",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Skip",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-ToneModulation.html#v:det2",
      "description": {
        "fct-module": "Synthesizer.Basic.ToneModulation",
        "fct-package": "synthesizer",
        "fct-signature": "((a, a), (a, a)) -\u003e a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-ToneModulation.html#det2",
        "fct-type": "unknown",
        "title": "det2"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Basic ToneModulation",
        "module": "Synthesizer.Basic.ToneModulation",
        "name": "det2",
        "normalized": "((a,a),(a,a))-\u003ea",
        "package": "synthesizer",
        "partial": "",
        "signature": "((a,a),(a,a))-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-ToneModulation.html#v:flattenShapePhase",
      "description": {
        "fct-module": "Synthesizer.Basic.ToneModulation",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e a -\u003e (a, T a) -\u003e (Int, (a, a))",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-ToneModulation.html#flattenShapePhase",
        "fct-type": "unknown",
        "title": "flattenShapePhase"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Basic ToneModulation",
        "module": "Synthesizer.Basic.ToneModulation",
        "name": "flattenShapePhase",
        "normalized": "Int-\u003ea-\u003e(a,T a)-\u003e(Int,(a,a))",
        "package": "synthesizer",
        "partial": "Shape Phase",
        "signature": "Int-\u003ea-\u003e(a,T a)-\u003e(Int,(a,a))"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-ToneModulation.html#v:flattenShapePhaseAnalytic",
      "description": {
        "fct-module": "Synthesizer.Basic.ToneModulation",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e a -\u003e (a, T a) -\u003e (Int, (a, a))",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-ToneModulation.html#flattenShapePhaseAnalytic",
        "fct-type": "unknown",
        "title": "flattenShapePhaseAnalytic"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Basic ToneModulation",
        "module": "Synthesizer.Basic.ToneModulation",
        "name": "flattenShapePhaseAnalytic",
        "normalized": "Int-\u003ea-\u003e(a,T a)-\u003e(Int,(a,a))",
        "package": "synthesizer",
        "partial": "Shape Phase Analytic",
        "signature": "Int-\u003ea-\u003e(a,T a)-\u003e(Int,(a,a))"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-ToneModulation.html#v:interpolationNumber",
      "description": {
        "fct-module": "Synthesizer.Basic.ToneModulation",
        "fct-package": "synthesizer",
        "fct-signature": "Margin -\u003e Margin -\u003e Int -\u003e Int",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-ToneModulation.html#interpolationNumber",
        "fct-type": "unknown",
        "title": "interpolationNumber"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Basic ToneModulation",
        "module": "Synthesizer.Basic.ToneModulation",
        "name": "interpolationNumber",
        "normalized": "Margin-\u003eMargin-\u003eInt-\u003eInt",
        "package": "synthesizer",
        "partial": "Number",
        "signature": "Margin-\u003eMargin-\u003eInt-\u003eInt"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-ToneModulation.html#v:interpolationOffset",
      "description": {
        "fct-module": "Synthesizer.Basic.ToneModulation",
        "fct-package": "synthesizer",
        "fct-signature": "Margin -\u003e Margin -\u003e Int -\u003e Int",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-ToneModulation.html#interpolationOffset",
        "fct-type": "unknown",
        "title": "interpolationOffset"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Basic ToneModulation",
        "module": "Synthesizer.Basic.ToneModulation",
        "name": "interpolationOffset",
        "normalized": "Margin-\u003eMargin-\u003eInt-\u003eInt",
        "package": "synthesizer",
        "partial": "Offset",
        "signature": "Margin-\u003eMargin-\u003eInt-\u003eInt"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-ToneModulation.html#v:shapeLimits",
      "description": {
        "fct-module": "Synthesizer.Basic.ToneModulation",
        "fct-package": "synthesizer",
        "fct-signature": "Margin -\u003e Margin -\u003e Int -\u003e t -\u003e (t, t)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-ToneModulation.html#shapeLimits",
        "fct-type": "unknown",
        "title": "shapeLimits"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Basic ToneModulation",
        "module": "Synthesizer.Basic.ToneModulation",
        "name": "shapeLimits",
        "normalized": "Margin-\u003eMargin-\u003eInt-\u003ea-\u003e(a,a)",
        "package": "synthesizer",
        "partial": "Limits",
        "signature": "Margin-\u003eMargin-\u003eInt-\u003et-\u003e(t,t)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-ToneModulation.html#v:solveSLE2",
      "description": {
        "fct-module": "Synthesizer.Basic.ToneModulation",
        "fct-package": "synthesizer",
        "fct-signature": "((a, a), (a, a)) -\u003e (a, a) -\u003e (a, a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-ToneModulation.html#solveSLE2",
        "fct-type": "unknown",
        "title": "solveSLE2"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Basic ToneModulation",
        "module": "Synthesizer.Basic.ToneModulation",
        "name": "solveSLE2",
        "normalized": "((a,a),(a,a))-\u003e(a,a)-\u003e(a,a)",
        "package": "synthesizer",
        "partial": "SLE",
        "signature": "((a,a),(a,a))-\u003e(a,a)-\u003e(a,a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-ToneModulation.html#v:untangleShapePhase",
      "description": {
        "fct-descr": "\u003cp\u003eConvert from the (shape,phase) parameter pair\nto the index within a wave (step) and the index of a wave (leap)\nin the sampled prototype tone.\n\u003c/p\u003e\u003cp\u003eFor this routine it would be simpler,\nif \u003ctt\u003eshape\u003c/tt\u003e would measure in multiples of \u003ctt\u003eperiod\u003c/tt\u003e\n(we would only need a Ring instance),\nbut for shapeLimit it is better the way it is.\n\u003c/p\u003e",
        "fct-module": "Synthesizer.Basic.ToneModulation",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e a -\u003e (a, a) -\u003e (a, a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-ToneModulation.html#untangleShapePhase",
        "fct-type": "unknown",
        "title": "untangleShapePhase"
      },
      "index": {
        "description": "Convert from the shape phase parameter pair to the index within wave step and the index of wave leap in the sampled prototype tone For this routine it would be simpler if shape would measure in multiples of period we would only need Ring instance but for shapeLimit it is better the way it is",
        "hierarchy": "Synthesizer Basic ToneModulation",
        "module": "Synthesizer.Basic.ToneModulation",
        "name": "untangleShapePhase",
        "normalized": "Int-\u003ea-\u003e(a,a)-\u003e(a,a)",
        "package": "synthesizer",
        "partial": "Shape Phase",
        "signature": "Int-\u003ea-\u003e(a,a)-\u003e(a,a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-ToneModulation.html#v:untangleShapePhaseAnalytic",
      "description": {
        "fct-module": "Synthesizer.Basic.ToneModulation",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e a -\u003e (a, a) -\u003e (a, a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-ToneModulation.html#untangleShapePhaseAnalytic",
        "fct-type": "unknown",
        "title": "untangleShapePhaseAnalytic"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Basic ToneModulation",
        "module": "Synthesizer.Basic.ToneModulation",
        "name": "untangleShapePhaseAnalytic",
        "normalized": "Int-\u003ea-\u003e(a,a)-\u003e(a,a)",
        "package": "synthesizer",
        "partial": "Shape Phase Analytic",
        "signature": "Int-\u003ea-\u003e(a,a)-\u003e(a,a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-Wave.html#t:Harmonic",
      "description": {
        "fct-module": "Synthesizer.Basic.Wave",
        "fct-package": "synthesizer",
        "fct-signature": "data",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-Wave.html#Harmonic",
        "fct-type": "unknown",
        "title": "Harmonic"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Basic Wave",
        "module": "Synthesizer.Basic.Wave",
        "name": "Harmonic",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Harmonic",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-Wave.html#t:T",
      "description": {
        "fct-module": "Synthesizer.Basic.Wave",
        "fct-package": "synthesizer",
        "fct-signature": "newtype",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-Wave.html#T",
        "fct-type": "unknown",
        "title": "T"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Basic Wave",
        "module": "Synthesizer.Basic.Wave",
        "name": "T",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-Wave.html#v:affineComb",
      "description": {
        "fct-module": "Synthesizer.Basic.Wave",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e (a, a) -\u003e a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-Wave.html#affineComb",
        "fct-type": "unknown",
        "title": "affineComb"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Basic Wave",
        "module": "Synthesizer.Basic.Wave",
        "name": "affineComb",
        "normalized": "a-\u003e(a,a)-\u003ea",
        "package": "synthesizer",
        "partial": "Comb",
        "signature": "a-\u003e(a,a)-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-Wave.html#v:amplify",
      "description": {
        "fct-module": "Synthesizer.Basic.Wave",
        "fct-package": "synthesizer",
        "fct-signature": "y -\u003e T t y -\u003e T t y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-Wave.html#amplify",
        "fct-type": "unknown",
        "title": "amplify"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Basic Wave",
        "module": "Synthesizer.Basic.Wave",
        "name": "amplify",
        "normalized": "a-\u003eT b a-\u003eT b a",
        "package": "synthesizer",
        "partial": "",
        "signature": "y-\u003eT t y-\u003eT t y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-Wave.html#v:apply",
      "description": {
        "fct-module": "Synthesizer.Basic.Wave",
        "fct-package": "synthesizer",
        "fct-signature": "T t y -\u003e T t -\u003e y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-Wave.html#apply",
        "fct-type": "unknown",
        "title": "apply"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Basic Wave",
        "module": "Synthesizer.Basic.Wave",
        "name": "apply",
        "normalized": "T a b-\u003eT a-\u003eb",
        "package": "synthesizer",
        "partial": "",
        "signature": "T t y-\u003eT t-\u003ey"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-Wave.html#v:composedHarmonics",
      "description": {
        "fct-descr": "\u003cp\u003eSpecify the wave by its harmonics.\n\u003c/p\u003e\u003cp\u003eThe function is implemented quite efficiently\nby applying the Horner scheme to a polynomial with complex coefficients\n(the harmonic parameters)\nusing a complex exponential as argument.\n\u003c/p\u003e",
        "fct-module": "Synthesizer.Basic.Wave",
        "fct-package": "synthesizer",
        "fct-signature": "[Harmonic a] -\u003e T a a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-Wave.html#composedHarmonics",
        "fct-type": "unknown",
        "title": "composedHarmonics"
      },
      "index": {
        "description": "Specify the wave by its harmonics The function is implemented quite efficiently by applying the Horner scheme to polynomial with complex coefficients the harmonic parameters using complex exponential as argument",
        "hierarchy": "Synthesizer Basic Wave",
        "module": "Synthesizer.Basic.Wave",
        "name": "composedHarmonics",
        "normalized": "[Harmonic a]-\u003eT a a",
        "package": "synthesizer",
        "partial": "Harmonics",
        "signature": "[Harmonic a]-\u003eT a a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-Wave.html#v:cosine",
      "description": {
        "fct-module": "Synthesizer.Basic.Wave",
        "fct-package": "synthesizer",
        "fct-signature": "T a a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-Wave.html#cosine",
        "fct-type": "unknown",
        "title": "cosine"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Basic Wave",
        "module": "Synthesizer.Basic.Wave",
        "name": "cosine",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-Wave.html#v:distort",
      "description": {
        "fct-module": "Synthesizer.Basic.Wave",
        "fct-package": "synthesizer",
        "fct-signature": "(y -\u003e z) -\u003e T t y -\u003e T t z",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-Wave.html#distort",
        "fct-type": "unknown",
        "title": "distort"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Basic Wave",
        "module": "Synthesizer.Basic.Wave",
        "name": "distort",
        "normalized": "(a-\u003eb)-\u003eT c a-\u003eT c b",
        "package": "synthesizer",
        "partial": "",
        "signature": "(y-\u003ez)-\u003eT t y-\u003eT t z"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-Wave.html#v:fastSine2",
      "description": {
        "fct-descr": "Approximation of sine by parabolas.\nSurprisingly not really faster than \u003ctt\u003e\u003ca\u003esine\u003c/a\u003e\u003c/tt\u003e.\n",
        "fct-module": "Synthesizer.Basic.Wave",
        "fct-package": "synthesizer",
        "fct-signature": "T a a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-Wave.html#fastSine2",
        "fct-type": "unknown",
        "title": "fastSine2"
      },
      "index": {
        "description": "Approximation of sine by parabolas Surprisingly not really faster than sine",
        "hierarchy": "Synthesizer Basic Wave",
        "module": "Synthesizer.Basic.Wave",
        "name": "fastSine2",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Sine",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-Wave.html#v:fastSine4",
      "description": {
        "fct-descr": "Approximation of sine by fourth order polynomials.\n",
        "fct-module": "Synthesizer.Basic.Wave",
        "fct-package": "synthesizer",
        "fct-signature": "T a a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-Wave.html#fastSine4",
        "fct-type": "unknown",
        "title": "fastSine4"
      },
      "index": {
        "description": "Approximation of sine by fourth order polynomials",
        "hierarchy": "Synthesizer Basic Wave",
        "module": "Synthesizer.Basic.Wave",
        "name": "fastSine4",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Sine",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-Wave.html#v:fromFunction",
      "description": {
        "fct-module": "Synthesizer.Basic.Wave",
        "fct-package": "synthesizer",
        "fct-signature": "(t -\u003e y) -\u003e T t y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-Wave.html#fromFunction",
        "fct-type": "unknown",
        "title": "fromFunction"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Basic Wave",
        "module": "Synthesizer.Basic.Wave",
        "name": "fromFunction",
        "normalized": "(a-\u003eb)-\u003eT a b",
        "package": "synthesizer",
        "partial": "Function",
        "signature": "(t-\u003ey)-\u003eT t y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-Wave.html#v:harmonic",
      "description": {
        "fct-module": "Synthesizer.Basic.Wave",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e a -\u003e Harmonic a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-Wave.html#harmonic",
        "fct-type": "unknown",
        "title": "harmonic"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Basic Wave",
        "module": "Synthesizer.Basic.Wave",
        "name": "harmonic",
        "normalized": "T a-\u003ea-\u003eHarmonic a",
        "package": "synthesizer",
        "partial": "",
        "signature": "T a-\u003ea-\u003eHarmonic a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-Wave.html#v:helix",
      "description": {
        "fct-module": "Synthesizer.Basic.Wave",
        "fct-package": "synthesizer",
        "fct-signature": "T a (T a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-Wave.html#helix",
        "fct-type": "unknown",
        "title": "helix"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Basic Wave",
        "module": "Synthesizer.Basic.Wave",
        "name": "helix",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-Wave.html#v:logitSaw",
      "description": {
        "fct-descr": "Tangens hyperbolicus allows interpolation\nbetween some kind of saw tooth and square wave.\nIn principle it is not necessary\nbecause you can distort a saw tooth oscillation by \u003ctt\u003emap tanh\u003c/tt\u003e.\n",
        "fct-module": "Synthesizer.Basic.Wave",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e T a a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-Wave.html#logitSaw",
        "fct-type": "unknown",
        "title": "logitSaw"
      },
      "index": {
        "description": "Tangens hyperbolicus allows interpolation between some kind of saw tooth and square wave In principle it is not necessary because you can distort saw tooth oscillation by map tanh",
        "hierarchy": "Synthesizer Basic Wave",
        "module": "Synthesizer.Basic.Wave",
        "name": "logitSaw",
        "normalized": "a-\u003eT a a",
        "package": "synthesizer",
        "partial": "Saw",
        "signature": "a-\u003eT a a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-Wave.html#v:logitSine",
      "description": {
        "fct-descr": "Tangens hyperbolicus of a sine allows interpolation\nbetween some kind of sine and square wave.\nIn principle it is not necessary\nbecause you can distort a square oscillation by \u003ctt\u003emap tanh\u003c/tt\u003e.\n",
        "fct-module": "Synthesizer.Basic.Wave",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e T a a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-Wave.html#logitSine",
        "fct-type": "unknown",
        "title": "logitSine"
      },
      "index": {
        "description": "Tangens hyperbolicus of sine allows interpolation between some kind of sine and square wave In principle it is not necessary because you can distort square oscillation by map tanh",
        "hierarchy": "Synthesizer Basic Wave",
        "module": "Synthesizer.Basic.Wave",
        "name": "logitSine",
        "normalized": "a-\u003eT a a",
        "package": "synthesizer",
        "partial": "Sine",
        "signature": "a-\u003eT a a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-Wave.html#v:overtone",
      "description": {
        "fct-module": "Synthesizer.Basic.Wave",
        "fct-package": "synthesizer",
        "fct-signature": "n -\u003e T t y -\u003e T t y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-Wave.html#overtone",
        "fct-type": "unknown",
        "title": "overtone"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Basic Wave",
        "module": "Synthesizer.Basic.Wave",
        "name": "overtone",
        "normalized": "a-\u003eT b c-\u003eT b c",
        "package": "synthesizer",
        "partial": "",
        "signature": "n-\u003eT t y-\u003eT t y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-Wave.html#v:phaseOffset",
      "description": {
        "fct-descr": "Turn an unparametrized waveform into a parametrized one,\nwhere the parameter is a phase offset.\nThis way you express a phase modulated oscillator\nusing a shape modulated oscillator.\n",
        "fct-module": "Synthesizer.Basic.Wave",
        "fct-package": "synthesizer",
        "fct-signature": "T a b -\u003e a -\u003e T a b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-Wave.html#phaseOffset",
        "fct-type": "unknown",
        "title": "phaseOffset"
      },
      "index": {
        "description": "Turn an unparametrized waveform into parametrized one where the parameter is phase offset This way you express phase modulated oscillator using shape modulated oscillator",
        "hierarchy": "Synthesizer Basic Wave",
        "module": "Synthesizer.Basic.Wave",
        "name": "phaseOffset",
        "normalized": "T a b-\u003ea-\u003eT a b",
        "package": "synthesizer",
        "partial": "Offset",
        "signature": "T a b-\u003ea-\u003eT a b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-Wave.html#v:piecewiseParabolaSaw",
      "description": {
        "fct-descr": "0 for \u003ctt\u003e\u003ca\u003efastSine2\u003c/a\u003e\u003c/tt\u003e, 1 for \u003ctt\u003e\u003ca\u003esaw\u003c/a\u003e\u003c/tt\u003e \n",
        "fct-module": "Synthesizer.Basic.Wave",
        "fct-package": "synthesizer",
        "fct-signature": "a-\u003e T a a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-Wave.html#piecewiseParabolaSaw",
        "fct-type": "unknown",
        "title": "piecewiseParabolaSaw"
      },
      "index": {
        "description": "for fastSine2 for saw",
        "hierarchy": "Synthesizer Basic Wave",
        "module": "Synthesizer.Basic.Wave",
        "name": "piecewiseParabolaSaw",
        "normalized": "a-\u003eT a a",
        "package": "synthesizer",
        "partial": "Parabola Saw",
        "signature": "a-\u003eT a a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-Wave.html#v:piecewiseSineSaw",
      "description": {
        "fct-descr": "0 for \u003ctt\u003e\u003ca\u003esine\u003c/a\u003e\u003c/tt\u003e, 1 for \u003ctt\u003e\u003ca\u003esaw\u003c/a\u003e\u003c/tt\u003e \n",
        "fct-module": "Synthesizer.Basic.Wave",
        "fct-package": "synthesizer",
        "fct-signature": "a-\u003e T a a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-Wave.html#piecewiseSineSaw",
        "fct-type": "unknown",
        "title": "piecewiseSineSaw"
      },
      "index": {
        "description": "for sine for saw",
        "hierarchy": "Synthesizer Basic Wave",
        "module": "Synthesizer.Basic.Wave",
        "name": "piecewiseSineSaw",
        "normalized": "a-\u003eT a a",
        "package": "synthesizer",
        "partial": "Sine Saw",
        "signature": "a-\u003eT a a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-Wave.html#v:power01Normed",
      "description": {
        "fct-descr": "auxiliary\n",
        "fct-module": "Synthesizer.Basic.Wave",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e a -\u003e a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-Wave.html#power01Normed",
        "fct-type": "unknown",
        "title": "power01Normed"
      },
      "index": {
        "description": "auxiliary",
        "hierarchy": "Synthesizer Basic Wave",
        "module": "Synthesizer.Basic.Wave",
        "name": "power01Normed",
        "normalized": "a-\u003ea-\u003ea",
        "package": "synthesizer",
        "partial": "Normed",
        "signature": "a-\u003ea-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-Wave.html#v:powerNormed",
      "description": {
        "fct-descr": "\u003cp\u003ePower function.\n\u003c/p\u003e\u003cp\u003eRoughly the map \u003ctt\u003ex p -\u003e x**p\u003c/tt\u003e\nbut retains the sign of \u003ctt\u003ex\u003c/tt\u003e and\nnormalizes the mapping over \u003ctt\u003e[-1,1]\u003c/tt\u003e to L2 norm of 1.\n\u003c/p\u003e",
        "fct-module": "Synthesizer.Basic.Wave",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e T a a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-Wave.html#powerNormed",
        "fct-type": "unknown",
        "title": "powerNormed"
      },
      "index": {
        "description": "Power function Roughly the map but retains the sign of and normalizes the mapping over to L2 norm of",
        "hierarchy": "Synthesizer Basic Wave",
        "module": "Synthesizer.Basic.Wave",
        "name": "powerNormed",
        "normalized": "a-\u003eT a a",
        "package": "synthesizer",
        "partial": "Normed",
        "signature": "a-\u003eT a a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-Wave.html#v:powerSigned",
      "description": {
        "fct-descr": "auxiliary\n",
        "fct-module": "Synthesizer.Basic.Wave",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e a -\u003e a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-Wave.html#powerSigned",
        "fct-type": "unknown",
        "title": "powerSigned"
      },
      "index": {
        "description": "auxiliary",
        "hierarchy": "Synthesizer Basic Wave",
        "module": "Synthesizer.Basic.Wave",
        "name": "powerSigned",
        "normalized": "a-\u003ea-\u003ea",
        "package": "synthesizer",
        "partial": "Signed",
        "signature": "a-\u003ea-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-Wave.html#v:raise",
      "description": {
        "fct-module": "Synthesizer.Basic.Wave",
        "fct-package": "synthesizer",
        "fct-signature": "y -\u003e T t y -\u003e T t y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-Wave.html#raise",
        "fct-type": "unknown",
        "title": "raise"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Basic Wave",
        "module": "Synthesizer.Basic.Wave",
        "name": "raise",
        "normalized": "a-\u003eT b a-\u003eT b a",
        "package": "synthesizer",
        "partial": "",
        "signature": "y-\u003eT t y-\u003eT t y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-Wave.html#v:saw",
      "description": {
        "fct-descr": "saw tooth,\nit's a ramp down in order to have a positive coefficient for the first partial sine\n",
        "fct-module": "Synthesizer.Basic.Wave",
        "fct-package": "synthesizer",
        "fct-signature": "T a a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-Wave.html#saw",
        "fct-type": "unknown",
        "title": "saw"
      },
      "index": {
        "description": "saw tooth it ramp down in order to have positive coefficient for the first partial sine",
        "hierarchy": "Synthesizer Basic Wave",
        "module": "Synthesizer.Basic.Wave",
        "name": "saw",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-Wave.html#v:sawComplex",
      "description": {
        "fct-descr": "\u003cpre\u003esawCos + i*saw\u003c/pre\u003e\u003cp\u003eThis is an analytic function and thus it may be used for frequency shifting.\n\u003c/p\u003e\u003cp\u003eThe formula can be derived from the power series of the logarithm function.\n\u003c/p\u003e",
        "fct-module": "Synthesizer.Basic.Wave",
        "fct-package": "synthesizer",
        "fct-signature": "T a (T a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-Wave.html#sawComplex",
        "fct-type": "unknown",
        "title": "sawComplex"
      },
      "index": {
        "description": "sawCos saw This is an analytic function and thus it may be used for frequency shifting The formula can be derived from the power series of the logarithm function",
        "hierarchy": "Synthesizer Basic Wave",
        "module": "Synthesizer.Basic.Wave",
        "name": "sawComplex",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Complex",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-Wave.html#v:sawCos",
      "description": {
        "fct-descr": "This wave has the same absolute Fourier coefficients as \u003ctt\u003e\u003ca\u003esaw\u003c/a\u003e\u003c/tt\u003e\nbut the partial waves are shifted by 90 degree.\nThat is, it is the Hilbert transform of the saw wave.\nThe formula is derived from \u003ctt\u003e\u003ca\u003esawComplex\u003c/a\u003e\u003c/tt\u003e.\n",
        "fct-module": "Synthesizer.Basic.Wave",
        "fct-package": "synthesizer",
        "fct-signature": "T a a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-Wave.html#sawCos",
        "fct-type": "unknown",
        "title": "sawCos"
      },
      "index": {
        "description": "This wave has the same absolute Fourier coefficients as saw but the partial waves are shifted by degree That is it is the Hilbert transform of the saw wave The formula is derived from sawComplex",
        "hierarchy": "Synthesizer Basic Wave",
        "module": "Synthesizer.Basic.Wave",
        "name": "sawCos",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Cos",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-Wave.html#v:sawPike",
      "description": {
        "fct-descr": "pike width ranging from 0 to 1, 1 yields \u003ctt\u003e\u003ca\u003esaw\u003c/a\u003e\u003c/tt\u003e \n",
        "fct-module": "Synthesizer.Basic.Wave",
        "fct-package": "synthesizer",
        "fct-signature": "a-\u003e T a a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-Wave.html#sawPike",
        "fct-type": "unknown",
        "title": "sawPike"
      },
      "index": {
        "description": "pike width ranging from to yields saw",
        "hierarchy": "Synthesizer Basic Wave",
        "module": "Synthesizer.Basic.Wave",
        "name": "sawPike",
        "normalized": "a-\u003eT a a",
        "package": "synthesizer",
        "partial": "Pike",
        "signature": "a-\u003eT a a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-Wave.html#v:sine",
      "description": {
        "fct-descr": "map a phase to value of a sine wave \n",
        "fct-module": "Synthesizer.Basic.Wave",
        "fct-package": "synthesizer",
        "fct-signature": "T a a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-Wave.html#sine",
        "fct-type": "unknown",
        "title": "sine"
      },
      "index": {
        "description": "map phase to value of sine wave",
        "hierarchy": "Synthesizer Basic Wave",
        "module": "Synthesizer.Basic.Wave",
        "name": "sine",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-Wave.html#v:sineSawSharp",
      "description": {
        "fct-descr": "0 for \u003ctt\u003e\u003ca\u003esine\u003c/a\u003e\u003c/tt\u003e, 1 for \u003ctt\u003e\u003ca\u003esaw\u003c/a\u003e\u003c/tt\u003e \n",
        "fct-module": "Synthesizer.Basic.Wave",
        "fct-package": "synthesizer",
        "fct-signature": "a-\u003e T a a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-Wave.html#sineSawSharp",
        "fct-type": "unknown",
        "title": "sineSawSharp"
      },
      "index": {
        "description": "for sine for saw",
        "hierarchy": "Synthesizer Basic Wave",
        "module": "Synthesizer.Basic.Wave",
        "name": "sineSawSharp",
        "normalized": "a-\u003eT a a",
        "package": "synthesizer",
        "partial": "Saw Sharp",
        "signature": "a-\u003eT a a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-Wave.html#v:sineSawSmooth",
      "description": {
        "fct-descr": "0 for \u003ctt\u003e\u003ca\u003esine\u003c/a\u003e\u003c/tt\u003e, 1 for \u003ctt\u003e\u003ca\u003esaw\u003c/a\u003e\u003c/tt\u003e \n",
        "fct-module": "Synthesizer.Basic.Wave",
        "fct-package": "synthesizer",
        "fct-signature": "a-\u003e T a a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-Wave.html#sineSawSmooth",
        "fct-type": "unknown",
        "title": "sineSawSmooth"
      },
      "index": {
        "description": "for sine for saw",
        "hierarchy": "Synthesizer Basic Wave",
        "module": "Synthesizer.Basic.Wave",
        "name": "sineSawSmooth",
        "normalized": "a-\u003eT a a",
        "package": "synthesizer",
        "partial": "Saw Smooth",
        "signature": "a-\u003eT a a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-Wave.html#v:sineSquare",
      "description": {
        "fct-descr": "0 for \u003ctt\u003e\u003ca\u003esine\u003c/a\u003e\u003c/tt\u003e, 1 for \u003ctt\u003e\u003ca\u003esquare\u003c/a\u003e\u003c/tt\u003e \n",
        "fct-module": "Synthesizer.Basic.Wave",
        "fct-package": "synthesizer",
        "fct-signature": "a-\u003e T a a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-Wave.html#sineSquare",
        "fct-type": "unknown",
        "title": "sineSquare"
      },
      "index": {
        "description": "for sine for square",
        "hierarchy": "Synthesizer Basic Wave",
        "module": "Synthesizer.Basic.Wave",
        "name": "sineSquare",
        "normalized": "a-\u003eT a a",
        "package": "synthesizer",
        "partial": "Square",
        "signature": "a-\u003eT a a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-Wave.html#v:square",
      "description": {
        "fct-descr": "square \n",
        "fct-module": "Synthesizer.Basic.Wave",
        "fct-package": "synthesizer",
        "fct-signature": "T a a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-Wave.html#square",
        "fct-type": "unknown",
        "title": "square"
      },
      "index": {
        "description": "square",
        "hierarchy": "Synthesizer Basic Wave",
        "module": "Synthesizer.Basic.Wave",
        "name": "square",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-Wave.html#v:squareAsymmetric",
      "description": {
        "fct-descr": "value between -1 and 1 controlling the ratio of high and low time:\n              -1 turns the high time to zero,\n               1 makes the low time zero,\n               0 yields \u003ctt\u003e\u003ca\u003esquare\u003c/a\u003e\u003c/tt\u003e \n",
        "fct-module": "Synthesizer.Basic.Wave",
        "fct-package": "synthesizer",
        "fct-signature": "a-\u003e T a a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-Wave.html#squareAsymmetric",
        "fct-type": "unknown",
        "title": "squareAsymmetric"
      },
      "index": {
        "description": "value between and controlling the ratio of high and low time turns the high time to zero makes the low time zero yields square",
        "hierarchy": "Synthesizer Basic Wave",
        "module": "Synthesizer.Basic.Wave",
        "name": "squareAsymmetric",
        "normalized": "a-\u003eT a a",
        "package": "synthesizer",
        "partial": "Asymmetric",
        "signature": "a-\u003eT a a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-Wave.html#v:squareBalanced",
      "description": {
        "fct-descr": "Like \u003ctt\u003e\u003ca\u003esquareAsymmetric\u003c/a\u003e\u003c/tt\u003e but with zero average.\nIt could be simulated by adding two saw oscillations\nwith 180 degree phase difference and opposite sign.\n",
        "fct-module": "Synthesizer.Basic.Wave",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e T a a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-Wave.html#squareBalanced",
        "fct-type": "unknown",
        "title": "squareBalanced"
      },
      "index": {
        "description": "Like squareAsymmetric but with zero average It could be simulated by adding two saw oscillations with degree phase difference and opposite sign",
        "hierarchy": "Synthesizer Basic Wave",
        "module": "Synthesizer.Basic.Wave",
        "name": "squareBalanced",
        "normalized": "a-\u003eT a a",
        "package": "synthesizer",
        "partial": "Balanced",
        "signature": "a-\u003eT a a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-Wave.html#v:squareComplex",
      "description": {
        "fct-descr": "\u003cpre\u003esquareCos + i*square\u003c/pre\u003e\u003cp\u003eThis is an analytic function and thus it may be used for frequency shifting.\n\u003c/p\u003e\u003cp\u003eThe formula can be derived from the power series of the area tangens function.\n\u003c/p\u003e",
        "fct-module": "Synthesizer.Basic.Wave",
        "fct-package": "synthesizer",
        "fct-signature": "T a (T a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-Wave.html#squareComplex",
        "fct-type": "unknown",
        "title": "squareComplex"
      },
      "index": {
        "description": "squareCos square This is an analytic function and thus it may be used for frequency shifting The formula can be derived from the power series of the area tangens function",
        "hierarchy": "Synthesizer Basic Wave",
        "module": "Synthesizer.Basic.Wave",
        "name": "squareComplex",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Complex",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-Wave.html#v:squareCos",
      "description": {
        "fct-descr": "This wave has the same absolute Fourier coefficients as \u003ctt\u003e\u003ca\u003esquare\u003c/a\u003e\u003c/tt\u003e\nbut the partial waves are shifted by 90 degree.\nThat is, it is the Hilbert transform of the saw wave.\n",
        "fct-module": "Synthesizer.Basic.Wave",
        "fct-package": "synthesizer",
        "fct-signature": "T a a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-Wave.html#squareCos",
        "fct-type": "unknown",
        "title": "squareCos"
      },
      "index": {
        "description": "This wave has the same absolute Fourier coefficients as square but the partial waves are shifted by degree That is it is the Hilbert transform of the saw wave",
        "hierarchy": "Synthesizer Basic Wave",
        "module": "Synthesizer.Basic.Wave",
        "name": "squareCos",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Cos",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-Wave.html#v:squarePike",
      "description": {
        "fct-descr": "pike width ranging from 0 to 1, 1 yields \u003ctt\u003e\u003ca\u003esquare\u003c/a\u003e\u003c/tt\u003e \n",
        "fct-module": "Synthesizer.Basic.Wave",
        "fct-package": "synthesizer",
        "fct-signature": "a-\u003e T a a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-Wave.html#squarePike",
        "fct-type": "unknown",
        "title": "squarePike"
      },
      "index": {
        "description": "pike width ranging from to yields square",
        "hierarchy": "Synthesizer Basic Wave",
        "module": "Synthesizer.Basic.Wave",
        "name": "squarePike",
        "normalized": "a-\u003eT a a",
        "package": "synthesizer",
        "partial": "Pike",
        "signature": "a-\u003eT a a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-Wave.html#v:squarePikeShift",
      "description": {
        "fct-descr": "pike width ranging from 0 to 1 \nshift ranges from -1 to 1; 0 yields \u003ctt\u003e\u003ca\u003esquarePike\u003c/a\u003e\u003c/tt\u003e \n",
        "fct-module": "Synthesizer.Basic.Wave",
        "fct-package": "synthesizer",
        "fct-signature": "a-\u003e a-\u003e T a a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-Wave.html#squarePikeShift",
        "fct-type": "unknown",
        "title": "squarePikeShift"
      },
      "index": {
        "description": "pike width ranging from to shift ranges from to yields squarePike",
        "hierarchy": "Synthesizer Basic Wave",
        "module": "Synthesizer.Basic.Wave",
        "name": "squarePikeShift",
        "normalized": "a-\u003ea-\u003eT a a",
        "package": "synthesizer",
        "partial": "Pike Shift",
        "signature": "a-\u003ea-\u003eT a a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-Wave.html#v:trapezoid",
      "description": {
        "fct-descr": "width of the plateau ranging from 0 to 1:\n              0 yields \u003ctt\u003e\u003ca\u003etriangle\u003c/a\u003e\u003c/tt\u003e, 1 yields \u003ctt\u003e\u003ca\u003esquare\u003c/a\u003e\u003c/tt\u003e \n",
        "fct-module": "Synthesizer.Basic.Wave",
        "fct-package": "synthesizer",
        "fct-signature": "a-\u003e T a a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-Wave.html#trapezoid",
        "fct-type": "unknown",
        "title": "trapezoid"
      },
      "index": {
        "description": "width of the plateau ranging from to yields triangle yields square",
        "hierarchy": "Synthesizer Basic Wave",
        "module": "Synthesizer.Basic.Wave",
        "name": "trapezoid",
        "normalized": "a-\u003eT a a",
        "package": "synthesizer",
        "partial": "",
        "signature": "a-\u003eT a a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-Wave.html#v:trapezoidAsymmetric",
      "description": {
        "fct-descr": "sum of the plateau widths ranging from 0 to 1:\n              0 yields \u003ctt\u003e\u003ca\u003etriangleAsymmetric\u003c/a\u003e\u003c/tt\u003e,\n              1 yields \u003ctt\u003e\u003ca\u003esquareAsymmetric\u003c/a\u003e\u003c/tt\u003e \nasymmetry of the plateau widths ranging from -1 to 1 \n",
        "fct-module": "Synthesizer.Basic.Wave",
        "fct-package": "synthesizer",
        "fct-signature": "a-\u003e a-\u003e T a a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-Wave.html#trapezoidAsymmetric",
        "fct-type": "unknown",
        "title": "trapezoidAsymmetric"
      },
      "index": {
        "description": "sum of the plateau widths ranging from to yields triangleAsymmetric yields squareAsymmetric asymmetry of the plateau widths ranging from to",
        "hierarchy": "Synthesizer Basic Wave",
        "module": "Synthesizer.Basic.Wave",
        "name": "trapezoidAsymmetric",
        "normalized": "a-\u003ea-\u003eT a a",
        "package": "synthesizer",
        "partial": "Asymmetric",
        "signature": "a-\u003ea-\u003eT a a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-Wave.html#v:trapezoidBalanced",
      "description": {
        "fct-descr": "trapezoid with distinct high and low time and zero direct current offset\n",
        "fct-module": "Synthesizer.Basic.Wave",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e a -\u003e T a a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-Wave.html#trapezoidBalanced",
        "fct-type": "unknown",
        "title": "trapezoidBalanced"
      },
      "index": {
        "description": "trapezoid with distinct high and low time and zero direct current offset",
        "hierarchy": "Synthesizer Basic Wave",
        "module": "Synthesizer.Basic.Wave",
        "name": "trapezoidBalanced",
        "normalized": "a-\u003ea-\u003eT a a",
        "package": "synthesizer",
        "partial": "Balanced",
        "signature": "a-\u003ea-\u003eT a a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-Wave.html#v:trapezoidSkew",
      "description": {
        "fct-descr": "width of the ramp,\n               that is 1 yields a downwards saw ramp\n               and 0 yields a square wave. \n",
        "fct-module": "Synthesizer.Basic.Wave",
        "fct-package": "synthesizer",
        "fct-signature": "a-\u003e T a a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-Wave.html#trapezoidSkew",
        "fct-type": "unknown",
        "title": "trapezoidSkew"
      },
      "index": {
        "description": "width of the ramp that is yields downwards saw ramp and yields square wave",
        "hierarchy": "Synthesizer Basic Wave",
        "module": "Synthesizer.Basic.Wave",
        "name": "trapezoidSkew",
        "normalized": "a-\u003eT a a",
        "package": "synthesizer",
        "partial": "Skew",
        "signature": "a-\u003eT a a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-Wave.html#v:triangle",
      "description": {
        "fct-descr": "triangle \n",
        "fct-module": "Synthesizer.Basic.Wave",
        "fct-package": "synthesizer",
        "fct-signature": "T a a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-Wave.html#triangle",
        "fct-type": "unknown",
        "title": "triangle"
      },
      "index": {
        "description": "triangle",
        "hierarchy": "Synthesizer Basic Wave",
        "module": "Synthesizer.Basic.Wave",
        "name": "triangle",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-Wave.html#v:triangleAsymmetric",
      "description": {
        "fct-descr": "asymmetry parameter ranging from -1 to 1:\n              For 0 you obtain the usual triangle.\n              For -1 you obtain a falling saw tooth starting with its maximum.\n              For 1 you obtain a rising saw tooth starting with a zero. \n",
        "fct-module": "Synthesizer.Basic.Wave",
        "fct-package": "synthesizer",
        "fct-signature": "a-\u003e T a a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-Wave.html#triangleAsymmetric",
        "fct-type": "unknown",
        "title": "triangleAsymmetric"
      },
      "index": {
        "description": "asymmetry parameter ranging from to For you obtain the usual triangle For you obtain falling saw tooth starting with its maximum For you obtain rising saw tooth starting with zero",
        "hierarchy": "Synthesizer Basic Wave",
        "module": "Synthesizer.Basic.Wave",
        "name": "triangleAsymmetric",
        "normalized": "a-\u003eT a a",
        "package": "synthesizer",
        "partial": "Asymmetric",
        "signature": "a-\u003eT a a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-Wave.html#v:trianglePike",
      "description": {
        "fct-descr": "pike width ranging from 0 to 1, 1 yields \u003ctt\u003e\u003ca\u003etriangle\u003c/a\u003e\u003c/tt\u003e \n",
        "fct-module": "Synthesizer.Basic.Wave",
        "fct-package": "synthesizer",
        "fct-signature": "a-\u003e T a a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-Wave.html#trianglePike",
        "fct-type": "unknown",
        "title": "trianglePike"
      },
      "index": {
        "description": "pike width ranging from to yields triangle",
        "hierarchy": "Synthesizer Basic Wave",
        "module": "Synthesizer.Basic.Wave",
        "name": "trianglePike",
        "normalized": "a-\u003eT a a",
        "package": "synthesizer",
        "partial": "Pike",
        "signature": "a-\u003eT a a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-Wave.html#v:trianglePikeShift",
      "description": {
        "fct-descr": "pike width ranging from 0 to 1 \nshift ranges from -1 to 1; 0 yields \u003ctt\u003e\u003ca\u003etrianglePike\u003c/a\u003e\u003c/tt\u003e \n",
        "fct-module": "Synthesizer.Basic.Wave",
        "fct-package": "synthesizer",
        "fct-signature": "a-\u003e a-\u003e T a a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-Wave.html#trianglePikeShift",
        "fct-type": "unknown",
        "title": "trianglePikeShift"
      },
      "index": {
        "description": "pike width ranging from to shift ranges from to yields trianglePike",
        "hierarchy": "Synthesizer Basic Wave",
        "module": "Synthesizer.Basic.Wave",
        "name": "trianglePikeShift",
        "normalized": "a-\u003ea-\u003eT a a",
        "package": "synthesizer",
        "partial": "Pike Shift",
        "signature": "a-\u003ea-\u003eT a a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-Wave.html#v:truncCosine",
      "description": {
        "fct-descr": "\u003cp\u003eA truncated cosine plus a ramp that guarantees a bump of high 2 at the boundaries.\n\u003c/p\u003e\u003cp\u003eIt is \u003ctt\u003etruncCosine (2 * fromIntegral n + 0.5) == truncOddCosine (2*n)\u003c/tt\u003e\n\u003c/p\u003e",
        "fct-module": "Synthesizer.Basic.Wave",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e T a a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-Wave.html#truncCosine",
        "fct-type": "unknown",
        "title": "truncCosine"
      },
      "index": {
        "description": "truncated cosine plus ramp that guarantees bump of high at the boundaries It is truncCosine fromIntegral truncOddCosine",
        "hierarchy": "Synthesizer Basic Wave",
        "module": "Synthesizer.Basic.Wave",
        "name": "truncCosine",
        "normalized": "a-\u003eT a a",
        "package": "synthesizer",
        "partial": "Cosine",
        "signature": "a-\u003eT a a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-Wave.html#v:truncOddCosine",
      "description": {
        "fct-descr": "A truncated cosine. This has rich overtones.\n",
        "fct-module": "Synthesizer.Basic.Wave",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e T a a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-Wave.html#truncOddCosine",
        "fct-type": "unknown",
        "title": "truncOddCosine"
      },
      "index": {
        "description": "truncated cosine This has rich overtones",
        "hierarchy": "Synthesizer Basic Wave",
        "module": "Synthesizer.Basic.Wave",
        "name": "truncOddCosine",
        "normalized": "Int-\u003eT a a",
        "package": "synthesizer",
        "partial": "Odd Cosine",
        "signature": "Int-\u003eT a a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-Wave.html#v:truncOddTriangle",
      "description": {
        "fct-descr": "For parameter zero this is \u003ctt\u003e\u003ca\u003esaw\u003c/a\u003e\u003c/tt\u003e.\n",
        "fct-module": "Synthesizer.Basic.Wave",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e T a a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-Wave.html#truncOddTriangle",
        "fct-type": "unknown",
        "title": "truncOddTriangle"
      },
      "index": {
        "description": "For parameter zero this is saw",
        "hierarchy": "Synthesizer Basic Wave",
        "module": "Synthesizer.Basic.Wave",
        "name": "truncOddTriangle",
        "normalized": "Int-\u003eT a a",
        "package": "synthesizer",
        "partial": "Odd Triangle",
        "signature": "Int-\u003eT a a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-Wave.html#v:truncTriangle",
      "description": {
        "fct-module": "Synthesizer.Basic.Wave",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e T a a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-Wave.html#truncTriangle",
        "fct-type": "unknown",
        "title": "truncTriangle"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Basic Wave",
        "module": "Synthesizer.Basic.Wave",
        "name": "truncTriangle",
        "normalized": "a-\u003eT a a",
        "package": "synthesizer",
        "partial": "Triangle",
        "signature": "a-\u003eT a a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-WaveSmoothed.html#t:Harmonic",
      "description": {
        "fct-module": "Synthesizer.Basic.WaveSmoothed",
        "fct-package": "synthesizer",
        "fct-signature": "data",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-Wave.html#Harmonic",
        "fct-type": "unknown",
        "title": "Harmonic"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Basic WaveSmoothed",
        "module": "Synthesizer.Basic.WaveSmoothed",
        "name": "Harmonic",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Harmonic",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-WaveSmoothed.html#t:T",
      "description": {
        "fct-module": "Synthesizer.Basic.WaveSmoothed",
        "fct-package": "synthesizer",
        "fct-signature": "data",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-WaveSmoothed.html#T",
        "fct-type": "unknown",
        "title": "T"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Basic WaveSmoothed",
        "module": "Synthesizer.Basic.WaveSmoothed",
        "name": "T",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-WaveSmoothed.html#v:amplify",
      "description": {
        "fct-module": "Synthesizer.Basic.WaveSmoothed",
        "fct-package": "synthesizer",
        "fct-signature": "y -\u003e T t y -\u003e T t y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-WaveSmoothed.html#amplify",
        "fct-type": "unknown",
        "title": "amplify"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Basic WaveSmoothed",
        "module": "Synthesizer.Basic.WaveSmoothed",
        "name": "amplify",
        "normalized": "a-\u003eT b a-\u003eT b a",
        "package": "synthesizer",
        "partial": "",
        "signature": "y-\u003eT t y-\u003eT t y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-WaveSmoothed.html#v:apply",
      "description": {
        "fct-module": "Synthesizer.Basic.WaveSmoothed",
        "fct-package": "synthesizer",
        "fct-signature": "T t y -\u003e t -\u003e T t -\u003e y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-WaveSmoothed.html#apply",
        "fct-type": "unknown",
        "title": "apply"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Basic WaveSmoothed",
        "module": "Synthesizer.Basic.WaveSmoothed",
        "name": "apply",
        "normalized": "T a b-\u003ea-\u003eT a-\u003eb",
        "package": "synthesizer",
        "partial": "",
        "signature": "T t y-\u003et-\u003eT t-\u003ey"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-WaveSmoothed.html#v:composedHarmonics",
      "description": {
        "fct-descr": "\u003cp\u003eSpecify the wave by its harmonics.\n\u003c/p\u003e\u003cp\u003eThe function is implemented quite efficiently\nby applying the Horner scheme to a polynomial with complex coefficients\n(the harmonic parameters)\nusing a complex exponential as argument.\n\u003c/p\u003e",
        "fct-module": "Synthesizer.Basic.WaveSmoothed",
        "fct-package": "synthesizer",
        "fct-signature": "[Harmonic a] -\u003e T a a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-WaveSmoothed.html#composedHarmonics",
        "fct-type": "unknown",
        "title": "composedHarmonics"
      },
      "index": {
        "description": "Specify the wave by its harmonics The function is implemented quite efficiently by applying the Horner scheme to polynomial with complex coefficients the harmonic parameters using complex exponential as argument",
        "hierarchy": "Synthesizer Basic WaveSmoothed",
        "module": "Synthesizer.Basic.WaveSmoothed",
        "name": "composedHarmonics",
        "normalized": "[Harmonic a]-\u003eT a a",
        "package": "synthesizer",
        "partial": "Harmonics",
        "signature": "[Harmonic a]-\u003eT a a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-WaveSmoothed.html#v:cosine",
      "description": {
        "fct-module": "Synthesizer.Basic.WaveSmoothed",
        "fct-package": "synthesizer",
        "fct-signature": "T a a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-WaveSmoothed.html#cosine",
        "fct-type": "unknown",
        "title": "cosine"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Basic WaveSmoothed",
        "module": "Synthesizer.Basic.WaveSmoothed",
        "name": "cosine",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-WaveSmoothed.html#v:distort",
      "description": {
        "fct-module": "Synthesizer.Basic.WaveSmoothed",
        "fct-package": "synthesizer",
        "fct-signature": "(y -\u003e z) -\u003e T t y -\u003e T t z",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-WaveSmoothed.html#distort",
        "fct-type": "unknown",
        "title": "distort"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Basic WaveSmoothed",
        "module": "Synthesizer.Basic.WaveSmoothed",
        "name": "distort",
        "normalized": "(a-\u003eb)-\u003eT c a-\u003eT c b",
        "package": "synthesizer",
        "partial": "",
        "signature": "(y-\u003ez)-\u003eT t y-\u003eT t z"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-WaveSmoothed.html#v:fromControlledWave",
      "description": {
        "fct-module": "Synthesizer.Basic.WaveSmoothed",
        "fct-package": "synthesizer",
        "fct-signature": "(t -\u003e T t y) -\u003e T t y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-WaveSmoothed.html#fromControlledWave",
        "fct-type": "unknown",
        "title": "fromControlledWave"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Basic WaveSmoothed",
        "module": "Synthesizer.Basic.WaveSmoothed",
        "name": "fromControlledWave",
        "normalized": "(a-\u003eT a b)-\u003eT a b",
        "package": "synthesizer",
        "partial": "Controlled Wave",
        "signature": "(t-\u003eT t y)-\u003eT t y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-WaveSmoothed.html#v:fromFunction",
      "description": {
        "fct-module": "Synthesizer.Basic.WaveSmoothed",
        "fct-package": "synthesizer",
        "fct-signature": "(t -\u003e t -\u003e y) -\u003e T t y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-WaveSmoothed.html#fromFunction",
        "fct-type": "unknown",
        "title": "fromFunction"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Basic WaveSmoothed",
        "module": "Synthesizer.Basic.WaveSmoothed",
        "name": "fromFunction",
        "normalized": "(a-\u003ea-\u003eb)-\u003eT a b",
        "package": "synthesizer",
        "partial": "Function",
        "signature": "(t-\u003et-\u003ey)-\u003eT t y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-WaveSmoothed.html#v:fromWave",
      "description": {
        "fct-descr": "Use this function for waves which are sufficiently smooth.\nIf the Nyquist frequency is exceeded the wave is simply replaced\nby a constant zero wave.\n",
        "fct-module": "Synthesizer.Basic.WaveSmoothed",
        "fct-package": "synthesizer",
        "fct-signature": "T t y -\u003e T t y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-WaveSmoothed.html#fromWave",
        "fct-type": "unknown",
        "title": "fromWave"
      },
      "index": {
        "description": "Use this function for waves which are sufficiently smooth If the Nyquist frequency is exceeded the wave is simply replaced by constant zero wave",
        "hierarchy": "Synthesizer Basic WaveSmoothed",
        "module": "Synthesizer.Basic.WaveSmoothed",
        "name": "fromWave",
        "normalized": "T a b-\u003eT a b",
        "package": "synthesizer",
        "partial": "Wave",
        "signature": "T t y-\u003eT t y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-WaveSmoothed.html#v:harmonic",
      "description": {
        "fct-module": "Synthesizer.Basic.WaveSmoothed",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e a -\u003e Harmonic a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-Wave.html#harmonic",
        "fct-type": "unknown",
        "title": "harmonic"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Basic WaveSmoothed",
        "module": "Synthesizer.Basic.WaveSmoothed",
        "name": "harmonic",
        "normalized": "T a-\u003ea-\u003eHarmonic a",
        "package": "synthesizer",
        "partial": "",
        "signature": "T a-\u003ea-\u003eHarmonic a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-WaveSmoothed.html#v:raise",
      "description": {
        "fct-module": "Synthesizer.Basic.WaveSmoothed",
        "fct-package": "synthesizer",
        "fct-signature": "y -\u003e T t y -\u003e T t y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-WaveSmoothed.html#raise",
        "fct-type": "unknown",
        "title": "raise"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Basic WaveSmoothed",
        "module": "Synthesizer.Basic.WaveSmoothed",
        "name": "raise",
        "normalized": "a-\u003eT b a-\u003eT b a",
        "package": "synthesizer",
        "partial": "",
        "signature": "y-\u003eT t y-\u003eT t y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-WaveSmoothed.html#v:saw",
      "description": {
        "fct-descr": "saw tooth,\nit's a ramp down in order to have a positive coefficient for the first partial sine\n",
        "fct-module": "Synthesizer.Basic.WaveSmoothed",
        "fct-package": "synthesizer",
        "fct-signature": "T a a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-WaveSmoothed.html#saw",
        "fct-type": "unknown",
        "title": "saw"
      },
      "index": {
        "description": "saw tooth it ramp down in order to have positive coefficient for the first partial sine",
        "hierarchy": "Synthesizer Basic WaveSmoothed",
        "module": "Synthesizer.Basic.WaveSmoothed",
        "name": "saw",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-WaveSmoothed.html#v:sine",
      "description": {
        "fct-descr": "map a phase to value of a sine wave \n",
        "fct-module": "Synthesizer.Basic.WaveSmoothed",
        "fct-package": "synthesizer",
        "fct-signature": "T a a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-WaveSmoothed.html#sine",
        "fct-type": "unknown",
        "title": "sine"
      },
      "index": {
        "description": "map phase to value of sine wave",
        "hierarchy": "Synthesizer Basic WaveSmoothed",
        "module": "Synthesizer.Basic.WaveSmoothed",
        "name": "sine",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-WaveSmoothed.html#v:square",
      "description": {
        "fct-descr": "square \n",
        "fct-module": "Synthesizer.Basic.WaveSmoothed",
        "fct-package": "synthesizer",
        "fct-signature": "T a a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-WaveSmoothed.html#square",
        "fct-type": "unknown",
        "title": "square"
      },
      "index": {
        "description": "square",
        "hierarchy": "Synthesizer Basic WaveSmoothed",
        "module": "Synthesizer.Basic.WaveSmoothed",
        "name": "square",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Basic-WaveSmoothed.html#v:triangle",
      "description": {
        "fct-descr": "triangle \n",
        "fct-module": "Synthesizer.Basic.WaveSmoothed",
        "fct-package": "synthesizer",
        "fct-signature": "T a a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Basic-WaveSmoothed.html#triangle",
        "fct-type": "unknown",
        "title": "triangle"
      },
      "index": {
        "description": "triangle",
        "hierarchy": "Synthesizer Basic WaveSmoothed",
        "module": "Synthesizer.Basic.WaveSmoothed",
        "name": "triangle",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Causal-Displacement.html#v:distort",
      "description": {
        "fct-descr": "In \u003ca\u003eSynthesizer.Basic.Distortion\u003c/a\u003e you find a collection\nof appropriate distortion functions.\n",
        "fct-module": "Synthesizer.Causal.Displacement",
        "fct-package": "synthesizer",
        "fct-signature": "(c -\u003e a -\u003e a) -\u003e T (c, a) a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Causal-Displacement.html#distort",
        "fct-type": "unknown",
        "title": "distort"
      },
      "index": {
        "description": "In Synthesizer.Basic.Distortion you find collection of appropriate distortion functions",
        "hierarchy": "Synthesizer Causal Displacement",
        "module": "Synthesizer.Causal.Displacement",
        "name": "distort",
        "normalized": "(a-\u003eb-\u003eb)-\u003eT(a,b)b",
        "package": "synthesizer",
        "partial": "",
        "signature": "(c-\u003ea-\u003ea)-\u003eT(c,a)a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Causal-Displacement.html#v:mix",
      "description": {
        "fct-descr": "Mix two signals.\nUnfortunately we have to use \u003ctt\u003e\u003ca\u003ezipWith\u003c/a\u003e\u003c/tt\u003e semantic here,\nthat is the result is as long as the shorter of both inputs.\n",
        "fct-module": "Synthesizer.Causal.Displacement",
        "fct-package": "synthesizer",
        "fct-signature": "T (v, v) v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Causal-Displacement.html#mix",
        "fct-type": "unknown",
        "title": "mix"
      },
      "index": {
        "description": "Mix two signals Unfortunately we have to use zipWith semantic here that is the result is as long as the shorter of both inputs",
        "hierarchy": "Synthesizer Causal Displacement",
        "module": "Synthesizer.Causal.Displacement",
        "name": "mix",
        "normalized": "T(a,a)a",
        "package": "synthesizer",
        "partial": "",
        "signature": "T(v,v)v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Causal-Displacement.html#v:raise",
      "description": {
        "fct-descr": "Add a number to all of the signal values.\nThis is useful for adjusting the center of a modulation.\n",
        "fct-module": "Synthesizer.Causal.Displacement",
        "fct-package": "synthesizer",
        "fct-signature": "v -\u003e T v v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Causal-Displacement.html#raise",
        "fct-type": "unknown",
        "title": "raise"
      },
      "index": {
        "description": "Add number to all of the signal values This is useful for adjusting the center of modulation",
        "hierarchy": "Synthesizer Causal Displacement",
        "module": "Synthesizer.Causal.Displacement",
        "name": "raise",
        "normalized": "a-\u003eT a a",
        "package": "synthesizer",
        "partial": "",
        "signature": "v-\u003eT v v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Causal-Interpolation.html#t:T",
      "description": {
        "fct-module": "Synthesizer.Causal.Interpolation",
        "fct-package": "synthesizer",
        "fct-signature": "data",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Interpolation.html#T",
        "fct-type": "unknown",
        "title": "T"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Causal Interpolation",
        "module": "Synthesizer.Causal.Interpolation",
        "name": "T",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Causal-Interpolation.html#v:relative",
      "description": {
        "fct-descr": "All values of frequency control must be non-negative. \n",
        "fct-module": "Synthesizer.Causal.Interpolation",
        "fct-package": "synthesizer",
        "fct-signature": "T t y -\u003e t -\u003e T y -\u003e T t y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Causal-Interpolation.html#relative",
        "fct-type": "unknown",
        "title": "relative"
      },
      "index": {
        "description": "All values of frequency control must be non-negative",
        "hierarchy": "Synthesizer Causal Interpolation",
        "module": "Synthesizer.Causal.Interpolation",
        "name": "relative",
        "normalized": "T a b-\u003ea-\u003eT b-\u003eT a b",
        "package": "synthesizer",
        "partial": "",
        "signature": "T t y-\u003et-\u003eT y-\u003eT t y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Causal-Interpolation.html#v:relativeConstantPad",
      "description": {
        "fct-module": "Synthesizer.Causal.Interpolation",
        "fct-package": "synthesizer",
        "fct-signature": "T t y -\u003e t -\u003e T y -\u003e T t y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Causal-Interpolation.html#relativeConstantPad",
        "fct-type": "unknown",
        "title": "relativeConstantPad"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Causal Interpolation",
        "module": "Synthesizer.Causal.Interpolation",
        "name": "relativeConstantPad",
        "normalized": "T a b-\u003ea-\u003eT b-\u003eT a b",
        "package": "synthesizer",
        "partial": "Constant Pad",
        "signature": "T t y-\u003et-\u003eT y-\u003eT t y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Causal-Interpolation.html#v:relativeCyclicPad",
      "description": {
        "fct-module": "Synthesizer.Causal.Interpolation",
        "fct-package": "synthesizer",
        "fct-signature": "T t y -\u003e t -\u003e T y -\u003e T t y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Causal-Interpolation.html#relativeCyclicPad",
        "fct-type": "unknown",
        "title": "relativeCyclicPad"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Causal Interpolation",
        "module": "Synthesizer.Causal.Interpolation",
        "name": "relativeCyclicPad",
        "normalized": "T a b-\u003ea-\u003eT b-\u003eT a b",
        "package": "synthesizer",
        "partial": "Cyclic Pad",
        "signature": "T t y-\u003et-\u003eT y-\u003eT t y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Causal-Interpolation.html#v:relativeExtrapolationPad",
      "description": {
        "fct-descr": "The extrapolation may miss some of the first and some of the last points\n",
        "fct-module": "Synthesizer.Causal.Interpolation",
        "fct-package": "synthesizer",
        "fct-signature": "T t y -\u003e t -\u003e T y -\u003e T t y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Causal-Interpolation.html#relativeExtrapolationPad",
        "fct-type": "unknown",
        "title": "relativeExtrapolationPad"
      },
      "index": {
        "description": "The extrapolation may miss some of the first and some of the last points",
        "hierarchy": "Synthesizer Causal Interpolation",
        "module": "Synthesizer.Causal.Interpolation",
        "name": "relativeExtrapolationPad",
        "normalized": "T a b-\u003ea-\u003eT b-\u003eT a b",
        "package": "synthesizer",
        "partial": "Extrapolation Pad",
        "signature": "T t y-\u003et-\u003eT y-\u003eT t y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Causal-Interpolation.html#v:relativeZeroPad",
      "description": {
        "fct-module": "Synthesizer.Causal.Interpolation",
        "fct-package": "synthesizer",
        "fct-signature": "y -\u003e T t y -\u003e t -\u003e T y -\u003e T t y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Causal-Interpolation.html#relativeZeroPad",
        "fct-type": "unknown",
        "title": "relativeZeroPad"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Causal Interpolation",
        "module": "Synthesizer.Causal.Interpolation",
        "name": "relativeZeroPad",
        "normalized": "a-\u003eT b a-\u003eb-\u003eT a-\u003eT b a",
        "package": "synthesizer",
        "partial": "Zero Pad",
        "signature": "y-\u003eT t y-\u003et-\u003eT y-\u003eT t y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Causal-Interpolation.html#v:relativeZeroPadConstant",
      "description": {
        "fct-module": "Synthesizer.Causal.Interpolation",
        "fct-package": "synthesizer",
        "fct-signature": "t -\u003e T y -\u003e T t y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Causal-Interpolation.html#relativeZeroPadConstant",
        "fct-type": "unknown",
        "title": "relativeZeroPadConstant"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Causal Interpolation",
        "module": "Synthesizer.Causal.Interpolation",
        "name": "relativeZeroPadConstant",
        "normalized": "a-\u003eT b-\u003eT a b",
        "package": "synthesizer",
        "partial": "Zero Pad Constant",
        "signature": "t-\u003eT y-\u003eT t y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Causal-Interpolation.html#v:relativeZeroPadCubic",
      "description": {
        "fct-module": "Synthesizer.Causal.Interpolation",
        "fct-package": "synthesizer",
        "fct-signature": "t -\u003e T y -\u003e T t y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Causal-Interpolation.html#relativeZeroPadCubic",
        "fct-type": "unknown",
        "title": "relativeZeroPadCubic"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Causal Interpolation",
        "module": "Synthesizer.Causal.Interpolation",
        "name": "relativeZeroPadCubic",
        "normalized": "a-\u003eT b-\u003eT a b",
        "package": "synthesizer",
        "partial": "Zero Pad Cubic",
        "signature": "t-\u003eT y-\u003eT t y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Causal-Interpolation.html#v:relativeZeroPadLinear",
      "description": {
        "fct-module": "Synthesizer.Causal.Interpolation",
        "fct-package": "synthesizer",
        "fct-signature": "t -\u003e T y -\u003e T t y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Causal-Interpolation.html#relativeZeroPadLinear",
        "fct-type": "unknown",
        "title": "relativeZeroPadLinear"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Causal Interpolation",
        "module": "Synthesizer.Causal.Interpolation",
        "name": "relativeZeroPadLinear",
        "normalized": "a-\u003eT b-\u003eT a b",
        "package": "synthesizer",
        "partial": "Zero Pad Linear",
        "signature": "t-\u003eT y-\u003eT t y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Causal-Oscillator.html#v:freqMod",
      "description": {
        "fct-descr": "oscillator with modulated frequency \n",
        "fct-module": "Synthesizer.Causal.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "T a b -\u003e T a -\u003e T a b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Causal-Oscillator.html#freqMod",
        "fct-type": "unknown",
        "title": "freqMod"
      },
      "index": {
        "description": "oscillator with modulated frequency",
        "hierarchy": "Synthesizer Causal Oscillator",
        "module": "Synthesizer.Causal.Oscillator",
        "name": "freqMod",
        "normalized": "T a b-\u003eT a-\u003eT a b",
        "package": "synthesizer",
        "partial": "Mod",
        "signature": "T a b-\u003eT a-\u003eT a b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Causal-Oscillator.html#v:freqModAntiAlias",
      "description": {
        "fct-descr": "oscillator with modulated frequency \n",
        "fct-module": "Synthesizer.Causal.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "T a b -\u003e T a -\u003e T a b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Causal-Oscillator.html#freqModAntiAlias",
        "fct-type": "unknown",
        "title": "freqModAntiAlias"
      },
      "index": {
        "description": "oscillator with modulated frequency",
        "hierarchy": "Synthesizer Causal Oscillator",
        "module": "Synthesizer.Causal.Oscillator",
        "name": "freqModAntiAlias",
        "normalized": "T a b-\u003eT a-\u003eT a b",
        "package": "synthesizer",
        "partial": "Mod Anti Alias",
        "signature": "T a b-\u003eT a-\u003eT a b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Causal-Oscillator.html#v:freqModSample",
      "description": {
        "fct-descr": "oscillator with a sampled waveform with modulated frequency\n     Should behave homogenously for different types of interpolation. \n",
        "fct-module": "Synthesizer.Causal.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "T a b -\u003e T b -\u003e T a -\u003e T a b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Causal-Oscillator.html#freqModSample",
        "fct-type": "unknown",
        "title": "freqModSample"
      },
      "index": {
        "description": "oscillator with sampled waveform with modulated frequency Should behave homogenously for different types of interpolation",
        "hierarchy": "Synthesizer Causal Oscillator",
        "module": "Synthesizer.Causal.Oscillator",
        "name": "freqModSample",
        "normalized": "T a b-\u003eT b-\u003eT a-\u003eT a b",
        "package": "synthesizer",
        "partial": "Mod Sample",
        "signature": "T a b-\u003eT b-\u003eT a-\u003eT a b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Causal-Oscillator.html#v:freqModSaw",
      "description": {
        "fct-descr": "saw tooth oscillator with modulated frequency \n",
        "fct-module": "Synthesizer.Causal.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e T a a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Causal-Oscillator.html#freqModSaw",
        "fct-type": "unknown",
        "title": "freqModSaw"
      },
      "index": {
        "description": "saw tooth oscillator with modulated frequency",
        "hierarchy": "Synthesizer Causal Oscillator",
        "module": "Synthesizer.Causal.Oscillator",
        "name": "freqModSaw",
        "normalized": "T a-\u003eT a a",
        "package": "synthesizer",
        "partial": "Mod Saw",
        "signature": "T a-\u003eT a a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Causal-Oscillator.html#v:freqModSine",
      "description": {
        "fct-descr": "sine oscillator with modulated frequency \n",
        "fct-module": "Synthesizer.Causal.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e T a a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Causal-Oscillator.html#freqModSine",
        "fct-type": "unknown",
        "title": "freqModSine"
      },
      "index": {
        "description": "sine oscillator with modulated frequency",
        "hierarchy": "Synthesizer Causal Oscillator",
        "module": "Synthesizer.Causal.Oscillator",
        "name": "freqModSine",
        "normalized": "T a-\u003eT a a",
        "package": "synthesizer",
        "partial": "Mod Sine",
        "signature": "T a-\u003eT a a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Causal-Oscillator.html#v:freqToPhases",
      "description": {
        "fct-module": "Synthesizer.Causal.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e a -\u003e T (T a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Causal-Oscillator.html#freqToPhases",
        "fct-type": "unknown",
        "title": "freqToPhases"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Causal Oscillator",
        "module": "Synthesizer.Causal.Oscillator",
        "name": "freqToPhases",
        "normalized": "T a-\u003ea-\u003eT(T a)",
        "package": "synthesizer",
        "partial": "To Phases",
        "signature": "T a-\u003ea-\u003eT(T a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Causal-Oscillator.html#v:phaseFreqMod",
      "description": {
        "fct-descr": "oscillator with both phase and frequency modulation \n",
        "fct-module": "Synthesizer.Causal.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "T a b -\u003e T (a, a) b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Causal-Oscillator.html#phaseFreqMod",
        "fct-type": "unknown",
        "title": "phaseFreqMod"
      },
      "index": {
        "description": "oscillator with both phase and frequency modulation",
        "hierarchy": "Synthesizer Causal Oscillator",
        "module": "Synthesizer.Causal.Oscillator",
        "name": "phaseFreqMod",
        "normalized": "T a b-\u003eT(a,a)b",
        "package": "synthesizer",
        "partial": "Freq Mod",
        "signature": "T a b-\u003eT(a,a)b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Causal-Oscillator.html#v:phaseMod",
      "description": {
        "fct-descr": "oscillator with modulated phase \n",
        "fct-module": "Synthesizer.Causal.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "T a b -\u003e a -\u003e T a b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Causal-Oscillator.html#phaseMod",
        "fct-type": "unknown",
        "title": "phaseMod"
      },
      "index": {
        "description": "oscillator with modulated phase",
        "hierarchy": "Synthesizer Causal Oscillator",
        "module": "Synthesizer.Causal.Oscillator",
        "name": "phaseMod",
        "normalized": "T a b-\u003ea-\u003eT a b",
        "package": "synthesizer",
        "partial": "Mod",
        "signature": "T a b-\u003ea-\u003eT a b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Causal-Oscillator.html#v:phaseModSine",
      "description": {
        "fct-descr": "sine oscillator with modulated phase, useful for FM synthesis \n",
        "fct-module": "Synthesizer.Causal.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e T a a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Causal-Oscillator.html#phaseModSine",
        "fct-type": "unknown",
        "title": "phaseModSine"
      },
      "index": {
        "description": "sine oscillator with modulated phase useful for FM synthesis",
        "hierarchy": "Synthesizer Causal Oscillator",
        "module": "Synthesizer.Causal.Oscillator",
        "name": "phaseModSine",
        "normalized": "a-\u003eT a a",
        "package": "synthesizer",
        "partial": "Mod Sine",
        "signature": "a-\u003eT a a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Causal-Oscillator.html#v:shapeFreqMod",
      "description": {
        "fct-descr": "oscillator with both shape and frequency modulation \n",
        "fct-module": "Synthesizer.Causal.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "(c -\u003e T a b) -\u003e T a -\u003e T (c, a) b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Causal-Oscillator.html#shapeFreqMod",
        "fct-type": "unknown",
        "title": "shapeFreqMod"
      },
      "index": {
        "description": "oscillator with both shape and frequency modulation",
        "hierarchy": "Synthesizer Causal Oscillator",
        "module": "Synthesizer.Causal.Oscillator",
        "name": "shapeFreqMod",
        "normalized": "(a-\u003eT b c)-\u003eT b-\u003eT(a,b)c",
        "package": "synthesizer",
        "partial": "Freq Mod",
        "signature": "(c-\u003eT a b)-\u003eT a-\u003eT(c,a)b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Causal-Oscillator.html#v:shapeFreqModFromSampledTone",
      "description": {
        "fct-module": "Synthesizer.Causal.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "T t y -\u003e T t y -\u003e t -\u003e sig y -\u003e t -\u003e T t -\u003e T (t, t) y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Causal-Oscillator.html#shapeFreqModFromSampledTone",
        "fct-type": "unknown",
        "title": "shapeFreqModFromSampledTone"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Causal Oscillator",
        "module": "Synthesizer.Causal.Oscillator",
        "name": "shapeFreqModFromSampledTone",
        "normalized": "T a b-\u003eT a b-\u003ea-\u003ec b-\u003ea-\u003eT a-\u003eT(a,a)b",
        "package": "synthesizer",
        "partial": "Freq Mod From Sampled Tone",
        "signature": "T t y-\u003eT t y-\u003et-\u003esig y-\u003et-\u003eT t-\u003eT(t,t)y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Causal-Oscillator.html#v:shapeFreqModSample",
      "description": {
        "fct-module": "Synthesizer.Causal.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "T c (T b a) -\u003e T (T b a) -\u003e c -\u003e T b -\u003e T (c, b) a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Causal-Oscillator.html#shapeFreqModSample",
        "fct-type": "unknown",
        "title": "shapeFreqModSample"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Causal Oscillator",
        "module": "Synthesizer.Causal.Oscillator",
        "name": "shapeFreqModSample",
        "normalized": "T a(T b c)-\u003eT(T b c)-\u003ea-\u003eT b-\u003eT(a,b)c",
        "package": "synthesizer",
        "partial": "Freq Mod Sample",
        "signature": "T c(T b a)-\u003eT(T b a)-\u003ec-\u003eT b-\u003eT(c,b)a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Causal-Oscillator.html#v:shapeMod",
      "description": {
        "fct-descr": "oscillator with modulated shape \n",
        "fct-module": "Synthesizer.Causal.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "(c -\u003e T a b) -\u003e T a -\u003e a -\u003e T c b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Causal-Oscillator.html#shapeMod",
        "fct-type": "unknown",
        "title": "shapeMod"
      },
      "index": {
        "description": "oscillator with modulated shape",
        "hierarchy": "Synthesizer Causal Oscillator",
        "module": "Synthesizer.Causal.Oscillator",
        "name": "shapeMod",
        "normalized": "(a-\u003eT b c)-\u003eT b-\u003eb-\u003eT a c",
        "package": "synthesizer",
        "partial": "Mod",
        "signature": "(c-\u003eT a b)-\u003eT a-\u003ea-\u003eT c b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Causal-Oscillator.html#v:shapePhaseFreqModFromSampledTone",
      "description": {
        "fct-module": "Synthesizer.Causal.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "T t y -\u003e T t y -\u003e t -\u003e sig y -\u003e t -\u003e T t -\u003e T (t, t, t) y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Causal-Oscillator.html#shapePhaseFreqModFromSampledTone",
        "fct-type": "unknown",
        "title": "shapePhaseFreqModFromSampledTone"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Causal Oscillator",
        "module": "Synthesizer.Causal.Oscillator",
        "name": "shapePhaseFreqModFromSampledTone",
        "normalized": "T a b-\u003eT a b-\u003ea-\u003ec b-\u003ea-\u003eT a-\u003eT(a,a,a)b",
        "package": "synthesizer",
        "partial": "Phase Freq Mod From Sampled Tone",
        "signature": "T t y-\u003eT t y-\u003et-\u003esig y-\u003et-\u003eT t-\u003eT(t,t,t)y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Causal-Process.html#t:T",
      "description": {
        "fct-module": "Synthesizer.Causal.Process",
        "fct-package": "synthesizer",
        "fct-signature": "data",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Causal-Process.html#T",
        "fct-type": "unknown",
        "title": "T"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Causal Process",
        "module": "Synthesizer.Causal.Process",
        "name": "T",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Causal-Process.html#v:apply",
      "description": {
        "fct-module": "Synthesizer.Causal.Process",
        "fct-package": "synthesizer",
        "fct-signature": "T a b -\u003e T a -\u003e T b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Causal-Process.html#apply",
        "fct-type": "unknown",
        "title": "apply"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Causal Process",
        "module": "Synthesizer.Causal.Process",
        "name": "apply",
        "normalized": "T a b-\u003eT a-\u003eT b",
        "package": "synthesizer",
        "partial": "",
        "signature": "T a b-\u003eT a-\u003eT b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Causal-Process.html#v:apply2",
      "description": {
        "fct-module": "Synthesizer.Causal.Process",
        "fct-package": "synthesizer",
        "fct-signature": "T (a, b) c -\u003e T a -\u003e T b -\u003e T c",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Causal-Process.html#apply2",
        "fct-type": "unknown",
        "title": "apply2"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Causal Process",
        "module": "Synthesizer.Causal.Process",
        "name": "apply2",
        "normalized": "T(a,b)c-\u003eT a-\u003eT b-\u003eT c",
        "package": "synthesizer",
        "partial": "",
        "signature": "T(a,b)c-\u003eT a-\u003eT b-\u003eT c"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Causal-Process.html#v:apply3",
      "description": {
        "fct-module": "Synthesizer.Causal.Process",
        "fct-package": "synthesizer",
        "fct-signature": "T (a, b, c) d -\u003e T a -\u003e T b -\u003e T c -\u003e T d",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Causal-Process.html#apply3",
        "fct-type": "unknown",
        "title": "apply3"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Causal Process",
        "module": "Synthesizer.Causal.Process",
        "name": "apply3",
        "normalized": "T(a,b,c)d-\u003eT a-\u003eT b-\u003eT c-\u003eT d",
        "package": "synthesizer",
        "partial": "",
        "signature": "T(a,b,c)d-\u003eT a-\u003eT b-\u003eT c-\u003eT d"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Causal-Process.html#v:applyConst",
      "description": {
        "fct-descr": "applyConst c x == apply c (repeat x)\n",
        "fct-module": "Synthesizer.Causal.Process",
        "fct-package": "synthesizer",
        "fct-signature": "T a b -\u003e a -\u003e T b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Causal-Process.html#applyConst",
        "fct-type": "unknown",
        "title": "applyConst"
      },
      "index": {
        "description": "applyConst apply repeat",
        "hierarchy": "Synthesizer Causal Process",
        "module": "Synthesizer.Causal.Process",
        "name": "applyConst",
        "normalized": "T a b-\u003ea-\u003eT b",
        "package": "synthesizer",
        "partial": "Const",
        "signature": "T a b-\u003ea-\u003eT b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Causal-Process.html#v:applyFst",
      "description": {
        "fct-module": "Synthesizer.Causal.Process",
        "fct-package": "synthesizer",
        "fct-signature": "T (a, b) c -\u003e T a -\u003e T b c",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Causal-Process.html#applyFst",
        "fct-type": "unknown",
        "title": "applyFst"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Causal Process",
        "module": "Synthesizer.Causal.Process",
        "name": "applyFst",
        "normalized": "T(a,b)c-\u003eT a-\u003eT b c",
        "package": "synthesizer",
        "partial": "Fst",
        "signature": "T(a,b)c-\u003eT a-\u003eT b c"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Causal-Process.html#v:applyFst'",
      "description": {
        "fct-descr": "I think this function does too much.\nBetter use \u003ctt\u003e\u003ca\u003efeedFst\u003c/a\u003e\u003c/tt\u003e and (\u003e\u003e\u003e).\n",
        "fct-module": "Synthesizer.Causal.Process",
        "fct-package": "synthesizer",
        "fct-signature": "T (a, b) c -\u003e T a -\u003e T b c",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Causal-Process.html#applyFst%27",
        "fct-type": "unknown",
        "title": "applyFst'"
      },
      "index": {
        "description": "think this function does too much Better use feedFst and",
        "hierarchy": "Synthesizer Causal Process",
        "module": "Synthesizer.Causal.Process",
        "name": "applyFst'",
        "normalized": "T(a,b)c-\u003eT a-\u003eT b c",
        "package": "synthesizer",
        "partial": "Fst'",
        "signature": "T(a,b)c-\u003eT a-\u003eT b c"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Causal-Process.html#v:applyGeneric",
      "description": {
        "fct-module": "Synthesizer.Causal.Process",
        "fct-package": "synthesizer",
        "fct-signature": "T a b -\u003e sig a -\u003e sig b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Causal-Process.html#applyGeneric",
        "fct-type": "unknown",
        "title": "applyGeneric"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Causal Process",
        "module": "Synthesizer.Causal.Process",
        "name": "applyGeneric",
        "normalized": "T a b-\u003ec a-\u003ec b",
        "package": "synthesizer",
        "partial": "Generic",
        "signature": "T a b-\u003esig a-\u003esig b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Causal-Process.html#v:applyGenericSameType",
      "description": {
        "fct-module": "Synthesizer.Causal.Process",
        "fct-package": "synthesizer",
        "fct-signature": "T a a -\u003e sig a -\u003e sig a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Causal-Process.html#applyGenericSameType",
        "fct-type": "unknown",
        "title": "applyGenericSameType"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Causal Process",
        "module": "Synthesizer.Causal.Process",
        "name": "applyGenericSameType",
        "normalized": "T a a-\u003eb a-\u003eb a",
        "package": "synthesizer",
        "partial": "Generic Same Type",
        "signature": "T a a-\u003esig a-\u003esig a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Causal-Process.html#v:applySnd",
      "description": {
        "fct-module": "Synthesizer.Causal.Process",
        "fct-package": "synthesizer",
        "fct-signature": "T (a, b) c -\u003e T b -\u003e T a c",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Causal-Process.html#applySnd",
        "fct-type": "unknown",
        "title": "applySnd"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Causal Process",
        "module": "Synthesizer.Causal.Process",
        "name": "applySnd",
        "normalized": "T(a,b)c-\u003eT b-\u003eT a c",
        "package": "synthesizer",
        "partial": "Snd",
        "signature": "T(a,b)c-\u003eT b-\u003eT a c"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Causal-Process.html#v:applySnd'",
      "description": {
        "fct-descr": "I think this function does too much.\nBetter use \u003ctt\u003e\u003ca\u003efeedSnd\u003c/a\u003e\u003c/tt\u003e and (\u003e\u003e\u003e).\n",
        "fct-module": "Synthesizer.Causal.Process",
        "fct-package": "synthesizer",
        "fct-signature": "T (a, b) c -\u003e T b -\u003e T a c",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Causal-Process.html#applySnd%27",
        "fct-type": "unknown",
        "title": "applySnd'"
      },
      "index": {
        "description": "think this function does too much Better use feedSnd and",
        "hierarchy": "Synthesizer Causal Process",
        "module": "Synthesizer.Causal.Process",
        "name": "applySnd'",
        "normalized": "T(a,b)c-\u003eT b-\u003eT a c",
        "package": "synthesizer",
        "partial": "Snd'",
        "signature": "T(a,b)c-\u003eT b-\u003eT a c"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Causal-Process.html#v:chainControlled",
      "description": {
        "fct-module": "Synthesizer.Causal.Process",
        "fct-package": "synthesizer",
        "fct-signature": "[T (c, x) x] -\u003e T (c, x) x",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Causal-Process.html#chainControlled",
        "fct-type": "unknown",
        "title": "chainControlled"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Causal Process",
        "module": "Synthesizer.Causal.Process",
        "name": "chainControlled",
        "normalized": "[T(a,b)b]-\u003eT(a,b)b",
        "package": "synthesizer",
        "partial": "Controlled",
        "signature": "[T(c,x)x]-\u003eT(c,x)x"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Causal-Process.html#v:compose",
      "description": {
        "fct-module": "Synthesizer.Causal.Process",
        "fct-package": "synthesizer",
        "fct-signature": "T a b -\u003e T b c -\u003e T a c",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Causal-Process.html#compose",
        "fct-type": "unknown",
        "title": "compose"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Causal Process",
        "module": "Synthesizer.Causal.Process",
        "name": "compose",
        "normalized": "T a b-\u003eT b c-\u003eT a c",
        "package": "synthesizer",
        "partial": "",
        "signature": "T a b-\u003eT b c-\u003eT a c"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Causal-Process.html#v:consInit",
      "description": {
        "fct-descr": "Prepend an element to a signal,\nbut keep the signal length,\ni.e. drop the last element.\n",
        "fct-module": "Synthesizer.Causal.Process",
        "fct-package": "synthesizer",
        "fct-signature": "x -\u003e T x x",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Causal-Process.html#consInit",
        "fct-type": "unknown",
        "title": "consInit"
      },
      "index": {
        "description": "Prepend an element to signal but keep the signal length i.e drop the last element",
        "hierarchy": "Synthesizer Causal Process",
        "module": "Synthesizer.Causal.Process",
        "name": "consInit",
        "normalized": "a-\u003eT a a",
        "package": "synthesizer",
        "partial": "Init",
        "signature": "x-\u003eT x x"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Causal-Process.html#v:crochetL",
      "description": {
        "fct-module": "Synthesizer.Causal.Process",
        "fct-package": "synthesizer",
        "fct-signature": "(x -\u003e acc -\u003e Maybe (y, acc)) -\u003e acc -\u003e T x y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Causal-Process.html#crochetL",
        "fct-type": "unknown",
        "title": "crochetL"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Causal Process",
        "module": "Synthesizer.Causal.Process",
        "name": "crochetL",
        "normalized": "(a-\u003eb-\u003eMaybe(c,b))-\u003eb-\u003eT a c",
        "package": "synthesizer",
        "partial": "",
        "signature": "(x-\u003eacc-\u003eMaybe(y,acc))-\u003eacc-\u003eT x y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Causal-Process.html#v:fanout",
      "description": {
        "fct-module": "Synthesizer.Causal.Process",
        "fct-package": "synthesizer",
        "fct-signature": "T a b -\u003e T a c -\u003e T a (b, c)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Causal-Process.html#fanout",
        "fct-type": "unknown",
        "title": "fanout"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Causal Process",
        "module": "Synthesizer.Causal.Process",
        "name": "fanout",
        "normalized": "T a b-\u003eT a c-\u003eT a(b,c)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T a b-\u003eT a c-\u003eT a(b,c)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Causal-Process.html#v:feed",
      "description": {
        "fct-module": "Synthesizer.Causal.Process",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e T () a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Causal-Process.html#feed",
        "fct-type": "unknown",
        "title": "feed"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Causal Process",
        "module": "Synthesizer.Causal.Process",
        "name": "feed",
        "normalized": "T a-\u003eT()a",
        "package": "synthesizer",
        "partial": "",
        "signature": "T a-\u003eT()a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Causal-Process.html#v:feedConstFst",
      "description": {
        "fct-module": "Synthesizer.Causal.Process",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e T b (a, b)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Causal-Process.html#feedConstFst",
        "fct-type": "unknown",
        "title": "feedConstFst"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Causal Process",
        "module": "Synthesizer.Causal.Process",
        "name": "feedConstFst",
        "normalized": "a-\u003eT b(a,b)",
        "package": "synthesizer",
        "partial": "Const Fst",
        "signature": "a-\u003eT b(a,b)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Causal-Process.html#v:feedConstSnd",
      "description": {
        "fct-module": "Synthesizer.Causal.Process",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e T b (b, a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Causal-Process.html#feedConstSnd",
        "fct-type": "unknown",
        "title": "feedConstSnd"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Causal Process",
        "module": "Synthesizer.Causal.Process",
        "name": "feedConstSnd",
        "normalized": "a-\u003eT b(b,a)",
        "package": "synthesizer",
        "partial": "Const Snd",
        "signature": "a-\u003eT b(b,a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Causal-Process.html#v:feedFst",
      "description": {
        "fct-module": "Synthesizer.Causal.Process",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e T b (a, b)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Causal-Process.html#feedFst",
        "fct-type": "unknown",
        "title": "feedFst"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Causal Process",
        "module": "Synthesizer.Causal.Process",
        "name": "feedFst",
        "normalized": "T a-\u003eT b(a,b)",
        "package": "synthesizer",
        "partial": "Fst",
        "signature": "T a-\u003eT b(a,b)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Causal-Process.html#v:feedGenericFst",
      "description": {
        "fct-module": "Synthesizer.Causal.Process",
        "fct-package": "synthesizer",
        "fct-signature": "sig a -\u003e T b (a, b)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Causal-Process.html#feedGenericFst",
        "fct-type": "unknown",
        "title": "feedGenericFst"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Causal Process",
        "module": "Synthesizer.Causal.Process",
        "name": "feedGenericFst",
        "normalized": "a b-\u003eT c(b,c)",
        "package": "synthesizer",
        "partial": "Generic Fst",
        "signature": "sig a-\u003eT b(a,b)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Causal-Process.html#v:feedGenericSnd",
      "description": {
        "fct-module": "Synthesizer.Causal.Process",
        "fct-package": "synthesizer",
        "fct-signature": "sig a -\u003e T b (b, a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Causal-Process.html#feedGenericSnd",
        "fct-type": "unknown",
        "title": "feedGenericSnd"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Causal Process",
        "module": "Synthesizer.Causal.Process",
        "name": "feedGenericSnd",
        "normalized": "a b-\u003eT c(c,b)",
        "package": "synthesizer",
        "partial": "Generic Snd",
        "signature": "sig a-\u003eT b(b,a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Causal-Process.html#v:feedSnd",
      "description": {
        "fct-module": "Synthesizer.Causal.Process",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e T b (b, a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Causal-Process.html#feedSnd",
        "fct-type": "unknown",
        "title": "feedSnd"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Causal Process",
        "module": "Synthesizer.Causal.Process",
        "name": "feedSnd",
        "normalized": "T a-\u003eT b(b,a)",
        "package": "synthesizer",
        "partial": "Snd",
        "signature": "T a-\u003eT b(b,a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Causal-Process.html#v:feedback",
      "description": {
        "fct-module": "Synthesizer.Causal.Process",
        "fct-package": "synthesizer",
        "fct-signature": "T (a, c) b -\u003e T b c -\u003e T a b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Causal-Process.html#feedback",
        "fct-type": "unknown",
        "title": "feedback"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Causal Process",
        "module": "Synthesizer.Causal.Process",
        "name": "feedback",
        "normalized": "T(a,b)c-\u003eT c b-\u003eT a c",
        "package": "synthesizer",
        "partial": "",
        "signature": "T(a,c)b-\u003eT b c-\u003eT a b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Causal-Process.html#v:feedbackControlled",
      "description": {
        "fct-module": "Synthesizer.Causal.Process",
        "fct-package": "synthesizer",
        "fct-signature": "T ((ctrl, a), c) b -\u003e T (ctrl, b) c -\u003e T (ctrl, a) b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Causal-Process.html#feedbackControlled",
        "fct-type": "unknown",
        "title": "feedbackControlled"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Causal Process",
        "module": "Synthesizer.Causal.Process",
        "name": "feedbackControlled",
        "normalized": "T((a,b),c)d-\u003eT(a,d)c-\u003eT(a,b)d",
        "package": "synthesizer",
        "partial": "Controlled",
        "signature": "T((ctrl,a),c)b-\u003eT(ctrl,b)c-\u003eT(ctrl,a)b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Causal-Process.html#v:fromSimpleModifier",
      "description": {
        "fct-module": "Synthesizer.Causal.Process",
        "fct-package": "synthesizer",
        "fct-signature": "Simple s ctrl a b -\u003e T (ctrl, a) b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Causal-Process.html#fromSimpleModifier",
        "fct-type": "unknown",
        "title": "fromSimpleModifier"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Causal Process",
        "module": "Synthesizer.Causal.Process",
        "name": "fromSimpleModifier",
        "normalized": "Simple a b c d-\u003eT(b,c)d",
        "package": "synthesizer",
        "partial": "Simple Modifier",
        "signature": "Simple s ctrl a b-\u003eT(ctrl,a)b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Causal-Process.html#v:fromState",
      "description": {
        "fct-module": "Synthesizer.Causal.Process",
        "fct-package": "synthesizer",
        "fct-signature": "(a -\u003e State s b) -\u003e s -\u003e T a b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Causal-Process.html#fromState",
        "fct-type": "unknown",
        "title": "fromState"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Causal Process",
        "module": "Synthesizer.Causal.Process",
        "name": "fromState",
        "normalized": "(a-\u003eState b c)-\u003eb-\u003eT a c",
        "package": "synthesizer",
        "partial": "State",
        "signature": "(a-\u003eState s b)-\u003es-\u003eT a b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Causal-Process.html#v:fromStateMaybe",
      "description": {
        "fct-module": "Synthesizer.Causal.Process",
        "fct-package": "synthesizer",
        "fct-signature": "(a -\u003e StateT s Maybe b) -\u003e s -\u003e T a b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Causal-Process.html#fromStateMaybe",
        "fct-type": "unknown",
        "title": "fromStateMaybe"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Causal Process",
        "module": "Synthesizer.Causal.Process",
        "name": "fromStateMaybe",
        "normalized": "(a-\u003eStateT b Maybe c)-\u003eb-\u003eT a c",
        "package": "synthesizer",
        "partial": "State Maybe",
        "signature": "(a-\u003eStateT s Maybe b)-\u003es-\u003eT a b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Causal-Process.html#v:id",
      "description": {
        "fct-module": "Synthesizer.Causal.Process",
        "fct-package": "synthesizer",
        "fct-signature": "T a a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Causal-Process.html#id",
        "fct-type": "unknown",
        "title": "id"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Causal Process",
        "module": "Synthesizer.Causal.Process",
        "name": "id",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Causal-Process.html#v:map",
      "description": {
        "fct-module": "Synthesizer.Causal.Process",
        "fct-package": "synthesizer",
        "fct-signature": "(a -\u003e b) -\u003e T a b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Causal-Process.html#map",
        "fct-type": "unknown",
        "title": "map"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Causal Process",
        "module": "Synthesizer.Causal.Process",
        "name": "map",
        "normalized": "(a-\u003eb)-\u003eT a b",
        "package": "synthesizer",
        "partial": "",
        "signature": "(a-\u003eb)-\u003eT a b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Causal-Process.html#v:replicateControlled",
      "description": {
        "fct-descr": "If \u003ctt\u003eT\u003c/tt\u003e would be the function type \u003ctt\u003e-\u003e\u003c/tt\u003e\nthen \u003ctt\u003ereplicateControlled 3 f\u003c/tt\u003e computes\n\u003ctt\u003e(c,x) -\u003e f(c, f(c, f(c, x)))\u003c/tt\u003e.\n",
        "fct-module": "Synthesizer.Causal.Process",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e T (c, x) x -\u003e T (c, x) x",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Causal-Process.html#replicateControlled",
        "fct-type": "unknown",
        "title": "replicateControlled"
      },
      "index": {
        "description": "If would be the function type then replicateControlled computes",
        "hierarchy": "Synthesizer Causal Process",
        "module": "Synthesizer.Causal.Process",
        "name": "replicateControlled",
        "normalized": "Int-\u003eT(a,b)b-\u003eT(a,b)b",
        "package": "synthesizer",
        "partial": "Controlled",
        "signature": "Int-\u003eT(c,x)x-\u003eT(c,x)x"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Causal-Process.html#v:scanL",
      "description": {
        "fct-module": "Synthesizer.Causal.Process",
        "fct-package": "synthesizer",
        "fct-signature": "(acc -\u003e x -\u003e acc) -\u003e acc -\u003e T x acc",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Causal-Process.html#scanL",
        "fct-type": "unknown",
        "title": "scanL"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Causal Process",
        "module": "Synthesizer.Causal.Process",
        "name": "scanL",
        "normalized": "(a-\u003eb-\u003ea)-\u003ea-\u003eT b a",
        "package": "synthesizer",
        "partial": "",
        "signature": "(acc-\u003ex-\u003eacc)-\u003eacc-\u003eT x acc"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Causal-Process.html#v:scanL1",
      "description": {
        "fct-module": "Synthesizer.Causal.Process",
        "fct-package": "synthesizer",
        "fct-signature": "(x -\u003e x -\u003e x) -\u003e T x x",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Causal-Process.html#scanL1",
        "fct-type": "unknown",
        "title": "scanL1"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Causal Process",
        "module": "Synthesizer.Causal.Process",
        "name": "scanL1",
        "normalized": "(a-\u003ea-\u003ea)-\u003eT a a",
        "package": "synthesizer",
        "partial": "",
        "signature": "(x-\u003ex-\u003ex)-\u003eT x x"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Causal-Process.html#v:split",
      "description": {
        "fct-module": "Synthesizer.Causal.Process",
        "fct-package": "synthesizer",
        "fct-signature": "T a b -\u003e T c d -\u003e T (a, c) (b, d)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Causal-Process.html#split",
        "fct-type": "unknown",
        "title": "split"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Causal Process",
        "module": "Synthesizer.Causal.Process",
        "name": "split",
        "normalized": "T a b-\u003eT c d-\u003eT(a,c)(b,d)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T a b-\u003eT c d-\u003eT(a,c)(b,d)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Causal-Process.html#v:zipWith",
      "description": {
        "fct-module": "Synthesizer.Causal.Process",
        "fct-package": "synthesizer",
        "fct-signature": "(a -\u003e b -\u003e c) -\u003e T a -\u003e T b c",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Causal-Process.html#zipWith",
        "fct-type": "unknown",
        "title": "zipWith"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Causal Process",
        "module": "Synthesizer.Causal.Process",
        "name": "zipWith",
        "normalized": "(a-\u003eb-\u003ec)-\u003eT a-\u003eT b c",
        "package": "synthesizer",
        "partial": "With",
        "signature": "(a-\u003eb-\u003ec)-\u003eT a-\u003eT b c"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Causal-ToneModulation.html#v:integrateFractional",
      "description": {
        "fct-module": "Synthesizer.Causal.ToneModulation",
        "fct-package": "synthesizer",
        "fct-signature": "t -\u003e (t, T t) -\u003e (Skip t, T (t, t) (Skip t))",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Causal-ToneModulation.html#integrateFractional",
        "fct-type": "unknown",
        "title": "integrateFractional"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Causal ToneModulation",
        "module": "Synthesizer.Causal.ToneModulation",
        "name": "integrateFractional",
        "normalized": "a-\u003e(a,T a)-\u003e(Skip a,T(a,a)(Skip a))",
        "package": "synthesizer",
        "partial": "Fractional",
        "signature": "t-\u003e(t,T t)-\u003e(Skip t,T(t,t)(Skip t))"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Causal-ToneModulation.html#v:integrateFractionalClip",
      "description": {
        "fct-descr": "Delays output by one element and shorten it by one element at the end.\n",
        "fct-module": "Synthesizer.Causal.ToneModulation",
        "fct-package": "synthesizer",
        "fct-signature": "t -\u003e (t, T t) -\u003e T (t, t) (Skip t)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Causal-ToneModulation.html#integrateFractionalClip",
        "fct-type": "unknown",
        "title": "integrateFractionalClip"
      },
      "index": {
        "description": "Delays output by one element and shorten it by one element at the end",
        "hierarchy": "Synthesizer Causal ToneModulation",
        "module": "Synthesizer.Causal.ToneModulation",
        "name": "integrateFractionalClip",
        "normalized": "a-\u003e(a,T a)-\u003eT(a,a)(Skip a)",
        "package": "synthesizer",
        "partial": "Fractional Clip",
        "signature": "t-\u003e(t,T t)-\u003eT(t,t)(Skip t)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Causal-ToneModulation.html#v:interpolateCell",
      "description": {
        "fct-module": "Synthesizer.Causal.ToneModulation",
        "fct-package": "synthesizer",
        "fct-signature": "T a y -\u003e T b y -\u003e (a, b) -\u003e Cell sig y -\u003e y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-ToneModulation.html#interpolateCell",
        "fct-type": "unknown",
        "title": "interpolateCell"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Causal ToneModulation",
        "module": "Synthesizer.Causal.ToneModulation",
        "name": "interpolateCell",
        "normalized": "T a b-\u003eT c b-\u003e(a,c)-\u003eCell d b-\u003eb",
        "package": "synthesizer",
        "partial": "Cell",
        "signature": "T a y-\u003eT b y-\u003e(a,b)-\u003eCell sig y-\u003ey"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Causal-ToneModulation.html#v:limitMinRelativeValues",
      "description": {
        "fct-module": "Synthesizer.Causal.ToneModulation",
        "fct-package": "synthesizer",
        "fct-signature": "t -\u003e t -\u003e (t, T t t)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Causal-ToneModulation.html#limitMinRelativeValues",
        "fct-type": "unknown",
        "title": "limitMinRelativeValues"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Causal ToneModulation",
        "module": "Synthesizer.Causal.ToneModulation",
        "name": "limitMinRelativeValues",
        "normalized": "a-\u003ea-\u003e(a,T a a)",
        "package": "synthesizer",
        "partial": "Min Relative Values",
        "signature": "t-\u003et-\u003e(t,T t t)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Causal-ToneModulation.html#v:limitRelativeShapes",
      "description": {
        "fct-module": "Synthesizer.Causal.ToneModulation",
        "fct-package": "synthesizer",
        "fct-signature": "Margin -\u003e Margin -\u003e Int -\u003e t -\u003e (t, T t t)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Causal-ToneModulation.html#limitRelativeShapes",
        "fct-type": "unknown",
        "title": "limitRelativeShapes"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Causal ToneModulation",
        "module": "Synthesizer.Causal.ToneModulation",
        "name": "limitRelativeShapes",
        "normalized": "Margin-\u003eMargin-\u003eInt-\u003ea-\u003e(a,T a a)",
        "package": "synthesizer",
        "partial": "Relative Shapes",
        "signature": "Margin-\u003eMargin-\u003eInt-\u003et-\u003e(t,T t t)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Causal-ToneModulation.html#v:oscillatorCells",
      "description": {
        "fct-module": "Synthesizer.Causal.ToneModulation",
        "fct-package": "synthesizer",
        "fct-signature": "Margin -\u003e Margin -\u003e Int -\u003e t -\u003e sig y -\u003e (t, T t) -\u003e T (t, t) ((t, t), Cell sig y)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Causal-ToneModulation.html#oscillatorCells",
        "fct-type": "unknown",
        "title": "oscillatorCells"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Causal ToneModulation",
        "module": "Synthesizer.Causal.ToneModulation",
        "name": "oscillatorCells",
        "normalized": "Margin-\u003eMargin-\u003eInt-\u003ea-\u003eb c-\u003e(a,T a)-\u003eT(a,a)((a,a),Cell b c)",
        "package": "synthesizer",
        "partial": "Cells",
        "signature": "Margin-\u003eMargin-\u003eInt-\u003et-\u003esig y-\u003e(t,T t)-\u003eT(t,t)((t,t),Cell sig y)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Causal-ToneModulation.html#v:oscillatorSuffixes",
      "description": {
        "fct-descr": "In contrast to the counterpart of this function for plain lists,\nit does not use sophisticated list transposition tricks,\nbut seeks through the prototype signal using \u003ctt\u003e\u003ca\u003edrop\u003c/a\u003e\u003c/tt\u003e.\nSince \u003ctt\u003e\u003ca\u003edrop\u003c/a\u003e\u003c/tt\u003e is used in an inner loop, it must be fast.\nThis is true for StorableVectors.\n",
        "fct-module": "Synthesizer.Causal.ToneModulation",
        "fct-package": "synthesizer",
        "fct-signature": "Margin -\u003e Margin -\u003e Int -\u003e t -\u003e sig y -\u003e (t, T t) -\u003e T (t, t) ((t, T t), sig y)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Causal-ToneModulation.html#oscillatorSuffixes",
        "fct-type": "unknown",
        "title": "oscillatorSuffixes"
      },
      "index": {
        "description": "In contrast to the counterpart of this function for plain lists it does not use sophisticated list transposition tricks but seeks through the prototype signal using drop Since drop is used in an inner loop it must be fast This is true for StorableVectors",
        "hierarchy": "Synthesizer Causal ToneModulation",
        "module": "Synthesizer.Causal.ToneModulation",
        "name": "oscillatorSuffixes",
        "normalized": "Margin-\u003eMargin-\u003eInt-\u003ea-\u003eb c-\u003e(a,T a)-\u003eT(a,a)((a,T a),b c)",
        "package": "synthesizer",
        "partial": "Suffixes",
        "signature": "Margin-\u003eMargin-\u003eInt-\u003et-\u003esig y-\u003e(t,T t)-\u003eT(t,t)((t,T t),sig y)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Causal-ToneModulation.html#v:seekCell",
      "description": {
        "fct-module": "Synthesizer.Causal.ToneModulation",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e t -\u003e ((t, T t), sig y) -\u003e ((t, t), Cell sig y)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Causal-ToneModulation.html#seekCell",
        "fct-type": "unknown",
        "title": "seekCell"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Causal ToneModulation",
        "module": "Synthesizer.Causal.ToneModulation",
        "name": "seekCell",
        "normalized": "Int-\u003ea-\u003e((a,T a),b c)-\u003e((a,a),Cell b c)",
        "package": "synthesizer",
        "partial": "Cell",
        "signature": "Int-\u003et-\u003e((t,T t),sig y)-\u003e((t,t),Cell sig y)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Abstraction-Flat.html#v:Amplitude",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Abstraction.Flat",
        "fct-package": "synthesizer",
        "fct-signature": "class",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Abstraction-Flat.html#Amplitude",
        "fct-type": "unknown",
        "title": "Amplitude"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Abstraction Flat",
        "module": "Synthesizer.Dimensional.Abstraction.Flat",
        "name": "Amplitude",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Amplitude",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Abstraction-Flat.html#v:C",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Abstraction.Flat",
        "fct-package": "synthesizer",
        "fct-signature": "class",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Abstraction-Flat.html#C",
        "fct-type": "unknown",
        "title": "C"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Abstraction Flat",
        "module": "Synthesizer.Dimensional.Abstraction.Flat",
        "name": "C",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Abstraction-Flat.html#v:toSamples",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Abstraction.Flat",
        "fct-package": "synthesizer",
        "fct-signature": "T s sig y -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Abstraction-Flat.html#toSamples",
        "fct-type": "unknown",
        "title": "toSamples"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Abstraction Flat",
        "module": "Synthesizer.Dimensional.Abstraction.Flat",
        "name": "toSamples",
        "normalized": "T a b c-\u003eT c",
        "package": "synthesizer",
        "partial": "Samples",
        "signature": "T s sig y-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Abstraction-Flat.html#v:toScalar",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Abstraction.Flat",
        "fct-package": "synthesizer",
        "fct-signature": "amp -\u003e y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Abstraction-Flat.html#toScalar",
        "fct-type": "unknown",
        "title": "toScalar"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Abstraction Flat",
        "module": "Synthesizer.Dimensional.Abstraction.Flat",
        "name": "toScalar",
        "normalized": "a-\u003eb",
        "package": "synthesizer",
        "partial": "Scalar",
        "signature": "amp-\u003ey"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Abstraction-Flat.html#v:unwrappedToSamples",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Abstraction.Flat",
        "fct-package": "synthesizer",
        "fct-signature": "sig y -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Abstraction-Flat.html#unwrappedToSamples",
        "fct-type": "unknown",
        "title": "unwrappedToSamples"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Abstraction Flat",
        "module": "Synthesizer.Dimensional.Abstraction.Flat",
        "name": "unwrappedToSamples",
        "normalized": "a b-\u003eT b",
        "package": "synthesizer",
        "partial": "To Samples",
        "signature": "sig y-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Abstraction-Homogeneous.html#v:C",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Abstraction.Homogeneous",
        "fct-package": "synthesizer",
        "fct-signature": "class",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Abstraction-Homogeneous.html#C",
        "fct-type": "unknown",
        "title": "C"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Abstraction Homogeneous",
        "module": "Synthesizer.Dimensional.Abstraction.Homogeneous",
        "name": "C",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Abstraction-Homogeneous.html#v:processSampleList",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Abstraction.Homogeneous",
        "fct-package": "synthesizer",
        "fct-signature": "([y0] -\u003e [y1]) -\u003e T s sig y0 -\u003e T s sig y1",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Abstraction-Homogeneous.html#processSampleList",
        "fct-type": "unknown",
        "title": "processSampleList"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Abstraction Homogeneous",
        "module": "Synthesizer.Dimensional.Abstraction.Homogeneous",
        "name": "processSampleList",
        "normalized": "([a]-\u003e[a])-\u003eT b c a-\u003eT b c a",
        "package": "synthesizer",
        "partial": "Sample List",
        "signature": "([y]-\u003e[y])-\u003eT s sig y-\u003eT s sig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Abstraction-Homogeneous.html#v:processSamples",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Abstraction.Homogeneous",
        "fct-package": "synthesizer",
        "fct-signature": "(T y0 -\u003e T y1) -\u003e T s sig y0 -\u003e T s sig y1",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Abstraction-Homogeneous.html#processSamples",
        "fct-type": "unknown",
        "title": "processSamples"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Abstraction Homogeneous",
        "module": "Synthesizer.Dimensional.Abstraction.Homogeneous",
        "name": "processSamples",
        "normalized": "(T a-\u003eT a)-\u003eT b c a-\u003eT b c a",
        "package": "synthesizer",
        "partial": "Samples",
        "signature": "(T y-\u003eT y)-\u003eT s sig y-\u003eT s sig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Abstraction-Homogeneous.html#v:unwrappedProcessSamples",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Abstraction.Homogeneous",
        "fct-package": "synthesizer",
        "fct-signature": "(T y0 -\u003e T y1) -\u003e sig y0 -\u003e sig y1",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Abstraction-Homogeneous.html#unwrappedProcessSamples",
        "fct-type": "unknown",
        "title": "unwrappedProcessSamples"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Abstraction Homogeneous",
        "module": "Synthesizer.Dimensional.Abstraction.Homogeneous",
        "name": "unwrappedProcessSamples",
        "normalized": "(T a-\u003eT a)-\u003eb a-\u003eb a",
        "package": "synthesizer",
        "partial": "Process Samples",
        "signature": "(T y-\u003eT y)-\u003esig y-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Abstraction-HomogeneousGen.html#v:C",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Abstraction.HomogeneousGen",
        "fct-package": "synthesizer",
        "fct-signature": "class",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Abstraction-HomogeneousGen.html#C",
        "fct-type": "unknown",
        "title": "C"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Abstraction HomogeneousGen",
        "module": "Synthesizer.Dimensional.Abstraction.HomogeneousGen",
        "name": "C",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Abstraction-HomogeneousGen.html#v:plainProcessSamples",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Abstraction.HomogeneousGen",
        "fct-package": "synthesizer",
        "fct-signature": "(storage0 y0 -\u003e storage1 y1) -\u003e signal0 y0 -\u003e signal1 y1",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Abstraction-HomogeneousGen.html#plainProcessSamples",
        "fct-type": "unknown",
        "title": "plainProcessSamples"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Abstraction HomogeneousGen",
        "module": "Synthesizer.Dimensional.Abstraction.HomogeneousGen",
        "name": "plainProcessSamples",
        "normalized": "(a b-\u003ea b)-\u003ec b-\u003ec b",
        "package": "synthesizer",
        "partial": "Process Samples",
        "signature": "(storage y-\u003estorage y)-\u003esignal y-\u003esignal y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Abstraction-HomogeneousGen.html#v:plainUnwrap",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Abstraction.HomogeneousGen",
        "fct-package": "synthesizer",
        "fct-signature": "signal y -\u003e (amp, storage y)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Abstraction-HomogeneousGen.html#plainUnwrap",
        "fct-type": "unknown",
        "title": "plainUnwrap"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Abstraction HomogeneousGen",
        "module": "Synthesizer.Dimensional.Abstraction.HomogeneousGen",
        "name": "plainUnwrap",
        "normalized": "a b-\u003e(c,d b)",
        "package": "synthesizer",
        "partial": "Unwrap",
        "signature": "signal y-\u003e(amp,storage y)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Abstraction-HomogeneousGen.html#v:plainWrap",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Abstraction.HomogeneousGen",
        "fct-package": "synthesizer",
        "fct-signature": "(amp, storage y) -\u003e signal y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Abstraction-HomogeneousGen.html#plainWrap",
        "fct-type": "unknown",
        "title": "plainWrap"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Abstraction HomogeneousGen",
        "module": "Synthesizer.Dimensional.Abstraction.HomogeneousGen",
        "name": "plainWrap",
        "normalized": "(a,b c)-\u003ed c",
        "package": "synthesizer",
        "partial": "Wrap",
        "signature": "(amp,storage y)-\u003esignal y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Abstraction-HomogeneousGen.html#v:processSamples",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Abstraction.HomogeneousGen",
        "fct-package": "synthesizer",
        "fct-signature": "(storage0 y0 -\u003e storage1 y1) -\u003e T s signal0 y0 -\u003e T s signal1 y1",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Abstraction-HomogeneousGen.html#processSamples",
        "fct-type": "unknown",
        "title": "processSamples"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Abstraction HomogeneousGen",
        "module": "Synthesizer.Dimensional.Abstraction.HomogeneousGen",
        "name": "processSamples",
        "normalized": "(a b-\u003ea b)-\u003eT c d b-\u003eT c d b",
        "package": "synthesizer",
        "partial": "Samples",
        "signature": "(storage y-\u003estorage y)-\u003eT s signal y-\u003eT s signal y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Abstraction-HomogeneousGen.html#v:unwrap",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Abstraction.HomogeneousGen",
        "fct-package": "synthesizer",
        "fct-signature": "T s signal y -\u003e (amp, storage y)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Abstraction-HomogeneousGen.html#unwrap",
        "fct-type": "unknown",
        "title": "unwrap"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Abstraction HomogeneousGen",
        "module": "Synthesizer.Dimensional.Abstraction.HomogeneousGen",
        "name": "unwrap",
        "normalized": "T a b c-\u003e(d,e c)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T s signal y-\u003e(amp,storage y)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Abstraction-HomogeneousGen.html#v:wrap",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Abstraction.HomogeneousGen",
        "fct-package": "synthesizer",
        "fct-signature": "(amp, storage y) -\u003e T s signal y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Abstraction-HomogeneousGen.html#wrap",
        "fct-type": "unknown",
        "title": "wrap"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Abstraction HomogeneousGen",
        "module": "Synthesizer.Dimensional.Abstraction.HomogeneousGen",
        "name": "wrap",
        "normalized": "(a,b c)-\u003eT d e c",
        "package": "synthesizer",
        "partial": "",
        "signature": "(amp,storage y)-\u003eT s signal y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Abstraction-RateIndependent.html#v:C",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Abstraction.RateIndependent",
        "fct-package": "synthesizer",
        "fct-signature": "class",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Abstraction-RateIndependent.html#C",
        "fct-type": "unknown",
        "title": "C"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Abstraction RateIndependent",
        "module": "Synthesizer.Dimensional.Abstraction.RateIndependent",
        "name": "C",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Abstraction-RateIndependent.html#v:processSignal",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Abstraction.RateIndependent",
        "fct-package": "synthesizer",
        "fct-signature": "(sig0 y0 -\u003e sig1 y1) -\u003e w sig0 y0 -\u003e w sig1 y1",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Abstraction-RateIndependent.html#processSignal",
        "fct-type": "unknown",
        "title": "processSignal"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Abstraction RateIndependent",
        "module": "Synthesizer.Dimensional.Abstraction.RateIndependent",
        "name": "processSignal",
        "normalized": "(a b-\u003ea b)-\u003ec a b-\u003ec a b",
        "package": "synthesizer",
        "partial": "Signal",
        "signature": "(sig y-\u003esig y)-\u003ew sig y-\u003ew sig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Abstraction-RateIndependent.html#v:toSignal",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Abstraction.RateIndependent",
        "fct-package": "synthesizer",
        "fct-signature": "w sig y -\u003e sig y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Abstraction-RateIndependent.html#toSignal",
        "fct-type": "unknown",
        "title": "toSignal"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Abstraction RateIndependent",
        "module": "Synthesizer.Dimensional.Abstraction.RateIndependent",
        "name": "toSignal",
        "normalized": "a b c-\u003eb c",
        "package": "synthesizer",
        "partial": "Signal",
        "signature": "w sig y-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Amplitude-Analysis.html#v:compare",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Amplitude.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "R s u y yv -\u003e R s u y yv -\u003e R s Ordering",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Analysis.html#compare",
        "fct-type": "unknown",
        "title": "compare"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Amplitude Analysis",
        "module": "Synthesizer.Dimensional.Amplitude.Analysis",
        "name": "compare",
        "normalized": "R a b c d-\u003eR a b c d-\u003eR a Ordering",
        "package": "synthesizer",
        "partial": "",
        "signature": "R s u y yv-\u003eR s u y yv-\u003eR s Ordering"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Amplitude-Analysis.html#v:directCurrentOffset",
      "description": {
        "fct-descr": "Requires finite length.\nThis is identical to the arithmetic mean.\n",
        "fct-module": "Synthesizer.Dimensional.Amplitude.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "w (S u y) y -\u003e T u y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Analysis.html#directCurrentOffset",
        "fct-type": "unknown",
        "title": "directCurrentOffset"
      },
      "index": {
        "description": "Requires finite length This is identical to the arithmetic mean",
        "hierarchy": "Synthesizer Dimensional Amplitude Analysis",
        "module": "Synthesizer.Dimensional.Amplitude.Analysis",
        "name": "directCurrentOffset",
        "normalized": "a(S b c)c-\u003eT b c",
        "package": "synthesizer",
        "partial": "Current Offset",
        "signature": "w(S u y)y-\u003eT u y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Amplitude-Analysis.html#v:flipFlopHysteresis",
      "description": {
        "fct-descr": "Detect thresholds with a hysteresis.\n",
        "fct-module": "Synthesizer.Dimensional.Amplitude.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "(T u y, T u y) -\u003e Bool -\u003e w (S u y) y -\u003e w S Bool",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Analysis.html#flipFlopHysteresis",
        "fct-type": "unknown",
        "title": "flipFlopHysteresis"
      },
      "index": {
        "description": "Detect thresholds with hysteresis",
        "hierarchy": "Synthesizer Dimensional Amplitude Analysis",
        "module": "Synthesizer.Dimensional.Amplitude.Analysis",
        "name": "flipFlopHysteresis",
        "normalized": "(T a b,T a b)-\u003eBool-\u003ec(S a b)b-\u003ec S Bool",
        "package": "synthesizer",
        "partial": "Flop Hysteresis",
        "signature": "(T u y,T u y)-\u003eBool-\u003ew(S u y)y-\u003ew S Bool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Amplitude-Analysis.html#v:lessOrEqual",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Amplitude.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "R s u y yv -\u003e R s u y yv -\u003e Binary s",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Analysis.html#lessOrEqual",
        "fct-type": "unknown",
        "title": "lessOrEqual"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Amplitude Analysis",
        "module": "Synthesizer.Dimensional.Amplitude.Analysis",
        "name": "lessOrEqual",
        "normalized": "R a b c d-\u003eR a b c d-\u003eBinary a",
        "package": "synthesizer",
        "partial": "Or Equal",
        "signature": "R s u y yv-\u003eR s u y yv-\u003eBinary s"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Amplitude-Analysis.html#v:rectify",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Amplitude.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "w sig y -\u003e w sig y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Analysis.html#rectify",
        "fct-type": "unknown",
        "title": "rectify"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Amplitude Analysis",
        "module": "Synthesizer.Dimensional.Amplitude.Analysis",
        "name": "rectify",
        "normalized": "a b c-\u003ea b c",
        "package": "synthesizer",
        "partial": "",
        "signature": "w sig y-\u003ew sig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Amplitude-Analysis.html#v:volumeEuclidean",
      "description": {
        "fct-descr": "Volume based on Energy norm.\n",
        "fct-module": "Synthesizer.Dimensional.Amplitude.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "w (S u y) y -\u003e T u y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Analysis.html#volumeEuclidean",
        "fct-type": "unknown",
        "title": "volumeEuclidean"
      },
      "index": {
        "description": "Volume based on Energy norm",
        "hierarchy": "Synthesizer Dimensional Amplitude Analysis",
        "module": "Synthesizer.Dimensional.Amplitude.Analysis",
        "name": "volumeEuclidean",
        "normalized": "a(S b c)c-\u003eT b c",
        "package": "synthesizer",
        "partial": "Euclidean",
        "signature": "w(S u y)y-\u003eT u y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Amplitude-Analysis.html#v:volumeMaximum",
      "description": {
        "fct-descr": "Volume based on Manhattan norm.\n",
        "fct-module": "Synthesizer.Dimensional.Amplitude.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "w (S u y) y -\u003e T u y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Analysis.html#volumeMaximum",
        "fct-type": "unknown",
        "title": "volumeMaximum"
      },
      "index": {
        "description": "Volume based on Manhattan norm",
        "hierarchy": "Synthesizer Dimensional Amplitude Analysis",
        "module": "Synthesizer.Dimensional.Amplitude.Analysis",
        "name": "volumeMaximum",
        "normalized": "a(S b c)c-\u003eT b c",
        "package": "synthesizer",
        "partial": "Maximum",
        "signature": "w(S u y)y-\u003eT u y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Amplitude-Analysis.html#v:volumeSum",
      "description": {
        "fct-descr": "Volume based on Sum norm.\n",
        "fct-module": "Synthesizer.Dimensional.Amplitude.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "w (S u y) y -\u003e T u y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Analysis.html#volumeSum",
        "fct-type": "unknown",
        "title": "volumeSum"
      },
      "index": {
        "description": "Volume based on Sum norm",
        "hierarchy": "Synthesizer Dimensional Amplitude Analysis",
        "module": "Synthesizer.Dimensional.Amplitude.Analysis",
        "name": "volumeSum",
        "normalized": "a(S b c)c-\u003eT b c",
        "package": "synthesizer",
        "partial": "Sum",
        "signature": "w(S u y)y-\u003eT u y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Amplitude-Analysis.html#v:volumeVectorEuclidean",
      "description": {
        "fct-descr": "Volume based on Energy norm.\n",
        "fct-module": "Synthesizer.Dimensional.Amplitude.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "w (S u y) yv -\u003e T u y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Analysis.html#volumeVectorEuclidean",
        "fct-type": "unknown",
        "title": "volumeVectorEuclidean"
      },
      "index": {
        "description": "Volume based on Energy norm",
        "hierarchy": "Synthesizer Dimensional Amplitude Analysis",
        "module": "Synthesizer.Dimensional.Amplitude.Analysis",
        "name": "volumeVectorEuclidean",
        "normalized": "a(S b c)d-\u003eT b c",
        "package": "synthesizer",
        "partial": "Vector Euclidean",
        "signature": "w(S u y)yv-\u003eT u y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Amplitude-Analysis.html#v:volumeVectorMaximum",
      "description": {
        "fct-descr": "Volume based on Manhattan norm.\n",
        "fct-module": "Synthesizer.Dimensional.Amplitude.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "w (S u y) yv -\u003e T u y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Analysis.html#volumeVectorMaximum",
        "fct-type": "unknown",
        "title": "volumeVectorMaximum"
      },
      "index": {
        "description": "Volume based on Manhattan norm",
        "hierarchy": "Synthesizer Dimensional Amplitude Analysis",
        "module": "Synthesizer.Dimensional.Amplitude.Analysis",
        "name": "volumeVectorMaximum",
        "normalized": "a(S b c)d-\u003eT b c",
        "package": "synthesizer",
        "partial": "Vector Maximum",
        "signature": "w(S u y)yv-\u003eT u y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Amplitude-Analysis.html#v:volumeVectorSum",
      "description": {
        "fct-descr": "Volume based on Sum norm.\n",
        "fct-module": "Synthesizer.Dimensional.Amplitude.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "w (S u y) yv -\u003e T u y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Analysis.html#volumeVectorSum",
        "fct-type": "unknown",
        "title": "volumeVectorSum"
      },
      "index": {
        "description": "Volume based on Sum norm",
        "hierarchy": "Synthesizer Dimensional Amplitude Analysis",
        "module": "Synthesizer.Dimensional.Amplitude.Analysis",
        "name": "volumeVectorSum",
        "normalized": "a(S b c)d-\u003eT b c",
        "package": "synthesizer",
        "partial": "Vector Sum",
        "signature": "w(S u y)yv-\u003eT u y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Amplitude-Control.html#v:constant",
      "description": {
        "fct-descr": "value \n",
        "fct-module": "Synthesizer.Dimensional.Amplitude.Control",
        "fct-package": "synthesizer",
        "fct-signature": "T u y-\u003e R s u y y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Control.html#constant",
        "fct-type": "unknown",
        "title": "constant"
      },
      "index": {
        "description": "value",
        "hierarchy": "Synthesizer Dimensional Amplitude Control",
        "module": "Synthesizer.Dimensional.Amplitude.Control",
        "name": "constant",
        "normalized": "T a b-\u003eR c a b b",
        "package": "synthesizer",
        "partial": "",
        "signature": "T u y-\u003eR s u y y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Amplitude-Control.html#v:constantVector",
      "description": {
        "fct-descr": "amplitude \nvalue \n",
        "fct-module": "Synthesizer.Dimensional.Amplitude.Control",
        "fct-package": "synthesizer",
        "fct-signature": "T u y-\u003e yv-\u003e R s u y yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Control.html#constantVector",
        "fct-type": "unknown",
        "title": "constantVector"
      },
      "index": {
        "description": "amplitude value",
        "hierarchy": "Synthesizer Dimensional Amplitude Control",
        "module": "Synthesizer.Dimensional.Amplitude.Control",
        "name": "constantVector",
        "normalized": "T a b-\u003ec-\u003eR d a b c",
        "package": "synthesizer",
        "partial": "Vector",
        "signature": "T u y-\u003eyv-\u003eR s u y yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Amplitude-Control.html#v:mapExponential",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Amplitude.Control",
        "fct-package": "synthesizer",
        "fct-signature": "y -\u003e T u q -\u003e w flat y -\u003e w (S u q) y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Control.html#mapExponential",
        "fct-type": "unknown",
        "title": "mapExponential"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Amplitude Control",
        "module": "Synthesizer.Dimensional.Amplitude.Control",
        "name": "mapExponential",
        "normalized": "a-\u003eT b c-\u003ed e a-\u003ed(S b c)a",
        "package": "synthesizer",
        "partial": "Exponential",
        "signature": "y-\u003eT u q-\u003ew flat y-\u003ew(S u q)y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Amplitude-Control.html#v:mapLinear",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Amplitude.Control",
        "fct-package": "synthesizer",
        "fct-signature": "y -\u003e T u y -\u003e w flat y -\u003e w (S u y) y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Control.html#mapLinear",
        "fct-type": "unknown",
        "title": "mapLinear"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Amplitude Control",
        "module": "Synthesizer.Dimensional.Amplitude.Control",
        "name": "mapLinear",
        "normalized": "a-\u003eT b a-\u003ec d a-\u003ec(S b a)a",
        "package": "synthesizer",
        "partial": "Linear",
        "signature": "y-\u003eT u y-\u003ew flat y-\u003ew(S u y)y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Amplitude-Control.html#v:mapLinearDimension",
      "description": {
        "fct-descr": "range: one is mapped to \u003ctt\u003ecenter + range * ampX\u003c/tt\u003e \ncenter: zero is mapped to \u003ctt\u003ecenter\u003c/tt\u003e \n",
        "fct-module": "Synthesizer.Dimensional.Amplitude.Control",
        "fct-package": "synthesizer",
        "fct-signature": "T v y-\u003e T (Mul v u) y-\u003e w (S u y) y-\u003e w (S (Mul v u) y) y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Control.html#mapLinearDimension",
        "fct-type": "unknown",
        "title": "mapLinearDimension"
      },
      "index": {
        "description": "range one is mapped to center range ampX center zero is mapped to center",
        "hierarchy": "Synthesizer Dimensional Amplitude Control",
        "module": "Synthesizer.Dimensional.Amplitude.Control",
        "name": "mapLinearDimension",
        "normalized": "T a b-\u003eT(Mul a c)b-\u003ed(S c b)b-\u003ed(S(Mul a c)b)b",
        "package": "synthesizer",
        "partial": "Linear Dimension",
        "signature": "T v y-\u003eT(Mul v u)y-\u003ew(S u y)y-\u003ew(S(Mul v u)y)y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Amplitude-Cut.html#v:append",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Amplitude.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "R s u y yv -\u003e R s u y yv -\u003e R s u y yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Cut.html#append",
        "fct-type": "unknown",
        "title": "append"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Amplitude Cut",
        "module": "Synthesizer.Dimensional.Amplitude.Cut",
        "name": "append",
        "normalized": "R a b c d-\u003eR a b c d-\u003eR a b c d",
        "package": "synthesizer",
        "partial": "",
        "signature": "R s u y yv-\u003eR s u y yv-\u003eR s u y yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Amplitude-Cut.html#v:appendVolume",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Amplitude.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "T u y -\u003e R s u y yv -\u003e R s u y yv -\u003e R s u y yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Cut.html#appendVolume",
        "fct-type": "unknown",
        "title": "appendVolume"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Amplitude Cut",
        "module": "Synthesizer.Dimensional.Amplitude.Cut",
        "name": "appendVolume",
        "normalized": "T a b-\u003eR c a b d-\u003eR c a b d-\u003eR c a b d",
        "package": "synthesizer",
        "partial": "Volume",
        "signature": "T u y-\u003eR s u y yv-\u003eR s u y yv-\u003eR s u y yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Amplitude-Cut.html#v:concat",
      "description": {
        "fct-descr": "Similar to \u003ctt\u003efoldr1 append\u003c/tt\u003e but more efficient and accurate,\nbecause it reduces the number of amplifications.\nDoes not work for infinite lists,\nbecause no maximum amplitude can be computed.\n",
        "fct-module": "Synthesizer.Dimensional.Amplitude.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "[R s u y yv] -\u003e R s u y yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Cut.html#concat",
        "fct-type": "unknown",
        "title": "concat"
      },
      "index": {
        "description": "Similar to foldr1 append but more efficient and accurate because it reduces the number of amplifications Does not work for infinite lists because no maximum amplitude can be computed",
        "hierarchy": "Synthesizer Dimensional Amplitude Cut",
        "module": "Synthesizer.Dimensional.Amplitude.Cut",
        "name": "concat",
        "normalized": "[R a b c d]-\u003eR a b c d",
        "package": "synthesizer",
        "partial": "",
        "signature": "[R s u y yv]-\u003eR s u y yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Amplitude-Cut.html#v:concatVolume",
      "description": {
        "fct-descr": "Give the output volume explicitly.\nDoes also work for infinite lists.\n",
        "fct-module": "Synthesizer.Dimensional.Amplitude.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "T u y -\u003e [R s u y yv] -\u003e R s u y yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Cut.html#concatVolume",
        "fct-type": "unknown",
        "title": "concatVolume"
      },
      "index": {
        "description": "Give the output volume explicitly Does also work for infinite lists",
        "hierarchy": "Synthesizer Dimensional Amplitude Cut",
        "module": "Synthesizer.Dimensional.Amplitude.Cut",
        "name": "concatVolume",
        "normalized": "T a b-\u003e[R c a b d]-\u003eR c a b d",
        "package": "synthesizer",
        "partial": "Volume",
        "signature": "T u y-\u003e[R s u y yv]-\u003eR s u y yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Amplitude-Cut.html#v:leftFromStereo",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Amplitude.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "R s u y (T yv) -\u003e R s u y yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Cut.html#leftFromStereo",
        "fct-type": "unknown",
        "title": "leftFromStereo"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Amplitude Cut",
        "module": "Synthesizer.Dimensional.Amplitude.Cut",
        "name": "leftFromStereo",
        "normalized": "R a b c(T d)-\u003eR a b c d",
        "package": "synthesizer",
        "partial": "From Stereo",
        "signature": "R s u y(T yv)-\u003eR s u y yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Amplitude-Cut.html#v:mergeStereo",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Amplitude.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "R s u y yv -\u003e R s u y yv -\u003e R s u y (T yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Cut.html#mergeStereo",
        "fct-type": "unknown",
        "title": "mergeStereo"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Amplitude Cut",
        "module": "Synthesizer.Dimensional.Amplitude.Cut",
        "name": "mergeStereo",
        "normalized": "R a b c d-\u003eR a b c d-\u003eR a b c(T d)",
        "package": "synthesizer",
        "partial": "Stereo",
        "signature": "R s u y yv-\u003eR s u y yv-\u003eR s u y(T yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Amplitude-Cut.html#v:mergeStereoVolume",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Amplitude.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "T u y -\u003e R s u y yv -\u003e R s u y yv -\u003e R s u y (T yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Cut.html#mergeStereoVolume",
        "fct-type": "unknown",
        "title": "mergeStereoVolume"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Amplitude Cut",
        "module": "Synthesizer.Dimensional.Amplitude.Cut",
        "name": "mergeStereoVolume",
        "normalized": "T a b-\u003eR c a b d-\u003eR c a b d-\u003eR c a b(T d)",
        "package": "synthesizer",
        "partial": "Stereo Volume",
        "signature": "T u y-\u003eR s u y yv-\u003eR s u y yv-\u003eR s u y(T yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Amplitude-Cut.html#v:rightFromStereo",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Amplitude.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "R s u y (T yv) -\u003e R s u y yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Cut.html#rightFromStereo",
        "fct-type": "unknown",
        "title": "rightFromStereo"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Amplitude Cut",
        "module": "Synthesizer.Dimensional.Amplitude.Cut",
        "name": "rightFromStereo",
        "normalized": "R a b c(T d)-\u003eR a b c d",
        "package": "synthesizer",
        "partial": "From Stereo",
        "signature": "R s u y(T yv)-\u003eR s u y yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Amplitude-Cut.html#v:selectBool",
      "description": {
        "fct-descr": "False \nTrue \n",
        "fct-module": "Synthesizer.Dimensional.Amplitude.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "R s u y yv-\u003e R s u y yv-\u003e Binary s-\u003e R s u y yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Cut.html#selectBool",
        "fct-type": "unknown",
        "title": "selectBool"
      },
      "index": {
        "description": "False True",
        "hierarchy": "Synthesizer Dimensional Amplitude Cut",
        "module": "Synthesizer.Dimensional.Amplitude.Cut",
        "name": "selectBool",
        "normalized": "R a b c d-\u003eR a b c d-\u003eBinary a-\u003eR a b c d",
        "package": "synthesizer",
        "partial": "Bool",
        "signature": "R s u y yv-\u003eR s u y yv-\u003eBinary s-\u003eR s u y yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Amplitude-Cut.html#v:unzip",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Amplitude.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "R s u y (yv0, yv1) -\u003e (R s u y yv0, R s u y yv1)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Cut.html#unzip",
        "fct-type": "unknown",
        "title": "unzip"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Amplitude Cut",
        "module": "Synthesizer.Dimensional.Amplitude.Cut",
        "name": "unzip",
        "normalized": "R a b c(d,d)-\u003e(R a b c d,R a b c d)",
        "package": "synthesizer",
        "partial": "",
        "signature": "R s u y(yv,yv)-\u003e(R s u y yv,R s u y yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Amplitude-Cut.html#v:unzip3",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Amplitude.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "R s u y (yv0, yv1, yv2) -\u003e (R s u y yv0, R s u y yv1, R s u y yv2)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Cut.html#unzip3",
        "fct-type": "unknown",
        "title": "unzip3"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Amplitude Cut",
        "module": "Synthesizer.Dimensional.Amplitude.Cut",
        "name": "unzip3",
        "normalized": "R a b c(d,d,d)-\u003e(R a b c d,R a b c d,R a b c d)",
        "package": "synthesizer",
        "partial": "",
        "signature": "R s u y(yv,yv,yv)-\u003e(R s u y yv,R s u y yv,R s u y yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Amplitude-Cut.html#v:zip",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Amplitude.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "R s u y yv0 -\u003e R s u y yv1 -\u003e R s u y (yv0, yv1)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Cut.html#zip",
        "fct-type": "unknown",
        "title": "zip"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Amplitude Cut",
        "module": "Synthesizer.Dimensional.Amplitude.Cut",
        "name": "zip",
        "normalized": "R a b c d-\u003eR a b c d-\u003eR a b c(d,d)",
        "package": "synthesizer",
        "partial": "",
        "signature": "R s u y yv-\u003eR s u y yv-\u003eR s u y(yv,yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Amplitude-Cut.html#v:zip3",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Amplitude.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "R s u y yv0 -\u003e R s u y yv1 -\u003e R s u y yv2 -\u003e R s u y (yv0, yv1, yv2)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Cut.html#zip3",
        "fct-type": "unknown",
        "title": "zip3"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Amplitude Cut",
        "module": "Synthesizer.Dimensional.Amplitude.Cut",
        "name": "zip3",
        "normalized": "R a b c d-\u003eR a b c d-\u003eR a b c d-\u003eR a b c(d,d,d)",
        "package": "synthesizer",
        "partial": "",
        "signature": "R s u y yv-\u003eR s u y yv-\u003eR s u y yv-\u003eR s u y(yv,yv,yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Amplitude-Cut.html#v:zip3Volume",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Amplitude.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "T u y -\u003e R s u y yv0 -\u003e R s u y yv1 -\u003e R s u y yv2 -\u003e R s u y (yv0, yv1, yv2)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Cut.html#zip3Volume",
        "fct-type": "unknown",
        "title": "zip3Volume"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Amplitude Cut",
        "module": "Synthesizer.Dimensional.Amplitude.Cut",
        "name": "zip3Volume",
        "normalized": "T a b-\u003eR c a b d-\u003eR c a b d-\u003eR c a b d-\u003eR c a b(d,d,d)",
        "package": "synthesizer",
        "partial": "Volume",
        "signature": "T u y-\u003eR s u y yv-\u003eR s u y yv-\u003eR s u y yv-\u003eR s u y(yv,yv,yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Amplitude-Cut.html#v:zipVolume",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Amplitude.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "T u y -\u003e R s u y yv0 -\u003e R s u y yv1 -\u003e R s u y (yv0, yv1)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Cut.html#zipVolume",
        "fct-type": "unknown",
        "title": "zipVolume"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Amplitude Cut",
        "module": "Synthesizer.Dimensional.Amplitude.Cut",
        "name": "zipVolume",
        "normalized": "T a b-\u003eR c a b d-\u003eR c a b d-\u003eR c a b(d,d)",
        "package": "synthesizer",
        "partial": "Volume",
        "signature": "T u y-\u003eR s u y yv-\u003eR s u y yv-\u003eR s u y(yv,yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Amplitude-Displacement.html#v:distort",
      "description": {
        "fct-descr": "Distort the signal using a flat function.\nThe first signal gives the scaling of the function.\nIf the scaling is c and the input sample is y,\nthen \u003ctt\u003ec * f(y/c)\u003c/tt\u003e is output.\nThis way we can use an (efficient) flat function\nand have a simple, yet dimension conform, way of controlling the distortion.\nE.g. if the distortion function is \u003ctt\u003etanh\u003c/tt\u003e\nthen the value \u003ctt\u003ec\u003c/tt\u003e controls the saturation level.\n",
        "fct-module": "Synthesizer.Dimensional.Amplitude.Displacement",
        "fct-package": "synthesizer",
        "fct-signature": "(yv -\u003e yv) -\u003e R s u y y -\u003e R s u y yv -\u003e R s u y yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Displacement.html#distort",
        "fct-type": "unknown",
        "title": "distort"
      },
      "index": {
        "description": "Distort the signal using flat function The first signal gives the scaling of the function If the scaling is and the input sample is then is output This way we can use an efficient flat function and have simple yet dimension conform way of controlling the distortion E.g if the distortion function is tanh then the value controls the saturation level",
        "hierarchy": "Synthesizer Dimensional Amplitude Displacement",
        "module": "Synthesizer.Dimensional.Amplitude.Displacement",
        "name": "distort",
        "normalized": "(a-\u003ea)-\u003eR b c d d-\u003eR b c d a-\u003eR b c d a",
        "package": "synthesizer",
        "partial": "",
        "signature": "(yv-\u003eyv)-\u003eR s u y y-\u003eR s u y yv-\u003eR s u y yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Amplitude-Displacement.html#v:mix",
      "description": {
        "fct-descr": "Mix two signals.\nIn contrast to \u003ctt\u003e\u003ca\u003ezipWith\u003c/a\u003e\u003c/tt\u003e the result has the length of the longer signal.\n",
        "fct-module": "Synthesizer.Dimensional.Amplitude.Displacement",
        "fct-package": "synthesizer",
        "fct-signature": "R s u y yv -\u003e R s u y yv -\u003e R s u y yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Displacement.html#mix",
        "fct-type": "unknown",
        "title": "mix"
      },
      "index": {
        "description": "Mix two signals In contrast to zipWith the result has the length of the longer signal",
        "hierarchy": "Synthesizer Dimensional Amplitude Displacement",
        "module": "Synthesizer.Dimensional.Amplitude.Displacement",
        "name": "mix",
        "normalized": "R a b c d-\u003eR a b c d-\u003eR a b c d",
        "package": "synthesizer",
        "partial": "",
        "signature": "R s u y yv-\u003eR s u y yv-\u003eR s u y yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Amplitude-Displacement.html#v:mixMulti",
      "description": {
        "fct-descr": "Mix one or more signals.\n",
        "fct-module": "Synthesizer.Dimensional.Amplitude.Displacement",
        "fct-package": "synthesizer",
        "fct-signature": "[R s u y yv] -\u003e R s u y yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Displacement.html#mixMulti",
        "fct-type": "unknown",
        "title": "mixMulti"
      },
      "index": {
        "description": "Mix one or more signals",
        "hierarchy": "Synthesizer Dimensional Amplitude Displacement",
        "module": "Synthesizer.Dimensional.Amplitude.Displacement",
        "name": "mixMulti",
        "normalized": "[R a b c d]-\u003eR a b c d",
        "package": "synthesizer",
        "partial": "Multi",
        "signature": "[R s u y yv]-\u003eR s u y yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Amplitude-Displacement.html#v:mixMultiVolume",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Amplitude.Displacement",
        "fct-package": "synthesizer",
        "fct-signature": "T u y -\u003e [R s u y yv] -\u003e R s u y yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Displacement.html#mixMultiVolume",
        "fct-type": "unknown",
        "title": "mixMultiVolume"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Amplitude Displacement",
        "module": "Synthesizer.Dimensional.Amplitude.Displacement",
        "name": "mixMultiVolume",
        "normalized": "T a b-\u003e[R c a b d]-\u003eR c a b d",
        "package": "synthesizer",
        "partial": "Multi Volume",
        "signature": "T u y-\u003e[R s u y yv]-\u003eR s u y yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Amplitude-Displacement.html#v:mixVolume",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Amplitude.Displacement",
        "fct-package": "synthesizer",
        "fct-signature": "T u y -\u003e R s u y yv -\u003e R s u y yv -\u003e R s u y yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Displacement.html#mixVolume",
        "fct-type": "unknown",
        "title": "mixVolume"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Amplitude Displacement",
        "module": "Synthesizer.Dimensional.Amplitude.Displacement",
        "name": "mixVolume",
        "normalized": "T a b-\u003eR c a b d-\u003eR c a b d-\u003eR c a b d",
        "package": "synthesizer",
        "partial": "Volume",
        "signature": "T u y-\u003eR s u y yv-\u003eR s u y yv-\u003eR s u y yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Amplitude-Displacement.html#v:raise",
      "description": {
        "fct-descr": "Add a number to all of the signal values.\nThis is useful for adjusting the center of a modulation.\n",
        "fct-module": "Synthesizer.Dimensional.Amplitude.Displacement",
        "fct-package": "synthesizer",
        "fct-signature": "T u y -\u003e yv -\u003e w (S u y) yv -\u003e w (S u y) yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Displacement.html#raise",
        "fct-type": "unknown",
        "title": "raise"
      },
      "index": {
        "description": "Add number to all of the signal values This is useful for adjusting the center of modulation",
        "hierarchy": "Synthesizer Dimensional Amplitude Displacement",
        "module": "Synthesizer.Dimensional.Amplitude.Displacement",
        "name": "raise",
        "normalized": "T a b-\u003ec-\u003ed(S a b)c-\u003ed(S a b)c",
        "package": "synthesizer",
        "partial": "",
        "signature": "T u y-\u003eyv-\u003ew(S u y)yv-\u003ew(S u y)yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Amplitude-Filter.html#v:amplify",
      "description": {
        "fct-descr": "The amplification factor must be positive. \n",
        "fct-module": "Synthesizer.Dimensional.Amplitude.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "y -\u003e w (S u y) yv -\u003e w (S u y) yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Filter.html#amplify",
        "fct-type": "unknown",
        "title": "amplify"
      },
      "index": {
        "description": "The amplification factor must be positive",
        "hierarchy": "Synthesizer Dimensional Amplitude Filter",
        "module": "Synthesizer.Dimensional.Amplitude.Filter",
        "name": "amplify",
        "normalized": "a-\u003eb(S c a)d-\u003eb(S c a)d",
        "package": "synthesizer",
        "partial": "",
        "signature": "y-\u003ew(S u y)yv-\u003ew(S u y)yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Amplitude-Filter.html#v:amplifyDimension",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Amplitude.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "T v y -\u003e w (S u y) yv -\u003e w (S (Mul v u) y) yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Filter.html#amplifyDimension",
        "fct-type": "unknown",
        "title": "amplifyDimension"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Amplitude Filter",
        "module": "Synthesizer.Dimensional.Amplitude.Filter",
        "name": "amplifyDimension",
        "normalized": "T a b-\u003ec(S d b)e-\u003ec(S(Mul a d)b)e",
        "package": "synthesizer",
        "partial": "Dimension",
        "signature": "T v y-\u003ew(S u y)yv-\u003ew(S(Mul v u)y)yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Amplitude-Filter.html#v:envelope",
      "description": {
        "fct-descr": "the envelope \nthe signal to be enveloped \n",
        "fct-module": "Synthesizer.Dimensional.Amplitude.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "T s flat y0-\u003e T s sig y0-\u003e T s sig y0",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Filter.html#envelope",
        "fct-type": "unknown",
        "title": "envelope"
      },
      "index": {
        "description": "the envelope the signal to be enveloped",
        "hierarchy": "Synthesizer Dimensional Amplitude Filter",
        "module": "Synthesizer.Dimensional.Amplitude.Filter",
        "name": "envelope",
        "normalized": "T a b c-\u003eT a d c-\u003eT a d c",
        "package": "synthesizer",
        "partial": "",
        "signature": "T s flat y-\u003eT s sig y-\u003eT s sig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Amplitude-Filter.html#v:envelopeVector",
      "description": {
        "fct-descr": "the envelope \nthe signal to be enveloped \n",
        "fct-module": "Synthesizer.Dimensional.Amplitude.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "T s flat y0-\u003e T s sig yv-\u003e T s sig yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Filter.html#envelopeVector",
        "fct-type": "unknown",
        "title": "envelopeVector"
      },
      "index": {
        "description": "the envelope the signal to be enveloped",
        "hierarchy": "Synthesizer Dimensional Amplitude Filter",
        "module": "Synthesizer.Dimensional.Amplitude.Filter",
        "name": "envelopeVector",
        "normalized": "T a b c-\u003eT a d e-\u003eT a d e",
        "package": "synthesizer",
        "partial": "Vector",
        "signature": "T s flat y-\u003eT s sig yv-\u003eT s sig yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Amplitude-Filter.html#v:envelopeVectorDimension",
      "description": {
        "fct-descr": "the envelope \nthe signal to be enveloped \n",
        "fct-module": "Synthesizer.Dimensional.Amplitude.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "R s v y y0-\u003e R s u y yv-\u003e R s (Mul v u) y yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Filter.html#envelopeVectorDimension",
        "fct-type": "unknown",
        "title": "envelopeVectorDimension"
      },
      "index": {
        "description": "the envelope the signal to be enveloped",
        "hierarchy": "Synthesizer Dimensional Amplitude Filter",
        "module": "Synthesizer.Dimensional.Amplitude.Filter",
        "name": "envelopeVectorDimension",
        "normalized": "R a b c c-\u003eR a d c e-\u003eR a(Mul b d)c e",
        "package": "synthesizer",
        "partial": "Vector Dimension",
        "signature": "R s v y y-\u003eR s u y yv-\u003eR s(Mul v u)y yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Amplitude-Filter.html#v:negate",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Amplitude.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "w sig yv -\u003e w sig yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Filter.html#negate",
        "fct-type": "unknown",
        "title": "negate"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Amplitude Filter",
        "module": "Synthesizer.Dimensional.Amplitude.Filter",
        "name": "negate",
        "normalized": "a b c-\u003ea b c",
        "package": "synthesizer",
        "partial": "",
        "signature": "w sig yv-\u003ew sig yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Amplitude-Signal.html#t:D",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Amplitude.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "type",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Signal.html#D",
        "fct-type": "unknown",
        "title": "D"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Amplitude Signal",
        "module": "Synthesizer.Dimensional.Amplitude.Signal",
        "name": "D",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Amplitude-Signal.html#t:R",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Amplitude.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "type",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Signal.html#R",
        "fct-type": "unknown",
        "title": "R"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Amplitude Signal",
        "module": "Synthesizer.Dimensional.Amplitude.Signal",
        "name": "R",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Amplitude-Signal.html#t:S",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Amplitude.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "type",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Signal.html#S",
        "fct-type": "unknown",
        "title": "S"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Amplitude Signal",
        "module": "Synthesizer.Dimensional.Amplitude.Signal",
        "name": "S",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Amplitude-Signal.html#t:T",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Amplitude.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "data",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Signal.html#T",
        "fct-type": "unknown",
        "title": "T"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Amplitude Signal",
        "module": "Synthesizer.Dimensional.Amplitude.Signal",
        "name": "T",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Amplitude-Signal.html#v:amplitude",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Amplitude.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "w (D v y sig) yv -\u003e T v y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Signal.html#amplitude",
        "fct-type": "unknown",
        "title": "amplitude"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Amplitude Signal",
        "module": "Synthesizer.Dimensional.Amplitude.Signal",
        "name": "amplitude",
        "normalized": "a(D b c d)e-\u003eT b c",
        "package": "synthesizer",
        "partial": "",
        "signature": "w(D v y sig)yv-\u003eT v y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Amplitude-Signal.html#v:asTypeOfAmplitude",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Amplitude.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "y -\u003e w (D v y sig) yv -\u003e y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Signal.html#asTypeOfAmplitude",
        "fct-type": "unknown",
        "title": "asTypeOfAmplitude"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Amplitude Signal",
        "module": "Synthesizer.Dimensional.Amplitude.Signal",
        "name": "asTypeOfAmplitude",
        "normalized": "a-\u003eb(D c a d)e-\u003ea",
        "package": "synthesizer",
        "partial": "Type Of Amplitude",
        "signature": "y-\u003ew(D v y sig)yv-\u003ey"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Amplitude-Signal.html#v:fromSamples",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Amplitude.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "amp -\u003e T yv -\u003e T s (T amp S) yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Signal.html#fromSamples",
        "fct-type": "unknown",
        "title": "fromSamples"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Amplitude Signal",
        "module": "Synthesizer.Dimensional.Amplitude.Signal",
        "name": "fromSamples",
        "normalized": "a-\u003eT b-\u003eT c(T a S)b",
        "package": "synthesizer",
        "partial": "Samples",
        "signature": "amp-\u003eT yv-\u003eT s(T amp S)yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Amplitude-Signal.html#v:fromScalarSamples",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Amplitude.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "amp -\u003e T y -\u003e T s (T amp S) y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Signal.html#fromScalarSamples",
        "fct-type": "unknown",
        "title": "fromScalarSamples"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Amplitude Signal",
        "module": "Synthesizer.Dimensional.Amplitude.Signal",
        "name": "fromScalarSamples",
        "normalized": "a-\u003eT b-\u003eT c(T a S)b",
        "package": "synthesizer",
        "partial": "Scalar Samples",
        "signature": "amp-\u003eT y-\u003eT s(T amp S)y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Amplitude-Signal.html#v:fromSignal",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Amplitude.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "amp -\u003e R s yv -\u003e T s (T amp S) yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Signal.html#fromSignal",
        "fct-type": "unknown",
        "title": "fromSignal"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Amplitude Signal",
        "module": "Synthesizer.Dimensional.Amplitude.Signal",
        "name": "fromSignal",
        "normalized": "a-\u003eR b c-\u003eT b(T a S)c",
        "package": "synthesizer",
        "partial": "Signal",
        "signature": "amp-\u003eR s yv-\u003eT s(T amp S)yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Amplitude-Signal.html#v:fromVectorSamples",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Amplitude.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "amp -\u003e T yv -\u003e T s (T amp S) yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Signal.html#fromVectorSamples",
        "fct-type": "unknown",
        "title": "fromVectorSamples"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Amplitude Signal",
        "module": "Synthesizer.Dimensional.Amplitude.Signal",
        "name": "fromVectorSamples",
        "normalized": "a-\u003eT b-\u003eT c(T a S)b",
        "package": "synthesizer",
        "partial": "Vector Samples",
        "signature": "amp-\u003eT yv-\u003eT s(T amp S)yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Amplitude-Signal.html#v:phantomSignal",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Amplitude.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T s (D v y sig) yv -\u003e T s sig yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Signal.html#phantomSignal",
        "fct-type": "unknown",
        "title": "phantomSignal"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Amplitude Signal",
        "module": "Synthesizer.Dimensional.Amplitude.Signal",
        "name": "phantomSignal",
        "normalized": "T a(D b c d)e-\u003eT a d e",
        "package": "synthesizer",
        "partial": "Signal",
        "signature": "T s(D v y sig)yv-\u003eT s sig yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Amplitude-Signal.html#v:privateSamples",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Amplitude.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T amp (T sig) yv -\u003e sig yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Signal.html#privateSamples",
        "fct-type": "unknown",
        "title": "privateSamples"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Amplitude Signal",
        "module": "Synthesizer.Dimensional.Amplitude.Signal",
        "name": "privateSamples",
        "normalized": "T a(T b)c-\u003eb c",
        "package": "synthesizer",
        "partial": "Samples",
        "signature": "T amp(T sig)yv-\u003esig yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Amplitude-Signal.html#v:processSamples",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Amplitude.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(sig0 yv0 -\u003e sig1 yv1) -\u003e w (D v y (T sig0)) yv0 -\u003e w (D v y (T sig1)) yv1",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Signal.html#processSamples",
        "fct-type": "unknown",
        "title": "processSamples"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Amplitude Signal",
        "module": "Synthesizer.Dimensional.Amplitude.Signal",
        "name": "processSamples",
        "normalized": "(a b-\u003ea b)-\u003ec(D d e(T a))b-\u003ec(D d e(T a))b",
        "package": "synthesizer",
        "partial": "Samples",
        "signature": "(sig yv-\u003esig yv)-\u003ew(D v y(T sig))yv-\u003ew(D v y(T sig))yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Amplitude-Signal.html#v:processSamplesPrivate",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Amplitude.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(sig0 yv0 -\u003e sig1 yv1) -\u003e D v y (T sig0) yv0 -\u003e D v y (T sig1) yv1",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Signal.html#processSamplesPrivate",
        "fct-type": "unknown",
        "title": "processSamplesPrivate"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Amplitude Signal",
        "module": "Synthesizer.Dimensional.Amplitude.Signal",
        "name": "processSamplesPrivate",
        "normalized": "(a b-\u003ea b)-\u003eD c d(T a)b-\u003eD c d(T a)b",
        "package": "synthesizer",
        "partial": "Samples Private",
        "signature": "(sig yv-\u003esig yv)-\u003eD v y(T sig)yv-\u003eD v y(T sig)yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Amplitude-Signal.html#v:replaceAmplitude",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Amplitude.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T v1 y -\u003e w (D v0 y sig) yv -\u003e w (D v1 y sig) yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Signal.html#replaceAmplitude",
        "fct-type": "unknown",
        "title": "replaceAmplitude"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Amplitude Signal",
        "module": "Synthesizer.Dimensional.Amplitude.Signal",
        "name": "replaceAmplitude",
        "normalized": "T a b-\u003ec(D a b d)e-\u003ec(D a b d)e",
        "package": "synthesizer",
        "partial": "Amplitude",
        "signature": "T v y-\u003ew(D v y sig)yv-\u003ew(D v y sig)yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Amplitude-Signal.html#v:replaceAmplitudePrivate",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Amplitude.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T v1 y -\u003e D v0 y sig yv -\u003e D v1 y sig yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Signal.html#replaceAmplitudePrivate",
        "fct-type": "unknown",
        "title": "replaceAmplitudePrivate"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Amplitude Signal",
        "module": "Synthesizer.Dimensional.Amplitude.Signal",
        "name": "replaceAmplitudePrivate",
        "normalized": "T a b-\u003eD a b c d-\u003eD a b c d",
        "package": "synthesizer",
        "partial": "Amplitude Private",
        "signature": "T v y-\u003eD v y sig yv-\u003eD v y sig yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Amplitude-Signal.html#v:replaceSamples",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Amplitude.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "sig1 yv1 -\u003e w (D v y sig0) yv0 -\u003e w (D v y (T sig1)) yv1",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Signal.html#replaceSamples",
        "fct-type": "unknown",
        "title": "replaceSamples"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Amplitude Signal",
        "module": "Synthesizer.Dimensional.Amplitude.Signal",
        "name": "replaceSamples",
        "normalized": "a b-\u003ec(D d e a)b-\u003ec(D d e(T a))b",
        "package": "synthesizer",
        "partial": "Samples",
        "signature": "sig yv-\u003ew(D v y sig)yv-\u003ew(D v y(T sig))yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Amplitude-Signal.html#v:replaceSamplesPrivate",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Amplitude.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "sig1 yv1 -\u003e D v y sig0 yv0 -\u003e D v y (T sig1) yv1",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Signal.html#replaceSamplesPrivate",
        "fct-type": "unknown",
        "title": "replaceSamplesPrivate"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Amplitude Signal",
        "module": "Synthesizer.Dimensional.Amplitude.Signal",
        "name": "replaceSamplesPrivate",
        "normalized": "a b-\u003eD c d a b-\u003eD c d(T a)b",
        "package": "synthesizer",
        "partial": "Samples Private",
        "signature": "sig yv-\u003eD v y sig yv-\u003eD v y(T sig)yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Amplitude-Signal.html#v:rewriteDimension",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Amplitude.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(v0 -\u003e v1) -\u003e D v0 y sig yv -\u003e D v1 y sig yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Signal.html#rewriteDimension",
        "fct-type": "unknown",
        "title": "rewriteDimension"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Amplitude Signal",
        "module": "Synthesizer.Dimensional.Amplitude.Signal",
        "name": "rewriteDimension",
        "normalized": "(a-\u003ea)-\u003eD a b c d-\u003eD a b c d",
        "package": "synthesizer",
        "partial": "Dimension",
        "signature": "(v-\u003ev)-\u003eD v y sig yv-\u003eD v y sig yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Amplitude-Signal.html#v:samples",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Amplitude.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "w (D v y (T sig)) yv -\u003e sig yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Signal.html#samples",
        "fct-type": "unknown",
        "title": "samples"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Amplitude Signal",
        "module": "Synthesizer.Dimensional.Amplitude.Signal",
        "name": "samples",
        "normalized": "a(D b c(T d))e-\u003ed e",
        "package": "synthesizer",
        "partial": "",
        "signature": "w(D v y(T sig))yv-\u003esig yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Amplitude-Signal.html#v:scalarSamples",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Amplitude.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(amp -\u003e y) -\u003e w (T amp S) y -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Signal.html#scalarSamples",
        "fct-type": "unknown",
        "title": "scalarSamples"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Amplitude Signal",
        "module": "Synthesizer.Dimensional.Amplitude.Signal",
        "name": "scalarSamples",
        "normalized": "(a-\u003eb)-\u003ec(T a S)b-\u003eT b",
        "package": "synthesizer",
        "partial": "Samples",
        "signature": "(amp-\u003ey)-\u003ew(T amp S)y-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Amplitude-Signal.html#v:scalarSamplesGeneric",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Amplitude.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(T v y -\u003e y) -\u003e w (D v y (T sig)) y -\u003e sig y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Signal.html#scalarSamplesGeneric",
        "fct-type": "unknown",
        "title": "scalarSamplesGeneric"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Amplitude Signal",
        "module": "Synthesizer.Dimensional.Amplitude.Signal",
        "name": "scalarSamplesGeneric",
        "normalized": "(T a b-\u003eb)-\u003ec(D a b(T d))b-\u003ed b",
        "package": "synthesizer",
        "partial": "Samples Generic",
        "signature": "(T v y-\u003ey)-\u003ew(D v y(T sig))y-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Amplitude-Signal.html#v:scalarSamplesPrivate",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Amplitude.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(amp -\u003e y) -\u003e T amp S y -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Signal.html#scalarSamplesPrivate",
        "fct-type": "unknown",
        "title": "scalarSamplesPrivate"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Amplitude Signal",
        "module": "Synthesizer.Dimensional.Amplitude.Signal",
        "name": "scalarSamplesPrivate",
        "normalized": "(a-\u003eb)-\u003eT a S b-\u003eT b",
        "package": "synthesizer",
        "partial": "Samples Private",
        "signature": "(amp-\u003ey)-\u003eT amp S y-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Amplitude-Signal.html#v:scalarSamplesPrivateGeneric",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Amplitude.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(T v y -\u003e y) -\u003e D v y (T sig) y -\u003e sig y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Signal.html#scalarSamplesPrivateGeneric",
        "fct-type": "unknown",
        "title": "scalarSamplesPrivateGeneric"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Amplitude Signal",
        "module": "Synthesizer.Dimensional.Amplitude.Signal",
        "name": "scalarSamplesPrivateGeneric",
        "normalized": "(T a b-\u003eb)-\u003eD a b(T c)b-\u003ec b",
        "package": "synthesizer",
        "partial": "Samples Private Generic",
        "signature": "(T v y-\u003ey)-\u003eD v y(T sig)y-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Amplitude-Signal.html#v:toAmplitudeScalar",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Amplitude.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "w (D v y sig) yv -\u003e T v y -\u003e y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Signal.html#toAmplitudeScalar",
        "fct-type": "unknown",
        "title": "toAmplitudeScalar"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Amplitude Signal",
        "module": "Synthesizer.Dimensional.Amplitude.Signal",
        "name": "toAmplitudeScalar",
        "normalized": "a(D b c d)e-\u003eT b c-\u003ec",
        "package": "synthesizer",
        "partial": "Amplitude Scalar",
        "signature": "w(D v y sig)yv-\u003eT v y-\u003ey"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Amplitude-Signal.html#v:toScalarSignal",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Amplitude.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T v y -\u003e w (S v y) y -\u003e w S y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Signal.html#toScalarSignal",
        "fct-type": "unknown",
        "title": "toScalarSignal"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Amplitude Signal",
        "module": "Synthesizer.Dimensional.Amplitude.Signal",
        "name": "toScalarSignal",
        "normalized": "T a b-\u003ec(S a b)b-\u003ec S b",
        "package": "synthesizer",
        "partial": "Scalar Signal",
        "signature": "T v y-\u003ew(S v y)y-\u003ew S y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Amplitude-Signal.html#v:toVectorSignal",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Amplitude.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T v y -\u003e w (S v y) yv -\u003e w S yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Signal.html#toVectorSignal",
        "fct-type": "unknown",
        "title": "toVectorSignal"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Amplitude Signal",
        "module": "Synthesizer.Dimensional.Amplitude.Signal",
        "name": "toVectorSignal",
        "normalized": "T a b-\u003ec(S a b)d-\u003ec S d",
        "package": "synthesizer",
        "partial": "Vector Signal",
        "signature": "T v y-\u003ew(S v y)yv-\u003ew S yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Amplitude-Signal.html#v:vectorSamples",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Amplitude.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(T v y -\u003e y) -\u003e w (S v y) yv -\u003e T yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Signal.html#vectorSamples",
        "fct-type": "unknown",
        "title": "vectorSamples"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Amplitude Signal",
        "module": "Synthesizer.Dimensional.Amplitude.Signal",
        "name": "vectorSamples",
        "normalized": "(T a b-\u003eb)-\u003ec(S a b)d-\u003eT d",
        "package": "synthesizer",
        "partial": "Samples",
        "signature": "(T v y-\u003ey)-\u003ew(S v y)yv-\u003eT yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Amplitude-Signal.html#v:vectorSamplesPrivate",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Amplitude.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(T v y -\u003e y) -\u003e S v y yv -\u003e T yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Signal.html#vectorSamplesPrivate",
        "fct-type": "unknown",
        "title": "vectorSamplesPrivate"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Amplitude Signal",
        "module": "Synthesizer.Dimensional.Amplitude.Signal",
        "name": "vectorSamplesPrivate",
        "normalized": "(T a b-\u003eb)-\u003eS a b c-\u003eT c",
        "package": "synthesizer",
        "partial": "Samples Private",
        "signature": "(T v y-\u003ey)-\u003eS v y yv-\u003eT yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Amplitude.html#t:Flat",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Amplitude",
        "fct-package": "synthesizer",
        "fct-signature": "data",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude.html#Flat",
        "fct-type": "unknown",
        "title": "Flat"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Amplitude",
        "module": "Synthesizer.Dimensional.Amplitude",
        "name": "Flat",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Flat",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Amplitude.html#v:C",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Amplitude",
        "fct-package": "synthesizer",
        "fct-signature": "class",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude.html#C",
        "fct-type": "unknown",
        "title": "C"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Amplitude",
        "module": "Synthesizer.Dimensional.Amplitude",
        "name": "C",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Arrow.html#v:",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Arrow",
        "fct-package": "synthesizer",
        "fct-signature": "arrow amp amp0 yv yv0 -\u003e arrow amp amp1 yv yv1 -\u003e arrow amp (amp0, amp1) yv (yv0, yv1)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Arrow.html#%26%26%26",
        "fct-type": "unknown",
        "title": ""
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Arrow",
        "module": "Synthesizer.Dimensional.Arrow",
        "name": "",
        "normalized": "a b b c c-\u003ea b b c c-\u003ea b(b,b)c(c,c)",
        "package": "synthesizer",
        "partial": "",
        "signature": "arrow amp amp yv yv-\u003earrow amp amp yv yv-\u003earrow amp(amp,amp)yv(yv,yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Arrow.html#v:***",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Arrow",
        "fct-package": "synthesizer",
        "fct-signature": "arrow amp0 amp1 yv0 yv1 -\u003e arrow amp2 amp3 yv2 yv3 -\u003e arrow (amp0, amp2) (amp1, amp3) (yv0, yv2) (yv1, yv3)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Arrow.html#%2A%2A%2A",
        "fct-type": "unknown",
        "title": "***"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Arrow",
        "module": "Synthesizer.Dimensional.Arrow",
        "name": "***",
        "normalized": "a b b c c-\u003ea b b c c-\u003ea(b,b)(b,b)(c,c)(c,c)",
        "package": "synthesizer",
        "partial": "",
        "signature": "arrow amp amp yv yv-\u003earrow amp amp yv yv-\u003earrow(amp,amp)(amp,amp)(yv,yv)(yv,yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Arrow.html#v:\u003c\u003c\u003c",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Arrow",
        "fct-package": "synthesizer",
        "fct-signature": "arrow amp1 amp2 yv1 yv2 -\u003e arrow amp0 amp1 yv0 yv1 -\u003e arrow amp0 amp2 yv0 yv2",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Arrow.html#%3C%3C%3C",
        "fct-type": "unknown",
        "title": "\u003c\u003c\u003c"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Arrow",
        "module": "Synthesizer.Dimensional.Arrow",
        "name": "\u003c\u003c\u003c",
        "normalized": "a b b c c-\u003ea b b c c-\u003ea b b c c",
        "package": "synthesizer",
        "partial": "",
        "signature": "arrow amp amp yv yv-\u003earrow amp amp yv yv-\u003earrow amp amp yv yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Arrow.html#v:\u003c\u003c^",
      "description": {
        "fct-descr": "Precomposition with a pure function (right-to-left variant).\n",
        "fct-module": "Synthesizer.Dimensional.Arrow",
        "fct-package": "synthesizer",
        "fct-signature": "arrow amp1 amp2 yv1 yv2 -\u003e T amp0 amp1 yv0 yv1 -\u003e arrow amp0 amp2 yv0 yv2",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Arrow.html#%3C%3C%5E",
        "fct-type": "unknown",
        "title": "\u003c\u003c^"
      },
      "index": {
        "description": "Precomposition with pure function right-to-left variant",
        "hierarchy": "Synthesizer Dimensional Arrow",
        "module": "Synthesizer.Dimensional.Arrow",
        "name": "\u003c\u003c^",
        "normalized": "a b b c c-\u003eT b b c c-\u003ea b b c c",
        "package": "synthesizer",
        "partial": "",
        "signature": "arrow amp amp yv yv-\u003eT amp amp yv yv-\u003earrow amp amp yv yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Arrow.html#v:\u003e\u003e\u003e",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Arrow",
        "fct-package": "synthesizer",
        "fct-signature": "arrow amp0 amp1 yv0 yv1 -\u003e arrow amp1 amp2 yv1 yv2 -\u003e arrow amp0 amp2 yv0 yv2",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Arrow.html#%3E%3E%3E",
        "fct-type": "unknown",
        "title": "\u003e\u003e\u003e"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Arrow",
        "module": "Synthesizer.Dimensional.Arrow",
        "name": "\u003e\u003e\u003e",
        "normalized": "a b b c c-\u003ea b b c c-\u003ea b b c c",
        "package": "synthesizer",
        "partial": "",
        "signature": "arrow amp amp yv yv-\u003earrow amp amp yv yv-\u003earrow amp amp yv yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Arrow.html#v:\u003e\u003e^",
      "description": {
        "fct-descr": "Postcomposition with a pure function.\n",
        "fct-module": "Synthesizer.Dimensional.Arrow",
        "fct-package": "synthesizer",
        "fct-signature": "arrow amp0 amp1 yv0 yv1 -\u003e T amp1 amp2 yv1 yv2 -\u003e arrow amp0 amp2 yv0 yv2",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Arrow.html#%3E%3E%5E",
        "fct-type": "unknown",
        "title": "\u003e\u003e^"
      },
      "index": {
        "description": "Postcomposition with pure function",
        "hierarchy": "Synthesizer Dimensional Arrow",
        "module": "Synthesizer.Dimensional.Arrow",
        "name": "\u003e\u003e^",
        "normalized": "a b b c c-\u003eT b b c c-\u003ea b b c c",
        "package": "synthesizer",
        "partial": "",
        "signature": "arrow amp amp yv yv-\u003eT amp amp yv yv-\u003earrow amp amp yv yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Arrow.html#v:C",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Arrow",
        "fct-package": "synthesizer",
        "fct-signature": "class",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Arrow.html#C",
        "fct-type": "unknown",
        "title": "C"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Arrow",
        "module": "Synthesizer.Dimensional.Arrow",
        "name": "C",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Arrow.html#v:^\u003c\u003c",
      "description": {
        "fct-descr": "Postcomposition with a pure function (right-to-left variant).\n",
        "fct-module": "Synthesizer.Dimensional.Arrow",
        "fct-package": "synthesizer",
        "fct-signature": "T amp1 amp2 yv1 yv2 -\u003e arrow amp0 amp1 yv0 yv1 -\u003e arrow amp0 amp2 yv0 yv2",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Arrow.html#%5E%3C%3C",
        "fct-type": "unknown",
        "title": "^\u003c\u003c"
      },
      "index": {
        "description": "Postcomposition with pure function right-to-left variant",
        "hierarchy": "Synthesizer Dimensional Arrow",
        "module": "Synthesizer.Dimensional.Arrow",
        "name": "^\u003c\u003c",
        "normalized": "T a a b b-\u003ec a a b b-\u003ec a a b b",
        "package": "synthesizer",
        "partial": "",
        "signature": "T amp amp yv yv-\u003earrow amp amp yv yv-\u003earrow amp amp yv yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Arrow.html#v:^\u003e\u003e",
      "description": {
        "fct-descr": "Precomposition with a pure function.\n",
        "fct-module": "Synthesizer.Dimensional.Arrow",
        "fct-package": "synthesizer",
        "fct-signature": "T amp0 amp1 yv0 yv1 -\u003e arrow amp1 amp2 yv1 yv2 -\u003e arrow amp0 amp2 yv0 yv2",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Arrow.html#%5E%3E%3E",
        "fct-type": "unknown",
        "title": "^\u003e\u003e"
      },
      "index": {
        "description": "Precomposition with pure function",
        "hierarchy": "Synthesizer Dimensional Arrow",
        "module": "Synthesizer.Dimensional.Arrow",
        "name": "^\u003e\u003e",
        "normalized": "T a a b b-\u003ec a a b b-\u003ec a a b b",
        "package": "synthesizer",
        "partial": "",
        "signature": "T amp amp yv yv-\u003earrow amp amp yv yv-\u003earrow amp amp yv yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Arrow.html#v:compose",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Arrow",
        "fct-package": "synthesizer",
        "fct-signature": "arrow amp0 amp1 yv0 yv1 -\u003e arrow amp1 amp2 yv1 yv2 -\u003e arrow amp0 amp2 yv0 yv2",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Arrow.html#compose",
        "fct-type": "unknown",
        "title": "compose"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Arrow",
        "module": "Synthesizer.Dimensional.Arrow",
        "name": "compose",
        "normalized": "a b b c c-\u003ea b b c c-\u003ea b b c c",
        "package": "synthesizer",
        "partial": "",
        "signature": "arrow amp amp yv yv-\u003earrow amp amp yv yv-\u003earrow amp amp yv yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Arrow.html#v:fanout",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Arrow",
        "fct-package": "synthesizer",
        "fct-signature": "arrow amp amp0 yv yv0 -\u003e arrow amp amp1 yv yv1 -\u003e arrow amp (amp0, amp1) yv (yv0, yv1)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Arrow.html#fanout",
        "fct-type": "unknown",
        "title": "fanout"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Arrow",
        "module": "Synthesizer.Dimensional.Arrow",
        "name": "fanout",
        "normalized": "a b b c c-\u003ea b b c c-\u003ea b(b,b)c(c,c)",
        "package": "synthesizer",
        "partial": "",
        "signature": "arrow amp amp yv yv-\u003earrow amp amp yv yv-\u003earrow amp(amp,amp)yv(yv,yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Arrow.html#v:first",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Arrow",
        "fct-package": "synthesizer",
        "fct-signature": "arrow amp0 amp1 yv0 yv1 -\u003e arrow (amp0, amp) (amp1, amp) (yv0, yv) (yv1, yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Arrow.html#first",
        "fct-type": "unknown",
        "title": "first"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Arrow",
        "module": "Synthesizer.Dimensional.Arrow",
        "name": "first",
        "normalized": "a b b c c-\u003ea(b,b)(b,b)(c,c)(c,c)",
        "package": "synthesizer",
        "partial": "",
        "signature": "arrow amp amp yv yv-\u003earrow(amp,amp)(amp,amp)(yv,yv)(yv,yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Arrow.html#v:map",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Arrow",
        "fct-package": "synthesizer",
        "fct-signature": "T amp0 amp1 yv0 yv1 -\u003e arrow amp0 amp1 yv0 yv1",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Arrow.html#map",
        "fct-type": "unknown",
        "title": "map"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Arrow",
        "module": "Synthesizer.Dimensional.Arrow",
        "name": "map",
        "normalized": "T a a b b-\u003ec a a b b",
        "package": "synthesizer",
        "partial": "",
        "signature": "T amp amp yv yv-\u003earrow amp amp yv yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Arrow.html#v:second",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Arrow",
        "fct-package": "synthesizer",
        "fct-signature": "arrow amp0 amp1 yv0 yv1 -\u003e arrow (amp, amp0) (amp, amp1) (yv, yv0) (yv, yv1)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Arrow.html#second",
        "fct-type": "unknown",
        "title": "second"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Arrow",
        "module": "Synthesizer.Dimensional.Arrow",
        "name": "second",
        "normalized": "a b b c c-\u003ea(b,b)(b,b)(c,c)(c,c)",
        "package": "synthesizer",
        "partial": "",
        "signature": "arrow amp amp yv yv-\u003earrow(amp,amp)(amp,amp)(yv,yv)(yv,yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Arrow.html#v:split",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Arrow",
        "fct-package": "synthesizer",
        "fct-signature": "arrow amp0 amp1 yv0 yv1 -\u003e arrow amp2 amp3 yv2 yv3 -\u003e arrow (amp0, amp2) (amp1, amp3) (yv0, yv2) (yv1, yv3)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Arrow.html#split",
        "fct-type": "unknown",
        "title": "split"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Arrow",
        "module": "Synthesizer.Dimensional.Arrow",
        "name": "split",
        "normalized": "a b b c c-\u003ea b b c c-\u003ea(b,b)(b,b)(c,c)(c,c)",
        "package": "synthesizer",
        "partial": "",
        "signature": "arrow amp amp yv yv-\u003earrow amp amp yv yv-\u003earrow(amp,amp)(amp,amp)(yv,yv)(yv,yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-ControlledProcess.html#t:Converter",
      "description": {
        "fct-descr": "\u003ctt\u003eecAmp\u003c/tt\u003e is a set of physical units for the external control parameters,\n\u003ctt\u003eec\u003c/tt\u003e is the type for the external control parameters,\n\u003ctt\u003eic\u003c/tt\u003e for internal control parameters.\n",
        "fct-module": "Synthesizer.Dimensional.Causal.ControlledProcess",
        "fct-package": "synthesizer",
        "fct-signature": "type",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-ControlledProcess.html#Converter",
        "fct-type": "unknown",
        "title": "Converter"
      },
      "index": {
        "description": "ecAmp is set of physical units for the external control parameters ec is the type for the external control parameters ic for internal control parameters",
        "hierarchy": "Synthesizer Dimensional Causal ControlledProcess",
        "module": "Synthesizer.Dimensional.Causal.ControlledProcess",
        "name": "Converter",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Converter",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-ControlledProcess.html#t:RateDep",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Causal.ControlledProcess",
        "fct-package": "synthesizer",
        "fct-signature": "newtype",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-ControlledProcess.html#RateDep",
        "fct-type": "unknown",
        "title": "RateDep"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Causal ControlledProcess",
        "module": "Synthesizer.Dimensional.Causal.ControlledProcess",
        "name": "RateDep",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Rate Dep",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-ControlledProcess.html#t:T",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Causal.ControlledProcess",
        "fct-package": "synthesizer",
        "fct-signature": "data",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-ControlledProcess.html#T",
        "fct-type": "unknown",
        "title": "T"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Causal ControlledProcess",
        "module": "Synthesizer.Dimensional.Causal.ControlledProcess",
        "name": "T",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-ControlledProcess.html#v:applyConverter1",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Causal.ControlledProcess",
        "fct-package": "synthesizer",
        "fct-signature": "Converter s (T v ecAmp) ec ic -\u003e R s v ecAmp ec -\u003e R s (RateDep s ic)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-ControlledProcess.html#applyConverter1",
        "fct-type": "unknown",
        "title": "applyConverter1"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Causal ControlledProcess",
        "module": "Synthesizer.Dimensional.Causal.ControlledProcess",
        "name": "applyConverter1",
        "normalized": "Converter a(T b c)d e-\u003eR a b c d-\u003eR a(RateDep a e)",
        "package": "synthesizer",
        "partial": "Converter",
        "signature": "Converter s(T v ecAmp)ec ic-\u003eR s v ecAmp ec-\u003eR s(RateDep s ic)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-ControlledProcess.html#v:applyConverter2",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Causal.ControlledProcess",
        "fct-package": "synthesizer",
        "fct-signature": "Converter s (T v0 ecAmp0, T v1 ecAmp1) (ec0, ec1) ic -\u003e R s v0 ecAmp0 ec0 -\u003e R s v1 ecAmp1 ec1 -\u003e R s (RateDep s ic)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-ControlledProcess.html#applyConverter2",
        "fct-type": "unknown",
        "title": "applyConverter2"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Causal ControlledProcess",
        "module": "Synthesizer.Dimensional.Causal.ControlledProcess",
        "name": "applyConverter2",
        "normalized": "Converter a(T b c,T b c)(d,d)e-\u003eR a b c d-\u003eR a b c d-\u003eR a(RateDep a e)",
        "package": "synthesizer",
        "partial": "Converter",
        "signature": "Converter s(T v ecAmp,T v ecAmp)(ec,ec)ic-\u003eR s v ecAmp ec-\u003eR s v ecAmp ec-\u003eR s(RateDep s ic)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-ControlledProcess.html#v:causalFromConverter",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Causal.ControlledProcess",
        "fct-package": "synthesizer",
        "fct-signature": "Converter s ecAmp ec ic -\u003e T s ecAmp Flat ec (RateDep s ic)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-ControlledProcess.html#causalFromConverter",
        "fct-type": "unknown",
        "title": "causalFromConverter"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Causal ControlledProcess",
        "module": "Synthesizer.Dimensional.Causal.ControlledProcess",
        "name": "causalFromConverter",
        "normalized": "Converter a b c d-\u003eT a b Flat c(RateDep a d)",
        "package": "synthesizer",
        "partial": "From Converter",
        "signature": "Converter s ecAmp ec ic-\u003eT s ecAmp Flat ec(RateDep s ic)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-ControlledProcess.html#v:joinFirstSynchronous",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Causal.ControlledProcess",
        "fct-package": "synthesizer",
        "fct-signature": "T s u t (T (Converter s ecAmp ec ic, a) (T s (ampIn, Flat) ampOut (sampIn, RateDep s ic) sampOut)) -\u003e T s u t (T a (T s (ecAmp, ampIn) ampOut (ec, sampIn) sampOut))",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-ControlledProcess.html#joinFirstSynchronous",
        "fct-type": "unknown",
        "title": "joinFirstSynchronous"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Causal ControlledProcess",
        "module": "Synthesizer.Dimensional.Causal.ControlledProcess",
        "name": "joinFirstSynchronous",
        "normalized": "T a b c(T(Converter a d e f,g)(T a(h,Flat)i(j,RateDep a f)k))-\u003eT a b c(T g(T a(d,h)i(e,j)k))",
        "package": "synthesizer",
        "partial": "First Synchronous",
        "signature": "T s u t(T(Converter s ecAmp ec ic,a)(T s(ampIn,Flat)ampOut(sampIn,RateDep s ic)sampOut))-\u003eT s u t(T a(T s(ecAmp,ampIn)ampOut(ec,sampIn)sampOut))"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-ControlledProcess.html#v:joinFirstSynchronousPlain",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Causal.ControlledProcess",
        "fct-package": "synthesizer",
        "fct-signature": "T (Converter s ecAmp ec ic, a) (T s (ampIn, Flat) ampOut (sampIn, RateDep s ic) sampOut) -\u003e T a (T s (ecAmp, ampIn) ampOut (ec, sampIn) sampOut)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-ControlledProcess.html#joinFirstSynchronousPlain",
        "fct-type": "unknown",
        "title": "joinFirstSynchronousPlain"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Causal ControlledProcess",
        "module": "Synthesizer.Dimensional.Causal.ControlledProcess",
        "name": "joinFirstSynchronousPlain",
        "normalized": "T(Converter a b c d,e)(T a(f,Flat)g(h,RateDep a d)i)-\u003eT e(T a(b,f)g(c,h)i)",
        "package": "synthesizer",
        "partial": "First Synchronous Plain",
        "signature": "T(Converter s ecAmp ec ic,a)(T s(ampIn,Flat)ampOut(sampIn,RateDep s ic)sampOut)-\u003eT a(T s(ecAmp,ampIn)ampOut(ec,sampIn)sampOut)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-ControlledProcess.html#v:joinSynchronous",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Causal.ControlledProcess",
        "fct-package": "synthesizer",
        "fct-signature": "T s u t (T (Converter s ecAmp ec ic) (T s (ampIn, Flat) ampOut (sampIn, RateDep s ic) sampOut)) -\u003e T s u t (T s (ecAmp, ampIn) ampOut (ec, sampIn) sampOut)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-ControlledProcess.html#joinSynchronous",
        "fct-type": "unknown",
        "title": "joinSynchronous"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Causal ControlledProcess",
        "module": "Synthesizer.Dimensional.Causal.ControlledProcess",
        "name": "joinSynchronous",
        "normalized": "T a b c(T(Converter a d e f)(T a(g,Flat)h(i,RateDep a f)j))-\u003eT a b c(T a(d,g)h(e,i)j)",
        "package": "synthesizer",
        "partial": "Synchronous",
        "signature": "T s u t(T(Converter s ecAmp ec ic)(T s(ampIn,Flat)ampOut(sampIn,RateDep s ic)sampOut))-\u003eT s u t(T s(ecAmp,ampIn)ampOut(ec,sampIn)sampOut)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-ControlledProcess.html#v:joinSynchronousPlain",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Causal.ControlledProcess",
        "fct-package": "synthesizer",
        "fct-signature": "T (Converter s ecAmp ec ic) (T s (ampIn, Flat) ampOut (sampIn, RateDep s ic) sampOut) -\u003e T s (ecAmp, ampIn) ampOut (ec, sampIn) sampOut",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-ControlledProcess.html#joinSynchronousPlain",
        "fct-type": "unknown",
        "title": "joinSynchronousPlain"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Causal ControlledProcess",
        "module": "Synthesizer.Dimensional.Causal.ControlledProcess",
        "name": "joinSynchronousPlain",
        "normalized": "T(Converter a b c d)(T a(e,Flat)f(g,RateDep a d)h)-\u003eT a(b,e)f(c,g)h",
        "package": "synthesizer",
        "partial": "Synchronous Plain",
        "signature": "T(Converter s ecAmp ec ic)(T s(ampIn,Flat)ampOut(sampIn,RateDep s ic)sampOut)-\u003eT s(ecAmp,ampIn)ampOut(ec,sampIn)sampOut"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-ControlledProcess.html#v:makeConverter",
      "description": {
        "fct-descr": "This function is intended for implementing high-level dimensional processors\nfrom low-level processors.\nIt introduces the sample rate tag \u003ctt\u003es\u003c/tt\u003e.\n",
        "fct-module": "Synthesizer.Dimensional.Causal.ControlledProcess",
        "fct-package": "synthesizer",
        "fct-signature": "(ecAmp -\u003e ec -\u003e ic) -\u003e Converter s ecAmp ec ic",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-ControlledProcess.html#makeConverter",
        "fct-type": "unknown",
        "title": "makeConverter"
      },
      "index": {
        "description": "This function is intended for implementing high-level dimensional processors from low-level processors It introduces the sample rate tag",
        "hierarchy": "Synthesizer Dimensional Causal ControlledProcess",
        "module": "Synthesizer.Dimensional.Causal.ControlledProcess",
        "name": "makeConverter",
        "normalized": "(a-\u003eb-\u003ec)-\u003eConverter d a b c",
        "package": "synthesizer",
        "partial": "Converter",
        "signature": "(ecAmp-\u003eec-\u003eic)-\u003eConverter s ecAmp ec ic"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-ControlledProcess.html#v:processAsynchronous1",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Causal.ControlledProcess",
        "fct-package": "synthesizer",
        "fct-signature": "T t (RateDep s ic) -\u003e T s u t (T (Converter s (T v ecAmp) ec ic) (T s (ampIn, Flat) ampOut (sampIn, RateDep s ic) sampOut)) -\u003e T (Recip u) t -\u003e (forall r.  T r u t (R r v ecAmp ec)) -\u003e T s u t (T s ampIn ampOut sampIn sampOut)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-ControlledProcess.html#processAsynchronous1",
        "fct-type": "unknown",
        "title": "processAsynchronous1"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Causal ControlledProcess",
        "module": "Synthesizer.Dimensional.Causal.ControlledProcess",
        "name": "processAsynchronous1",
        "normalized": "T a(RateDep b c)-\u003eT b d a(T(Converter b(T e f)g c)(T b(h,Flat)i(j,RateDep b c)k))-\u003eT(Recip d)a-\u003e(l m T n d a(R n e f g))-\u003eT b d a(T b h i j k)",
        "package": "synthesizer",
        "partial": "Asynchronous",
        "signature": "T t(RateDep s ic)-\u003eT s u t(T(Converter s(T v ecAmp)ec ic)(T s(ampIn,Flat)ampOut(sampIn,RateDep s ic)sampOut))-\u003eT(Recip u)t-\u003e(forall r. T r u t(R r v ecAmp ec))-\u003eT s u t(T s ampIn ampOut sampIn sampOut)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-ControlledProcess.html#v:processAsynchronous2",
      "description": {
        "fct-descr": "This function will be more commonly used than \u003ctt\u003e\u003ca\u003erunAsynchronous2\u003c/a\u003e\u003c/tt\u003e,\nbut it disallows sharing of control signals.\nIt can be easily defined in terms of \u003ctt\u003e\u003ca\u003erunAsynchronous2\u003c/a\u003e\u003c/tt\u003e and \u003ctt\u003e\u003ca\u003erunProcess\u003c/a\u003e\u003c/tt\u003e,\nbut the implementation here does not need the check for equal sample rates.\n",
        "fct-module": "Synthesizer.Dimensional.Causal.ControlledProcess",
        "fct-package": "synthesizer",
        "fct-signature": "T t (RateDep s ic) -\u003e T s u t (T (Converter s (T v0 ecAmp0, T v1 ecAmp1) (ec0, ec1) ic) (T s (ampIn, Flat) ampOut (sampIn, RateDep s ic) sampOut)) -\u003e T (Recip u) t -\u003e (forall r.  T r u t (R r v0 ecAmp0 ec0)) -\u003e (forall r.  T r u t (R r v1 ecAmp1 ec1)) -\u003e T s u t (T s ampIn ampOut sampIn sampOut)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-ControlledProcess.html#processAsynchronous2",
        "fct-type": "unknown",
        "title": "processAsynchronous2"
      },
      "index": {
        "description": "This function will be more commonly used than runAsynchronous2 but it disallows sharing of control signals It can be easily defined in terms of runAsynchronous2 and runProcess but the implementation here does not need the check for equal sample rates",
        "hierarchy": "Synthesizer Dimensional Causal ControlledProcess",
        "module": "Synthesizer.Dimensional.Causal.ControlledProcess",
        "name": "processAsynchronous2",
        "normalized": "T a(RateDep b c)-\u003eT b d a(T(Converter b(T e f,T e f)(g,g)c)(T b(h,Flat)i(j,RateDep b c)k))-\u003eT(Recip d)a-\u003e(l m T n d a(R n e f g))-\u003e(l m T n d a(R n e f g))-\u003eT b d a(T b h i j k)",
        "package": "synthesizer",
        "partial": "Asynchronous",
        "signature": "T t(RateDep s ic)-\u003eT s u t(T(Converter s(T v ecAmp,T v ecAmp)(ec,ec)ic)(T s(ampIn,Flat)ampOut(sampIn,RateDep s ic)sampOut))-\u003eT(Recip u)t-\u003e(forall r. T r u t(R r v ecAmp ec))-\u003e(forall r. T r u t(R r v ecAmp ec))-\u003eT s u t(T s ampIn ampOut sampIn sampOut)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-ControlledProcess.html#v:processAsynchronousBuffered2",
      "description": {
        "fct-descr": "\u003cp\u003eThis buffers internal control parameters before interpolation.\nThis should be faster, since interpolation needs frequent look-ahead,\nand this is faster on a buffered signal than on a plain stateful signal generator.\n\u003c/p\u003e\u003cp\u003eSince the look-ahead is constant,\nit is interesting whether interpolation can be made more efficient\nwithout the inefficient intermediate list structure.\n\u003c/p\u003e",
        "fct-module": "Synthesizer.Dimensional.Causal.ControlledProcess",
        "fct-package": "synthesizer",
        "fct-signature": "T t (RateDep s ic) -\u003e T s u t (T (Converter s (T v0 ecAmp0, T v1 ecAmp1) (ec0, ec1) ic) (T s (ampIn, Flat) ampOut (sampIn, RateDep s ic) sampOut)) -\u003e T (Recip u) t -\u003e (forall r.  T r u t (R r v0 ecAmp0 ec0)) -\u003e (forall r.  T r u t (R r v1 ecAmp1 ec1)) -\u003e T s u t (T s ampIn ampOut sampIn sampOut)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-ControlledProcess.html#processAsynchronousBuffered2",
        "fct-type": "unknown",
        "title": "processAsynchronousBuffered2"
      },
      "index": {
        "description": "This buffers internal control parameters before interpolation This should be faster since interpolation needs frequent look-ahead and this is faster on buffered signal than on plain stateful signal generator Since the look-ahead is constant it is interesting whether interpolation can be made more efficient without the inefficient intermediate list structure",
        "hierarchy": "Synthesizer Dimensional Causal ControlledProcess",
        "module": "Synthesizer.Dimensional.Causal.ControlledProcess",
        "name": "processAsynchronousBuffered2",
        "normalized": "T a(RateDep b c)-\u003eT b d a(T(Converter b(T e f,T e f)(g,g)c)(T b(h,Flat)i(j,RateDep b c)k))-\u003eT(Recip d)a-\u003e(l m T n d a(R n e f g))-\u003e(l m T n d a(R n e f g))-\u003eT b d a(T b h i j k)",
        "package": "synthesizer",
        "partial": "Asynchronous Buffered",
        "signature": "T t(RateDep s ic)-\u003eT s u t(T(Converter s(T v ecAmp,T v ecAmp)(ec,ec)ic)(T s(ampIn,Flat)ampOut(sampIn,RateDep s ic)sampOut))-\u003eT(Recip u)t-\u003e(forall r. T r u t(R r v ecAmp ec))-\u003e(forall r. T r u t(R r v ecAmp ec))-\u003eT s u t(T s ampIn ampOut sampIn sampOut)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-ControlledProcess.html#v:processAsynchronousNaive2",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Causal.ControlledProcess",
        "fct-package": "synthesizer",
        "fct-signature": "T t (RateDep s ic) -\u003e T s u t (T (Converter s (T v0 ecAmp0, T v1 ecAmp1) (ec0, ec1) ic) (T s (ampIn, Flat) ampOut (sampIn, RateDep s ic) sampOut)) -\u003e T (Recip u) t -\u003e (forall r.  T r u t (R r v0 ecAmp0 ec0)) -\u003e (forall r.  T r u t (R r v1 ecAmp1 ec1)) -\u003e T s u t (T s ampIn ampOut sampIn sampOut)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-ControlledProcess.html#processAsynchronousNaive2",
        "fct-type": "unknown",
        "title": "processAsynchronousNaive2"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Causal ControlledProcess",
        "module": "Synthesizer.Dimensional.Causal.ControlledProcess",
        "name": "processAsynchronousNaive2",
        "normalized": "T a(RateDep b c)-\u003eT b d a(T(Converter b(T e f,T e f)(g,g)c)(T b(h,Flat)i(j,RateDep b c)k))-\u003eT(Recip d)a-\u003e(l m T n d a(R n e f g))-\u003e(l m T n d a(R n e f g))-\u003eT b d a(T b h i j k)",
        "package": "synthesizer",
        "partial": "Asynchronous Naive",
        "signature": "T t(RateDep s ic)-\u003eT s u t(T(Converter s(T v ecAmp,T v ecAmp)(ec,ec)ic)(T s(ampIn,Flat)ampOut(sampIn,RateDep s ic)sampOut))-\u003eT(Recip u)t-\u003e(forall r. T r u t(R r v ecAmp ec))-\u003e(forall r. T r u t(R r v ecAmp ec))-\u003eT s u t(T s ampIn ampOut sampIn sampOut)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-ControlledProcess.html#v:runAsynchronous",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Causal.ControlledProcess",
        "fct-package": "synthesizer",
        "fct-signature": "T t (RateDep s ic) -\u003e T s u t (T (Converter s ecAmp ec ic) (T s (ampIn, Flat) ampOut (sampIn, RateDep s ic) sampOut)) -\u003e T r u t -\u003e R r (RateDep s ic) -\u003e T s u t (T s ampIn ampOut sampIn sampOut)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-ControlledProcess.html#runAsynchronous",
        "fct-type": "unknown",
        "title": "runAsynchronous"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Causal ControlledProcess",
        "module": "Synthesizer.Dimensional.Causal.ControlledProcess",
        "name": "runAsynchronous",
        "normalized": "T a(RateDep b c)-\u003eT b d a(T(Converter b e f c)(T b(g,Flat)h(i,RateDep b c)j))-\u003eT k d a-\u003eR k(RateDep b c)-\u003eT b d a(T b g h i j)",
        "package": "synthesizer",
        "partial": "Asynchronous",
        "signature": "T t(RateDep s ic)-\u003eT s u t(T(Converter s ecAmp ec ic)(T s(ampIn,Flat)ampOut(sampIn,RateDep s ic)sampOut))-\u003eT r u t-\u003eR r(RateDep s ic)-\u003eT s u t(T s ampIn ampOut sampIn sampOut)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-ControlledProcess.html#v:runAsynchronous1",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Causal.ControlledProcess",
        "fct-package": "synthesizer",
        "fct-signature": "T t (RateDep s ic) -\u003e T s u t (T (Converter s (T v ecAmp) ec ic) (T s (ampIn, Flat) ampOut (sampIn, RateDep s ic) sampOut)) -\u003e T u t (S v ecAmp) ec -\u003e T s u t (T s ampIn ampOut sampIn sampOut)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-ControlledProcess.html#runAsynchronous1",
        "fct-type": "unknown",
        "title": "runAsynchronous1"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Causal ControlledProcess",
        "module": "Synthesizer.Dimensional.Causal.ControlledProcess",
        "name": "runAsynchronous1",
        "normalized": "T a(RateDep b c)-\u003eT b d a(T(Converter b(T e f)g c)(T b(h,Flat)i(j,RateDep b c)k))-\u003eT d a(S e f)g-\u003eT b d a(T b h i j k)",
        "package": "synthesizer",
        "partial": "Asynchronous",
        "signature": "T t(RateDep s ic)-\u003eT s u t(T(Converter s(T v ecAmp)ec ic)(T s(ampIn,Flat)ampOut(sampIn,RateDep s ic)sampOut))-\u003eT u t(S v ecAmp)ec-\u003eT s u t(T s ampIn ampOut sampIn sampOut)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-ControlledProcess.html#v:runAsynchronous2",
      "description": {
        "fct-descr": "Using two SigP.T's as input has the disadvantage\nthat their rates must be compared dynamically.\nIt is not possible with our data structures\nto use one rate for multiple signals.\nWe could also allow the input of a Rate.T and two Proc.T's,\nsince this is the form we get from the computation routines.\nBut this way we lose sharing.\n",
        "fct-module": "Synthesizer.Dimensional.Causal.ControlledProcess",
        "fct-package": "synthesizer",
        "fct-signature": "T t (RateDep s ic) -\u003e T s u t (T (Converter s (T v0 ecAmp0, T v1 ecAmp1) (ec0, ec1) ic) (T s (ampIn, Flat) ampOut (sampIn, RateDep s ic) sampOut)) -\u003e T u t (S v0 ecAmp0) ec0 -\u003e T u t (S v1 ecAmp1) ec1 -\u003e T s u t (T s ampIn ampOut sampIn sampOut)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-ControlledProcess.html#runAsynchronous2",
        "fct-type": "unknown",
        "title": "runAsynchronous2"
      },
      "index": {
        "description": "Using two SigP.T as input has the disadvantage that their rates must be compared dynamically It is not possible with our data structures to use one rate for multiple signals We could also allow the input of Rate.T and two Proc.T since this is the form we get from the computation routines But this way we lose sharing",
        "hierarchy": "Synthesizer Dimensional Causal ControlledProcess",
        "module": "Synthesizer.Dimensional.Causal.ControlledProcess",
        "name": "runAsynchronous2",
        "normalized": "T a(RateDep b c)-\u003eT b d a(T(Converter b(T e f,T e f)(g,g)c)(T b(h,Flat)i(j,RateDep b c)k))-\u003eT d a(S e f)g-\u003eT d a(S e f)g-\u003eT b d a(T b h i j k)",
        "package": "synthesizer",
        "partial": "Asynchronous",
        "signature": "T t(RateDep s ic)-\u003eT s u t(T(Converter s(T v ecAmp,T v ecAmp)(ec,ec)ic)(T s(ampIn,Flat)ampOut(sampIn,RateDep s ic)sampOut))-\u003eT u t(S v ecAmp)ec-\u003eT u t(S v ecAmp)ec-\u003eT s u t(T s ampIn ampOut sampIn sampOut)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-ControlledProcess.html#v:runAsynchronousBuffered",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Causal.ControlledProcess",
        "fct-package": "synthesizer",
        "fct-signature": "T t (RateDep s ic) -\u003e T s u t (T (Converter s ecAmp ec ic) (T s (ampIn, Flat) ampOut (sampIn, RateDep s ic) sampOut)) -\u003e T r u t -\u003e R r (RateDep s ic) -\u003e T s u t (T s ampIn ampOut sampIn sampOut)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-ControlledProcess.html#runAsynchronousBuffered",
        "fct-type": "unknown",
        "title": "runAsynchronousBuffered"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Causal ControlledProcess",
        "module": "Synthesizer.Dimensional.Causal.ControlledProcess",
        "name": "runAsynchronousBuffered",
        "normalized": "T a(RateDep b c)-\u003eT b d a(T(Converter b e f c)(T b(g,Flat)h(i,RateDep b c)j))-\u003eT k d a-\u003eR k(RateDep b c)-\u003eT b d a(T b g h i j)",
        "package": "synthesizer",
        "partial": "Asynchronous Buffered",
        "signature": "T t(RateDep s ic)-\u003eT s u t(T(Converter s ecAmp ec ic)(T s(ampIn,Flat)ampOut(sampIn,RateDep s ic)sampOut))-\u003eT r u t-\u003eR r(RateDep s ic)-\u003eT s u t(T s ampIn ampOut sampIn sampOut)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-ControlledProcess.html#v:runSynchronous1",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Causal.ControlledProcess",
        "fct-package": "synthesizer",
        "fct-signature": "T s u t (T (Converter s (T v ecAmp) ec ic) (T s (ampIn, Flat) ampOut (sampIn, RateDep s ic) sampOut)) -\u003e T s u t (R s v ecAmp ec -\u003e T s ampIn ampOut sampIn sampOut)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-ControlledProcess.html#runSynchronous1",
        "fct-type": "unknown",
        "title": "runSynchronous1"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Causal ControlledProcess",
        "module": "Synthesizer.Dimensional.Causal.ControlledProcess",
        "name": "runSynchronous1",
        "normalized": "T a b c(T(Converter a(T d e)f g)(T a(h,Flat)i(j,RateDep a g)k))-\u003eT a b c(R a d e f-\u003eT a h i j k)",
        "package": "synthesizer",
        "partial": "Synchronous",
        "signature": "T s u t(T(Converter s(T v ecAmp)ec ic)(T s(ampIn,Flat)ampOut(sampIn,RateDep s ic)sampOut))-\u003eT s u t(R s v ecAmp ec-\u003eT s ampIn ampOut sampIn sampOut)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-ControlledProcess.html#v:runSynchronous2",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Causal.ControlledProcess",
        "fct-package": "synthesizer",
        "fct-signature": "T s u t (T (Converter s (T v0 ecAmp0, T v1 ecAmp1) (ec0, ec1) ic) (T s (ampIn, Flat) ampOut (sampIn, RateDep s ic) sampOut)) -\u003e T s u t (R s v0 ecAmp0 ec0 -\u003e R s v1 ecAmp1 ec1 -\u003e T s ampIn ampOut sampIn sampOut)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-ControlledProcess.html#runSynchronous2",
        "fct-type": "unknown",
        "title": "runSynchronous2"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Causal ControlledProcess",
        "module": "Synthesizer.Dimensional.Causal.ControlledProcess",
        "name": "runSynchronous2",
        "normalized": "T a b c(T(Converter a(T d e,T d e)(f,f)g)(T a(h,Flat)i(j,RateDep a g)k))-\u003eT a b c(R a d e f-\u003eR a d e f-\u003eT a h i j k)",
        "package": "synthesizer",
        "partial": "Synchronous",
        "signature": "T s u t(T(Converter s(T v ecAmp,T v ecAmp)(ec,ec)ic)(T s(ampIn,Flat)ampOut(sampIn,RateDep s ic)sampOut))-\u003eT s u t(R s v ecAmp ec-\u003eR s v ecAmp ec-\u003eT s ampIn ampOut sampIn sampOut)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-ControlledProcess.html#v:runSynchronousPlain2",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Causal.ControlledProcess",
        "fct-package": "synthesizer",
        "fct-signature": "T (Converter s (T v0 ecAmp0, T v1 ecAmp1) (ec0, ec1) ic) (T s (ampIn, Flat) ampOut (sampIn, RateDep s ic) sampOut) -\u003e R s v0 ecAmp0 ec0 -\u003e R s v1 ecAmp1 ec1 -\u003e T s ampIn ampOut sampIn sampOut",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-ControlledProcess.html#runSynchronousPlain2",
        "fct-type": "unknown",
        "title": "runSynchronousPlain2"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Causal ControlledProcess",
        "module": "Synthesizer.Dimensional.Causal.ControlledProcess",
        "name": "runSynchronousPlain2",
        "normalized": "T(Converter a(T b c,T b c)(d,d)e)(T a(f,Flat)g(h,RateDep a e)i)-\u003eR a b c d-\u003eR a b c d-\u003eT a f g h i",
        "package": "synthesizer",
        "partial": "Synchronous Plain",
        "signature": "T(Converter s(T v ecAmp,T v ecAmp)(ec,ec)ic)(T s(ampIn,Flat)ampOut(sampIn,RateDep s ic)sampOut)-\u003eR s v ecAmp ec-\u003eR s v ecAmp ec-\u003eT s ampIn ampOut sampIn sampOut"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Displacement.html#v:distort",
      "description": {
        "fct-descr": "Distort the signal using a flat function.\nThe first signal gives the scaling of the function.\nIf the scaling is c and the input sample is y,\nthen \u003ctt\u003ec * f(y/c)\u003c/tt\u003e is output.\nThis way we can use an (efficient) flat function\nand have a simple, yet dimension conform, way of controlling the distortion.\nE.g. if the distortion function is \u003ctt\u003etanh\u003c/tt\u003e\nthen the value \u003ctt\u003ec\u003c/tt\u003e controls the saturation level.\n",
        "fct-module": "Synthesizer.Dimensional.Causal.Displacement",
        "fct-package": "synthesizer",
        "fct-signature": "(yv -\u003e yv) -\u003e T s u t (T s (T v y, T v y) (T v y) (y, yv) yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Displacement.html#distort",
        "fct-type": "unknown",
        "title": "distort"
      },
      "index": {
        "description": "Distort the signal using flat function The first signal gives the scaling of the function If the scaling is and the input sample is then is output This way we can use an efficient flat function and have simple yet dimension conform way of controlling the distortion E.g if the distortion function is tanh then the value controls the saturation level",
        "hierarchy": "Synthesizer Dimensional Causal Displacement",
        "module": "Synthesizer.Dimensional.Causal.Displacement",
        "name": "distort",
        "normalized": "(a-\u003ea)-\u003eT b c d(T b(T e f,T e f)(T e f)(f,a)a)",
        "package": "synthesizer",
        "partial": "",
        "signature": "(yv-\u003eyv)-\u003eT s u t(T s(T v y,T v y)(T v y)(y,yv)yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Displacement.html#v:fanoutAndMixMulti",
      "description": {
        "fct-descr": "Mix one or more signals.\n",
        "fct-module": "Synthesizer.Dimensional.Causal.Displacement",
        "fct-package": "synthesizer",
        "fct-signature": "[T s u t (T s ampIn (T v y) yvIn yv)] -\u003e T s u t (T s ampIn (T v y) yvIn yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Displacement.html#fanoutAndMixMulti",
        "fct-type": "unknown",
        "title": "fanoutAndMixMulti"
      },
      "index": {
        "description": "Mix one or more signals",
        "hierarchy": "Synthesizer Dimensional Causal Displacement",
        "module": "Synthesizer.Dimensional.Causal.Displacement",
        "name": "fanoutAndMixMulti",
        "normalized": "[T a b c(T a d(T e f)g h)]-\u003eT a b c(T a d(T e f)g h)",
        "package": "synthesizer",
        "partial": "And Mix Multi",
        "signature": "[T s u t(T s ampIn(T v y)yvIn yv)]-\u003eT s u t(T s ampIn(T v y)yvIn yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Displacement.html#v:fanoutAndMixMultiVolume",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Causal.Displacement",
        "fct-package": "synthesizer",
        "fct-signature": "T v y -\u003e [T s u t (T s ampIn (T v y) yvIn yv)] -\u003e T s u t (T s ampIn (T v y) yvIn yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Displacement.html#fanoutAndMixMultiVolume",
        "fct-type": "unknown",
        "title": "fanoutAndMixMultiVolume"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Causal Displacement",
        "module": "Synthesizer.Dimensional.Causal.Displacement",
        "name": "fanoutAndMixMultiVolume",
        "normalized": "T a b-\u003e[T c d e(T c f(T a b)g h)]-\u003eT c d e(T c f(T a b)g h)",
        "package": "synthesizer",
        "partial": "And Mix Multi Volume",
        "signature": "T v y-\u003e[T s u t(T s ampIn(T v y)yvIn yv)]-\u003eT s u t(T s ampIn(T v y)yvIn yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Displacement.html#v:mix",
      "description": {
        "fct-descr": "Mix two signals.\nIn contrast to \u003ctt\u003e\u003ca\u003ezipWith\u003c/a\u003e\u003c/tt\u003e the result has the length of the longer signal.\n",
        "fct-module": "Synthesizer.Dimensional.Causal.Displacement",
        "fct-package": "synthesizer",
        "fct-signature": "T s u t (T s (T v y, T v y) (T v y) (yv, yv) yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Displacement.html#mix",
        "fct-type": "unknown",
        "title": "mix"
      },
      "index": {
        "description": "Mix two signals In contrast to zipWith the result has the length of the longer signal",
        "hierarchy": "Synthesizer Dimensional Causal Displacement",
        "module": "Synthesizer.Dimensional.Causal.Displacement",
        "name": "mix",
        "normalized": "T a b c(T a(T d e,T d e)(T d e)(f,f)f)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T s u t(T s(T v y,T v y)(T v y)(yv,yv)yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Displacement.html#v:mixVolume",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Causal.Displacement",
        "fct-package": "synthesizer",
        "fct-signature": "T v y -\u003e T s u t (T s (T v y, T v y) (T v y) (yv, yv) yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Displacement.html#mixVolume",
        "fct-type": "unknown",
        "title": "mixVolume"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Causal Displacement",
        "module": "Synthesizer.Dimensional.Causal.Displacement",
        "name": "mixVolume",
        "normalized": "T a b-\u003eT c d e(T c(T a b,T a b)(T a b)(f,f)f)",
        "package": "synthesizer",
        "partial": "Volume",
        "signature": "T v y-\u003eT s u t(T s(T v y,T v y)(T v y)(yv,yv)yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Displacement.html#v:raise",
      "description": {
        "fct-descr": "Add a number to all of the signal values.\nThis is useful for adjusting the center of a modulation.\n",
        "fct-module": "Synthesizer.Dimensional.Causal.Displacement",
        "fct-package": "synthesizer",
        "fct-signature": "T v y -\u003e yv -\u003e T s u t (T s (T v y) (T v y) yv yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Displacement.html#raise",
        "fct-type": "unknown",
        "title": "raise"
      },
      "index": {
        "description": "Add number to all of the signal values This is useful for adjusting the center of modulation",
        "hierarchy": "Synthesizer Dimensional Causal Displacement",
        "module": "Synthesizer.Dimensional.Causal.Displacement",
        "name": "raise",
        "normalized": "T a b-\u003ec-\u003eT d e f(T d(T a b)(T a b)c c)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T v y-\u003eyv-\u003eT s u t(T s(T v y)(T v y)yv yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Filter.html#t:FrequencyFilter",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Causal.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "type",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Filter.html#FrequencyFilter",
        "fct-type": "unknown",
        "title": "FrequencyFilter"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Causal Filter",
        "module": "Synthesizer.Dimensional.Causal.Filter",
        "name": "FrequencyFilter",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Frequency Filter",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Filter.html#t:ResonantFilter",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Causal.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "type",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Filter.html#ResonantFilter",
        "fct-type": "unknown",
        "title": "ResonantFilter"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Causal Filter",
        "module": "Synthesizer.Dimensional.Causal.Filter",
        "name": "ResonantFilter",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Resonant Filter",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Filter.html#v:allpassCascade",
      "description": {
        "fct-descr": "order, number of filters in the cascade \nthe phase shift to be achieved for the given frequency \n",
        "fct-module": "Synthesizer.Dimensional.Causal.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "Int-\u003e q-\u003e FrequencyFilter s u q (Parameter q) amp yv yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Filter.html#allpassCascade",
        "fct-type": "unknown",
        "title": "allpassCascade"
      },
      "index": {
        "description": "order number of filters in the cascade the phase shift to be achieved for the given frequency",
        "hierarchy": "Synthesizer Dimensional Causal Filter",
        "module": "Synthesizer.Dimensional.Causal.Filter",
        "name": "allpassCascade",
        "normalized": "Int-\u003ea-\u003eFrequencyFilter b c a(Parameter a)d e e",
        "package": "synthesizer",
        "partial": "Cascade",
        "signature": "Int-\u003eq-\u003eFrequencyFilter s u q(Parameter q)amp yv yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Filter.html#v:allpassFlangerPhase",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Causal.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Rate-Filter.html#allpassFlangerPhase",
        "fct-type": "unknown",
        "title": "allpassFlangerPhase"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Causal Filter",
        "module": "Synthesizer.Dimensional.Causal.Filter",
        "name": "allpassFlangerPhase",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Flanger Phase",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Filter.html#v:allpassPhaser",
      "description": {
        "fct-descr": "order, number of filters in the cascade \n",
        "fct-module": "Synthesizer.Dimensional.Causal.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "Int-\u003e ResonantFilter s u q (q, Parameter q) amp yv yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Filter.html#allpassPhaser",
        "fct-type": "unknown",
        "title": "allpassPhaser"
      },
      "index": {
        "description": "order number of filters in the cascade",
        "hierarchy": "Synthesizer Dimensional Causal Filter",
        "module": "Synthesizer.Dimensional.Causal.Filter",
        "name": "allpassPhaser",
        "normalized": "Int-\u003eResonantFilter a b c(c,Parameter c)d e e",
        "package": "synthesizer",
        "partial": "Phaser",
        "signature": "Int-\u003eResonantFilter s u q(q,Parameter q)amp yv yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Filter.html#v:amplify",
      "description": {
        "fct-descr": "The amplification factor must be positive. \n",
        "fct-module": "Synthesizer.Dimensional.Causal.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "y -\u003e T s u t (T s amp amp yv yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Filter.html#amplify",
        "fct-type": "unknown",
        "title": "amplify"
      },
      "index": {
        "description": "The amplification factor must be positive",
        "hierarchy": "Synthesizer Dimensional Causal Filter",
        "module": "Synthesizer.Dimensional.Causal.Filter",
        "name": "amplify",
        "normalized": "a-\u003eT b c d(T b e e f f)",
        "package": "synthesizer",
        "partial": "",
        "signature": "y-\u003eT s u t(T s amp amp yv yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Filter.html#v:amplifyDimension",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Causal.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "T v0 y -\u003e T s u t (T s (T v1 y) (T (Mul v0 v1) y) yv yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Filter.html#amplifyDimension",
        "fct-type": "unknown",
        "title": "amplifyDimension"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Causal Filter",
        "module": "Synthesizer.Dimensional.Causal.Filter",
        "name": "amplifyDimension",
        "normalized": "T a b-\u003eT c d e(T c(T a b)(T(Mul a a)b)f f)",
        "package": "synthesizer",
        "partial": "Dimension",
        "signature": "T v y-\u003eT s u t(T s(T v y)(T(Mul v v)y)yv yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Filter.html#v:bandlimitFromUniversal",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Causal.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "T s amp amp (Result yv) yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Filter.html#bandlimitFromUniversal",
        "fct-type": "unknown",
        "title": "bandlimitFromUniversal"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Causal Filter",
        "module": "Synthesizer.Dimensional.Causal.Filter",
        "name": "bandlimitFromUniversal",
        "normalized": "",
        "package": "synthesizer",
        "partial": "From Universal",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Filter.html#v:bandpassFromUniversal",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Causal.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "T s amp amp (Result yv) yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Filter.html#bandpassFromUniversal",
        "fct-type": "unknown",
        "title": "bandpassFromUniversal"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Causal Filter",
        "module": "Synthesizer.Dimensional.Causal.Filter",
        "name": "bandpassFromUniversal",
        "normalized": "",
        "package": "synthesizer",
        "partial": "From Universal",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Filter.html#v:butterworthHighpass",
      "description": {
        "fct-descr": "Order of the filter, must be even,\n                     the higher the order, the sharper is the separation of frequencies. \n",
        "fct-module": "Synthesizer.Dimensional.Causal.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "Int-\u003e ResonantFilter s u a (Parameter a) amp yv yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Filter.html#butterworthHighpass",
        "fct-type": "unknown",
        "title": "butterworthHighpass"
      },
      "index": {
        "description": "Order of the filter must be even the higher the order the sharper is the separation of frequencies",
        "hierarchy": "Synthesizer Dimensional Causal Filter",
        "module": "Synthesizer.Dimensional.Causal.Filter",
        "name": "butterworthHighpass",
        "normalized": "Int-\u003eResonantFilter a b c(Parameter c)d e e",
        "package": "synthesizer",
        "partial": "Highpass",
        "signature": "Int-\u003eResonantFilter s u a(Parameter a)amp yv yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Filter.html#v:butterworthHighpassPole",
      "description": {
        "fct-descr": "Order of the filter, must be even,\n                     the higher the order, the sharper is the separation of frequencies. \n",
        "fct-module": "Synthesizer.Dimensional.Causal.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "Int-\u003e ResonantFilter s u q (Pole q) amp yv yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Filter.html#butterworthHighpassPole",
        "fct-type": "unknown",
        "title": "butterworthHighpassPole"
      },
      "index": {
        "description": "Order of the filter must be even the higher the order the sharper is the separation of frequencies",
        "hierarchy": "Synthesizer Dimensional Causal Filter",
        "module": "Synthesizer.Dimensional.Causal.Filter",
        "name": "butterworthHighpassPole",
        "normalized": "Int-\u003eResonantFilter a b c(Pole c)d e e",
        "package": "synthesizer",
        "partial": "Highpass Pole",
        "signature": "Int-\u003eResonantFilter s u q(Pole q)amp yv yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Filter.html#v:butterworthLowpass",
      "description": {
        "fct-descr": "Order of the filter, must be even,\n                     the higher the order, the sharper is the separation of frequencies. \n",
        "fct-module": "Synthesizer.Dimensional.Causal.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "Int-\u003e ResonantFilter s u a (Parameter a) amp yv yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Filter.html#butterworthLowpass",
        "fct-type": "unknown",
        "title": "butterworthLowpass"
      },
      "index": {
        "description": "Order of the filter must be even the higher the order the sharper is the separation of frequencies",
        "hierarchy": "Synthesizer Dimensional Causal Filter",
        "module": "Synthesizer.Dimensional.Causal.Filter",
        "name": "butterworthLowpass",
        "normalized": "Int-\u003eResonantFilter a b c(Parameter c)d e e",
        "package": "synthesizer",
        "partial": "Lowpass",
        "signature": "Int-\u003eResonantFilter s u a(Parameter a)amp yv yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Filter.html#v:butterworthLowpassPole",
      "description": {
        "fct-descr": "Order of the filter, must be even,\n                     the higher the order, the sharper is the separation of frequencies. \n",
        "fct-module": "Synthesizer.Dimensional.Causal.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "Int-\u003e ResonantFilter s u q (Pole q) amp yv yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Filter.html#butterworthLowpassPole",
        "fct-type": "unknown",
        "title": "butterworthLowpassPole"
      },
      "index": {
        "description": "Order of the filter must be even the higher the order the sharper is the separation of frequencies",
        "hierarchy": "Synthesizer Dimensional Causal Filter",
        "module": "Synthesizer.Dimensional.Causal.Filter",
        "name": "butterworthLowpassPole",
        "normalized": "Int-\u003eResonantFilter a b c(Pole c)d e e",
        "package": "synthesizer",
        "partial": "Lowpass Pole",
        "signature": "Int-\u003eResonantFilter s u q(Pole q)amp yv yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Filter.html#v:chebyshevAHighpass",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Causal.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e ResonantFilter s u a (ParameterA a) amp yv yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Filter.html#chebyshevAHighpass",
        "fct-type": "unknown",
        "title": "chebyshevAHighpass"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Causal Filter",
        "module": "Synthesizer.Dimensional.Causal.Filter",
        "name": "chebyshevAHighpass",
        "normalized": "Int-\u003eResonantFilter a b c(ParameterA c)d e e",
        "package": "synthesizer",
        "partial": "AHighpass",
        "signature": "Int-\u003eResonantFilter s u a(ParameterA a)amp yv yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Filter.html#v:chebyshevAHighpassPole",
      "description": {
        "fct-descr": "Order of the filter, must be even,\n                     the higher the order, the sharper is the separation of frequencies. \n",
        "fct-module": "Synthesizer.Dimensional.Causal.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "Int-\u003e ResonantFilter s u q (Pole q) amp yv yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Filter.html#chebyshevAHighpassPole",
        "fct-type": "unknown",
        "title": "chebyshevAHighpassPole"
      },
      "index": {
        "description": "Order of the filter must be even the higher the order the sharper is the separation of frequencies",
        "hierarchy": "Synthesizer Dimensional Causal Filter",
        "module": "Synthesizer.Dimensional.Causal.Filter",
        "name": "chebyshevAHighpassPole",
        "normalized": "Int-\u003eResonantFilter a b c(Pole c)d e e",
        "package": "synthesizer",
        "partial": "AHighpass Pole",
        "signature": "Int-\u003eResonantFilter s u q(Pole q)amp yv yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Filter.html#v:chebyshevALowpass",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Causal.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e ResonantFilter s u a (ParameterA a) amp yv yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Filter.html#chebyshevALowpass",
        "fct-type": "unknown",
        "title": "chebyshevALowpass"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Causal Filter",
        "module": "Synthesizer.Dimensional.Causal.Filter",
        "name": "chebyshevALowpass",
        "normalized": "Int-\u003eResonantFilter a b c(ParameterA c)d e e",
        "package": "synthesizer",
        "partial": "ALowpass",
        "signature": "Int-\u003eResonantFilter s u a(ParameterA a)amp yv yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Filter.html#v:chebyshevALowpassPole",
      "description": {
        "fct-descr": "Order of the filter, must be even,\n                     the higher the order, the sharper is the separation of frequencies. \n",
        "fct-module": "Synthesizer.Dimensional.Causal.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "Int-\u003e ResonantFilter s u q (Pole q) amp yv yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Filter.html#chebyshevALowpassPole",
        "fct-type": "unknown",
        "title": "chebyshevALowpassPole"
      },
      "index": {
        "description": "Order of the filter must be even the higher the order the sharper is the separation of frequencies",
        "hierarchy": "Synthesizer Dimensional Causal Filter",
        "module": "Synthesizer.Dimensional.Causal.Filter",
        "name": "chebyshevALowpassPole",
        "normalized": "Int-\u003eResonantFilter a b c(Pole c)d e e",
        "package": "synthesizer",
        "partial": "ALowpass Pole",
        "signature": "Int-\u003eResonantFilter s u q(Pole q)amp yv yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Filter.html#v:chebyshevBHighpass",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Causal.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e ResonantFilter s u a (ParameterB a) amp yv yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Filter.html#chebyshevBHighpass",
        "fct-type": "unknown",
        "title": "chebyshevBHighpass"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Causal Filter",
        "module": "Synthesizer.Dimensional.Causal.Filter",
        "name": "chebyshevBHighpass",
        "normalized": "Int-\u003eResonantFilter a b c(ParameterB c)d e e",
        "package": "synthesizer",
        "partial": "BHighpass",
        "signature": "Int-\u003eResonantFilter s u a(ParameterB a)amp yv yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Filter.html#v:chebyshevBHighpassPole",
      "description": {
        "fct-descr": "Order of the filter, must be even,\n                     the higher the order, the sharper is the separation of frequencies. \n",
        "fct-module": "Synthesizer.Dimensional.Causal.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "Int-\u003e ResonantFilter s u q (Pole q) amp yv yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Filter.html#chebyshevBHighpassPole",
        "fct-type": "unknown",
        "title": "chebyshevBHighpassPole"
      },
      "index": {
        "description": "Order of the filter must be even the higher the order the sharper is the separation of frequencies",
        "hierarchy": "Synthesizer Dimensional Causal Filter",
        "module": "Synthesizer.Dimensional.Causal.Filter",
        "name": "chebyshevBHighpassPole",
        "normalized": "Int-\u003eResonantFilter a b c(Pole c)d e e",
        "package": "synthesizer",
        "partial": "BHighpass Pole",
        "signature": "Int-\u003eResonantFilter s u q(Pole q)amp yv yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Filter.html#v:chebyshevBLowpass",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Causal.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e ResonantFilter s u a (ParameterB a) amp yv yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Filter.html#chebyshevBLowpass",
        "fct-type": "unknown",
        "title": "chebyshevBLowpass"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Causal Filter",
        "module": "Synthesizer.Dimensional.Causal.Filter",
        "name": "chebyshevBLowpass",
        "normalized": "Int-\u003eResonantFilter a b c(ParameterB c)d e e",
        "package": "synthesizer",
        "partial": "BLowpass",
        "signature": "Int-\u003eResonantFilter s u a(ParameterB a)amp yv yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Filter.html#v:chebyshevBLowpassPole",
      "description": {
        "fct-descr": "Order of the filter, must be even,\n                     the higher the order, the sharper is the separation of frequencies. \n",
        "fct-module": "Synthesizer.Dimensional.Causal.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "Int-\u003e ResonantFilter s u q (Pole q) amp yv yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Filter.html#chebyshevBLowpassPole",
        "fct-type": "unknown",
        "title": "chebyshevBLowpassPole"
      },
      "index": {
        "description": "Order of the filter must be even the higher the order the sharper is the separation of frequencies",
        "hierarchy": "Synthesizer Dimensional Causal Filter",
        "module": "Synthesizer.Dimensional.Causal.Filter",
        "name": "chebyshevBLowpassPole",
        "normalized": "Int-\u003eResonantFilter a b c(Pole c)d e e",
        "package": "synthesizer",
        "partial": "BLowpass Pole",
        "signature": "Int-\u003eResonantFilter s u q(Pole q)amp yv yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Filter.html#v:differentiate",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Causal.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "T s u q (T s (T v q) (T (DimensionGradient u v) q) yv yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Filter.html#differentiate",
        "fct-type": "unknown",
        "title": "differentiate"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Causal Filter",
        "module": "Synthesizer.Dimensional.Causal.Filter",
        "name": "differentiate",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Filter.html#v:envelope",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Causal.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "T s u t (T s (Flat, amp) amp (y, y) y)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Filter.html#envelope",
        "fct-type": "unknown",
        "title": "envelope"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Causal Filter",
        "module": "Synthesizer.Dimensional.Causal.Filter",
        "name": "envelope",
        "normalized": "T a b c(T a(Flat,d)d(e,e)e)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T s u t(T s(Flat,amp)amp(y,y)y)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Filter.html#v:envelopeVector",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Causal.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "T s u t (T s (Flat, amp) amp (y, yv) yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Filter.html#envelopeVector",
        "fct-type": "unknown",
        "title": "envelopeVector"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Causal Filter",
        "module": "Synthesizer.Dimensional.Causal.Filter",
        "name": "envelopeVector",
        "normalized": "T a b c(T a(Flat,d)d(e,f)f)",
        "package": "synthesizer",
        "partial": "Vector",
        "signature": "T s u t(T s(Flat,amp)amp(y,yv)yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Filter.html#v:envelopeVectorDimension",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Causal.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "T s u t (T s (T v0 y, T v1 y) (T (Mul v0 v1) y) (y0, yv) yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Filter.html#envelopeVectorDimension",
        "fct-type": "unknown",
        "title": "envelopeVectorDimension"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Causal Filter",
        "module": "Synthesizer.Dimensional.Causal.Filter",
        "name": "envelopeVectorDimension",
        "normalized": "T a b c(T a(T d e,T d e)(T(Mul d d)e)(e,f)f)",
        "package": "synthesizer",
        "partial": "Vector Dimension",
        "signature": "T s u t(T s(T v y,T v y)(T(Mul v v)y)(y,yv)yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Filter.html#v:firstOrderHighpass",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Causal.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "FrequencyFilter s u q (Parameter q) amp yv yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Filter.html#firstOrderHighpass",
        "fct-type": "unknown",
        "title": "firstOrderHighpass"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Causal Filter",
        "module": "Synthesizer.Dimensional.Causal.Filter",
        "name": "firstOrderHighpass",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Order Highpass",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Filter.html#v:firstOrderLowpass",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Causal.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "FrequencyFilter s u q (Parameter q) amp yv yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Filter.html#firstOrderLowpass",
        "fct-type": "unknown",
        "title": "firstOrderLowpass"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Causal Filter",
        "module": "Synthesizer.Dimensional.Causal.Filter",
        "name": "firstOrderLowpass",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Order Lowpass",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Filter.html#v:highpassFromUniversal",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Causal.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "T s amp amp (Result yv) yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Filter.html#highpassFromUniversal",
        "fct-type": "unknown",
        "title": "highpassFromUniversal"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Causal Filter",
        "module": "Synthesizer.Dimensional.Causal.Filter",
        "name": "highpassFromUniversal",
        "normalized": "",
        "package": "synthesizer",
        "partial": "From Universal",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Filter.html#v:integrate",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Causal.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "T s u q (T s (T v q) (T (Mul u v) q) yv yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Filter.html#integrate",
        "fct-type": "unknown",
        "title": "integrate"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Causal Filter",
        "module": "Synthesizer.Dimensional.Causal.Filter",
        "name": "integrate",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Filter.html#v:lowpassFromUniversal",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Causal.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "T s amp amp (Result yv) yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Filter.html#lowpassFromUniversal",
        "fct-type": "unknown",
        "title": "lowpassFromUniversal"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Causal Filter",
        "module": "Synthesizer.Dimensional.Causal.Filter",
        "name": "lowpassFromUniversal",
        "normalized": "",
        "package": "synthesizer",
        "partial": "From Universal",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Filter.html#v:moogLowpass",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Causal.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e ResonantFilter s u q (Parameter q) amp yv yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Filter.html#moogLowpass",
        "fct-type": "unknown",
        "title": "moogLowpass"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Causal Filter",
        "module": "Synthesizer.Dimensional.Causal.Filter",
        "name": "moogLowpass",
        "normalized": "Int-\u003eResonantFilter a b c(Parameter c)d e e",
        "package": "synthesizer",
        "partial": "Lowpass",
        "signature": "Int-\u003eResonantFilter s u q(Parameter q)amp yv yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Filter.html#v:negate",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Causal.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "T s u t (T s amp amp yv yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Filter.html#negate",
        "fct-type": "unknown",
        "title": "negate"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Causal Filter",
        "module": "Synthesizer.Dimensional.Causal.Filter",
        "name": "negate",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Filter.html#v:universal",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Causal.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "ResonantFilter s u q (Parameter q) amp yv (Result yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Filter.html#universal",
        "fct-type": "unknown",
        "title": "universal"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Causal Filter",
        "module": "Synthesizer.Dimensional.Causal.Filter",
        "name": "universal",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Oscillator.html#v:freqMod",
      "description": {
        "fct-descr": "waveform \nstart phase \n",
        "fct-module": "Synthesizer.Dimensional.Causal.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "wave y-\u003e T t-\u003e T s u t (T s (T (Recip u) t) amp t y)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Oscillator.html#freqMod",
        "fct-type": "unknown",
        "title": "freqMod"
      },
      "index": {
        "description": "waveform start phase",
        "hierarchy": "Synthesizer Dimensional Causal Oscillator",
        "module": "Synthesizer.Dimensional.Causal.Oscillator",
        "name": "freqMod",
        "normalized": "a b-\u003eT c-\u003eT d e c(T d(T(Recip e)c)f c b)",
        "package": "synthesizer",
        "partial": "Mod",
        "signature": "wave y-\u003eT t-\u003eT s u t(T s(T(Recip u)t)amp t y)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Oscillator.html#v:freqModAntiAlias",
      "description": {
        "fct-descr": "waveform \nstart phase \n",
        "fct-module": "Synthesizer.Dimensional.Causal.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "wave y-\u003e T t-\u003e T s u t (T s (T (Recip u) t) amp t y)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Oscillator.html#freqModAntiAlias",
        "fct-type": "unknown",
        "title": "freqModAntiAlias"
      },
      "index": {
        "description": "waveform start phase",
        "hierarchy": "Synthesizer Dimensional Causal Oscillator",
        "module": "Synthesizer.Dimensional.Causal.Oscillator",
        "name": "freqModAntiAlias",
        "normalized": "a b-\u003eT c-\u003eT d e c(T d(T(Recip e)c)f c b)",
        "package": "synthesizer",
        "partial": "Mod Anti Alias",
        "signature": "wave y-\u003eT t-\u003eT s u t(T s(T(Recip u)t)amp t y)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Oscillator.html#v:phaseFreqMod",
      "description": {
        "fct-descr": "waveform \n",
        "fct-module": "Synthesizer.Dimensional.Causal.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "wave y-\u003e T s u t (T s (Flat, T (Recip u) t) amp (t, t) y)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Oscillator.html#phaseFreqMod",
        "fct-type": "unknown",
        "title": "phaseFreqMod"
      },
      "index": {
        "description": "waveform",
        "hierarchy": "Synthesizer Dimensional Causal Oscillator",
        "module": "Synthesizer.Dimensional.Causal.Oscillator",
        "name": "phaseFreqMod",
        "normalized": "a b-\u003eT c d e(T c(Flat,T(Recip d)e)f(e,e)b)",
        "package": "synthesizer",
        "partial": "Freq Mod",
        "signature": "wave y-\u003eT s u t(T s(Flat,T(Recip u)t)amp(t,t)y)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Oscillator.html#v:phaseMod",
      "description": {
        "fct-descr": "waveform \nfrequency \n",
        "fct-module": "Synthesizer.Dimensional.Causal.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "wave y-\u003e T (Recip u) t-\u003e T s u t (T s Flat amp t y)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Oscillator.html#phaseMod",
        "fct-type": "unknown",
        "title": "phaseMod"
      },
      "index": {
        "description": "waveform frequency",
        "hierarchy": "Synthesizer Dimensional Causal Oscillator",
        "module": "Synthesizer.Dimensional.Causal.Oscillator",
        "name": "phaseMod",
        "normalized": "a b-\u003eT(Recip c)d-\u003eT e c d(T e Flat f d b)",
        "package": "synthesizer",
        "partial": "Mod",
        "signature": "wave y-\u003eT(Recip u)t-\u003eT s u t(T s Flat amp t y)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Oscillator.html#v:shapeFreqMod",
      "description": {
        "fct-descr": "waveform \nphase \n",
        "fct-module": "Synthesizer.Dimensional.Causal.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "c -\u003e T t y-\u003e T t-\u003e T s u t (T s (Flat, T (Recip u) t) Flat (c, t) y)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Oscillator.html#shapeFreqMod",
        "fct-type": "unknown",
        "title": "shapeFreqMod"
      },
      "index": {
        "description": "waveform phase",
        "hierarchy": "Synthesizer Dimensional Causal Oscillator",
        "module": "Synthesizer.Dimensional.Causal.Oscillator",
        "name": "shapeFreqMod",
        "normalized": "a-\u003eT b c-\u003eT b-\u003eT d e b(T d(Flat,T(Recip e)b)Flat(a,b)c)",
        "package": "synthesizer",
        "partial": "Freq Mod",
        "signature": "c-\u003eT t y-\u003eT t-\u003eT s u t(T s(Flat,T(Recip u)t)Flat(c,t)y)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Oscillator.html#v:shapeFreqModFromSampledTone",
      "description": {
        "fct-descr": "source frequency \n",
        "fct-module": "Synthesizer.Dimensional.Causal.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "T t yv-\u003e T t yv-\u003e T (Recip u) t-\u003e T u t signal yv-\u003e t-\u003e T t-\u003e T s u t (T s (Flat, T (Recip u) t) amp (t, t) yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Oscillator.html#shapeFreqModFromSampledTone",
        "fct-type": "unknown",
        "title": "shapeFreqModFromSampledTone"
      },
      "index": {
        "description": "source frequency",
        "hierarchy": "Synthesizer Dimensional Causal Oscillator",
        "module": "Synthesizer.Dimensional.Causal.Oscillator",
        "name": "shapeFreqModFromSampledTone",
        "normalized": "T a b-\u003eT a b-\u003eT(Recip c)a-\u003eT c a d b-\u003ea-\u003eT a-\u003eT e c a(T e(Flat,T(Recip c)a)f(a,a)b)",
        "package": "synthesizer",
        "partial": "Freq Mod From Sampled Tone",
        "signature": "T t yv-\u003eT t yv-\u003eT(Recip u)t-\u003eT u t signal yv-\u003et-\u003eT t-\u003eT s u t(T s(Flat,T(Recip u)t)amp(t,t)yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Oscillator.html#v:shapeMod",
      "description": {
        "fct-descr": "waveform \nphase \nfrequency \n",
        "fct-module": "Synthesizer.Dimensional.Causal.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "c -\u003e T t y-\u003e T t-\u003e T (Recip u) t-\u003e T s u t (T s Flat Flat c y)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Oscillator.html#shapeMod",
        "fct-type": "unknown",
        "title": "shapeMod"
      },
      "index": {
        "description": "waveform phase frequency",
        "hierarchy": "Synthesizer Dimensional Causal Oscillator",
        "module": "Synthesizer.Dimensional.Causal.Oscillator",
        "name": "shapeMod",
        "normalized": "a-\u003eT b c-\u003eT b-\u003eT(Recip d)b-\u003eT e d b(T e Flat Flat a c)",
        "package": "synthesizer",
        "partial": "Mod",
        "signature": "c-\u003eT t y-\u003eT t-\u003eT(Recip u)t-\u003eT s u t(T s Flat Flat c y)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Oscillator.html#v:shapePhaseFreqModFromSampledTone",
      "description": {
        "fct-descr": "source frequency \n",
        "fct-module": "Synthesizer.Dimensional.Causal.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "T t yv-\u003e T t yv-\u003e T (Recip u) t-\u003e T u t signal yv-\u003e t-\u003e T t-\u003e T s u t (T s (Flat, Flat, T (Recip u) t) amp (t, t, t) yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Oscillator.html#shapePhaseFreqModFromSampledTone",
        "fct-type": "unknown",
        "title": "shapePhaseFreqModFromSampledTone"
      },
      "index": {
        "description": "source frequency",
        "hierarchy": "Synthesizer Dimensional Causal Oscillator",
        "module": "Synthesizer.Dimensional.Causal.Oscillator",
        "name": "shapePhaseFreqModFromSampledTone",
        "normalized": "T a b-\u003eT a b-\u003eT(Recip c)a-\u003eT c a d b-\u003ea-\u003eT a-\u003eT e c a(T e(Flat,Flat,T(Recip c)a)f(a,a,a)b)",
        "package": "synthesizer",
        "partial": "Phase Freq Mod From Sampled Tone",
        "signature": "T t yv-\u003eT t yv-\u003eT(Recip u)t-\u003eT u t signal yv-\u003et-\u003eT t-\u003eT s u t(T s(Flat,Flat,T(Recip u)t)amp(t,t,t)yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Process.html#t:Flat",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Causal.Process",
        "fct-package": "synthesizer",
        "fct-signature": "data",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude.html#Flat",
        "fct-type": "unknown",
        "title": "Flat"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Causal Process",
        "module": "Synthesizer.Dimensional.Causal.Process",
        "name": "Flat",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Flat",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Process.html#t:T",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Causal.Process",
        "fct-package": "synthesizer",
        "fct-signature": "newtype",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Process.html#T",
        "fct-type": "unknown",
        "title": "T"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Causal Process",
        "module": "Synthesizer.Dimensional.Causal.Process",
        "name": "T",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Process.html#v:",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Causal.Process",
        "fct-package": "synthesizer",
        "fct-signature": "T s amp amp0 yv yv0 -\u003e T s amp amp1 yv yv1 -\u003e T s amp (amp0, amp1) yv (yv0, yv1)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Process.html#%26%26%26",
        "fct-type": "unknown",
        "title": ""
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Causal Process",
        "module": "Synthesizer.Dimensional.Causal.Process",
        "name": "",
        "normalized": "T a b b c c-\u003eT a b b c c-\u003eT a b(b,b)c(c,c)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T s amp amp yv yv-\u003eT s amp amp yv yv-\u003eT s amp(amp,amp)yv(yv,yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Process.html#v:$/-",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Causal.Process",
        "fct-package": "synthesizer",
        "fct-signature": "f (T s (T v0 y0) (T v1 y1) y0 yv1) -\u003e T v0 y0 -\u003e f (R s v1 y1 yv1)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Process.html#%24%2F-",
        "fct-type": "unknown",
        "title": "$/-"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Causal Process",
        "module": "Synthesizer.Dimensional.Causal.Process",
        "name": "$/-",
        "normalized": "a(T b(T c d)(T c d)d e)-\u003eT c d-\u003ea(R b c d e)",
        "package": "synthesizer",
        "partial": "",
        "signature": "f(T s(T v y)(T v y)y yv)-\u003eT v y-\u003ef(R s v y yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Process.html#v:$/:",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Causal.Process",
        "fct-package": "synthesizer",
        "fct-signature": "f (T s (T v0 y0) (T v1 y1) yv0 yv1) -\u003e f (R s v0 y0 yv0) -\u003e f (R s v1 y1 yv1)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Process.html#%24%2F%3A",
        "fct-type": "unknown",
        "title": "$/:"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Causal Process",
        "module": "Synthesizer.Dimensional.Causal.Process",
        "name": "$/:",
        "normalized": "a(T b(T c d)(T c d)e e)-\u003ea(R b c d e)-\u003ea(R b c d e)",
        "package": "synthesizer",
        "partial": "",
        "signature": "f(T s(T v y)(T v y)yv yv)-\u003ef(R s v y yv)-\u003ef(R s v y yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Process.html#v:***",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Causal.Process",
        "fct-package": "synthesizer",
        "fct-signature": "T s amp0 amp1 yv0 yv1 -\u003e T s amp2 amp3 yv2 yv3 -\u003e T s (amp0, amp2) (amp1, amp3) (yv0, yv2) (yv1, yv3)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Process.html#%2A%2A%2A",
        "fct-type": "unknown",
        "title": "***"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Causal Process",
        "module": "Synthesizer.Dimensional.Causal.Process",
        "name": "***",
        "normalized": "T a b b c c-\u003eT a b b c c-\u003eT a(b,b)(b,b)(c,c)(c,c)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T s amp amp yv yv-\u003eT s amp amp yv yv-\u003eT s(amp,amp)(amp,amp)(yv,yv)(yv,yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Process.html#v:\u003c\u003c\u003c",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Causal.Process",
        "fct-package": "synthesizer",
        "fct-signature": "T s amp1 amp2 yv1 yv2 -\u003e T s amp0 amp1 yv0 yv1 -\u003e T s amp0 amp2 yv0 yv2",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Process.html#%3C%3C%3C",
        "fct-type": "unknown",
        "title": "\u003c\u003c\u003c"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Causal Process",
        "module": "Synthesizer.Dimensional.Causal.Process",
        "name": "\u003c\u003c\u003c",
        "normalized": "T a b b c c-\u003eT a b b c c-\u003eT a b b c c",
        "package": "synthesizer",
        "partial": "",
        "signature": "T s amp amp yv yv-\u003eT s amp amp yv yv-\u003eT s amp amp yv yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Process.html#v:\u003c\u003c^",
      "description": {
        "fct-descr": "Precomposition with a pure function (right-to-left variant).\n",
        "fct-module": "Synthesizer.Dimensional.Causal.Process",
        "fct-package": "synthesizer",
        "fct-signature": "T s amp1 amp2 yv1 yv2 -\u003e T amp0 amp1 yv0 yv1 -\u003e T s amp0 amp2 yv0 yv2",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Process.html#%3C%3C%5E",
        "fct-type": "unknown",
        "title": "\u003c\u003c^"
      },
      "index": {
        "description": "Precomposition with pure function right-to-left variant",
        "hierarchy": "Synthesizer Dimensional Causal Process",
        "module": "Synthesizer.Dimensional.Causal.Process",
        "name": "\u003c\u003c^",
        "normalized": "T a b b c c-\u003eT b b c c-\u003eT a b b c c",
        "package": "synthesizer",
        "partial": "",
        "signature": "T s amp amp yv yv-\u003eT amp amp yv yv-\u003eT s amp amp yv yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Process.html#v:\u003e\u003e\u003e",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Causal.Process",
        "fct-package": "synthesizer",
        "fct-signature": "T s amp0 amp1 yv0 yv1 -\u003e T s amp1 amp2 yv1 yv2 -\u003e T s amp0 amp2 yv0 yv2",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Process.html#%3E%3E%3E",
        "fct-type": "unknown",
        "title": "\u003e\u003e\u003e"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Causal Process",
        "module": "Synthesizer.Dimensional.Causal.Process",
        "name": "\u003e\u003e\u003e",
        "normalized": "T a b b c c-\u003eT a b b c c-\u003eT a b b c c",
        "package": "synthesizer",
        "partial": "",
        "signature": "T s amp amp yv yv-\u003eT s amp amp yv yv-\u003eT s amp amp yv yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Process.html#v:\u003e\u003e^",
      "description": {
        "fct-descr": "Postcomposition with a pure function.\n",
        "fct-module": "Synthesizer.Dimensional.Causal.Process",
        "fct-package": "synthesizer",
        "fct-signature": "T s amp0 amp1 yv0 yv1 -\u003e T amp1 amp2 yv1 yv2 -\u003e T s amp0 amp2 yv0 yv2",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Process.html#%3E%3E%5E",
        "fct-type": "unknown",
        "title": "\u003e\u003e^"
      },
      "index": {
        "description": "Postcomposition with pure function",
        "hierarchy": "Synthesizer Dimensional Causal Process",
        "module": "Synthesizer.Dimensional.Causal.Process",
        "name": "\u003e\u003e^",
        "normalized": "T a b b c c-\u003eT b b c c-\u003eT a b b c c",
        "package": "synthesizer",
        "partial": "",
        "signature": "T s amp amp yv yv-\u003eT amp amp yv yv-\u003eT s amp amp yv yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Process.html#v:^\u003c\u003c",
      "description": {
        "fct-descr": "Postcomposition with a pure function (right-to-left variant).\n",
        "fct-module": "Synthesizer.Dimensional.Causal.Process",
        "fct-package": "synthesizer",
        "fct-signature": "T amp1 amp2 yv1 yv2 -\u003e T s amp0 amp1 yv0 yv1 -\u003e T s amp0 amp2 yv0 yv2",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Process.html#%5E%3C%3C",
        "fct-type": "unknown",
        "title": "^\u003c\u003c"
      },
      "index": {
        "description": "Postcomposition with pure function right-to-left variant",
        "hierarchy": "Synthesizer Dimensional Causal Process",
        "module": "Synthesizer.Dimensional.Causal.Process",
        "name": "^\u003c\u003c",
        "normalized": "T a a b b-\u003eT c a a b b-\u003eT c a a b b",
        "package": "synthesizer",
        "partial": "",
        "signature": "T amp amp yv yv-\u003eT s amp amp yv yv-\u003eT s amp amp yv yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Process.html#v:^\u003e\u003e",
      "description": {
        "fct-descr": "Precomposition with a pure function.\n",
        "fct-module": "Synthesizer.Dimensional.Causal.Process",
        "fct-package": "synthesizer",
        "fct-signature": "T amp0 amp1 yv0 yv1 -\u003e T s amp1 amp2 yv1 yv2 -\u003e T s amp0 amp2 yv0 yv2",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Process.html#%5E%3E%3E",
        "fct-type": "unknown",
        "title": "^\u003e\u003e"
      },
      "index": {
        "description": "Precomposition with pure function",
        "hierarchy": "Synthesizer Dimensional Causal Process",
        "module": "Synthesizer.Dimensional.Causal.Process",
        "name": "^\u003e\u003e",
        "normalized": "T a a b b-\u003eT c a a b b-\u003eT c a a b b",
        "package": "synthesizer",
        "partial": "",
        "signature": "T amp amp yv yv-\u003eT s amp amp yv yv-\u003eT s amp amp yv yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Process.html#v:apply",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Causal.Process",
        "fct-package": "synthesizer",
        "fct-signature": "T s amp0 amp1 yv0 yv1 -\u003e T s signal0 yv0 -\u003e T s signal1 yv1",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Process.html#apply",
        "fct-type": "unknown",
        "title": "apply"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Causal Process",
        "module": "Synthesizer.Dimensional.Causal.Process",
        "name": "apply",
        "normalized": "T a b b c c-\u003eT a d c-\u003eT a d c",
        "package": "synthesizer",
        "partial": "",
        "signature": "T s amp amp yv yv-\u003eT s signal yv-\u003eT s signal yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Process.html#v:applyConst",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Causal.Process",
        "fct-package": "synthesizer",
        "fct-signature": "T s (T v0 y0) (T v1 y1) y0 yv1 -\u003e T v0 y0 -\u003e R s v1 y1 yv1",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Process.html#applyConst",
        "fct-type": "unknown",
        "title": "applyConst"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Causal Process",
        "module": "Synthesizer.Dimensional.Causal.Process",
        "name": "applyConst",
        "normalized": "T a(T b c)(T b c)c d-\u003eT b c-\u003eR a b c d",
        "package": "synthesizer",
        "partial": "Const",
        "signature": "T s(T v y)(T v y)y yv-\u003eT v y-\u003eR s v y yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Process.html#v:applyFlat",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Causal.Process",
        "fct-package": "synthesizer",
        "fct-signature": "T s Flat (T v1 y1) yv0 yv1 -\u003e T s sig yv0 -\u003e R s v1 y1 yv1",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Process.html#applyFlat",
        "fct-type": "unknown",
        "title": "applyFlat"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Causal Process",
        "module": "Synthesizer.Dimensional.Causal.Process",
        "name": "applyFlat",
        "normalized": "T a Flat(T b c)d d-\u003eT a e d-\u003eR a b c d",
        "package": "synthesizer",
        "partial": "Flat",
        "signature": "T s Flat(T v y)yv yv-\u003eT s sig yv-\u003eR s v y yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Process.html#v:applyFlatFst",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Causal.Process",
        "fct-package": "synthesizer",
        "fct-signature": "T s (Flat, restAmpIn) restAmpOut (yv, restSampIn) restSampOut -\u003e T s sig yv -\u003e T s restAmpIn restAmpOut restSampIn restSampOut",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Process.html#applyFlatFst",
        "fct-type": "unknown",
        "title": "applyFlatFst"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Causal Process",
        "module": "Synthesizer.Dimensional.Causal.Process",
        "name": "applyFlatFst",
        "normalized": "T a(Flat,b)c(d,e)f-\u003eT a g d-\u003eT a b c e f",
        "package": "synthesizer",
        "partial": "Flat Fst",
        "signature": "T s(Flat,restAmpIn)restAmpOut(yv,restSampIn)restSampOut-\u003eT s sig yv-\u003eT s restAmpIn restAmpOut restSampIn restSampOut"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Process.html#v:applyFlatFst'",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Causal.Process",
        "fct-package": "synthesizer",
        "fct-signature": "T s (Flat, restAmpIn) restAmpOut (yv, restSampIn) restSampOut -\u003e T s sig yv -\u003e T s restAmpIn restAmpOut restSampIn restSampOut",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Process.html#applyFlatFst%27",
        "fct-type": "unknown",
        "title": "applyFlatFst'"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Causal Process",
        "module": "Synthesizer.Dimensional.Causal.Process",
        "name": "applyFlatFst'",
        "normalized": "T a(Flat,b)c(d,e)f-\u003eT a g d-\u003eT a b c e f",
        "package": "synthesizer",
        "partial": "Flat Fst'",
        "signature": "T s(Flat,restAmpIn)restAmpOut(yv,restSampIn)restSampOut-\u003eT s sig yv-\u003eT s restAmpIn restAmpOut restSampIn restSampOut"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Process.html#v:applyFst",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Causal.Process",
        "fct-package": "synthesizer",
        "fct-signature": "T s (T v y, restAmpIn) restAmpOut (yv, restSampIn) restSampOut -\u003e R s v y yv -\u003e T s restAmpIn restAmpOut restSampIn restSampOut",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Process.html#applyFst",
        "fct-type": "unknown",
        "title": "applyFst"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Causal Process",
        "module": "Synthesizer.Dimensional.Causal.Process",
        "name": "applyFst",
        "normalized": "T a(T b c,d)e(f,g)h-\u003eR a b c f-\u003eT a d e g h",
        "package": "synthesizer",
        "partial": "Fst",
        "signature": "T s(T v y,restAmpIn)restAmpOut(yv,restSampIn)restSampOut-\u003eR s v y yv-\u003eT s restAmpIn restAmpOut restSampIn restSampOut"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Process.html#v:applyFst'",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Causal.Process",
        "fct-package": "synthesizer",
        "fct-signature": "T s (T v y, restAmpIn) restAmpOut (yv, restSampIn) restSampOut -\u003e R s v y yv -\u003e T s restAmpIn restAmpOut restSampIn restSampOut",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Process.html#applyFst%27",
        "fct-type": "unknown",
        "title": "applyFst'"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Causal Process",
        "module": "Synthesizer.Dimensional.Causal.Process",
        "name": "applyFst'",
        "normalized": "T a(T b c,d)e(f,g)h-\u003eR a b c f-\u003eT a d e g h",
        "package": "synthesizer",
        "partial": "Fst'",
        "signature": "T s(T v y,restAmpIn)restAmpOut(yv,restSampIn)restSampOut-\u003eR s v y yv-\u003eT s restAmpIn restAmpOut restSampIn restSampOut"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Process.html#v:applyGeneric",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Causal.Process",
        "fct-package": "synthesizer",
        "fct-signature": "T s amp0 amp1 yv0 yv1 -\u003e T s signal0 yv0 -\u003e T s signal1 yv1",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Process.html#applyGeneric",
        "fct-type": "unknown",
        "title": "applyGeneric"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Causal Process",
        "module": "Synthesizer.Dimensional.Causal.Process",
        "name": "applyGeneric",
        "normalized": "T a b b c c-\u003eT a d c-\u003eT a d c",
        "package": "synthesizer",
        "partial": "Generic",
        "signature": "T s amp amp yv yv-\u003eT s signal yv-\u003eT s signal yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Process.html#v:compose",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Causal.Process",
        "fct-package": "synthesizer",
        "fct-signature": "T s amp0 amp1 yv0 yv1 -\u003e T s amp1 amp2 yv1 yv2 -\u003e T s amp0 amp2 yv0 yv2",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Process.html#compose",
        "fct-type": "unknown",
        "title": "compose"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Causal Process",
        "module": "Synthesizer.Dimensional.Causal.Process",
        "name": "compose",
        "normalized": "T a b b c c-\u003eT a b b c c-\u003eT a b b c c",
        "package": "synthesizer",
        "partial": "",
        "signature": "T s amp amp yv yv-\u003eT s amp amp yv yv-\u003eT s amp amp yv yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Process.html#v:fanout",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Causal.Process",
        "fct-package": "synthesizer",
        "fct-signature": "T s amp amp0 yv yv0 -\u003e T s amp amp1 yv yv1 -\u003e T s amp (amp0, amp1) yv (yv0, yv1)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Process.html#fanout",
        "fct-type": "unknown",
        "title": "fanout"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Causal Process",
        "module": "Synthesizer.Dimensional.Causal.Process",
        "name": "fanout",
        "normalized": "T a b b c c-\u003eT a b b c c-\u003eT a b(b,b)c(c,c)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T s amp amp yv yv-\u003eT s amp amp yv yv-\u003eT s amp(amp,amp)yv(yv,yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Process.html#v:feedFlatFst",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Causal.Process",
        "fct-package": "synthesizer",
        "fct-signature": "T s sig yv -\u003e T s restAmp (Flat, restAmp) restSamp (yv, restSamp)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Process.html#feedFlatFst",
        "fct-type": "unknown",
        "title": "feedFlatFst"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Causal Process",
        "module": "Synthesizer.Dimensional.Causal.Process",
        "name": "feedFlatFst",
        "normalized": "T a b c-\u003eT a d(Flat,d)e(c,e)",
        "package": "synthesizer",
        "partial": "Flat Fst",
        "signature": "T s sig yv-\u003eT s restAmp(Flat,restAmp)restSamp(yv,restSamp)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Process.html#v:feedFst",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Causal.Process",
        "fct-package": "synthesizer",
        "fct-signature": "R s v y yv -\u003e T s restAmp (T v y, restAmp) restSamp (yv, restSamp)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Process.html#feedFst",
        "fct-type": "unknown",
        "title": "feedFst"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Causal Process",
        "module": "Synthesizer.Dimensional.Causal.Process",
        "name": "feedFst",
        "normalized": "R a b c d-\u003eT a e(T b c,e)f(d,f)",
        "package": "synthesizer",
        "partial": "Fst",
        "signature": "R s v y yv-\u003eT s restAmp(T v y,restAmp)restSamp(yv,restSamp)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Process.html#v:first",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Causal.Process",
        "fct-package": "synthesizer",
        "fct-signature": "T s amp0 amp1 yv0 yv1 -\u003e T s (amp0, amp) (amp1, amp) (yv0, yv) (yv1, yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Process.html#first",
        "fct-type": "unknown",
        "title": "first"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Causal Process",
        "module": "Synthesizer.Dimensional.Causal.Process",
        "name": "first",
        "normalized": "T a b b c c-\u003eT a(b,b)(b,b)(c,c)(c,c)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T s amp amp yv yv-\u003eT s(amp,amp)(amp,amp)(yv,yv)(yv,yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Process.html#v:homogeneous",
      "description": {
        "fct-descr": "\u003cp\u003eLift a low-level homogeneous process to a dimensional one.\n\u003c/p\u003e\u003cp\u003eNote that the \u003ctt\u003eamp\u003c/tt\u003e type variable is unrestricted.\nThis way we show, that the amplitude is not touched,\nwhich also means that the underlying low-level process must be homogeneous.\n\u003c/p\u003e",
        "fct-module": "Synthesizer.Dimensional.Causal.Process",
        "fct-package": "synthesizer",
        "fct-signature": "T yv0 yv1 -\u003e T s amp amp yv0 yv1",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Process.html#homogeneous",
        "fct-type": "unknown",
        "title": "homogeneous"
      },
      "index": {
        "description": "Lift low-level homogeneous process to dimensional one Note that the amp type variable is unrestricted This way we show that the amplitude is not touched which also means that the underlying low-level process must be homogeneous",
        "hierarchy": "Synthesizer Dimensional Causal Process",
        "module": "Synthesizer.Dimensional.Causal.Process",
        "name": "homogeneous",
        "normalized": "T a a-\u003eT b c c a a",
        "package": "synthesizer",
        "partial": "",
        "signature": "T yv yv-\u003eT s amp amp yv yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Process.html#v:id",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Causal.Process",
        "fct-package": "synthesizer",
        "fct-signature": "T s amp amp yv yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Process.html#id",
        "fct-type": "unknown",
        "title": "id"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Causal Process",
        "module": "Synthesizer.Dimensional.Causal.Process",
        "name": "id",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Process.html#v:loop",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Causal.Process",
        "fct-package": "synthesizer",
        "fct-signature": "T v y -\u003e T s (restAmpIn, T v y) (restAmpOut, T v y) (restSampIn, yv) (restSampOut, yv) -\u003e T s restAmpIn restAmpOut restSampIn restSampOut",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Process.html#loop",
        "fct-type": "unknown",
        "title": "loop"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Causal Process",
        "module": "Synthesizer.Dimensional.Causal.Process",
        "name": "loop",
        "normalized": "T a b-\u003eT c(d,T a b)(e,T a b)(f,g)(h,g)-\u003eT c d e f h",
        "package": "synthesizer",
        "partial": "",
        "signature": "T v y-\u003eT s(restAmpIn,T v y)(restAmpOut,T v y)(restSampIn,yv)(restSampOut,yv)-\u003eT s restAmpIn restAmpOut restSampIn restSampOut"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Process.html#v:loop2",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Causal.Process",
        "fct-package": "synthesizer",
        "fct-signature": "(T v0 y0, T v1 y1) -\u003e T s (restAmpIn, (T v0 y0, T v1 y1)) (restAmpOut, (T v0 y0, T v1 y1)) (restSampIn, (yv0, yv1)) (restSampOut, (yv0, yv1)) -\u003e T s restAmpIn restAmpOut restSampIn restSampOut",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Process.html#loop2",
        "fct-type": "unknown",
        "title": "loop2"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Causal Process",
        "module": "Synthesizer.Dimensional.Causal.Process",
        "name": "loop2",
        "normalized": "(T a b,T a b)-\u003eT c(d,(T a b,T a b))(e,(T a b,T a b))(f,(g,g))(h,(g,g))-\u003eT c d e f h",
        "package": "synthesizer",
        "partial": "",
        "signature": "(T v y,T v y)-\u003eT s(restAmpIn,(T v y,T v y))(restAmpOut,(T v y,T v y))(restSampIn,(yv,yv))(restSampOut,(yv,yv))-\u003eT s restAmpIn restAmpOut restSampIn restSampOut"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Process.html#v:loop2'",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Causal.Process",
        "fct-package": "synthesizer",
        "fct-signature": "(T v0 y0, T v1 y1) -\u003e T s (restAmpIn, (T v0 y0, T v1 y1)) (restAmpOut, (T v0 y0, T v1 y1)) (restSampIn, (yv0, yv1)) (restSampOut, (yv0, yv1)) -\u003e T s restAmpIn restAmpOut restSampIn restSampOut",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Process.html#loop2%27",
        "fct-type": "unknown",
        "title": "loop2'"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Causal Process",
        "module": "Synthesizer.Dimensional.Causal.Process",
        "name": "loop2'",
        "normalized": "(T a b,T a b)-\u003eT c(d,(T a b,T a b))(e,(T a b,T a b))(f,(g,g))(h,(g,g))-\u003eT c d e f h",
        "package": "synthesizer",
        "partial": "",
        "signature": "(T v y,T v y)-\u003eT s(restAmpIn,(T v y,T v y))(restAmpOut,(T v y,T v y))(restSampIn,(yv,yv))(restSampOut,(yv,yv))-\u003eT s restAmpIn restAmpOut restSampIn restSampOut"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Process.html#v:map",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Causal.Process",
        "fct-package": "synthesizer",
        "fct-signature": "T amp0 amp1 yv0 yv1 -\u003e T s amp0 amp1 yv0 yv1",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Process.html#map",
        "fct-type": "unknown",
        "title": "map"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Causal Process",
        "module": "Synthesizer.Dimensional.Causal.Process",
        "name": "map",
        "normalized": "T a a b b-\u003eT c a a b b",
        "package": "synthesizer",
        "partial": "",
        "signature": "T amp amp yv yv-\u003eT s amp amp yv yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Process.html#v:mapAmplitude",
      "description": {
        "fct-descr": "We restrict the amplitude types to those of class Amplitude.\nOtherwise \u003ctt\u003e\u003ca\u003emapAmplitude\u003c/a\u003e\u003c/tt\u003e could be abused\nfor bringing amplitudes and respective sample values out of sync.\nFor mapping amplitudes that are nested in some pairs,\nuse it in combination with \u003ctt\u003e\u003ca\u003efirst\u003c/a\u003e\u003c/tt\u003e and \u003ctt\u003e\u003ca\u003esecond\u003c/a\u003e\u003c/tt\u003e.\n",
        "fct-module": "Synthesizer.Dimensional.Causal.Process",
        "fct-package": "synthesizer",
        "fct-signature": "(amp0 -\u003e amp1) -\u003e T s amp0 amp1 yv yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Process.html#mapAmplitude",
        "fct-type": "unknown",
        "title": "mapAmplitude"
      },
      "index": {
        "description": "We restrict the amplitude types to those of class Amplitude Otherwise mapAmplitude could be abused for bringing amplitudes and respective sample values out of sync For mapping amplitudes that are nested in some pairs use it in combination with first and second",
        "hierarchy": "Synthesizer Dimensional Causal Process",
        "module": "Synthesizer.Dimensional.Causal.Process",
        "name": "mapAmplitude",
        "normalized": "(a-\u003ea)-\u003eT b a a c c",
        "package": "synthesizer",
        "partial": "Amplitude",
        "signature": "(amp-\u003eamp)-\u003eT s amp amp yv yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Process.html#v:mapAmplitudeSameType",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Causal.Process",
        "fct-package": "synthesizer",
        "fct-signature": "(amp -\u003e amp) -\u003e T s amp amp yv yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Process.html#mapAmplitudeSameType",
        "fct-type": "unknown",
        "title": "mapAmplitudeSameType"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Causal Process",
        "module": "Synthesizer.Dimensional.Causal.Process",
        "name": "mapAmplitudeSameType",
        "normalized": "(a-\u003ea)-\u003eT b a a c c",
        "package": "synthesizer",
        "partial": "Amplitude Same Type",
        "signature": "(amp-\u003eamp)-\u003eT s amp amp yv yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Process.html#v:second",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Causal.Process",
        "fct-package": "synthesizer",
        "fct-signature": "T s amp0 amp1 yv0 yv1 -\u003e T s (amp, amp0) (amp, amp1) (yv, yv0) (yv, yv1)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Process.html#second",
        "fct-type": "unknown",
        "title": "second"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Causal Process",
        "module": "Synthesizer.Dimensional.Causal.Process",
        "name": "second",
        "normalized": "T a b b c c-\u003eT a(b,b)(b,b)(c,c)(c,c)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T s amp amp yv yv-\u003eT s(amp,amp)(amp,amp)(yv,yv)(yv,yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Causal-Process.html#v:split",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Causal.Process",
        "fct-package": "synthesizer",
        "fct-signature": "T s amp0 amp1 yv0 yv1 -\u003e T s amp2 amp3 yv2 yv3 -\u003e T s (amp0, amp2) (amp1, amp3) (yv0, yv2) (yv1, yv3)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Causal-Process.html#split",
        "fct-type": "unknown",
        "title": "split"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Causal Process",
        "module": "Synthesizer.Dimensional.Causal.Process",
        "name": "split",
        "normalized": "T a b b c c-\u003eT a b b c c-\u003eT a(b,b)(b,b)(c,c)(c,c)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T s amp amp yv yv-\u003eT s amp amp yv yv-\u003eT s(amp,amp)(amp,amp)(yv,yv)(yv,yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-ControlledProcess.html#t:T",
      "description": {
        "fct-module": "Synthesizer.Dimensional.ControlledProcess",
        "fct-package": "synthesizer",
        "fct-signature": "data",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-ControlledProcess.html#T",
        "fct-type": "unknown",
        "title": "T"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional ControlledProcess",
        "module": "Synthesizer.Dimensional.ControlledProcess",
        "name": "T",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-ControlledProcess.html#v:runAsynchronous",
      "description": {
        "fct-module": "Synthesizer.Dimensional.ControlledProcess",
        "fct-package": "synthesizer",
        "fct-signature": "T t ic -\u003e T s u t (T s ec ic a) -\u003e T r u t -\u003e ec -\u003e T s u t a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-ControlledProcess.html#runAsynchronous",
        "fct-type": "unknown",
        "title": "runAsynchronous"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional ControlledProcess",
        "module": "Synthesizer.Dimensional.ControlledProcess",
        "name": "runAsynchronous",
        "normalized": "T a b-\u003eT c d a(T c e b f)-\u003eT g d a-\u003ee-\u003eT c d a f",
        "package": "synthesizer",
        "partial": "Asynchronous",
        "signature": "T t ic-\u003eT s u t(T s ec ic a)-\u003eT r u t-\u003eec-\u003eT s u t a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-ControlledProcess.html#v:runAsynchronous1",
      "description": {
        "fct-module": "Synthesizer.Dimensional.ControlledProcess",
        "fct-package": "synthesizer",
        "fct-signature": "T t ic -\u003e T s u t (T s (T r sig0 ec0) ic a) -\u003e T u t sig0 ec0 -\u003e T s u t a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-ControlledProcess.html#runAsynchronous1",
        "fct-type": "unknown",
        "title": "runAsynchronous1"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional ControlledProcess",
        "module": "Synthesizer.Dimensional.ControlledProcess",
        "name": "runAsynchronous1",
        "normalized": "T a b-\u003eT c d a(T c(T e f g)b h)-\u003eT d a f g-\u003eT c d a h",
        "package": "synthesizer",
        "partial": "Asynchronous",
        "signature": "T t ic-\u003eT s u t(T s(T r sig ec)ic a)-\u003eT u t sig ec-\u003eT s u t a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-ControlledProcess.html#v:runAsynchronous2",
      "description": {
        "fct-module": "Synthesizer.Dimensional.ControlledProcess",
        "fct-package": "synthesizer",
        "fct-signature": "T t ic -\u003e T s u t (T s (T r sig0 ec0, T r sig1 ec1) ic a) -\u003e T u t sig0 ec0 -\u003e T u t sig1 ec1 -\u003e T s u t a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-ControlledProcess.html#runAsynchronous2",
        "fct-type": "unknown",
        "title": "runAsynchronous2"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional ControlledProcess",
        "module": "Synthesizer.Dimensional.ControlledProcess",
        "name": "runAsynchronous2",
        "normalized": "T a b-\u003eT c d a(T c(T e f g,T e f g)b h)-\u003eT d a f g-\u003eT d a f g-\u003eT c d a h",
        "package": "synthesizer",
        "partial": "Asynchronous",
        "signature": "T t ic-\u003eT s u t(T s(T r sig ec,T r sig ec)ic a)-\u003eT u t sig ec-\u003eT u t sig ec-\u003eT s u t a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-ControlledProcess.html#v:runAsynchronous3",
      "description": {
        "fct-module": "Synthesizer.Dimensional.ControlledProcess",
        "fct-package": "synthesizer",
        "fct-signature": "T t ic -\u003e T s u t (T s (T r sig0 ec0, T r sig1 ec1, T r sig2 ec2) ic a) -\u003e T u t sig0 ec0 -\u003e T u t sig1 ec1 -\u003e T u t sig2 ec2 -\u003e T s u t a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-ControlledProcess.html#runAsynchronous3",
        "fct-type": "unknown",
        "title": "runAsynchronous3"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional ControlledProcess",
        "module": "Synthesizer.Dimensional.ControlledProcess",
        "name": "runAsynchronous3",
        "normalized": "T a b-\u003eT c d a(T c(T e f g,T e f g,T e f g)b h)-\u003eT d a f g-\u003eT d a f g-\u003eT d a f g-\u003eT c d a h",
        "package": "synthesizer",
        "partial": "Asynchronous",
        "signature": "T t ic-\u003eT s u t(T s(T r sig ec,T r sig ec,T r sig ec)ic a)-\u003eT u t sig ec-\u003eT u t sig ec-\u003eT u t sig ec-\u003eT s u t a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-ControlledProcess.html#v:runSynchronous",
      "description": {
        "fct-module": "Synthesizer.Dimensional.ControlledProcess",
        "fct-package": "synthesizer",
        "fct-signature": "T s u t (T s ec ic a) -\u003e T s u t (ec -\u003e a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-ControlledProcess.html#runSynchronous",
        "fct-type": "unknown",
        "title": "runSynchronous"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional ControlledProcess",
        "module": "Synthesizer.Dimensional.ControlledProcess",
        "name": "runSynchronous",
        "normalized": "T a b c(T a d e f)-\u003eT a b c(d-\u003ef)",
        "package": "synthesizer",
        "partial": "Synchronous",
        "signature": "T s u t(T s ec ic a)-\u003eT s u t(ec-\u003ea)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-ControlledProcess.html#v:runSynchronous1",
      "description": {
        "fct-module": "Synthesizer.Dimensional.ControlledProcess",
        "fct-package": "synthesizer",
        "fct-signature": "T s u t (T s (T s sig0 ec0) ic a) -\u003e T s u t (T s sig0 ec0 -\u003e a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-ControlledProcess.html#runSynchronous1",
        "fct-type": "unknown",
        "title": "runSynchronous1"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional ControlledProcess",
        "module": "Synthesizer.Dimensional.ControlledProcess",
        "name": "runSynchronous1",
        "normalized": "T a b c(T a(T a d e)f g)-\u003eT a b c(T a d e-\u003eg)",
        "package": "synthesizer",
        "partial": "Synchronous",
        "signature": "T s u t(T s(T s sig ec)ic a)-\u003eT s u t(T s sig ec-\u003ea)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-ControlledProcess.html#v:runSynchronous2",
      "description": {
        "fct-module": "Synthesizer.Dimensional.ControlledProcess",
        "fct-package": "synthesizer",
        "fct-signature": "T s u t (T s (T s sig0 ec0, T s sig1 ec1) ic a) -\u003e T s u t (T s sig0 ec0 -\u003e T s sig1 ec1 -\u003e a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-ControlledProcess.html#runSynchronous2",
        "fct-type": "unknown",
        "title": "runSynchronous2"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional ControlledProcess",
        "module": "Synthesizer.Dimensional.ControlledProcess",
        "name": "runSynchronous2",
        "normalized": "T a b c(T a(T a d e,T a d e)f g)-\u003eT a b c(T a d e-\u003eT a d e-\u003eg)",
        "package": "synthesizer",
        "partial": "Synchronous",
        "signature": "T s u t(T s(T s sig ec,T s sig ec)ic a)-\u003eT s u t(T s sig ec-\u003eT s sig ec-\u003ea)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-ControlledProcess.html#v:runSynchronous3",
      "description": {
        "fct-module": "Synthesizer.Dimensional.ControlledProcess",
        "fct-package": "synthesizer",
        "fct-signature": "T s u t (T s (T s sig0 ec0, T s sig1 ec1, T s sig2 ec2) ic a) -\u003e T s u t (T s sig0 ec0 -\u003e T s sig1 ec1 -\u003e T s sig2 ec2 -\u003e a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-ControlledProcess.html#runSynchronous3",
        "fct-type": "unknown",
        "title": "runSynchronous3"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional ControlledProcess",
        "module": "Synthesizer.Dimensional.ControlledProcess",
        "name": "runSynchronous3",
        "normalized": "T a b c(T a(T a d e,T a d e,T a d e)f g)-\u003eT a b c(T a d e-\u003eT a d e-\u003eT a d e-\u003eg)",
        "package": "synthesizer",
        "partial": "Synchronous",
        "signature": "T s u t(T s(T s sig ec,T s sig ec,T s sig ec)ic a)-\u003eT s u t(T s sig ec-\u003eT s sig ec-\u003eT s sig ec-\u003ea)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Cyclic-Signal.html#t:R",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Cyclic.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "type",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Cyclic-Signal.html#R",
        "fct-type": "unknown",
        "title": "R"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Cyclic Signal",
        "module": "Synthesizer.Dimensional.Cyclic.Signal",
        "name": "R",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Cyclic-Signal.html#t:T",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Cyclic.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "newtype",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Cyclic-Signal.html#T",
        "fct-type": "unknown",
        "title": "T"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Cyclic Signal",
        "module": "Synthesizer.Dimensional.Cyclic.Signal",
        "name": "T",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Cyclic-Signal.html#v:fromPeriod",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Cyclic.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T yv -\u003e R s yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Cyclic-Signal.html#fromPeriod",
        "fct-type": "unknown",
        "title": "fromPeriod"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Cyclic Signal",
        "module": "Synthesizer.Dimensional.Cyclic.Signal",
        "name": "fromPeriod",
        "normalized": "T a-\u003eR b a",
        "package": "synthesizer",
        "partial": "Period",
        "signature": "T yv-\u003eR s yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Cyclic-Signal.html#v:fromPeriodList",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Cyclic.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "[yv] -\u003e R s yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Cyclic-Signal.html#fromPeriodList",
        "fct-type": "unknown",
        "title": "fromPeriodList"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Cyclic Signal",
        "module": "Synthesizer.Dimensional.Cyclic.Signal",
        "name": "fromPeriodList",
        "normalized": "[a]-\u003eR b a",
        "package": "synthesizer",
        "partial": "Period List",
        "signature": "[yv]-\u003eR s yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Cyclic-Signal.html#v:fromSignal",
      "description": {
        "fct-descr": "Periodization of a straight signal.\n",
        "fct-module": "Synthesizer.Dimensional.Cyclic.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e R s yv -\u003e R s yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Cyclic-Signal.html#fromSignal",
        "fct-type": "unknown",
        "title": "fromSignal"
      },
      "index": {
        "description": "Periodization of straight signal",
        "hierarchy": "Synthesizer Dimensional Cyclic Signal",
        "module": "Synthesizer.Dimensional.Cyclic.Signal",
        "name": "fromSignal",
        "normalized": "Int-\u003eR a b-\u003eR a b",
        "package": "synthesizer",
        "partial": "Signal",
        "signature": "Int-\u003eR s yv-\u003eR s yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Cyclic-Signal.html#v:toPeriod",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Cyclic.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "R s yv -\u003e T yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Cyclic-Signal.html#toPeriod",
        "fct-type": "unknown",
        "title": "toPeriod"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Cyclic Signal",
        "module": "Synthesizer.Dimensional.Cyclic.Signal",
        "name": "toPeriod",
        "normalized": "R a b-\u003eT b",
        "package": "synthesizer",
        "partial": "Period",
        "signature": "R s yv-\u003eT yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Cyclic-Signal.html#v:toSignal",
      "description": {
        "fct-descr": "Convert a cyclic signal to a straight signal containing a loop.\n",
        "fct-module": "Synthesizer.Dimensional.Cyclic.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "R s yv -\u003e R s yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Cyclic-Signal.html#toSignal",
        "fct-type": "unknown",
        "title": "toSignal"
      },
      "index": {
        "description": "Convert cyclic signal to straight signal containing loop",
        "hierarchy": "Synthesizer Dimensional Cyclic Signal",
        "module": "Synthesizer.Dimensional.Cyclic.Signal",
        "name": "toSignal",
        "normalized": "R a b-\u003eR a b",
        "package": "synthesizer",
        "partial": "Signal",
        "signature": "R s yv-\u003eR s yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Map.html#t:T",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Map",
        "fct-package": "synthesizer",
        "fct-signature": "newtype",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Map.html#T",
        "fct-type": "unknown",
        "title": "T"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Map",
        "module": "Synthesizer.Dimensional.Map",
        "name": "T",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Map.html#v:balanceLeft",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Map",
        "fct-package": "synthesizer",
        "fct-signature": "T (amp0, (amp1, amp2)) ((amp0, amp1), amp2) (y0, (y1, y2)) ((y0, y1), y2)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Map.html#balanceLeft",
        "fct-type": "unknown",
        "title": "balanceLeft"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Map",
        "module": "Synthesizer.Dimensional.Map",
        "name": "balanceLeft",
        "normalized": "T(a,(a,a))((a,a),a)(b,(b,b))((b,b),b)",
        "package": "synthesizer",
        "partial": "Left",
        "signature": "T(amp,(amp,amp))((amp,amp),amp)(y,(y,y))((y,y),y)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Map.html#v:balanceRight",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Map",
        "fct-package": "synthesizer",
        "fct-signature": "T ((amp0, amp1), amp2) (amp0, (amp1, amp2)) ((y0, y1), y2) (y0, (y1, y2))",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Map.html#balanceRight",
        "fct-type": "unknown",
        "title": "balanceRight"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Map",
        "module": "Synthesizer.Dimensional.Map",
        "name": "balanceRight",
        "normalized": "T((a,a),a)(a,(a,a))((b,b),b)(b,(b,b))",
        "package": "synthesizer",
        "partial": "Right",
        "signature": "T((amp,amp),amp)(amp,(amp,amp))((y,y),y)(y,(y,y))"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Map.html#v:double",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Map",
        "fct-package": "synthesizer",
        "fct-signature": "T amp (amp, amp) y (y, y)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Map.html#double",
        "fct-type": "unknown",
        "title": "double"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Map",
        "module": "Synthesizer.Dimensional.Map",
        "name": "double",
        "normalized": "T a(a,a)b(b,b)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T amp(amp,amp)y(y,y)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Map.html#v:fst",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Map",
        "fct-package": "synthesizer",
        "fct-signature": "T (amp0, amp1) amp0 (y0, y1) y0",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Map.html#fst",
        "fct-type": "unknown",
        "title": "fst"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Map",
        "module": "Synthesizer.Dimensional.Map",
        "name": "fst",
        "normalized": "T(a,a)a(b,b)b",
        "package": "synthesizer",
        "partial": "",
        "signature": "T(amp,amp)amp(y,y)y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Map.html#v:independent",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Map",
        "fct-package": "synthesizer",
        "fct-signature": "(amp0 -\u003e amp1) -\u003e (yv0 -\u003e yv1) -\u003e T amp0 amp1 yv0 yv1",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Map.html#independent",
        "fct-type": "unknown",
        "title": "independent"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Map",
        "module": "Synthesizer.Dimensional.Map",
        "name": "independent",
        "normalized": "(a-\u003ea)-\u003e(b-\u003eb)-\u003eT a a b b",
        "package": "synthesizer",
        "partial": "",
        "signature": "(amp-\u003eamp)-\u003e(yv-\u003eyv)-\u003eT amp amp yv yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Map.html#v:packTriple",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Map",
        "fct-package": "synthesizer",
        "fct-signature": "T (amp0, (amp1, amp2)) (amp0, amp1, amp2) (y0, (y1, y2)) (y0, y1, y2)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Map.html#packTriple",
        "fct-type": "unknown",
        "title": "packTriple"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Map",
        "module": "Synthesizer.Dimensional.Map",
        "name": "packTriple",
        "normalized": "T(a,(a,a))(a,a,a)(b,(b,b))(b,b,b)",
        "package": "synthesizer",
        "partial": "Triple",
        "signature": "T(amp,(amp,amp))(amp,amp,amp)(y,(y,y))(y,y,y)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Map.html#v:snd",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Map",
        "fct-package": "synthesizer",
        "fct-signature": "T (amp0, amp1) amp1 (y0, y1) y1",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Map.html#snd",
        "fct-type": "unknown",
        "title": "snd"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Map",
        "module": "Synthesizer.Dimensional.Map",
        "name": "snd",
        "normalized": "T(a,a)a(b,b)b",
        "package": "synthesizer",
        "partial": "",
        "signature": "T(amp,amp)amp(y,y)y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Map.html#v:swap",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Map",
        "fct-package": "synthesizer",
        "fct-signature": "T (amp0, amp1) (amp1, amp0) (y0, y1) (y1, y0)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Map.html#swap",
        "fct-type": "unknown",
        "title": "swap"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Map",
        "module": "Synthesizer.Dimensional.Map",
        "name": "swap",
        "normalized": "T(a,a)(a,a)(b,b)(b,b)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T(amp,amp)(amp,amp)(y,y)(y,y)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Map.html#v:unpackTriple",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Map",
        "fct-package": "synthesizer",
        "fct-signature": "T (amp0, amp1, amp2) (amp0, (amp1, amp2)) (y0, y1, y2) (y0, (y1, y2))",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Map.html#unpackTriple",
        "fct-type": "unknown",
        "title": "unpackTriple"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Map",
        "module": "Synthesizer.Dimensional.Map",
        "name": "unpackTriple",
        "normalized": "T(a,a,a)(a,(a,a))(b,b,b)(b,(b,b))",
        "package": "synthesizer",
        "partial": "Triple",
        "signature": "T(amp,amp,amp)(amp,(amp,amp))(y,y,y)(y,(y,y))"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Overview.html",
      "description": {
        "fct-descr": "\u003cp\u003eWe use a hierarchy of signal wrappers\nin order to capture all features of a signal.\n\u003c/p\u003e\u003cp\u003eAt the bottom there is the signal storage as described in \u003ca\u003eSynthesizer.Storage\u003c/a\u003e.\nWith the element type of the storage\nyou decide whether you want mono or stereo signal\n(\u003ca\u003eSynthesizer.Frame.Stereo\u003c/a\u003e),\nand you decide on the precision, fixed point vs. floating point and so on.\nHowever, due to Haskell's flexible type system\nyou don't need to decide finally on a type for your signal processing routines.\nE.g. mono and stereo signals can be handled together\nusing the \u003ca\u003eAlgebra.Module\u003c/a\u003e class from the numeric-prelude package.\n(An algebraic module is a vector space\nwithout requiring availability of a division of scalars).\n\u003c/p\u003e\u003cp\u003eYou can use the storage types directly\nusing the functions from \u003ca\u003eSynthesizer.Plain.Signal\u003c/a\u003e\nand \u003ca\u003eSynthesizer.Generic.Signal\u003c/a\u003e and its cousins.\nThis is in a way simple,\nsince you do not have bother with units and complicated types,\nbut you miss type safety and re-usability.\nE.g. you have to give frequencies in ratios of the sampling rate.\nIf you later decide to change the sampling rate, you must rewrite all time and frequency values.\nIf you anticipate changes in sampling rate,\nyou may write those values as ratios of a global sampling rate\nright from the start.\nBut you might want different sample rates\nfor some parts of the computation,\nor you may want sample rates that have no time dimension,\nbut say, length dimension.\nThe advanced system described below handles all these cases for you.\n\u003c/p\u003e\u003cp\u003eOk, we said that at the bottom, there is the signal storage.\nThe next level is the decision\nwhether the raw data is interpreted as straight or as cyclic signal.\nMost of the signals you are using,\nwill be \u003ca\u003eSynthesizer.Dimensional.Straight.Signal\u003c/a\u003e.\nCurrently, \u003ca\u003eSynthesizer.Dimensional.Cyclic.Signal\u003c/a\u003e\nis only needed for Fourier transform and as input to oscillators.\nTo get a straight signal out of storablevector data,\nyou will write\n\u003c/p\u003e\u003cpre\u003e import qualified Synthesizer.Storable.Signal as Store\n import qualified Synthesizer.Dimensional.Straight.Signal as Straight\n\n type MySignal y = Straight.T Store.T y\n\u003c/pre\u003e\u003cp\u003eNote that \u003ctt\u003eStraight.T\u003c/tt\u003e has the type constructor \u003ctt\u003eStore.T\u003c/tt\u003e as first argument,\nnot the entire storage type \u003ctt\u003eStore.T\u003c/tt\u003e.\nThis way compositions of such wrappers are automatically Functors.\nHowever, I'm not completely certain, that this is good,\nsince \u003ctt\u003e\u003ca\u003efmap\u003c/a\u003e\u003c/tt\u003e allows to do unintended things\n(e.g. switch from a numeric to a non-numeric element type).\n\u003c/p\u003e\u003cp\u003eThe next level copes with amplitudes and their units.\nAn amplitude and its unit are provided per signal, not per sample.\nWe think that it is the most natural way, and it is also an efficient one.\nSince the signal might be a stereo signal,\nthe numeric type of the amplitude can differ from the storage element type.\nUsually, the first and the latter one are related by an \u003ca\u003eAlgebra.Module\u003c/a\u003e constraint.\nYou get a signal with amplitude by\n\u003c/p\u003e\u003cpre\u003e import qualified Synthesizer.Dimensional.Amplitude.Signal as Amp\n\n type MySignal v y yv = Amp.T v y (Straight.T Store.T) yv\n\u003c/pre\u003e\u003cp\u003ewhere \u003ctt\u003ev\u003c/tt\u003e is the dimension of the amplitude of type \u003ctt\u003ey\u003c/tt\u003e.\nThe storage element type, a vector with respect to \u003ctt\u003ey\u003c/tt\u003e, is of type \u003ctt\u003eyv\u003c/tt\u003e.\n\u003c/p\u003e\u003cp\u003eIn some cases, an amplitude with a physical dimension just makes no sense.\nImagine a control signal consisting of \u003ctt\u003eBool\u003c/tt\u003e elements like a gate signal,\nor a signal containing elements of an enumeration\nfor switching between signals depending on the time.\n\u003c/p\u003e\u003cp\u003eFor some control signals the amplitude unit is one.\nWe call these signals flat.\nIn this case you can choose\nwhether you use an explicit amplitude with \u003ctt\u003eScalar\u003c/tt\u003e dimension\nor you use no amplitude wrapper at all.\nMost signal processors handle both kinds of flat signals\nby the corresponding type class in \u003ca\u003eSynthesizer.Dimensional.Abstraction.Flat\u003c/a\u003e.\n\u003c/p\u003e\u003cp\u003eThere is a special signal type for Dirac impulses,\nthat does not fit to that scheme,\nthat is, it cannot be equipped with an amplitude.\nSee \u003ca\u003eSynthesizer.Dimensional.Rate.Dirac\u003c/a\u003e.\n\u003c/p\u003e\u003cp\u003eLast but not least we want to look on how to handle sample rates.\nOur goal is to write signal processes\nthat do not depend on the sample rate.\nE.g. we want to have an exponential decay with a half-life of one second.\nA second means 44100 samples at 44100 Hz sample rate,\nor 22050 samples at 22050 Hz sample rate.\nWe want to abstract from the particular number of samples\nin order to be able generate a signal at any sample rate (i.e. quality) we like.\nThe ideal representation of a signal is be a real function,\nand we try to come close to it.\n(Not quite, because a Dirac impulse is not a real function,\nbut we need it as identity element of the convolution.)\n\u003c/p\u003e\u003cp\u003eTo this end we can equip a discrete signal with a sample rate,\nsee \u003ca\u003eSynthesizer.Dimensional.RateWrapper\u003c/a\u003e.\nThis alone however, leads to several problems:\n\u003c/p\u003e\u003cul\u003e\u003cli\u003e When combining some signals,\n  it is not clear how to cope with different sample rates.\n  Say you want to mix signals \u003ctt\u003ea\u003c/tt\u003e and \u003ctt\u003eb\u003c/tt\u003e.\n  Shall \u003ctt\u003emix a b\u003c/tt\u003e have the sample rate of \u003ctt\u003ea\u003c/tt\u003e or that of \u003ctt\u003eb\u003c/tt\u003e or a new one?\n  How shall the signals convert to a new rate?\n  Since an automatically chosen method\n  can always be inappropriate (either too slow or too low quality),\n  the caller have to explicitly give tell it to mix.\n  This is not only inconvenient for the caller,\n  but also requires a lot of boilerplate code in functions like mix.\n\u003c/li\u003e\u003cli\u003e An alternative solution to the problem above is,\n  to check before mixing whether sample rates are equal,\n  and abort with an error if they differ.\n  This way no decisions on the sample rate\n  and subsequent conversions are necessary.\n  This still needs boilerplate in signal processors.\n  It also does not tell the user by types,\n  whether a processor can handle differing sample rates.\n  Generally, dynamic checks are both inefficient\n  and an inferior way to indicate programming errors,\n  since they are only catched at run-time, if at all.\n\u003c/li\u003e\u003cli\u003e Both solutions suffer from the inconvenience\n  to specify the sample rate in all leaves,\n  e.g. \u003ctt\u003emix (oscillator 44100 10) (oscillator 44100 11)\u003c/tt\u003e.\n\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eNaturally, when you want to get a signal with rate 44100 Hz sample rate,\nyou perform all signal processes at this rate.\nEven if want to use oversampling,\nthen you will perform all signal processes at the higher rate\nand downsample only once at the end.\nThus we introduce a way\nto run a set of signal processes in the context of a sample rate.\nIt is still sensible and possible\nto escape from this context or enter it again.\n\u003c/p\u003e\u003cul\u003e\u003cli\u003e You need to be to enter a sample rate context\n  with a signal read from disk,\n  with a sample rate that is not known at compile time.\n  You might also intensionally compute a control signal at a low sample rate\n  and convert it to a sample rate context for filtering.\n  Generally the scheme of functions that allow different sample rates is:\n  Use the sample rate of the output signal as context.\n  Take all signals with independent sample rate\n  as inputs outside the context.\n  The according function is Synthesizer.Dimensional.Rate.Filter.frequencyModulationDecoupled.\n\u003c/li\u003e\u003cli\u003e When you want to play a sound or write it to disk,\n  you must choose a sample rate and fix the computation to that rate.\n  This conversion however means to run the whole computation within one sample rate context,\n  since everything in that context depends on the sample rate.\n  The according function is Synthesizer.Dimensional.RateWrapper.runProcess.\n\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eThe sample rate context is provided by \u003ca\u003eSynthesizer.Dimensional.Process\u003c/a\u003e.\nIt is a Reader monad,\nbut we only need applicative functor methods for signal processing.\nThis context is equipped with the type parameter \u003ctt\u003es\u003c/tt\u003e,\njust as we know it from the Control.Monad.ST.ST monad.\nIt also serves the same purpose:\nWe tag both signals and the sample rate context with the type parameter \u003ctt\u003es\u003c/tt\u003e.\nThe \u003ctt\u003eforall s\u003c/tt\u003e constraint for \u003ctt\u003erunProcess\u003c/tt\u003e ensures,\nthat a signal with such a tag remains in the context.\nYou can only escape the sample rate context\nby rendering the signal and attach the sample rate to the rendered signal.\n\u003c/p\u003e\u003cp\u003eThe sample rate tag type is provided by\n\u003ca\u003eSynthesizer.Dimensional.RatePhantom\u003c/a\u003e.\nHaskell's type system does not allow to restrict the types that it can wrap.\nSo in principle you can abuse it to wrap many things.\nHowever we do not provide such functions\nand this way the wrappable types ar restricted anyway.\n\u003c/p\u003e",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Overview.html",
        "fct-type": "unknown",
        "title": ""
      },
      "index": {
        "description": "We use hierarchy of signal wrappers in order to capture all features of signal At the bottom there is the signal storage as described in Synthesizer.Storage With the element type of the storage you decide whether you want mono or stereo signal Synthesizer.Frame.Stereo and you decide on the precision fixed point vs floating point and so on However due to Haskell flexible type system you don need to decide finally on type for your signal processing routines E.g mono and stereo signals can be handled together using the Algebra.Module class from the numeric-prelude package An algebraic module is vector space without requiring availability of division of scalars You can use the storage types directly using the functions from Synthesizer.Plain.Signal and Synthesizer.Generic.Signal and its cousins This is in way simple since you do not have bother with units and complicated types but you miss type safety and re-usability E.g you have to give frequencies in ratios of the sampling rate If you later decide to change the sampling rate you must rewrite all time and frequency values If you anticipate changes in sampling rate you may write those values as ratios of global sampling rate right from the start But you might want different sample rates for some parts of the computation or you may want sample rates that have no time dimension but say length dimension The advanced system described below handles all these cases for you Ok we said that at the bottom there is the signal storage The next level is the decision whether the raw data is interpreted as straight or as cyclic signal Most of the signals you are using will be Synthesizer.Dimensional.Straight.Signal Currently Synthesizer.Dimensional.Cyclic.Signal is only needed for Fourier transform and as input to oscillators To get straight signal out of storablevector data you will write import qualified Synthesizer.Storable.Signal as Store import qualified Synthesizer.Dimensional.Straight.Signal as Straight type MySignal Straight.T Store.T Note that Straight.T has the type constructor Store.T as first argument not the entire storage type Store.T This way compositions of such wrappers are automatically Functors However not completely certain that this is good since fmap allows to do unintended things e.g switch from numeric to non-numeric element type The next level copes with amplitudes and their units An amplitude and its unit are provided per signal not per sample We think that it is the most natural way and it is also an efficient one Since the signal might be stereo signal the numeric type of the amplitude can differ from the storage element type Usually the first and the latter one are related by an Algebra.Module constraint You get signal with amplitude by import qualified Synthesizer.Dimensional.Amplitude.Signal as Amp type MySignal yv Amp.T Straight.T Store.T yv where is the dimension of the amplitude of type The storage element type vector with respect to is of type yv In some cases an amplitude with physical dimension just makes no sense Imagine control signal consisting of Bool elements like gate signal or signal containing elements of an enumeration for switching between signals depending on the time For some control signals the amplitude unit is one We call these signals flat In this case you can choose whether you use an explicit amplitude with Scalar dimension or you use no amplitude wrapper at all Most signal processors handle both kinds of flat signals by the corresponding type class in Synthesizer.Dimensional.Abstraction.Flat There is special signal type for Dirac impulses that does not fit to that scheme that is it cannot be equipped with an amplitude See Synthesizer.Dimensional.Rate.Dirac Last but not least we want to look on how to handle sample rates Our goal is to write signal processes that do not depend on the sample rate E.g we want to have an exponential decay with half-life of one second second means samples at Hz sample rate or samples at Hz sample rate We want to abstract from the particular number of samples in order to be able generate signal at any sample rate i.e quality we like The ideal representation of signal is be real function and we try to come close to it Not quite because Dirac impulse is not real function but we need it as identity element of the convolution To this end we can equip discrete signal with sample rate see Synthesizer.Dimensional.RateWrapper This alone however leads to several problems When combining some signals it is not clear how to cope with different sample rates Say you want to mix signals and Shall mix have the sample rate of or that of or new one How shall the signals convert to new rate Since an automatically chosen method can always be inappropriate either too slow or too low quality the caller have to explicitly give tell it to mix This is not only inconvenient for the caller but also requires lot of boilerplate code in functions like mix An alternative solution to the problem above is to check before mixing whether sample rates are equal and abort with an error if they differ This way no decisions on the sample rate and subsequent conversions are necessary This still needs boilerplate in signal processors It also does not tell the user by types whether processor can handle differing sample rates Generally dynamic checks are both inefficient and an inferior way to indicate programming errors since they are only catched at run-time if at all Both solutions suffer from the inconvenience to specify the sample rate in all leaves e.g mix oscillator oscillator Naturally when you want to get signal with rate Hz sample rate you perform all signal processes at this rate Even if want to use oversampling then you will perform all signal processes at the higher rate and downsample only once at the end Thus we introduce way to run set of signal processes in the context of sample rate It is still sensible and possible to escape from this context or enter it again You need to be to enter sample rate context with signal read from disk with sample rate that is not known at compile time You might also intensionally compute control signal at low sample rate and convert it to sample rate context for filtering Generally the scheme of functions that allow different sample rates is Use the sample rate of the output signal as context Take all signals with independent sample rate as inputs outside the context The according function is Synthesizer.Dimensional.Rate.Filter.frequencyModulationDecoupled When you want to play sound or write it to disk you must choose sample rate and fix the computation to that rate This conversion however means to run the whole computation within one sample rate context since everything in that context depends on the sample rate The according function is Synthesizer.Dimensional.RateWrapper.runProcess The sample rate context is provided by Synthesizer.Dimensional.Process It is Reader monad but we only need applicative functor methods for signal processing This context is equipped with the type parameter just as we know it from the Control.Monad.ST.ST monad It also serves the same purpose We tag both signals and the sample rate context with the type parameter The forall constraint for runProcess ensures that signal with such tag remains in the context You can only escape the sample rate context by rendering the signal and attach the sample rate to the rendered signal The sample rate tag type is provided by Synthesizer.Dimensional.RatePhantom Haskell type system does not allow to restrict the types that it can wrap So in principle you can abuse it to wrap many things However we do not provide such functions and this way the wrappable types ar restricted anyway",
        "hierarchy": "",
        "module": "",
        "name": "",
        "normalized": "",
        "package": "",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Process.html#t:T",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Process",
        "fct-package": "synthesizer",
        "fct-signature": "newtype",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Process.html#T",
        "fct-type": "unknown",
        "title": "T"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Process",
        "module": "Synthesizer.Dimensional.Process",
        "name": "T",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Process.html#v:$#",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Process",
        "fct-package": "synthesizer",
        "fct-signature": "f (a -\u003e b) -\u003e a -\u003e f b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-ApplicativeUtility.html#%24%23",
        "fct-type": "unknown",
        "title": "$#"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Process",
        "module": "Synthesizer.Dimensional.Process",
        "name": "$#",
        "normalized": "a(b-\u003ec)-\u003eb-\u003ea c",
        "package": "synthesizer",
        "partial": "",
        "signature": "f(a-\u003eb)-\u003ea-\u003ef b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Process.html#v:$:",
      "description": {
        "fct-descr": "This corresponds to \u003ctt\u003e\u003ca\u003e\u003c*\u003e\u003c/a\u003e\u003c/tt\u003e\n",
        "fct-module": "Synthesizer.Dimensional.Process",
        "fct-package": "synthesizer",
        "fct-signature": "f (a -\u003e b) -\u003e f a -\u003e f b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-ApplicativeUtility.html#%24%3A",
        "fct-type": "unknown",
        "title": "$:"
      },
      "index": {
        "description": "This corresponds to",
        "hierarchy": "Synthesizer Dimensional Process",
        "module": "Synthesizer.Dimensional.Process",
        "name": "$:",
        "normalized": "a(b-\u003ec)-\u003ea b-\u003ea c",
        "package": "synthesizer",
        "partial": "",
        "signature": "f(a-\u003eb)-\u003ef a-\u003ef b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Process.html#v:$::",
      "description": {
        "fct-descr": "Instead of \u003ctt\u003emixMulti $:: map f xs\u003c/tt\u003e\nthe caller should write \u003ctt\u003emixMulti $: mapM f xs\u003c/tt\u003e\nin order to save the user from learning another infix operator.\n",
        "fct-module": "Synthesizer.Dimensional.Process",
        "fct-package": "synthesizer",
        "fct-signature": "f (t a -\u003e b) -\u003e t (f a) -\u003e f b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-ApplicativeUtility.html#%24%3A%3A",
        "fct-type": "unknown",
        "title": "$::"
      },
      "index": {
        "description": "Instead of mixMulti map xs the caller should write mixMulti mapM xs in order to save the user from learning another infix operator",
        "hierarchy": "Synthesizer Dimensional Process",
        "module": "Synthesizer.Dimensional.Process",
        "name": "$::",
        "normalized": "a(b c-\u003ed)-\u003eb(a c)-\u003ea d",
        "package": "synthesizer",
        "partial": "",
        "signature": "f(t a-\u003eb)-\u003et(f a)-\u003ef b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Process.html#v:$^",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Process",
        "fct-package": "synthesizer",
        "fct-signature": "(a -\u003e b) -\u003e f a -\u003e f b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-ApplicativeUtility.html#%24%5E",
        "fct-type": "unknown",
        "title": "$^"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Process",
        "module": "Synthesizer.Dimensional.Process",
        "name": "$^",
        "normalized": "(a-\u003eb)-\u003ec a-\u003ec b",
        "package": "synthesizer",
        "partial": "",
        "signature": "(a-\u003eb)-\u003ef a-\u003ef b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Process.html#v:.:",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Process",
        "fct-package": "synthesizer",
        "fct-signature": "f (b -\u003e c) -\u003e f (a -\u003e b) -\u003e f (a -\u003e c)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-ApplicativeUtility.html#.%3A",
        "fct-type": "unknown",
        "title": ".:"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Process",
        "module": "Synthesizer.Dimensional.Process",
        "name": ".:",
        "normalized": "a(b-\u003ec)-\u003ea(d-\u003eb)-\u003ea(d-\u003ec)",
        "package": "synthesizer",
        "partial": "",
        "signature": "f(b-\u003ec)-\u003ef(a-\u003eb)-\u003ef(a-\u003ec)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Process.html#v:.^",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Process",
        "fct-package": "synthesizer",
        "fct-signature": "(b -\u003e c) -\u003e f (a -\u003e b) -\u003e f (a -\u003e c)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-ApplicativeUtility.html#.%5E",
        "fct-type": "unknown",
        "title": ".^"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Process",
        "module": "Synthesizer.Dimensional.Process",
        "name": ".^",
        "normalized": "(a-\u003eb)-\u003ec(d-\u003ea)-\u003ec(d-\u003eb)",
        "package": "synthesizer",
        "partial": "",
        "signature": "(b-\u003ec)-\u003ef(a-\u003eb)-\u003ef(a-\u003ec)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Process.html#v:getSampleRate",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Process",
        "fct-package": "synthesizer",
        "fct-signature": "T s u t (T (Recip u) t)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Process.html#getSampleRate",
        "fct-type": "unknown",
        "title": "getSampleRate"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Process",
        "module": "Synthesizer.Dimensional.Process",
        "name": "getSampleRate",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Sample Rate",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Process.html#v:liftP",
      "description": {
        "fct-descr": "Our signal processors have types like \u003ctt\u003ef (a -\u003e b -\u003e c)\u003c/tt\u003e.\nThey could also have the type \u003ctt\u003ea -\u003e b -\u003e f c\u003c/tt\u003e\nor \u003ctt\u003ef a -\u003e f b -\u003e f c\u003c/tt\u003e.\nWe did not choose the last variant for reduction of redundancy in type signatures,\nand we did not choose the second variant for easy composition of processors.\nHowever the forms are freely convertible,\nand if you prefer the last one because you do not want to sprinkle '($:)' in your code,\nthen you may want to convert the processors using the following functions,\nthat can be defined purely in the \u003ctt\u003e\u003ca\u003eApplicative\u003c/a\u003e\u003c/tt\u003e class.\n",
        "fct-module": "Synthesizer.Dimensional.Process",
        "fct-package": "synthesizer",
        "fct-signature": "f (a -\u003e b) -\u003e f a -\u003e f b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-ApplicativeUtility.html#liftP",
        "fct-type": "unknown",
        "title": "liftP"
      },
      "index": {
        "description": "Our signal processors have types like They could also have the type or We did not choose the last variant for reduction of redundancy in type signatures and we did not choose the second variant for easy composition of processors However the forms are freely convertible and if you prefer the last one because you do not want to sprinkle in your code then you may want to convert the processors using the following functions that can be defined purely in the Applicative class",
        "hierarchy": "Synthesizer Dimensional Process",
        "module": "Synthesizer.Dimensional.Process",
        "name": "liftP",
        "normalized": "a(b-\u003ec)-\u003ea b-\u003ea c",
        "package": "synthesizer",
        "partial": "",
        "signature": "f(a-\u003eb)-\u003ef a-\u003ef b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Process.html#v:liftP2",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Process",
        "fct-package": "synthesizer",
        "fct-signature": "f (a -\u003e b -\u003e c) -\u003e f a -\u003e f b -\u003e f c",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-ApplicativeUtility.html#liftP2",
        "fct-type": "unknown",
        "title": "liftP2"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Process",
        "module": "Synthesizer.Dimensional.Process",
        "name": "liftP2",
        "normalized": "a(b-\u003ec-\u003ed)-\u003ea b-\u003ea c-\u003ea d",
        "package": "synthesizer",
        "partial": "",
        "signature": "f(a-\u003eb-\u003ec)-\u003ef a-\u003ef b-\u003ef c"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Process.html#v:liftP3",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Process",
        "fct-package": "synthesizer",
        "fct-signature": "f (a -\u003e b -\u003e c -\u003e d) -\u003e f a -\u003e f b -\u003e f c -\u003e f d",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-ApplicativeUtility.html#liftP3",
        "fct-type": "unknown",
        "title": "liftP3"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Process",
        "module": "Synthesizer.Dimensional.Process",
        "name": "liftP3",
        "normalized": "a(b-\u003ec-\u003ed-\u003ee)-\u003ea b-\u003ea c-\u003ea d-\u003ea e",
        "package": "synthesizer",
        "partial": "",
        "signature": "f(a-\u003eb-\u003ec-\u003ed)-\u003ef a-\u003ef b-\u003ef c-\u003ef d"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Process.html#v:liftP4",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Process",
        "fct-package": "synthesizer",
        "fct-signature": "f (a -\u003e b -\u003e c -\u003e d -\u003e e) -\u003e f a -\u003e f b -\u003e f c -\u003e f d -\u003e f e",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-ApplicativeUtility.html#liftP4",
        "fct-type": "unknown",
        "title": "liftP4"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Process",
        "module": "Synthesizer.Dimensional.Process",
        "name": "liftP4",
        "normalized": "a(b-\u003ec-\u003ed-\u003ee-\u003ef)-\u003ea b-\u003ea c-\u003ea d-\u003ea e-\u003ea f",
        "package": "synthesizer",
        "partial": "",
        "signature": "f(a-\u003eb-\u003ec-\u003ed-\u003ee)-\u003ef a-\u003ef b-\u003ef c-\u003ef d-\u003ef e"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Process.html#v:loop",
      "description": {
        "fct-descr": "process chain that shall be looped \n",
        "fct-module": "Synthesizer.Dimensional.Process",
        "fct-package": "synthesizer",
        "fct-signature": "f (a -\u003e a)-\u003e f a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-ApplicativeUtility.html#loop",
        "fct-type": "unknown",
        "title": "loop"
      },
      "index": {
        "description": "process chain that shall be looped",
        "hierarchy": "Synthesizer Dimensional Process",
        "module": "Synthesizer.Dimensional.Process",
        "name": "loop",
        "normalized": "a(b-\u003eb)-\u003ea b",
        "package": "synthesizer",
        "partial": "",
        "signature": "f(a-\u003ea)-\u003ef a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Process.html#v:pure",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Process",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e T s u t a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Process.html#pure",
        "fct-type": "unknown",
        "title": "pure"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Process",
        "module": "Synthesizer.Dimensional.Process",
        "name": "pure",
        "normalized": "a-\u003eT b c d a",
        "package": "synthesizer",
        "partial": "",
        "signature": "a-\u003eT s u t a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Process.html#v:run",
      "description": {
        "fct-descr": "Get results from the Process monad.\nYou can obtain only signals (or other values)\nthat do not implicitly depend on the sample rate,\nthat is value without the \u003ctt\u003es\u003c/tt\u003e type parameter.\n",
        "fct-module": "Synthesizer.Dimensional.Process",
        "fct-package": "synthesizer",
        "fct-signature": "T (Recip u) t -\u003e (forall s.  T s u t a) -\u003e a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Process.html#run",
        "fct-type": "unknown",
        "title": "run"
      },
      "index": {
        "description": "Get results from the Process monad You can obtain only signals or other values that do not implicitly depend on the sample rate that is value without the type parameter",
        "hierarchy": "Synthesizer Dimensional Process",
        "module": "Synthesizer.Dimensional.Process",
        "name": "run",
        "normalized": "T(Recip a)b-\u003e(c d T e a b f)-\u003ef",
        "package": "synthesizer",
        "partial": "",
        "signature": "T(Recip u)t-\u003e(forall s. T s u t a)-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Process.html#v:toFrequencyDimension",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Process",
        "fct-package": "synthesizer",
        "fct-signature": "t -\u003e T s u t (T (Recip u) t)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Process.html#toFrequencyDimension",
        "fct-type": "unknown",
        "title": "toFrequencyDimension"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Process",
        "module": "Synthesizer.Dimensional.Process",
        "name": "toFrequencyDimension",
        "normalized": "a-\u003eT b c a(T(Recip c)a)",
        "package": "synthesizer",
        "partial": "Frequency Dimension",
        "signature": "t-\u003eT s u t(T(Recip u)t)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Process.html#v:toFrequencyScalar",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Process",
        "fct-package": "synthesizer",
        "fct-signature": "T (Recip u) t -\u003e T s u t t",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Process.html#toFrequencyScalar",
        "fct-type": "unknown",
        "title": "toFrequencyScalar"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Process",
        "module": "Synthesizer.Dimensional.Process",
        "name": "toFrequencyScalar",
        "normalized": "T(Recip a)b-\u003eT c a b b",
        "package": "synthesizer",
        "partial": "Frequency Scalar",
        "signature": "T(Recip u)t-\u003eT s u t t"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Process.html#v:toTimeDimension",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Process",
        "fct-package": "synthesizer",
        "fct-signature": "t -\u003e T s u t (T u t)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Process.html#toTimeDimension",
        "fct-type": "unknown",
        "title": "toTimeDimension"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Process",
        "module": "Synthesizer.Dimensional.Process",
        "name": "toTimeDimension",
        "normalized": "a-\u003eT b c a(T c a)",
        "package": "synthesizer",
        "partial": "Time Dimension",
        "signature": "t-\u003eT s u t(T u t)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Process.html#v:toTimeScalar",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Process",
        "fct-package": "synthesizer",
        "fct-signature": "T u t -\u003e T s u t t",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Process.html#toTimeScalar",
        "fct-type": "unknown",
        "title": "toTimeScalar"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Process",
        "module": "Synthesizer.Dimensional.Process",
        "name": "toTimeScalar",
        "normalized": "T a b-\u003eT c a b b",
        "package": "synthesizer",
        "partial": "Time Scalar",
        "signature": "T u t-\u003eT s u t t"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Process.html#v:withParam",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Process",
        "fct-package": "synthesizer",
        "fct-signature": "(a -\u003e T s u t b) -\u003e T s u t (a -\u003e b)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Process.html#withParam",
        "fct-type": "unknown",
        "title": "withParam"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Process",
        "module": "Synthesizer.Dimensional.Process",
        "name": "withParam",
        "normalized": "(a-\u003eT b c d e)-\u003eT b c d(a-\u003ee)",
        "package": "synthesizer",
        "partial": "Param",
        "signature": "(a-\u003eT s u t b)-\u003eT s u t(a-\u003eb)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Rate-Analysis.html#v:centroid",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Rate.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "T u q S q -\u003e T u q",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Rate-Analysis.html#centroid",
        "fct-type": "unknown",
        "title": "centroid"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Rate Analysis",
        "module": "Synthesizer.Dimensional.Rate.Analysis",
        "name": "centroid",
        "normalized": "T a b S b-\u003eT a b",
        "package": "synthesizer",
        "partial": "",
        "signature": "T u q S q-\u003eT u q"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Rate-Analysis.html#v:centroidProc",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Rate.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "T s u y (R s y -\u003e T u y)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Rate-Analysis.html#centroidProc",
        "fct-type": "unknown",
        "title": "centroidProc"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Rate Analysis",
        "module": "Synthesizer.Dimensional.Rate.Analysis",
        "name": "centroidProc",
        "normalized": "T a b c(R a c-\u003eT b c)",
        "package": "synthesizer",
        "partial": "Proc",
        "signature": "T s u y(R s y-\u003eT u y)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Rate-Analysis.html#v:length",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Rate.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "T u t S yv -\u003e T u t",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Rate-Analysis.html#length",
        "fct-type": "unknown",
        "title": "length"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Rate Analysis",
        "module": "Synthesizer.Dimensional.Rate.Analysis",
        "name": "length",
        "normalized": "T a b S c-\u003eT a b",
        "package": "synthesizer",
        "partial": "",
        "signature": "T u t S yv-\u003eT u t"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Rate-Analysis.html#v:lengthProc",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Rate.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "T s u y (R s y -\u003e T u y)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Rate-Analysis.html#lengthProc",
        "fct-type": "unknown",
        "title": "lengthProc"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Rate Analysis",
        "module": "Synthesizer.Dimensional.Rate.Analysis",
        "name": "lengthProc",
        "normalized": "T a b c(R a c-\u003eT b c)",
        "package": "synthesizer",
        "partial": "Proc",
        "signature": "T s u y(R s y-\u003eT u y)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Rate-Control.html#v:constant",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Rate.Control",
        "fct-package": "synthesizer",
        "fct-signature": "T s u t (R s y)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Rate-Control.html#constant",
        "fct-type": "unknown",
        "title": "constant"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Rate Control",
        "module": "Synthesizer.Dimensional.Rate.Control",
        "name": "constant",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Rate-Control.html#v:exponential",
      "description": {
        "fct-descr": "time where the function reaches 1/e of the initial value \n",
        "fct-module": "Synthesizer.Dimensional.Rate.Control",
        "fct-package": "synthesizer",
        "fct-signature": "T u q-\u003e T s u q (R s q)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Rate-Control.html#exponential",
        "fct-type": "unknown",
        "title": "exponential"
      },
      "index": {
        "description": "time where the function reaches of the initial value",
        "hierarchy": "Synthesizer Dimensional Rate Control",
        "module": "Synthesizer.Dimensional.Rate.Control",
        "name": "exponential",
        "normalized": "T a b-\u003eT c a b(R c b)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T u q-\u003eT s u q(R s q)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Rate-Control.html#v:exponential2",
      "description": {
        "fct-descr": "half life, time where the function reaches 1/2 of the initial value \n",
        "fct-module": "Synthesizer.Dimensional.Rate.Control",
        "fct-package": "synthesizer",
        "fct-signature": "T u q-\u003e T s u q (R s q)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Rate-Control.html#exponential2",
        "fct-type": "unknown",
        "title": "exponential2"
      },
      "index": {
        "description": "half life time where the function reaches of the initial value",
        "hierarchy": "Synthesizer Dimensional Rate Control",
        "module": "Synthesizer.Dimensional.Rate.Control",
        "name": "exponential2",
        "normalized": "T a b-\u003eT c a b(R c b)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T u q-\u003eT s u q(R s q)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Rate-Control.html#v:linear",
      "description": {
        "fct-descr": "distance until curve reaches one \n",
        "fct-module": "Synthesizer.Dimensional.Rate.Control",
        "fct-package": "synthesizer",
        "fct-signature": "T u q-\u003e T s u q (R s q)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Rate-Control.html#linear",
        "fct-type": "unknown",
        "title": "linear"
      },
      "index": {
        "description": "distance until curve reaches one",
        "hierarchy": "Synthesizer Dimensional Rate Control",
        "module": "Synthesizer.Dimensional.Rate.Control",
        "name": "linear",
        "normalized": "T a b-\u003eT c a b(R c b)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T u q-\u003eT s u q(R s q)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Rate-Cut.html#v:drop",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Rate.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "T u t -\u003e T s u t (T s sig y -\u003e T s sig y)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Rate-Cut.html#drop",
        "fct-type": "unknown",
        "title": "drop"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Rate Cut",
        "module": "Synthesizer.Dimensional.Rate.Cut",
        "name": "drop",
        "normalized": "T a b-\u003eT c a b(T c d e-\u003eT c d e)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T u t-\u003eT s u t(T s sig y-\u003eT s sig y)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Rate-Cut.html#v:take",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Rate.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "T u t -\u003e T s u t (T s sig y -\u003e T s sig y)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Rate-Cut.html#take",
        "fct-type": "unknown",
        "title": "take"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Rate Cut",
        "module": "Synthesizer.Dimensional.Rate.Cut",
        "name": "take",
        "normalized": "T a b-\u003eT c a b(T c d e-\u003eT c d e)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T u t-\u003eT s u t(T s sig y-\u003eT s sig y)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Rate-Dirac.html#t:T",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Rate.Dirac",
        "fct-package": "synthesizer",
        "fct-signature": "newtype",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Rate-Dirac.html#T",
        "fct-type": "unknown",
        "title": "T"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Rate Dirac",
        "module": "Synthesizer.Dimensional.Rate.Dirac",
        "name": "T",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Rate-Dirac.html#v:toAmplitudeSignal",
      "description": {
        "fct-descr": "This is the most frequently needed transformation\nof a stream of peaks, if not the only one.\nIt converts to a signal of peaks with area 1.\nThis convention is especially useful for smoothing filters\nthat produce frequency progress curves from zero crossings.\n",
        "fct-module": "Synthesizer.Dimensional.Rate.Dirac",
        "fct-package": "synthesizer",
        "fct-signature": "T s u q (T s sig -\u003e T s (D (Recip u) q (T sig)) q)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Rate-Dirac.html#toAmplitudeSignal",
        "fct-type": "unknown",
        "title": "toAmplitudeSignal"
      },
      "index": {
        "description": "This is the most frequently needed transformation of stream of peaks if not the only one It converts to signal of peaks with area This convention is especially useful for smoothing filters that produce frequency progress curves from zero crossings",
        "hierarchy": "Synthesizer Dimensional Rate Dirac",
        "module": "Synthesizer.Dimensional.Rate.Dirac",
        "name": "toAmplitudeSignal",
        "normalized": "T a b c(T a d-\u003eT a(D(Recip b)c(T d))c)",
        "package": "synthesizer",
        "partial": "Amplitude Signal",
        "signature": "T s u q(T s sig-\u003eT s(D(Recip u)q(T sig))q)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Rate-Filter.html#v:allpassCascade",
      "description": {
        "fct-descr": "order, number of filters in the cascade \nthe phase shift to be achieved for the given frequency \n",
        "fct-module": "Synthesizer.Dimensional.Rate.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "Int-\u003e q-\u003e T s u q (R s (Recip u) q q -\u003e T s sig yv -\u003e T s sig yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Rate-Filter.html#allpassCascade",
        "fct-type": "unknown",
        "title": "allpassCascade"
      },
      "index": {
        "description": "order number of filters in the cascade the phase shift to be achieved for the given frequency",
        "hierarchy": "Synthesizer Dimensional Rate Filter",
        "module": "Synthesizer.Dimensional.Rate.Filter",
        "name": "allpassCascade",
        "normalized": "Int-\u003ea-\u003eT b c a(R b(Recip c)a a-\u003eT b d e-\u003eT b d e)",
        "package": "synthesizer",
        "partial": "Cascade",
        "signature": "Int-\u003eq-\u003eT s u q(R s(Recip u)q q-\u003eT s sig yv-\u003eT s sig yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Rate-Filter.html#v:allpassFlangerPhase",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Rate.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Rate-Filter.html#allpassFlangerPhase",
        "fct-type": "unknown",
        "title": "allpassFlangerPhase"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Rate Filter",
        "module": "Synthesizer.Dimensional.Rate.Filter",
        "name": "allpassFlangerPhase",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Flanger Phase",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Rate-Filter.html#v:bandlimitFromUniversal",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Rate.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "T s sig (Result yv) -\u003e T s sig yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Rate-Filter.html#bandlimitFromUniversal",
        "fct-type": "unknown",
        "title": "bandlimitFromUniversal"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Rate Filter",
        "module": "Synthesizer.Dimensional.Rate.Filter",
        "name": "bandlimitFromUniversal",
        "normalized": "T a b(Result c)-\u003eT a b c",
        "package": "synthesizer",
        "partial": "From Universal",
        "signature": "T s sig(Result yv)-\u003eT s sig yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Rate-Filter.html#v:bandpassFromUniversal",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Rate.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "T s sig (Result yv) -\u003e T s sig yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Rate-Filter.html#bandpassFromUniversal",
        "fct-type": "unknown",
        "title": "bandpassFromUniversal"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Rate Filter",
        "module": "Synthesizer.Dimensional.Rate.Filter",
        "name": "bandpassFromUniversal",
        "normalized": "T a b(Result c)-\u003eT a b c",
        "package": "synthesizer",
        "partial": "From Universal",
        "signature": "T s sig(Result yv)-\u003eT s sig yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Rate-Filter.html#v:butterworthHighpass",
      "description": {
        "fct-descr": "Order of the filter, must be even,\n                        the higher the order, the sharper is the separation of frequencies. \n",
        "fct-module": "Synthesizer.Dimensional.Rate.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "Int-\u003e T s u q (T s flat q -\u003e R s (Recip u) q q -\u003e T s sig yv -\u003e T s sig yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Rate-Filter.html#butterworthHighpass",
        "fct-type": "unknown",
        "title": "butterworthHighpass"
      },
      "index": {
        "description": "Order of the filter must be even the higher the order the sharper is the separation of frequencies",
        "hierarchy": "Synthesizer Dimensional Rate Filter",
        "module": "Synthesizer.Dimensional.Rate.Filter",
        "name": "butterworthHighpass",
        "normalized": "Int-\u003eT a b c(T a d c-\u003eR a(Recip b)c c-\u003eT a e f-\u003eT a e f)",
        "package": "synthesizer",
        "partial": "Highpass",
        "signature": "Int-\u003eT s u q(T s flat q-\u003eR s(Recip u)q q-\u003eT s sig yv-\u003eT s sig yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Rate-Filter.html#v:butterworthLowpass",
      "description": {
        "fct-descr": "Order of the filter, must be even,\n                        the higher the order, the sharper is the separation of frequencies. \n",
        "fct-module": "Synthesizer.Dimensional.Rate.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "Int-\u003e T s u q (T s flat q -\u003e R s (Recip u) q q -\u003e T s sig yv -\u003e T s sig yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Rate-Filter.html#butterworthLowpass",
        "fct-type": "unknown",
        "title": "butterworthLowpass"
      },
      "index": {
        "description": "Order of the filter must be even the higher the order the sharper is the separation of frequencies",
        "hierarchy": "Synthesizer Dimensional Rate Filter",
        "module": "Synthesizer.Dimensional.Rate.Filter",
        "name": "butterworthLowpass",
        "normalized": "Int-\u003eT a b c(T a d c-\u003eR a(Recip b)c c-\u003eT a e f-\u003eT a e f)",
        "package": "synthesizer",
        "partial": "Lowpass",
        "signature": "Int-\u003eT s u q(T s flat q-\u003eR s(Recip u)q q-\u003eT s sig yv-\u003eT s sig yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Rate-Filter.html#v:chebyshevAHighpass",
      "description": {
        "fct-descr": "Order of the filter, must be even,\n                        the higher the order, the sharper is the separation of frequencies. \n",
        "fct-module": "Synthesizer.Dimensional.Rate.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "Int-\u003e T s u q (T s flat q -\u003e R s (Recip u) q q -\u003e T s sig yv -\u003e T s sig yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Rate-Filter.html#chebyshevAHighpass",
        "fct-type": "unknown",
        "title": "chebyshevAHighpass"
      },
      "index": {
        "description": "Order of the filter must be even the higher the order the sharper is the separation of frequencies",
        "hierarchy": "Synthesizer Dimensional Rate Filter",
        "module": "Synthesizer.Dimensional.Rate.Filter",
        "name": "chebyshevAHighpass",
        "normalized": "Int-\u003eT a b c(T a d c-\u003eR a(Recip b)c c-\u003eT a e f-\u003eT a e f)",
        "package": "synthesizer",
        "partial": "AHighpass",
        "signature": "Int-\u003eT s u q(T s flat q-\u003eR s(Recip u)q q-\u003eT s sig yv-\u003eT s sig yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Rate-Filter.html#v:chebyshevALowpass",
      "description": {
        "fct-descr": "Order of the filter, must be even,\n                        the higher the order, the sharper is the separation of frequencies. \n",
        "fct-module": "Synthesizer.Dimensional.Rate.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "Int-\u003e T s u q (T s flat q -\u003e R s (Recip u) q q -\u003e T s sig yv -\u003e T s sig yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Rate-Filter.html#chebyshevALowpass",
        "fct-type": "unknown",
        "title": "chebyshevALowpass"
      },
      "index": {
        "description": "Order of the filter must be even the higher the order the sharper is the separation of frequencies",
        "hierarchy": "Synthesizer Dimensional Rate Filter",
        "module": "Synthesizer.Dimensional.Rate.Filter",
        "name": "chebyshevALowpass",
        "normalized": "Int-\u003eT a b c(T a d c-\u003eR a(Recip b)c c-\u003eT a e f-\u003eT a e f)",
        "package": "synthesizer",
        "partial": "ALowpass",
        "signature": "Int-\u003eT s u q(T s flat q-\u003eR s(Recip u)q q-\u003eT s sig yv-\u003eT s sig yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Rate-Filter.html#v:chebyshevBHighpass",
      "description": {
        "fct-descr": "Order of the filter, must be even,\n                        the higher the order, the sharper is the separation of frequencies. \n",
        "fct-module": "Synthesizer.Dimensional.Rate.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "Int-\u003e T s u q (T s flat q -\u003e R s (Recip u) q q -\u003e T s sig yv -\u003e T s sig yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Rate-Filter.html#chebyshevBHighpass",
        "fct-type": "unknown",
        "title": "chebyshevBHighpass"
      },
      "index": {
        "description": "Order of the filter must be even the higher the order the sharper is the separation of frequencies",
        "hierarchy": "Synthesizer Dimensional Rate Filter",
        "module": "Synthesizer.Dimensional.Rate.Filter",
        "name": "chebyshevBHighpass",
        "normalized": "Int-\u003eT a b c(T a d c-\u003eR a(Recip b)c c-\u003eT a e f-\u003eT a e f)",
        "package": "synthesizer",
        "partial": "BHighpass",
        "signature": "Int-\u003eT s u q(T s flat q-\u003eR s(Recip u)q q-\u003eT s sig yv-\u003eT s sig yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Rate-Filter.html#v:chebyshevBLowpass",
      "description": {
        "fct-descr": "Order of the filter, must be even,\n                        the higher the order, the sharper is the separation of frequencies. \n",
        "fct-module": "Synthesizer.Dimensional.Rate.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "Int-\u003e T s u q (T s flat q -\u003e R s (Recip u) q q -\u003e T s sig yv -\u003e T s sig yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Rate-Filter.html#chebyshevBLowpass",
        "fct-type": "unknown",
        "title": "chebyshevBLowpass"
      },
      "index": {
        "description": "Order of the filter must be even the higher the order the sharper is the separation of frequencies",
        "hierarchy": "Synthesizer Dimensional Rate Filter",
        "module": "Synthesizer.Dimensional.Rate.Filter",
        "name": "chebyshevBLowpass",
        "normalized": "Int-\u003eT a b c(T a d c-\u003eR a(Recip b)c c-\u003eT a e f-\u003eT a e f)",
        "package": "synthesizer",
        "partial": "BLowpass",
        "signature": "Int-\u003eT s u q(T s flat q-\u003eR s(Recip u)q q-\u003eT s sig yv-\u003eT s sig yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Rate-Filter.html#v:comb",
      "description": {
        "fct-descr": "Infinitely many equi-delayed exponentially decaying echos. \n",
        "fct-module": "Synthesizer.Dimensional.Rate.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "T u t -\u003e y -\u003e T s u t (T s sig yv -\u003e T s sig yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Rate-Filter.html#comb",
        "fct-type": "unknown",
        "title": "comb"
      },
      "index": {
        "description": "Infinitely many equi-delayed exponentially decaying echos",
        "hierarchy": "Synthesizer Dimensional Rate Filter",
        "module": "Synthesizer.Dimensional.Rate.Filter",
        "name": "comb",
        "normalized": "T a b-\u003ec-\u003eT d a b(T d e f-\u003eT d e f)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T u t-\u003ey-\u003eT s u t(T s sig yv-\u003eT s sig yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Rate-Filter.html#v:convolveVector",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Rate.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "T s u q (R s (Recip u) q q -\u003e T s sig yv -\u003e T s sig yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Rate-Filter.html#convolveVector",
        "fct-type": "unknown",
        "title": "convolveVector"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Rate Filter",
        "module": "Synthesizer.Dimensional.Rate.Filter",
        "name": "convolveVector",
        "normalized": "T a b c(R a(Recip b)c c-\u003eT a d e-\u003eT a d e)",
        "package": "synthesizer",
        "partial": "Vector",
        "signature": "T s u q(R s(Recip u)q q-\u003eT s sig yv-\u003eT s sig yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Rate-Filter.html#v:delay",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Rate.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "T u t -\u003e T s u t (T s sig yv -\u003e T s sig yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Rate-Filter.html#delay",
        "fct-type": "unknown",
        "title": "delay"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Rate Filter",
        "module": "Synthesizer.Dimensional.Rate.Filter",
        "name": "delay",
        "normalized": "T a b-\u003eT c a b(T c d e-\u003eT c d e)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T u t-\u003eT s u t(T s sig yv-\u003eT s sig yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Rate-Filter.html#v:envelope",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Rate.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "T s u t (T s flat y0 -\u003e T s sig y0 -\u003e T s sig y0)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Rate-Filter.html#envelope",
        "fct-type": "unknown",
        "title": "envelope"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Rate Filter",
        "module": "Synthesizer.Dimensional.Rate.Filter",
        "name": "envelope",
        "normalized": "T a b c(T a d e-\u003eT a f e-\u003eT a f e)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T s u t(T s flat y-\u003eT s sig y-\u003eT s sig y)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Rate-Filter.html#v:envelopeVector",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Rate.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "T s u t (T s flat y0 -\u003e T s sig yv -\u003e T s sig yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Rate-Filter.html#envelopeVector",
        "fct-type": "unknown",
        "title": "envelopeVector"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Rate Filter",
        "module": "Synthesizer.Dimensional.Rate.Filter",
        "name": "envelopeVector",
        "normalized": "T a b c(T a d e-\u003eT a f g-\u003eT a f g)",
        "package": "synthesizer",
        "partial": "Vector",
        "signature": "T s u t(T s flat y-\u003eT s sig yv-\u003eT s sig yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Rate-Filter.html#v:firstOrderHighpass",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Rate.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "T s u q (R s (Recip u) q q -\u003e T s sig yv -\u003e T s sig yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Rate-Filter.html#firstOrderHighpass",
        "fct-type": "unknown",
        "title": "firstOrderHighpass"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Rate Filter",
        "module": "Synthesizer.Dimensional.Rate.Filter",
        "name": "firstOrderHighpass",
        "normalized": "T a b c(R a(Recip b)c c-\u003eT a d e-\u003eT a d e)",
        "package": "synthesizer",
        "partial": "Order Highpass",
        "signature": "T s u q(R s(Recip u)q q-\u003eT s sig yv-\u003eT s sig yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Rate-Filter.html#v:firstOrderLowpass",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Rate.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "T s u q (R s (Recip u) q q -\u003e T s sig yv -\u003e T s sig yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Rate-Filter.html#firstOrderLowpass",
        "fct-type": "unknown",
        "title": "firstOrderLowpass"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Rate Filter",
        "module": "Synthesizer.Dimensional.Rate.Filter",
        "name": "firstOrderLowpass",
        "normalized": "T a b c(R a(Recip b)c c-\u003eT a d e-\u003eT a d e)",
        "package": "synthesizer",
        "partial": "Order Lowpass",
        "signature": "T s u q(R s(Recip u)q q-\u003eT s sig yv-\u003eT s sig yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Rate-Filter.html#v:frequencyModulation",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Rate.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "T t yv -\u003e T s u t (T s flat t -\u003e T s sig yv -\u003e T s sig yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Rate-Filter.html#frequencyModulation",
        "fct-type": "unknown",
        "title": "frequencyModulation"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Rate Filter",
        "module": "Synthesizer.Dimensional.Rate.Filter",
        "name": "frequencyModulation",
        "normalized": "T a b-\u003eT c d a(T c e a-\u003eT c f b-\u003eT c f b)",
        "package": "synthesizer",
        "partial": "Modulation",
        "signature": "T t yv-\u003eT s u t(T s flat t-\u003eT s sig yv-\u003eT s sig yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Rate-Filter.html#v:frequencyModulationDecoupled",
      "description": {
        "fct-descr": "\u003cp\u003eFrequency modulation where the input signal can have a sample rate\ndifferent from the output.\n(The sample rate values can differ, the unit must be the same.\nWe could lift that restriction,\nbut then the unit handling becomes more complicated,\nand I didn't have a use for it so far.)\n\u003c/p\u003e\u003cp\u003eThe function can be used for resampling.\n\u003c/p\u003e",
        "fct-module": "Synthesizer.Dimensional.Rate.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "T t yv -\u003e T u t sig yv -\u003e T s u t (T s flat t -\u003e T s sig yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Rate-Filter.html#frequencyModulationDecoupled",
        "fct-type": "unknown",
        "title": "frequencyModulationDecoupled"
      },
      "index": {
        "description": "Frequency modulation where the input signal can have sample rate different from the output The sample rate values can differ the unit must be the same We could lift that restriction but then the unit handling becomes more complicated and didn have use for it so far The function can be used for resampling",
        "hierarchy": "Synthesizer Dimensional Rate Filter",
        "module": "Synthesizer.Dimensional.Rate.Filter",
        "name": "frequencyModulationDecoupled",
        "normalized": "T a b-\u003eT c a d b-\u003eT e c a(T e f a-\u003eT e d b)",
        "package": "synthesizer",
        "partial": "Modulation Decoupled",
        "signature": "T t yv-\u003eT u t sig yv-\u003eT s u t(T s flat t-\u003eT s sig yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Rate-Filter.html#v:highpassFromUniversal",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Rate.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "T s sig (Result yv) -\u003e T s sig yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Rate-Filter.html#highpassFromUniversal",
        "fct-type": "unknown",
        "title": "highpassFromUniversal"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Rate Filter",
        "module": "Synthesizer.Dimensional.Rate.Filter",
        "name": "highpassFromUniversal",
        "normalized": "T a b(Result c)-\u003eT a b c",
        "package": "synthesizer",
        "partial": "From Universal",
        "signature": "T s sig(Result yv)-\u003eT s sig yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Rate-Filter.html#v:interpolateMultiRelativeZeroPad",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Rate.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "T q yv -\u003e T q -\u003e T yv -\u003e T yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Rate-Filter.html#interpolateMultiRelativeZeroPad",
        "fct-type": "unknown",
        "title": "interpolateMultiRelativeZeroPad"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Rate Filter",
        "module": "Synthesizer.Dimensional.Rate.Filter",
        "name": "interpolateMultiRelativeZeroPad",
        "normalized": "T a b-\u003eT a-\u003eT b-\u003eT b",
        "package": "synthesizer",
        "partial": "Multi Relative Zero Pad",
        "signature": "T q yv-\u003eT q-\u003eT yv-\u003eT yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Rate-Filter.html#v:lowpassFromUniversal",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Rate.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "T s sig (Result yv) -\u003e T s sig yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Rate-Filter.html#lowpassFromUniversal",
        "fct-type": "unknown",
        "title": "lowpassFromUniversal"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Rate Filter",
        "module": "Synthesizer.Dimensional.Rate.Filter",
        "name": "lowpassFromUniversal",
        "normalized": "T a b(Result c)-\u003eT a b c",
        "package": "synthesizer",
        "partial": "From Universal",
        "signature": "T s sig(Result yv)-\u003eT s sig yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Rate-Filter.html#v:mean",
      "description": {
        "fct-descr": "minimum cut-off freqeuncy \n",
        "fct-module": "Synthesizer.Dimensional.Rate.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "T (Recip u) q-\u003e T s u q (R s (Recip u) q q -\u003e T s sig yv -\u003e T s sig yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Rate-Filter.html#mean",
        "fct-type": "unknown",
        "title": "mean"
      },
      "index": {
        "description": "minimum cut-off freqeuncy",
        "hierarchy": "Synthesizer Dimensional Rate Filter",
        "module": "Synthesizer.Dimensional.Rate.Filter",
        "name": "mean",
        "normalized": "T(Recip a)b-\u003eT c a b(R c(Recip a)b b-\u003eT c d e-\u003eT c d e)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T(Recip u)q-\u003eT s u q(R s(Recip u)q q-\u003eT s sig yv-\u003eT s sig yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Rate-Filter.html#v:meanStatic",
      "description": {
        "fct-descr": "cut-off freqeuncy \n",
        "fct-module": "Synthesizer.Dimensional.Rate.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "T (Recip u) q-\u003e T s u q (T s sig yv -\u003e T s sig yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Rate-Filter.html#meanStatic",
        "fct-type": "unknown",
        "title": "meanStatic"
      },
      "index": {
        "description": "cut-off freqeuncy",
        "hierarchy": "Synthesizer Dimensional Rate Filter",
        "module": "Synthesizer.Dimensional.Rate.Filter",
        "name": "meanStatic",
        "normalized": "T(Recip a)b-\u003eT c a b(T c d e-\u003eT c d e)",
        "package": "synthesizer",
        "partial": "Static",
        "signature": "T(Recip u)q-\u003eT s u q(T s sig yv-\u003eT s sig yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Rate-Filter.html#v:moogLowpass",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Rate.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e T s u q (T s flat q -\u003e R s (Recip u) q q -\u003e T s sig yv -\u003e T s sig yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Rate-Filter.html#moogLowpass",
        "fct-type": "unknown",
        "title": "moogLowpass"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Rate Filter",
        "module": "Synthesizer.Dimensional.Rate.Filter",
        "name": "moogLowpass",
        "normalized": "Int-\u003eT a b c(T a d c-\u003eR a(Recip b)c c-\u003eT a e f-\u003eT a e f)",
        "package": "synthesizer",
        "partial": "Lowpass",
        "signature": "Int-\u003eT s u q(T s flat q-\u003eR s(Recip u)q q-\u003eT s sig yv-\u003eT s sig yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Rate-Filter.html#v:negate",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Rate.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "T s u t (T s sig yv -\u003e T s sig yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Rate-Filter.html#negate",
        "fct-type": "unknown",
        "title": "negate"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Rate Filter",
        "module": "Synthesizer.Dimensional.Rate.Filter",
        "name": "negate",
        "normalized": "T a b c(T a d e-\u003eT a d e)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T s u t(T s sig yv-\u003eT s sig yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Rate-Filter.html#v:phaseModulation",
      "description": {
        "fct-descr": "minimal deviation from current time, usually negative \nmaximal deviation, it must be \u003ctt\u003eminDev \u003c= maxDev\u003c/tt\u003e\n               and the modulation must always be\n               in the range [minDev,maxDev]. \n",
        "fct-module": "Synthesizer.Dimensional.Rate.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "T q yv-\u003e T u q-\u003e T u q-\u003e T s u q (R s u q q -\u003e T s sig yv -\u003e T s sig yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Rate-Filter.html#phaseModulation",
        "fct-type": "unknown",
        "title": "phaseModulation"
      },
      "index": {
        "description": "minimal deviation from current time usually negative maximal deviation it must be minDev maxDev and the modulation must always be in the range minDev maxDev",
        "hierarchy": "Synthesizer Dimensional Rate Filter",
        "module": "Synthesizer.Dimensional.Rate.Filter",
        "name": "phaseModulation",
        "normalized": "T a b-\u003eT c a-\u003eT c a-\u003eT d c a(R d c a a-\u003eT d e b-\u003eT d e b)",
        "package": "synthesizer",
        "partial": "Modulation",
        "signature": "T q yv-\u003eT u q-\u003eT u q-\u003eT s u q(R s u q q-\u003eT s sig yv-\u003eT s sig yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Rate-Filter.html#v:phaser",
      "description": {
        "fct-descr": "maxDev, must be positive \n",
        "fct-module": "Synthesizer.Dimensional.Rate.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "T q yv-\u003e T u q-\u003e T s u q (R s u q q -\u003e T s sig yv -\u003e T s sig yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Rate-Filter.html#phaser",
        "fct-type": "unknown",
        "title": "phaser"
      },
      "index": {
        "description": "maxDev must be positive",
        "hierarchy": "Synthesizer Dimensional Rate Filter",
        "module": "Synthesizer.Dimensional.Rate.Filter",
        "name": "phaser",
        "normalized": "T a b-\u003eT c a-\u003eT d c a(R d c a a-\u003eT d e b-\u003eT d e b)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T q yv-\u003eT u q-\u003eT s u q(R s u q q-\u003eT s sig yv-\u003eT s sig yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Rate-Filter.html#v:phaserStereo",
      "description": {
        "fct-descr": "maxDev, must be positive \n",
        "fct-module": "Synthesizer.Dimensional.Rate.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "T q yv-\u003e T u q-\u003e T s u q (R s u q q -\u003e T s sig yv -\u003e T s sig (T yv))",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Rate-Filter.html#phaserStereo",
        "fct-type": "unknown",
        "title": "phaserStereo"
      },
      "index": {
        "description": "maxDev must be positive",
        "hierarchy": "Synthesizer Dimensional Rate Filter",
        "module": "Synthesizer.Dimensional.Rate.Filter",
        "name": "phaserStereo",
        "normalized": "T a b-\u003eT c a-\u003eT d c a(R d c a a-\u003eT d e b-\u003eT d e(T b))",
        "package": "synthesizer",
        "partial": "Stereo",
        "signature": "T q yv-\u003eT u q-\u003eT s u q(R s u q q-\u003eT s sig yv-\u003eT s sig(T yv))"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Rate-Filter.html#v:universal",
      "description": {
        "fct-descr": "highpass, bandpass, lowpass filter \n",
        "fct-module": "Synthesizer.Dimensional.Rate.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "T s u q (T s flat q -\u003e R s (Recip u) q q -\u003e T s sig yv -\u003e T s sig (Result yv))",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Rate-Filter.html#universal",
        "fct-type": "unknown",
        "title": "universal"
      },
      "index": {
        "description": "highpass bandpass lowpass filter",
        "hierarchy": "Synthesizer Dimensional Rate Filter",
        "module": "Synthesizer.Dimensional.Rate.Filter",
        "name": "universal",
        "normalized": "T a b c(T a d c-\u003eR a(Recip b)c c-\u003eT a e f-\u003eT a e(Result f))",
        "package": "synthesizer",
        "partial": "",
        "signature": "T s u q(T s flat q-\u003eR s(Recip u)q q-\u003eT s sig yv-\u003eT s sig(Result yv))"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Rate-Oscillator.html#v:freqMod",
      "description": {
        "fct-descr": "waveform \nstart phase \n",
        "fct-module": "Synthesizer.Dimensional.Rate.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "wave y-\u003e T t-\u003e T s u t (R s (Recip u) t t -\u003e T s sig y)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Rate-Oscillator.html#freqMod",
        "fct-type": "unknown",
        "title": "freqMod"
      },
      "index": {
        "description": "waveform start phase",
        "hierarchy": "Synthesizer Dimensional Rate Oscillator",
        "module": "Synthesizer.Dimensional.Rate.Oscillator",
        "name": "freqMod",
        "normalized": "a b-\u003eT c-\u003eT d e c(R d(Recip e)c c-\u003eT d f b)",
        "package": "synthesizer",
        "partial": "Mod",
        "signature": "wave y-\u003eT t-\u003eT s u t(R s(Recip u)t t-\u003eT s sig y)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Rate-Oscillator.html#v:freqModAntiAlias",
      "description": {
        "fct-descr": "waveform \nstart phase \n",
        "fct-module": "Synthesizer.Dimensional.Rate.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "wave y-\u003e T t-\u003e T s u t (R s (Recip u) t t -\u003e T s sig y)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Rate-Oscillator.html#freqModAntiAlias",
        "fct-type": "unknown",
        "title": "freqModAntiAlias"
      },
      "index": {
        "description": "waveform start phase",
        "hierarchy": "Synthesizer Dimensional Rate Oscillator",
        "module": "Synthesizer.Dimensional.Rate.Oscillator",
        "name": "freqModAntiAlias",
        "normalized": "a b-\u003eT c-\u003eT d e c(R d(Recip e)c c-\u003eT d f b)",
        "package": "synthesizer",
        "partial": "Mod Anti Alias",
        "signature": "wave y-\u003eT t-\u003eT s u t(R s(Recip u)t t-\u003eT s sig y)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Rate-Oscillator.html#v:freqModSample",
      "description": {
        "fct-descr": "waveform \nstart phase \n",
        "fct-module": "Synthesizer.Dimensional.Rate.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "T t y-\u003e R r y-\u003e T t-\u003e T s u t (R s (Recip u) t t -\u003e R s y)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Rate-Oscillator.html#freqModSample",
        "fct-type": "unknown",
        "title": "freqModSample"
      },
      "index": {
        "description": "waveform start phase",
        "hierarchy": "Synthesizer Dimensional Rate Oscillator",
        "module": "Synthesizer.Dimensional.Rate.Oscillator",
        "name": "freqModSample",
        "normalized": "T a b-\u003eR c b-\u003eT a-\u003eT d e a(R d(Recip e)a a-\u003eR d b)",
        "package": "synthesizer",
        "partial": "Mod Sample",
        "signature": "T t y-\u003eR r y-\u003eT t-\u003eT s u t(R s(Recip u)t t-\u003eR s y)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Rate-Oscillator.html#v:phaseFreqMod",
      "description": {
        "fct-descr": "waveform \n",
        "fct-module": "Synthesizer.Dimensional.Rate.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "wave y-\u003e T s u t (T s flat t -\u003e R s (Recip u) t t -\u003e T s sig y)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Rate-Oscillator.html#phaseFreqMod",
        "fct-type": "unknown",
        "title": "phaseFreqMod"
      },
      "index": {
        "description": "waveform",
        "hierarchy": "Synthesizer Dimensional Rate Oscillator",
        "module": "Synthesizer.Dimensional.Rate.Oscillator",
        "name": "phaseFreqMod",
        "normalized": "a b-\u003eT c d e(T c f e-\u003eR c(Recip d)e e-\u003eT c g b)",
        "package": "synthesizer",
        "partial": "Freq Mod",
        "signature": "wave y-\u003eT s u t(T s flat t-\u003eR s(Recip u)t t-\u003eT s sig y)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Rate-Oscillator.html#v:phaseMod",
      "description": {
        "fct-descr": "waveform \nfrequency \n",
        "fct-module": "Synthesizer.Dimensional.Rate.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "wave y-\u003e T (Recip u) t-\u003e T s u t (T s flat t -\u003e T s sig y)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Rate-Oscillator.html#phaseMod",
        "fct-type": "unknown",
        "title": "phaseMod"
      },
      "index": {
        "description": "waveform frequency",
        "hierarchy": "Synthesizer Dimensional Rate Oscillator",
        "module": "Synthesizer.Dimensional.Rate.Oscillator",
        "name": "phaseMod",
        "normalized": "a b-\u003eT(Recip c)d-\u003eT e c d(T e f d-\u003eT e g b)",
        "package": "synthesizer",
        "partial": "Mod",
        "signature": "wave y-\u003eT(Recip u)t-\u003eT s u t(T s flat t-\u003eT s sig y)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Rate-Oscillator.html#v:shapeFreqMod",
      "description": {
        "fct-descr": "waveform \nphase \n",
        "fct-module": "Synthesizer.Dimensional.Rate.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "c -\u003e T t y-\u003e T t-\u003e T s u t (T s flat c -\u003e R s (Recip u) t t -\u003e R s y)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Rate-Oscillator.html#shapeFreqMod",
        "fct-type": "unknown",
        "title": "shapeFreqMod"
      },
      "index": {
        "description": "waveform phase",
        "hierarchy": "Synthesizer Dimensional Rate Oscillator",
        "module": "Synthesizer.Dimensional.Rate.Oscillator",
        "name": "shapeFreqMod",
        "normalized": "a-\u003eT b c-\u003eT b-\u003eT d e b(T d f a-\u003eR d(Recip e)b b-\u003eR d c)",
        "package": "synthesizer",
        "partial": "Freq Mod",
        "signature": "c-\u003eT t y-\u003eT t-\u003eT s u t(T s flat c-\u003eR s(Recip u)t t-\u003eR s y)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Rate-Oscillator.html#v:shapeFreqModFromSampledTone",
      "description": {
        "fct-descr": "source frequency \n",
        "fct-module": "Synthesizer.Dimensional.Rate.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "T t yv-\u003e T t yv-\u003e T (Recip u) t-\u003e T u t input yv-\u003e t-\u003e T t-\u003e T s u t (T s flat t -\u003e R s (Recip u) t t -\u003e T s output yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Rate-Oscillator.html#shapeFreqModFromSampledTone",
        "fct-type": "unknown",
        "title": "shapeFreqModFromSampledTone"
      },
      "index": {
        "description": "source frequency",
        "hierarchy": "Synthesizer Dimensional Rate Oscillator",
        "module": "Synthesizer.Dimensional.Rate.Oscillator",
        "name": "shapeFreqModFromSampledTone",
        "normalized": "T a b-\u003eT a b-\u003eT(Recip c)a-\u003eT c a d b-\u003ea-\u003eT a-\u003eT e c a(T e f a-\u003eR e(Recip c)a a-\u003eT e g b)",
        "package": "synthesizer",
        "partial": "Freq Mod From Sampled Tone",
        "signature": "T t yv-\u003eT t yv-\u003eT(Recip u)t-\u003eT u t input yv-\u003et-\u003eT t-\u003eT s u t(T s flat t-\u003eR s(Recip u)t t-\u003eT s output yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Rate-Oscillator.html#v:shapeMod",
      "description": {
        "fct-descr": "waveform \nphase \nfrequency \n",
        "fct-module": "Synthesizer.Dimensional.Rate.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "c -\u003e T t y-\u003e T t-\u003e T (Recip u) t-\u003e T s u t (T s flat c -\u003e R s y)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Rate-Oscillator.html#shapeMod",
        "fct-type": "unknown",
        "title": "shapeMod"
      },
      "index": {
        "description": "waveform phase frequency",
        "hierarchy": "Synthesizer Dimensional Rate Oscillator",
        "module": "Synthesizer.Dimensional.Rate.Oscillator",
        "name": "shapeMod",
        "normalized": "a-\u003eT b c-\u003eT b-\u003eT(Recip d)b-\u003eT e d b(T e f a-\u003eR e c)",
        "package": "synthesizer",
        "partial": "Mod",
        "signature": "c-\u003eT t y-\u003eT t-\u003eT(Recip u)t-\u003eT s u t(T s flat c-\u003eR s y)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Rate-Oscillator.html#v:shapePhaseFreqModFromSampledTone",
      "description": {
        "fct-descr": "source frequency \n",
        "fct-module": "Synthesizer.Dimensional.Rate.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "T t yv-\u003e T t yv-\u003e T (Recip u) t-\u003e T u t input yv-\u003e t-\u003e T t-\u003e T s u t (T s flatS t -\u003e T s flatP t -\u003e R s (Recip u) t t -\u003e T s output yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Rate-Oscillator.html#shapePhaseFreqModFromSampledTone",
        "fct-type": "unknown",
        "title": "shapePhaseFreqModFromSampledTone"
      },
      "index": {
        "description": "source frequency",
        "hierarchy": "Synthesizer Dimensional Rate Oscillator",
        "module": "Synthesizer.Dimensional.Rate.Oscillator",
        "name": "shapePhaseFreqModFromSampledTone",
        "normalized": "T a b-\u003eT a b-\u003eT(Recip c)a-\u003eT c a d b-\u003ea-\u003eT a-\u003eT e c a(T e f a-\u003eT e g a-\u003eR e(Recip c)a a-\u003eT e h b)",
        "package": "synthesizer",
        "partial": "Phase Freq Mod From Sampled Tone",
        "signature": "T t yv-\u003eT t yv-\u003eT(Recip u)t-\u003eT u t input yv-\u003et-\u003eT t-\u003eT s u t(T s flatS t-\u003eT s flatP t-\u003eR s(Recip u)t t-\u003eT s output yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Rate-Oscillator.html#v:static",
      "description": {
        "fct-descr": "waveform \nstart phase \nfrequency \n",
        "fct-module": "Synthesizer.Dimensional.Rate.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "wave y-\u003e T t-\u003e T (Recip u) t-\u003e T s u t (T s sig y)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Rate-Oscillator.html#static",
        "fct-type": "unknown",
        "title": "static"
      },
      "index": {
        "description": "waveform start phase frequency",
        "hierarchy": "Synthesizer Dimensional Rate Oscillator",
        "module": "Synthesizer.Dimensional.Rate.Oscillator",
        "name": "static",
        "normalized": "a b-\u003eT c-\u003eT(Recip d)c-\u003eT e d c(T e f b)",
        "package": "synthesizer",
        "partial": "",
        "signature": "wave y-\u003eT t-\u003eT(Recip u)t-\u003eT s u t(T s sig y)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Rate-Oscillator.html#v:staticAntiAlias",
      "description": {
        "fct-descr": "waveform \nstart phase \nfrequency \n",
        "fct-module": "Synthesizer.Dimensional.Rate.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "wave y-\u003e T t-\u003e T (Recip u) t-\u003e T s u t (T s sig y)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Rate-Oscillator.html#staticAntiAlias",
        "fct-type": "unknown",
        "title": "staticAntiAlias"
      },
      "index": {
        "description": "waveform start phase frequency",
        "hierarchy": "Synthesizer Dimensional Rate Oscillator",
        "module": "Synthesizer.Dimensional.Rate.Oscillator",
        "name": "staticAntiAlias",
        "normalized": "a b-\u003eT c-\u003eT(Recip d)c-\u003eT e d c(T e f b)",
        "package": "synthesizer",
        "partial": "Anti Alias",
        "signature": "wave y-\u003eT t-\u003eT(Recip u)t-\u003eT s u t(T s sig y)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Rate-Oscillator.html#v:staticSample",
      "description": {
        "fct-descr": "waveform \nstart phase \nfrequency \n",
        "fct-module": "Synthesizer.Dimensional.Rate.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "T t y-\u003e R r y-\u003e T t-\u003e T (Recip u) t-\u003e T s u t (R s y)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Rate-Oscillator.html#staticSample",
        "fct-type": "unknown",
        "title": "staticSample"
      },
      "index": {
        "description": "waveform start phase frequency",
        "hierarchy": "Synthesizer Dimensional Rate Oscillator",
        "module": "Synthesizer.Dimensional.Rate.Oscillator",
        "name": "staticSample",
        "normalized": "T a b-\u003eR c b-\u003eT a-\u003eT(Recip d)a-\u003eT e d a(R e b)",
        "package": "synthesizer",
        "partial": "Sample",
        "signature": "T t y-\u003eR r y-\u003eT t-\u003eT(Recip u)t-\u003eT s u t(R s y)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Rate.html#t:T",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Rate",
        "fct-package": "synthesizer",
        "fct-signature": "newtype",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Rate.html#T",
        "fct-type": "unknown",
        "title": "T"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Rate",
        "module": "Synthesizer.Dimensional.Rate",
        "name": "T",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Rate.html#v:common",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Rate",
        "fct-package": "synthesizer",
        "fct-signature": "String -\u003e T s u t -\u003e T s u t -\u003e T s u t",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Rate.html#common",
        "fct-type": "unknown",
        "title": "common"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Rate",
        "module": "Synthesizer.Dimensional.Rate",
        "name": "common",
        "normalized": "String-\u003eT a b c-\u003eT a b c-\u003eT a b c",
        "package": "synthesizer",
        "partial": "",
        "signature": "String-\u003eT s u t-\u003eT s u t-\u003eT s u t"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Rate.html#v:fromDimensionNumber",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Rate",
        "fct-package": "synthesizer",
        "fct-signature": "T (Recip u) t -\u003e T s u t",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Rate.html#fromDimensionNumber",
        "fct-type": "unknown",
        "title": "fromDimensionNumber"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Rate",
        "module": "Synthesizer.Dimensional.Rate",
        "name": "fromDimensionNumber",
        "normalized": "T(Recip a)b-\u003eT c a b",
        "package": "synthesizer",
        "partial": "Dimension Number",
        "signature": "T(Recip u)t-\u003eT s u t"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Rate.html#v:fromNumber",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Rate",
        "fct-package": "synthesizer",
        "fct-signature": "Recip u -\u003e t -\u003e T s u t",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Rate.html#fromNumber",
        "fct-type": "unknown",
        "title": "fromNumber"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Rate",
        "module": "Synthesizer.Dimensional.Rate",
        "name": "fromNumber",
        "normalized": "Recip a-\u003eb-\u003eT c a b",
        "package": "synthesizer",
        "partial": "Number",
        "signature": "Recip u-\u003et-\u003eT s u t"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Rate.html#v:toDimensionNumber",
      "description": {
        "fct-descr": "This function is somehow dangerous\nbecause it drops the s parameter.\n",
        "fct-module": "Synthesizer.Dimensional.Rate",
        "fct-package": "synthesizer",
        "fct-signature": "T s u t -\u003e T (Recip u) t",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Rate.html#toDimensionNumber",
        "fct-type": "unknown",
        "title": "toDimensionNumber"
      },
      "index": {
        "description": "This function is somehow dangerous because it drops the parameter",
        "hierarchy": "Synthesizer Dimensional Rate",
        "module": "Synthesizer.Dimensional.Rate",
        "name": "toDimensionNumber",
        "normalized": "T a b c-\u003eT(Recip b)c",
        "package": "synthesizer",
        "partial": "Dimension Number",
        "signature": "T s u t-\u003eT(Recip u)t"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Rate.html#v:toNumber",
      "description": {
        "fct-descr": "This function is somehow dangerous\nbecause it drops the s parameter.\n",
        "fct-module": "Synthesizer.Dimensional.Rate",
        "fct-package": "synthesizer",
        "fct-signature": "Recip u -\u003e T s u t -\u003e t",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Rate.html#toNumber",
        "fct-type": "unknown",
        "title": "toNumber"
      },
      "index": {
        "description": "This function is somehow dangerous because it drops the parameter",
        "hierarchy": "Synthesizer Dimensional Rate",
        "module": "Synthesizer.Dimensional.Rate",
        "name": "toNumber",
        "normalized": "Recip a-\u003eT b a c-\u003ec",
        "package": "synthesizer",
        "partial": "Number",
        "signature": "Recip u-\u003eT s u t-\u003et"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Analysis.html#v:centroid",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "T u q (S v y) q -\u003e T u q",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Analysis.html#centroid",
        "fct-type": "unknown",
        "title": "centroid"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Analysis",
        "module": "Synthesizer.Dimensional.RateAmplitude.Analysis",
        "name": "centroid",
        "normalized": "T a b(S c d)b-\u003eT a b",
        "package": "synthesizer",
        "partial": "",
        "signature": "T u q(S v y)q-\u003eT u q"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Analysis.html#v:fromFrequencySpectrum",
      "description": {
        "fct-descr": "Fourier synthesis\n",
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "T (Recip u) q (D (Mul u v) q (T T)) (T q) -\u003e T u q (D v q (T T)) (T q)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Analysis.html#fromFrequencySpectrum",
        "fct-type": "unknown",
        "title": "fromFrequencySpectrum"
      },
      "index": {
        "description": "Fourier synthesis",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Analysis",
        "module": "Synthesizer.Dimensional.RateAmplitude.Analysis",
        "name": "fromFrequencySpectrum",
        "normalized": "T(Recip a)b(D(Mul a c)b(T T))(T b)-\u003eT a b(D c b(T T))(T b)",
        "package": "synthesizer",
        "partial": "Frequency Spectrum",
        "signature": "T(Recip u)q(D(Mul u v)q(T T))(T q)-\u003eT u q(D v q(T T))(T q)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Analysis.html#v:histogram",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "T u q (S v q) q -\u003e T s v q (Int, R s (DimensionGradient v u) q q)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Analysis.html#histogram",
        "fct-type": "unknown",
        "title": "histogram"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Analysis",
        "module": "Synthesizer.Dimensional.RateAmplitude.Analysis",
        "name": "histogram",
        "normalized": "T a b(S c b)b-\u003eT d c b(Int,R d(DimensionGradient c a)b b)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T u q(S v q)q-\u003eT s v q(Int,R s(DimensionGradient v u)q q)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Analysis.html#v:length",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "T u t (S v y) yv -\u003e T u t",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Analysis.html#length",
        "fct-type": "unknown",
        "title": "length"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Analysis",
        "module": "Synthesizer.Dimensional.RateAmplitude.Analysis",
        "name": "length",
        "normalized": "T a b(S c d)e-\u003eT a b",
        "package": "synthesizer",
        "partial": "",
        "signature": "T u t(S v y)yv-\u003eT u t"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Analysis.html#v:normEuclideanSqr",
      "description": {
        "fct-descr": "\u003cp\u003eSquare of energy norm.\n\u003c/p\u003e\u003cp\u003eCould also be called \u003ctt\u003evariance\u003c/tt\u003e.\n\u003c/p\u003e",
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "T u q (S v q) q -\u003e T (Mul u (Sqr v)) q",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Analysis.html#normEuclideanSqr",
        "fct-type": "unknown",
        "title": "normEuclideanSqr"
      },
      "index": {
        "description": "Square of energy norm Could also be called variance",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Analysis",
        "module": "Synthesizer.Dimensional.RateAmplitude.Analysis",
        "name": "normEuclideanSqr",
        "normalized": "T a b(S c b)b-\u003eT(Mul a(Sqr c))b",
        "package": "synthesizer",
        "partial": "Euclidean Sqr",
        "signature": "T u q(S v q)q-\u003eT(Mul u(Sqr v))q"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Analysis.html#v:normEuclideanSqrProc",
      "description": {
        "fct-descr": "\u003cp\u003eSquare of energy norm.\n\u003c/p\u003e\u003cp\u003eCould also be called \u003ctt\u003evariance\u003c/tt\u003e.\n\u003c/p\u003e",
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "T s u q (R s v q q -\u003e T (Mul u (Sqr v)) q)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Analysis.html#normEuclideanSqrProc",
        "fct-type": "unknown",
        "title": "normEuclideanSqrProc"
      },
      "index": {
        "description": "Square of energy norm Could also be called variance",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Analysis",
        "module": "Synthesizer.Dimensional.RateAmplitude.Analysis",
        "name": "normEuclideanSqrProc",
        "normalized": "T a b c(R a d c c-\u003eT(Mul b(Sqr d))c)",
        "package": "synthesizer",
        "partial": "Euclidean Sqr Proc",
        "signature": "T s u q(R s v q q-\u003eT(Mul u(Sqr v))q)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Analysis.html#v:normMaximum",
      "description": {
        "fct-descr": "Manhattan norm.\n",
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "T u t (S v y) y -\u003e T v y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Analysis.html#normMaximum",
        "fct-type": "unknown",
        "title": "normMaximum"
      },
      "index": {
        "description": "Manhattan norm",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Analysis",
        "module": "Synthesizer.Dimensional.RateAmplitude.Analysis",
        "name": "normMaximum",
        "normalized": "T a b(S c d)d-\u003eT c d",
        "package": "synthesizer",
        "partial": "Maximum",
        "signature": "T u t(S v y)y-\u003eT v y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Analysis.html#v:normMaximumProc",
      "description": {
        "fct-descr": "Manhattan norm.\n",
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "T s u y (R s v y y -\u003e T v y)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Analysis.html#normMaximumProc",
        "fct-type": "unknown",
        "title": "normMaximumProc"
      },
      "index": {
        "description": "Manhattan norm",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Analysis",
        "module": "Synthesizer.Dimensional.RateAmplitude.Analysis",
        "name": "normMaximumProc",
        "normalized": "T a b c(R a d c c-\u003eT d c)",
        "package": "synthesizer",
        "partial": "Maximum Proc",
        "signature": "T s u y(R s v y y-\u003eT v y)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Analysis.html#v:normSum",
      "description": {
        "fct-descr": "Sum norm.\n",
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "T u q (S v q) q -\u003e T (Mul u v) q",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Analysis.html#normSum",
        "fct-type": "unknown",
        "title": "normSum"
      },
      "index": {
        "description": "Sum norm",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Analysis",
        "module": "Synthesizer.Dimensional.RateAmplitude.Analysis",
        "name": "normSum",
        "normalized": "T a b(S c b)b-\u003eT(Mul a c)b",
        "package": "synthesizer",
        "partial": "Sum",
        "signature": "T u q(S v q)q-\u003eT(Mul u v)q"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Analysis.html#v:normSumProc",
      "description": {
        "fct-descr": "Sum norm.\n",
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "T s u q (R s v q q -\u003e T (Mul u v) q)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Analysis.html#normSumProc",
        "fct-type": "unknown",
        "title": "normSumProc"
      },
      "index": {
        "description": "Sum norm",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Analysis",
        "module": "Synthesizer.Dimensional.RateAmplitude.Analysis",
        "name": "normSumProc",
        "normalized": "T a b c(R a d c c-\u003eT(Mul b d)c)",
        "package": "synthesizer",
        "partial": "Sum Proc",
        "signature": "T s u q(R s v q q-\u003eT(Mul u v)q)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Analysis.html#v:normVectorEuclideanSqr",
      "description": {
        "fct-descr": "Energy norm.\n",
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "T u q (S v q) yv -\u003e T (Mul u (Sqr v)) q",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Analysis.html#normVectorEuclideanSqr",
        "fct-type": "unknown",
        "title": "normVectorEuclideanSqr"
      },
      "index": {
        "description": "Energy norm",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Analysis",
        "module": "Synthesizer.Dimensional.RateAmplitude.Analysis",
        "name": "normVectorEuclideanSqr",
        "normalized": "T a b(S c b)d-\u003eT(Mul a(Sqr c))b",
        "package": "synthesizer",
        "partial": "Vector Euclidean Sqr",
        "signature": "T u q(S v q)yv-\u003eT(Mul u(Sqr v))q"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Analysis.html#v:normVectorEuclideanSqrProc",
      "description": {
        "fct-descr": "Energy norm.\n",
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "T s u y (R s v y yv -\u003e T (Mul u (Sqr v)) y)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Analysis.html#normVectorEuclideanSqrProc",
        "fct-type": "unknown",
        "title": "normVectorEuclideanSqrProc"
      },
      "index": {
        "description": "Energy norm",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Analysis",
        "module": "Synthesizer.Dimensional.RateAmplitude.Analysis",
        "name": "normVectorEuclideanSqrProc",
        "normalized": "T a b c(R a d c e-\u003eT(Mul b(Sqr d))c)",
        "package": "synthesizer",
        "partial": "Vector Euclidean Sqr Proc",
        "signature": "T s u y(R s v y yv-\u003eT(Mul u(Sqr v))y)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Analysis.html#v:normVectorMaximum",
      "description": {
        "fct-descr": "Manhattan norm.\n",
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "T u q (S v q) yv -\u003e T v q",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Analysis.html#normVectorMaximum",
        "fct-type": "unknown",
        "title": "normVectorMaximum"
      },
      "index": {
        "description": "Manhattan norm",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Analysis",
        "module": "Synthesizer.Dimensional.RateAmplitude.Analysis",
        "name": "normVectorMaximum",
        "normalized": "T a b(S c b)d-\u003eT c b",
        "package": "synthesizer",
        "partial": "Vector Maximum",
        "signature": "T u q(S v q)yv-\u003eT v q"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Analysis.html#v:normVectorMaximumProc",
      "description": {
        "fct-descr": "Manhattan norm.\n",
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "T s u y (R s v y yv -\u003e T v y)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Analysis.html#normVectorMaximumProc",
        "fct-type": "unknown",
        "title": "normVectorMaximumProc"
      },
      "index": {
        "description": "Manhattan norm",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Analysis",
        "module": "Synthesizer.Dimensional.RateAmplitude.Analysis",
        "name": "normVectorMaximumProc",
        "normalized": "T a b c(R a d c e-\u003eT d c)",
        "package": "synthesizer",
        "partial": "Vector Maximum Proc",
        "signature": "T s u y(R s v y yv-\u003eT v y)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Analysis.html#v:normVectorSum",
      "description": {
        "fct-descr": "Sum norm.\n",
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "T u q (S v q) yv -\u003e T (Mul u v) q",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Analysis.html#normVectorSum",
        "fct-type": "unknown",
        "title": "normVectorSum"
      },
      "index": {
        "description": "Sum norm",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Analysis",
        "module": "Synthesizer.Dimensional.RateAmplitude.Analysis",
        "name": "normVectorSum",
        "normalized": "T a b(S c b)d-\u003eT(Mul a c)b",
        "package": "synthesizer",
        "partial": "Vector Sum",
        "signature": "T u q(S v q)yv-\u003eT(Mul u v)q"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Analysis.html#v:normVectorSumProc",
      "description": {
        "fct-descr": "Sum norm.\n",
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "T s u y (R s v y yv -\u003e T (Mul u v) y)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Analysis.html#normVectorSumProc",
        "fct-type": "unknown",
        "title": "normVectorSumProc"
      },
      "index": {
        "description": "Sum norm",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Analysis",
        "module": "Synthesizer.Dimensional.RateAmplitude.Analysis",
        "name": "normVectorSumProc",
        "normalized": "T a b c(R a d c e-\u003eT(Mul b d)c)",
        "package": "synthesizer",
        "partial": "Vector Sum Proc",
        "signature": "T s u y(R s v y yv-\u003eT(Mul u v)y)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Analysis.html#v:toFrequencySpectrum",
      "description": {
        "fct-descr": "Fourier analysis\n",
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "T u q (D v q (T T)) (T q) -\u003e T (Recip u) q (D (Mul u v) q (T T)) (T q)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Analysis.html#toFrequencySpectrum",
        "fct-type": "unknown",
        "title": "toFrequencySpectrum"
      },
      "index": {
        "description": "Fourier analysis",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Analysis",
        "module": "Synthesizer.Dimensional.RateAmplitude.Analysis",
        "name": "toFrequencySpectrum",
        "normalized": "T a b(D c b(T T))(T b)-\u003eT(Recip a)b(D(Mul a c)b(T T))(T b)",
        "package": "synthesizer",
        "partial": "Frequency Spectrum",
        "signature": "T u q(D v q(T T))(T q)-\u003eT(Recip u)q(D(Mul u v)q(T T))(T q)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Analysis.html#v:zeros",
      "description": {
        "fct-descr": "\u003cp\u003eDetects zeros (sign changes) in a signal.\nThis can be used as a simple measure of the portion\nof high frequencies or noise in the signal.\nThe result has a frequency as amplitude.\nIf you smooth it, you will get a curve that represents a frequency progress.\nIt ca be used as voiced/unvoiced detector in a vocoder.\n\u003c/p\u003e\u003cp\u003eThe result will be one value shorter than the input.\n\u003c/p\u003e",
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "T s u q (R s v q q -\u003e R s (Recip u) q q)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Analysis.html#zeros",
        "fct-type": "unknown",
        "title": "zeros"
      },
      "index": {
        "description": "Detects zeros sign changes in signal This can be used as simple measure of the portion of high frequencies or noise in the signal The result has frequency as amplitude If you smooth it you will get curve that represents frequency progress It ca be used as voiced unvoiced detector in vocoder The result will be one value shorter than the input",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Analysis",
        "module": "Synthesizer.Dimensional.RateAmplitude.Analysis",
        "name": "zeros",
        "normalized": "T a b c(R a d c c-\u003eR a(Recip b)c c)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T s u q(R s v q q-\u003eR s(Recip u)q q)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Control.html#t:Piece",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Control",
        "fct-package": "synthesizer",
        "fct-signature": "type",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Control.html#Piece",
        "fct-type": "unknown",
        "title": "Piece"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Control",
        "module": "Synthesizer.Dimensional.RateAmplitude.Control",
        "name": "Piece",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Piece",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Control.html#t:Piecewise",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Control",
        "fct-package": "synthesizer",
        "fct-signature": "type",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Control.html#Piecewise",
        "fct-type": "unknown",
        "title": "Piecewise"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Control",
        "module": "Synthesizer.Dimensional.RateAmplitude.Control",
        "name": "Piecewise",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Piecewise",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Control.html#v:#|",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Control",
        "fct-package": "synthesizer",
        "fct-signature": "(t, Piece t y sig) -\u003e y -\u003e (PieceDist t y sig, T t y sig)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Piecewise.html#%23%7C",
        "fct-type": "unknown",
        "title": "#|"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Control",
        "module": "Synthesizer.Dimensional.RateAmplitude.Control",
        "name": "#|",
        "normalized": "(a,Piece a b c)-\u003eb-\u003e(PieceDist a b c,T a b c)",
        "package": "synthesizer",
        "partial": "",
        "signature": "(t,Piece t y sig)-\u003ey-\u003e(PieceDist t y sig,T t y sig)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Control.html#v:#|-",
      "description": {
        "fct-descr": "\u003cp\u003eThe 6 operators simplify constructing a list of \u003ctt\u003ePieceData a\u003c/tt\u003e.\nThe description consists of nodes (namely the curve values at nodes)\nand the connecting curve types.\nThe naming scheme is as follows:\nIn the middle there is a bar \u003ctt\u003e|\u003c/tt\u003e.\nWith respect to the bar,\nthe pad symbol \u003ctt\u003e#\u003c/tt\u003e is at the side of the curve type,\nat the other side there is nothing, a minus sign \u003ctt\u003e-\u003c/tt\u003e, or an equality sign \u003ctt\u003e=\u003c/tt\u003e.\n\u003c/p\u003e\u003col\u003e\u003cli\u003e Nothing means that here is the start or the end node of a curve.\n\u003c/li\u003e\u003cli\u003e Minus means that here is a node where left and right curve meet at the same value.\n     The node description is thus one value.\n\u003c/li\u003e\u003cli\u003e Equality sign means that here is a split node,\n     where left and right curve might have different ending and beginning values, respectively.\n     The node description consists of a pair of values.\n\u003c/li\u003e\u003c/ol\u003e",
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Control",
        "fct-package": "synthesizer",
        "fct-signature": "(t, Piece t y sig) -\u003e (PieceRightSingle y, T t y sig) -\u003e (PieceDist t y sig, T t y sig)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Piecewise.html#%23%7C-",
        "fct-type": "unknown",
        "title": "#|-"
      },
      "index": {
        "description": "The operators simplify constructing list of PieceData The description consists of nodes namely the curve values at nodes and the connecting curve types The naming scheme is as follows In the middle there is bar With respect to the bar the pad symbol is at the side of the curve type at the other side there is nothing minus sign or an equality sign Nothing means that here is the start or the end node of curve Minus means that here is node where left and right curve meet at the same value The node description is thus one value Equality sign means that here is split node where left and right curve might have different ending and beginning values respectively The node description consists of pair of values",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Control",
        "module": "Synthesizer.Dimensional.RateAmplitude.Control",
        "name": "#|-",
        "normalized": "(a,Piece a b c)-\u003e(PieceRightSingle b,T a b c)-\u003e(PieceDist a b c,T a b c)",
        "package": "synthesizer",
        "partial": "",
        "signature": "(t,Piece t y sig)-\u003e(PieceRightSingle y,T t y sig)-\u003e(PieceDist t y sig,T t y sig)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Control.html#v:#|=",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Control",
        "fct-package": "synthesizer",
        "fct-signature": "(t, Piece t y sig) -\u003e (PieceRightDouble y, T t y sig) -\u003e (PieceDist t y sig, T t y sig)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Piecewise.html#%23%7C%3D",
        "fct-type": "unknown",
        "title": "#|="
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Control",
        "module": "Synthesizer.Dimensional.RateAmplitude.Control",
        "name": "#|=",
        "normalized": "(a,Piece a b c)-\u003e(PieceRightDouble b,T a b c)-\u003e(PieceDist a b c,T a b c)",
        "package": "synthesizer",
        "partial": "",
        "signature": "(t,Piece t y sig)-\u003e(PieceRightDouble y,T t y sig)-\u003e(PieceDist t y sig,T t y sig)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Control.html#v:-|#",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Control",
        "fct-package": "synthesizer",
        "fct-signature": "y -\u003e (PieceDist t y sig, T t y sig) -\u003e (PieceRightSingle y, T t y sig)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Piecewise.html#-%7C%23",
        "fct-type": "unknown",
        "title": "-|#"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Control",
        "module": "Synthesizer.Dimensional.RateAmplitude.Control",
        "name": "-|#",
        "normalized": "a-\u003e(PieceDist b a c,T b a c)-\u003e(PieceRightSingle a,T b a c)",
        "package": "synthesizer",
        "partial": "",
        "signature": "y-\u003e(PieceDist t y sig,T t y sig)-\u003e(PieceRightSingle y,T t y sig)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Control.html#v:=|#",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Control",
        "fct-package": "synthesizer",
        "fct-signature": "(y, y) -\u003e (PieceDist t y sig, T t y sig) -\u003e (PieceRightDouble y, T t y sig)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Piecewise.html#%3D%7C%23",
        "fct-type": "unknown",
        "title": "=|#"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Control",
        "module": "Synthesizer.Dimensional.RateAmplitude.Control",
        "name": "=|#",
        "normalized": "(a,a)-\u003e(PieceDist b a c,T b a c)-\u003e(PieceRightDouble a,T b a c)",
        "package": "synthesizer",
        "partial": "",
        "signature": "(y,y)-\u003e(PieceDist t y sig,T t y sig)-\u003e(PieceRightDouble y,T t y sig)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Control.html#v:constant",
      "description": {
        "fct-descr": "value \n",
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Control",
        "fct-package": "synthesizer",
        "fct-signature": "T v y-\u003e T s u t (R s v y y)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Control.html#constant",
        "fct-type": "unknown",
        "title": "constant"
      },
      "index": {
        "description": "value",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Control",
        "module": "Synthesizer.Dimensional.RateAmplitude.Control",
        "name": "constant",
        "normalized": "T a b-\u003eT c d e(R c a b b)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T v y-\u003eT s u t(R s v y y)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Control.html#v:constantVector",
      "description": {
        "fct-descr": "amplitude \nvalue \n",
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Control",
        "fct-package": "synthesizer",
        "fct-signature": "T v y-\u003e yv-\u003e T s u t (R s v y yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Control.html#constantVector",
        "fct-type": "unknown",
        "title": "constantVector"
      },
      "index": {
        "description": "amplitude value",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Control",
        "module": "Synthesizer.Dimensional.RateAmplitude.Control",
        "name": "constantVector",
        "normalized": "T a b-\u003ec-\u003eT d e f(R d a b c)",
        "package": "synthesizer",
        "partial": "Vector",
        "signature": "T v y-\u003eyv-\u003eT s u t(R s v y yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Control.html#v:cosinePiece",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Control",
        "fct-package": "synthesizer",
        "fct-signature": "Piece s u v q",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Control.html#cosinePiece",
        "fct-type": "unknown",
        "title": "cosinePiece"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Control",
        "module": "Synthesizer.Dimensional.RateAmplitude.Control",
        "name": "cosinePiece",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Piece",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Control.html#v:cubicHermite",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Control",
        "fct-package": "synthesizer",
        "fct-signature": "(T u q, (T v q, T (DimensionGradient u v) q)) -\u003e (T u q, (T v q, T (DimensionGradient u v) q)) -\u003e T s u q (R s v q q)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Control.html#cubicHermite",
        "fct-type": "unknown",
        "title": "cubicHermite"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Control",
        "module": "Synthesizer.Dimensional.RateAmplitude.Control",
        "name": "cubicHermite",
        "normalized": "(T a b,(T c b,T(DimensionGradient a c)b))-\u003e(T a b,(T c b,T(DimensionGradient a c)b))-\u003eT d a b(R d c b b)",
        "package": "synthesizer",
        "partial": "Hermite",
        "signature": "(T u q,(T v q,T(DimensionGradient u v)q))-\u003e(T u q,(T v q,T(DimensionGradient u v)q))-\u003eT s u q(R s v q q)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Control.html#v:cubicPiece",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Control",
        "fct-package": "synthesizer",
        "fct-signature": "T (DimensionGradient u v) q -\u003e T (DimensionGradient u v) q -\u003e Piece s u v q",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Control.html#cubicPiece",
        "fct-type": "unknown",
        "title": "cubicPiece"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Control",
        "module": "Synthesizer.Dimensional.RateAmplitude.Control",
        "name": "cubicPiece",
        "normalized": "T(DimensionGradient a b)c-\u003eT(DimensionGradient a b)c-\u003ePiece d a b c",
        "package": "synthesizer",
        "partial": "Piece",
        "signature": "T(DimensionGradient u v)q-\u003eT(DimensionGradient u v)q-\u003ePiece s u v q"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Control.html#v:exponential",
      "description": {
        "fct-descr": "time where the function reaches 1/e of the initial value \ninitial value \n",
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Control",
        "fct-package": "synthesizer",
        "fct-signature": "T u q-\u003e T v q-\u003e T s u q (R s v q q)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Control.html#exponential",
        "fct-type": "unknown",
        "title": "exponential"
      },
      "index": {
        "description": "time where the function reaches of the initial value initial value",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Control",
        "module": "Synthesizer.Dimensional.RateAmplitude.Control",
        "name": "exponential",
        "normalized": "T a b-\u003eT c b-\u003eT d a b(R d c b b)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T u q-\u003eT v q-\u003eT s u q(R s v q q)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Control.html#v:exponential2",
      "description": {
        "fct-descr": "half life, time where the function reaches 1/2 of the initial value \ninitial value \n",
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Control",
        "fct-package": "synthesizer",
        "fct-signature": "T u q-\u003e T v q-\u003e T s u q (R s v q q)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Control.html#exponential2",
        "fct-type": "unknown",
        "title": "exponential2"
      },
      "index": {
        "description": "half life time where the function reaches of the initial value initial value",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Control",
        "module": "Synthesizer.Dimensional.RateAmplitude.Control",
        "name": "exponential2",
        "normalized": "T a b-\u003eT c b-\u003eT d a b(R d c b b)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T u q-\u003eT v q-\u003eT s u q(R s v q q)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Control.html#v:exponentialFromTo",
      "description": {
        "fct-descr": "duration of the ramp \ninitial and final value \n",
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Control",
        "fct-package": "synthesizer",
        "fct-signature": "T u q-\u003e (T v q, T v q)-\u003e T s u q (R s v q q)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Control.html#exponentialFromTo",
        "fct-type": "unknown",
        "title": "exponentialFromTo"
      },
      "index": {
        "description": "duration of the ramp initial and final value",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Control",
        "module": "Synthesizer.Dimensional.RateAmplitude.Control",
        "name": "exponentialFromTo",
        "normalized": "T a b-\u003e(T c b,T c b)-\u003eT d a b(R d c b b)",
        "package": "synthesizer",
        "partial": "From To",
        "signature": "T u q-\u003e(T v q,T v q)-\u003eT s u q(R s v q q)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Control.html#v:exponentialPiece",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Control",
        "fct-package": "synthesizer",
        "fct-signature": "T v q -\u003e Piece s u v q",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Control.html#exponentialPiece",
        "fct-type": "unknown",
        "title": "exponentialPiece"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Control",
        "module": "Synthesizer.Dimensional.RateAmplitude.Control",
        "name": "exponentialPiece",
        "normalized": "T a b-\u003ePiece c d a b",
        "package": "synthesizer",
        "partial": "Piece",
        "signature": "T v q-\u003ePiece s u v q"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Control.html#v:line",
      "description": {
        "fct-descr": "duration of the ramp \ninitial and final value \n",
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Control",
        "fct-package": "synthesizer",
        "fct-signature": "T u q-\u003e (T v q, T v q)-\u003e T s u q (R s v q q)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Control.html#line",
        "fct-type": "unknown",
        "title": "line"
      },
      "index": {
        "description": "duration of the ramp initial and final value",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Control",
        "module": "Synthesizer.Dimensional.RateAmplitude.Control",
        "name": "line",
        "normalized": "T a b-\u003e(T c b,T c b)-\u003eT d a b(R d c b b)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T u q-\u003e(T v q,T v q)-\u003eT s u q(R s v q q)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Control.html#v:linear",
      "description": {
        "fct-descr": "slope of the curve \ninitial value \n",
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Control",
        "fct-package": "synthesizer",
        "fct-signature": "T (DimensionGradient u v) q-\u003e T v q-\u003e T s u q (R s v q q)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Control.html#linear",
        "fct-type": "unknown",
        "title": "linear"
      },
      "index": {
        "description": "slope of the curve initial value",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Control",
        "module": "Synthesizer.Dimensional.RateAmplitude.Control",
        "name": "linear",
        "normalized": "T(DimensionGradient a b)c-\u003eT b c-\u003eT d a c(R d b c c)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T(DimensionGradient u v)q-\u003eT v q-\u003eT s u q(R s v q q)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Control.html#v:linearPiece",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Control",
        "fct-package": "synthesizer",
        "fct-signature": "Piece s u v q",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Control.html#linearPiece",
        "fct-type": "unknown",
        "title": "linearPiece"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Control",
        "module": "Synthesizer.Dimensional.RateAmplitude.Control",
        "name": "linearPiece",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Piece",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Control.html#v:mapExponentialDimension",
      "description": {
        "fct-descr": "range: one is mapped to \u003ctt\u003ecenter*range\u003c/tt\u003e, must be positive \ncenter: zero is mapped to \u003ctt\u003ecenter\u003c/tt\u003e \n",
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Control",
        "fct-package": "synthesizer",
        "fct-signature": "y-\u003e T u y-\u003e T s u t (R s Scalar y y -\u003e R s u y y)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Control.html#mapExponentialDimension",
        "fct-type": "unknown",
        "title": "mapExponentialDimension"
      },
      "index": {
        "description": "range one is mapped to center range must be positive center zero is mapped to center",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Control",
        "module": "Synthesizer.Dimensional.RateAmplitude.Control",
        "name": "mapExponentialDimension",
        "normalized": "a-\u003eT b a-\u003eT c b d(R c Scalar a a-\u003eR c b a a)",
        "package": "synthesizer",
        "partial": "Exponential Dimension",
        "signature": "y-\u003eT u y-\u003eT s u t(R s Scalar y y-\u003eR s u y y)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Control.html#v:mapLinearDimension",
      "description": {
        "fct-descr": "range: one is mapped to \u003ctt\u003ecenter + range * ampX\u003c/tt\u003e \ncenter: zero is mapped to \u003ctt\u003ecenter\u003c/tt\u003e \n",
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Control",
        "fct-package": "synthesizer",
        "fct-signature": "T v y-\u003e T (Mul v u) y-\u003e T s u t (R s u y y -\u003e R s (Mul v u) y y)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Control.html#mapLinearDimension",
        "fct-type": "unknown",
        "title": "mapLinearDimension"
      },
      "index": {
        "description": "range one is mapped to center range ampX center zero is mapped to center",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Control",
        "module": "Synthesizer.Dimensional.RateAmplitude.Control",
        "name": "mapLinearDimension",
        "normalized": "T a b-\u003eT(Mul a c)b-\u003eT d c e(R d c b b-\u003eR d(Mul a c)b b)",
        "package": "synthesizer",
        "partial": "Linear Dimension",
        "signature": "T v y-\u003eT(Mul v u)y-\u003eT s u t(R s u y y-\u003eR s(Mul v u)y y)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Control.html#v:piecewise",
      "description": {
        "fct-descr": "Since this function looks for the maximum node value,\nand since the signal parameter inference phase must be completed before signal processing,\ninfinite descriptions cannot be used here.\n",
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Control",
        "fct-package": "synthesizer",
        "fct-signature": "Piecewise s u v q -\u003e T s u q (R s v q q)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Control.html#piecewise",
        "fct-type": "unknown",
        "title": "piecewise"
      },
      "index": {
        "description": "Since this function looks for the maximum node value and since the signal parameter inference phase must be completed before signal processing infinite descriptions cannot be used here",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Control",
        "module": "Synthesizer.Dimensional.RateAmplitude.Control",
        "name": "piecewise",
        "normalized": "Piecewise a b c d-\u003eT a b d(R a c d d)",
        "package": "synthesizer",
        "partial": "",
        "signature": "Piecewise s u v q-\u003eT s u q(R s v q q)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Control.html#v:piecewiseVolume",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Control",
        "fct-package": "synthesizer",
        "fct-signature": "Piecewise s u v q -\u003e T v q -\u003e T s u q (R s v q q)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Control.html#piecewiseVolume",
        "fct-type": "unknown",
        "title": "piecewiseVolume"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Control",
        "module": "Synthesizer.Dimensional.RateAmplitude.Control",
        "name": "piecewiseVolume",
        "normalized": "Piecewise a b c d-\u003eT c d-\u003eT a b d(R a c d d)",
        "package": "synthesizer",
        "partial": "Volume",
        "signature": "Piecewise s u v q-\u003eT v q-\u003eT s u q(R s v q q)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Control.html#v:stepPiece",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Control",
        "fct-package": "synthesizer",
        "fct-signature": "Piece s u v q",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Control.html#stepPiece",
        "fct-type": "unknown",
        "title": "stepPiece"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Control",
        "module": "Synthesizer.Dimensional.RateAmplitude.Control",
        "name": "stepPiece",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Piece",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Control.html#v:|#",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Control",
        "fct-package": "synthesizer",
        "fct-signature": "y -\u003e (PieceDist t y sig, T t y sig) -\u003e T t y sig",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Piecewise.html#%7C%23",
        "fct-type": "unknown",
        "title": "|#"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Control",
        "module": "Synthesizer.Dimensional.RateAmplitude.Control",
        "name": "|#",
        "normalized": "a-\u003e(PieceDist b a c,T b a c)-\u003eT b a c",
        "package": "synthesizer",
        "partial": "",
        "signature": "y-\u003e(PieceDist t y sig,T t y sig)-\u003eT t y sig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Cut.html#v:append",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "T s u t (R s v y yv -\u003e R s v y yv -\u003e R s v y yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Cut.html#append",
        "fct-type": "unknown",
        "title": "append"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Cut",
        "module": "Synthesizer.Dimensional.RateAmplitude.Cut",
        "name": "append",
        "normalized": "T a b c(R a d e f-\u003eR a d e f-\u003eR a d e f)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T s u t(R s v y yv-\u003eR s v y yv-\u003eR s v y yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Cut.html#v:appendVolume",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "T v y -\u003e T s u t (R s v y yv -\u003e R s v y yv -\u003e R s v y yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Cut.html#appendVolume",
        "fct-type": "unknown",
        "title": "appendVolume"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Cut",
        "module": "Synthesizer.Dimensional.RateAmplitude.Cut",
        "name": "appendVolume",
        "normalized": "T a b-\u003eT c d e(R c a b f-\u003eR c a b f-\u003eR c a b f)",
        "package": "synthesizer",
        "partial": "Volume",
        "signature": "T v y-\u003eT s u t(R s v y yv-\u003eR s v y yv-\u003eR s v y yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Cut.html#v:arrange",
      "description": {
        "fct-descr": "Dim of the time values in the time ordered list. \nThe mixed signal. \n",
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "T u t-\u003e T s u t (T t (R s v y yv) -\u003e R s v y yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Cut.html#arrange",
        "fct-type": "unknown",
        "title": "arrange"
      },
      "index": {
        "description": "Dim of the time values in the time ordered list The mixed signal",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Cut",
        "module": "Synthesizer.Dimensional.RateAmplitude.Cut",
        "name": "arrange",
        "normalized": "T a b-\u003eT c a b(T b(R c d e f)-\u003eR c d e f)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T u t-\u003eT s u t(T t(R s v y yv)-\u003eR s v y yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Cut.html#v:arrangeVolume",
      "description": {
        "fct-descr": "Output volume. \nDim of the time values in the time ordered list. \nThe mixed signal. \n",
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "T v y-\u003e T u t-\u003e T s u t (T t (R s v y yv) -\u003e R s v y yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Cut.html#arrangeVolume",
        "fct-type": "unknown",
        "title": "arrangeVolume"
      },
      "index": {
        "description": "Output volume Dim of the time values in the time ordered list The mixed signal",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Cut",
        "module": "Synthesizer.Dimensional.RateAmplitude.Cut",
        "name": "arrangeVolume",
        "normalized": "T a b-\u003eT c d-\u003eT e c d(T d(R e a b f)-\u003eR e a b f)",
        "package": "synthesizer",
        "partial": "Volume",
        "signature": "T v y-\u003eT u t-\u003eT s u t(T t(R s v y yv)-\u003eR s v y yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Cut.html#v:concat",
      "description": {
        "fct-descr": "Similar to \u003ctt\u003efoldr1 append\u003c/tt\u003e but more efficient and accurate,\nbecause it reduces the number of amplifications.\nDoes not work for infinite lists,\nbecause no maximum amplitude can be computed.\n",
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "T s u t ([R s v y yv] -\u003e R s v y yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Cut.html#concat",
        "fct-type": "unknown",
        "title": "concat"
      },
      "index": {
        "description": "Similar to foldr1 append but more efficient and accurate because it reduces the number of amplifications Does not work for infinite lists because no maximum amplitude can be computed",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Cut",
        "module": "Synthesizer.Dimensional.RateAmplitude.Cut",
        "name": "concat",
        "normalized": "T a b c([R a d e f]-\u003eR a d e f)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T s u t([R s v y yv]-\u003eR s v y yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Cut.html#v:concatVolume",
      "description": {
        "fct-descr": "Give the output volume explicitly.\nDoes also work for infinite lists.\n",
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "T v y -\u003e T s u t ([R s v y yv] -\u003e R s v y yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Cut.html#concatVolume",
        "fct-type": "unknown",
        "title": "concatVolume"
      },
      "index": {
        "description": "Give the output volume explicitly Does also work for infinite lists",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Cut",
        "module": "Synthesizer.Dimensional.RateAmplitude.Cut",
        "name": "concatVolume",
        "normalized": "T a b-\u003eT c d e([R c a b f]-\u003eR c a b f)",
        "package": "synthesizer",
        "partial": "Volume",
        "signature": "T v y-\u003eT s u t([R s v y yv]-\u003eR s v y yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Cut.html#v:drop",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "T u t -\u003e T s u t (R s v y yv -\u003e R s v y yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Cut.html#drop",
        "fct-type": "unknown",
        "title": "drop"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Cut",
        "module": "Synthesizer.Dimensional.RateAmplitude.Cut",
        "name": "drop",
        "normalized": "T a b-\u003eT c a b(R c d e f-\u003eR c d e f)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T u t-\u003eT s u t(R s v y yv-\u003eR s v y yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Cut.html#v:leftFromStereo",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "T s u t (R s u y (T yv) -\u003e R s u y yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Cut.html#leftFromStereo",
        "fct-type": "unknown",
        "title": "leftFromStereo"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Cut",
        "module": "Synthesizer.Dimensional.RateAmplitude.Cut",
        "name": "leftFromStereo",
        "normalized": "T a b c(R a b d(T e)-\u003eR a b d e)",
        "package": "synthesizer",
        "partial": "From Stereo",
        "signature": "T s u t(R s u y(T yv)-\u003eR s u y yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Cut.html#v:mergeStereo",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "T s u t (R s v y yv -\u003e R s v y yv -\u003e R s v y (T yv))",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Cut.html#mergeStereo",
        "fct-type": "unknown",
        "title": "mergeStereo"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Cut",
        "module": "Synthesizer.Dimensional.RateAmplitude.Cut",
        "name": "mergeStereo",
        "normalized": "T a b c(R a d e f-\u003eR a d e f-\u003eR a d e(T f))",
        "package": "synthesizer",
        "partial": "Stereo",
        "signature": "T s u t(R s v y yv-\u003eR s v y yv-\u003eR s v y(T yv))"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Cut.html#v:mergeStereoVolume",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "T v y -\u003e T s u t (R s v y yv -\u003e R s v y yv -\u003e R s v y (T yv))",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Cut.html#mergeStereoVolume",
        "fct-type": "unknown",
        "title": "mergeStereoVolume"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Cut",
        "module": "Synthesizer.Dimensional.RateAmplitude.Cut",
        "name": "mergeStereoVolume",
        "normalized": "T a b-\u003eT c d e(R c a b f-\u003eR c a b f-\u003eR c a b(T f))",
        "package": "synthesizer",
        "partial": "Stereo Volume",
        "signature": "T v y-\u003eT s u t(R s v y yv-\u003eR s v y yv-\u003eR s v y(T yv))"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Cut.html#v:rightFromStereo",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "T s u t (R s u y (T yv) -\u003e R s u y yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Cut.html#rightFromStereo",
        "fct-type": "unknown",
        "title": "rightFromStereo"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Cut",
        "module": "Synthesizer.Dimensional.RateAmplitude.Cut",
        "name": "rightFromStereo",
        "normalized": "T a b c(R a b d(T e)-\u003eR a b d e)",
        "package": "synthesizer",
        "partial": "From Stereo",
        "signature": "T s u t(R s u y(T yv)-\u003eR s u y yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Cut.html#v:splitAt",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "T u t -\u003e T s u t (R s v y yv -\u003e (R s v y yv, R s v y yv))",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Cut.html#splitAt",
        "fct-type": "unknown",
        "title": "splitAt"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Cut",
        "module": "Synthesizer.Dimensional.RateAmplitude.Cut",
        "name": "splitAt",
        "normalized": "T a b-\u003eT c a b(R c d e f-\u003e(R c d e f,R c d e f))",
        "package": "synthesizer",
        "partial": "At",
        "signature": "T u t-\u003eT s u t(R s v y yv-\u003e(R s v y yv,R s v y yv))"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Cut.html#v:take",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "T u t -\u003e T s u t (R s v y yv -\u003e R s v y yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Cut.html#take",
        "fct-type": "unknown",
        "title": "take"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Cut",
        "module": "Synthesizer.Dimensional.RateAmplitude.Cut",
        "name": "take",
        "normalized": "T a b-\u003eT c a b(R c d e f-\u003eR c d e f)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T u t-\u003eT s u t(R s v y yv-\u003eR s v y yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Cut.html#v:takeUntilPause",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "T v y -\u003e T u t -\u003e T s u t (R s v y yv -\u003e R s v y yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Cut.html#takeUntilPause",
        "fct-type": "unknown",
        "title": "takeUntilPause"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Cut",
        "module": "Synthesizer.Dimensional.RateAmplitude.Cut",
        "name": "takeUntilPause",
        "normalized": "T a b-\u003eT c d-\u003eT e c d(R e a b f-\u003eR e a b f)",
        "package": "synthesizer",
        "partial": "Until Pause",
        "signature": "T v y-\u003eT u t-\u003eT s u t(R s v y yv-\u003eR s v y yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Cut.html#v:unzip",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "T s u t (R s v y (yv0, yv1) -\u003e (R s v y yv0, R s v y yv1))",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Cut.html#unzip",
        "fct-type": "unknown",
        "title": "unzip"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Cut",
        "module": "Synthesizer.Dimensional.RateAmplitude.Cut",
        "name": "unzip",
        "normalized": "T a b c(R a d e(f,f)-\u003e(R a d e f,R a d e f))",
        "package": "synthesizer",
        "partial": "",
        "signature": "T s u t(R s v y(yv,yv)-\u003e(R s v y yv,R s v y yv))"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Cut.html#v:unzip3",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "T s u t (R s v y (yv0, yv1, yv2) -\u003e (R s v y yv0, R s v y yv1, R s v y yv2))",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Cut.html#unzip3",
        "fct-type": "unknown",
        "title": "unzip3"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Cut",
        "module": "Synthesizer.Dimensional.RateAmplitude.Cut",
        "name": "unzip3",
        "normalized": "T a b c(R a d e(f,f,f)-\u003e(R a d e f,R a d e f,R a d e f))",
        "package": "synthesizer",
        "partial": "",
        "signature": "T s u t(R s v y(yv,yv,yv)-\u003e(R s v y yv,R s v y yv,R s v y yv))"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Cut.html#v:zip",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "T s u t (R s v y yv0 -\u003e R s v y yv1 -\u003e R s v y (yv0, yv1))",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Cut.html#zip",
        "fct-type": "unknown",
        "title": "zip"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Cut",
        "module": "Synthesizer.Dimensional.RateAmplitude.Cut",
        "name": "zip",
        "normalized": "T a b c(R a d e f-\u003eR a d e f-\u003eR a d e(f,f))",
        "package": "synthesizer",
        "partial": "",
        "signature": "T s u t(R s v y yv-\u003eR s v y yv-\u003eR s v y(yv,yv))"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Cut.html#v:zip3",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "T s u t (R s v y yv0 -\u003e R s v y yv1 -\u003e R s v y yv2 -\u003e R s v y (yv0, yv1, yv2))",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Cut.html#zip3",
        "fct-type": "unknown",
        "title": "zip3"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Cut",
        "module": "Synthesizer.Dimensional.RateAmplitude.Cut",
        "name": "zip3",
        "normalized": "T a b c(R a d e f-\u003eR a d e f-\u003eR a d e f-\u003eR a d e(f,f,f))",
        "package": "synthesizer",
        "partial": "",
        "signature": "T s u t(R s v y yv-\u003eR s v y yv-\u003eR s v y yv-\u003eR s v y(yv,yv,yv))"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Cut.html#v:zip3Volume",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "T v y -\u003e T s u t (R s v y yv0 -\u003e R s v y yv1 -\u003e R s v y yv2 -\u003e R s v y (yv0, yv1, yv2))",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Cut.html#zip3Volume",
        "fct-type": "unknown",
        "title": "zip3Volume"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Cut",
        "module": "Synthesizer.Dimensional.RateAmplitude.Cut",
        "name": "zip3Volume",
        "normalized": "T a b-\u003eT c d e(R c a b f-\u003eR c a b f-\u003eR c a b f-\u003eR c a b(f,f,f))",
        "package": "synthesizer",
        "partial": "Volume",
        "signature": "T v y-\u003eT s u t(R s v y yv-\u003eR s v y yv-\u003eR s v y yv-\u003eR s v y(yv,yv,yv))"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Cut.html#v:zipVolume",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "T v y -\u003e T s u t (R s v y yv0 -\u003e R s v y yv1 -\u003e R s v y (yv0, yv1))",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Cut.html#zipVolume",
        "fct-type": "unknown",
        "title": "zipVolume"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Cut",
        "module": "Synthesizer.Dimensional.RateAmplitude.Cut",
        "name": "zipVolume",
        "normalized": "T a b-\u003eT c d e(R c a b f-\u003eR c a b f-\u003eR c a b(f,f))",
        "package": "synthesizer",
        "partial": "Volume",
        "signature": "T v y-\u003eT s u t(R s v y yv-\u003eR s v y yv-\u003eR s v y(yv,yv))"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Displacement.html#v:distort",
      "description": {
        "fct-descr": "Distort the signal using a flat function.\nThe first signal gives the scaling of the function.\nIf the scaling is c and the input sample is y,\nthen \u003ctt\u003ec * f(y/c)\u003c/tt\u003e is output.\nThis way we can use an (efficient) flat function\nand have a simple, yet dimension conform, way of controlling the distortion.\nE.g. if the distortion function is \u003ctt\u003etanh\u003c/tt\u003e\nthen the value \u003ctt\u003ec\u003c/tt\u003e controls the saturation level.\n",
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Displacement",
        "fct-package": "synthesizer",
        "fct-signature": "(yv -\u003e yv) -\u003e T s u t (R s v y y -\u003e R s v y yv -\u003e R s v y yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Displacement.html#distort",
        "fct-type": "unknown",
        "title": "distort"
      },
      "index": {
        "description": "Distort the signal using flat function The first signal gives the scaling of the function If the scaling is and the input sample is then is output This way we can use an efficient flat function and have simple yet dimension conform way of controlling the distortion E.g if the distortion function is tanh then the value controls the saturation level",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Displacement",
        "module": "Synthesizer.Dimensional.RateAmplitude.Displacement",
        "name": "distort",
        "normalized": "(a-\u003ea)-\u003eT b c d(R b e f f-\u003eR b e f a-\u003eR b e f a)",
        "package": "synthesizer",
        "partial": "",
        "signature": "(yv-\u003eyv)-\u003eT s u t(R s v y y-\u003eR s v y yv-\u003eR s v y yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Displacement.html#v:mix",
      "description": {
        "fct-descr": "Mix two signals.\n    In opposition to \u003ctt\u003e\u003ca\u003ezipWith\u003c/a\u003e\u003c/tt\u003e the result has the length of the longer signal. \n",
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Displacement",
        "fct-package": "synthesizer",
        "fct-signature": "T s u t (R s v y yv -\u003e R s v y yv -\u003e R s v y yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Displacement.html#mix",
        "fct-type": "unknown",
        "title": "mix"
      },
      "index": {
        "description": "Mix two signals In opposition to zipWith the result has the length of the longer signal",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Displacement",
        "module": "Synthesizer.Dimensional.RateAmplitude.Displacement",
        "name": "mix",
        "normalized": "T a b c(R a d e f-\u003eR a d e f-\u003eR a d e f)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T s u t(R s v y yv-\u003eR s v y yv-\u003eR s v y yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Displacement.html#v:mixMulti",
      "description": {
        "fct-descr": "Mix one or more signals.\n",
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Displacement",
        "fct-package": "synthesizer",
        "fct-signature": "T s u t ([R s v y yv] -\u003e R s v y yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Displacement.html#mixMulti",
        "fct-type": "unknown",
        "title": "mixMulti"
      },
      "index": {
        "description": "Mix one or more signals",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Displacement",
        "module": "Synthesizer.Dimensional.RateAmplitude.Displacement",
        "name": "mixMulti",
        "normalized": "T a b c([R a d e f]-\u003eR a d e f)",
        "package": "synthesizer",
        "partial": "Multi",
        "signature": "T s u t([R s v y yv]-\u003eR s v y yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Displacement.html#v:mixMultiVolume",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Displacement",
        "fct-package": "synthesizer",
        "fct-signature": "T v y -\u003e T s u t ([R s v y yv] -\u003e R s v y yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Displacement.html#mixMultiVolume",
        "fct-type": "unknown",
        "title": "mixMultiVolume"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Displacement",
        "module": "Synthesizer.Dimensional.RateAmplitude.Displacement",
        "name": "mixMultiVolume",
        "normalized": "T a b-\u003eT c d e([R c a b f]-\u003eR c a b f)",
        "package": "synthesizer",
        "partial": "Multi Volume",
        "signature": "T v y-\u003eT s u t([R s v y yv]-\u003eR s v y yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Displacement.html#v:mixVolume",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Displacement",
        "fct-package": "synthesizer",
        "fct-signature": "T v y -\u003e T s u t (R s v y yv -\u003e R s v y yv -\u003e R s v y yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Displacement.html#mixVolume",
        "fct-type": "unknown",
        "title": "mixVolume"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Displacement",
        "module": "Synthesizer.Dimensional.RateAmplitude.Displacement",
        "name": "mixVolume",
        "normalized": "T a b-\u003eT c d e(R c a b f-\u003eR c a b f-\u003eR c a b f)",
        "package": "synthesizer",
        "partial": "Volume",
        "signature": "T v y-\u003eT s u t(R s v y yv-\u003eR s v y yv-\u003eR s v y yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Displacement.html#v:raise",
      "description": {
        "fct-descr": "Add a number to all of the signal values.\nThis is useful for adjusting the center of a modulation.\n",
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Displacement",
        "fct-package": "synthesizer",
        "fct-signature": "T v y -\u003e yv -\u003e T s u t (R s v y yv -\u003e R s v y yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Displacement.html#raise",
        "fct-type": "unknown",
        "title": "raise"
      },
      "index": {
        "description": "Add number to all of the signal values This is useful for adjusting the center of modulation",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Displacement",
        "module": "Synthesizer.Dimensional.RateAmplitude.Displacement",
        "name": "raise",
        "normalized": "T a b-\u003ec-\u003eT d e f(R d a b c-\u003eR d a b c)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T v y-\u003eyv-\u003eT s u t(R s v y yv-\u003eR s v y yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-File.html#v:renderTimeVoltageMonoDoubleToInt16",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.File",
        "fct-package": "synthesizer",
        "fct-signature": "T Frequency Double -\u003e FilePath -\u003e (forall s.  T s Time Double (R s Voltage Double Double)) -\u003e IO ExitCode",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-File.html#renderTimeVoltageMonoDoubleToInt16",
        "fct-type": "unknown",
        "title": "renderTimeVoltageMonoDoubleToInt16"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude File",
        "module": "Synthesizer.Dimensional.RateAmplitude.File",
        "name": "renderTimeVoltageMonoDoubleToInt16",
        "normalized": "T Frequency Double-\u003eFilePath-\u003e(a b T c Time Double(R c Voltage Double Double))-\u003eIO ExitCode",
        "package": "synthesizer",
        "partial": "Time Voltage Mono Double To Int",
        "signature": "T Frequency Double-\u003eFilePath-\u003e(forall s. T s Time Double(R s Voltage Double Double))-\u003eIO ExitCode"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-File.html#v:renderTimeVoltageStereoDoubleToInt16",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.File",
        "fct-package": "synthesizer",
        "fct-signature": "T Frequency Double -\u003e FilePath -\u003e (forall s.  T s Time Double (R s Voltage Double (T Double))) -\u003e IO ExitCode",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-File.html#renderTimeVoltageStereoDoubleToInt16",
        "fct-type": "unknown",
        "title": "renderTimeVoltageStereoDoubleToInt16"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude File",
        "module": "Synthesizer.Dimensional.RateAmplitude.File",
        "name": "renderTimeVoltageStereoDoubleToInt16",
        "normalized": "T Frequency Double-\u003eFilePath-\u003e(a b T c Time Double(R c Voltage Double(T Double)))-\u003eIO ExitCode",
        "package": "synthesizer",
        "partial": "Time Voltage Stereo Double To Int",
        "signature": "T Frequency Double-\u003eFilePath-\u003e(forall s. T s Time Double(R s Voltage Double(T Double)))-\u003eIO ExitCode"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-File.html#v:write",
      "description": {
        "fct-descr": "\u003cp\u003eThe output format is determined by SoX by the file name extension.\nThe sample precision is determined by the provided \u003ctt\u003e\u003ca\u003eBuilder\u003c/a\u003e\u003c/tt\u003e function.\n\u003c/p\u003e\u003cp\u003eExample:\n\u003c/p\u003e\u003cpre\u003e import qualified Data.StorableVector.Lazy.Builder as Builder\n\n write (DN.frequency one) (DN.voltage one) (\\i -\u003e Builder.put (i::Int16)) \"test.aiff\" sound\n\u003c/pre\u003e",
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.File",
        "fct-package": "synthesizer",
        "fct-signature": "T (Recip u) t -\u003e T v y -\u003e (int -\u003e Builder int) -\u003e FilePath -\u003e T u t (S v y) yv -\u003e IO ExitCode",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-File.html#write",
        "fct-type": "unknown",
        "title": "write"
      },
      "index": {
        "description": "The output format is determined by SoX by the file name extension The sample precision is determined by the provided Builder function Example import qualified Data.StorableVector.Lazy.Builder as Builder write DN.frequency one DN.voltage one Builder.put Int16 test.aiff sound",
        "hierarchy": "Synthesizer Dimensional RateAmplitude File",
        "module": "Synthesizer.Dimensional.RateAmplitude.File",
        "name": "write",
        "normalized": "T(Recip a)b-\u003eT c d-\u003e(e-\u003eBuilder e)-\u003eFilePath-\u003eT a b(S c d)f-\u003eIO ExitCode",
        "package": "synthesizer",
        "partial": "",
        "signature": "T(Recip u)t-\u003eT v y-\u003e(int-\u003eBuilder int)-\u003eFilePath-\u003eT u t(S v y)yv-\u003eIO ExitCode"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-File.html#v:writeTimeVoltage",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.File",
        "fct-package": "synthesizer",
        "fct-signature": "(int -\u003e Builder int) -\u003e FilePath -\u003e T Time t (S Voltage y) yv -\u003e IO ExitCode",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-File.html#writeTimeVoltage",
        "fct-type": "unknown",
        "title": "writeTimeVoltage"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude File",
        "module": "Synthesizer.Dimensional.RateAmplitude.File",
        "name": "writeTimeVoltage",
        "normalized": "(a-\u003eBuilder a)-\u003eFilePath-\u003eT Time b(S Voltage c)d-\u003eIO ExitCode",
        "package": "synthesizer",
        "partial": "Time Voltage",
        "signature": "(int-\u003eBuilder int)-\u003eFilePath-\u003eT Time t(S Voltage y)yv-\u003eIO ExitCode"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-File.html#v:writeTimeVoltageMonoDoubleToInt16",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.File",
        "fct-package": "synthesizer",
        "fct-signature": "FilePath -\u003e T Time Double (S Voltage Double) Double -\u003e IO ExitCode",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-File.html#writeTimeVoltageMonoDoubleToInt16",
        "fct-type": "unknown",
        "title": "writeTimeVoltageMonoDoubleToInt16"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude File",
        "module": "Synthesizer.Dimensional.RateAmplitude.File",
        "name": "writeTimeVoltageMonoDoubleToInt16",
        "normalized": "FilePath-\u003eT Time Double(S Voltage Double)Double-\u003eIO ExitCode",
        "package": "synthesizer",
        "partial": "Time Voltage Mono Double To Int",
        "signature": "FilePath-\u003eT Time Double(S Voltage Double)Double-\u003eIO ExitCode"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-File.html#v:writeTimeVoltageStereoDoubleToInt16",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.File",
        "fct-package": "synthesizer",
        "fct-signature": "FilePath -\u003e T Time Double (S Voltage Double) (T Double) -\u003e IO ExitCode",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-File.html#writeTimeVoltageStereoDoubleToInt16",
        "fct-type": "unknown",
        "title": "writeTimeVoltageStereoDoubleToInt16"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude File",
        "module": "Synthesizer.Dimensional.RateAmplitude.File",
        "name": "writeTimeVoltageStereoDoubleToInt16",
        "normalized": "FilePath-\u003eT Time Double(S Voltage Double)(T Double)-\u003eIO ExitCode",
        "package": "synthesizer",
        "partial": "Time Voltage Stereo Double To Int",
        "signature": "FilePath-\u003eT Time Double(S Voltage Double)(T Double)-\u003eIO ExitCode"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Filter.html#v:allpassCascade",
      "description": {
        "fct-descr": "order, number of filters in the cascade \nthe phase shift to be achieved for the given frequency \n",
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "Int-\u003e q-\u003e FrequencyFilter s u q r (Parameter q) v yv yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Filter.html#allpassCascade",
        "fct-type": "unknown",
        "title": "allpassCascade"
      },
      "index": {
        "description": "order number of filters in the cascade the phase shift to be achieved for the given frequency",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Filter",
        "module": "Synthesizer.Dimensional.RateAmplitude.Filter",
        "name": "allpassCascade",
        "normalized": "Int-\u003ea-\u003eFrequencyFilter b c a d(Parameter a)e f f",
        "package": "synthesizer",
        "partial": "Cascade",
        "signature": "Int-\u003eq-\u003eFrequencyFilter s u q r(Parameter q)v yv yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Filter.html#v:allpassFlangerPhase",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Rate-Filter.html#allpassFlangerPhase",
        "fct-type": "unknown",
        "title": "allpassFlangerPhase"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Filter",
        "module": "Synthesizer.Dimensional.RateAmplitude.Filter",
        "name": "allpassFlangerPhase",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Flanger Phase",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Filter.html#v:amplify",
      "description": {
        "fct-descr": "The amplification factor must be positive. \n",
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "y -\u003e T s u t (R s v y yv -\u003e R s v y yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Filter.html#amplify",
        "fct-type": "unknown",
        "title": "amplify"
      },
      "index": {
        "description": "The amplification factor must be positive",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Filter",
        "module": "Synthesizer.Dimensional.RateAmplitude.Filter",
        "name": "amplify",
        "normalized": "a-\u003eT b c d(R b e a f-\u003eR b e a f)",
        "package": "synthesizer",
        "partial": "",
        "signature": "y-\u003eT s u t(R s v y yv-\u003eR s v y yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Filter.html#v:amplifyDimension",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "T v0 y -\u003e T s u t (R s v1 y yv -\u003e R s (Mul v0 v1) y yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Filter.html#amplifyDimension",
        "fct-type": "unknown",
        "title": "amplifyDimension"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Filter",
        "module": "Synthesizer.Dimensional.RateAmplitude.Filter",
        "name": "amplifyDimension",
        "normalized": "T a b-\u003eT c d e(R c a b f-\u003eR c(Mul a a)b f)",
        "package": "synthesizer",
        "partial": "Dimension",
        "signature": "T v y-\u003eT s u t(R s v y yv-\u003eR s(Mul v v)y yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Filter.html#v:bandlimitFromUniversal",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "T s sig (Result yv) -\u003e T s sig yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Rate-Filter.html#bandlimitFromUniversal",
        "fct-type": "unknown",
        "title": "bandlimitFromUniversal"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Filter",
        "module": "Synthesizer.Dimensional.RateAmplitude.Filter",
        "name": "bandlimitFromUniversal",
        "normalized": "T a b(Result c)-\u003eT a b c",
        "package": "synthesizer",
        "partial": "From Universal",
        "signature": "T s sig(Result yv)-\u003eT s sig yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Filter.html#v:bandpassFromUniversal",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "T s sig (Result yv) -\u003e T s sig yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Rate-Filter.html#bandpassFromUniversal",
        "fct-type": "unknown",
        "title": "bandpassFromUniversal"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Filter",
        "module": "Synthesizer.Dimensional.RateAmplitude.Filter",
        "name": "bandpassFromUniversal",
        "normalized": "T a b(Result c)-\u003eT a b c",
        "package": "synthesizer",
        "partial": "From Universal",
        "signature": "T s sig(Result yv)-\u003eT s sig yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Filter.html#v:butterworthHighpass",
      "description": {
        "fct-descr": "Order of the filter, must be even,\n                        the higher the order, the sharper is the separation of frequencies. \n",
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "Int-\u003e ResonantFilter s u q r flat (Pole q) v yv yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Filter.html#butterworthHighpass",
        "fct-type": "unknown",
        "title": "butterworthHighpass"
      },
      "index": {
        "description": "Order of the filter must be even the higher the order the sharper is the separation of frequencies",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Filter",
        "module": "Synthesizer.Dimensional.RateAmplitude.Filter",
        "name": "butterworthHighpass",
        "normalized": "Int-\u003eResonantFilter a b c d e(Pole c)f g g",
        "package": "synthesizer",
        "partial": "Highpass",
        "signature": "Int-\u003eResonantFilter s u q r flat(Pole q)v yv yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Filter.html#v:butterworthLowpass",
      "description": {
        "fct-descr": "Order of the filter, must be even,\n                        the higher the order, the sharper is the separation of frequencies. \n",
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "Int-\u003e ResonantFilter s u q r flat (Pole q) v yv yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Filter.html#butterworthLowpass",
        "fct-type": "unknown",
        "title": "butterworthLowpass"
      },
      "index": {
        "description": "Order of the filter must be even the higher the order the sharper is the separation of frequencies",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Filter",
        "module": "Synthesizer.Dimensional.RateAmplitude.Filter",
        "name": "butterworthLowpass",
        "normalized": "Int-\u003eResonantFilter a b c d e(Pole c)f g g",
        "package": "synthesizer",
        "partial": "Lowpass",
        "signature": "Int-\u003eResonantFilter s u q r flat(Pole q)v yv yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Filter.html#v:chebyshevAHighpass",
      "description": {
        "fct-descr": "Order of the filter, must be even,\n                        the higher the order, the sharper is the separation of frequencies. \n",
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "Int-\u003e ResonantFilter s u q r flat (Pole q) v yv yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Filter.html#chebyshevAHighpass",
        "fct-type": "unknown",
        "title": "chebyshevAHighpass"
      },
      "index": {
        "description": "Order of the filter must be even the higher the order the sharper is the separation of frequencies",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Filter",
        "module": "Synthesizer.Dimensional.RateAmplitude.Filter",
        "name": "chebyshevAHighpass",
        "normalized": "Int-\u003eResonantFilter a b c d e(Pole c)f g g",
        "package": "synthesizer",
        "partial": "AHighpass",
        "signature": "Int-\u003eResonantFilter s u q r flat(Pole q)v yv yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Filter.html#v:chebyshevALowpass",
      "description": {
        "fct-descr": "Order of the filter, must be even,\n                        the higher the order, the sharper is the separation of frequencies. \n",
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "Int-\u003e ResonantFilter s u q r flat (Pole q) v yv yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Filter.html#chebyshevALowpass",
        "fct-type": "unknown",
        "title": "chebyshevALowpass"
      },
      "index": {
        "description": "Order of the filter must be even the higher the order the sharper is the separation of frequencies",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Filter",
        "module": "Synthesizer.Dimensional.RateAmplitude.Filter",
        "name": "chebyshevALowpass",
        "normalized": "Int-\u003eResonantFilter a b c d e(Pole c)f g g",
        "package": "synthesizer",
        "partial": "ALowpass",
        "signature": "Int-\u003eResonantFilter s u q r flat(Pole q)v yv yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Filter.html#v:chebyshevBHighpass",
      "description": {
        "fct-descr": "Order of the filter, must be even,\n                        the higher the order, the sharper is the separation of frequencies. \n",
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "Int-\u003e ResonantFilter s u q r flat (Pole q) v yv yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Filter.html#chebyshevBHighpass",
        "fct-type": "unknown",
        "title": "chebyshevBHighpass"
      },
      "index": {
        "description": "Order of the filter must be even the higher the order the sharper is the separation of frequencies",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Filter",
        "module": "Synthesizer.Dimensional.RateAmplitude.Filter",
        "name": "chebyshevBHighpass",
        "normalized": "Int-\u003eResonantFilter a b c d e(Pole c)f g g",
        "package": "synthesizer",
        "partial": "BHighpass",
        "signature": "Int-\u003eResonantFilter s u q r flat(Pole q)v yv yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Filter.html#v:chebyshevBLowpass",
      "description": {
        "fct-descr": "Order of the filter, must be even,\n                        the higher the order, the sharper is the separation of frequencies. \n",
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "Int-\u003e ResonantFilter s u q r flat (Pole q) v yv yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Filter.html#chebyshevBLowpass",
        "fct-type": "unknown",
        "title": "chebyshevBLowpass"
      },
      "index": {
        "description": "Order of the filter must be even the higher the order the sharper is the separation of frequencies",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Filter",
        "module": "Synthesizer.Dimensional.RateAmplitude.Filter",
        "name": "chebyshevBLowpass",
        "normalized": "Int-\u003eResonantFilter a b c d e(Pole c)f g g",
        "package": "synthesizer",
        "partial": "BLowpass",
        "signature": "Int-\u003eResonantFilter s u q r flat(Pole q)v yv yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Filter.html#v:comb",
      "description": {
        "fct-descr": "Infinitely many equi-delayed exponentially decaying echos. \n",
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "T u t -\u003e y -\u003e T s u t (R s v y yv -\u003e R s v y yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Filter.html#comb",
        "fct-type": "unknown",
        "title": "comb"
      },
      "index": {
        "description": "Infinitely many equi-delayed exponentially decaying echos",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Filter",
        "module": "Synthesizer.Dimensional.RateAmplitude.Filter",
        "name": "comb",
        "normalized": "T a b-\u003ec-\u003eT d a b(R d e c f-\u003eR d e c f)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T u t-\u003ey-\u003eT s u t(R s v y yv-\u003eR s v y yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Filter.html#v:combProc",
      "description": {
        "fct-descr": "Infinitely many equi-delayed echos processed by an arbitrary time-preserving signal processor. \n",
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "T u t -\u003e T s u t (R s v y yv -\u003e R s v y yv) -\u003e T s u t (R s v y yv -\u003e R s v y yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Filter.html#combProc",
        "fct-type": "unknown",
        "title": "combProc"
      },
      "index": {
        "description": "Infinitely many equi-delayed echos processed by an arbitrary time-preserving signal processor",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Filter",
        "module": "Synthesizer.Dimensional.RateAmplitude.Filter",
        "name": "combProc",
        "normalized": "T a b-\u003eT c a b(R c d e f-\u003eR c d e f)-\u003eT c a b(R c d e f-\u003eR c d e f)",
        "package": "synthesizer",
        "partial": "Proc",
        "signature": "T u t-\u003eT s u t(R s v y yv-\u003eR s v y yv)-\u003eT s u t(R s v y yv-\u003eR s v y yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Filter.html#v:delay",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "T u t -\u003e T s u t (R s v y yv -\u003e R s v y yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Filter.html#delay",
        "fct-type": "unknown",
        "title": "delay"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Filter",
        "module": "Synthesizer.Dimensional.RateAmplitude.Filter",
        "name": "delay",
        "normalized": "T a b-\u003eT c a b(R c d e f-\u003eR c d e f)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T u t-\u003eT s u t(R s v y yv-\u003eR s v y yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Filter.html#v:differentiate",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "T s u q (R s v q yv -\u003e R s (DimensionGradient u v) q yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Filter.html#differentiate",
        "fct-type": "unknown",
        "title": "differentiate"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Filter",
        "module": "Synthesizer.Dimensional.RateAmplitude.Filter",
        "name": "differentiate",
        "normalized": "T a b c(R a d c e-\u003eR a(DimensionGradient b d)c e)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T s u q(R s v q yv-\u003eR s(DimensionGradient u v)q yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Filter.html#v:envelope",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "T s u t (T s flat y0 -\u003e R s v y y0 -\u003e R s v y y0)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Filter.html#envelope",
        "fct-type": "unknown",
        "title": "envelope"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Filter",
        "module": "Synthesizer.Dimensional.RateAmplitude.Filter",
        "name": "envelope",
        "normalized": "T a b c(T a d e-\u003eR a f e e-\u003eR a f e e)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T s u t(T s flat y-\u003eR s v y y-\u003eR s v y y)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Filter.html#v:envelopeVector",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "T s u t (T s flat y0 -\u003e R s v y yv -\u003e R s v y yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Filter.html#envelopeVector",
        "fct-type": "unknown",
        "title": "envelopeVector"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Filter",
        "module": "Synthesizer.Dimensional.RateAmplitude.Filter",
        "name": "envelopeVector",
        "normalized": "T a b c(T a d e-\u003eR a f e g-\u003eR a f e g)",
        "package": "synthesizer",
        "partial": "Vector",
        "signature": "T s u t(T s flat y-\u003eR s v y yv-\u003eR s v y yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Filter.html#v:envelopeVectorDimension",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "T s u t (R s v0 y y0 -\u003e R s v1 y yv -\u003e R s (Mul v0 v1) y yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Filter.html#envelopeVectorDimension",
        "fct-type": "unknown",
        "title": "envelopeVectorDimension"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Filter",
        "module": "Synthesizer.Dimensional.RateAmplitude.Filter",
        "name": "envelopeVectorDimension",
        "normalized": "T a b c(R a d e e-\u003eR a d e f-\u003eR a(Mul d d)e f)",
        "package": "synthesizer",
        "partial": "Vector Dimension",
        "signature": "T s u t(R s v y y-\u003eR s v y yv-\u003eR s(Mul v v)y yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Filter.html#v:firstOrderHighpass",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "FrequencyFilter s u q r (Parameter q) v yv yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Filter.html#firstOrderHighpass",
        "fct-type": "unknown",
        "title": "firstOrderHighpass"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Filter",
        "module": "Synthesizer.Dimensional.RateAmplitude.Filter",
        "name": "firstOrderHighpass",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Order Highpass",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Filter.html#v:firstOrderLowpass",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "FrequencyFilter s u q r (Parameter q) v yv yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Filter.html#firstOrderLowpass",
        "fct-type": "unknown",
        "title": "firstOrderLowpass"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Filter",
        "module": "Synthesizer.Dimensional.RateAmplitude.Filter",
        "name": "firstOrderLowpass",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Order Lowpass",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Filter.html#v:frequencyModulation",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "T q yv -\u003e T s u q (T s flat q -\u003e R s v q yv -\u003e R s v q yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Filter.html#frequencyModulation",
        "fct-type": "unknown",
        "title": "frequencyModulation"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Filter",
        "module": "Synthesizer.Dimensional.RateAmplitude.Filter",
        "name": "frequencyModulation",
        "normalized": "T a b-\u003eT c d a(T c e a-\u003eR c f a b-\u003eR c f a b)",
        "package": "synthesizer",
        "partial": "Modulation",
        "signature": "T q yv-\u003eT s u q(T s flat q-\u003eR s v q yv-\u003eR s v q yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Filter.html#v:frequencyModulationDecoupled",
      "description": {
        "fct-descr": "\u003cp\u003eFrequency modulation where the input signal can have a sample rate\ndifferent from the output.\n(The sample rate values can differ, the unit must be the same.\nWe could lift that restriction,\nbut then the unit handling becomes more complicated,\nand I didn't have a use for it so far.)\n\u003c/p\u003e\u003cp\u003eThe function can be used for resampling.\n\u003c/p\u003e",
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "T q yv -\u003e T s u q (T s flat q -\u003e T u q (D v q S) yv -\u003e R s v q yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Filter.html#frequencyModulationDecoupled",
        "fct-type": "unknown",
        "title": "frequencyModulationDecoupled"
      },
      "index": {
        "description": "Frequency modulation where the input signal can have sample rate different from the output The sample rate values can differ the unit must be the same We could lift that restriction but then the unit handling becomes more complicated and didn have use for it so far The function can be used for resampling",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Filter",
        "module": "Synthesizer.Dimensional.RateAmplitude.Filter",
        "name": "frequencyModulationDecoupled",
        "normalized": "T a b-\u003eT c d a(T c e a-\u003eT d a(D f a S)b-\u003eR c f a b)",
        "package": "synthesizer",
        "partial": "Modulation Decoupled",
        "signature": "T q yv-\u003eT s u q(T s flat q-\u003eT u q(D v q S)yv-\u003eR s v q yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Filter.html#v:highpassFromUniversal",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "T s sig (Result yv) -\u003e T s sig yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Rate-Filter.html#highpassFromUniversal",
        "fct-type": "unknown",
        "title": "highpassFromUniversal"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Filter",
        "module": "Synthesizer.Dimensional.RateAmplitude.Filter",
        "name": "highpassFromUniversal",
        "normalized": "T a b(Result c)-\u003eT a b c",
        "package": "synthesizer",
        "partial": "From Universal",
        "signature": "T s sig(Result yv)-\u003eT s sig yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Filter.html#v:integrate",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "T s u q (R s v q yv -\u003e R s (Mul u v) q yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Filter.html#integrate",
        "fct-type": "unknown",
        "title": "integrate"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Filter",
        "module": "Synthesizer.Dimensional.RateAmplitude.Filter",
        "name": "integrate",
        "normalized": "T a b c(R a d c e-\u003eR a(Mul b d)c e)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T s u q(R s v q yv-\u003eR s(Mul u v)q yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Filter.html#v:lowpassFromUniversal",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "T s sig (Result yv) -\u003e T s sig yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Rate-Filter.html#lowpassFromUniversal",
        "fct-type": "unknown",
        "title": "lowpassFromUniversal"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Filter",
        "module": "Synthesizer.Dimensional.RateAmplitude.Filter",
        "name": "lowpassFromUniversal",
        "normalized": "T a b(Result c)-\u003eT a b c",
        "package": "synthesizer",
        "partial": "From Universal",
        "signature": "T s sig(Result yv)-\u003eT s sig yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Filter.html#v:mean",
      "description": {
        "fct-descr": "minimum cut-off freqeuncy \n",
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "T (Recip u) q-\u003e T s u q (R s (Recip u) q q -\u003e R s v q yv -\u003e R s v q yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Filter.html#mean",
        "fct-type": "unknown",
        "title": "mean"
      },
      "index": {
        "description": "minimum cut-off freqeuncy",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Filter",
        "module": "Synthesizer.Dimensional.RateAmplitude.Filter",
        "name": "mean",
        "normalized": "T(Recip a)b-\u003eT c a b(R c(Recip a)b b-\u003eR c d b e-\u003eR c d b e)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T(Recip u)q-\u003eT s u q(R s(Recip u)q q-\u003eR s v q yv-\u003eR s v q yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Filter.html#v:meanStatic",
      "description": {
        "fct-descr": "cut-off freqeuncy \n",
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "T (Recip u) q-\u003e T s u q (R s v q yv -\u003e R s v q yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Filter.html#meanStatic",
        "fct-type": "unknown",
        "title": "meanStatic"
      },
      "index": {
        "description": "cut-off freqeuncy",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Filter",
        "module": "Synthesizer.Dimensional.RateAmplitude.Filter",
        "name": "meanStatic",
        "normalized": "T(Recip a)b-\u003eT c a b(R c d b e-\u003eR c d b e)",
        "package": "synthesizer",
        "partial": "Static",
        "signature": "T(Recip u)q-\u003eT s u q(R s v q yv-\u003eR s v q yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Filter.html#v:moogLowpass",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e ResonantFilter s u q r flat (Parameter q) v yv yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Filter.html#moogLowpass",
        "fct-type": "unknown",
        "title": "moogLowpass"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Filter",
        "module": "Synthesizer.Dimensional.RateAmplitude.Filter",
        "name": "moogLowpass",
        "normalized": "Int-\u003eResonantFilter a b c d e(Parameter c)f g g",
        "package": "synthesizer",
        "partial": "Lowpass",
        "signature": "Int-\u003eResonantFilter s u q r flat(Parameter q)v yv yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Filter.html#v:negate",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "T s u t (R s v y yv -\u003e R s v y yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Filter.html#negate",
        "fct-type": "unknown",
        "title": "negate"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Filter",
        "module": "Synthesizer.Dimensional.RateAmplitude.Filter",
        "name": "negate",
        "normalized": "T a b c(R a d e f-\u003eR a d e f)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T s u t(R s v y yv-\u003eR s v y yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Filter.html#v:phaseModulation",
      "description": {
        "fct-descr": "minDelay, minimal delay, may be negative \nmaxDelay, maximal delay, it must be \u003ctt\u003eminDelay \u003c= maxDelay\u003c/tt\u003e\n               and the modulation must always be\n               in the range [minDelay,maxDelay]. \n",
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "T q yv-\u003e T u q-\u003e T u q-\u003e T s u q (R s u q q -\u003e R s v q yv -\u003e R s v q yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Filter.html#phaseModulation",
        "fct-type": "unknown",
        "title": "phaseModulation"
      },
      "index": {
        "description": "minDelay minimal delay may be negative maxDelay maximal delay it must be minDelay maxDelay and the modulation must always be in the range minDelay maxDelay",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Filter",
        "module": "Synthesizer.Dimensional.RateAmplitude.Filter",
        "name": "phaseModulation",
        "normalized": "T a b-\u003eT c a-\u003eT c a-\u003eT d c a(R d c a a-\u003eR d e a b-\u003eR d e a b)",
        "package": "synthesizer",
        "partial": "Modulation",
        "signature": "T q yv-\u003eT u q-\u003eT u q-\u003eT s u q(R s u q q-\u003eR s v q yv-\u003eR s v q yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Filter.html#v:phaser",
      "description": {
        "fct-descr": "maxDelay, must be positive \n",
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "T q yv-\u003e T u q-\u003e T s u q (R s u q q -\u003e R s v q yv -\u003e R s v q yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Filter.html#phaser",
        "fct-type": "unknown",
        "title": "phaser"
      },
      "index": {
        "description": "maxDelay must be positive",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Filter",
        "module": "Synthesizer.Dimensional.RateAmplitude.Filter",
        "name": "phaser",
        "normalized": "T a b-\u003eT c a-\u003eT d c a(R d c a a-\u003eR d e a b-\u003eR d e a b)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T q yv-\u003eT u q-\u003eT s u q(R s u q q-\u003eR s v q yv-\u003eR s v q yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Filter.html#v:phaserStereo",
      "description": {
        "fct-descr": "maxDelay, must be positive \n",
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "T q yv-\u003e T u q-\u003e T s u q (R s u q q -\u003e R s v q yv -\u003e R s v q (T yv))",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Filter.html#phaserStereo",
        "fct-type": "unknown",
        "title": "phaserStereo"
      },
      "index": {
        "description": "maxDelay must be positive",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Filter",
        "module": "Synthesizer.Dimensional.RateAmplitude.Filter",
        "name": "phaserStereo",
        "normalized": "T a b-\u003eT c a-\u003eT d c a(R d c a a-\u003eR d e a b-\u003eR d e a(T b))",
        "package": "synthesizer",
        "partial": "Stereo",
        "signature": "T q yv-\u003eT u q-\u003eT s u q(R s u q q-\u003eR s v q yv-\u003eR s v q(T yv))"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Filter.html#v:universal",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "ResonantFilter s u q r flat (Parameter q) v yv (Result yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Filter.html#universal",
        "fct-type": "unknown",
        "title": "universal"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Filter",
        "module": "Synthesizer.Dimensional.RateAmplitude.Filter",
        "name": "universal",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Instrument.html#v:accumulatedSaws",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Instrument",
        "fct-package": "synthesizer",
        "fct-signature": "T Frequency a -\u003e T s Time a (R s Voltage a a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Instrument.html#accumulatedSaws",
        "fct-type": "unknown",
        "title": "accumulatedSaws"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Instrument",
        "module": "Synthesizer.Dimensional.RateAmplitude.Instrument",
        "name": "accumulatedSaws",
        "normalized": "T Frequency a-\u003eT b Time a(R b Voltage a a)",
        "package": "synthesizer",
        "partial": "Saws",
        "signature": "T Frequency a-\u003eT s Time a(R s Voltage a a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Instrument.html#v:accumulationParameters",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Instrument",
        "fct-package": "synthesizer",
        "fct-signature": "[(T a, a, T a, T Frequency a)]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Instrument.html#accumulationParameters",
        "fct-type": "unknown",
        "title": "accumulationParameters"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Instrument",
        "module": "Synthesizer.Dimensional.RateAmplitude.Instrument",
        "name": "accumulationParameters",
        "normalized": "[(T a,a,T a,T Frequency a)]",
        "package": "synthesizer",
        "partial": "Parameters",
        "signature": "[(T a,a,T a,T Frequency a)]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Instrument.html#v:allpassDown",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Instrument",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e T Time a -\u003e T Frequency a -\u003e T Frequency a -\u003e T s Time a (R s Voltage a a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Instrument.html#allpassDown",
        "fct-type": "unknown",
        "title": "allpassDown"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Instrument",
        "module": "Synthesizer.Dimensional.RateAmplitude.Instrument",
        "name": "allpassDown",
        "normalized": "Int-\u003eT Time a-\u003eT Frequency a-\u003eT Frequency a-\u003eT b Time a(R b Voltage a a)",
        "package": "synthesizer",
        "partial": "Down",
        "signature": "Int-\u003eT Time a-\u003eT Frequency a-\u003eT Frequency a-\u003eT s Time a(R s Voltage a a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Instrument.html#v:ampVolt",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Instrument",
        "fct-package": "synthesizer",
        "fct-signature": "T s u y (a -\u003e R s y) -\u003e T s u y (a -\u003e R s Voltage y y)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Instrument.html#ampVolt",
        "fct-type": "unknown",
        "title": "ampVolt"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Instrument",
        "module": "Synthesizer.Dimensional.RateAmplitude.Instrument",
        "name": "ampVolt",
        "normalized": "T a b c(d-\u003eR a c)-\u003eT a b c(d-\u003eR a Voltage c c)",
        "package": "synthesizer",
        "partial": "Volt",
        "signature": "T s u y(a-\u003eR s y)-\u003eT s u y(a-\u003eR s Voltage y y)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Instrument.html#v:bassDrum",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Instrument",
        "fct-package": "synthesizer",
        "fct-signature": "T s Time q (R s Voltage q q)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Instrument.html#bassDrum",
        "fct-type": "unknown",
        "title": "bassDrum"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Instrument",
        "module": "Synthesizer.Dimensional.RateAmplitude.Instrument",
        "name": "bassDrum",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Drum",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Instrument.html#v:bell",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Instrument",
        "fct-package": "synthesizer",
        "fct-signature": "T Frequency a -\u003e T s Time a (R s Voltage a a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Instrument.html#bell",
        "fct-type": "unknown",
        "title": "bell"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Instrument",
        "module": "Synthesizer.Dimensional.RateAmplitude.Instrument",
        "name": "bell",
        "normalized": "T Frequency a-\u003eT b Time a(R b Voltage a a)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T Frequency a-\u003eT s Time a(R s Voltage a a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Instrument.html#v:bellHarmonic",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Instrument",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e T Time a -\u003e T Frequency a -\u003e T s Time a (R s Voltage a a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Instrument.html#bellHarmonic",
        "fct-type": "unknown",
        "title": "bellHarmonic"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Instrument",
        "module": "Synthesizer.Dimensional.RateAmplitude.Instrument",
        "name": "bellHarmonic",
        "normalized": "a-\u003eT Time a-\u003eT Frequency a-\u003eT b Time a(R b Voltage a a)",
        "package": "synthesizer",
        "partial": "Harmonic",
        "signature": "a-\u003eT Time a-\u003eT Frequency a-\u003eT s Time a(R s Voltage a a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Instrument.html#v:brass",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Instrument",
        "fct-package": "synthesizer",
        "fct-signature": "T Frequency a -\u003e T s Time a (R s Voltage a a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Instrument.html#brass",
        "fct-type": "unknown",
        "title": "brass"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Instrument",
        "module": "Synthesizer.Dimensional.RateAmplitude.Instrument",
        "name": "brass",
        "normalized": "T Frequency a-\u003eT b Time a(R b Voltage a a)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T Frequency a-\u003eT s Time a(R s Voltage a a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Instrument.html#v:choir",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Instrument",
        "fct-package": "synthesizer",
        "fct-signature": "T Frequency a -\u003e T s Time a (R s Voltage a a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Instrument.html#choir",
        "fct-type": "unknown",
        "title": "choir"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Instrument",
        "module": "Synthesizer.Dimensional.RateAmplitude.Instrument",
        "name": "choir",
        "normalized": "T Frequency a-\u003eT b Time a(R b Voltage a a)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T Frequency a-\u003eT s Time a(R s Voltage a a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Instrument.html#v:electroTom",
      "description": {
        "fct-descr": "Drum sound using the Karplus-Strong-Algorithm\nThis is a Noise.white enveloped by an exponential2\nwhich is piped through the Karplus-Strong machine\nfor generating some frequency.\nThe whole thing is then frequency modulated\nto give a falling frequency.\n",
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Instrument",
        "fct-package": "synthesizer",
        "fct-signature": "T s Time a (R s Voltage a a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Instrument.html#electroTom",
        "fct-type": "unknown",
        "title": "electroTom"
      },
      "index": {
        "description": "Drum sound using the Karplus-Strong-Algorithm This is Noise.white enveloped by an exponential2 which is piped through the Karplus-Strong machine for generating some frequency The whole thing is then frequency modulated to give falling frequency",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Instrument",
        "module": "Synthesizer.Dimensional.RateAmplitude.Instrument",
        "name": "electroTom",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Tom",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Instrument.html#v:fastBell",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Instrument",
        "fct-package": "synthesizer",
        "fct-signature": "T Frequency a -\u003e T s Time a (R s Voltage a a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Instrument.html#fastBell",
        "fct-type": "unknown",
        "title": "fastBell"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Instrument",
        "module": "Synthesizer.Dimensional.RateAmplitude.Instrument",
        "name": "fastBell",
        "normalized": "T Frequency a-\u003eT b Time a(R b Voltage a a)",
        "package": "synthesizer",
        "partial": "Bell",
        "signature": "T Frequency a-\u003eT s Time a(R s Voltage a a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Instrument.html#v:fatPad",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Instrument",
        "fct-package": "synthesizer",
        "fct-signature": "T Frequency a -\u003e T s Time a (R s Voltage a a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Instrument.html#fatPad",
        "fct-type": "unknown",
        "title": "fatPad"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Instrument",
        "module": "Synthesizer.Dimensional.RateAmplitude.Instrument",
        "name": "fatPad",
        "normalized": "T Frequency a-\u003eT b Time a(R b Voltage a a)",
        "package": "synthesizer",
        "partial": "Pad",
        "signature": "T Frequency a-\u003eT s Time a(R s Voltage a a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Instrument.html#v:fatSaw",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Instrument",
        "fct-package": "synthesizer",
        "fct-signature": "T Frequency a -\u003e T s Time a (R s Voltage a a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Instrument.html#fatSaw",
        "fct-type": "unknown",
        "title": "fatSaw"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Instrument",
        "module": "Synthesizer.Dimensional.RateAmplitude.Instrument",
        "name": "fatSaw",
        "normalized": "T Frequency a-\u003eT b Time a(R b Voltage a a)",
        "package": "synthesizer",
        "partial": "Saw",
        "signature": "T Frequency a-\u003eT s Time a(R s Voltage a a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Instrument.html#v:fatSawChord",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Instrument",
        "fct-package": "synthesizer",
        "fct-signature": "T Frequency a -\u003e T s Time a (R s Voltage a a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Instrument.html#fatSawChord",
        "fct-type": "unknown",
        "title": "fatSawChord"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Instrument",
        "module": "Synthesizer.Dimensional.RateAmplitude.Instrument",
        "name": "fatSawChord",
        "normalized": "T Frequency a-\u003eT b Time a(R b Voltage a a)",
        "package": "synthesizer",
        "partial": "Saw Chord",
        "signature": "T Frequency a-\u003eT s Time a(R s Voltage a a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Instrument.html#v:fatSawChordFilter",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Instrument",
        "fct-package": "synthesizer",
        "fct-signature": "T Frequency a -\u003e T s Time a (R s Voltage a a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Instrument.html#fatSawChordFilter",
        "fct-type": "unknown",
        "title": "fatSawChordFilter"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Instrument",
        "module": "Synthesizer.Dimensional.RateAmplitude.Instrument",
        "name": "fatSawChordFilter",
        "normalized": "T Frequency a-\u003eT b Time a(R b Voltage a a)",
        "package": "synthesizer",
        "partial": "Saw Chord Filter",
        "signature": "T Frequency a-\u003eT s Time a(R s Voltage a a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Instrument.html#v:filterDown",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Instrument",
        "fct-package": "synthesizer",
        "fct-signature": "T s Time a (R s Frequency a a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Instrument.html#filterDown",
        "fct-type": "unknown",
        "title": "filterDown"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Instrument",
        "module": "Synthesizer.Dimensional.RateAmplitude.Instrument",
        "name": "filterDown",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Down",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Instrument.html#v:filterSaw",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Instrument",
        "fct-package": "synthesizer",
        "fct-signature": "T Frequency a -\u003e T Frequency a -\u003e T s Time a (R s Voltage a a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Instrument.html#filterSaw",
        "fct-type": "unknown",
        "title": "filterSaw"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Instrument",
        "module": "Synthesizer.Dimensional.RateAmplitude.Instrument",
        "name": "filterSaw",
        "normalized": "T Frequency a-\u003eT Frequency a-\u003eT b Time a(R b Voltage a a)",
        "package": "synthesizer",
        "partial": "Saw",
        "signature": "T Frequency a-\u003eT Frequency a-\u003eT s Time a(R s Voltage a a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Instrument.html#v:filterSweep",
      "description": {
        "fct-descr": "low pass with resonance \n",
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Instrument",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e T s Time a (R s Voltage a v -\u003e R s Voltage a v)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Instrument.html#filterSweep",
        "fct-type": "unknown",
        "title": "filterSweep"
      },
      "index": {
        "description": "low pass with resonance",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Instrument",
        "module": "Synthesizer.Dimensional.RateAmplitude.Instrument",
        "name": "filterSweep",
        "normalized": "T a-\u003eT b Time a(R b Voltage a c-\u003eR b Voltage a c)",
        "package": "synthesizer",
        "partial": "Sweep",
        "signature": "T a-\u003eT s Time a(R s Voltage a v-\u003eR s Voltage a v)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Instrument.html#v:fmBell",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Instrument",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e a -\u003e T Frequency a -\u003e T s Time a (R s Voltage a a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Instrument.html#fmBell",
        "fct-type": "unknown",
        "title": "fmBell"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Instrument",
        "module": "Synthesizer.Dimensional.RateAmplitude.Instrument",
        "name": "fmBell",
        "normalized": "a-\u003ea-\u003eT Frequency a-\u003eT b Time a(R b Voltage a a)",
        "package": "synthesizer",
        "partial": "Bell",
        "signature": "a-\u003ea-\u003eT Frequency a-\u003eT s Time a(R s Voltage a a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Instrument.html#v:fmRing",
      "description": {
        "fct-descr": "Phase modulation using a ring modulated signal.\nMay be used as some kind of e-guitar.\n",
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Instrument",
        "fct-package": "synthesizer",
        "fct-signature": "T Frequency a -\u003e T s Time a (R s Voltage a a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Instrument.html#fmRing",
        "fct-type": "unknown",
        "title": "fmRing"
      },
      "index": {
        "description": "Phase modulation using ring modulated signal May be used as some kind of e-guitar",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Instrument",
        "module": "Synthesizer.Dimensional.RateAmplitude.Instrument",
        "name": "fmRing",
        "normalized": "T Frequency a-\u003eT b Time a(R b Voltage a a)",
        "package": "synthesizer",
        "partial": "Ring",
        "signature": "T Frequency a-\u003eT s Time a(R s Voltage a a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Instrument.html#v:modulatedWave",
      "description": {
        "fct-descr": "accumulate multiple similar saw sounds and observe the increase of volume\n    The oscillator \u003ctt\u003eosc\u003c/tt\u003e must accept relative frequencies. \n",
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Instrument",
        "fct-package": "synthesizer",
        "fct-signature": "T s u a (R s (Recip u) a a -\u003e R s Voltage a a) -\u003e T (Recip u) a -\u003e a -\u003e T a -\u003e T (Recip u) a -\u003e T s u a (R s Voltage a a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Instrument.html#modulatedWave",
        "fct-type": "unknown",
        "title": "modulatedWave"
      },
      "index": {
        "description": "accumulate multiple similar saw sounds and observe the increase of volume The oscillator osc must accept relative frequencies",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Instrument",
        "module": "Synthesizer.Dimensional.RateAmplitude.Instrument",
        "name": "modulatedWave",
        "normalized": "T a b c(R a(Recip b)c c-\u003eR a Voltage c c)-\u003eT(Recip b)c-\u003ec-\u003eT c-\u003eT(Recip b)c-\u003eT a b c(R a Voltage c c)",
        "package": "synthesizer",
        "partial": "Wave",
        "signature": "T s u a(R s(Recip u)a a-\u003eR s Voltage a a)-\u003eT(Recip u)a-\u003ea-\u003eT a-\u003eT(Recip u)a-\u003eT s u a(R s Voltage a a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Instrument.html#v:moogDown",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Instrument",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e T Time a -\u003e T Frequency a -\u003e T Frequency a -\u003e T s Time a (R s Voltage a a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Instrument.html#moogDown",
        "fct-type": "unknown",
        "title": "moogDown"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Instrument",
        "module": "Synthesizer.Dimensional.RateAmplitude.Instrument",
        "name": "moogDown",
        "normalized": "Int-\u003eT Time a-\u003eT Frequency a-\u003eT Frequency a-\u003eT b Time a(R b Voltage a a)",
        "package": "synthesizer",
        "partial": "Down",
        "signature": "Int-\u003eT Time a-\u003eT Frequency a-\u003eT Frequency a-\u003eT s Time a(R s Voltage a a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Instrument.html#v:moogGuitar",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Instrument",
        "fct-package": "synthesizer",
        "fct-signature": "T Frequency a -\u003e T s Time a (R s Voltage a a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Instrument.html#moogGuitar",
        "fct-type": "unknown",
        "title": "moogGuitar"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Instrument",
        "module": "Synthesizer.Dimensional.RateAmplitude.Instrument",
        "name": "moogGuitar",
        "normalized": "T Frequency a-\u003eT b Time a(R b Voltage a a)",
        "package": "synthesizer",
        "partial": "Guitar",
        "signature": "T Frequency a-\u003eT s Time a(R s Voltage a a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Instrument.html#v:moogGuitarSoft",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Instrument",
        "fct-package": "synthesizer",
        "fct-signature": "T Frequency a -\u003e T s Time a (R s Voltage a a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Instrument.html#moogGuitarSoft",
        "fct-type": "unknown",
        "title": "moogGuitarSoft"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Instrument",
        "module": "Synthesizer.Dimensional.RateAmplitude.Instrument",
        "name": "moogGuitarSoft",
        "normalized": "T Frequency a-\u003eT b Time a(R b Voltage a a)",
        "package": "synthesizer",
        "partial": "Guitar Soft",
        "signature": "T Frequency a-\u003eT s Time a(R s Voltage a a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Instrument.html#v:moogReso",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Instrument",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e T Time a -\u003e T Frequency a -\u003e T Frequency a -\u003e T s Time a (R s Voltage a a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Instrument.html#moogReso",
        "fct-type": "unknown",
        "title": "moogReso"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Instrument",
        "module": "Synthesizer.Dimensional.RateAmplitude.Instrument",
        "name": "moogReso",
        "normalized": "Int-\u003eT Time a-\u003eT Frequency a-\u003eT Frequency a-\u003eT b Time a(R b Voltage a a)",
        "package": "synthesizer",
        "partial": "Reso",
        "signature": "Int-\u003eT Time a-\u003eT Frequency a-\u003eT Frequency a-\u003eT s Time a(R s Voltage a a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Instrument.html#v:noiseBass",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Instrument",
        "fct-package": "synthesizer",
        "fct-signature": "T Frequency a -\u003e T s Time a (R s Voltage a a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Instrument.html#noiseBass",
        "fct-type": "unknown",
        "title": "noiseBass"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Instrument",
        "module": "Synthesizer.Dimensional.RateAmplitude.Instrument",
        "name": "noiseBass",
        "normalized": "T Frequency a-\u003eT b Time a(R b Voltage a a)",
        "package": "synthesizer",
        "partial": "Bass",
        "signature": "T Frequency a-\u003eT s Time a(R s Voltage a a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Instrument.html#v:noisePerc",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Instrument",
        "fct-package": "synthesizer",
        "fct-signature": "T s Time a (R s Voltage a a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Instrument.html#noisePerc",
        "fct-type": "unknown",
        "title": "noisePerc"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Instrument",
        "module": "Synthesizer.Dimensional.RateAmplitude.Instrument",
        "name": "noisePerc",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Perc",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Instrument.html#v:osciAbsModSaw",
      "description": {
        "fct-descr": "Build a saw sound from its harmonics and modulate it.\nDifferent to normal modulation\nI modulate each harmonic with the same depth rather than a proportional one.\n",
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Instrument",
        "fct-package": "synthesizer",
        "fct-signature": "T Frequency a -\u003e T s Time a (R s Voltage a a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Instrument.html#osciAbsModSaw",
        "fct-type": "unknown",
        "title": "osciAbsModSaw"
      },
      "index": {
        "description": "Build saw sound from its harmonics and modulate it Different to normal modulation modulate each harmonic with the same depth rather than proportional one",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Instrument",
        "module": "Synthesizer.Dimensional.RateAmplitude.Instrument",
        "name": "osciAbsModSaw",
        "normalized": "T Frequency a-\u003eT b Time a(R b Voltage a a)",
        "package": "synthesizer",
        "partial": "Abs Mod Saw",
        "signature": "T Frequency a-\u003eT s Time a(R s Voltage a a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Instrument.html#v:osciDoubleSaw",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Instrument",
        "fct-package": "synthesizer",
        "fct-signature": "T s u a (R s (Recip u) a a -\u003e R s Voltage a a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Instrument.html#osciDoubleSaw",
        "fct-type": "unknown",
        "title": "osciDoubleSaw"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Instrument",
        "module": "Synthesizer.Dimensional.RateAmplitude.Instrument",
        "name": "osciDoubleSaw",
        "normalized": "T a b c(R a(Recip b)c c-\u003eR a Voltage c c)",
        "package": "synthesizer",
        "partial": "Double Saw",
        "signature": "T s u a(R s(Recip u)a a-\u003eR s Voltage a a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Instrument.html#v:osciSharp",
      "description": {
        "fct-descr": "A tone with a waveform with roughly the dependency \u003ctt\u003ex -\u003e x^?p\u003c/tt\u003e,\nwhere the waveform is normalized to constant quadratic norm\n",
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Instrument",
        "fct-package": "synthesizer",
        "fct-signature": "T Frequency a -\u003e T s Time a (R s Voltage a a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Instrument.html#osciSharp",
        "fct-type": "unknown",
        "title": "osciSharp"
      },
      "index": {
        "description": "tone with waveform with roughly the dependency where the waveform is normalized to constant quadratic norm",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Instrument",
        "module": "Synthesizer.Dimensional.RateAmplitude.Instrument",
        "name": "osciSharp",
        "normalized": "T Frequency a-\u003eT b Time a(R b Voltage a a)",
        "package": "synthesizer",
        "partial": "Sharp",
        "signature": "T Frequency a-\u003eT s Time a(R s Voltage a a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Instrument.html#v:pulsedNoise",
      "description": {
        "fct-descr": "frequency of the pulses, interesting ones are around 100 Hz and below \n",
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Instrument",
        "fct-package": "synthesizer",
        "fct-signature": "T Frequency a-\u003e T s Time a (R s Voltage a a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Instrument.html#pulsedNoise",
        "fct-type": "unknown",
        "title": "pulsedNoise"
      },
      "index": {
        "description": "frequency of the pulses interesting ones are around Hz and below",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Instrument",
        "module": "Synthesizer.Dimensional.RateAmplitude.Instrument",
        "name": "pulsedNoise",
        "normalized": "T Frequency a-\u003eT b Time a(R b Voltage a a)",
        "package": "synthesizer",
        "partial": "Noise",
        "signature": "T Frequency a-\u003eT s Time a(R s Voltage a a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Instrument.html#v:simpleSaw",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Instrument",
        "fct-package": "synthesizer",
        "fct-signature": "T (Recip u) v -\u003e T s u v (R s Voltage a v)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Instrument.html#simpleSaw",
        "fct-type": "unknown",
        "title": "simpleSaw"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Instrument",
        "module": "Synthesizer.Dimensional.RateAmplitude.Instrument",
        "name": "simpleSaw",
        "normalized": "T(Recip a)b-\u003eT c a b(R c Voltage d b)",
        "package": "synthesizer",
        "partial": "Saw",
        "signature": "T(Recip u)v-\u003eT s u v(R s Voltage a v)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Instrument.html#v:squareBell",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Instrument",
        "fct-package": "synthesizer",
        "fct-signature": "T Frequency a -\u003e T s Time a (R s Voltage a a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Instrument.html#squareBell",
        "fct-type": "unknown",
        "title": "squareBell"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Instrument",
        "module": "Synthesizer.Dimensional.RateAmplitude.Instrument",
        "name": "squareBell",
        "normalized": "T Frequency a-\u003eT b Time a(R b Voltage a a)",
        "package": "synthesizer",
        "partial": "Bell",
        "signature": "T Frequency a-\u003eT s Time a(R s Voltage a a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Instrument.html#v:stereoPhaser",
      "description": {
        "fct-descr": "A function mapping a frequency to a signal. \nThe factor to the frequency, should be close to 1. \nThe base (undeviated) frequency of the sound. \n",
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Instrument",
        "fct-package": "synthesizer",
        "fct-signature": "T Frequency a -\u003e T s Time a (R s u b b)-\u003e a-\u003e T Frequency a-\u003e T s Time a (R s u b b)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Instrument.html#stereoPhaser",
        "fct-type": "unknown",
        "title": "stereoPhaser"
      },
      "index": {
        "description": "function mapping frequency to signal The factor to the frequency should be close to The base undeviated frequency of the sound",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Instrument",
        "module": "Synthesizer.Dimensional.RateAmplitude.Instrument",
        "name": "stereoPhaser",
        "normalized": "T Frequency a-\u003eT b Time a(R b c d d)-\u003ea-\u003eT Frequency a-\u003eT b Time a(R b c d d)",
        "package": "synthesizer",
        "partial": "Phaser",
        "signature": "T Frequency a-\u003eT s Time a(R s u b b)-\u003ea-\u003eT Frequency a-\u003eT s Time a(R s u b b)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Instrument.html#v:wasp",
      "description": {
        "fct-descr": "A good choice is \u003ctt\u003efreq = DN.frequency 110\u003c/tt\u003e\n",
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Instrument",
        "fct-package": "synthesizer",
        "fct-signature": "T (Recip u) q -\u003e T s u q (R s Voltage q q)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Instrument.html#wasp",
        "fct-type": "unknown",
        "title": "wasp"
      },
      "index": {
        "description": "good choice is freq DN.frequency",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Instrument",
        "module": "Synthesizer.Dimensional.RateAmplitude.Instrument",
        "name": "wasp",
        "normalized": "T(Recip a)b-\u003eT c a b(R c Voltage b b)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T(Recip u)q-\u003eT s u q(R s Voltage q q)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Noise.html#v:randomPeeks",
      "description": {
        "fct-descr": "Every occurrence is represented by a peak of area 1.\n               If you smooth the input and the output signal to the same degree\n               they should be rather similar. \n",
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Noise",
        "fct-package": "synthesizer",
        "fct-signature": "T s u q (R s (Recip u) q q -\u003e R s (Recip u) q q)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Noise.html#randomPeeks",
        "fct-type": "unknown",
        "title": "randomPeeks"
      },
      "index": {
        "description": "Every occurrence is represented by peak of area If you smooth the input and the output signal to the same degree they should be rather similar",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Noise",
        "module": "Synthesizer.Dimensional.RateAmplitude.Noise",
        "name": "randomPeeks",
        "normalized": "T a b c(R a(Recip b)c c-\u003eR a(Recip b)c c)",
        "package": "synthesizer",
        "partial": "Peeks",
        "signature": "T s u q(R s(Recip u)q q-\u003eR s(Recip u)q q)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Noise.html#v:randomPeeksGen",
      "description": {
        "fct-descr": "random generator, can be used to choose a seed \nEvery occurrence is represented by a peak of area 1. \n",
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Noise",
        "fct-package": "synthesizer",
        "fct-signature": "g-\u003e T s u q (R s (Recip u) q q -\u003e R s (Recip u) q q)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Noise.html#randomPeeksGen",
        "fct-type": "unknown",
        "title": "randomPeeksGen"
      },
      "index": {
        "description": "random generator can be used to choose seed Every occurrence is represented by peak of area",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Noise",
        "module": "Synthesizer.Dimensional.RateAmplitude.Noise",
        "name": "randomPeeksGen",
        "normalized": "a-\u003eT b c d(R b(Recip c)d d-\u003eR b(Recip c)d d)",
        "package": "synthesizer",
        "partial": "Peeks Gen",
        "signature": "g-\u003eT s u q(R s(Recip u)q q-\u003eR s(Recip u)q q)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Noise.html#v:white",
      "description": {
        "fct-descr": "width of the frequency band \nvolume caused by the given frequency band \nnoise \n",
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Noise",
        "fct-package": "synthesizer",
        "fct-signature": "T (Recip u) q-\u003e T v q-\u003e T s u q (R s v q yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Noise.html#white",
        "fct-type": "unknown",
        "title": "white"
      },
      "index": {
        "description": "width of the frequency band volume caused by the given frequency band noise",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Noise",
        "module": "Synthesizer.Dimensional.RateAmplitude.Noise",
        "name": "white",
        "normalized": "T(Recip a)b-\u003eT c b-\u003eT d a b(R d c b e)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T(Recip u)q-\u003eT v q-\u003eT s u q(R s v q yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Noise.html#v:whiteBandEnergy",
      "description": {
        "fct-descr": "energy per frequency band \nnoise \n",
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Noise",
        "fct-package": "synthesizer",
        "fct-signature": "T (Mul u (Sqr v)) q-\u003e T s u q (R s v q yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Noise.html#whiteBandEnergy",
        "fct-type": "unknown",
        "title": "whiteBandEnergy"
      },
      "index": {
        "description": "energy per frequency band noise",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Noise",
        "module": "Synthesizer.Dimensional.RateAmplitude.Noise",
        "name": "whiteBandEnergy",
        "normalized": "T(Mul a(Sqr b))c-\u003eT d a c(R d b c e)",
        "package": "synthesizer",
        "partial": "Band Energy",
        "signature": "T(Mul u(Sqr v))q-\u003eT s u q(R s v q yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Noise.html#v:whiteBandEnergyGen",
      "description": {
        "fct-descr": "random generator, can be used to choose a seed \nenergy per frequency band \nnoise \n",
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Noise",
        "fct-package": "synthesizer",
        "fct-signature": "g-\u003e T (Mul u (Sqr v)) q-\u003e T s u q (R s v q yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Noise.html#whiteBandEnergyGen",
        "fct-type": "unknown",
        "title": "whiteBandEnergyGen"
      },
      "index": {
        "description": "random generator can be used to choose seed energy per frequency band noise",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Noise",
        "module": "Synthesizer.Dimensional.RateAmplitude.Noise",
        "name": "whiteBandEnergyGen",
        "normalized": "a-\u003eT(Mul b(Sqr c))d-\u003eT e b d(R e c d f)",
        "package": "synthesizer",
        "partial": "Band Energy Gen",
        "signature": "g-\u003eT(Mul u(Sqr v))q-\u003eT s u q(R s v q yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Noise.html#v:whiteGen",
      "description": {
        "fct-descr": "random generator, can be used to choose a seed \nwidth of the frequency band \nvolume caused by the given frequency band \nnoise \n",
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Noise",
        "fct-package": "synthesizer",
        "fct-signature": "g-\u003e T (Recip u) q-\u003e T v q-\u003e T s u q (R s v q yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Noise.html#whiteGen",
        "fct-type": "unknown",
        "title": "whiteGen"
      },
      "index": {
        "description": "random generator can be used to choose seed width of the frequency band volume caused by the given frequency band noise",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Noise",
        "module": "Synthesizer.Dimensional.RateAmplitude.Noise",
        "name": "whiteGen",
        "normalized": "a-\u003eT(Recip b)c-\u003eT d c-\u003eT e b c(R e d c f)",
        "package": "synthesizer",
        "partial": "Gen",
        "signature": "g-\u003eT(Recip u)q-\u003eT v q-\u003eT s u q(R s v q yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Play.html#v:auto",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Play",
        "fct-package": "synthesizer",
        "fct-signature": "T (Recip u) t -\u003e T v y -\u003e (int -\u003e Builder int) -\u003e T u t (S v y) yv -\u003e IO ExitCode",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Play.html#auto",
        "fct-type": "unknown",
        "title": "auto"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Play",
        "module": "Synthesizer.Dimensional.RateAmplitude.Play",
        "name": "auto",
        "normalized": "T(Recip a)b-\u003eT c d-\u003e(e-\u003eBuilder e)-\u003eT a b(S c d)f-\u003eIO ExitCode",
        "package": "synthesizer",
        "partial": "",
        "signature": "T(Recip u)t-\u003eT v y-\u003e(int-\u003eBuilder int)-\u003eT u t(S v y)yv-\u003eIO ExitCode"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Play.html#v:renderTimeVoltageMonoDoubleToInt16",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Play",
        "fct-package": "synthesizer",
        "fct-signature": "T Frequency Double -\u003e (forall s.  T s Time Double (R s Voltage Double Double)) -\u003e IO ExitCode",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Play.html#renderTimeVoltageMonoDoubleToInt16",
        "fct-type": "unknown",
        "title": "renderTimeVoltageMonoDoubleToInt16"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Play",
        "module": "Synthesizer.Dimensional.RateAmplitude.Play",
        "name": "renderTimeVoltageMonoDoubleToInt16",
        "normalized": "T Frequency Double-\u003e(a b T c Time Double(R c Voltage Double Double))-\u003eIO ExitCode",
        "package": "synthesizer",
        "partial": "Time Voltage Mono Double To Int",
        "signature": "T Frequency Double-\u003e(forall s. T s Time Double(R s Voltage Double Double))-\u003eIO ExitCode"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Play.html#v:renderTimeVoltageStereoDoubleToInt16",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Play",
        "fct-package": "synthesizer",
        "fct-signature": "T Frequency Double -\u003e (forall s.  T s Time Double (R s Voltage Double (T Double))) -\u003e IO ExitCode",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Play.html#renderTimeVoltageStereoDoubleToInt16",
        "fct-type": "unknown",
        "title": "renderTimeVoltageStereoDoubleToInt16"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Play",
        "module": "Synthesizer.Dimensional.RateAmplitude.Play",
        "name": "renderTimeVoltageStereoDoubleToInt16",
        "normalized": "T Frequency Double-\u003e(a b T c Time Double(R c Voltage Double(T Double)))-\u003eIO ExitCode",
        "package": "synthesizer",
        "partial": "Time Voltage Stereo Double To Int",
        "signature": "T Frequency Double-\u003e(forall s. T s Time Double(R s Voltage Double(T Double)))-\u003eIO ExitCode"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Play.html#v:timeVoltage",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Play",
        "fct-package": "synthesizer",
        "fct-signature": "(int -\u003e Builder int) -\u003e T Time t (S Voltage y) yv -\u003e IO ExitCode",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Play.html#timeVoltage",
        "fct-type": "unknown",
        "title": "timeVoltage"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Play",
        "module": "Synthesizer.Dimensional.RateAmplitude.Play",
        "name": "timeVoltage",
        "normalized": "(a-\u003eBuilder a)-\u003eT Time b(S Voltage c)d-\u003eIO ExitCode",
        "package": "synthesizer",
        "partial": "Voltage",
        "signature": "(int-\u003eBuilder int)-\u003eT Time t(S Voltage y)yv-\u003eIO ExitCode"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Play.html#v:timeVoltageMonoDoubleToInt16",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Play",
        "fct-package": "synthesizer",
        "fct-signature": "T Time Double (S Voltage Double) Double -\u003e IO ExitCode",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Play.html#timeVoltageMonoDoubleToInt16",
        "fct-type": "unknown",
        "title": "timeVoltageMonoDoubleToInt16"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Play",
        "module": "Synthesizer.Dimensional.RateAmplitude.Play",
        "name": "timeVoltageMonoDoubleToInt16",
        "normalized": "T Time Double(S Voltage Double)Double-\u003eIO ExitCode",
        "package": "synthesizer",
        "partial": "Voltage Mono Double To Int",
        "signature": "T Time Double(S Voltage Double)Double-\u003eIO ExitCode"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Play.html#v:timeVoltageStereoDoubleToInt16",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Play",
        "fct-package": "synthesizer",
        "fct-signature": "T Time Double (S Voltage Double) (T Double) -\u003e IO ExitCode",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Play.html#timeVoltageStereoDoubleToInt16",
        "fct-type": "unknown",
        "title": "timeVoltageStereoDoubleToInt16"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Play",
        "module": "Synthesizer.Dimensional.RateAmplitude.Play",
        "name": "timeVoltageStereoDoubleToInt16",
        "normalized": "T Time Double(S Voltage Double)(T Double)-\u003eIO ExitCode",
        "package": "synthesizer",
        "partial": "Voltage Stereo Double To Int",
        "signature": "T Time Double(S Voltage Double)(T Double)-\u003eIO ExitCode"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Signal.html#t:D",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "type",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Signal.html#D",
        "fct-type": "unknown",
        "title": "D"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Signal",
        "module": "Synthesizer.Dimensional.RateAmplitude.Signal",
        "name": "D",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Signal.html#t:DimensionGradient",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "type",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Signal.html#DimensionGradient",
        "fct-type": "unknown",
        "title": "DimensionGradient"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Signal",
        "module": "Synthesizer.Dimensional.RateAmplitude.Signal",
        "name": "DimensionGradient",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Dimension Gradient",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Signal.html#t:R",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "type",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Signal.html#R",
        "fct-type": "unknown",
        "title": "R"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Signal",
        "module": "Synthesizer.Dimensional.RateAmplitude.Signal",
        "name": "R",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Signal.html#v:",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T v y -\u003e T s u t (R s yv) -\u003e T s u t (R s v y yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Signal.html#%26%2A%3E%5E",
        "fct-type": "unknown",
        "title": ""
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Signal",
        "module": "Synthesizer.Dimensional.RateAmplitude.Signal",
        "name": "",
        "normalized": "T a b-\u003eT c d e(R c f)-\u003eT c d e(R c a b f)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T v y-\u003eT s u t(R s yv)-\u003eT s u t(R s v y yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Signal.html#v:$",
      "description": {
        "fct-descr": "Take a signal with \u003ctt\u003e\u003ca\u003eScalar\u003c/a\u003e\u003c/tt\u003e unit in amplitude\nwhere the process expects a plain \u003ctt\u003e\u003ca\u003eT\u003c/a\u003e\u003c/tt\u003e.\nThis is no longer important\nsince the processes which expects those inputs\ncan use the Flat type class.\n",
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T s u t (R s y -\u003e a) -\u003e T s u t (R s Scalar y y) -\u003e T s u t a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Signal.html#%24%26",
        "fct-type": "unknown",
        "title": "$"
      },
      "index": {
        "description": "Take signal with Scalar unit in amplitude where the process expects plain This is no longer important since the processes which expects those inputs can use the Flat type class",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Signal",
        "module": "Synthesizer.Dimensional.RateAmplitude.Signal",
        "name": "$",
        "normalized": "T a b c(R a d-\u003ee)-\u003eT a b c(R a Scalar d d)-\u003eT a b c e",
        "package": "synthesizer",
        "partial": "",
        "signature": "T s u t(R s y-\u003ea)-\u003eT s u t(R s Scalar y y)-\u003eT s u t a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Signal.html#v:$-",
      "description": {
        "fct-descr": "Take a scalar argument where a process expects a signal.\nOnly possible for non-negative values so far.\n",
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T s u t (R s v y y -\u003e a) -\u003e T v y -\u003e T s u t a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Signal.html#%24-",
        "fct-type": "unknown",
        "title": "$-"
      },
      "index": {
        "description": "Take scalar argument where process expects signal Only possible for non-negative values so far",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Signal",
        "module": "Synthesizer.Dimensional.RateAmplitude.Signal",
        "name": "$-",
        "normalized": "T a b c(R a d e e-\u003ef)-\u003eT d e-\u003eT a b c f",
        "package": "synthesizer",
        "partial": "",
        "signature": "T s u t(R s v y y-\u003ea)-\u003eT v y-\u003eT s u t a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Signal.html#v:amplitude",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "w (D v y sig) yv -\u003e T v y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Signal.html#amplitude",
        "fct-type": "unknown",
        "title": "amplitude"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Signal",
        "module": "Synthesizer.Dimensional.RateAmplitude.Signal",
        "name": "amplitude",
        "normalized": "a(D b c d)e-\u003eT b c",
        "package": "synthesizer",
        "partial": "",
        "signature": "w(D v y sig)yv-\u003eT v y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Signal.html#v:asTypeOfAmplitude",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "y -\u003e w (D v y sig) yv -\u003e y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Signal.html#asTypeOfAmplitude",
        "fct-type": "unknown",
        "title": "asTypeOfAmplitude"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Signal",
        "module": "Synthesizer.Dimensional.RateAmplitude.Signal",
        "name": "asTypeOfAmplitude",
        "normalized": "a-\u003eb(D c a d)e-\u003ea",
        "package": "synthesizer",
        "partial": "Type Of Amplitude",
        "signature": "y-\u003ew(D v y sig)yv-\u003ey"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Signal.html#v:bindCached",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T s u t (w (D v y S) yv0) -\u003e (w (D v y S) yv0 -\u003e T s u t b) -\u003e T s u t b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Signal.html#bindCached",
        "fct-type": "unknown",
        "title": "bindCached"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Signal",
        "module": "Synthesizer.Dimensional.RateAmplitude.Signal",
        "name": "bindCached",
        "normalized": "T a b c(d(D e f S)g)-\u003e(d(D e f S)g-\u003eT a b c h)-\u003eT a b c h",
        "package": "synthesizer",
        "partial": "Cached",
        "signature": "T s u t(w(D v y S)yv)-\u003e(w(D v y S)yv-\u003eT s u t b)-\u003eT s u t b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Signal.html#v:cache",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T s u t (w (D v y S) yv0) -\u003e T s u t (w (D v y S) yv0)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Signal.html#cache",
        "fct-type": "unknown",
        "title": "cache"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Signal",
        "module": "Synthesizer.Dimensional.RateAmplitude.Signal",
        "name": "cache",
        "normalized": "T a b c(d(D e f S)g)-\u003eT a b c(d(D e f S)g)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T s u t(w(D v y S)yv)-\u003eT s u t(w(D v y S)yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Signal.html#v:fromSamples",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "amp -\u003e T yv -\u003e T s (T amp S) yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Signal.html#fromSamples",
        "fct-type": "unknown",
        "title": "fromSamples"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Signal",
        "module": "Synthesizer.Dimensional.RateAmplitude.Signal",
        "name": "fromSamples",
        "normalized": "a-\u003eT b-\u003eT c(T a S)b",
        "package": "synthesizer",
        "partial": "Samples",
        "signature": "amp-\u003eT yv-\u003eT s(T amp S)yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Signal.html#v:fromScalarSamples",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "amp -\u003e T y -\u003e T s (T amp S) y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Signal.html#fromScalarSamples",
        "fct-type": "unknown",
        "title": "fromScalarSamples"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Signal",
        "module": "Synthesizer.Dimensional.RateAmplitude.Signal",
        "name": "fromScalarSamples",
        "normalized": "a-\u003eT b-\u003eT c(T a S)b",
        "package": "synthesizer",
        "partial": "Scalar Samples",
        "signature": "amp-\u003eT y-\u003eT s(T amp S)y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Signal.html#v:fromSignal",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "amp -\u003e R s yv -\u003e T s (T amp S) yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Signal.html#fromSignal",
        "fct-type": "unknown",
        "title": "fromSignal"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Signal",
        "module": "Synthesizer.Dimensional.RateAmplitude.Signal",
        "name": "fromSignal",
        "normalized": "a-\u003eR b c-\u003eT b(T a S)c",
        "package": "synthesizer",
        "partial": "Signal",
        "signature": "amp-\u003eR s yv-\u003eT s(T amp S)yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Signal.html#v:fromVectorSamples",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "amp -\u003e T yv -\u003e T s (T amp S) yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Signal.html#fromVectorSamples",
        "fct-type": "unknown",
        "title": "fromVectorSamples"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Signal",
        "module": "Synthesizer.Dimensional.RateAmplitude.Signal",
        "name": "fromVectorSamples",
        "normalized": "a-\u003eT b-\u003eT c(T a S)b",
        "package": "synthesizer",
        "partial": "Vector Samples",
        "signature": "amp-\u003eT yv-\u003eT s(T amp S)yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Signal.html#v:processSamples",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(sig0 yv0 -\u003e sig1 yv1) -\u003e w (D v y (T sig0)) yv0 -\u003e w (D v y (T sig1)) yv1",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Signal.html#processSamples",
        "fct-type": "unknown",
        "title": "processSamples"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Signal",
        "module": "Synthesizer.Dimensional.RateAmplitude.Signal",
        "name": "processSamples",
        "normalized": "(a b-\u003ea b)-\u003ec(D d e(T a))b-\u003ec(D d e(T a))b",
        "package": "synthesizer",
        "partial": "Samples",
        "signature": "(sig yv-\u003esig yv)-\u003ew(D v y(T sig))yv-\u003ew(D v y(T sig))yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Signal.html#v:replaceAmplitude",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T v1 y -\u003e w (D v0 y sig) yv -\u003e w (D v1 y sig) yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Signal.html#replaceAmplitude",
        "fct-type": "unknown",
        "title": "replaceAmplitude"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Signal",
        "module": "Synthesizer.Dimensional.RateAmplitude.Signal",
        "name": "replaceAmplitude",
        "normalized": "T a b-\u003ec(D a b d)e-\u003ec(D a b d)e",
        "package": "synthesizer",
        "partial": "Amplitude",
        "signature": "T v y-\u003ew(D v y sig)yv-\u003ew(D v y sig)yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Signal.html#v:replaceSamples",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "sig1 yv1 -\u003e w (D v y sig0) yv0 -\u003e w (D v y (T sig1)) yv1",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Signal.html#replaceSamples",
        "fct-type": "unknown",
        "title": "replaceSamples"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Signal",
        "module": "Synthesizer.Dimensional.RateAmplitude.Signal",
        "name": "replaceSamples",
        "normalized": "a b-\u003ec(D d e a)b-\u003ec(D d e(T a))b",
        "package": "synthesizer",
        "partial": "Samples",
        "signature": "sig yv-\u003ew(D v y sig)yv-\u003ew(D v y(T sig))yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Signal.html#v:samples",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "w (D v y (T sig)) yv -\u003e sig yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Signal.html#samples",
        "fct-type": "unknown",
        "title": "samples"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Signal",
        "module": "Synthesizer.Dimensional.RateAmplitude.Signal",
        "name": "samples",
        "normalized": "a(D b c(T d))e-\u003ed e",
        "package": "synthesizer",
        "partial": "",
        "signature": "w(D v y(T sig))yv-\u003esig yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Signal.html#v:scalarSamples",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(amp -\u003e y) -\u003e w (T amp S) y -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Signal.html#scalarSamples",
        "fct-type": "unknown",
        "title": "scalarSamples"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Signal",
        "module": "Synthesizer.Dimensional.RateAmplitude.Signal",
        "name": "scalarSamples",
        "normalized": "(a-\u003eb)-\u003ec(T a S)b-\u003eT b",
        "package": "synthesizer",
        "partial": "Samples",
        "signature": "(amp-\u003ey)-\u003ew(T amp S)y-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Signal.html#v:scalarSamplesGeneric",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(T v y -\u003e y) -\u003e w (D v y (T sig)) y -\u003e sig y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Signal.html#scalarSamplesGeneric",
        "fct-type": "unknown",
        "title": "scalarSamplesGeneric"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Signal",
        "module": "Synthesizer.Dimensional.RateAmplitude.Signal",
        "name": "scalarSamplesGeneric",
        "normalized": "(T a b-\u003eb)-\u003ec(D a b(T d))b-\u003ed b",
        "package": "synthesizer",
        "partial": "Samples Generic",
        "signature": "(T v y-\u003ey)-\u003ew(D v y(T sig))y-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Signal.html#v:share",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T s u t (w (D v y S) yv0) -\u003e (T s u t (w (D v y S) yv0) -\u003e T s u t b) -\u003e T s u t b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Signal.html#share",
        "fct-type": "unknown",
        "title": "share"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Signal",
        "module": "Synthesizer.Dimensional.RateAmplitude.Signal",
        "name": "share",
        "normalized": "T a b c(d(D e f S)g)-\u003e(T a b c(d(D e f S)g)-\u003eT a b c h)-\u003eT a b c h",
        "package": "synthesizer",
        "partial": "",
        "signature": "T s u t(w(D v y S)yv)-\u003e(T s u t(w(D v y S)yv)-\u003eT s u t b)-\u003eT s u t b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Signal.html#v:toAmplitudeScalar",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "w (D v y sig) yv -\u003e T v y -\u003e y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Signal.html#toAmplitudeScalar",
        "fct-type": "unknown",
        "title": "toAmplitudeScalar"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Signal",
        "module": "Synthesizer.Dimensional.RateAmplitude.Signal",
        "name": "toAmplitudeScalar",
        "normalized": "a(D b c d)e-\u003eT b c-\u003ec",
        "package": "synthesizer",
        "partial": "Amplitude Scalar",
        "signature": "w(D v y sig)yv-\u003eT v y-\u003ey"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Signal.html#v:toFrequencyScalar",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T (Recip u) t -\u003e T s u t t",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Process.html#toFrequencyScalar",
        "fct-type": "unknown",
        "title": "toFrequencyScalar"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Signal",
        "module": "Synthesizer.Dimensional.RateAmplitude.Signal",
        "name": "toFrequencyScalar",
        "normalized": "T(Recip a)b-\u003eT c a b b",
        "package": "synthesizer",
        "partial": "Frequency Scalar",
        "signature": "T(Recip u)t-\u003eT s u t t"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Signal.html#v:toGradientScalar",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T v q -\u003e T (DimensionGradient u v) q -\u003e T s u q q",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Signal.html#toGradientScalar",
        "fct-type": "unknown",
        "title": "toGradientScalar"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Signal",
        "module": "Synthesizer.Dimensional.RateAmplitude.Signal",
        "name": "toGradientScalar",
        "normalized": "T a b-\u003eT(DimensionGradient c a)b-\u003eT d c b b",
        "package": "synthesizer",
        "partial": "Gradient Scalar",
        "signature": "T v q-\u003eT(DimensionGradient u v)q-\u003eT s u q q"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Signal.html#v:toStorableInt16Mono",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "w (S Voltage a) a -\u003e w T Int16",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Signal.html#toStorableInt16Mono",
        "fct-type": "unknown",
        "title": "toStorableInt16Mono"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Signal",
        "module": "Synthesizer.Dimensional.RateAmplitude.Signal",
        "name": "toStorableInt16Mono",
        "normalized": "a(S Voltage b)b-\u003ea T Int",
        "package": "synthesizer",
        "partial": "Storable Int Mono",
        "signature": "w(S Voltage a)a-\u003ew T Int"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Signal.html#v:toStorableInt16Stereo",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "w (S Voltage a) (T a) -\u003e w T (T Int16)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateAmplitude-Signal.html#toStorableInt16Stereo",
        "fct-type": "unknown",
        "title": "toStorableInt16Stereo"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Signal",
        "module": "Synthesizer.Dimensional.RateAmplitude.Signal",
        "name": "toStorableInt16Stereo",
        "normalized": "a(S Voltage b)(T b)-\u003ea T(T Int)",
        "package": "synthesizer",
        "partial": "Storable Int Stereo",
        "signature": "w(S Voltage a)(T a)-\u003ew T(T Int)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Signal.html#v:toTimeScalar",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T u t -\u003e T s u t t",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Process.html#toTimeScalar",
        "fct-type": "unknown",
        "title": "toTimeScalar"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Signal",
        "module": "Synthesizer.Dimensional.RateAmplitude.Signal",
        "name": "toTimeScalar",
        "normalized": "T a b-\u003eT c a b b",
        "package": "synthesizer",
        "partial": "Time Scalar",
        "signature": "T u t-\u003eT s u t t"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateAmplitude-Signal.html#v:vectorSamples",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateAmplitude.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(T v y -\u003e y) -\u003e w (S v y) yv -\u003e T yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Amplitude-Signal.html#vectorSamples",
        "fct-type": "unknown",
        "title": "vectorSamples"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateAmplitude Signal",
        "module": "Synthesizer.Dimensional.RateAmplitude.Signal",
        "name": "vectorSamples",
        "normalized": "(T a b-\u003eb)-\u003ec(S a b)d-\u003eT d",
        "package": "synthesizer",
        "partial": "Samples",
        "signature": "(T v y-\u003ey)-\u003ew(S v y)yv-\u003eT yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RatePhantom.html#t:T",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RatePhantom",
        "fct-package": "synthesizer",
        "fct-signature": "newtype",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RatePhantom.html#T",
        "fct-type": "unknown",
        "title": "T"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RatePhantom",
        "module": "Synthesizer.Dimensional.RatePhantom",
        "name": "T",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RatePhantom.html#v:fromSignal",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RatePhantom",
        "fct-package": "synthesizer",
        "fct-signature": "sig y -\u003e T s sig y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RatePhantom.html#fromSignal",
        "fct-type": "unknown",
        "title": "fromSignal"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RatePhantom",
        "module": "Synthesizer.Dimensional.RatePhantom",
        "name": "fromSignal",
        "normalized": "a b-\u003eT c a b",
        "package": "synthesizer",
        "partial": "Signal",
        "signature": "sig y-\u003eT s sig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RatePhantom.html#v:processSignal",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RatePhantom",
        "fct-package": "synthesizer",
        "fct-signature": "(sig0 y0 -\u003e sig1 y1) -\u003e T s sig0 y0 -\u003e T s sig1 y1",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RatePhantom.html#processSignal",
        "fct-type": "unknown",
        "title": "processSignal"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RatePhantom",
        "module": "Synthesizer.Dimensional.RatePhantom",
        "name": "processSignal",
        "normalized": "(a b-\u003ea b)-\u003eT c a b-\u003eT c a b",
        "package": "synthesizer",
        "partial": "Signal",
        "signature": "(sig y-\u003esig y)-\u003eT s sig y-\u003eT s sig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RatePhantom.html#v:toSignal",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RatePhantom",
        "fct-package": "synthesizer",
        "fct-signature": "T s sig y -\u003e sig y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RatePhantom.html#toSignal",
        "fct-type": "unknown",
        "title": "toSignal"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RatePhantom",
        "module": "Synthesizer.Dimensional.RatePhantom",
        "name": "toSignal",
        "normalized": "T a b c-\u003eb c",
        "package": "synthesizer",
        "partial": "Signal",
        "signature": "T s sig y-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateWrapper.html#t:T",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateWrapper",
        "fct-package": "synthesizer",
        "fct-signature": "data",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateWrapper.html#T",
        "fct-type": "unknown",
        "title": "T"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateWrapper",
        "module": "Synthesizer.Dimensional.RateWrapper",
        "name": "T",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateWrapper.html#v:fromProcess",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateWrapper",
        "fct-package": "synthesizer",
        "fct-signature": "T s u t (T s sig yv -\u003e T u t sig yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateWrapper.html#fromProcess",
        "fct-type": "unknown",
        "title": "fromProcess"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateWrapper",
        "module": "Synthesizer.Dimensional.RateWrapper",
        "name": "fromProcess",
        "normalized": "T a b c(T a d e-\u003eT b c d e)",
        "package": "synthesizer",
        "partial": "Process",
        "signature": "T s u t(T s sig yv-\u003eT u t sig yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateWrapper.html#v:fromSignal",
      "description": {
        "fct-descr": "internal function\n",
        "fct-module": "Synthesizer.Dimensional.RateWrapper",
        "fct-package": "synthesizer",
        "fct-signature": "T s u t -\u003e T s sig yv -\u003e T u t sig yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateWrapper.html#fromSignal",
        "fct-type": "unknown",
        "title": "fromSignal"
      },
      "index": {
        "description": "internal function",
        "hierarchy": "Synthesizer Dimensional RateWrapper",
        "module": "Synthesizer.Dimensional.RateWrapper",
        "name": "fromSignal",
        "normalized": "T a b c-\u003eT a d e-\u003eT b c d e",
        "package": "synthesizer",
        "partial": "Signal",
        "signature": "T s u t-\u003eT s sig yv-\u003eT u t sig yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateWrapper.html#v:processSignal",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateWrapper",
        "fct-package": "synthesizer",
        "fct-signature": "(sig0 yv0 -\u003e sig1 yv1) -\u003e T u t sig0 yv0 -\u003e T u t sig1 yv1",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateWrapper.html#processSignal",
        "fct-type": "unknown",
        "title": "processSignal"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateWrapper",
        "module": "Synthesizer.Dimensional.RateWrapper",
        "name": "processSignal",
        "normalized": "(a b-\u003ea b)-\u003eT c d a b-\u003eT c d a b",
        "package": "synthesizer",
        "partial": "Signal",
        "signature": "(sig yv-\u003esig yv)-\u003eT u t sig yv-\u003eT u t sig yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateWrapper.html#v:runProcess",
      "description": {
        "fct-descr": "Render a signal generated by a signal processor\nat the given sample rate,\nand leave the sample rate context.\nIf you want to render multiple signals,\nthen convert them with \u003ctt\u003e\u003ca\u003efromProcess\u003c/a\u003e\u003c/tt\u003e\nand move them out of the sample rate context\nall at once using \u003ctt\u003e\u003ca\u003erun\u003c/a\u003e\u003c/tt\u003e.\n",
        "fct-module": "Synthesizer.Dimensional.RateWrapper",
        "fct-package": "synthesizer",
        "fct-signature": "T (Recip u) t -\u003e (forall s.  T s u t (T s sig yv)) -\u003e T u t sig yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateWrapper.html#runProcess",
        "fct-type": "unknown",
        "title": "runProcess"
      },
      "index": {
        "description": "Render signal generated by signal processor at the given sample rate and leave the sample rate context If you want to render multiple signals then convert them with fromProcess and move them out of the sample rate context all at once using run",
        "hierarchy": "Synthesizer Dimensional RateWrapper",
        "module": "Synthesizer.Dimensional.RateWrapper",
        "name": "runProcess",
        "normalized": "T(Recip a)b-\u003e(c d T e a b(T e f g))-\u003eT a b f g",
        "package": "synthesizer",
        "partial": "Process",
        "signature": "T(Recip u)t-\u003e(forall s. T s u t(T s sig yv))-\u003eT u t sig yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateWrapper.html#v:runProcessOn",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateWrapper",
        "fct-package": "synthesizer",
        "fct-signature": "(forall s.  T s u t (T s sig0 yv0 -\u003e T s sig1 yv1)) -\u003e T u t sig0 yv0 -\u003e T u t sig1 yv1",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateWrapper.html#runProcessOn",
        "fct-type": "unknown",
        "title": "runProcessOn"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateWrapper",
        "module": "Synthesizer.Dimensional.RateWrapper",
        "name": "runProcessOn",
        "normalized": "(a b T c d e(T c f g-\u003eT c f g))-\u003eT d e f g-\u003eT d e f g",
        "package": "synthesizer",
        "partial": "Process On",
        "signature": "(forall s. T s u t(T s sig yv-\u003eT s sig yv))-\u003eT u t sig yv-\u003eT u t sig yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateWrapper.html#v:toProcess",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateWrapper",
        "fct-package": "synthesizer",
        "fct-signature": "(T u t sig yv -\u003e a) -\u003e T s u t (T s sig yv -\u003e a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateWrapper.html#toProcess",
        "fct-type": "unknown",
        "title": "toProcess"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateWrapper",
        "module": "Synthesizer.Dimensional.RateWrapper",
        "name": "toProcess",
        "normalized": "(T a b c d-\u003ee)-\u003eT f a b(T f c d-\u003ee)",
        "package": "synthesizer",
        "partial": "Process",
        "signature": "(T u t sig yv-\u003ea)-\u003eT s u t(T s sig yv-\u003ea)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-RateWrapper.html#v:toSignal",
      "description": {
        "fct-module": "Synthesizer.Dimensional.RateWrapper",
        "fct-package": "synthesizer",
        "fct-signature": "T u t sig yv -\u003e (T s u t, T s sig yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-RateWrapper.html#toSignal",
        "fct-type": "unknown",
        "title": "toSignal"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional RateWrapper",
        "module": "Synthesizer.Dimensional.RateWrapper",
        "name": "toSignal",
        "normalized": "T a b c d-\u003e(T e a b,T e c d)",
        "package": "synthesizer",
        "partial": "Signal",
        "signature": "T u t sig yv-\u003e(T s u t,T s sig yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Straight-Displacement.html#v:distort",
      "description": {
        "fct-descr": "In \u003ca\u003eSynthesizer.State.Distortion\u003c/a\u003e you find a collection\nof appropriate distortion functions.\n",
        "fct-module": "Synthesizer.Dimensional.Straight.Displacement",
        "fct-package": "synthesizer",
        "fct-signature": "(c -\u003e a -\u003e a) -\u003e R s c -\u003e R s a -\u003e R s a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Straight-Displacement.html#distort",
        "fct-type": "unknown",
        "title": "distort"
      },
      "index": {
        "description": "In Synthesizer.State.Distortion you find collection of appropriate distortion functions",
        "hierarchy": "Synthesizer Dimensional Straight Displacement",
        "module": "Synthesizer.Dimensional.Straight.Displacement",
        "name": "distort",
        "normalized": "(a-\u003eb-\u003eb)-\u003eR c a-\u003eR c b-\u003eR c b",
        "package": "synthesizer",
        "partial": "",
        "signature": "(c-\u003ea-\u003ea)-\u003eR s c-\u003eR s a-\u003eR s a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Straight-Displacement.html#v:map",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Straight.Displacement",
        "fct-package": "synthesizer",
        "fct-signature": "(y0 -\u003e y1) -\u003e w flat y0 -\u003e w S y1",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Straight-Displacement.html#map",
        "fct-type": "unknown",
        "title": "map"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Straight Displacement",
        "module": "Synthesizer.Dimensional.Straight.Displacement",
        "name": "map",
        "normalized": "(a-\u003ea)-\u003eb c a-\u003eb S a",
        "package": "synthesizer",
        "partial": "",
        "signature": "(y-\u003ey)-\u003ew flat y-\u003ew S y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Straight-Displacement.html#v:mix",
      "description": {
        "fct-descr": "Mix two signals.\nIn opposition to \u003ctt\u003e\u003ca\u003ezipWith\u003c/a\u003e\u003c/tt\u003e the result has the length of the longer signal.\n",
        "fct-module": "Synthesizer.Dimensional.Straight.Displacement",
        "fct-package": "synthesizer",
        "fct-signature": "R s v -\u003e R s v -\u003e R s v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Straight-Displacement.html#mix",
        "fct-type": "unknown",
        "title": "mix"
      },
      "index": {
        "description": "Mix two signals In opposition to zipWith the result has the length of the longer signal",
        "hierarchy": "Synthesizer Dimensional Straight Displacement",
        "module": "Synthesizer.Dimensional.Straight.Displacement",
        "name": "mix",
        "normalized": "R a b-\u003eR a b-\u003eR a b",
        "package": "synthesizer",
        "partial": "",
        "signature": "R s v-\u003eR s v-\u003eR s v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Straight-Displacement.html#v:raise",
      "description": {
        "fct-descr": "Add a number to all of the signal values.\n    This is useful for adjusting the center of a modulation. \n",
        "fct-module": "Synthesizer.Dimensional.Straight.Displacement",
        "fct-package": "synthesizer",
        "fct-signature": "v -\u003e w S v -\u003e w S v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Straight-Displacement.html#raise",
        "fct-type": "unknown",
        "title": "raise"
      },
      "index": {
        "description": "Add number to all of the signal values This is useful for adjusting the center of modulation",
        "hierarchy": "Synthesizer Dimensional Straight Displacement",
        "module": "Synthesizer.Dimensional.Straight.Displacement",
        "name": "raise",
        "normalized": "a-\u003eb S a-\u003eb S a",
        "package": "synthesizer",
        "partial": "",
        "signature": "v-\u003ew S v-\u003ew S v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Straight-Signal.html#t:Binary",
      "description": {
        "fct-descr": "In contrast to Synthesizer.Dimensional.Rate.Dirac\nwhere only booleans are possible (peak or not peak)\nwe can also have signals of booleans or other enumerations.\nIn this case we consider the signal as piecewise constant.\n",
        "fct-module": "Synthesizer.Dimensional.Straight.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "type",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Straight-Signal.html#Binary",
        "fct-type": "unknown",
        "title": "Binary"
      },
      "index": {
        "description": "In contrast to Synthesizer.Dimensional.Rate.Dirac where only booleans are possible peak or not peak we can also have signals of booleans or other enumerations In this case we consider the signal as piecewise constant",
        "hierarchy": "Synthesizer Dimensional Straight Signal",
        "module": "Synthesizer.Dimensional.Straight.Signal",
        "name": "Binary",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Binary",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Straight-Signal.html#t:R",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Straight.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "type",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Straight-Signal.html#R",
        "fct-type": "unknown",
        "title": "R"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Straight Signal",
        "module": "Synthesizer.Dimensional.Straight.Signal",
        "name": "R",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Straight-Signal.html#t:S",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Straight.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "type",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Straight-Signal.html#S",
        "fct-type": "unknown",
        "title": "S"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Straight Signal",
        "module": "Synthesizer.Dimensional.Straight.Signal",
        "name": "S",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Straight-Signal.html#t:T",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Straight.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "newtype",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Straight-Signal.html#T",
        "fct-type": "unknown",
        "title": "T"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Straight Signal",
        "module": "Synthesizer.Dimensional.Straight.Signal",
        "name": "T",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Straight-Signal.html#v:fromSamples",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Straight.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T yv -\u003e R s yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Straight-Signal.html#fromSamples",
        "fct-type": "unknown",
        "title": "fromSamples"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Straight Signal",
        "module": "Synthesizer.Dimensional.Straight.Signal",
        "name": "fromSamples",
        "normalized": "T a-\u003eR b a",
        "package": "synthesizer",
        "partial": "Samples",
        "signature": "T yv-\u003eR s yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Straight-Signal.html#v:processSamples",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Straight.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(seq0 yv0 -\u003e seq1 yv1) -\u003e w (T seq0) yv0 -\u003e w (T seq1) yv1",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Straight-Signal.html#processSamples",
        "fct-type": "unknown",
        "title": "processSamples"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Straight Signal",
        "module": "Synthesizer.Dimensional.Straight.Signal",
        "name": "processSamples",
        "normalized": "(a b-\u003ea b)-\u003ec(T a)b-\u003ec(T a)b",
        "package": "synthesizer",
        "partial": "Samples",
        "signature": "(seq yv-\u003eseq yv)-\u003ew(T seq)yv-\u003ew(T seq)yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Straight-Signal.html#v:processSamplesPrivate",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Straight.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(seq0 yv0 -\u003e seq1 yv1) -\u003e T seq0 yv0 -\u003e T seq1 yv1",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Straight-Signal.html#processSamplesPrivate",
        "fct-type": "unknown",
        "title": "processSamplesPrivate"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Straight Signal",
        "module": "Synthesizer.Dimensional.Straight.Signal",
        "name": "processSamplesPrivate",
        "normalized": "(a b-\u003ea b)-\u003eT a b-\u003eT a b",
        "package": "synthesizer",
        "partial": "Samples Private",
        "signature": "(seq yv-\u003eseq yv)-\u003eT seq yv-\u003eT seq yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Straight-Signal.html#v:replaceSamples",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Straight.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T yv1 -\u003e R s yv0 -\u003e R s yv1",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Straight-Signal.html#replaceSamples",
        "fct-type": "unknown",
        "title": "replaceSamples"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Straight Signal",
        "module": "Synthesizer.Dimensional.Straight.Signal",
        "name": "replaceSamples",
        "normalized": "T a-\u003eR b a-\u003eR b a",
        "package": "synthesizer",
        "partial": "Samples",
        "signature": "T yv-\u003eR s yv-\u003eR s yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Dimensional-Straight-Signal.html#v:toSamples",
      "description": {
        "fct-module": "Synthesizer.Dimensional.Straight.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "w (T seq) yv -\u003e seq yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Dimensional-Straight-Signal.html#toSamples",
        "fct-type": "unknown",
        "title": "toSamples"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Dimensional Straight Signal",
        "module": "Synthesizer.Dimensional.Straight.Signal",
        "name": "toSamples",
        "normalized": "a(T b)c-\u003eb c",
        "package": "synthesizer",
        "partial": "Samples",
        "signature": "w(T seq)yv-\u003eseq yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Filter-Basic.html#v:Filter",
      "description": {
        "fct-module": "Synthesizer.Filter.Basic",
        "fct-package": "synthesizer",
        "fct-signature": "class",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Filter-Basic.html#Filter",
        "fct-type": "unknown",
        "title": "Filter"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Filter Basic",
        "module": "Synthesizer.Filter.Basic",
        "name": "Filter",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Filter",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Filter-Basic.html#v:apply",
      "description": {
        "fct-descr": "Apply a filter to a signal. \n",
        "fct-module": "Synthesizer.Filter.Basic",
        "fct-package": "synthesizer",
        "fct-signature": "filter t a v -\u003e list v -\u003e list v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Filter-Basic.html#apply",
        "fct-type": "unknown",
        "title": "apply"
      },
      "index": {
        "description": "Apply filter to signal",
        "hierarchy": "Synthesizer Filter Basic",
        "module": "Synthesizer.Filter.Basic",
        "name": "apply",
        "normalized": "a b c d-\u003ee d-\u003ee d",
        "package": "synthesizer",
        "partial": "",
        "signature": "filter t a v-\u003elist v-\u003elist v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Filter-Basic.html#v:screw",
      "description": {
        "fct-module": "Synthesizer.Filter.Basic",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e [T a]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Filter-Basic.html#screw",
        "fct-type": "unknown",
        "title": "screw"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Filter Basic",
        "module": "Synthesizer.Filter.Basic",
        "name": "screw",
        "normalized": "a-\u003e[T a]",
        "package": "synthesizer",
        "partial": "",
        "signature": "a-\u003e[T a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Filter-Basic.html#v:transferFunction",
      "description": {
        "fct-descr": "Compute the complex amplification factor\n       that is applied to the given frequency. \n",
        "fct-module": "Synthesizer.Filter.Basic",
        "fct-package": "synthesizer",
        "fct-signature": "filter t a v -\u003e t -\u003e T t",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Filter-Basic.html#transferFunction",
        "fct-type": "unknown",
        "title": "transferFunction"
      },
      "index": {
        "description": "Compute the complex amplification factor that is applied to the given frequency",
        "hierarchy": "Synthesizer Filter Basic",
        "module": "Synthesizer.Filter.Basic",
        "name": "transferFunction",
        "normalized": "a b c d-\u003eb-\u003eT b",
        "package": "synthesizer",
        "partial": "Function",
        "signature": "filter t a v-\u003et-\u003eT t"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Filter-Composition.html#t:SocketSpec",
      "description": {
        "fct-module": "Synthesizer.Filter.Composition",
        "fct-package": "synthesizer",
        "fct-signature": "data",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Filter-Composition.html#SocketSpec",
        "fct-type": "unknown",
        "title": "SocketSpec"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Filter Composition",
        "module": "Synthesizer.Filter.Composition",
        "name": "SocketSpec",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Socket Spec",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Filter-Composition.html#t:Sockets",
      "description": {
        "fct-module": "Synthesizer.Filter.Composition",
        "fct-package": "synthesizer",
        "fct-signature": "data",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Filter-Composition.html#Sockets",
        "fct-type": "unknown",
        "title": "Sockets"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Filter Composition",
        "module": "Synthesizer.Filter.Composition",
        "name": "Sockets",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Sockets",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Filter-Composition.html#t:T",
      "description": {
        "fct-module": "Synthesizer.Filter.Composition",
        "fct-package": "synthesizer",
        "fct-signature": "data",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Filter-Composition.html#T",
        "fct-type": "unknown",
        "title": "T"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Filter Composition",
        "module": "Synthesizer.Filter.Composition",
        "name": "T",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Filter-Composition.html#v:applyMulti",
      "description": {
        "fct-descr": "Apply a filter network to a signal and keep the output of all nodes.\n    Generic function that is wrapped by \u003ctt\u003e\u003ca\u003eapply\u003c/a\u003e\u003c/tt\u003e. \n",
        "fct-module": "Synthesizer.Filter.Composition",
        "fct-package": "synthesizer",
        "fct-signature": "T filter t a v -\u003e list v -\u003e Sockets (list v)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Filter-Composition.html#applyMulti",
        "fct-type": "unknown",
        "title": "applyMulti"
      },
      "index": {
        "description": "Apply filter network to signal and keep the output of all nodes Generic function that is wrapped by apply",
        "hierarchy": "Synthesizer Filter Composition",
        "module": "Synthesizer.Filter.Composition",
        "name": "applyMulti",
        "normalized": "T a b c d-\u003ee d-\u003eSockets(e d)",
        "package": "synthesizer",
        "partial": "Multi",
        "signature": "T filter t a v-\u003elist v-\u003eSockets(list v)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Filter-Composition.html#v:tfAbsolutize",
      "description": {
        "fct-descr": "Make the results from \u003ctt\u003e\u003ca\u003etfRelative\u003c/a\u003e\u003c/tt\u003e absolute. \n",
        "fct-module": "Synthesizer.Filter.Composition",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e Sockets a -\u003e Sockets a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Filter-Composition.html#tfAbsolutize",
        "fct-type": "unknown",
        "title": "tfAbsolutize"
      },
      "index": {
        "description": "Make the results from tfRelative absolute",
        "hierarchy": "Synthesizer Filter Composition",
        "module": "Synthesizer.Filter.Composition",
        "name": "tfAbsolutize",
        "normalized": "a-\u003eSockets a-\u003eSockets a",
        "package": "synthesizer",
        "partial": "Absolutize",
        "signature": "a-\u003eSockets a-\u003eSockets a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Filter-Composition.html#v:tfRelative",
      "description": {
        "fct-descr": "Compute the transitivity for each part of the filter network.\n    We must do this in such a relative manner to be able\n    to compute feedback. \n",
        "fct-module": "Synthesizer.Filter.Composition",
        "fct-package": "synthesizer",
        "fct-signature": "t -\u003e T filter t a v -\u003e Sockets (T t)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Filter-Composition.html#tfRelative",
        "fct-type": "unknown",
        "title": "tfRelative"
      },
      "index": {
        "description": "Compute the transitivity for each part of the filter network We must do this in such relative manner to be able to compute feedback",
        "hierarchy": "Synthesizer Filter Composition",
        "module": "Synthesizer.Filter.Composition",
        "name": "tfRelative",
        "normalized": "a-\u003eT b a c d-\u003eSockets(T a)",
        "package": "synthesizer",
        "partial": "Relative",
        "signature": "t-\u003eT filter t a v-\u003eSockets(T t)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Filter-Composition.html#v:transferFunctionMulti",
      "description": {
        "fct-module": "Synthesizer.Filter.Composition",
        "fct-package": "synthesizer",
        "fct-signature": "T filter t a v -\u003e t -\u003e Sockets (T t)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Filter-Composition.html#transferFunctionMulti",
        "fct-type": "unknown",
        "title": "transferFunctionMulti"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Filter Composition",
        "module": "Synthesizer.Filter.Composition",
        "name": "transferFunctionMulti",
        "normalized": "T a b c d-\u003eb-\u003eSockets(T b)",
        "package": "synthesizer",
        "partial": "Function Multi",
        "signature": "T filter t a v-\u003et-\u003eSockets(T t)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Filter-Example.html#t:CompositionDouble",
      "description": {
        "fct-module": "Synthesizer.Filter.Example",
        "fct-package": "synthesizer",
        "fct-signature": "type",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Filter-Example.html#CompositionDouble",
        "fct-type": "unknown",
        "title": "CompositionDouble"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Filter Example",
        "module": "Synthesizer.Filter.Example",
        "name": "CompositionDouble",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Composition Double",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Filter-Example.html#t:GraphDouble",
      "description": {
        "fct-module": "Synthesizer.Filter.Example",
        "fct-package": "synthesizer",
        "fct-signature": "type",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Filter-Example.html#GraphDouble",
        "fct-type": "unknown",
        "title": "GraphDouble"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Filter Example",
        "module": "Synthesizer.Filter.Example",
        "name": "GraphDouble",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Graph Double",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Filter-Example.html#v:expo",
      "description": {
        "fct-descr": "a simple lowpass used to create an exponential2 \n",
        "fct-module": "Synthesizer.Filter.Example",
        "fct-package": "synthesizer",
        "fct-signature": "Signal Double",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Filter-Example.html#expo",
        "fct-type": "unknown",
        "title": "expo"
      },
      "index": {
        "description": "simple lowpass used to create an exponential2",
        "hierarchy": "Synthesizer Filter Example",
        "module": "Synthesizer.Filter.Example",
        "name": "expo",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Filter-Example.html#v:expoGraph",
      "description": {
        "fct-module": "Synthesizer.Filter.Example",
        "fct-package": "synthesizer",
        "fct-signature": "[Double]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Filter-Example.html#expoGraph",
        "fct-type": "unknown",
        "title": "expoGraph"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Filter Example",
        "module": "Synthesizer.Filter.Example",
        "name": "expoGraph",
        "normalized": "[Double]",
        "package": "synthesizer",
        "partial": "Graph",
        "signature": "[Double]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Filter-Example.html#v:expoGraphTwoWay",
      "description": {
        "fct-module": "Synthesizer.Filter.Example",
        "fct-package": "synthesizer",
        "fct-signature": "[Double]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Filter-Example.html#expoGraphTwoWay",
        "fct-type": "unknown",
        "title": "expoGraphTwoWay"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Filter Example",
        "module": "Synthesizer.Filter.Example",
        "name": "expoGraphTwoWay",
        "normalized": "[Double]",
        "package": "synthesizer",
        "partial": "Graph Two Way",
        "signature": "[Double]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Filter-Example.html#v:flangedSaw",
      "description": {
        "fct-descr": "make recursive flanger with help of the two way interpolation \n",
        "fct-module": "Synthesizer.Filter.Example",
        "fct-package": "synthesizer",
        "fct-signature": "Double -\u003e [Double]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Filter-Example.html#flangedSaw",
        "fct-type": "unknown",
        "title": "flangedSaw"
      },
      "index": {
        "description": "make recursive flanger with help of the two way interpolation",
        "hierarchy": "Synthesizer Filter Example",
        "module": "Synthesizer.Filter.Example",
        "name": "flangedSaw",
        "normalized": "Double-\u003e[Double]",
        "package": "synthesizer",
        "partial": "Saw",
        "signature": "Double-\u003e[Double]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Filter-Example.html#v:guitar",
      "description": {
        "fct-descr": "Resample the reconstructed string sound\n    so that notes can be played. \n",
        "fct-module": "Synthesizer.Filter.Example",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e [a]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Filter-Example.html#guitar",
        "fct-type": "unknown",
        "title": "guitar"
      },
      "index": {
        "description": "Resample the reconstructed string sound so that notes can be played",
        "hierarchy": "Synthesizer Filter Example",
        "module": "Synthesizer.Filter.Example",
        "name": "guitar",
        "normalized": "a-\u003e[a]",
        "package": "synthesizer",
        "partial": "",
        "signature": "a-\u003e[a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Filter-Example.html#v:guitarCompLong",
      "description": {
        "fct-module": "Synthesizer.Filter.Example",
        "fct-package": "synthesizer",
        "fct-signature": "[a] -\u003e T T Double a a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Filter-Example.html#guitarCompLong",
        "fct-type": "unknown",
        "title": "guitarCompLong"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Filter Example",
        "module": "Synthesizer.Filter.Example",
        "name": "guitarCompLong",
        "normalized": "[a]-\u003eT T Double a a",
        "package": "synthesizer",
        "partial": "Comp Long",
        "signature": "[a]-\u003eT T Double a a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Filter-Example.html#v:guitarCompShort",
      "description": {
        "fct-module": "Synthesizer.Filter.Example",
        "fct-package": "synthesizer",
        "fct-signature": "[a] -\u003e T T Double a a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Filter-Example.html#guitarCompShort",
        "fct-type": "unknown",
        "title": "guitarCompShort"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Filter Example",
        "module": "Synthesizer.Filter.Example",
        "name": "guitarCompShort",
        "normalized": "[a]-\u003eT T Double a a",
        "package": "synthesizer",
        "partial": "Comp Short",
        "signature": "[a]-\u003eT T Double a a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Filter-Example.html#v:guitarInit",
      "description": {
        "fct-module": "Synthesizer.Filter.Example",
        "fct-package": "synthesizer",
        "fct-signature": "[a]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Filter-Example.html#guitarInit",
        "fct-type": "unknown",
        "title": "guitarInit"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Filter Example",
        "module": "Synthesizer.Filter.Example",
        "name": "guitarInit",
        "normalized": "[a]",
        "package": "synthesizer",
        "partial": "Init",
        "signature": "[a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Filter-Example.html#v:guitarRaw",
      "description": {
        "fct-descr": "Reconstruct the guitar sound from the sampled initial wave\n    and the analysed feedback factors.\n    This sounds pretty like the sampled sound. \n",
        "fct-module": "Synthesizer.Filter.Example",
        "fct-package": "synthesizer",
        "fct-signature": "[a]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Filter-Example.html#guitarRaw",
        "fct-type": "unknown",
        "title": "guitarRaw"
      },
      "index": {
        "description": "Reconstruct the guitar sound from the sampled initial wave and the analysed feedback factors This sounds pretty like the sampled sound",
        "hierarchy": "Synthesizer Filter Example",
        "module": "Synthesizer.Filter.Example",
        "name": "guitarRaw",
        "normalized": "[a]",
        "package": "synthesizer",
        "partial": "Raw",
        "signature": "[a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Filter-Example.html#v:guitarRawSimple",
      "description": {
        "fct-descr": "Reconstruct the guitar sound from the sampled initial wave\n    but with simple smoothing on feedback.\n    This sounds more statically. \n",
        "fct-module": "Synthesizer.Filter.Example",
        "fct-package": "synthesizer",
        "fct-signature": "[a]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Filter-Example.html#guitarRawSimple",
        "fct-type": "unknown",
        "title": "guitarRawSimple"
      },
      "index": {
        "description": "Reconstruct the guitar sound from the sampled initial wave but with simple smoothing on feedback This sounds more statically",
        "hierarchy": "Synthesizer Filter Example",
        "module": "Synthesizer.Filter.Example",
        "name": "guitarRawSimple",
        "normalized": "[a]",
        "package": "synthesizer",
        "partial": "Raw Simple",
        "signature": "[a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Filter-Example.html#v:guitarRawVelo",
      "description": {
        "fct-descr": "Reconstruct the guitar sound with the analysed feedback factors\n    but with an synthetic initial wave.\n    The sharpness of the initial wave can be controlled.\n    This is used to implement various velocities. \n",
        "fct-module": "Synthesizer.Filter.Example",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e [a]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Filter-Example.html#guitarRawVelo",
        "fct-type": "unknown",
        "title": "guitarRawVelo"
      },
      "index": {
        "description": "Reconstruct the guitar sound with the analysed feedback factors but with an synthetic initial wave The sharpness of the initial wave can be controlled This is used to implement various velocities",
        "hierarchy": "Synthesizer Filter Example",
        "module": "Synthesizer.Filter.Example",
        "name": "guitarRawVelo",
        "normalized": "a-\u003e[a]",
        "package": "synthesizer",
        "partial": "Raw Velo",
        "signature": "a-\u003e[a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Filter-Example.html#v:simpleGraph",
      "description": {
        "fct-module": "Synthesizer.Filter.Example",
        "fct-package": "synthesizer",
        "fct-signature": "Signal Double",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Filter-Example.html#simpleGraph",
        "fct-type": "unknown",
        "title": "simpleGraph"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Filter Example",
        "module": "Synthesizer.Filter.Example",
        "name": "simpleGraph",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Graph",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Filter-Fix.html#t:Channel",
      "description": {
        "fct-module": "Synthesizer.Filter.Fix",
        "fct-package": "synthesizer",
        "fct-signature": "data",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Filter-Fix.html#Channel",
        "fct-type": "unknown",
        "title": "Channel"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Filter Fix",
        "module": "Synthesizer.Filter.Fix",
        "name": "Channel",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Channel",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Filter-Fix.html#t:ChannelId",
      "description": {
        "fct-module": "Synthesizer.Filter.Fix",
        "fct-package": "synthesizer",
        "fct-signature": "type",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Filter-Fix.html#ChannelId",
        "fct-type": "unknown",
        "title": "ChannelId"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Filter Fix",
        "module": "Synthesizer.Filter.Fix",
        "name": "ChannelId",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Channel Id",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Filter-Fix.html#t:T",
      "description": {
        "fct-descr": "\u003cp\u003eA \u003ctt\u003e\u003ca\u003eT\u003c/a\u003e\u003c/tt\u003e with numbered nodes is not very comfortable.\nBetter provide a Control.Monad.Fix.fix-like function\nwhich allows to enter a graph this way:\n\u003c/p\u003e\u003cpre\u003e fix $ \\[v,w,y] -\u003e\n [a(u + dw),\n  b(v + ey),\n  c w]\n\u003c/pre\u003e",
        "fct-module": "Synthesizer.Filter.Fix",
        "fct-package": "synthesizer",
        "fct-signature": "type",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Filter-Fix.html#T",
        "fct-type": "unknown",
        "title": "T"
      },
      "index": {
        "description": "with numbered nodes is not very comfortable Better provide Control.Monad.Fix.fix-like function which allows to enter graph this way fix dw ey",
        "hierarchy": "Synthesizer Filter Fix",
        "module": "Synthesizer.Filter.Fix",
        "name": "T",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Filter-Fix.html#v:fix",
      "description": {
        "fct-module": "Synthesizer.Filter.Fix",
        "fct-package": "synthesizer",
        "fct-signature": "T filter t a v -\u003e [Channel filter t a v]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Filter-Fix.html#fix",
        "fct-type": "unknown",
        "title": "fix"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Filter Fix",
        "module": "Synthesizer.Filter.Fix",
        "name": "fix",
        "normalized": "T a b c d-\u003e[Channel a b c d]",
        "package": "synthesizer",
        "partial": "",
        "signature": "T filter t a v-\u003e[Channel filter t a v]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Filter-Fix.html#v:toGraph",
      "description": {
        "fct-module": "Synthesizer.Filter.Fix",
        "fct-package": "synthesizer",
        "fct-signature": "T filter t a v -\u003e T filter Int t a v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Filter-Fix.html#toGraph",
        "fct-type": "unknown",
        "title": "toGraph"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Filter Fix",
        "module": "Synthesizer.Filter.Fix",
        "name": "toGraph",
        "normalized": "T a b c d-\u003eT a Int b c d",
        "package": "synthesizer",
        "partial": "Graph",
        "signature": "T filter t a v-\u003eT filter Int t a v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Filter-Graph.html#t:Signal",
      "description": {
        "fct-module": "Synthesizer.Filter.Graph",
        "fct-package": "synthesizer",
        "fct-signature": "newtype",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Filter-Graph.html#Signal",
        "fct-type": "unknown",
        "title": "Signal"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Filter Graph",
        "module": "Synthesizer.Filter.Graph",
        "name": "Signal",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Signal",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Filter-Graph.html#t:T",
      "description": {
        "fct-module": "Synthesizer.Filter.Graph",
        "fct-package": "synthesizer",
        "fct-signature": "newtype",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Filter-Graph.html#T",
        "fct-type": "unknown",
        "title": "T"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Filter Graph",
        "module": "Synthesizer.Filter.Graph",
        "name": "T",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Filter-Graph.html#v:apply",
      "description": {
        "fct-module": "Synthesizer.Filter.Graph",
        "fct-package": "synthesizer",
        "fct-signature": "T filter i t a v -\u003e Signal list i v -\u003e Signal list i v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Filter-Graph.html#apply",
        "fct-type": "unknown",
        "title": "apply"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Filter Graph",
        "module": "Synthesizer.Filter.Graph",
        "name": "apply",
        "normalized": "T a b c d e-\u003eSignal f b e-\u003eSignal f b e",
        "package": "synthesizer",
        "partial": "",
        "signature": "T filter i t a v-\u003eSignal list i v-\u003eSignal list i v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Filter-Graph.html#v:fromList",
      "description": {
        "fct-module": "Synthesizer.Filter.Graph",
        "fct-package": "synthesizer",
        "fct-signature": "[(i, [(i, filter t a v)])] -\u003e T filter i t a v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Filter-Graph.html#fromList",
        "fct-type": "unknown",
        "title": "fromList"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Filter Graph",
        "module": "Synthesizer.Filter.Graph",
        "name": "fromList",
        "normalized": "[(a,[(a,b c d e)])]-\u003eT b a c d e",
        "package": "synthesizer",
        "partial": "List",
        "signature": "[(i,[(i,filter t a v)])]-\u003eT filter i t a v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Filter-Graph.html#v:lookupSignal",
      "description": {
        "fct-module": "Synthesizer.Filter.Graph",
        "fct-package": "synthesizer",
        "fct-signature": "Signal list i v -\u003e i -\u003e Maybe (list v)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Filter-Graph.html#lookupSignal",
        "fct-type": "unknown",
        "title": "lookupSignal"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Filter Graph",
        "module": "Synthesizer.Filter.Graph",
        "name": "lookupSignal",
        "normalized": "Signal a b c-\u003eb-\u003eMaybe(a c)",
        "package": "synthesizer",
        "partial": "Signal",
        "signature": "Signal list i v-\u003ei-\u003eMaybe(list v)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Filter-Graph.html#v:signalFromList",
      "description": {
        "fct-module": "Synthesizer.Filter.Graph",
        "fct-package": "synthesizer",
        "fct-signature": "[(i, list v)] -\u003e Signal list i v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Filter-Graph.html#signalFromList",
        "fct-type": "unknown",
        "title": "signalFromList"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Filter Graph",
        "module": "Synthesizer.Filter.Graph",
        "name": "signalFromList",
        "normalized": "[(a,b c)]-\u003eSignal b a c",
        "package": "synthesizer",
        "partial": "From List",
        "signature": "[(i,list v)]-\u003eSignal list i v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Filter-Graph.html#v:signalToList",
      "description": {
        "fct-module": "Synthesizer.Filter.Graph",
        "fct-package": "synthesizer",
        "fct-signature": "Signal list i v -\u003e [(i, list v)]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Filter-Graph.html#signalToList",
        "fct-type": "unknown",
        "title": "signalToList"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Filter Graph",
        "module": "Synthesizer.Filter.Graph",
        "name": "signalToList",
        "normalized": "Signal a b c-\u003e[(b,a c)]",
        "package": "synthesizer",
        "partial": "To List",
        "signature": "Signal list i v-\u003e[(i,list v)]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Filter-Graph.html#v:toList",
      "description": {
        "fct-module": "Synthesizer.Filter.Graph",
        "fct-package": "synthesizer",
        "fct-signature": "T filter i t a v -\u003e [(i, [(i, filter t a v)])]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Filter-Graph.html#toList",
        "fct-type": "unknown",
        "title": "toList"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Filter Graph",
        "module": "Synthesizer.Filter.Graph",
        "name": "toList",
        "normalized": "T a b c d e-\u003e[(b,[(b,a c d e)])]",
        "package": "synthesizer",
        "partial": "List",
        "signature": "T filter i t a v-\u003e[(i,[(i,filter t a v)])]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Filter-Graph.html#v:transferFunction",
      "description": {
        "fct-descr": "\u003cp\u003eCompute a matrix that tells how an input frequency\n    is mapped to the various output nodes.\n\u003c/p\u003e\u003cp\u003eAccording to the formulation given above\n   we have to invert the matrix (I-A).\n\u003c/p\u003e\u003cp\u003eCurrently this is done by a QR decomposition for each frequency.\n   It would be probably faster if we decompose\n   the matrix containing polynomial elements.\n   Then the inverted matrix would consist of some\n   polynomial ratios which can be evaluated for each frequency.\n\u003c/p\u003e",
        "fct-module": "Synthesizer.Filter.Graph",
        "fct-package": "synthesizer",
        "fct-signature": "T filter i t a v -\u003e t -\u003e [[T t]]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Filter-Graph.html#transferFunction",
        "fct-type": "unknown",
        "title": "transferFunction"
      },
      "index": {
        "description": "Compute matrix that tells how an input frequency is mapped to the various output nodes According to the formulation given above we have to invert the matrix I-A Currently this is done by QR decomposition for each frequency It would be probably faster if we decompose the matrix containing polynomial elements Then the inverted matrix would consist of some polynomial ratios which can be evaluated for each frequency",
        "hierarchy": "Synthesizer Filter Graph",
        "module": "Synthesizer.Filter.Graph",
        "name": "transferFunction",
        "normalized": "T a b c d e-\u003ec-\u003e[[T c]]",
        "package": "synthesizer",
        "partial": "Function",
        "signature": "T filter i t a v-\u003et-\u003e[[T t]]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Filter-MonadFix.html#t:T",
      "description": {
        "fct-descr": "\u003cp\u003eIf you find Filter.Fix.T still inconvenient,\nand if you don't care about portability,\nyou can also use the following monad with the \u003ctt\u003emdo\u003c/tt\u003e notation.\n\u003c/p\u003e\u003cpre\u003e mdo\n   v \u003c- a(u + dw)\n   w \u003c- b(v + ey)\n   y \u003c- c w\n\u003c/pre\u003e",
        "fct-module": "Synthesizer.Filter.MonadFix",
        "fct-package": "synthesizer",
        "fct-signature": "type",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Filter-MonadFix.html#T",
        "fct-type": "unknown",
        "title": "T"
      },
      "index": {
        "description": "If you find Filter.Fix.T still inconvenient and if you don care about portability you can also use the following monad with the mdo notation mdo dw ey",
        "hierarchy": "Synthesizer Filter MonadFix",
        "module": "Synthesizer.Filter.MonadFix",
        "name": "T",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Filter-MonadFix.html#v:makeChannel",
      "description": {
        "fct-module": "Synthesizer.Filter.MonadFix",
        "fct-package": "synthesizer",
        "fct-signature": "[(ChannelId, filter t a v)] -\u003e T filter t a v ChannelId",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Filter-MonadFix.html#makeChannel",
        "fct-type": "unknown",
        "title": "makeChannel"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Filter MonadFix",
        "module": "Synthesizer.Filter.MonadFix",
        "name": "makeChannel",
        "normalized": "[(ChannelId,a b c d)]-\u003eT a b c d ChannelId",
        "package": "synthesizer",
        "partial": "Channel",
        "signature": "[(ChannelId,filter t a v)]-\u003eT filter t a v ChannelId"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Filter-MonadFix.html#v:run",
      "description": {
        "fct-module": "Synthesizer.Filter.MonadFix",
        "fct-package": "synthesizer",
        "fct-signature": "T filter t a v x -\u003e [Channel filter t a v]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Filter-MonadFix.html#run",
        "fct-type": "unknown",
        "title": "run"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Filter MonadFix",
        "module": "Synthesizer.Filter.MonadFix",
        "name": "run",
        "normalized": "T a b c d e-\u003e[Channel a b c d]",
        "package": "synthesizer",
        "partial": "",
        "signature": "T filter t a v x-\u003e[Channel filter t a v]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Filter-MonadFix.html#v:toGraph",
      "description": {
        "fct-module": "Synthesizer.Filter.MonadFix",
        "fct-package": "synthesizer",
        "fct-signature": "T filter t a v x -\u003e T filter Int t a v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Filter-MonadFix.html#toGraph",
        "fct-type": "unknown",
        "title": "toGraph"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Filter MonadFix",
        "module": "Synthesizer.Filter.MonadFix",
        "name": "toGraph",
        "normalized": "T a b c d e-\u003eT a Int b c d",
        "package": "synthesizer",
        "partial": "Graph",
        "signature": "T filter t a v x-\u003eT filter Int t a v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Filter-OneWay.html#t:Signal",
      "description": {
        "fct-module": "Synthesizer.Filter.OneWay",
        "fct-package": "synthesizer",
        "fct-signature": "type",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Filter-OneWay.html#Signal",
        "fct-type": "unknown",
        "title": "Signal"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Filter OneWay",
        "module": "Synthesizer.Filter.OneWay",
        "name": "Signal",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Signal",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Filter-OneWay.html#t:T",
      "description": {
        "fct-module": "Synthesizer.Filter.OneWay",
        "fct-package": "synthesizer",
        "fct-signature": "data",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Filter-OneWay.html#T",
        "fct-type": "unknown",
        "title": "T"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Filter OneWay",
        "module": "Synthesizer.Filter.OneWay",
        "name": "T",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Filter-OneWay.html#v:delay",
      "description": {
        "fct-descr": "shift signal in time \n",
        "fct-module": "Synthesizer.Filter.OneWay",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e Signal v -\u003e Signal v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Filter-OneWay.html#delay",
        "fct-type": "unknown",
        "title": "delay"
      },
      "index": {
        "description": "shift signal in time",
        "hierarchy": "Synthesizer Filter OneWay",
        "module": "Synthesizer.Filter.OneWay",
        "name": "delay",
        "normalized": "Int-\u003eSignal a-\u003eSignal a",
        "package": "synthesizer",
        "partial": "",
        "signature": "Int-\u003eSignal v-\u003eSignal v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Filter-OneWay.html#v:delayOnce",
      "description": {
        "fct-module": "Synthesizer.Filter.OneWay",
        "fct-package": "synthesizer",
        "fct-signature": "Signal v -\u003e Signal v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Filter-OneWay.html#delayOnce",
        "fct-type": "unknown",
        "title": "delayOnce"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Filter OneWay",
        "module": "Synthesizer.Filter.OneWay",
        "name": "delayOnce",
        "normalized": "Signal a-\u003eSignal a",
        "package": "synthesizer",
        "partial": "Once",
        "signature": "Signal v-\u003eSignal v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Filter-OneWay.html#v:nonRecursiveFilter",
      "description": {
        "fct-descr": "Unmodulated non-recursive filter \n",
        "fct-module": "Synthesizer.Filter.OneWay",
        "fct-package": "synthesizer",
        "fct-signature": "[a] -\u003e [v] -\u003e [v]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Filter-OneWay.html#nonRecursiveFilter",
        "fct-type": "unknown",
        "title": "nonRecursiveFilter"
      },
      "index": {
        "description": "Unmodulated non-recursive filter",
        "hierarchy": "Synthesizer Filter OneWay",
        "module": "Synthesizer.Filter.OneWay",
        "name": "nonRecursiveFilter",
        "normalized": "[a]-\u003e[b]-\u003e[b]",
        "package": "synthesizer",
        "partial": "Recursive Filter",
        "signature": "[a]-\u003e[v]-\u003e[v]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Filter-OneWay.html#v:nonRecursiveFilterMod",
      "description": {
        "fct-descr": "Modulated non-recursive filter. \n",
        "fct-module": "Synthesizer.Filter.OneWay",
        "fct-package": "synthesizer",
        "fct-signature": "[[a]] -\u003e [v] -\u003e [v]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Filter-OneWay.html#nonRecursiveFilterMod",
        "fct-type": "unknown",
        "title": "nonRecursiveFilterMod"
      },
      "index": {
        "description": "Modulated non-recursive filter",
        "hierarchy": "Synthesizer Filter OneWay",
        "module": "Synthesizer.Filter.OneWay",
        "name": "nonRecursiveFilterMod",
        "normalized": "[[a]]-\u003e[b]-\u003e[b]",
        "package": "synthesizer",
        "partial": "Recursive Filter Mod",
        "signature": "[[a]]-\u003e[v]-\u003e[v]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Filter-TwoWay.html#t:Signal",
      "description": {
        "fct-module": "Synthesizer.Filter.TwoWay",
        "fct-package": "synthesizer",
        "fct-signature": "data",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Filter-TwoWay.html#Signal",
        "fct-type": "unknown",
        "title": "Signal"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Filter TwoWay",
        "module": "Synthesizer.Filter.TwoWay",
        "name": "Signal",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Signal",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Filter-TwoWay.html#t:T",
      "description": {
        "fct-module": "Synthesizer.Filter.TwoWay",
        "fct-package": "synthesizer",
        "fct-signature": "data",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Filter-TwoWay.html#T",
        "fct-type": "unknown",
        "title": "T"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Filter TwoWay",
        "module": "Synthesizer.Filter.TwoWay",
        "name": "T",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Filter-TwoWay.html#v:delay",
      "description": {
        "fct-descr": "shift signal in time,\n    keep all values but if required pad with zeros \n",
        "fct-module": "Synthesizer.Filter.TwoWay",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e Signal v -\u003e Signal v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Filter-TwoWay.html#delay",
        "fct-type": "unknown",
        "title": "delay"
      },
      "index": {
        "description": "shift signal in time keep all values but if required pad with zeros",
        "hierarchy": "Synthesizer Filter TwoWay",
        "module": "Synthesizer.Filter.TwoWay",
        "name": "delay",
        "normalized": "Int-\u003eSignal a-\u003eSignal a",
        "package": "synthesizer",
        "partial": "",
        "signature": "Int-\u003eSignal v-\u003eSignal v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Filter-TwoWay.html#v:delayGen",
      "description": {
        "fct-descr": "General routine that supports delaying and prefetching\n    using a general one-sample delaying routine. \n",
        "fct-module": "Synthesizer.Filter.TwoWay",
        "fct-package": "synthesizer",
        "fct-signature": "(Signal v -\u003e Signal v) -\u003e Int -\u003e Signal v -\u003e Signal v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Filter-TwoWay.html#delayGen",
        "fct-type": "unknown",
        "title": "delayGen"
      },
      "index": {
        "description": "General routine that supports delaying and prefetching using general one-sample delaying routine",
        "hierarchy": "Synthesizer Filter TwoWay",
        "module": "Synthesizer.Filter.TwoWay",
        "name": "delayGen",
        "normalized": "(Signal a-\u003eSignal a)-\u003eInt-\u003eSignal a-\u003eSignal a",
        "package": "synthesizer",
        "partial": "Gen",
        "signature": "(Signal v-\u003eSignal v)-\u003eInt-\u003eSignal v-\u003eSignal v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Filter-TwoWay.html#v:delayOnce",
      "description": {
        "fct-descr": "Delay by one sample. \n",
        "fct-module": "Synthesizer.Filter.TwoWay",
        "fct-package": "synthesizer",
        "fct-signature": "Signal v -\u003e Signal v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Filter-TwoWay.html#delayOnce",
        "fct-type": "unknown",
        "title": "delayOnce"
      },
      "index": {
        "description": "Delay by one sample",
        "hierarchy": "Synthesizer Filter TwoWay",
        "module": "Synthesizer.Filter.TwoWay",
        "name": "delayOnce",
        "normalized": "Signal a-\u003eSignal a",
        "package": "synthesizer",
        "partial": "Once",
        "signature": "Signal v-\u003eSignal v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Filter-TwoWay.html#v:delayOpt",
      "description": {
        "fct-descr": "shift signal in time,\n    zero values at either ends will be flushed \n",
        "fct-module": "Synthesizer.Filter.TwoWay",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e Signal v -\u003e Signal v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Filter-TwoWay.html#delayOpt",
        "fct-type": "unknown",
        "title": "delayOpt"
      },
      "index": {
        "description": "shift signal in time zero values at either ends will be flushed",
        "hierarchy": "Synthesizer Filter TwoWay",
        "module": "Synthesizer.Filter.TwoWay",
        "name": "delayOpt",
        "normalized": "Int-\u003eSignal a-\u003eSignal a",
        "package": "synthesizer",
        "partial": "Opt",
        "signature": "Int-\u003eSignal v-\u003eSignal v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Filter-TwoWay.html#v:delayOptOnce",
      "description": {
        "fct-module": "Synthesizer.Filter.TwoWay",
        "fct-package": "synthesizer",
        "fct-signature": "Signal v -\u003e Signal v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Filter-TwoWay.html#delayOptOnce",
        "fct-type": "unknown",
        "title": "delayOptOnce"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Filter TwoWay",
        "module": "Synthesizer.Filter.TwoWay",
        "name": "delayOptOnce",
        "normalized": "Signal a-\u003eSignal a",
        "package": "synthesizer",
        "partial": "Opt Once",
        "signature": "Signal v-\u003eSignal v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Filter-TwoWay.html#v:delayPad",
      "description": {
        "fct-module": "Synthesizer.Filter.TwoWay",
        "fct-package": "synthesizer",
        "fct-signature": "v -\u003e Int -\u003e Signal v -\u003e Signal v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Filter-TwoWay.html#delayPad",
        "fct-type": "unknown",
        "title": "delayPad"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Filter TwoWay",
        "module": "Synthesizer.Filter.TwoWay",
        "name": "delayPad",
        "normalized": "a-\u003eInt-\u003eSignal a-\u003eSignal a",
        "package": "synthesizer",
        "partial": "Pad",
        "signature": "v-\u003eInt-\u003eSignal v-\u003eSignal v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Filter-TwoWay.html#v:delayPadOnce",
      "description": {
        "fct-module": "Synthesizer.Filter.TwoWay",
        "fct-package": "synthesizer",
        "fct-signature": "v -\u003e Signal v -\u003e Signal v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Filter-TwoWay.html#delayPadOnce",
        "fct-type": "unknown",
        "title": "delayPadOnce"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Filter TwoWay",
        "module": "Synthesizer.Filter.TwoWay",
        "name": "delayPadOnce",
        "normalized": "a-\u003eSignal a-\u003eSignal a",
        "package": "synthesizer",
        "partial": "Pad Once",
        "signature": "v-\u003eSignal v-\u003eSignal v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Filter-TwoWay.html#v:flipPair",
      "description": {
        "fct-descr": "for a Signal this means a reversion of the elements \n",
        "fct-module": "Synthesizer.Filter.TwoWay",
        "fct-package": "synthesizer",
        "fct-signature": "(a, b) -\u003e (b, a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Filter-TwoWay.html#flipPair",
        "fct-type": "unknown",
        "title": "flipPair"
      },
      "index": {
        "description": "for Signal this means reversion of the elements",
        "hierarchy": "Synthesizer Filter TwoWay",
        "module": "Synthesizer.Filter.TwoWay",
        "name": "flipPair",
        "normalized": "(a,b)-\u003e(b,a)",
        "package": "synthesizer",
        "partial": "Pair",
        "signature": "(a,b)-\u003e(b,a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Filter-TwoWay.html#v:interpolateCore",
      "description": {
        "fct-module": "Synthesizer.Filter.TwoWay",
        "fct-package": "synthesizer",
        "fct-signature": "T a b -\u003e a -\u003e Signal a -\u003e Signal b -\u003e Signal b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Filter-TwoWay.html#interpolateCore",
        "fct-type": "unknown",
        "title": "interpolateCore"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Filter TwoWay",
        "module": "Synthesizer.Filter.TwoWay",
        "name": "interpolateCore",
        "normalized": "T a b-\u003ea-\u003eSignal a-\u003eSignal b-\u003eSignal b",
        "package": "synthesizer",
        "partial": "Core",
        "signature": "T a b-\u003ea-\u003eSignal a-\u003eSignal b-\u003eSignal b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Filter-TwoWay.html#v:interpolateHalfWay",
      "description": {
        "fct-module": "Synthesizer.Filter.TwoWay",
        "fct-package": "synthesizer",
        "fct-signature": "T a b -\u003e a -\u003e [a] -\u003e Signal b -\u003e [b]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Filter-TwoWay.html#interpolateHalfWay",
        "fct-type": "unknown",
        "title": "interpolateHalfWay"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Filter TwoWay",
        "module": "Synthesizer.Filter.TwoWay",
        "name": "interpolateHalfWay",
        "normalized": "T a b-\u003ea-\u003e[a]-\u003eSignal b-\u003e[b]",
        "package": "synthesizer",
        "partial": "Half Way",
        "signature": "T a b-\u003ea-\u003e[a]-\u003eSignal b-\u003e[b]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Filter-TwoWay.html#v:interpolatePaddedCyclic",
      "description": {
        "fct-module": "Synthesizer.Filter.TwoWay",
        "fct-package": "synthesizer",
        "fct-signature": "T a b -\u003e a -\u003e Signal a -\u003e Signal b -\u003e Signal b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Filter-TwoWay.html#interpolatePaddedCyclic",
        "fct-type": "unknown",
        "title": "interpolatePaddedCyclic"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Filter TwoWay",
        "module": "Synthesizer.Filter.TwoWay",
        "name": "interpolatePaddedCyclic",
        "normalized": "T a b-\u003ea-\u003eSignal a-\u003eSignal b-\u003eSignal b",
        "package": "synthesizer",
        "partial": "Padded Cyclic",
        "signature": "T a b-\u003ea-\u003eSignal a-\u003eSignal b-\u003eSignal b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Filter-TwoWay.html#v:interpolatePaddedExtrapolation",
      "description": {
        "fct-module": "Synthesizer.Filter.TwoWay",
        "fct-package": "synthesizer",
        "fct-signature": "T a b -\u003e a -\u003e Signal a -\u003e Signal b -\u003e Signal b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Filter-TwoWay.html#interpolatePaddedExtrapolation",
        "fct-type": "unknown",
        "title": "interpolatePaddedExtrapolation"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Filter TwoWay",
        "module": "Synthesizer.Filter.TwoWay",
        "name": "interpolatePaddedExtrapolation",
        "normalized": "T a b-\u003ea-\u003eSignal a-\u003eSignal b-\u003eSignal b",
        "package": "synthesizer",
        "partial": "Padded Extrapolation",
        "signature": "T a b-\u003ea-\u003eSignal a-\u003eSignal b-\u003eSignal b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Filter-TwoWay.html#v:interpolatePaddedZero",
      "description": {
        "fct-descr": "Interpolation allowing negative frequencies,\n    but requires storage of all past values. \n",
        "fct-module": "Synthesizer.Filter.TwoWay",
        "fct-package": "synthesizer",
        "fct-signature": "b -\u003e T a b -\u003e a -\u003e Signal a -\u003e Signal b -\u003e Signal b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Filter-TwoWay.html#interpolatePaddedZero",
        "fct-type": "unknown",
        "title": "interpolatePaddedZero"
      },
      "index": {
        "description": "Interpolation allowing negative frequencies but requires storage of all past values",
        "hierarchy": "Synthesizer Filter TwoWay",
        "module": "Synthesizer.Filter.TwoWay",
        "name": "interpolatePaddedZero",
        "normalized": "a-\u003eT b a-\u003eb-\u003eSignal b-\u003eSignal a-\u003eSignal a",
        "package": "synthesizer",
        "partial": "Padded Zero",
        "signature": "b-\u003eT a b-\u003ea-\u003eSignal a-\u003eSignal b-\u003eSignal b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Filter-TwoWay.html#v:nonRecursiveFilter",
      "description": {
        "fct-descr": "Unmodulated non-recursive filter \n",
        "fct-module": "Synthesizer.Filter.TwoWay",
        "fct-package": "synthesizer",
        "fct-signature": "[a] -\u003e Signal v -\u003e Signal v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Filter-TwoWay.html#nonRecursiveFilter",
        "fct-type": "unknown",
        "title": "nonRecursiveFilter"
      },
      "index": {
        "description": "Unmodulated non-recursive filter",
        "hierarchy": "Synthesizer Filter TwoWay",
        "module": "Synthesizer.Filter.TwoWay",
        "name": "nonRecursiveFilter",
        "normalized": "[a]-\u003eSignal b-\u003eSignal b",
        "package": "synthesizer",
        "partial": "Recursive Filter",
        "signature": "[a]-\u003eSignal v-\u003eSignal v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Filter-TwoWay.html#v:nonRecursiveFilterMod",
      "description": {
        "fct-descr": "Modulated non-recursive filter.\n    The number of values before time 0 (past) or\n    the filter mask lengths must be at most finite. \n",
        "fct-module": "Synthesizer.Filter.TwoWay",
        "fct-package": "synthesizer",
        "fct-signature": "Signal [a] -\u003e Signal v -\u003e Signal v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Filter-TwoWay.html#nonRecursiveFilterMod",
        "fct-type": "unknown",
        "title": "nonRecursiveFilterMod"
      },
      "index": {
        "description": "Modulated non-recursive filter The number of values before time past or the filter mask lengths must be at most finite",
        "hierarchy": "Synthesizer Filter TwoWay",
        "module": "Synthesizer.Filter.TwoWay",
        "name": "nonRecursiveFilterMod",
        "normalized": "Signal[a]-\u003eSignal b-\u003eSignal b",
        "package": "synthesizer",
        "partial": "Recursive Filter Mod",
        "signature": "Signal[a]-\u003eSignal v-\u003eSignal v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Filter-TwoWay.html#v:ones",
      "description": {
        "fct-descr": "A signal that consists entirely of ones \n",
        "fct-module": "Synthesizer.Filter.TwoWay",
        "fct-package": "synthesizer",
        "fct-signature": "Signal a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Filter-TwoWay.html#ones",
        "fct-type": "unknown",
        "title": "ones"
      },
      "index": {
        "description": "signal that consists entirely of ones",
        "hierarchy": "Synthesizer Filter TwoWay",
        "module": "Synthesizer.Filter.TwoWay",
        "name": "ones",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Filter-TwoWay.html#v:origin",
      "description": {
        "fct-descr": "Take the value at time zero. \n",
        "fct-module": "Synthesizer.Filter.TwoWay",
        "fct-package": "synthesizer",
        "fct-signature": "Signal a -\u003e a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Filter-TwoWay.html#origin",
        "fct-type": "unknown",
        "title": "origin"
      },
      "index": {
        "description": "Take the value at time zero",
        "hierarchy": "Synthesizer Filter TwoWay",
        "module": "Synthesizer.Filter.TwoWay",
        "name": "origin",
        "normalized": "Signal a-\u003ea",
        "package": "synthesizer",
        "partial": "",
        "signature": "Signal a-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Filter-TwoWay.html#v:reverseTwoWay",
      "description": {
        "fct-module": "Synthesizer.Filter.TwoWay",
        "fct-package": "synthesizer",
        "fct-signature": "Signal v -\u003e Signal v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Filter-TwoWay.html#reverseTwoWay",
        "fct-type": "unknown",
        "title": "reverseTwoWay"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Filter TwoWay",
        "module": "Synthesizer.Filter.TwoWay",
        "name": "reverseTwoWay",
        "normalized": "Signal a-\u003eSignal a",
        "package": "synthesizer",
        "partial": "Two Way",
        "signature": "Signal v-\u003eSignal v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Filter-TwoWay.html#v:take",
      "description": {
        "fct-descr": "Take n values starting from time zero.\n    If you want clips from elsewhere,\n    call \u003ctt\u003e\u003ca\u003etake\u003c/a\u003e\u003c/tt\u003e after \u003ctt\u003e\u003ca\u003edelay\u003c/a\u003e\u003c/tt\u003e. \n",
        "fct-module": "Synthesizer.Filter.TwoWay",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e Signal v -\u003e [v]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Filter-TwoWay.html#take",
        "fct-type": "unknown",
        "title": "take"
      },
      "index": {
        "description": "Take values starting from time zero If you want clips from elsewhere call take after delay",
        "hierarchy": "Synthesizer Filter TwoWay",
        "module": "Synthesizer.Filter.TwoWay",
        "name": "take",
        "normalized": "Int-\u003eSignal a-\u003e[a]",
        "package": "synthesizer",
        "partial": "",
        "signature": "Int-\u003eSignal v-\u003e[v]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Filter-TwoWay.html#v:testDelayGen",
      "description": {
        "fct-module": "Synthesizer.Filter.TwoWay",
        "fct-package": "synthesizer",
        "fct-signature": "Signal Double",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Filter-TwoWay.html#testDelayGen",
        "fct-type": "unknown",
        "title": "testDelayGen"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Filter TwoWay",
        "module": "Synthesizer.Filter.TwoWay",
        "name": "testDelayGen",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Delay Gen",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Filter-TwoWay.html#v:zipSignalWith",
      "description": {
        "fct-module": "Synthesizer.Filter.TwoWay",
        "fct-package": "synthesizer",
        "fct-signature": "(a -\u003e b -\u003e c) -\u003e Signal a -\u003e Signal b -\u003e Signal c",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Filter-TwoWay.html#zipSignalWith",
        "fct-type": "unknown",
        "title": "zipSignalWith"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Filter TwoWay",
        "module": "Synthesizer.Filter.TwoWay",
        "name": "zipSignalWith",
        "normalized": "(a-\u003eb-\u003ec)-\u003eSignal a-\u003eSignal b-\u003eSignal c",
        "package": "synthesizer",
        "partial": "Signal With",
        "signature": "(a-\u003eb-\u003ec)-\u003eSignal a-\u003eSignal b-\u003eSignal c"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Format.html#v:C",
      "description": {
        "fct-module": "Synthesizer.Format",
        "fct-package": "synthesizer",
        "fct-signature": "class",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Format.html#C",
        "fct-type": "unknown",
        "title": "C"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Format",
        "module": "Synthesizer.Format",
        "name": "C",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Format.html#v:format",
      "description": {
        "fct-module": "Synthesizer.Format",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e sig x -\u003e ShowS",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Format.html#format",
        "fct-type": "unknown",
        "title": "format"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Format",
        "module": "Synthesizer.Format",
        "name": "format",
        "normalized": "Int-\u003ea b-\u003eShowS",
        "package": "synthesizer",
        "partial": "",
        "signature": "Int-\u003esig x-\u003eShowS"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Frame-Stereo.html#t:T",
      "description": {
        "fct-module": "Synthesizer.Frame.Stereo",
        "fct-package": "synthesizer",
        "fct-signature": "data",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Frame-Stereo.html#T",
        "fct-type": "unknown",
        "title": "T"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Frame Stereo",
        "module": "Synthesizer.Frame.Stereo",
        "name": "T",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Frame-Stereo.html#v:cons",
      "description": {
        "fct-module": "Synthesizer.Frame.Stereo",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Frame-Stereo.html#cons",
        "fct-type": "unknown",
        "title": "cons"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Frame Stereo",
        "module": "Synthesizer.Frame.Stereo",
        "name": "cons",
        "normalized": "a-\u003ea-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "a-\u003ea-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Frame-Stereo.html#v:left",
      "description": {
        "fct-module": "Synthesizer.Frame.Stereo",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Frame-Stereo.html#left",
        "fct-type": "unknown",
        "title": "left"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Frame Stereo",
        "module": "Synthesizer.Frame.Stereo",
        "name": "left",
        "normalized": "T a-\u003ea",
        "package": "synthesizer",
        "partial": "",
        "signature": "T a-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Frame-Stereo.html#v:map",
      "description": {
        "fct-module": "Synthesizer.Frame.Stereo",
        "fct-package": "synthesizer",
        "fct-signature": "(a -\u003e b) -\u003e T a -\u003e T b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Frame-Stereo.html#map",
        "fct-type": "unknown",
        "title": "map"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Frame Stereo",
        "module": "Synthesizer.Frame.Stereo",
        "name": "map",
        "normalized": "(a-\u003eb)-\u003eT a-\u003eT b",
        "package": "synthesizer",
        "partial": "",
        "signature": "(a-\u003eb)-\u003eT a-\u003eT b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Frame-Stereo.html#v:right",
      "description": {
        "fct-module": "Synthesizer.Frame.Stereo",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Frame-Stereo.html#right",
        "fct-type": "unknown",
        "title": "right"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Frame Stereo",
        "module": "Synthesizer.Frame.Stereo",
        "name": "right",
        "normalized": "T a-\u003ea",
        "package": "synthesizer",
        "partial": "",
        "signature": "T a-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Control.html#t:Piece",
      "description": {
        "fct-module": "Synthesizer.FusionList.Control",
        "fct-package": "synthesizer",
        "fct-signature": "type",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Control.html#Piece",
        "fct-type": "unknown",
        "title": "Piece"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Control",
        "module": "Synthesizer.FusionList.Control",
        "name": "Piece",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Piece",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Control.html#v:constant",
      "description": {
        "fct-module": "Synthesizer.FusionList.Control",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Control.html#constant",
        "fct-type": "unknown",
        "title": "constant"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Control",
        "module": "Synthesizer.FusionList.Control",
        "name": "constant",
        "normalized": "a-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Control.html#v:cosine",
      "description": {
        "fct-descr": "time t0 where  1 is approached \ntime t1 where -1 is approached \na cosine wave where one half wave is between t0 and t1 \n",
        "fct-module": "Synthesizer.FusionList.Control",
        "fct-package": "synthesizer",
        "fct-signature": "a-\u003e a-\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Control.html#cosine",
        "fct-type": "unknown",
        "title": "cosine"
      },
      "index": {
        "description": "time t0 where is approached time t1 where is approached cosine wave where one half wave is between t0 and t1",
        "hierarchy": "Synthesizer FusionList Control",
        "module": "Synthesizer.FusionList.Control",
        "name": "cosine",
        "normalized": "a-\u003ea-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "a-\u003ea-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Control.html#v:cosinePiece",
      "description": {
        "fct-module": "Synthesizer.FusionList.Control",
        "fct-package": "synthesizer",
        "fct-signature": "Piece a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Control.html#cosinePiece",
        "fct-type": "unknown",
        "title": "cosinePiece"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Control",
        "module": "Synthesizer.FusionList.Control",
        "name": "cosinePiece",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Piece",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Control.html#v:cubicHermite",
      "description": {
        "fct-module": "Synthesizer.FusionList.Control",
        "fct-package": "synthesizer",
        "fct-signature": "(a, (a, a)) -\u003e (a, (a, a)) -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Control.html#cubicHermite",
        "fct-type": "unknown",
        "title": "cubicHermite"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Control",
        "module": "Synthesizer.FusionList.Control",
        "name": "cubicHermite",
        "normalized": "(a,(a,a))-\u003e(a,(a,a))-\u003eT a",
        "package": "synthesizer",
        "partial": "Hermite",
        "signature": "(a,(a,a))-\u003e(a,(a,a))-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Control.html#v:cubicPiece",
      "description": {
        "fct-module": "Synthesizer.FusionList.Control",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e a -\u003e Piece a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Control.html#cubicPiece",
        "fct-type": "unknown",
        "title": "cubicPiece"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Control",
        "module": "Synthesizer.FusionList.Control",
        "name": "cubicPiece",
        "normalized": "a-\u003ea-\u003ePiece a",
        "package": "synthesizer",
        "partial": "Piece",
        "signature": "a-\u003ea-\u003ePiece a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Control.html#v:curveMultiscale",
      "description": {
        "fct-module": "Synthesizer.FusionList.Control",
        "fct-package": "synthesizer",
        "fct-signature": "(y -\u003e y -\u003e y) -\u003e y -\u003e y -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Control.html#curveMultiscale",
        "fct-type": "unknown",
        "title": "curveMultiscale"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Control",
        "module": "Synthesizer.FusionList.Control",
        "name": "curveMultiscale",
        "normalized": "(a-\u003ea-\u003ea)-\u003ea-\u003ea-\u003eT a",
        "package": "synthesizer",
        "partial": "Multiscale",
        "signature": "(y-\u003ey-\u003ey)-\u003ey-\u003ey-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Control.html#v:curveMultiscaleNeutral",
      "description": {
        "fct-module": "Synthesizer.FusionList.Control",
        "fct-package": "synthesizer",
        "fct-signature": "(y -\u003e y -\u003e y) -\u003e y -\u003e y -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Control.html#curveMultiscaleNeutral",
        "fct-type": "unknown",
        "title": "curveMultiscaleNeutral"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Control",
        "module": "Synthesizer.FusionList.Control",
        "name": "curveMultiscaleNeutral",
        "normalized": "(a-\u003ea-\u003ea)-\u003ea-\u003ea-\u003eT a",
        "package": "synthesizer",
        "partial": "Multiscale Neutral",
        "signature": "(y-\u003ey-\u003ey)-\u003ey-\u003ey-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Control.html#v:exponential",
      "description": {
        "fct-descr": "time where the function reaches 1/e of the initial value \ninitial value \nexponential decay \n",
        "fct-module": "Synthesizer.FusionList.Control",
        "fct-package": "synthesizer",
        "fct-signature": "a-\u003e a-\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Control.html#exponential",
        "fct-type": "unknown",
        "title": "exponential"
      },
      "index": {
        "description": "time where the function reaches of the initial value initial value exponential decay",
        "hierarchy": "Synthesizer FusionList Control",
        "module": "Synthesizer.FusionList.Control",
        "name": "exponential",
        "normalized": "a-\u003ea-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "a-\u003ea-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Control.html#v:exponential2",
      "description": {
        "fct-descr": "half life \ninitial value \nexponential decay \n",
        "fct-module": "Synthesizer.FusionList.Control",
        "fct-package": "synthesizer",
        "fct-signature": "a-\u003e a-\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Control.html#exponential2",
        "fct-type": "unknown",
        "title": "exponential2"
      },
      "index": {
        "description": "half life initial value exponential decay",
        "hierarchy": "Synthesizer FusionList Control",
        "module": "Synthesizer.FusionList.Control",
        "name": "exponential2",
        "normalized": "a-\u003ea-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "a-\u003ea-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Control.html#v:exponential2Multiscale",
      "description": {
        "fct-descr": "half life \ninitial value \nexponential decay \n",
        "fct-module": "Synthesizer.FusionList.Control",
        "fct-package": "synthesizer",
        "fct-signature": "a-\u003e a-\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Control.html#exponential2Multiscale",
        "fct-type": "unknown",
        "title": "exponential2Multiscale"
      },
      "index": {
        "description": "half life initial value exponential decay",
        "hierarchy": "Synthesizer FusionList Control",
        "module": "Synthesizer.FusionList.Control",
        "name": "exponential2Multiscale",
        "normalized": "a-\u003ea-\u003eT a",
        "package": "synthesizer",
        "partial": "Multiscale",
        "signature": "a-\u003ea-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Control.html#v:exponential2MultiscaleNeutral",
      "description": {
        "fct-descr": "half life \nexponential decay \n",
        "fct-module": "Synthesizer.FusionList.Control",
        "fct-package": "synthesizer",
        "fct-signature": "y-\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Control.html#exponential2MultiscaleNeutral",
        "fct-type": "unknown",
        "title": "exponential2MultiscaleNeutral"
      },
      "index": {
        "description": "half life exponential decay",
        "hierarchy": "Synthesizer FusionList Control",
        "module": "Synthesizer.FusionList.Control",
        "name": "exponential2MultiscaleNeutral",
        "normalized": "a-\u003eT a",
        "package": "synthesizer",
        "partial": "Multiscale Neutral",
        "signature": "y-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Control.html#v:exponentialFromTo",
      "description": {
        "fct-descr": "time where the function reaches 1/e of the initial value \ninitial value \nvalue after given time \nexponential decay \n",
        "fct-module": "Synthesizer.FusionList.Control",
        "fct-package": "synthesizer",
        "fct-signature": "y-\u003e y-\u003e y-\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Control.html#exponentialFromTo",
        "fct-type": "unknown",
        "title": "exponentialFromTo"
      },
      "index": {
        "description": "time where the function reaches of the initial value initial value value after given time exponential decay",
        "hierarchy": "Synthesizer FusionList Control",
        "module": "Synthesizer.FusionList.Control",
        "name": "exponentialFromTo",
        "normalized": "a-\u003ea-\u003ea-\u003eT a",
        "package": "synthesizer",
        "partial": "From To",
        "signature": "y-\u003ey-\u003ey-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Control.html#v:exponentialFromToMultiscale",
      "description": {
        "fct-descr": "time where the function reaches 1/e of the initial value \ninitial value \nvalue after given time \nexponential decay \n",
        "fct-module": "Synthesizer.FusionList.Control",
        "fct-package": "synthesizer",
        "fct-signature": "y-\u003e y-\u003e y-\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Control.html#exponentialFromToMultiscale",
        "fct-type": "unknown",
        "title": "exponentialFromToMultiscale"
      },
      "index": {
        "description": "time where the function reaches of the initial value initial value value after given time exponential decay",
        "hierarchy": "Synthesizer FusionList Control",
        "module": "Synthesizer.FusionList.Control",
        "name": "exponentialFromToMultiscale",
        "normalized": "a-\u003ea-\u003ea-\u003eT a",
        "package": "synthesizer",
        "partial": "From To Multiscale",
        "signature": "y-\u003ey-\u003ey-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Control.html#v:exponentialMultiscale",
      "description": {
        "fct-descr": "time where the function reaches 1/e of the initial value \ninitial value \nexponential decay \n",
        "fct-module": "Synthesizer.FusionList.Control",
        "fct-package": "synthesizer",
        "fct-signature": "a-\u003e a-\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Control.html#exponentialMultiscale",
        "fct-type": "unknown",
        "title": "exponentialMultiscale"
      },
      "index": {
        "description": "time where the function reaches of the initial value initial value exponential decay",
        "hierarchy": "Synthesizer FusionList Control",
        "module": "Synthesizer.FusionList.Control",
        "name": "exponentialMultiscale",
        "normalized": "a-\u003ea-\u003eT a",
        "package": "synthesizer",
        "partial": "Multiscale",
        "signature": "a-\u003ea-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Control.html#v:exponentialMultiscaleNeutral",
      "description": {
        "fct-descr": "time where the function reaches 1/e of the initial value \nexponential decay \n",
        "fct-module": "Synthesizer.FusionList.Control",
        "fct-package": "synthesizer",
        "fct-signature": "y-\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Control.html#exponentialMultiscaleNeutral",
        "fct-type": "unknown",
        "title": "exponentialMultiscaleNeutral"
      },
      "index": {
        "description": "time where the function reaches of the initial value exponential decay",
        "hierarchy": "Synthesizer FusionList Control",
        "module": "Synthesizer.FusionList.Control",
        "name": "exponentialMultiscaleNeutral",
        "normalized": "a-\u003eT a",
        "package": "synthesizer",
        "partial": "Multiscale Neutral",
        "signature": "y-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Control.html#v:exponentialPiece",
      "description": {
        "fct-module": "Synthesizer.FusionList.Control",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e Piece a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Control.html#exponentialPiece",
        "fct-type": "unknown",
        "title": "exponentialPiece"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Control",
        "module": "Synthesizer.FusionList.Control",
        "name": "exponentialPiece",
        "normalized": "a-\u003ePiece a",
        "package": "synthesizer",
        "partial": "Piece",
        "signature": "a-\u003ePiece a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Control.html#v:linear",
      "description": {
        "fct-descr": "steepness \ninitial value \nlinear progression \n",
        "fct-module": "Synthesizer.FusionList.Control",
        "fct-package": "synthesizer",
        "fct-signature": "a-\u003e a-\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Control.html#linear",
        "fct-type": "unknown",
        "title": "linear"
      },
      "index": {
        "description": "steepness initial value linear progression",
        "hierarchy": "Synthesizer FusionList Control",
        "module": "Synthesizer.FusionList.Control",
        "name": "linear",
        "normalized": "a-\u003ea-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "a-\u003ea-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Control.html#v:linearMultiscale",
      "description": {
        "fct-descr": "As stable as the addition of time values.\n",
        "fct-module": "Synthesizer.FusionList.Control",
        "fct-package": "synthesizer",
        "fct-signature": "y -\u003e y -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Control.html#linearMultiscale",
        "fct-type": "unknown",
        "title": "linearMultiscale"
      },
      "index": {
        "description": "As stable as the addition of time values",
        "hierarchy": "Synthesizer FusionList Control",
        "module": "Synthesizer.FusionList.Control",
        "name": "linearMultiscale",
        "normalized": "a-\u003ea-\u003eT a",
        "package": "synthesizer",
        "partial": "Multiscale",
        "signature": "y-\u003ey-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Control.html#v:linearMultiscaleNeutral",
      "description": {
        "fct-descr": "Linear curve starting at zero.\n",
        "fct-module": "Synthesizer.FusionList.Control",
        "fct-package": "synthesizer",
        "fct-signature": "y -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Control.html#linearMultiscaleNeutral",
        "fct-type": "unknown",
        "title": "linearMultiscaleNeutral"
      },
      "index": {
        "description": "Linear curve starting at zero",
        "hierarchy": "Synthesizer FusionList Control",
        "module": "Synthesizer.FusionList.Control",
        "name": "linearMultiscaleNeutral",
        "normalized": "a-\u003eT a",
        "package": "synthesizer",
        "partial": "Multiscale Neutral",
        "signature": "y-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Control.html#v:linearPiece",
      "description": {
        "fct-module": "Synthesizer.FusionList.Control",
        "fct-package": "synthesizer",
        "fct-signature": "Piece a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Control.html#linearPiece",
        "fct-type": "unknown",
        "title": "linearPiece"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Control",
        "module": "Synthesizer.FusionList.Control",
        "name": "linearPiece",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Piece",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Control.html#v:piecewise",
      "description": {
        "fct-module": "Synthesizer.FusionList.Control",
        "fct-package": "synthesizer",
        "fct-signature": "T a a (a -\u003e T a) -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Control.html#piecewise",
        "fct-type": "unknown",
        "title": "piecewise"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Control",
        "module": "Synthesizer.FusionList.Control",
        "name": "piecewise",
        "normalized": "T a a(a-\u003eT a)-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "T a a(a-\u003eT a)-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Control.html#v:raise",
      "description": {
        "fct-module": "Synthesizer.FusionList.Control",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Control.html#raise",
        "fct-type": "unknown",
        "title": "raise"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Control",
        "module": "Synthesizer.FusionList.Control",
        "name": "raise",
        "normalized": "a-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "a-\u003eT a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Control.html#v:splitDurations",
      "description": {
        "fct-module": "Synthesizer.FusionList.Control",
        "fct-package": "synthesizer",
        "fct-signature": "[t] -\u003e [(Int, t)]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Control.html#splitDurations",
        "fct-type": "unknown",
        "title": "splitDurations"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Control",
        "module": "Synthesizer.FusionList.Control",
        "name": "splitDurations",
        "normalized": "[a]-\u003e[(Int,a)]",
        "package": "synthesizer",
        "partial": "Durations",
        "signature": "[t]-\u003e[(Int,t)]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Control.html#v:stepPiece",
      "description": {
        "fct-module": "Synthesizer.FusionList.Control",
        "fct-package": "synthesizer",
        "fct-signature": "Piece a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Control.html#stepPiece",
        "fct-type": "unknown",
        "title": "stepPiece"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Control",
        "module": "Synthesizer.FusionList.Control",
        "name": "stepPiece",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Piece",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Control.html#v:vectorExponential",
      "description": {
        "fct-descr": "time where the function reaches 1/e of the initial value \ninitial value \nexponential decay \n",
        "fct-module": "Synthesizer.FusionList.Control",
        "fct-package": "synthesizer",
        "fct-signature": "a-\u003e v-\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Control.html#vectorExponential",
        "fct-type": "unknown",
        "title": "vectorExponential"
      },
      "index": {
        "description": "time where the function reaches of the initial value initial value exponential decay",
        "hierarchy": "Synthesizer FusionList Control",
        "module": "Synthesizer.FusionList.Control",
        "name": "vectorExponential",
        "normalized": "a-\u003eb-\u003eT b",
        "package": "synthesizer",
        "partial": "Exponential",
        "signature": "a-\u003ev-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Control.html#v:vectorExponential2",
      "description": {
        "fct-descr": "half life \ninitial value \nexponential decay \n",
        "fct-module": "Synthesizer.FusionList.Control",
        "fct-package": "synthesizer",
        "fct-signature": "a-\u003e v-\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Control.html#vectorExponential2",
        "fct-type": "unknown",
        "title": "vectorExponential2"
      },
      "index": {
        "description": "half life initial value exponential decay",
        "hierarchy": "Synthesizer FusionList Control",
        "module": "Synthesizer.FusionList.Control",
        "name": "vectorExponential2",
        "normalized": "a-\u003eb-\u003eT b",
        "package": "synthesizer",
        "partial": "Exponential",
        "signature": "a-\u003ev-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Filter-NonRecursive.html#v:amplify",
      "description": {
        "fct-module": "Synthesizer.FusionList.Filter.NonRecursive",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Filter-NonRecursive.html#amplify",
        "fct-type": "unknown",
        "title": "amplify"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Filter NonRecursive",
        "module": "Synthesizer.FusionList.Filter.NonRecursive",
        "name": "amplify",
        "normalized": "a-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "a-\u003eT a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Filter-NonRecursive.html#v:amplifyVector",
      "description": {
        "fct-module": "Synthesizer.FusionList.Filter.NonRecursive",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Filter-NonRecursive.html#amplifyVector",
        "fct-type": "unknown",
        "title": "amplifyVector"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Filter NonRecursive",
        "module": "Synthesizer.FusionList.Filter.NonRecursive",
        "name": "amplifyVector",
        "normalized": "a-\u003eT b-\u003eT b",
        "package": "synthesizer",
        "partial": "Vector",
        "signature": "a-\u003eT v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Filter-NonRecursive.html#v:binomial",
      "description": {
        "fct-module": "Synthesizer.FusionList.Filter.NonRecursive",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e a -\u003e T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Filter-NonRecursive.html#binomial",
        "fct-type": "unknown",
        "title": "binomial"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Filter NonRecursive",
        "module": "Synthesizer.FusionList.Filter.NonRecursive",
        "name": "binomial",
        "normalized": "a-\u003ea-\u003eT b-\u003eT b",
        "package": "synthesizer",
        "partial": "",
        "signature": "a-\u003ea-\u003eT v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Filter-NonRecursive.html#v:binomial1",
      "description": {
        "fct-module": "Synthesizer.FusionList.Filter.NonRecursive",
        "fct-package": "synthesizer",
        "fct-signature": "T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Filter-NonRecursive.html#binomial1",
        "fct-type": "unknown",
        "title": "binomial1"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Filter NonRecursive",
        "module": "Synthesizer.FusionList.Filter.NonRecursive",
        "name": "binomial1",
        "normalized": "T a-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "T v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Filter-NonRecursive.html#v:delay",
      "description": {
        "fct-module": "Synthesizer.FusionList.Filter.NonRecursive",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e T y -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Filter-NonRecursive.html#delay",
        "fct-type": "unknown",
        "title": "delay"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Filter NonRecursive",
        "module": "Synthesizer.FusionList.Filter.NonRecursive",
        "name": "delay",
        "normalized": "Int-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "Int-\u003eT y-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Filter-NonRecursive.html#v:delayPad",
      "description": {
        "fct-module": "Synthesizer.FusionList.Filter.NonRecursive",
        "fct-package": "synthesizer",
        "fct-signature": "y -\u003e Int -\u003e T y -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Filter-NonRecursive.html#delayPad",
        "fct-type": "unknown",
        "title": "delayPad"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Filter NonRecursive",
        "module": "Synthesizer.FusionList.Filter.NonRecursive",
        "name": "delayPad",
        "normalized": "a-\u003eInt-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "Pad",
        "signature": "y-\u003eInt-\u003eT y-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Filter-NonRecursive.html#v:differentiate",
      "description": {
        "fct-descr": "Forward difference quotient.\nShortens the signal by one.\nInverts Synthesizer.Plain.Filter.Recursive.Integration.run in the sense that\n\u003ctt\u003edifferentiate (zero : integrate x) == x\u003c/tt\u003e.\nThe signal is shifted by a half time unit.\n",
        "fct-module": "Synthesizer.FusionList.Filter.NonRecursive",
        "fct-package": "synthesizer",
        "fct-signature": "T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Filter-NonRecursive.html#differentiate",
        "fct-type": "unknown",
        "title": "differentiate"
      },
      "index": {
        "description": "Forward difference quotient Shortens the signal by one Inverts Synthesizer.Plain.Filter.Recursive.Integration.run in the sense that differentiate zero integrate The signal is shifted by half time unit",
        "hierarchy": "Synthesizer FusionList Filter NonRecursive",
        "module": "Synthesizer.FusionList.Filter.NonRecursive",
        "name": "differentiate",
        "normalized": "T a-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "T v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Filter-NonRecursive.html#v:differentiate2",
      "description": {
        "fct-descr": "Second derivative.\nIt is \u003ctt\u003edifferentiate2 == differentiate . differentiate\u003c/tt\u003e\nbut \u003ctt\u003e\u003ca\u003edifferentiate2\u003c/a\u003e\u003c/tt\u003e should be faster.\n",
        "fct-module": "Synthesizer.FusionList.Filter.NonRecursive",
        "fct-package": "synthesizer",
        "fct-signature": "T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Filter-NonRecursive.html#differentiate2",
        "fct-type": "unknown",
        "title": "differentiate2"
      },
      "index": {
        "description": "Second derivative It is differentiate2 differentiate differentiate but differentiate2 should be faster",
        "hierarchy": "Synthesizer FusionList Filter NonRecursive",
        "module": "Synthesizer.FusionList.Filter.NonRecursive",
        "name": "differentiate2",
        "normalized": "T a-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "T v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Filter-NonRecursive.html#v:differentiateCenter",
      "description": {
        "fct-descr": "\u003cp\u003eCentral difference quotient.\nShortens the signal by two elements,\nand shifts the signal by one element.\n(Which can be fixed by prepending an appropriate value.)\nFor linear functions this will yield\nessentially the same result as \u003ctt\u003e\u003ca\u003edifferentiate\u003c/a\u003e\u003c/tt\u003e.\nYou obtain the result of \u003ctt\u003e\u003ca\u003edifferentiateCenter\u003c/a\u003e\u003c/tt\u003e\nif you smooth the one of \u003ctt\u003e\u003ca\u003edifferentiate\u003c/a\u003e\u003c/tt\u003e\nby averaging pairs of adjacent values.\n\u003c/p\u003e\u003cp\u003eToDo: Vector variant\n\u003c/p\u003e",
        "fct-module": "Synthesizer.FusionList.Filter.NonRecursive",
        "fct-package": "synthesizer",
        "fct-signature": "T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Filter-NonRecursive.html#differentiateCenter",
        "fct-type": "unknown",
        "title": "differentiateCenter"
      },
      "index": {
        "description": "Central difference quotient Shortens the signal by two elements and shifts the signal by one element Which can be fixed by prepending an appropriate value For linear functions this will yield essentially the same result as differentiate You obtain the result of differentiateCenter if you smooth the one of differentiate by averaging pairs of adjacent values ToDo Vector variant",
        "hierarchy": "Synthesizer FusionList Filter NonRecursive",
        "module": "Synthesizer.FusionList.Filter.NonRecursive",
        "name": "differentiateCenter",
        "normalized": "T a-\u003eT a",
        "package": "synthesizer",
        "partial": "Center",
        "signature": "T v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Filter-NonRecursive.html#v:envelope",
      "description": {
        "fct-descr": "the envelope \nthe signal to be enveloped \n",
        "fct-module": "Synthesizer.FusionList.Filter.NonRecursive",
        "fct-package": "synthesizer",
        "fct-signature": "T a-\u003e T a-\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Filter-NonRecursive.html#envelope",
        "fct-type": "unknown",
        "title": "envelope"
      },
      "index": {
        "description": "the envelope the signal to be enveloped",
        "hierarchy": "Synthesizer FusionList Filter NonRecursive",
        "module": "Synthesizer.FusionList.Filter.NonRecursive",
        "name": "envelope",
        "normalized": "T a-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "T a-\u003eT a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Filter-NonRecursive.html#v:envelopeVector",
      "description": {
        "fct-descr": "the envelope \nthe signal to be enveloped \n",
        "fct-module": "Synthesizer.FusionList.Filter.NonRecursive",
        "fct-package": "synthesizer",
        "fct-signature": "T a-\u003e T v-\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Filter-NonRecursive.html#envelopeVector",
        "fct-type": "unknown",
        "title": "envelopeVector"
      },
      "index": {
        "description": "the envelope the signal to be enveloped",
        "hierarchy": "Synthesizer FusionList Filter NonRecursive",
        "module": "Synthesizer.FusionList.Filter.NonRecursive",
        "name": "envelopeVector",
        "normalized": "T a-\u003eT b-\u003eT b",
        "package": "synthesizer",
        "partial": "Vector",
        "signature": "T a-\u003eT v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Filter-NonRecursive.html#v:fadeInOut",
      "description": {
        "fct-module": "Synthesizer.FusionList.Filter.NonRecursive",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e Int -\u003e Int -\u003e T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Filter-NonRecursive.html#fadeInOut",
        "fct-type": "unknown",
        "title": "fadeInOut"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Filter NonRecursive",
        "module": "Synthesizer.FusionList.Filter.NonRecursive",
        "name": "fadeInOut",
        "normalized": "Int-\u003eInt-\u003eInt-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "In Out",
        "signature": "Int-\u003eInt-\u003eInt-\u003eT a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Filter-NonRecursive.html#v:fadeInOutStored",
      "description": {
        "fct-module": "Synthesizer.FusionList.Filter.NonRecursive",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e Int -\u003e Int -\u003e T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Filter-NonRecursive.html#fadeInOutStored",
        "fct-type": "unknown",
        "title": "fadeInOutStored"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Filter NonRecursive",
        "module": "Synthesizer.FusionList.Filter.NonRecursive",
        "name": "fadeInOutStored",
        "normalized": "Int-\u003eInt-\u003eInt-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "In Out Stored",
        "signature": "Int-\u003eInt-\u003eInt-\u003eT a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Filter-NonRecursive.html#v:generic",
      "description": {
        "fct-descr": "Unmodulated non-recursive filter \n",
        "fct-module": "Synthesizer.FusionList.Filter.NonRecursive",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Filter-NonRecursive.html#generic",
        "fct-type": "unknown",
        "title": "generic"
      },
      "index": {
        "description": "Unmodulated non-recursive filter",
        "hierarchy": "Synthesizer FusionList Filter NonRecursive",
        "module": "Synthesizer.FusionList.Filter.NonRecursive",
        "name": "generic",
        "normalized": "T a-\u003eT b-\u003eT b",
        "package": "synthesizer",
        "partial": "",
        "signature": "T a-\u003eT v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Filter-NonRecursive.html#v:ratioFreqToVariance",
      "description": {
        "fct-descr": "Compute the variance of the Gaussian\n  such that its Fourier transform has value \u003ctt\u003eratio\u003c/tt\u003e at frequency \u003ctt\u003efreq\u003c/tt\u003e.\n",
        "fct-module": "Synthesizer.FusionList.Filter.NonRecursive",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e a -\u003e a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Filter-NonRecursive.html#ratioFreqToVariance",
        "fct-type": "unknown",
        "title": "ratioFreqToVariance"
      },
      "index": {
        "description": "Compute the variance of the Gaussian such that its Fourier transform has value ratio at frequency freq",
        "hierarchy": "Synthesizer FusionList Filter NonRecursive",
        "module": "Synthesizer.FusionList.Filter.NonRecursive",
        "name": "ratioFreqToVariance",
        "normalized": "a-\u003ea-\u003ea",
        "package": "synthesizer",
        "partial": "Freq To Variance",
        "signature": "a-\u003ea-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Filter-NonRecursive.html#v:sums",
      "description": {
        "fct-descr": "Moving (uniformly weighted) average in the most trivial form.\nThis is very slow and needs about \u003ctt\u003en * length x\u003c/tt\u003e operations.\n",
        "fct-module": "Synthesizer.FusionList.Filter.NonRecursive",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Filter-NonRecursive.html#sums",
        "fct-type": "unknown",
        "title": "sums"
      },
      "index": {
        "description": "Moving uniformly weighted average in the most trivial form This is very slow and needs about length operations",
        "hierarchy": "Synthesizer FusionList Filter NonRecursive",
        "module": "Synthesizer.FusionList.Filter.NonRecursive",
        "name": "sums",
        "normalized": "Int-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "Int-\u003eT v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Oscillator.html#v:freqMod",
      "description": {
        "fct-descr": "oscillator with modulated frequency \n",
        "fct-module": "Synthesizer.FusionList.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "T a b -\u003e T a -\u003e T a -\u003e T b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Oscillator.html#freqMod",
        "fct-type": "unknown",
        "title": "freqMod"
      },
      "index": {
        "description": "oscillator with modulated frequency",
        "hierarchy": "Synthesizer FusionList Oscillator",
        "module": "Synthesizer.FusionList.Oscillator",
        "name": "freqMod",
        "normalized": "T a b-\u003eT a-\u003eT a-\u003eT b",
        "package": "synthesizer",
        "partial": "Mod",
        "signature": "T a b-\u003eT a-\u003eT a-\u003eT b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Oscillator.html#v:freqModSaw",
      "description": {
        "fct-descr": "saw tooth oscillator with modulated frequency \n",
        "fct-module": "Synthesizer.FusionList.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Oscillator.html#freqModSaw",
        "fct-type": "unknown",
        "title": "freqModSaw"
      },
      "index": {
        "description": "saw tooth oscillator with modulated frequency",
        "hierarchy": "Synthesizer FusionList Oscillator",
        "module": "Synthesizer.FusionList.Oscillator",
        "name": "freqModSaw",
        "normalized": "T a-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "Mod Saw",
        "signature": "T a-\u003eT a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Oscillator.html#v:freqModSine",
      "description": {
        "fct-descr": "sine oscillator with modulated frequency \n",
        "fct-module": "Synthesizer.FusionList.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Oscillator.html#freqModSine",
        "fct-type": "unknown",
        "title": "freqModSine"
      },
      "index": {
        "description": "sine oscillator with modulated frequency",
        "hierarchy": "Synthesizer FusionList Oscillator",
        "module": "Synthesizer.FusionList.Oscillator",
        "name": "freqModSine",
        "normalized": "T a-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "Mod Sine",
        "signature": "T a-\u003eT a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Oscillator.html#v:freqToPhase",
      "description": {
        "fct-descr": "Convert a list of phase steps into a list of momentum phases\n     phase is a number in the interval [0,1)\n     freq contains the phase steps \n",
        "fct-module": "Synthesizer.FusionList.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e T a -\u003e T (T a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Oscillator.html#freqToPhase",
        "fct-type": "unknown",
        "title": "freqToPhase"
      },
      "index": {
        "description": "Convert list of phase steps into list of momentum phases phase is number in the interval freq contains the phase steps",
        "hierarchy": "Synthesizer FusionList Oscillator",
        "module": "Synthesizer.FusionList.Oscillator",
        "name": "freqToPhase",
        "normalized": "T a-\u003eT a-\u003eT(T a)",
        "package": "synthesizer",
        "partial": "To Phase",
        "signature": "T a-\u003eT a-\u003eT(T a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Oscillator.html#v:phaseFreqMod",
      "description": {
        "fct-descr": "oscillator with both phase and frequency modulation \n",
        "fct-module": "Synthesizer.FusionList.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "T a b -\u003e T a -\u003e T a -\u003e T b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Oscillator.html#phaseFreqMod",
        "fct-type": "unknown",
        "title": "phaseFreqMod"
      },
      "index": {
        "description": "oscillator with both phase and frequency modulation",
        "hierarchy": "Synthesizer FusionList Oscillator",
        "module": "Synthesizer.FusionList.Oscillator",
        "name": "phaseFreqMod",
        "normalized": "T a b-\u003eT a-\u003eT a-\u003eT b",
        "package": "synthesizer",
        "partial": "Freq Mod",
        "signature": "T a b-\u003eT a-\u003eT a-\u003eT b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Oscillator.html#v:phaseMod",
      "description": {
        "fct-descr": "oscillator with modulated phase \n",
        "fct-module": "Synthesizer.FusionList.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "T a b -\u003e a -\u003e T a -\u003e T b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Oscillator.html#phaseMod",
        "fct-type": "unknown",
        "title": "phaseMod"
      },
      "index": {
        "description": "oscillator with modulated phase",
        "hierarchy": "Synthesizer FusionList Oscillator",
        "module": "Synthesizer.FusionList.Oscillator",
        "name": "phaseMod",
        "normalized": "T a b-\u003ea-\u003eT a-\u003eT b",
        "package": "synthesizer",
        "partial": "Mod",
        "signature": "T a b-\u003ea-\u003eT a-\u003eT b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Oscillator.html#v:phaseModSine",
      "description": {
        "fct-descr": "sine oscillator with modulated phase, useful for FM synthesis \n",
        "fct-module": "Synthesizer.FusionList.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Oscillator.html#phaseModSine",
        "fct-type": "unknown",
        "title": "phaseModSine"
      },
      "index": {
        "description": "sine oscillator with modulated phase useful for FM synthesis",
        "hierarchy": "Synthesizer FusionList Oscillator",
        "module": "Synthesizer.FusionList.Oscillator",
        "name": "phaseModSine",
        "normalized": "a-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "Mod Sine",
        "signature": "a-\u003eT a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Oscillator.html#v:shapeFreqMod",
      "description": {
        "fct-descr": "oscillator with both shape and frequency modulation \n",
        "fct-module": "Synthesizer.FusionList.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "(c -\u003e T a b) -\u003e T a -\u003e T c -\u003e T a -\u003e T b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Oscillator.html#shapeFreqMod",
        "fct-type": "unknown",
        "title": "shapeFreqMod"
      },
      "index": {
        "description": "oscillator with both shape and frequency modulation",
        "hierarchy": "Synthesizer FusionList Oscillator",
        "module": "Synthesizer.FusionList.Oscillator",
        "name": "shapeFreqMod",
        "normalized": "(a-\u003eT b c)-\u003eT b-\u003eT a-\u003eT b-\u003eT c",
        "package": "synthesizer",
        "partial": "Freq Mod",
        "signature": "(c-\u003eT a b)-\u003eT a-\u003eT c-\u003eT a-\u003eT b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Oscillator.html#v:shapeMod",
      "description": {
        "fct-descr": "oscillator with modulated shape \n",
        "fct-module": "Synthesizer.FusionList.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "(c -\u003e T a b) -\u003e T a -\u003e a -\u003e T c -\u003e T b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Oscillator.html#shapeMod",
        "fct-type": "unknown",
        "title": "shapeMod"
      },
      "index": {
        "description": "oscillator with modulated shape",
        "hierarchy": "Synthesizer FusionList Oscillator",
        "module": "Synthesizer.FusionList.Oscillator",
        "name": "shapeMod",
        "normalized": "(a-\u003eT b c)-\u003eT b-\u003eb-\u003eT a-\u003eT c",
        "package": "synthesizer",
        "partial": "Mod",
        "signature": "(c-\u003eT a b)-\u003eT a-\u003ea-\u003eT c-\u003eT b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Oscillator.html#v:static",
      "description": {
        "fct-descr": "oscillator with constant frequency \n",
        "fct-module": "Synthesizer.FusionList.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "T a b -\u003e T a -\u003e a -\u003e T b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Oscillator.html#static",
        "fct-type": "unknown",
        "title": "static"
      },
      "index": {
        "description": "oscillator with constant frequency",
        "hierarchy": "Synthesizer FusionList Oscillator",
        "module": "Synthesizer.FusionList.Oscillator",
        "name": "static",
        "normalized": "T a b-\u003eT a-\u003ea-\u003eT b",
        "package": "synthesizer",
        "partial": "",
        "signature": "T a b-\u003eT a-\u003ea-\u003eT b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Oscillator.html#v:staticSaw",
      "description": {
        "fct-descr": "saw tooth oscillator with modulated frequency \n",
        "fct-module": "Synthesizer.FusionList.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Oscillator.html#staticSaw",
        "fct-type": "unknown",
        "title": "staticSaw"
      },
      "index": {
        "description": "saw tooth oscillator with modulated frequency",
        "hierarchy": "Synthesizer FusionList Oscillator",
        "module": "Synthesizer.FusionList.Oscillator",
        "name": "staticSaw",
        "normalized": "T a-\u003ea-\u003eT a",
        "package": "synthesizer",
        "partial": "Saw",
        "signature": "T a-\u003ea-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Oscillator.html#v:staticSine",
      "description": {
        "fct-descr": "sine oscillator with static frequency \n",
        "fct-module": "Synthesizer.FusionList.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Oscillator.html#staticSine",
        "fct-type": "unknown",
        "title": "staticSine"
      },
      "index": {
        "description": "sine oscillator with static frequency",
        "hierarchy": "Synthesizer FusionList Oscillator",
        "module": "Synthesizer.FusionList.Oscillator",
        "name": "staticSine",
        "normalized": "T a-\u003ea-\u003eT a",
        "package": "synthesizer",
        "partial": "Sine",
        "signature": "T a-\u003ea-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#t:T",
      "description": {
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "newtype",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#T",
        "fct-type": "unknown",
        "title": "T"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "T",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:append",
      "description": {
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#append",
        "fct-type": "unknown",
        "title": "append"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "append",
        "normalized": "T a-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "T a-\u003eT a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:concat",
      "description": {
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "[T a] -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#concat",
        "fct-type": "unknown",
        "title": "concat"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "concat",
        "normalized": "[T a]-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "[T a]-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:cons",
      "description": {
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#cons",
        "fct-type": "unknown",
        "title": "cons"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "cons",
        "normalized": "a-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "a-\u003eT a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:crochetL",
      "description": {
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(x -\u003e acc -\u003e Maybe (y, acc)) -\u003e acc -\u003e T x -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#crochetL",
        "fct-type": "unknown",
        "title": "crochetL"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "crochetL",
        "normalized": "(a-\u003eb-\u003eMaybe(c,b))-\u003eb-\u003eT a-\u003eT c",
        "package": "synthesizer",
        "partial": "",
        "signature": "(x-\u003eacc-\u003eMaybe(y,acc))-\u003eacc-\u003eT x-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:crochetLCons",
      "description": {
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(a -\u003e acc -\u003e Maybe (b, acc)) -\u003e acc -\u003e a -\u003e T a -\u003e T b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#crochetLCons",
        "fct-type": "unknown",
        "title": "crochetLCons"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "crochetLCons",
        "normalized": "(a-\u003eb-\u003eMaybe(c,b))-\u003eb-\u003ea-\u003eT a-\u003eT c",
        "package": "synthesizer",
        "partial": "LCons",
        "signature": "(a-\u003eacc-\u003eMaybe(b,acc))-\u003eacc-\u003ea-\u003eT a-\u003eT b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:cycle",
      "description": {
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#cycle",
        "fct-type": "unknown",
        "title": "cycle"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "cycle",
        "normalized": "T a-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "T a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:delay",
      "description": {
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "y -\u003e Int -\u003e T y -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#delay",
        "fct-type": "unknown",
        "title": "delay"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "delay",
        "normalized": "a-\u003eInt-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "y-\u003eInt-\u003eT y-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:delay1",
      "description": {
        "fct-descr": "This is a fusion friendly implementation of delay.\nHowever, in order to be a \u003ctt\u003e\u003ca\u003ecrochetL\u003c/a\u003e\u003c/tt\u003e\nthe output has the same length as the input,\nthat is, the last element is removed - at least for finite input.\n",
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#delay1",
        "fct-type": "unknown",
        "title": "delay1"
      },
      "index": {
        "description": "This is fusion friendly implementation of delay However in order to be crochetL the output has the same length as the input that is the last element is removed at least for finite input",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "delay1",
        "normalized": "a-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "a-\u003eT a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:delayLoop",
      "description": {
        "fct-descr": "processor that shall be run in a feedback loop\nprefix of the output, its length determines the delay\n",
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T y -\u003e T y-\u003e T y-\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#delayLoop",
        "fct-type": "unknown",
        "title": "delayLoop"
      },
      "index": {
        "description": "processor that shall be run in feedback loop prefix of the output its length determines the delay",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "delayLoop",
        "normalized": "T a-\u003eT a-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "Loop",
        "signature": "T y-\u003eT y-\u003eT y-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:delayLoopOverlap",
      "description": {
        "fct-descr": "processor that shall be run in a feedback loop\ninput\noutput has the same length as the input\n",
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "Int-\u003e T y -\u003e T y-\u003e T y-\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#delayLoopOverlap",
        "fct-type": "unknown",
        "title": "delayLoopOverlap"
      },
      "index": {
        "description": "processor that shall be run in feedback loop input output has the same length as the input",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "delayLoopOverlap",
        "normalized": "Int-\u003eT a-\u003eT a-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "Loop Overlap",
        "signature": "Int-\u003eT y-\u003eT y-\u003eT y-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:drop",
      "description": {
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#drop",
        "fct-type": "unknown",
        "title": "drop"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "drop",
        "normalized": "Int-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "Int-\u003eT a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:dropMargin",
      "description": {
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e Int -\u003e T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#dropMargin",
        "fct-type": "unknown",
        "title": "dropMargin"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "dropMargin",
        "normalized": "Int-\u003eInt-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "Margin",
        "signature": "Int-\u003eInt-\u003eT a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:dropMarginRem",
      "description": {
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e Int -\u003e T a -\u003e (Int, T a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#dropMarginRem",
        "fct-type": "unknown",
        "title": "dropMarginRem"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "dropMarginRem",
        "normalized": "Int-\u003eInt-\u003eT a-\u003e(Int,T a)",
        "package": "synthesizer",
        "partial": "Margin Rem",
        "signature": "Int-\u003eInt-\u003eT a-\u003e(Int,T a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:dropWhile",
      "description": {
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(a -\u003e Bool) -\u003e T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#dropWhile",
        "fct-type": "unknown",
        "title": "dropWhile"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "dropWhile",
        "normalized": "(a-\u003eBool)-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "While",
        "signature": "(a-\u003eBool)-\u003eT a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:empty",
      "description": {
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#empty",
        "fct-type": "unknown",
        "title": "empty"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "empty",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:extendConstant",
      "description": {
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#extendConstant",
        "fct-type": "unknown",
        "title": "extendConstant"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "extendConstant",
        "normalized": "T a-\u003eT a",
        "package": "synthesizer",
        "partial": "Constant",
        "signature": "T a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:foldL",
      "description": {
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(acc -\u003e x -\u003e acc) -\u003e acc -\u003e T x -\u003e acc",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#foldL",
        "fct-type": "unknown",
        "title": "foldL"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "foldL",
        "normalized": "(a-\u003eb-\u003ea)-\u003ea-\u003eT b-\u003ea",
        "package": "synthesizer",
        "partial": "",
        "signature": "(acc-\u003ex-\u003eacc)-\u003eacc-\u003eT x-\u003eacc"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:foldL'",
      "description": {
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(x -\u003e acc -\u003e acc) -\u003e acc -\u003e T x -\u003e acc",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#foldL%27",
        "fct-type": "unknown",
        "title": "foldL'"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "foldL'",
        "normalized": "(a-\u003eb-\u003eb)-\u003eb-\u003eT a-\u003eb",
        "package": "synthesizer",
        "partial": "L'",
        "signature": "(x-\u003eacc-\u003eacc)-\u003eacc-\u003eT x-\u003eacc"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:fromList",
      "description": {
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "[y] -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#fromList",
        "fct-type": "unknown",
        "title": "fromList"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "fromList",
        "normalized": "[a]-\u003eT a",
        "package": "synthesizer",
        "partial": "List",
        "signature": "[y]-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:fromStorableSignal",
      "description": {
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "Vector y -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#fromStorableSignal",
        "fct-type": "unknown",
        "title": "fromStorableSignal"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "fromStorableSignal",
        "normalized": "Vector a-\u003eT a",
        "package": "synthesizer",
        "partial": "Storable Signal",
        "signature": "Vector y-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:generate",
      "description": {
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(acc -\u003e Maybe (y, acc)) -\u003e acc -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#generate",
        "fct-type": "unknown",
        "title": "generate"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "generate",
        "normalized": "(a-\u003eMaybe(b,a))-\u003ea-\u003eT b",
        "package": "synthesizer",
        "partial": "",
        "signature": "(acc-\u003eMaybe(y,acc))-\u003eacc-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:generateInfinite",
      "description": {
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(acc -\u003e (y, acc)) -\u003e acc -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#generateInfinite",
        "fct-type": "unknown",
        "title": "generateInfinite"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "generateInfinite",
        "normalized": "(a-\u003e(b,a))-\u003ea-\u003eT b",
        "package": "synthesizer",
        "partial": "Infinite",
        "signature": "(acc-\u003e(y,acc))-\u003eacc-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:head",
      "description": {
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#head",
        "fct-type": "unknown",
        "title": "head"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "head",
        "normalized": "T a-\u003ea",
        "package": "synthesizer",
        "partial": "",
        "signature": "T a-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:index",
      "description": {
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e T a -\u003e a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#index",
        "fct-type": "unknown",
        "title": "index"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "index",
        "normalized": "Int-\u003eT a-\u003ea",
        "package": "synthesizer",
        "partial": "",
        "signature": "Int-\u003eT a-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:init",
      "description": {
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T y -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#init",
        "fct-type": "unknown",
        "title": "init"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "init",
        "normalized": "T a-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "T y-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:iterate",
      "description": {
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(a -\u003e a) -\u003e a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#iterate",
        "fct-type": "unknown",
        "title": "iterate"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "iterate",
        "normalized": "(a-\u003ea)-\u003ea-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "(a-\u003ea)-\u003ea-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:iterateAssociative",
      "description": {
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(a -\u003e a -\u003e a) -\u003e a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#iterateAssociative",
        "fct-type": "unknown",
        "title": "iterateAssociative"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "iterateAssociative",
        "normalized": "(a-\u003ea-\u003ea)-\u003ea-\u003eT a",
        "package": "synthesizer",
        "partial": "Associative",
        "signature": "(a-\u003ea-\u003ea)-\u003ea-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:length",
      "description": {
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e Int",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#length",
        "fct-type": "unknown",
        "title": "length"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "length",
        "normalized": "T a-\u003eInt",
        "package": "synthesizer",
        "partial": "",
        "signature": "T a-\u003eInt"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:lengthSlow",
      "description": {
        "fct-descr": "can be used to check against native length implementation \n",
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e Int",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#lengthSlow",
        "fct-type": "unknown",
        "title": "lengthSlow"
      },
      "index": {
        "description": "can be used to check against native length implementation",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "lengthSlow",
        "normalized": "T a-\u003eInt",
        "package": "synthesizer",
        "partial": "Slow",
        "signature": "T a-\u003eInt"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:linearComb",
      "description": {
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T t -\u003e T y -\u003e y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#linearComb",
        "fct-type": "unknown",
        "title": "linearComb"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "linearComb",
        "normalized": "T a-\u003eT b-\u003eb",
        "package": "synthesizer",
        "partial": "Comb",
        "signature": "T t-\u003eT y-\u003ey"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:map",
      "description": {
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(a -\u003e b) -\u003e T a -\u003e T b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#map",
        "fct-type": "unknown",
        "title": "map"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "map",
        "normalized": "(a-\u003eb)-\u003eT a-\u003eT b",
        "package": "synthesizer",
        "partial": "",
        "signature": "(a-\u003eb)-\u003eT a-\u003eT b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:mapAccumL",
      "description": {
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(acc -\u003e x -\u003e (acc, y)) -\u003e acc -\u003e T x -\u003e (acc, T y)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#mapAccumL",
        "fct-type": "unknown",
        "title": "mapAccumL"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "mapAccumL",
        "normalized": "(a-\u003eb-\u003e(a,c))-\u003ea-\u003eT b-\u003e(a,T c)",
        "package": "synthesizer",
        "partial": "Accum",
        "signature": "(acc-\u003ex-\u003e(acc,y))-\u003eacc-\u003eT x-\u003e(acc,T y)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:mapAccumR",
      "description": {
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(acc -\u003e x -\u003e (acc, y)) -\u003e acc -\u003e T x -\u003e (acc, T y)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#mapAccumR",
        "fct-type": "unknown",
        "title": "mapAccumR"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "mapAccumR",
        "normalized": "(a-\u003eb-\u003e(a,c))-\u003ea-\u003eT b-\u003e(a,T c)",
        "package": "synthesizer",
        "partial": "Accum",
        "signature": "(acc-\u003ex-\u003e(acc,y))-\u003eacc-\u003eT x-\u003e(acc,T y)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:mapTails",
      "description": {
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(T y0 -\u003e y1) -\u003e T y0 -\u003e T y1",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#mapTails",
        "fct-type": "unknown",
        "title": "mapTails"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "mapTails",
        "normalized": "(T a-\u003ea)-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "Tails",
        "signature": "(T y-\u003ey)-\u003eT y-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:maximum",
      "description": {
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#maximum",
        "fct-type": "unknown",
        "title": "maximum"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "maximum",
        "normalized": "T a-\u003ea",
        "package": "synthesizer",
        "partial": "",
        "signature": "T a-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:mix",
      "description": {
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#mix",
        "fct-type": "unknown",
        "title": "mix"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "mix",
        "normalized": "T a-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "T a-\u003eT a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:mixGenerate",
      "description": {
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(a -\u003e a -\u003e a) -\u003e (acc -\u003e Maybe (a, acc)) -\u003e acc -\u003e T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#mixGenerate",
        "fct-type": "unknown",
        "title": "mixGenerate"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "mixGenerate",
        "normalized": "(a-\u003ea-\u003ea)-\u003e(b-\u003eMaybe(a,b))-\u003eb-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "Generate",
        "signature": "(a-\u003ea-\u003ea)-\u003e(acc-\u003eMaybe(a,acc))-\u003eacc-\u003eT a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:modifyModulated",
      "description": {
        "fct-descr": "Here the control may vary over the time. \n",
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "Simple s ctrl a b -\u003e T ctrl -\u003e T a -\u003e T b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#modifyModulated",
        "fct-type": "unknown",
        "title": "modifyModulated"
      },
      "index": {
        "description": "Here the control may vary over the time",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "modifyModulated",
        "normalized": "Simple a b c d-\u003eT b-\u003eT c-\u003eT d",
        "package": "synthesizer",
        "partial": "Modulated",
        "signature": "Simple s ctrl a b-\u003eT ctrl-\u003eT a-\u003eT b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:modifyStatic",
      "description": {
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "Simple s ctrl a b -\u003e ctrl -\u003e T a -\u003e T b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#modifyStatic",
        "fct-type": "unknown",
        "title": "modifyStatic"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "modifyStatic",
        "normalized": "Simple a b c d-\u003eb-\u003eT c-\u003eT d",
        "package": "synthesizer",
        "partial": "Static",
        "signature": "Simple s ctrl a b-\u003ectrl-\u003eT a-\u003eT b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:neg",
      "description": {
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#neg",
        "fct-type": "unknown",
        "title": "neg"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "neg",
        "normalized": "T a-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "T a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:null",
      "description": {
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e Bool",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#null",
        "fct-type": "unknown",
        "title": "null"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "null",
        "normalized": "T a-\u003eBool",
        "package": "synthesizer",
        "partial": "",
        "signature": "T a-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:recourse",
      "description": {
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(acc -\u003e Maybe acc) -\u003e acc -\u003e acc",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#recourse",
        "fct-type": "unknown",
        "title": "recourse"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "recourse",
        "normalized": "(a-\u003eMaybe a)-\u003ea-\u003ea",
        "package": "synthesizer",
        "partial": "",
        "signature": "(acc-\u003eMaybe acc)-\u003eacc-\u003eacc"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:reduceL",
      "description": {
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(x -\u003e acc -\u003e Maybe acc) -\u003e acc -\u003e T x -\u003e acc",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#reduceL",
        "fct-type": "unknown",
        "title": "reduceL"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "reduceL",
        "normalized": "(a-\u003eb-\u003eMaybe b)-\u003eb-\u003eT a-\u003eb",
        "package": "synthesizer",
        "partial": "",
        "signature": "(x-\u003eacc-\u003eMaybe acc)-\u003eacc-\u003eT x-\u003eacc"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:reduceLCons",
      "description": {
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(a -\u003e acc -\u003e Maybe acc) -\u003e acc -\u003e a -\u003e T a -\u003e acc",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#reduceLCons",
        "fct-type": "unknown",
        "title": "reduceLCons"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "reduceLCons",
        "normalized": "(a-\u003eb-\u003eMaybe b)-\u003eb-\u003ea-\u003eT a-\u003eb",
        "package": "synthesizer",
        "partial": "LCons",
        "signature": "(a-\u003eacc-\u003eMaybe acc)-\u003eacc-\u003ea-\u003eT a-\u003eacc"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:repeat",
      "description": {
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#repeat",
        "fct-type": "unknown",
        "title": "repeat"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "repeat",
        "normalized": "a-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:replicate",
      "description": {
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#replicate",
        "fct-type": "unknown",
        "title": "replicate"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "replicate",
        "normalized": "Int-\u003ea-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "Int-\u003ea-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:reverse",
      "description": {
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#reverse",
        "fct-type": "unknown",
        "title": "reverse"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "reverse",
        "normalized": "T a-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "T a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:scanL",
      "description": {
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(acc -\u003e x -\u003e acc) -\u003e acc -\u003e T x -\u003e T acc",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#scanL",
        "fct-type": "unknown",
        "title": "scanL"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "scanL",
        "normalized": "(a-\u003eb-\u003ea)-\u003ea-\u003eT b-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "(acc-\u003ex-\u003eacc)-\u003eacc-\u003eT x-\u003eT acc"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:scanLClip",
      "description": {
        "fct-descr": "input and output have equal length, that's better for fusion\n",
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(acc -\u003e x -\u003e acc) -\u003e acc -\u003e T x -\u003e T acc",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#scanLClip",
        "fct-type": "unknown",
        "title": "scanLClip"
      },
      "index": {
        "description": "input and output have equal length that better for fusion",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "scanLClip",
        "normalized": "(a-\u003eb-\u003ea)-\u003ea-\u003eT b-\u003eT a",
        "package": "synthesizer",
        "partial": "LClip",
        "signature": "(acc-\u003ex-\u003eacc)-\u003eacc-\u003eT x-\u003eT acc"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:singleton",
      "description": {
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#singleton",
        "fct-type": "unknown",
        "title": "singleton"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "singleton",
        "normalized": "a-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:sliceVert",
      "description": {
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e T y -\u003e [T y]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#sliceVert",
        "fct-type": "unknown",
        "title": "sliceVert"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "sliceVert",
        "normalized": "Int-\u003eT a-\u003e[T a]",
        "package": "synthesizer",
        "partial": "Vert",
        "signature": "Int-\u003eT y-\u003e[T y]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:span",
      "description": {
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(a -\u003e Bool) -\u003e T a -\u003e (T a, T a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#span",
        "fct-type": "unknown",
        "title": "span"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "span",
        "normalized": "(a-\u003eBool)-\u003eT a-\u003e(T a,T a)",
        "package": "synthesizer",
        "partial": "",
        "signature": "(a-\u003eBool)-\u003eT a-\u003e(T a,T a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:splitAt",
      "description": {
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e T a -\u003e (T a, T a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#splitAt",
        "fct-type": "unknown",
        "title": "splitAt"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "splitAt",
        "normalized": "Int-\u003eT a-\u003e(T a,T a)",
        "package": "synthesizer",
        "partial": "At",
        "signature": "Int-\u003eT a-\u003e(T a,T a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:sub",
      "description": {
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#sub",
        "fct-type": "unknown",
        "title": "sub"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "sub",
        "normalized": "T a-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "T a-\u003eT a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:sum",
      "description": {
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#sum",
        "fct-type": "unknown",
        "title": "sum"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "sum",
        "normalized": "T a-\u003ea",
        "package": "synthesizer",
        "partial": "",
        "signature": "T a-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:tail",
      "description": {
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#tail",
        "fct-type": "unknown",
        "title": "tail"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "tail",
        "normalized": "T a-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "T a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:tails",
      "description": {
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T y -\u003e [T y]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#tails",
        "fct-type": "unknown",
        "title": "tails"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "tails",
        "normalized": "T a-\u003e[T a]",
        "package": "synthesizer",
        "partial": "",
        "signature": "T y-\u003e[T y]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:take",
      "description": {
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#take",
        "fct-type": "unknown",
        "title": "take"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "take",
        "normalized": "Int-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "Int-\u003eT a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:takeWhile",
      "description": {
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(a -\u003e Bool) -\u003e T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#takeWhile",
        "fct-type": "unknown",
        "title": "takeWhile"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "takeWhile",
        "normalized": "(a-\u003eBool)-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "While",
        "signature": "(a-\u003eBool)-\u003eT a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:toList",
      "description": {
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T y -\u003e [y]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#toList",
        "fct-type": "unknown",
        "title": "toList"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "toList",
        "normalized": "T a-\u003e[a]",
        "package": "synthesizer",
        "partial": "List",
        "signature": "T y-\u003e[y]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:toStorableSignal",
      "description": {
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "ChunkSize -\u003e T y -\u003e Vector y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#toStorableSignal",
        "fct-type": "unknown",
        "title": "toStorableSignal"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "toStorableSignal",
        "normalized": "ChunkSize-\u003eT a-\u003eVector a",
        "package": "synthesizer",
        "partial": "Storable Signal",
        "signature": "ChunkSize-\u003eT y-\u003eVector y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:unfoldR",
      "description": {
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(acc -\u003e Maybe (y, acc)) -\u003e acc -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#unfoldR",
        "fct-type": "unknown",
        "title": "unfoldR"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "unfoldR",
        "normalized": "(a-\u003eMaybe(b,a))-\u003ea-\u003eT b",
        "package": "synthesizer",
        "partial": "",
        "signature": "(acc-\u003eMaybe(y,acc))-\u003eacc-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:unzip",
      "description": {
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T (a, b) -\u003e (T a, T b)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#unzip",
        "fct-type": "unknown",
        "title": "unzip"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "unzip",
        "normalized": "T(a,b)-\u003e(T a,T b)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T(a,b)-\u003e(T a,T b)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:unzip3",
      "description": {
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T (a, b, c) -\u003e (T a, T b, T c)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#unzip3",
        "fct-type": "unknown",
        "title": "unzip3"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "unzip3",
        "normalized": "T(a,b,c)-\u003e(T a,T b,T c)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T(a,b,c)-\u003e(T a,T b,T c)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:viewL",
      "description": {
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e Maybe (a, T a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#viewL",
        "fct-type": "unknown",
        "title": "viewL"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "viewL",
        "normalized": "T a-\u003eMaybe(a,T a)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T a-\u003eMaybe(a,T a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:viewR",
      "description": {
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e Maybe (T a, a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#viewR",
        "fct-type": "unknown",
        "title": "viewR"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "viewR",
        "normalized": "T a-\u003eMaybe(T a,a)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T a-\u003eMaybe(T a,a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:zapWith",
      "description": {
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(a -\u003e a -\u003e b) -\u003e T a -\u003e T b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#zapWith",
        "fct-type": "unknown",
        "title": "zapWith"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "zapWith",
        "normalized": "(a-\u003ea-\u003eb)-\u003eT a-\u003eT b",
        "package": "synthesizer",
        "partial": "With",
        "signature": "(a-\u003ea-\u003eb)-\u003eT a-\u003eT b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:zip",
      "description": {
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e T b -\u003e T (a, b)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#zip",
        "fct-type": "unknown",
        "title": "zip"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "zip",
        "normalized": "T a-\u003eT b-\u003eT(a,b)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T a-\u003eT b-\u003eT(a,b)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:zip3",
      "description": {
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e T b -\u003e T c -\u003e T (a, b, c)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#zip3",
        "fct-type": "unknown",
        "title": "zip3"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "zip3",
        "normalized": "T a-\u003eT b-\u003eT c-\u003eT(a,b,c)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T a-\u003eT b-\u003eT c-\u003eT(a,b,c)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:zip4",
      "description": {
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e T b -\u003e T c -\u003e T d -\u003e T (a, b, c, d)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#zip4",
        "fct-type": "unknown",
        "title": "zip4"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "zip4",
        "normalized": "T a-\u003eT b-\u003eT c-\u003eT d-\u003eT(a,b,c,d)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T a-\u003eT b-\u003eT c-\u003eT d-\u003eT(a,b,c,d)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:zipWith",
      "description": {
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(a -\u003e b -\u003e c) -\u003e T a -\u003e T b -\u003e T c",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#zipWith",
        "fct-type": "unknown",
        "title": "zipWith"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "zipWith",
        "normalized": "(a-\u003eb-\u003ec)-\u003eT a-\u003eT b-\u003eT c",
        "package": "synthesizer",
        "partial": "With",
        "signature": "(a-\u003eb-\u003ec)-\u003eT a-\u003eT b-\u003eT c"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:zipWith3",
      "description": {
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(a -\u003e b -\u003e c -\u003e d) -\u003e T a -\u003e T b -\u003e T c -\u003e T d",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#zipWith3",
        "fct-type": "unknown",
        "title": "zipWith3"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "zipWith3",
        "normalized": "(a-\u003eb-\u003ec-\u003ed)-\u003eT a-\u003eT b-\u003eT c-\u003eT d",
        "package": "synthesizer",
        "partial": "With",
        "signature": "(a-\u003eb-\u003ec-\u003ed)-\u003eT a-\u003eT b-\u003eT c-\u003eT d"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:zipWith4",
      "description": {
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(a -\u003e b -\u003e c -\u003e d -\u003e e) -\u003e T a -\u003e T b -\u003e T c -\u003e T d -\u003e T e",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#zipWith4",
        "fct-type": "unknown",
        "title": "zipWith4"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "zipWith4",
        "normalized": "(a-\u003eb-\u003ec-\u003ed-\u003ee)-\u003eT a-\u003eT b-\u003eT c-\u003eT d-\u003eT e",
        "package": "synthesizer",
        "partial": "With",
        "signature": "(a-\u003eb-\u003ec-\u003ed-\u003ee)-\u003eT a-\u003eT b-\u003eT c-\u003eT d-\u003eT e"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:zipWithAppend",
      "description": {
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(y -\u003e y -\u003e y) -\u003e T y -\u003e T y -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#zipWithAppend",
        "fct-type": "unknown",
        "title": "zipWithAppend"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "zipWithAppend",
        "normalized": "(a-\u003ea-\u003ea)-\u003eT a-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "With Append",
        "signature": "(y-\u003ey-\u003ey)-\u003eT y-\u003eT y-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:zipWithCons",
      "description": {
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(a -\u003e b -\u003e c) -\u003e a -\u003e T a -\u003e T b -\u003e T c",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#zipWithCons",
        "fct-type": "unknown",
        "title": "zipWithCons"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "zipWithCons",
        "normalized": "(a-\u003eb-\u003ec)-\u003ea-\u003eT a-\u003eT b-\u003eT c",
        "package": "synthesizer",
        "partial": "With Cons",
        "signature": "(a-\u003eb-\u003ec)-\u003ea-\u003eT a-\u003eT b-\u003eT c"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:zipWithCrochetL",
      "description": {
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(a -\u003e b -\u003e c) -\u003e (x -\u003e acc -\u003e Maybe (a, acc)) -\u003e acc -\u003e T x -\u003e T b -\u003e T c",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#zipWithCrochetL",
        "fct-type": "unknown",
        "title": "zipWithCrochetL"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "zipWithCrochetL",
        "normalized": "(a-\u003eb-\u003ec)-\u003e(d-\u003ee-\u003eMaybe(a,e))-\u003ee-\u003eT d-\u003eT b-\u003eT c",
        "package": "synthesizer",
        "partial": "With Crochet",
        "signature": "(a-\u003eb-\u003ec)-\u003e(x-\u003eacc-\u003eMaybe(a,acc))-\u003eacc-\u003eT x-\u003eT b-\u003eT c"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:zipWithGenerate",
      "description": {
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(a -\u003e b -\u003e c) -\u003e (acc -\u003e Maybe (a, acc)) -\u003e acc -\u003e T b -\u003e T c",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#zipWithGenerate",
        "fct-type": "unknown",
        "title": "zipWithGenerate"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "zipWithGenerate",
        "normalized": "(a-\u003eb-\u003ec)-\u003e(d-\u003eMaybe(a,d))-\u003ed-\u003eT b-\u003eT c",
        "package": "synthesizer",
        "partial": "With Generate",
        "signature": "(a-\u003eb-\u003ec)-\u003e(acc-\u003eMaybe(a,acc))-\u003eacc-\u003eT b-\u003eT c"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:zipWithRest",
      "description": {
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(y0 -\u003e y0 -\u003e y1) -\u003e T y0 -\u003e T y0 -\u003e (T y1, (Bool, T y0))",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#zipWithRest",
        "fct-type": "unknown",
        "title": "zipWithRest"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "zipWithRest",
        "normalized": "(a-\u003ea-\u003ea)-\u003eT a-\u003eT a-\u003e(T a,(Bool,T a))",
        "package": "synthesizer",
        "partial": "With Rest",
        "signature": "(y-\u003ey-\u003ey)-\u003eT y-\u003eT y-\u003e(T y,(Bool,T y))"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-FusionList-Signal.html#v:zipWithTails",
      "description": {
        "fct-module": "Synthesizer.FusionList.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(y0 -\u003e T y1 -\u003e y2) -\u003e T y0 -\u003e T y1 -\u003e T y2",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-FusionList-Signal.html#zipWithTails",
        "fct-type": "unknown",
        "title": "zipWithTails"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer FusionList Signal",
        "module": "Synthesizer.FusionList.Signal",
        "name": "zipWithTails",
        "normalized": "(a-\u003eT a-\u003ea)-\u003eT a-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "With Tails",
        "signature": "(y-\u003eT y-\u003ey)-\u003eT y-\u003eT y-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Analysis.html#v:average",
      "description": {
        "fct-module": "Synthesizer.Generic.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "sig y -\u003e y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Analysis.html#average",
        "fct-type": "unknown",
        "title": "average"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Analysis",
        "module": "Synthesizer.Generic.Analysis",
        "name": "average",
        "normalized": "a b-\u003eb",
        "package": "synthesizer",
        "partial": "",
        "signature": "sig y-\u003ey"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Analysis.html#v:bounds",
      "description": {
        "fct-descr": "Compute minimum and maximum value of the stream the efficient way.\nInput list must be non-empty and finite.\n",
        "fct-module": "Synthesizer.Generic.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "sig y -\u003e (y, y)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Analysis.html#bounds",
        "fct-type": "unknown",
        "title": "bounds"
      },
      "index": {
        "description": "Compute minimum and maximum value of the stream the efficient way Input list must be non-empty and finite",
        "hierarchy": "Synthesizer Generic Analysis",
        "module": "Synthesizer.Generic.Analysis",
        "name": "bounds",
        "normalized": "a b-\u003e(b,b)",
        "package": "synthesizer",
        "partial": "",
        "signature": "sig y-\u003e(y,y)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Analysis.html#v:centroid",
      "description": {
        "fct-descr": "\u003ctt\u003e\u003ca\u003edirectCurrentOffset\u003c/a\u003e\u003c/tt\u003e must be non-zero.\n",
        "fct-module": "Synthesizer.Generic.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "sig y -\u003e y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Analysis.html#centroid",
        "fct-type": "unknown",
        "title": "centroid"
      },
      "index": {
        "description": "directCurrentOffset must be non-zero",
        "hierarchy": "Synthesizer Generic Analysis",
        "module": "Synthesizer.Generic.Analysis",
        "name": "centroid",
        "normalized": "a b-\u003eb",
        "package": "synthesizer",
        "partial": "",
        "signature": "sig y-\u003ey"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Analysis.html#v:directCurrentOffset",
      "description": {
        "fct-descr": "Requires finite length.\nThis is identical to the arithmetic mean.\n",
        "fct-module": "Synthesizer.Generic.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "sig y -\u003e y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Analysis.html#directCurrentOffset",
        "fct-type": "unknown",
        "title": "directCurrentOffset"
      },
      "index": {
        "description": "Requires finite length This is identical to the arithmetic mean",
        "hierarchy": "Synthesizer Generic Analysis",
        "module": "Synthesizer.Generic.Analysis",
        "name": "directCurrentOffset",
        "normalized": "a b-\u003eb",
        "package": "synthesizer",
        "partial": "Current Offset",
        "signature": "sig y-\u003ey"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Analysis.html#v:flipFlopHysteresis",
      "description": {
        "fct-descr": "Detect thresholds with a hysteresis.\n",
        "fct-module": "Synthesizer.Generic.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "(y, y) -\u003e Bool -\u003e sig y -\u003e sig Bool",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Analysis.html#flipFlopHysteresis",
        "fct-type": "unknown",
        "title": "flipFlopHysteresis"
      },
      "index": {
        "description": "Detect thresholds with hysteresis",
        "hierarchy": "Synthesizer Generic Analysis",
        "module": "Synthesizer.Generic.Analysis",
        "name": "flipFlopHysteresis",
        "normalized": "(a,a)-\u003eBool-\u003eb a-\u003eb Bool",
        "package": "synthesizer",
        "partial": "Flop Hysteresis",
        "signature": "(y,y)-\u003eBool-\u003esig y-\u003esig Bool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Analysis.html#v:rectify",
      "description": {
        "fct-module": "Synthesizer.Generic.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "sig y -\u003e sig y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Analysis.html#rectify",
        "fct-type": "unknown",
        "title": "rectify"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Analysis",
        "module": "Synthesizer.Generic.Analysis",
        "name": "rectify",
        "normalized": "a b-\u003ea b",
        "package": "synthesizer",
        "partial": "",
        "signature": "sig y-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Analysis.html#v:scalarProduct",
      "description": {
        "fct-module": "Synthesizer.Generic.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "sig y -\u003e sig y -\u003e y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Analysis.html#scalarProduct",
        "fct-type": "unknown",
        "title": "scalarProduct"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Analysis",
        "module": "Synthesizer.Generic.Analysis",
        "name": "scalarProduct",
        "normalized": "a b-\u003ea b-\u003eb",
        "package": "synthesizer",
        "partial": "Product",
        "signature": "sig y-\u003esig y-\u003ey"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Analysis.html#v:volumeEuclidean",
      "description": {
        "fct-descr": "Volume based on Energy norm.\n",
        "fct-module": "Synthesizer.Generic.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "sig y -\u003e y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Analysis.html#volumeEuclidean",
        "fct-type": "unknown",
        "title": "volumeEuclidean"
      },
      "index": {
        "description": "Volume based on Energy norm",
        "hierarchy": "Synthesizer Generic Analysis",
        "module": "Synthesizer.Generic.Analysis",
        "name": "volumeEuclidean",
        "normalized": "a b-\u003eb",
        "package": "synthesizer",
        "partial": "Euclidean",
        "signature": "sig y-\u003ey"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Analysis.html#v:volumeEuclideanSqr",
      "description": {
        "fct-module": "Synthesizer.Generic.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "sig y -\u003e y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Analysis.html#volumeEuclideanSqr",
        "fct-type": "unknown",
        "title": "volumeEuclideanSqr"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Analysis",
        "module": "Synthesizer.Generic.Analysis",
        "name": "volumeEuclideanSqr",
        "normalized": "a b-\u003eb",
        "package": "synthesizer",
        "partial": "Euclidean Sqr",
        "signature": "sig y-\u003ey"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Analysis.html#v:volumeMaximum",
      "description": {
        "fct-descr": "Volume based on Manhattan norm.\n",
        "fct-module": "Synthesizer.Generic.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "sig y -\u003e y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Analysis.html#volumeMaximum",
        "fct-type": "unknown",
        "title": "volumeMaximum"
      },
      "index": {
        "description": "Volume based on Manhattan norm",
        "hierarchy": "Synthesizer Generic Analysis",
        "module": "Synthesizer.Generic.Analysis",
        "name": "volumeMaximum",
        "normalized": "a b-\u003eb",
        "package": "synthesizer",
        "partial": "Maximum",
        "signature": "sig y-\u003ey"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Analysis.html#v:volumeSum",
      "description": {
        "fct-descr": "Volume based on Sum norm.\n",
        "fct-module": "Synthesizer.Generic.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "sig y -\u003e y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Analysis.html#volumeSum",
        "fct-type": "unknown",
        "title": "volumeSum"
      },
      "index": {
        "description": "Volume based on Sum norm",
        "hierarchy": "Synthesizer Generic Analysis",
        "module": "Synthesizer.Generic.Analysis",
        "name": "volumeSum",
        "normalized": "a b-\u003eb",
        "package": "synthesizer",
        "partial": "Sum",
        "signature": "sig y-\u003ey"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Analysis.html#v:volumeVectorEuclidean",
      "description": {
        "fct-descr": "Volume based on Energy norm.\n",
        "fct-module": "Synthesizer.Generic.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "sig yv -\u003e y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Analysis.html#volumeVectorEuclidean",
        "fct-type": "unknown",
        "title": "volumeVectorEuclidean"
      },
      "index": {
        "description": "Volume based on Energy norm",
        "hierarchy": "Synthesizer Generic Analysis",
        "module": "Synthesizer.Generic.Analysis",
        "name": "volumeVectorEuclidean",
        "normalized": "a b-\u003ec",
        "package": "synthesizer",
        "partial": "Vector Euclidean",
        "signature": "sig yv-\u003ey"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Analysis.html#v:volumeVectorEuclideanSqr",
      "description": {
        "fct-module": "Synthesizer.Generic.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "sig yv -\u003e y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Analysis.html#volumeVectorEuclideanSqr",
        "fct-type": "unknown",
        "title": "volumeVectorEuclideanSqr"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Analysis",
        "module": "Synthesizer.Generic.Analysis",
        "name": "volumeVectorEuclideanSqr",
        "normalized": "a b-\u003ec",
        "package": "synthesizer",
        "partial": "Vector Euclidean Sqr",
        "signature": "sig yv-\u003ey"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Analysis.html#v:volumeVectorMaximum",
      "description": {
        "fct-descr": "Volume based on Manhattan norm.\n",
        "fct-module": "Synthesizer.Generic.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "sig yv -\u003e y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Analysis.html#volumeVectorMaximum",
        "fct-type": "unknown",
        "title": "volumeVectorMaximum"
      },
      "index": {
        "description": "Volume based on Manhattan norm",
        "hierarchy": "Synthesizer Generic Analysis",
        "module": "Synthesizer.Generic.Analysis",
        "name": "volumeVectorMaximum",
        "normalized": "a b-\u003ec",
        "package": "synthesizer",
        "partial": "Vector Maximum",
        "signature": "sig yv-\u003ey"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Analysis.html#v:volumeVectorSum",
      "description": {
        "fct-descr": "Volume based on Sum norm.\n",
        "fct-module": "Synthesizer.Generic.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "sig yv -\u003e y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Analysis.html#volumeVectorSum",
        "fct-type": "unknown",
        "title": "volumeVectorSum"
      },
      "index": {
        "description": "Volume based on Sum norm",
        "hierarchy": "Synthesizer Generic Analysis",
        "module": "Synthesizer.Generic.Analysis",
        "name": "volumeVectorSum",
        "normalized": "a b-\u003ec",
        "package": "synthesizer",
        "partial": "Vector Sum",
        "signature": "sig yv-\u003ey"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Analysis.html#v:zeros",
      "description": {
        "fct-descr": "\u003cp\u003eDetects zeros (sign changes) in a signal.\nThis can be used as a simple measure of the portion\nof high frequencies or noise in the signal.\nIt ca be used as voiced/unvoiced detector in a vocoder.\n\u003c/p\u003e\u003cp\u003e\u003ctt\u003ezeros x !! n\u003c/tt\u003e is \u003ctt\u003eTrue\u003c/tt\u003e if and only if\n\u003ctt\u003e(x !! n \u003e= 0) /= (x !! (n+1) \u003e= 0)\u003c/tt\u003e.\nThe result will be one value shorter than the input.\n\u003c/p\u003e",
        "fct-module": "Synthesizer.Generic.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "sig y -\u003e sig Bool",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Analysis.html#zeros",
        "fct-type": "unknown",
        "title": "zeros"
      },
      "index": {
        "description": "Detects zeros sign changes in signal This can be used as simple measure of the portion of high frequencies or noise in the signal It ca be used as voiced unvoiced detector in vocoder zeros is True if and only if The result will be one value shorter than the input",
        "hierarchy": "Synthesizer Generic Analysis",
        "module": "Synthesizer.Generic.Analysis",
        "name": "zeros",
        "normalized": "a b-\u003ea Bool",
        "package": "synthesizer",
        "partial": "",
        "signature": "sig y-\u003esig Bool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Control.html#t:Control",
      "description": {
        "fct-module": "Synthesizer.Generic.Control",
        "fct-package": "synthesizer",
        "fct-signature": "data",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Control.html#Control",
        "fct-type": "unknown",
        "title": "Control"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Control",
        "module": "Synthesizer.Generic.Control",
        "name": "Control",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Control",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Control.html#t:ControlDist",
      "description": {
        "fct-module": "Synthesizer.Generic.Control",
        "fct-package": "synthesizer",
        "fct-signature": "type",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Control.html#ControlDist",
        "fct-type": "unknown",
        "title": "ControlDist"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Control",
        "module": "Synthesizer.Generic.Control",
        "name": "ControlDist",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Control Dist",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Control.html#t:ControlPiece",
      "description": {
        "fct-module": "Synthesizer.Generic.Control",
        "fct-package": "synthesizer",
        "fct-signature": "data",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Control.html#ControlPiece",
        "fct-type": "unknown",
        "title": "ControlPiece"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Control",
        "module": "Synthesizer.Generic.Control",
        "name": "ControlPiece",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Control Piece",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Control.html#t:PieceRightDouble",
      "description": {
        "fct-module": "Synthesizer.Generic.Control",
        "fct-package": "synthesizer",
        "fct-signature": "newtype",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Control.html#PieceRightDouble",
        "fct-type": "unknown",
        "title": "PieceRightDouble"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Control",
        "module": "Synthesizer.Generic.Control",
        "name": "PieceRightDouble",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Piece Right Double",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Control.html#t:PieceRightSingle",
      "description": {
        "fct-module": "Synthesizer.Generic.Control",
        "fct-package": "synthesizer",
        "fct-signature": "newtype",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Control.html#PieceRightSingle",
        "fct-type": "unknown",
        "title": "PieceRightSingle"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Control",
        "module": "Synthesizer.Generic.Control",
        "name": "PieceRightSingle",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Piece Right Single",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Control.html#v:#|",
      "description": {
        "fct-module": "Synthesizer.Generic.Control",
        "fct-package": "synthesizer",
        "fct-signature": "(y, Control y) -\u003e y -\u003e (ControlDist y, [ControlPiece y])",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Control.html#%23%7C",
        "fct-type": "unknown",
        "title": "#|"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Control",
        "module": "Synthesizer.Generic.Control",
        "name": "#|",
        "normalized": "(a,Control a)-\u003ea-\u003e(ControlDist a,[ControlPiece a])",
        "package": "synthesizer",
        "partial": "",
        "signature": "(y,Control y)-\u003ey-\u003e(ControlDist y,[ControlPiece y])"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Control.html#v:#|-",
      "description": {
        "fct-descr": "\u003cp\u003eThe 6 operators simplify constructing a list of \u003ctt\u003eControlPiece a\u003c/tt\u003e.\nThe description consists of nodes (namely the curve values at nodes)\nand the connecting curve types.\nThe naming scheme is as follows:\nIn the middle there is a bar \u003ctt\u003e|\u003c/tt\u003e.\nWith respect to the bar,\nthe pad symbol \u003ctt\u003e#\u003c/tt\u003e is at the side of the curve type,\nat the other side there is nothing, a minus sign \u003ctt\u003e-\u003c/tt\u003e, or an equality sign \u003ctt\u003e=\u003c/tt\u003e.\n\u003c/p\u003e\u003col\u003e\u003cli\u003e Nothing means that here is the start or the end node of a curve.\n\u003c/li\u003e\u003cli\u003e Minus means that here is a node where left and right curve meet at the same value.\n     The node description is thus one value.\n\u003c/li\u003e\u003cli\u003e Equality sign means that here is a split node,\n     where left and right curve might have different ending and beginning values, respectively.\n     The node description consists of a pair of values.\n\u003c/li\u003e\u003c/ol\u003e",
        "fct-module": "Synthesizer.Generic.Control",
        "fct-package": "synthesizer",
        "fct-signature": "(y, Control y) -\u003e (PieceRightSingle y, [ControlPiece y]) -\u003e (ControlDist y, [ControlPiece y])",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Control.html#%23%7C-",
        "fct-type": "unknown",
        "title": "#|-"
      },
      "index": {
        "description": "The operators simplify constructing list of ControlPiece The description consists of nodes namely the curve values at nodes and the connecting curve types The naming scheme is as follows In the middle there is bar With respect to the bar the pad symbol is at the side of the curve type at the other side there is nothing minus sign or an equality sign Nothing means that here is the start or the end node of curve Minus means that here is node where left and right curve meet at the same value The node description is thus one value Equality sign means that here is split node where left and right curve might have different ending and beginning values respectively The node description consists of pair of values",
        "hierarchy": "Synthesizer Generic Control",
        "module": "Synthesizer.Generic.Control",
        "name": "#|-",
        "normalized": "(a,Control a)-\u003e(PieceRightSingle a,[ControlPiece a])-\u003e(ControlDist a,[ControlPiece a])",
        "package": "synthesizer",
        "partial": "",
        "signature": "(y,Control y)-\u003e(PieceRightSingle y,[ControlPiece y])-\u003e(ControlDist y,[ControlPiece y])"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Control.html#v:#|=",
      "description": {
        "fct-module": "Synthesizer.Generic.Control",
        "fct-package": "synthesizer",
        "fct-signature": "(y, Control y) -\u003e (PieceRightDouble y, [ControlPiece y]) -\u003e (ControlDist y, [ControlPiece y])",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Control.html#%23%7C%3D",
        "fct-type": "unknown",
        "title": "#|="
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Control",
        "module": "Synthesizer.Generic.Control",
        "name": "#|=",
        "normalized": "(a,Control a)-\u003e(PieceRightDouble a,[ControlPiece a])-\u003e(ControlDist a,[ControlPiece a])",
        "package": "synthesizer",
        "partial": "",
        "signature": "(y,Control y)-\u003e(PieceRightDouble y,[ControlPiece y])-\u003e(ControlDist y,[ControlPiece y])"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Control.html#v:-|#",
      "description": {
        "fct-module": "Synthesizer.Generic.Control",
        "fct-package": "synthesizer",
        "fct-signature": "y -\u003e (ControlDist y, [ControlPiece y]) -\u003e (PieceRightSingle y, [ControlPiece y])",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Control.html#-%7C%23",
        "fct-type": "unknown",
        "title": "-|#"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Control",
        "module": "Synthesizer.Generic.Control",
        "name": "-|#",
        "normalized": "a-\u003e(ControlDist a,[ControlPiece a])-\u003e(PieceRightSingle a,[ControlPiece a])",
        "package": "synthesizer",
        "partial": "",
        "signature": "y-\u003e(ControlDist y,[ControlPiece y])-\u003e(PieceRightSingle y,[ControlPiece y])"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Control.html#v:=|#",
      "description": {
        "fct-module": "Synthesizer.Generic.Control",
        "fct-package": "synthesizer",
        "fct-signature": "(y, y) -\u003e (ControlDist y, [ControlPiece y]) -\u003e (PieceRightDouble y, [ControlPiece y])",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Control.html#%3D%7C%23",
        "fct-type": "unknown",
        "title": "=|#"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Control",
        "module": "Synthesizer.Generic.Control",
        "name": "=|#",
        "normalized": "(a,a)-\u003e(ControlDist a,[ControlPiece a])-\u003e(PieceRightDouble a,[ControlPiece a])",
        "package": "synthesizer",
        "partial": "",
        "signature": "(y,y)-\u003e(ControlDist y,[ControlPiece y])-\u003e(PieceRightDouble y,[ControlPiece y])"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Control.html#v:constant",
      "description": {
        "fct-module": "Synthesizer.Generic.Control",
        "fct-package": "synthesizer",
        "fct-signature": "LazySize -\u003e y -\u003e sig y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Control.html#constant",
        "fct-type": "unknown",
        "title": "constant"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Control",
        "module": "Synthesizer.Generic.Control",
        "name": "constant",
        "normalized": "LazySize-\u003ea-\u003eb a",
        "package": "synthesizer",
        "partial": "",
        "signature": "LazySize-\u003ey-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Control.html#v:cosine",
      "description": {
        "fct-descr": "time t0 where  1 is approached \ntime t1 where -1 is approached \na cosine wave where one half wave is between t0 and t1 \n",
        "fct-module": "Synthesizer.Generic.Control",
        "fct-package": "synthesizer",
        "fct-signature": "LazySize-\u003e y-\u003e y-\u003e sig y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Control.html#cosine",
        "fct-type": "unknown",
        "title": "cosine"
      },
      "index": {
        "description": "time t0 where is approached time t1 where is approached cosine wave where one half wave is between t0 and t1",
        "hierarchy": "Synthesizer Generic Control",
        "module": "Synthesizer.Generic.Control",
        "name": "cosine",
        "normalized": "LazySize-\u003ea-\u003ea-\u003eb a",
        "package": "synthesizer",
        "partial": "",
        "signature": "LazySize-\u003ey-\u003ey-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Control.html#v:cosineMultiscale",
      "description": {
        "fct-descr": "time t0 where  1 is approached \ntime t1 where -1 is approached \na cosine wave where one half wave is between t0 and t1 \n",
        "fct-module": "Synthesizer.Generic.Control",
        "fct-package": "synthesizer",
        "fct-signature": "LazySize-\u003e y-\u003e y-\u003e sig y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Control.html#cosineMultiscale",
        "fct-type": "unknown",
        "title": "cosineMultiscale"
      },
      "index": {
        "description": "time t0 where is approached time t1 where is approached cosine wave where one half wave is between t0 and t1",
        "hierarchy": "Synthesizer Generic Control",
        "module": "Synthesizer.Generic.Control",
        "name": "cosineMultiscale",
        "normalized": "LazySize-\u003ea-\u003ea-\u003eb a",
        "package": "synthesizer",
        "partial": "Multiscale",
        "signature": "LazySize-\u003ey-\u003ey-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Control.html#v:cosineMultiscaleLinear",
      "description": {
        "fct-descr": "time t0 where  1 is approached \ntime t1 where -1 is approached \na cosine wave where one half wave is between t0 and t1 \n",
        "fct-module": "Synthesizer.Generic.Control",
        "fct-package": "synthesizer",
        "fct-signature": "LazySize-\u003e y-\u003e y-\u003e sig y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Control.html#cosineMultiscaleLinear",
        "fct-type": "unknown",
        "title": "cosineMultiscaleLinear"
      },
      "index": {
        "description": "time t0 where is approached time t1 where is approached cosine wave where one half wave is between t0 and t1",
        "hierarchy": "Synthesizer Generic Control",
        "module": "Synthesizer.Generic.Control",
        "name": "cosineMultiscaleLinear",
        "normalized": "LazySize-\u003ea-\u003ea-\u003eb a",
        "package": "synthesizer",
        "partial": "Multiscale Linear",
        "signature": "LazySize-\u003ey-\u003ey-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Control.html#v:cosineWithSlope",
      "description": {
        "fct-module": "Synthesizer.Generic.Control",
        "fct-package": "synthesizer",
        "fct-signature": "(y -\u003e y -\u003e signal) -\u003e y -\u003e y -\u003e signal",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Control.html#cosineWithSlope",
        "fct-type": "unknown",
        "title": "cosineWithSlope"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Control",
        "module": "Synthesizer.Generic.Control",
        "name": "cosineWithSlope",
        "normalized": "(a-\u003ea-\u003eb)-\u003ea-\u003ea-\u003eb",
        "package": "synthesizer",
        "partial": "With Slope",
        "signature": "(y-\u003ey-\u003esignal)-\u003ey-\u003ey-\u003esignal"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Control.html#v:cubicFunc",
      "description": {
        "fct-descr": "0                                     16\n0               8                     16\n0       4       8         12          16\n0   2   4   6   8   10    12    14    16\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\n",
        "fct-module": "Synthesizer.Generic.Control",
        "fct-package": "synthesizer",
        "fct-signature": "(y, (y, y)) -\u003e (y, (y, y)) -\u003e y -\u003e y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Control.html#cubicFunc",
        "fct-type": "unknown",
        "title": "cubicFunc"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Control",
        "module": "Synthesizer.Generic.Control",
        "name": "cubicFunc",
        "normalized": "(a,(a,a))-\u003e(a,(a,a))-\u003ea-\u003ea",
        "package": "synthesizer",
        "partial": "Func",
        "signature": "(y,(y,y))-\u003e(y,(y,y))-\u003ey-\u003ey"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Control.html#v:cubicHermite",
      "description": {
        "fct-module": "Synthesizer.Generic.Control",
        "fct-package": "synthesizer",
        "fct-signature": "LazySize -\u003e (y, (y, y)) -\u003e (y, (y, y)) -\u003e sig y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Control.html#cubicHermite",
        "fct-type": "unknown",
        "title": "cubicHermite"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Control",
        "module": "Synthesizer.Generic.Control",
        "name": "cubicHermite",
        "normalized": "LazySize-\u003e(a,(a,a))-\u003e(a,(a,a))-\u003eb a",
        "package": "synthesizer",
        "partial": "Hermite",
        "signature": "LazySize-\u003e(y,(y,y))-\u003e(y,(y,y))-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Control.html#v:curveMultiscale",
      "description": {
        "fct-module": "Synthesizer.Generic.Control",
        "fct-package": "synthesizer",
        "fct-signature": "LazySize -\u003e (y -\u003e y -\u003e y) -\u003e y -\u003e y -\u003e sig y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Control.html#curveMultiscale",
        "fct-type": "unknown",
        "title": "curveMultiscale"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Control",
        "module": "Synthesizer.Generic.Control",
        "name": "curveMultiscale",
        "normalized": "LazySize-\u003e(a-\u003ea-\u003ea)-\u003ea-\u003ea-\u003eb a",
        "package": "synthesizer",
        "partial": "Multiscale",
        "signature": "LazySize-\u003e(y-\u003ey-\u003ey)-\u003ey-\u003ey-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Control.html#v:curveMultiscaleNeutral",
      "description": {
        "fct-module": "Synthesizer.Generic.Control",
        "fct-package": "synthesizer",
        "fct-signature": "LazySize -\u003e (y -\u003e y -\u003e y) -\u003e y -\u003e y -\u003e sig y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Control.html#curveMultiscaleNeutral",
        "fct-type": "unknown",
        "title": "curveMultiscaleNeutral"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Control",
        "module": "Synthesizer.Generic.Control",
        "name": "curveMultiscaleNeutral",
        "normalized": "LazySize-\u003e(a-\u003ea-\u003ea)-\u003ea-\u003ea-\u003eb a",
        "package": "synthesizer",
        "partial": "Multiscale Neutral",
        "signature": "LazySize-\u003e(y-\u003ey-\u003ey)-\u003ey-\u003ey-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Control.html#v:exponential",
      "description": {
        "fct-descr": "time where the function reaches 1/e of the initial value \ninitial value \nexponential decay \n",
        "fct-module": "Synthesizer.Generic.Control",
        "fct-package": "synthesizer",
        "fct-signature": "LazySize-\u003e y-\u003e y-\u003e sig y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Control.html#exponential",
        "fct-type": "unknown",
        "title": "exponential"
      },
      "index": {
        "description": "time where the function reaches of the initial value initial value exponential decay",
        "hierarchy": "Synthesizer Generic Control",
        "module": "Synthesizer.Generic.Control",
        "name": "exponential",
        "normalized": "LazySize-\u003ea-\u003ea-\u003eb a",
        "package": "synthesizer",
        "partial": "",
        "signature": "LazySize-\u003ey-\u003ey-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Control.html#v:exponential2",
      "description": {
        "fct-descr": "half life \ninitial value \nexponential decay \n",
        "fct-module": "Synthesizer.Generic.Control",
        "fct-package": "synthesizer",
        "fct-signature": "LazySize-\u003e y-\u003e y-\u003e sig y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Control.html#exponential2",
        "fct-type": "unknown",
        "title": "exponential2"
      },
      "index": {
        "description": "half life initial value exponential decay",
        "hierarchy": "Synthesizer Generic Control",
        "module": "Synthesizer.Generic.Control",
        "name": "exponential2",
        "normalized": "LazySize-\u003ea-\u003ea-\u003eb a",
        "package": "synthesizer",
        "partial": "",
        "signature": "LazySize-\u003ey-\u003ey-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Control.html#v:exponential2Multiscale",
      "description": {
        "fct-descr": "half life \ninitial value \nexponential decay \n",
        "fct-module": "Synthesizer.Generic.Control",
        "fct-package": "synthesizer",
        "fct-signature": "LazySize-\u003e y-\u003e y-\u003e sig y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Control.html#exponential2Multiscale",
        "fct-type": "unknown",
        "title": "exponential2Multiscale"
      },
      "index": {
        "description": "half life initial value exponential decay",
        "hierarchy": "Synthesizer Generic Control",
        "module": "Synthesizer.Generic.Control",
        "name": "exponential2Multiscale",
        "normalized": "LazySize-\u003ea-\u003ea-\u003eb a",
        "package": "synthesizer",
        "partial": "Multiscale",
        "signature": "LazySize-\u003ey-\u003ey-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Control.html#v:exponential2MultiscaleNeutral",
      "description": {
        "fct-descr": "half life \nexponential decay \n",
        "fct-module": "Synthesizer.Generic.Control",
        "fct-package": "synthesizer",
        "fct-signature": "LazySize-\u003e y-\u003e sig y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Control.html#exponential2MultiscaleNeutral",
        "fct-type": "unknown",
        "title": "exponential2MultiscaleNeutral"
      },
      "index": {
        "description": "half life exponential decay",
        "hierarchy": "Synthesizer Generic Control",
        "module": "Synthesizer.Generic.Control",
        "name": "exponential2MultiscaleNeutral",
        "normalized": "LazySize-\u003ea-\u003eb a",
        "package": "synthesizer",
        "partial": "Multiscale Neutral",
        "signature": "LazySize-\u003ey-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Control.html#v:exponentialMultiscale",
      "description": {
        "fct-descr": "time where the function reaches 1/e of the initial value \ninitial value \nexponential decay \n",
        "fct-module": "Synthesizer.Generic.Control",
        "fct-package": "synthesizer",
        "fct-signature": "LazySize-\u003e y-\u003e y-\u003e sig y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Control.html#exponentialMultiscale",
        "fct-type": "unknown",
        "title": "exponentialMultiscale"
      },
      "index": {
        "description": "time where the function reaches of the initial value initial value exponential decay",
        "hierarchy": "Synthesizer Generic Control",
        "module": "Synthesizer.Generic.Control",
        "name": "exponentialMultiscale",
        "normalized": "LazySize-\u003ea-\u003ea-\u003eb a",
        "package": "synthesizer",
        "partial": "Multiscale",
        "signature": "LazySize-\u003ey-\u003ey-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Control.html#v:exponentialMultiscaleNeutral",
      "description": {
        "fct-descr": "time where the function reaches 1/e of the initial value \nexponential decay \n",
        "fct-module": "Synthesizer.Generic.Control",
        "fct-package": "synthesizer",
        "fct-signature": "LazySize-\u003e y-\u003e sig y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Control.html#exponentialMultiscaleNeutral",
        "fct-type": "unknown",
        "title": "exponentialMultiscaleNeutral"
      },
      "index": {
        "description": "time where the function reaches of the initial value exponential decay",
        "hierarchy": "Synthesizer Generic Control",
        "module": "Synthesizer.Generic.Control",
        "name": "exponentialMultiscaleNeutral",
        "normalized": "LazySize-\u003ea-\u003eb a",
        "package": "synthesizer",
        "partial": "Multiscale Neutral",
        "signature": "LazySize-\u003ey-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Control.html#v:line",
      "description": {
        "fct-descr": "length \ninitial and final value \nlinear progression \n",
        "fct-module": "Synthesizer.Generic.Control",
        "fct-package": "synthesizer",
        "fct-signature": "LazySize-\u003e Int-\u003e (y, y)-\u003e sig y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Control.html#line",
        "fct-type": "unknown",
        "title": "line"
      },
      "index": {
        "description": "length initial and final value linear progression",
        "hierarchy": "Synthesizer Generic Control",
        "module": "Synthesizer.Generic.Control",
        "name": "line",
        "normalized": "LazySize-\u003eInt-\u003e(a,a)-\u003eb a",
        "package": "synthesizer",
        "partial": "",
        "signature": "LazySize-\u003eInt-\u003e(y,y)-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Control.html#v:linear",
      "description": {
        "fct-descr": "steepness \ninitial value \nlinear progression \n",
        "fct-module": "Synthesizer.Generic.Control",
        "fct-package": "synthesizer",
        "fct-signature": "LazySize-\u003e y-\u003e y-\u003e sig y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Control.html#linear",
        "fct-type": "unknown",
        "title": "linear"
      },
      "index": {
        "description": "steepness initial value linear progression",
        "hierarchy": "Synthesizer Generic Control",
        "module": "Synthesizer.Generic.Control",
        "name": "linear",
        "normalized": "LazySize-\u003ea-\u003ea-\u003eb a",
        "package": "synthesizer",
        "partial": "",
        "signature": "LazySize-\u003ey-\u003ey-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Control.html#v:linearMultiscale",
      "description": {
        "fct-descr": "Minimize rounding errors by reducing number of operations per element\nto a logarithmuc number.\n",
        "fct-module": "Synthesizer.Generic.Control",
        "fct-package": "synthesizer",
        "fct-signature": "LazySize -\u003e y -\u003e y -\u003e sig y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Control.html#linearMultiscale",
        "fct-type": "unknown",
        "title": "linearMultiscale"
      },
      "index": {
        "description": "Minimize rounding errors by reducing number of operations per element to logarithmuc number",
        "hierarchy": "Synthesizer Generic Control",
        "module": "Synthesizer.Generic.Control",
        "name": "linearMultiscale",
        "normalized": "LazySize-\u003ea-\u003ea-\u003eb a",
        "package": "synthesizer",
        "partial": "Multiscale",
        "signature": "LazySize-\u003ey-\u003ey-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Control.html#v:linearMultiscaleNeutral",
      "description": {
        "fct-descr": "Linear curve starting at zero.\n",
        "fct-module": "Synthesizer.Generic.Control",
        "fct-package": "synthesizer",
        "fct-signature": "LazySize -\u003e y -\u003e sig y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Control.html#linearMultiscaleNeutral",
        "fct-type": "unknown",
        "title": "linearMultiscaleNeutral"
      },
      "index": {
        "description": "Linear curve starting at zero",
        "hierarchy": "Synthesizer Generic Control",
        "module": "Synthesizer.Generic.Control",
        "name": "linearMultiscaleNeutral",
        "normalized": "LazySize-\u003ea-\u003eb a",
        "package": "synthesizer",
        "partial": "Multiscale Neutral",
        "signature": "LazySize-\u003ey-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Control.html#v:piecewise",
      "description": {
        "fct-module": "Synthesizer.Generic.Control",
        "fct-package": "synthesizer",
        "fct-signature": "LazySize -\u003e [ControlPiece y] -\u003e sig y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Control.html#piecewise",
        "fct-type": "unknown",
        "title": "piecewise"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Control",
        "module": "Synthesizer.Generic.Control",
        "name": "piecewise",
        "normalized": "LazySize-\u003e[ControlPiece a]-\u003eb a",
        "package": "synthesizer",
        "partial": "",
        "signature": "LazySize-\u003e[ControlPiece y]-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Control.html#v:piecewisePart",
      "description": {
        "fct-module": "Synthesizer.Generic.Control",
        "fct-package": "synthesizer",
        "fct-signature": "LazySize -\u003e y -\u003e y -\u003e y -\u003e y -\u003e Int -\u003e Control y -\u003e sig y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Control.html#piecewisePart",
        "fct-type": "unknown",
        "title": "piecewisePart"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Control",
        "module": "Synthesizer.Generic.Control",
        "name": "piecewisePart",
        "normalized": "LazySize-\u003ea-\u003ea-\u003ea-\u003ea-\u003eInt-\u003eControl a-\u003eb a",
        "package": "synthesizer",
        "partial": "Part",
        "signature": "LazySize-\u003ey-\u003ey-\u003ey-\u003ey-\u003eInt-\u003eControl y-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Control.html#v:vectorExponential",
      "description": {
        "fct-descr": "time where the function reaches 1/e of the initial value \ninitial value \nexponential decay \n",
        "fct-module": "Synthesizer.Generic.Control",
        "fct-package": "synthesizer",
        "fct-signature": "LazySize-\u003e y-\u003e v-\u003e sig v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Control.html#vectorExponential",
        "fct-type": "unknown",
        "title": "vectorExponential"
      },
      "index": {
        "description": "time where the function reaches of the initial value initial value exponential decay",
        "hierarchy": "Synthesizer Generic Control",
        "module": "Synthesizer.Generic.Control",
        "name": "vectorExponential",
        "normalized": "LazySize-\u003ea-\u003eb-\u003ec b",
        "package": "synthesizer",
        "partial": "Exponential",
        "signature": "LazySize-\u003ey-\u003ev-\u003esig v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Control.html#v:vectorExponential2",
      "description": {
        "fct-descr": "half life \ninitial value \nexponential decay \n",
        "fct-module": "Synthesizer.Generic.Control",
        "fct-package": "synthesizer",
        "fct-signature": "LazySize-\u003e y-\u003e v-\u003e sig v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Control.html#vectorExponential2",
        "fct-type": "unknown",
        "title": "vectorExponential2"
      },
      "index": {
        "description": "half life initial value exponential decay",
        "hierarchy": "Synthesizer Generic Control",
        "module": "Synthesizer.Generic.Control",
        "name": "vectorExponential2",
        "normalized": "LazySize-\u003ea-\u003eb-\u003ec b",
        "package": "synthesizer",
        "partial": "Exponential",
        "signature": "LazySize-\u003ey-\u003ev-\u003esig v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Control.html#v:|#",
      "description": {
        "fct-module": "Synthesizer.Generic.Control",
        "fct-package": "synthesizer",
        "fct-signature": "y -\u003e (ControlDist y, [ControlPiece y]) -\u003e [ControlPiece y]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Control.html#%7C%23",
        "fct-type": "unknown",
        "title": "|#"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Control",
        "module": "Synthesizer.Generic.Control",
        "name": "|#",
        "normalized": "a-\u003e(ControlDist a,[ControlPiece a])-\u003e[ControlPiece a]",
        "package": "synthesizer",
        "partial": "",
        "signature": "y-\u003e(ControlDist y,[ControlPiece y])-\u003e[ControlPiece y]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Cut.html#v:Read",
      "description": {
        "fct-module": "Synthesizer.Generic.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "class",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Cut.html#Read",
        "fct-type": "unknown",
        "title": "Read"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Cut",
        "module": "Synthesizer.Generic.Cut",
        "name": "Read",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Read",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Cut.html#v:Transform",
      "description": {
        "fct-module": "Synthesizer.Generic.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "class",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Cut.html#Transform",
        "fct-type": "unknown",
        "title": "Transform"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Cut",
        "module": "Synthesizer.Generic.Cut",
        "name": "Transform",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Transform",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Cut.html#v:append",
      "description": {
        "fct-module": "Synthesizer.Generic.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "sig -\u003e sig -\u003e sig",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Cut.html#append",
        "fct-type": "unknown",
        "title": "append"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Cut",
        "module": "Synthesizer.Generic.Cut",
        "name": "append",
        "normalized": "a-\u003ea-\u003ea",
        "package": "synthesizer",
        "partial": "",
        "signature": "sig-\u003esig-\u003esig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Cut.html#v:concat",
      "description": {
        "fct-module": "Synthesizer.Generic.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "[sig] -\u003e sig",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Cut.html#concat",
        "fct-type": "unknown",
        "title": "concat"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Cut",
        "module": "Synthesizer.Generic.Cut",
        "name": "concat",
        "normalized": "[a]-\u003ea",
        "package": "synthesizer",
        "partial": "",
        "signature": "[sig]-\u003esig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Cut.html#v:cycle",
      "description": {
        "fct-module": "Synthesizer.Generic.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "sig -\u003e sig",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Cut.html#cycle",
        "fct-type": "unknown",
        "title": "cycle"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Cut",
        "module": "Synthesizer.Generic.Cut",
        "name": "cycle",
        "normalized": "a-\u003ea",
        "package": "synthesizer",
        "partial": "",
        "signature": "sig-\u003esig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Cut.html#v:drop",
      "description": {
        "fct-module": "Synthesizer.Generic.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e sig -\u003e sig",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Cut.html#drop",
        "fct-type": "unknown",
        "title": "drop"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Cut",
        "module": "Synthesizer.Generic.Cut",
        "name": "drop",
        "normalized": "Int-\u003ea-\u003ea",
        "package": "synthesizer",
        "partial": "",
        "signature": "Int-\u003esig-\u003esig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Cut.html#v:dropMarginRem",
      "description": {
        "fct-module": "Synthesizer.Generic.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e Int -\u003e sig -\u003e (Int, sig)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Cut.html#dropMarginRem",
        "fct-type": "unknown",
        "title": "dropMarginRem"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Cut",
        "module": "Synthesizer.Generic.Cut",
        "name": "dropMarginRem",
        "normalized": "Int-\u003eInt-\u003ea-\u003e(Int,a)",
        "package": "synthesizer",
        "partial": "Margin Rem",
        "signature": "Int-\u003eInt-\u003esig-\u003e(Int,sig)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Cut.html#v:empty",
      "description": {
        "fct-module": "Synthesizer.Generic.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "sig",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Cut.html#empty",
        "fct-type": "unknown",
        "title": "empty"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Cut",
        "module": "Synthesizer.Generic.Cut",
        "name": "empty",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Cut.html#v:intToChunky",
      "description": {
        "fct-module": "Synthesizer.Generic.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "String -\u003e Int -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Cut.html#intToChunky",
        "fct-type": "unknown",
        "title": "intToChunky"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Cut",
        "module": "Synthesizer.Generic.Cut",
        "name": "intToChunky",
        "normalized": "String-\u003eInt-\u003eT a",
        "package": "synthesizer",
        "partial": "To Chunky",
        "signature": "String-\u003eInt-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Cut.html#v:length",
      "description": {
        "fct-module": "Synthesizer.Generic.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "sig -\u003e Int",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Cut.html#length",
        "fct-type": "unknown",
        "title": "length"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Cut",
        "module": "Synthesizer.Generic.Cut",
        "name": "length",
        "normalized": "a-\u003eInt",
        "package": "synthesizer",
        "partial": "",
        "signature": "sig-\u003eInt"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Cut.html#v:lengthAtLeast",
      "description": {
        "fct-descr": "Like \u003ctt\u003elengthAtLeast n xs  =  length xs \u003e= n\u003c/tt\u003e,\nbut is more efficient, because it is more lazy.\n",
        "fct-module": "Synthesizer.Generic.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e sig -\u003e Bool",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Cut.html#lengthAtLeast",
        "fct-type": "unknown",
        "title": "lengthAtLeast"
      },
      "index": {
        "description": "Like lengthAtLeast xs length xs but is more efficient because it is more lazy",
        "hierarchy": "Synthesizer Generic Cut",
        "module": "Synthesizer.Generic.Cut",
        "name": "lengthAtLeast",
        "normalized": "Int-\u003ea-\u003eBool",
        "package": "synthesizer",
        "partial": "At Least",
        "signature": "Int-\u003esig-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Cut.html#v:lengthAtMost",
      "description": {
        "fct-module": "Synthesizer.Generic.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e sig -\u003e Bool",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Cut.html#lengthAtMost",
        "fct-type": "unknown",
        "title": "lengthAtMost"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Cut",
        "module": "Synthesizer.Generic.Cut",
        "name": "lengthAtMost",
        "normalized": "Int-\u003ea-\u003eBool",
        "package": "synthesizer",
        "partial": "At Most",
        "signature": "Int-\u003esig-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Cut.html#v:null",
      "description": {
        "fct-module": "Synthesizer.Generic.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "sig -\u003e Bool",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Cut.html#null",
        "fct-type": "unknown",
        "title": "null"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Cut",
        "module": "Synthesizer.Generic.Cut",
        "name": "null",
        "normalized": "a-\u003eBool",
        "package": "synthesizer",
        "partial": "",
        "signature": "sig-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Cut.html#v:reverse",
      "description": {
        "fct-module": "Synthesizer.Generic.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "sig -\u003e sig",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Cut.html#reverse",
        "fct-type": "unknown",
        "title": "reverse"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Cut",
        "module": "Synthesizer.Generic.Cut",
        "name": "reverse",
        "normalized": "a-\u003ea",
        "package": "synthesizer",
        "partial": "",
        "signature": "sig-\u003esig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Cut.html#v:sliceVertical",
      "description": {
        "fct-module": "Synthesizer.Generic.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e sig -\u003e T sig",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Cut.html#sliceVertical",
        "fct-type": "unknown",
        "title": "sliceVertical"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Cut",
        "module": "Synthesizer.Generic.Cut",
        "name": "sliceVertical",
        "normalized": "Int-\u003ea-\u003eT a",
        "package": "synthesizer",
        "partial": "Vertical",
        "signature": "Int-\u003esig-\u003eT sig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Cut.html#v:splitAt",
      "description": {
        "fct-module": "Synthesizer.Generic.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e sig -\u003e (sig, sig)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Cut.html#splitAt",
        "fct-type": "unknown",
        "title": "splitAt"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Cut",
        "module": "Synthesizer.Generic.Cut",
        "name": "splitAt",
        "normalized": "Int-\u003ea-\u003e(a,a)",
        "package": "synthesizer",
        "partial": "At",
        "signature": "Int-\u003esig-\u003e(sig,sig)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Cut.html#v:take",
      "description": {
        "fct-module": "Synthesizer.Generic.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e sig -\u003e sig",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Cut.html#take",
        "fct-type": "unknown",
        "title": "take"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Cut",
        "module": "Synthesizer.Generic.Cut",
        "name": "take",
        "normalized": "Int-\u003ea-\u003ea",
        "package": "synthesizer",
        "partial": "",
        "signature": "Int-\u003esig-\u003esig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Displacement.html#v:distort",
      "description": {
        "fct-descr": "In \u003ca\u003eSynthesizer.Basic.Distortion\u003c/a\u003e you find a collection\nof appropriate distortion functions.\n",
        "fct-module": "Synthesizer.Generic.Displacement",
        "fct-package": "synthesizer",
        "fct-signature": "(c -\u003e v -\u003e v) -\u003e sig c -\u003e sig v -\u003e sig v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Displacement.html#distort",
        "fct-type": "unknown",
        "title": "distort"
      },
      "index": {
        "description": "In Synthesizer.Basic.Distortion you find collection of appropriate distortion functions",
        "hierarchy": "Synthesizer Generic Displacement",
        "module": "Synthesizer.Generic.Displacement",
        "name": "distort",
        "normalized": "(a-\u003eb-\u003eb)-\u003ec a-\u003ec b-\u003ec b",
        "package": "synthesizer",
        "partial": "",
        "signature": "(c-\u003ev-\u003ev)-\u003esig c-\u003esig v-\u003esig v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Displacement.html#v:mix",
      "description": {
        "fct-descr": "Mix two signals.\n    In opposition to \u003ctt\u003e\u003ca\u003ezipWith\u003c/a\u003e\u003c/tt\u003e the result has the length of the longer signal. \n",
        "fct-module": "Synthesizer.Generic.Displacement",
        "fct-package": "synthesizer",
        "fct-signature": "sig v -\u003e sig v -\u003e sig v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Displacement.html#mix",
        "fct-type": "unknown",
        "title": "mix"
      },
      "index": {
        "description": "Mix two signals In opposition to zipWith the result has the length of the longer signal",
        "hierarchy": "Synthesizer Generic Displacement",
        "module": "Synthesizer.Generic.Displacement",
        "name": "mix",
        "normalized": "a b-\u003ea b-\u003ea b",
        "package": "synthesizer",
        "partial": "",
        "signature": "sig v-\u003esig v-\u003esig v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Displacement.html#v:mixMulti",
      "description": {
        "fct-descr": "Mix one or more signals. \n",
        "fct-module": "Synthesizer.Generic.Displacement",
        "fct-package": "synthesizer",
        "fct-signature": "[sig v] -\u003e sig v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Displacement.html#mixMulti",
        "fct-type": "unknown",
        "title": "mixMulti"
      },
      "index": {
        "description": "Mix one or more signals",
        "hierarchy": "Synthesizer Generic Displacement",
        "module": "Synthesizer.Generic.Displacement",
        "name": "mixMulti",
        "normalized": "[a b]-\u003ea b",
        "package": "synthesizer",
        "partial": "Multi",
        "signature": "[sig v]-\u003esig v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Displacement.html#v:raise",
      "description": {
        "fct-descr": "Add a number to all of the signal values.\n    This is useful for adjusting the center of a modulation. \n",
        "fct-module": "Synthesizer.Generic.Displacement",
        "fct-package": "synthesizer",
        "fct-signature": "v -\u003e sig v -\u003e sig v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Displacement.html#raise",
        "fct-type": "unknown",
        "title": "raise"
      },
      "index": {
        "description": "Add number to all of the signal values This is useful for adjusting the center of modulation",
        "hierarchy": "Synthesizer Generic Displacement",
        "module": "Synthesizer.Generic.Displacement",
        "name": "raise",
        "normalized": "a-\u003eb a-\u003eb a",
        "package": "synthesizer",
        "partial": "",
        "signature": "v-\u003esig v-\u003esig v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Filter-Delay.html#v:modulated",
      "description": {
        "fct-descr": "This is essentially different for constant interpolation,\nbecause this function \u003ca\u003elooks forward\u003c/a\u003e\nwhereas the other two variants \u003ca\u003elook backward\u003c/a\u003e.\nFor the symmetric interpolation functions\nof linear and cubic interpolation, this does not really matter.\n",
        "fct-module": "Synthesizer.Generic.Filter.Delay",
        "fct-package": "synthesizer",
        "fct-signature": "T t y -\u003e Int -\u003e sig t -\u003e sig y -\u003e sig y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Filter-Delay.html#modulated",
        "fct-type": "unknown",
        "title": "modulated"
      },
      "index": {
        "description": "This is essentially different for constant interpolation because this function looks forward whereas the other two variants look backward For the symmetric interpolation functions of linear and cubic interpolation this does not really matter",
        "hierarchy": "Synthesizer Generic Filter Delay",
        "module": "Synthesizer.Generic.Filter.Delay",
        "name": "modulated",
        "normalized": "T a b-\u003eInt-\u003ec a-\u003ec b-\u003ec b",
        "package": "synthesizer",
        "partial": "",
        "signature": "T t y-\u003eInt-\u003esig t-\u003esig y-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Filter-Delay.html#v:modulatedCore",
      "description": {
        "fct-module": "Synthesizer.Generic.Filter.Delay",
        "fct-package": "synthesizer",
        "fct-signature": "T t y -\u003e Int -\u003e sig t -\u003e sig y -\u003e sig y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Filter-Delay.html#modulatedCore",
        "fct-type": "unknown",
        "title": "modulatedCore"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Filter Delay",
        "module": "Synthesizer.Generic.Filter.Delay",
        "name": "modulatedCore",
        "normalized": "T a b-\u003eInt-\u003ec a-\u003ec b-\u003ec b",
        "package": "synthesizer",
        "partial": "Core",
        "signature": "T t y-\u003eInt-\u003esig t-\u003esig y-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Filter-Delay.html#v:static",
      "description": {
        "fct-module": "Synthesizer.Generic.Filter.Delay",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e sig y -\u003e sig y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Filter-Delay.html#static",
        "fct-type": "unknown",
        "title": "static"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Filter Delay",
        "module": "Synthesizer.Generic.Filter.Delay",
        "name": "static",
        "normalized": "Int-\u003ea b-\u003ea b",
        "package": "synthesizer",
        "partial": "",
        "signature": "Int-\u003esig y-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Filter-Delay.html#v:staticNeg",
      "description": {
        "fct-module": "Synthesizer.Generic.Filter.Delay",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e sig y -\u003e sig y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Filter-Delay.html#staticNeg",
        "fct-type": "unknown",
        "title": "staticNeg"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Filter Delay",
        "module": "Synthesizer.Generic.Filter.Delay",
        "name": "staticNeg",
        "normalized": "Int-\u003ea b-\u003ea b",
        "package": "synthesizer",
        "partial": "Neg",
        "signature": "Int-\u003esig y-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Filter-Delay.html#v:staticPad",
      "description": {
        "fct-module": "Synthesizer.Generic.Filter.Delay",
        "fct-package": "synthesizer",
        "fct-signature": "y -\u003e Int -\u003e sig y -\u003e sig y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Filter-Delay.html#staticPad",
        "fct-type": "unknown",
        "title": "staticPad"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Filter Delay",
        "module": "Synthesizer.Generic.Filter.Delay",
        "name": "staticPad",
        "normalized": "a-\u003eInt-\u003eb a-\u003eb a",
        "package": "synthesizer",
        "partial": "Pad",
        "signature": "y-\u003eInt-\u003esig y-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Filter-Delay.html#v:staticPos",
      "description": {
        "fct-module": "Synthesizer.Generic.Filter.Delay",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e sig y -\u003e sig y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Filter-Delay.html#staticPos",
        "fct-type": "unknown",
        "title": "staticPos"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Filter Delay",
        "module": "Synthesizer.Generic.Filter.Delay",
        "name": "staticPos",
        "normalized": "Int-\u003ea b-\u003ea b",
        "package": "synthesizer",
        "partial": "Pos",
        "signature": "Int-\u003esig y-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Filter-NonRecursive.html#v:amplify",
      "description": {
        "fct-module": "Synthesizer.Generic.Filter.NonRecursive",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e sig a -\u003e sig a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Filter-NonRecursive.html#amplify",
        "fct-type": "unknown",
        "title": "amplify"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Filter NonRecursive",
        "module": "Synthesizer.Generic.Filter.NonRecursive",
        "name": "amplify",
        "normalized": "a-\u003eb a-\u003eb a",
        "package": "synthesizer",
        "partial": "",
        "signature": "a-\u003esig a-\u003esig a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Filter-NonRecursive.html#v:amplifyVector",
      "description": {
        "fct-module": "Synthesizer.Generic.Filter.NonRecursive",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e sig v -\u003e sig v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Filter-NonRecursive.html#amplifyVector",
        "fct-type": "unknown",
        "title": "amplifyVector"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Filter NonRecursive",
        "module": "Synthesizer.Generic.Filter.NonRecursive",
        "name": "amplifyVector",
        "normalized": "a-\u003eb c-\u003eb c",
        "package": "synthesizer",
        "partial": "Vector",
        "signature": "a-\u003esig v-\u003esig v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Filter-NonRecursive.html#v:binomial",
      "description": {
        "fct-module": "Synthesizer.Generic.Filter.NonRecursive",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e a -\u003e sig v -\u003e sig v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Filter-NonRecursive.html#binomial",
        "fct-type": "unknown",
        "title": "binomial"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Filter NonRecursive",
        "module": "Synthesizer.Generic.Filter.NonRecursive",
        "name": "binomial",
        "normalized": "a-\u003ea-\u003eb c-\u003eb c",
        "package": "synthesizer",
        "partial": "",
        "signature": "a-\u003ea-\u003esig v-\u003esig v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Filter-NonRecursive.html#v:binomial1",
      "description": {
        "fct-module": "Synthesizer.Generic.Filter.NonRecursive",
        "fct-package": "synthesizer",
        "fct-signature": "sig v -\u003e sig v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Filter-NonRecursive.html#binomial1",
        "fct-type": "unknown",
        "title": "binomial1"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Filter NonRecursive",
        "module": "Synthesizer.Generic.Filter.NonRecursive",
        "name": "binomial1",
        "normalized": "a b-\u003ea b",
        "package": "synthesizer",
        "partial": "",
        "signature": "sig v-\u003esig v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Filter-NonRecursive.html#v:delay",
      "description": {
        "fct-module": "Synthesizer.Generic.Filter.NonRecursive",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e sig y -\u003e sig y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Filter-NonRecursive.html#delay",
        "fct-type": "unknown",
        "title": "delay"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Filter NonRecursive",
        "module": "Synthesizer.Generic.Filter.NonRecursive",
        "name": "delay",
        "normalized": "Int-\u003ea b-\u003ea b",
        "package": "synthesizer",
        "partial": "",
        "signature": "Int-\u003esig y-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Filter-NonRecursive.html#v:delayLazySize",
      "description": {
        "fct-module": "Synthesizer.Generic.Filter.NonRecursive",
        "fct-package": "synthesizer",
        "fct-signature": "LazySize -\u003e Int -\u003e sig y -\u003e sig y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Filter-NonRecursive.html#delayLazySize",
        "fct-type": "unknown",
        "title": "delayLazySize"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Filter NonRecursive",
        "module": "Synthesizer.Generic.Filter.NonRecursive",
        "name": "delayLazySize",
        "normalized": "LazySize-\u003eInt-\u003ea b-\u003ea b",
        "package": "synthesizer",
        "partial": "Lazy Size",
        "signature": "LazySize-\u003eInt-\u003esig y-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Filter-NonRecursive.html#v:delayNeg",
      "description": {
        "fct-module": "Synthesizer.Generic.Filter.NonRecursive",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e sig y -\u003e sig y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Filter-NonRecursive.html#delayNeg",
        "fct-type": "unknown",
        "title": "delayNeg"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Filter NonRecursive",
        "module": "Synthesizer.Generic.Filter.NonRecursive",
        "name": "delayNeg",
        "normalized": "Int-\u003ea b-\u003ea b",
        "package": "synthesizer",
        "partial": "Neg",
        "signature": "Int-\u003esig y-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Filter-NonRecursive.html#v:delayPad",
      "description": {
        "fct-module": "Synthesizer.Generic.Filter.NonRecursive",
        "fct-package": "synthesizer",
        "fct-signature": "y -\u003e Int -\u003e sig y -\u003e sig y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Filter-NonRecursive.html#delayPad",
        "fct-type": "unknown",
        "title": "delayPad"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Filter NonRecursive",
        "module": "Synthesizer.Generic.Filter.NonRecursive",
        "name": "delayPad",
        "normalized": "a-\u003eInt-\u003eb a-\u003eb a",
        "package": "synthesizer",
        "partial": "Pad",
        "signature": "y-\u003eInt-\u003esig y-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Filter-NonRecursive.html#v:delayPadLazySize",
      "description": {
        "fct-descr": "The pad value \u003ctt\u003ey\u003c/tt\u003e must be defined,\notherwise the chunk size of the padding can be observed.\n",
        "fct-module": "Synthesizer.Generic.Filter.NonRecursive",
        "fct-package": "synthesizer",
        "fct-signature": "LazySize -\u003e y -\u003e Int -\u003e sig y -\u003e sig y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Filter-NonRecursive.html#delayPadLazySize",
        "fct-type": "unknown",
        "title": "delayPadLazySize"
      },
      "index": {
        "description": "The pad value must be defined otherwise the chunk size of the padding can be observed",
        "hierarchy": "Synthesizer Generic Filter NonRecursive",
        "module": "Synthesizer.Generic.Filter.NonRecursive",
        "name": "delayPadLazySize",
        "normalized": "LazySize-\u003ea-\u003eInt-\u003eb a-\u003eb a",
        "package": "synthesizer",
        "partial": "Pad Lazy Size",
        "signature": "LazySize-\u003ey-\u003eInt-\u003esig y-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Filter-NonRecursive.html#v:delayPos",
      "description": {
        "fct-module": "Synthesizer.Generic.Filter.NonRecursive",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e sig y -\u003e sig y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Filter-NonRecursive.html#delayPos",
        "fct-type": "unknown",
        "title": "delayPos"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Filter NonRecursive",
        "module": "Synthesizer.Generic.Filter.NonRecursive",
        "name": "delayPos",
        "normalized": "Int-\u003ea b-\u003ea b",
        "package": "synthesizer",
        "partial": "Pos",
        "signature": "Int-\u003esig y-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Filter-NonRecursive.html#v:delayPosLazySize",
      "description": {
        "fct-module": "Synthesizer.Generic.Filter.NonRecursive",
        "fct-package": "synthesizer",
        "fct-signature": "LazySize -\u003e Int -\u003e sig y -\u003e sig y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Filter-NonRecursive.html#delayPosLazySize",
        "fct-type": "unknown",
        "title": "delayPosLazySize"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Filter NonRecursive",
        "module": "Synthesizer.Generic.Filter.NonRecursive",
        "name": "delayPosLazySize",
        "normalized": "LazySize-\u003eInt-\u003ea b-\u003ea b",
        "package": "synthesizer",
        "partial": "Pos Lazy Size",
        "signature": "LazySize-\u003eInt-\u003esig y-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Filter-NonRecursive.html#v:differentiate",
      "description": {
        "fct-descr": "Forward difference quotient.\nShortens the signal by one.\nInverts Synthesizer.Generic.Filter.Recursive.Integration.run in the sense that\n\u003ctt\u003edifferentiate (zero : integrate x) == x\u003c/tt\u003e.\nThe signal is shifted by a half time unit.\n",
        "fct-module": "Synthesizer.Generic.Filter.NonRecursive",
        "fct-package": "synthesizer",
        "fct-signature": "sig v -\u003e sig v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Filter-NonRecursive.html#differentiate",
        "fct-type": "unknown",
        "title": "differentiate"
      },
      "index": {
        "description": "Forward difference quotient Shortens the signal by one Inverts Synthesizer.Generic.Filter.Recursive.Integration.run in the sense that differentiate zero integrate The signal is shifted by half time unit",
        "hierarchy": "Synthesizer Generic Filter NonRecursive",
        "module": "Synthesizer.Generic.Filter.NonRecursive",
        "name": "differentiate",
        "normalized": "a b-\u003ea b",
        "package": "synthesizer",
        "partial": "",
        "signature": "sig v-\u003esig v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Filter-NonRecursive.html#v:differentiate2",
      "description": {
        "fct-descr": "Second derivative.\nIt is \u003ctt\u003edifferentiate2 == differentiate . differentiate\u003c/tt\u003e\nbut \u003ctt\u003e\u003ca\u003edifferentiate2\u003c/a\u003e\u003c/tt\u003e should be faster.\n",
        "fct-module": "Synthesizer.Generic.Filter.NonRecursive",
        "fct-package": "synthesizer",
        "fct-signature": "sig v -\u003e sig v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Filter-NonRecursive.html#differentiate2",
        "fct-type": "unknown",
        "title": "differentiate2"
      },
      "index": {
        "description": "Second derivative It is differentiate2 differentiate differentiate but differentiate2 should be faster",
        "hierarchy": "Synthesizer Generic Filter NonRecursive",
        "module": "Synthesizer.Generic.Filter.NonRecursive",
        "name": "differentiate2",
        "normalized": "a b-\u003ea b",
        "package": "synthesizer",
        "partial": "",
        "signature": "sig v-\u003esig v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Filter-NonRecursive.html#v:differentiateCenter",
      "description": {
        "fct-descr": "\u003cp\u003eCentral difference quotient.\nShortens the signal by two elements,\nand shifts the signal by one element.\n(Which can be fixed by prepending an appropriate value.)\nFor linear functions this will yield\nessentially the same result as \u003ctt\u003e\u003ca\u003edifferentiate\u003c/a\u003e\u003c/tt\u003e.\nYou obtain the result of \u003ctt\u003e\u003ca\u003edifferentiateCenter\u003c/a\u003e\u003c/tt\u003e\nif you smooth the one of \u003ctt\u003e\u003ca\u003edifferentiate\u003c/a\u003e\u003c/tt\u003e\nby averaging pairs of adjacent values.\n\u003c/p\u003e\u003cp\u003eToDo: Vector variant\n\u003c/p\u003e",
        "fct-module": "Synthesizer.Generic.Filter.NonRecursive",
        "fct-package": "synthesizer",
        "fct-signature": "sig v -\u003e sig v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Filter-NonRecursive.html#differentiateCenter",
        "fct-type": "unknown",
        "title": "differentiateCenter"
      },
      "index": {
        "description": "Central difference quotient Shortens the signal by two elements and shifts the signal by one element Which can be fixed by prepending an appropriate value For linear functions this will yield essentially the same result as differentiate You obtain the result of differentiateCenter if you smooth the one of differentiate by averaging pairs of adjacent values ToDo Vector variant",
        "hierarchy": "Synthesizer Generic Filter NonRecursive",
        "module": "Synthesizer.Generic.Filter.NonRecursive",
        "name": "differentiateCenter",
        "normalized": "a b-\u003ea b",
        "package": "synthesizer",
        "partial": "Center",
        "signature": "sig v-\u003esig v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Filter-NonRecursive.html#v:envelope",
      "description": {
        "fct-descr": "the envelope \nthe signal to be enveloped \n",
        "fct-module": "Synthesizer.Generic.Filter.NonRecursive",
        "fct-package": "synthesizer",
        "fct-signature": "sig a-\u003e sig a-\u003e sig a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Filter-NonRecursive.html#envelope",
        "fct-type": "unknown",
        "title": "envelope"
      },
      "index": {
        "description": "the envelope the signal to be enveloped",
        "hierarchy": "Synthesizer Generic Filter NonRecursive",
        "module": "Synthesizer.Generic.Filter.NonRecursive",
        "name": "envelope",
        "normalized": "a b-\u003ea b-\u003ea b",
        "package": "synthesizer",
        "partial": "",
        "signature": "sig a-\u003esig a-\u003esig a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Filter-NonRecursive.html#v:envelopeVector",
      "description": {
        "fct-descr": "the envelope \nthe signal to be enveloped \n",
        "fct-module": "Synthesizer.Generic.Filter.NonRecursive",
        "fct-package": "synthesizer",
        "fct-signature": "sig a-\u003e sig v-\u003e sig v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Filter-NonRecursive.html#envelopeVector",
        "fct-type": "unknown",
        "title": "envelopeVector"
      },
      "index": {
        "description": "the envelope the signal to be enveloped",
        "hierarchy": "Synthesizer Generic Filter NonRecursive",
        "module": "Synthesizer.Generic.Filter.NonRecursive",
        "name": "envelopeVector",
        "normalized": "a b-\u003ea c-\u003ea c",
        "package": "synthesizer",
        "partial": "Vector",
        "signature": "sig a-\u003esig v-\u003esig v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Filter-NonRecursive.html#v:fadeInOut",
      "description": {
        "fct-module": "Synthesizer.Generic.Filter.NonRecursive",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e Int -\u003e Int -\u003e sig a -\u003e sig a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Filter-NonRecursive.html#fadeInOut",
        "fct-type": "unknown",
        "title": "fadeInOut"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Filter NonRecursive",
        "module": "Synthesizer.Generic.Filter.NonRecursive",
        "name": "fadeInOut",
        "normalized": "Int-\u003eInt-\u003eInt-\u003ea b-\u003ea b",
        "package": "synthesizer",
        "partial": "In Out",
        "signature": "Int-\u003eInt-\u003eInt-\u003esig a-\u003esig a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Filter-NonRecursive.html#v:generic",
      "description": {
        "fct-descr": "Unmodulated non-recursive filter \n",
        "fct-module": "Synthesizer.Generic.Filter.NonRecursive",
        "fct-package": "synthesizer",
        "fct-signature": "sig a -\u003e sig v -\u003e sig v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Filter-NonRecursive.html#generic",
        "fct-type": "unknown",
        "title": "generic"
      },
      "index": {
        "description": "Unmodulated non-recursive filter",
        "hierarchy": "Synthesizer Generic Filter NonRecursive",
        "module": "Synthesizer.Generic.Filter.NonRecursive",
        "name": "generic",
        "normalized": "a b-\u003ea c-\u003ea c",
        "package": "synthesizer",
        "partial": "",
        "signature": "sig a-\u003esig v-\u003esig v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Filter-NonRecursive.html#v:negate",
      "description": {
        "fct-module": "Synthesizer.Generic.Filter.NonRecursive",
        "fct-package": "synthesizer",
        "fct-signature": "sig a -\u003e sig a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Filter-NonRecursive.html#negate",
        "fct-type": "unknown",
        "title": "negate"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Filter NonRecursive",
        "module": "Synthesizer.Generic.Filter.NonRecursive",
        "name": "negate",
        "normalized": "a b-\u003ea b",
        "package": "synthesizer",
        "partial": "",
        "signature": "sig a-\u003esig a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Filter-NonRecursive.html#v:ratioFreqToVariance",
      "description": {
        "fct-descr": "Compute the variance of the Gaussian\n  such that its Fourier transform has value \u003ctt\u003eratio\u003c/tt\u003e at frequency \u003ctt\u003efreq\u003c/tt\u003e.\n",
        "fct-module": "Synthesizer.Generic.Filter.NonRecursive",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e a -\u003e a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Filter-NonRecursive.html#ratioFreqToVariance",
        "fct-type": "unknown",
        "title": "ratioFreqToVariance"
      },
      "index": {
        "description": "Compute the variance of the Gaussian such that its Fourier transform has value ratio at frequency freq",
        "hierarchy": "Synthesizer Generic Filter NonRecursive",
        "module": "Synthesizer.Generic.Filter.NonRecursive",
        "name": "ratioFreqToVariance",
        "normalized": "a-\u003ea-\u003ea",
        "package": "synthesizer",
        "partial": "Freq To Variance",
        "signature": "a-\u003ea-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Filter-NonRecursive.html#v:sums",
      "description": {
        "fct-descr": "Moving (uniformly weighted) average in the most trivial form.\nThis is very slow and needs about \u003ctt\u003en * length x\u003c/tt\u003e operations.\n",
        "fct-module": "Synthesizer.Generic.Filter.NonRecursive",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e sig v -\u003e sig v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Filter-NonRecursive.html#sums",
        "fct-type": "unknown",
        "title": "sums"
      },
      "index": {
        "description": "Moving uniformly weighted average in the most trivial form This is very slow and needs about length operations",
        "hierarchy": "Synthesizer Generic Filter NonRecursive",
        "module": "Synthesizer.Generic.Filter.NonRecursive",
        "name": "sums",
        "normalized": "Int-\u003ea b-\u003ea b",
        "package": "synthesizer",
        "partial": "",
        "signature": "Int-\u003esig v-\u003esig v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Filter-Recursive-Comb.html#v:karplusStrong",
      "description": {
        "fct-descr": "The most simple version of the Karplus-Strong algorithm\nwhich is suitable to simulate a plucked string.\nIt is similar to the \u003ctt\u003e\u003ca\u003erunProc\u003c/a\u003e\u003c/tt\u003e function.\n",
        "fct-module": "Synthesizer.Generic.Filter.Recursive.Comb",
        "fct-package": "synthesizer",
        "fct-signature": "Parameter t -\u003e sig y -\u003e sig y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Filter-Recursive-Comb.html#karplusStrong",
        "fct-type": "unknown",
        "title": "karplusStrong"
      },
      "index": {
        "description": "The most simple version of the Karplus-Strong algorithm which is suitable to simulate plucked string It is similar to the runProc function",
        "hierarchy": "Synthesizer Generic Filter Recursive Comb",
        "module": "Synthesizer.Generic.Filter.Recursive.Comb",
        "name": "karplusStrong",
        "normalized": "Parameter a-\u003eb c-\u003eb c",
        "package": "synthesizer",
        "partial": "Strong",
        "signature": "Parameter t-\u003esig y-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Filter-Recursive-Comb.html#v:run",
      "description": {
        "fct-descr": "Infinitely many equi-delayed exponentially decaying echos.\nThe echos are clipped to the input length.\nWe think it is easier (and simpler to do efficiently)\nto pad the input with zeros or whatever\ninstead of cutting the result according to the input length.\n",
        "fct-module": "Synthesizer.Generic.Filter.Recursive.Comb",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e t -\u003e sig y -\u003e sig y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Filter-Recursive-Comb.html#run",
        "fct-type": "unknown",
        "title": "run"
      },
      "index": {
        "description": "Infinitely many equi-delayed exponentially decaying echos The echos are clipped to the input length We think it is easier and simpler to do efficiently to pad the input with zeros or whatever instead of cutting the result according to the input length",
        "hierarchy": "Synthesizer Generic Filter Recursive Comb",
        "module": "Synthesizer.Generic.Filter.Recursive.Comb",
        "name": "run",
        "normalized": "Int-\u003ea-\u003eb c-\u003eb c",
        "package": "synthesizer",
        "partial": "",
        "signature": "Int-\u003et-\u003esig y-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Filter-Recursive-Comb.html#v:runMulti",
      "description": {
        "fct-descr": "Echos of different delays.\nChunk size must be smaller than all of the delay times.\n",
        "fct-module": "Synthesizer.Generic.Filter.Recursive.Comb",
        "fct-package": "synthesizer",
        "fct-signature": "[Int] -\u003e t -\u003e sig y -\u003e sig y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Filter-Recursive-Comb.html#runMulti",
        "fct-type": "unknown",
        "title": "runMulti"
      },
      "index": {
        "description": "Echos of different delays Chunk size must be smaller than all of the delay times",
        "hierarchy": "Synthesizer Generic Filter Recursive Comb",
        "module": "Synthesizer.Generic.Filter.Recursive.Comb",
        "name": "runMulti",
        "normalized": "[Int]-\u003ea-\u003eb c-\u003eb c",
        "package": "synthesizer",
        "partial": "Multi",
        "signature": "[Int]-\u003et-\u003esig y-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Filter-Recursive-Comb.html#v:runProc",
      "description": {
        "fct-descr": "Echos can be piped through an arbitrary signal processor. \n",
        "fct-module": "Synthesizer.Generic.Filter.Recursive.Comb",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e (sig y -\u003e sig y) -\u003e sig y -\u003e sig y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Filter-Recursive-Comb.html#runProc",
        "fct-type": "unknown",
        "title": "runProc"
      },
      "index": {
        "description": "Echos can be piped through an arbitrary signal processor",
        "hierarchy": "Synthesizer Generic Filter Recursive Comb",
        "module": "Synthesizer.Generic.Filter.Recursive.Comb",
        "name": "runProc",
        "normalized": "Int-\u003e(a b-\u003ea b)-\u003ea b-\u003ea b",
        "package": "synthesizer",
        "partial": "Proc",
        "signature": "Int-\u003e(sig y-\u003esig y)-\u003esig y-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Filter-Recursive-Integration.html#v:run",
      "description": {
        "fct-descr": "Integrate with initial value zero.\nHowever the first emitted value is the value of the input signal.\nIt maintains the length of the signal.\n",
        "fct-module": "Synthesizer.Generic.Filter.Recursive.Integration",
        "fct-package": "synthesizer",
        "fct-signature": "sig v -\u003e sig v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Filter-Recursive-Integration.html#run",
        "fct-type": "unknown",
        "title": "run"
      },
      "index": {
        "description": "Integrate with initial value zero However the first emitted value is the value of the input signal It maintains the length of the signal",
        "hierarchy": "Synthesizer Generic Filter Recursive Integration",
        "module": "Synthesizer.Generic.Filter.Recursive.Integration",
        "name": "run",
        "normalized": "a b-\u003ea b",
        "package": "synthesizer",
        "partial": "",
        "signature": "sig v-\u003esig v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Filter-Recursive-Integration.html#v:runInit",
      "description": {
        "fct-descr": "Integrate with initial condition.\nFirst emitted value is the initial condition.\nThe signal become one element longer.\n",
        "fct-module": "Synthesizer.Generic.Filter.Recursive.Integration",
        "fct-package": "synthesizer",
        "fct-signature": "v -\u003e sig v -\u003e sig v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Filter-Recursive-Integration.html#runInit",
        "fct-type": "unknown",
        "title": "runInit"
      },
      "index": {
        "description": "Integrate with initial condition First emitted value is the initial condition The signal become one element longer",
        "hierarchy": "Synthesizer Generic Filter Recursive Integration",
        "module": "Synthesizer.Generic.Filter.Recursive.Integration",
        "name": "runInit",
        "normalized": "a-\u003eb a-\u003eb a",
        "package": "synthesizer",
        "partial": "Init",
        "signature": "v-\u003esig v-\u003esig v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Filter-Recursive-MovingAverage.html#v:modulatedFrac",
      "description": {
        "fct-module": "Synthesizer.Generic.Filter.Recursive.MovingAverage",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e sig a -\u003e sig v -\u003e sig v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Filter-Recursive-MovingAverage.html#modulatedFrac",
        "fct-type": "unknown",
        "title": "modulatedFrac"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Filter Recursive MovingAverage",
        "module": "Synthesizer.Generic.Filter.Recursive.MovingAverage",
        "name": "modulatedFrac",
        "normalized": "Int-\u003ea b-\u003ea c-\u003ea c",
        "package": "synthesizer",
        "partial": "Frac",
        "signature": "Int-\u003esig a-\u003esig v-\u003esig v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Filter-Recursive-MovingAverage.html#v:sumsStaticInt",
      "description": {
        "fct-descr": "\u003cp\u003eLike Synthesizer.Generic.Filter.NonRecursive.sums but in a recursive form.\nThis needs only linear time (independent of the window size)\nbut may accumulate rounding errors.\n\u003c/p\u003e\u003cpre\u003e\nys = xs * (1,0,0,0,-1) / (1,-1)\nys * (1,-1) = xs * (1,0,0,0,-1)\nys = xs * (1,0,0,0,-1) + ys * (0,1)\n\u003c/pre\u003e",
        "fct-module": "Synthesizer.Generic.Filter.Recursive.MovingAverage",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e sig v -\u003e sig v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Filter-Recursive-MovingAverage.html#sumsStaticInt",
        "fct-type": "unknown",
        "title": "sumsStaticInt"
      },
      "index": {
        "description": "Like Synthesizer.Generic.Filter.NonRecursive.sums but in recursive form This needs only linear time independent of the window size but may accumulate rounding errors ys xs ys xs ys xs ys",
        "hierarchy": "Synthesizer Generic Filter Recursive MovingAverage",
        "module": "Synthesizer.Generic.Filter.Recursive.MovingAverage",
        "name": "sumsStaticInt",
        "normalized": "Int-\u003ea b-\u003ea b",
        "package": "synthesizer",
        "partial": "Static Int",
        "signature": "Int-\u003esig v-\u003esig v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Interpolation.html#t:T",
      "description": {
        "fct-module": "Synthesizer.Generic.Interpolation",
        "fct-package": "synthesizer",
        "fct-signature": "data",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Interpolation.html#T",
        "fct-type": "unknown",
        "title": "T"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Interpolation",
        "module": "Synthesizer.Generic.Interpolation",
        "name": "T",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Interpolation.html#v:constantPad",
      "description": {
        "fct-module": "Synthesizer.Generic.Interpolation",
        "fct-package": "synthesizer",
        "fct-signature": "(T t y -\u003e t -\u003e sig y -\u003e a) -\u003e T t y -\u003e t -\u003e sig y -\u003e a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Interpolation.html#constantPad",
        "fct-type": "unknown",
        "title": "constantPad"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Interpolation",
        "module": "Synthesizer.Generic.Interpolation",
        "name": "constantPad",
        "normalized": "(T a b-\u003ea-\u003ec b-\u003ed)-\u003eT a b-\u003ea-\u003ec b-\u003ed",
        "package": "synthesizer",
        "partial": "Pad",
        "signature": "(T t y-\u003et-\u003esig y-\u003ea)-\u003eT t y-\u003et-\u003esig y-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Interpolation.html#v:cyclicPad",
      "description": {
        "fct-descr": "Only for finite input signals.\n",
        "fct-module": "Synthesizer.Generic.Interpolation",
        "fct-package": "synthesizer",
        "fct-signature": "(T t y -\u003e t -\u003e sig y -\u003e a) -\u003e T t y -\u003e t -\u003e sig y -\u003e a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Interpolation.html#cyclicPad",
        "fct-type": "unknown",
        "title": "cyclicPad"
      },
      "index": {
        "description": "Only for finite input signals",
        "hierarchy": "Synthesizer Generic Interpolation",
        "module": "Synthesizer.Generic.Interpolation",
        "name": "cyclicPad",
        "normalized": "(T a b-\u003ea-\u003ec b-\u003ed)-\u003eT a b-\u003ea-\u003ec b-\u003ed",
        "package": "synthesizer",
        "partial": "Pad",
        "signature": "(T t y-\u003et-\u003esig y-\u003ea)-\u003eT t y-\u003et-\u003esig y-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Interpolation.html#v:extrapolationPad",
      "description": {
        "fct-descr": "The extrapolation may miss some of the first and some of the last points\n",
        "fct-module": "Synthesizer.Generic.Interpolation",
        "fct-package": "synthesizer",
        "fct-signature": "(T t y -\u003e t -\u003e sig y -\u003e a) -\u003e T t y -\u003e t -\u003e sig y -\u003e a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Interpolation.html#extrapolationPad",
        "fct-type": "unknown",
        "title": "extrapolationPad"
      },
      "index": {
        "description": "The extrapolation may miss some of the first and some of the last points",
        "hierarchy": "Synthesizer Generic Interpolation",
        "module": "Synthesizer.Generic.Interpolation",
        "name": "extrapolationPad",
        "normalized": "(T a b-\u003ea-\u003ec b-\u003ed)-\u003eT a b-\u003ea-\u003ec b-\u003ed",
        "package": "synthesizer",
        "partial": "Pad",
        "signature": "(T t y-\u003et-\u003esig y-\u003ea)-\u003eT t y-\u003et-\u003esig y-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Interpolation.html#v:func",
      "description": {
        "fct-module": "Synthesizer.Generic.Interpolation",
        "fct-package": "synthesizer",
        "fct-signature": "T t y -\u003e t -\u003e sig y -\u003e y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Interpolation.html#func",
        "fct-type": "unknown",
        "title": "func"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Interpolation",
        "module": "Synthesizer.Generic.Interpolation",
        "name": "func",
        "normalized": "T a b-\u003ea-\u003ec b-\u003eb",
        "package": "synthesizer",
        "partial": "",
        "signature": "T t y-\u003et-\u003esig y-\u003ey"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Interpolation.html#v:multiRelative",
      "description": {
        "fct-descr": "All values of frequency control must be non-negative. \n",
        "fct-module": "Synthesizer.Generic.Interpolation",
        "fct-package": "synthesizer",
        "fct-signature": "T t y -\u003e t -\u003e sig y -\u003e sig t -\u003e sig y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Interpolation.html#multiRelative",
        "fct-type": "unknown",
        "title": "multiRelative"
      },
      "index": {
        "description": "All values of frequency control must be non-negative",
        "hierarchy": "Synthesizer Generic Interpolation",
        "module": "Synthesizer.Generic.Interpolation",
        "name": "multiRelative",
        "normalized": "T a b-\u003ea-\u003ec b-\u003ec a-\u003ec b",
        "package": "synthesizer",
        "partial": "Relative",
        "signature": "T t y-\u003et-\u003esig y-\u003esig t-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Interpolation.html#v:multiRelativeConstantPad",
      "description": {
        "fct-module": "Synthesizer.Generic.Interpolation",
        "fct-package": "synthesizer",
        "fct-signature": "T t y -\u003e t -\u003e sig t -\u003e sig y -\u003e sig y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Interpolation.html#multiRelativeConstantPad",
        "fct-type": "unknown",
        "title": "multiRelativeConstantPad"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Interpolation",
        "module": "Synthesizer.Generic.Interpolation",
        "name": "multiRelativeConstantPad",
        "normalized": "T a b-\u003ea-\u003ec a-\u003ec b-\u003ec b",
        "package": "synthesizer",
        "partial": "Relative Constant Pad",
        "signature": "T t y-\u003et-\u003esig t-\u003esig y-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Interpolation.html#v:multiRelativeCyclicPad",
      "description": {
        "fct-module": "Synthesizer.Generic.Interpolation",
        "fct-package": "synthesizer",
        "fct-signature": "T t y -\u003e t -\u003e sig t -\u003e sig y -\u003e sig y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Interpolation.html#multiRelativeCyclicPad",
        "fct-type": "unknown",
        "title": "multiRelativeCyclicPad"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Interpolation",
        "module": "Synthesizer.Generic.Interpolation",
        "name": "multiRelativeCyclicPad",
        "normalized": "T a b-\u003ea-\u003ec a-\u003ec b-\u003ec b",
        "package": "synthesizer",
        "partial": "Relative Cyclic Pad",
        "signature": "T t y-\u003et-\u003esig t-\u003esig y-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Interpolation.html#v:multiRelativeExtrapolationPad",
      "description": {
        "fct-descr": "The extrapolation may miss some of the first and some of the last points\n",
        "fct-module": "Synthesizer.Generic.Interpolation",
        "fct-package": "synthesizer",
        "fct-signature": "T t y -\u003e t -\u003e sig t -\u003e sig y -\u003e sig y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Interpolation.html#multiRelativeExtrapolationPad",
        "fct-type": "unknown",
        "title": "multiRelativeExtrapolationPad"
      },
      "index": {
        "description": "The extrapolation may miss some of the first and some of the last points",
        "hierarchy": "Synthesizer Generic Interpolation",
        "module": "Synthesizer.Generic.Interpolation",
        "name": "multiRelativeExtrapolationPad",
        "normalized": "T a b-\u003ea-\u003ec a-\u003ec b-\u003ec b",
        "package": "synthesizer",
        "partial": "Relative Extrapolation Pad",
        "signature": "T t y-\u003et-\u003esig t-\u003esig y-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Interpolation.html#v:multiRelativeZeroPad",
      "description": {
        "fct-module": "Synthesizer.Generic.Interpolation",
        "fct-package": "synthesizer",
        "fct-signature": "y -\u003e T t y -\u003e t -\u003e sig t -\u003e sig y -\u003e sig y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Interpolation.html#multiRelativeZeroPad",
        "fct-type": "unknown",
        "title": "multiRelativeZeroPad"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Interpolation",
        "module": "Synthesizer.Generic.Interpolation",
        "name": "multiRelativeZeroPad",
        "normalized": "a-\u003eT b a-\u003eb-\u003ec b-\u003ec a-\u003ec a",
        "package": "synthesizer",
        "partial": "Relative Zero Pad",
        "signature": "y-\u003eT t y-\u003et-\u003esig t-\u003esig y-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Interpolation.html#v:multiRelativeZeroPadConstant",
      "description": {
        "fct-module": "Synthesizer.Generic.Interpolation",
        "fct-package": "synthesizer",
        "fct-signature": "t -\u003e sig t -\u003e sig y -\u003e sig y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Interpolation.html#multiRelativeZeroPadConstant",
        "fct-type": "unknown",
        "title": "multiRelativeZeroPadConstant"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Interpolation",
        "module": "Synthesizer.Generic.Interpolation",
        "name": "multiRelativeZeroPadConstant",
        "normalized": "a-\u003eb a-\u003eb c-\u003eb c",
        "package": "synthesizer",
        "partial": "Relative Zero Pad Constant",
        "signature": "t-\u003esig t-\u003esig y-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Interpolation.html#v:multiRelativeZeroPadCubic",
      "description": {
        "fct-module": "Synthesizer.Generic.Interpolation",
        "fct-package": "synthesizer",
        "fct-signature": "t -\u003e sig t -\u003e sig y -\u003e sig y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Interpolation.html#multiRelativeZeroPadCubic",
        "fct-type": "unknown",
        "title": "multiRelativeZeroPadCubic"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Interpolation",
        "module": "Synthesizer.Generic.Interpolation",
        "name": "multiRelativeZeroPadCubic",
        "normalized": "a-\u003eb a-\u003eb c-\u003eb c",
        "package": "synthesizer",
        "partial": "Relative Zero Pad Cubic",
        "signature": "t-\u003esig t-\u003esig y-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Interpolation.html#v:multiRelativeZeroPadLinear",
      "description": {
        "fct-module": "Synthesizer.Generic.Interpolation",
        "fct-package": "synthesizer",
        "fct-signature": "t -\u003e sig t -\u003e sig y -\u003e sig y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Interpolation.html#multiRelativeZeroPadLinear",
        "fct-type": "unknown",
        "title": "multiRelativeZeroPadLinear"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Interpolation",
        "module": "Synthesizer.Generic.Interpolation",
        "name": "multiRelativeZeroPadLinear",
        "normalized": "a-\u003eb a-\u003eb c-\u003eb c",
        "package": "synthesizer",
        "partial": "Relative Zero Pad Linear",
        "signature": "t-\u003esig t-\u003esig y-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Interpolation.html#v:number",
      "description": {
        "fct-module": "Synthesizer.Generic.Interpolation",
        "fct-package": "synthesizer",
        "fct-signature": "T t y -\u003e Int",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Interpolation.html#number",
        "fct-type": "unknown",
        "title": "number"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Interpolation",
        "module": "Synthesizer.Generic.Interpolation",
        "name": "number",
        "normalized": "T a b-\u003eInt",
        "package": "synthesizer",
        "partial": "",
        "signature": "T t y-\u003eInt"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Interpolation.html#v:offset",
      "description": {
        "fct-module": "Synthesizer.Generic.Interpolation",
        "fct-package": "synthesizer",
        "fct-signature": "T t y -\u003e Int",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Interpolation.html#offset",
        "fct-type": "unknown",
        "title": "offset"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Interpolation",
        "module": "Synthesizer.Generic.Interpolation",
        "name": "offset",
        "normalized": "T a b-\u003eInt",
        "package": "synthesizer",
        "partial": "",
        "signature": "T t y-\u003eInt"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Interpolation.html#v:single",
      "description": {
        "fct-module": "Synthesizer.Generic.Interpolation",
        "fct-package": "synthesizer",
        "fct-signature": "T t y -\u003e t -\u003e sig y -\u003e y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Interpolation.html#single",
        "fct-type": "unknown",
        "title": "single"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Interpolation",
        "module": "Synthesizer.Generic.Interpolation",
        "name": "single",
        "normalized": "T a b-\u003ea-\u003ec b-\u003eb",
        "package": "synthesizer",
        "partial": "",
        "signature": "T t y-\u003et-\u003esig y-\u003ey"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Interpolation.html#v:zeroPad",
      "description": {
        "fct-module": "Synthesizer.Generic.Interpolation",
        "fct-package": "synthesizer",
        "fct-signature": "(T t y -\u003e t -\u003e sig y -\u003e a) -\u003e y -\u003e T t y -\u003e t -\u003e sig y -\u003e a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Interpolation.html#zeroPad",
        "fct-type": "unknown",
        "title": "zeroPad"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Interpolation",
        "module": "Synthesizer.Generic.Interpolation",
        "name": "zeroPad",
        "normalized": "(T a b-\u003ea-\u003ec b-\u003ed)-\u003eb-\u003eT a b-\u003ea-\u003ec b-\u003ed",
        "package": "synthesizer",
        "partial": "Pad",
        "signature": "(T t y-\u003et-\u003esig y-\u003ea)-\u003ey-\u003eT t y-\u003et-\u003esig y-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Noise.html#v:randomPeeks",
      "description": {
        "fct-descr": "momentary densities, \u003ctt\u003ep\u003c/tt\u003e means that there is about one peak\n                      in the time range of \u003ctt\u003e1/p\u003c/tt\u003e samples \nEvery occurence of \u003ctt\u003e\u003ca\u003eTrue\u003c/a\u003e\u003c/tt\u003e represents a peak. \n",
        "fct-module": "Synthesizer.Generic.Noise",
        "fct-package": "synthesizer",
        "fct-signature": "sig y-\u003e sig Bool",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Noise.html#randomPeeks",
        "fct-type": "unknown",
        "title": "randomPeeks"
      },
      "index": {
        "description": "momentary densities means that there is about one peak in the time range of samples Every occurence of True represents peak",
        "hierarchy": "Synthesizer Generic Noise",
        "module": "Synthesizer.Generic.Noise",
        "name": "randomPeeks",
        "normalized": "a b-\u003ea Bool",
        "package": "synthesizer",
        "partial": "Peeks",
        "signature": "sig y-\u003esig Bool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Noise.html#v:randomPeeksGen",
      "description": {
        "fct-module": "Synthesizer.Generic.Noise",
        "fct-package": "synthesizer",
        "fct-signature": "g -\u003e sig y -\u003e sig Bool",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Noise.html#randomPeeksGen",
        "fct-type": "unknown",
        "title": "randomPeeksGen"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Noise",
        "module": "Synthesizer.Generic.Noise",
        "name": "randomPeeksGen",
        "normalized": "a-\u003eb c-\u003eb Bool",
        "package": "synthesizer",
        "partial": "Peeks Gen",
        "signature": "g-\u003esig y-\u003esig Bool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Noise.html#v:white",
      "description": {
        "fct-descr": "Deterministic white noise, uniformly distributed between -1 and 1.\nThat is, variance is 1/3.\n",
        "fct-module": "Synthesizer.Generic.Noise",
        "fct-package": "synthesizer",
        "fct-signature": "LazySize -\u003e sig y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Noise.html#white",
        "fct-type": "unknown",
        "title": "white"
      },
      "index": {
        "description": "Deterministic white noise uniformly distributed between and That is variance is",
        "hierarchy": "Synthesizer Generic Noise",
        "module": "Synthesizer.Generic.Noise",
        "name": "white",
        "normalized": "LazySize-\u003ea b",
        "package": "synthesizer",
        "partial": "",
        "signature": "LazySize-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Noise.html#v:whiteGen",
      "description": {
        "fct-module": "Synthesizer.Generic.Noise",
        "fct-package": "synthesizer",
        "fct-signature": "LazySize -\u003e g -\u003e sig y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Noise.html#whiteGen",
        "fct-type": "unknown",
        "title": "whiteGen"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Noise",
        "module": "Synthesizer.Generic.Noise",
        "name": "whiteGen",
        "normalized": "LazySize-\u003ea-\u003eb c",
        "package": "synthesizer",
        "partial": "Gen",
        "signature": "LazySize-\u003eg-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Noise.html#v:whiteQuadraticBSplineGen",
      "description": {
        "fct-descr": "Approximates normal distribution with variance 1\nby a quadratic B-spline distribution.\n",
        "fct-module": "Synthesizer.Generic.Noise",
        "fct-package": "synthesizer",
        "fct-signature": "LazySize -\u003e g -\u003e sig y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Noise.html#whiteQuadraticBSplineGen",
        "fct-type": "unknown",
        "title": "whiteQuadraticBSplineGen"
      },
      "index": {
        "description": "Approximates normal distribution with variance by quadratic B-spline distribution",
        "hierarchy": "Synthesizer Generic Noise",
        "module": "Synthesizer.Generic.Noise",
        "name": "whiteQuadraticBSplineGen",
        "normalized": "LazySize-\u003ea-\u003eb c",
        "package": "synthesizer",
        "partial": "Quadratic BSpline Gen",
        "signature": "LazySize-\u003eg-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Oscillator.html#v:freqMod",
      "description": {
        "fct-descr": "oscillator with modulated frequency \n",
        "fct-module": "Synthesizer.Generic.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "T a b -\u003e T a -\u003e sig a -\u003e sig b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Oscillator.html#freqMod",
        "fct-type": "unknown",
        "title": "freqMod"
      },
      "index": {
        "description": "oscillator with modulated frequency",
        "hierarchy": "Synthesizer Generic Oscillator",
        "module": "Synthesizer.Generic.Oscillator",
        "name": "freqMod",
        "normalized": "T a b-\u003eT a-\u003ec a-\u003ec b",
        "package": "synthesizer",
        "partial": "Mod",
        "signature": "T a b-\u003eT a-\u003esig a-\u003esig b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Oscillator.html#v:freqModSample",
      "description": {
        "fct-descr": "oscillator with a sampled waveform with modulated frequency\nShould behave homogenously for different types of interpolation.\n",
        "fct-module": "Synthesizer.Generic.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "T a b -\u003e wave b -\u003e T a -\u003e sig a -\u003e sig b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Oscillator.html#freqModSample",
        "fct-type": "unknown",
        "title": "freqModSample"
      },
      "index": {
        "description": "oscillator with sampled waveform with modulated frequency Should behave homogenously for different types of interpolation",
        "hierarchy": "Synthesizer Generic Oscillator",
        "module": "Synthesizer.Generic.Oscillator",
        "name": "freqModSample",
        "normalized": "T a b-\u003ec b-\u003eT a-\u003ed a-\u003ed b",
        "package": "synthesizer",
        "partial": "Mod Sample",
        "signature": "T a b-\u003ewave b-\u003eT a-\u003esig a-\u003esig b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Oscillator.html#v:freqModSaw",
      "description": {
        "fct-descr": "saw tooth oscillator with modulated frequency \n",
        "fct-module": "Synthesizer.Generic.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e sig a -\u003e sig a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Oscillator.html#freqModSaw",
        "fct-type": "unknown",
        "title": "freqModSaw"
      },
      "index": {
        "description": "saw tooth oscillator with modulated frequency",
        "hierarchy": "Synthesizer Generic Oscillator",
        "module": "Synthesizer.Generic.Oscillator",
        "name": "freqModSaw",
        "normalized": "T a-\u003eb a-\u003eb a",
        "package": "synthesizer",
        "partial": "Mod Saw",
        "signature": "T a-\u003esig a-\u003esig a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Oscillator.html#v:freqModSine",
      "description": {
        "fct-descr": "sine oscillator with modulated frequency \n",
        "fct-module": "Synthesizer.Generic.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e sig a -\u003e sig a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Oscillator.html#freqModSine",
        "fct-type": "unknown",
        "title": "freqModSine"
      },
      "index": {
        "description": "sine oscillator with modulated frequency",
        "hierarchy": "Synthesizer Generic Oscillator",
        "module": "Synthesizer.Generic.Oscillator",
        "name": "freqModSine",
        "normalized": "T a-\u003eb a-\u003eb a",
        "package": "synthesizer",
        "partial": "Mod Sine",
        "signature": "T a-\u003esig a-\u003esig a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Oscillator.html#v:phaseFreqMod",
      "description": {
        "fct-descr": "oscillator with both phase and frequency modulation \n",
        "fct-module": "Synthesizer.Generic.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "T a b -\u003e sig a -\u003e sig a -\u003e sig b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Oscillator.html#phaseFreqMod",
        "fct-type": "unknown",
        "title": "phaseFreqMod"
      },
      "index": {
        "description": "oscillator with both phase and frequency modulation",
        "hierarchy": "Synthesizer Generic Oscillator",
        "module": "Synthesizer.Generic.Oscillator",
        "name": "phaseFreqMod",
        "normalized": "T a b-\u003ec a-\u003ec a-\u003ec b",
        "package": "synthesizer",
        "partial": "Freq Mod",
        "signature": "T a b-\u003esig a-\u003esig a-\u003esig b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Oscillator.html#v:phaseMod",
      "description": {
        "fct-descr": "oscillator with modulated phase \n",
        "fct-module": "Synthesizer.Generic.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "T a b -\u003e a -\u003e sig a -\u003e sig b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Oscillator.html#phaseMod",
        "fct-type": "unknown",
        "title": "phaseMod"
      },
      "index": {
        "description": "oscillator with modulated phase",
        "hierarchy": "Synthesizer Generic Oscillator",
        "module": "Synthesizer.Generic.Oscillator",
        "name": "phaseMod",
        "normalized": "T a b-\u003ea-\u003ec a-\u003ec b",
        "package": "synthesizer",
        "partial": "Mod",
        "signature": "T a b-\u003ea-\u003esig a-\u003esig b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Oscillator.html#v:phaseModSine",
      "description": {
        "fct-descr": "sine oscillator with modulated phase, useful for FM synthesis \n",
        "fct-module": "Synthesizer.Generic.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e sig a -\u003e sig a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Oscillator.html#phaseModSine",
        "fct-type": "unknown",
        "title": "phaseModSine"
      },
      "index": {
        "description": "sine oscillator with modulated phase useful for FM synthesis",
        "hierarchy": "Synthesizer Generic Oscillator",
        "module": "Synthesizer.Generic.Oscillator",
        "name": "phaseModSine",
        "normalized": "a-\u003eb a-\u003eb a",
        "package": "synthesizer",
        "partial": "Mod Sine",
        "signature": "a-\u003esig a-\u003esig a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Oscillator.html#v:shapeFreqMod",
      "description": {
        "fct-descr": "oscillator with both shape and frequency modulation \n",
        "fct-module": "Synthesizer.Generic.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "(c -\u003e T a b) -\u003e T a -\u003e sig c -\u003e sig a -\u003e sig b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Oscillator.html#shapeFreqMod",
        "fct-type": "unknown",
        "title": "shapeFreqMod"
      },
      "index": {
        "description": "oscillator with both shape and frequency modulation",
        "hierarchy": "Synthesizer Generic Oscillator",
        "module": "Synthesizer.Generic.Oscillator",
        "name": "shapeFreqMod",
        "normalized": "(a-\u003eT b c)-\u003eT b-\u003ed a-\u003ed b-\u003ed c",
        "package": "synthesizer",
        "partial": "Freq Mod",
        "signature": "(c-\u003eT a b)-\u003eT a-\u003esig c-\u003esig a-\u003esig b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Oscillator.html#v:shapeMod",
      "description": {
        "fct-descr": "oscillator with modulated shape \n",
        "fct-module": "Synthesizer.Generic.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "(c -\u003e T a b) -\u003e T a -\u003e a -\u003e sig c -\u003e sig b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Oscillator.html#shapeMod",
        "fct-type": "unknown",
        "title": "shapeMod"
      },
      "index": {
        "description": "oscillator with modulated shape",
        "hierarchy": "Synthesizer Generic Oscillator",
        "module": "Synthesizer.Generic.Oscillator",
        "name": "shapeMod",
        "normalized": "(a-\u003eT b c)-\u003eT b-\u003eb-\u003ed a-\u003ed c",
        "package": "synthesizer",
        "partial": "Mod",
        "signature": "(c-\u003eT a b)-\u003eT a-\u003ea-\u003esig c-\u003esig b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Oscillator.html#v:static",
      "description": {
        "fct-descr": "oscillator with constant frequency \n",
        "fct-module": "Synthesizer.Generic.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "LazySize -\u003e T a b -\u003e T a -\u003e a -\u003e sig b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Oscillator.html#static",
        "fct-type": "unknown",
        "title": "static"
      },
      "index": {
        "description": "oscillator with constant frequency",
        "hierarchy": "Synthesizer Generic Oscillator",
        "module": "Synthesizer.Generic.Oscillator",
        "name": "static",
        "normalized": "LazySize-\u003eT a b-\u003eT a-\u003ea-\u003ec b",
        "package": "synthesizer",
        "partial": "",
        "signature": "LazySize-\u003eT a b-\u003eT a-\u003ea-\u003esig b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Oscillator.html#v:staticSample",
      "description": {
        "fct-descr": "oscillator with a sampled waveform with constant frequency\nThis is essentially an interpolation with cyclic padding.\n",
        "fct-module": "Synthesizer.Generic.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "LazySize -\u003e T a b -\u003e wave b -\u003e T a -\u003e a -\u003e sig b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Oscillator.html#staticSample",
        "fct-type": "unknown",
        "title": "staticSample"
      },
      "index": {
        "description": "oscillator with sampled waveform with constant frequency This is essentially an interpolation with cyclic padding",
        "hierarchy": "Synthesizer Generic Oscillator",
        "module": "Synthesizer.Generic.Oscillator",
        "name": "staticSample",
        "normalized": "LazySize-\u003eT a b-\u003ec b-\u003eT a-\u003ea-\u003ed b",
        "package": "synthesizer",
        "partial": "Sample",
        "signature": "LazySize-\u003eT a b-\u003ewave b-\u003eT a-\u003ea-\u003esig b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Oscillator.html#v:staticSaw",
      "description": {
        "fct-descr": "saw tooth oscillator with modulated frequency \n",
        "fct-module": "Synthesizer.Generic.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "LazySize -\u003e T a -\u003e a -\u003e sig a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Oscillator.html#staticSaw",
        "fct-type": "unknown",
        "title": "staticSaw"
      },
      "index": {
        "description": "saw tooth oscillator with modulated frequency",
        "hierarchy": "Synthesizer Generic Oscillator",
        "module": "Synthesizer.Generic.Oscillator",
        "name": "staticSaw",
        "normalized": "LazySize-\u003eT a-\u003ea-\u003eb a",
        "package": "synthesizer",
        "partial": "Saw",
        "signature": "LazySize-\u003eT a-\u003ea-\u003esig a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Oscillator.html#v:staticSine",
      "description": {
        "fct-descr": "sine oscillator with static frequency \n",
        "fct-module": "Synthesizer.Generic.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "LazySize -\u003e T a -\u003e a -\u003e sig a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Oscillator.html#staticSine",
        "fct-type": "unknown",
        "title": "staticSine"
      },
      "index": {
        "description": "sine oscillator with static frequency",
        "hierarchy": "Synthesizer Generic Oscillator",
        "module": "Synthesizer.Generic.Oscillator",
        "name": "staticSine",
        "normalized": "LazySize-\u003eT a-\u003ea-\u003eb a",
        "package": "synthesizer",
        "partial": "Sine",
        "signature": "LazySize-\u003eT a-\u003ea-\u003esig a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Signal.html#t:LazySize",
      "description": {
        "fct-module": "Synthesizer.Generic.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "newtype",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Signal.html#LazySize",
        "fct-type": "unknown",
        "title": "LazySize"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Signal",
        "module": "Synthesizer.Generic.Signal",
        "name": "LazySize",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Lazy Size",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Signal.html#v:Read",
      "description": {
        "fct-module": "Synthesizer.Generic.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "class",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Signal.html#Read",
        "fct-type": "unknown",
        "title": "Read"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Signal",
        "module": "Synthesizer.Generic.Signal",
        "name": "Read",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Read",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Signal.html#v:Transform",
      "description": {
        "fct-module": "Synthesizer.Generic.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "class",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Signal.html#Transform",
        "fct-type": "unknown",
        "title": "Transform"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Signal",
        "module": "Synthesizer.Generic.Signal",
        "name": "Transform",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Transform",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Signal.html#v:Write",
      "description": {
        "fct-module": "Synthesizer.Generic.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "class",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Signal.html#Write",
        "fct-type": "unknown",
        "title": "Write"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Signal",
        "module": "Synthesizer.Generic.Signal",
        "name": "Write",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Write",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Signal.html#v:append",
      "description": {
        "fct-module": "Synthesizer.Generic.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "sig -\u003e sig -\u003e sig",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Cut.html#append",
        "fct-type": "unknown",
        "title": "append"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Signal",
        "module": "Synthesizer.Generic.Signal",
        "name": "append",
        "normalized": "a-\u003ea-\u003ea",
        "package": "synthesizer",
        "partial": "",
        "signature": "sig-\u003esig-\u003esig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Signal.html#v:concat",
      "description": {
        "fct-module": "Synthesizer.Generic.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "[sig] -\u003e sig",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Cut.html#concat",
        "fct-type": "unknown",
        "title": "concat"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Signal",
        "module": "Synthesizer.Generic.Signal",
        "name": "concat",
        "normalized": "[a]-\u003ea",
        "package": "synthesizer",
        "partial": "",
        "signature": "[sig]-\u003esig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Signal.html#v:cons",
      "description": {
        "fct-descr": "This function belongs logically to the Write class,\n   but since an empty signal contains no data,\n   the maximum package size is irrelevant.\n   This makes e.g. the definition of mixMulti more general.\n",
        "fct-module": "Synthesizer.Generic.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "y -\u003e sig y -\u003e sig y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Signal.html#cons",
        "fct-type": "unknown",
        "title": "cons"
      },
      "index": {
        "description": "This function belongs logically to the Write class but since an empty signal contains no data the maximum package size is irrelevant This makes e.g the definition of mixMulti more general",
        "hierarchy": "Synthesizer Generic Signal",
        "module": "Synthesizer.Generic.Signal",
        "name": "cons",
        "normalized": "a-\u003eb a-\u003eb a",
        "package": "synthesizer",
        "partial": "",
        "signature": "y-\u003esig y-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Signal.html#v:crochetL",
      "description": {
        "fct-module": "Synthesizer.Generic.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(y -\u003e s -\u003e Maybe (y, s)) -\u003e s -\u003e sig y -\u003e sig y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Signal.html#crochetL",
        "fct-type": "unknown",
        "title": "crochetL"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Signal",
        "module": "Synthesizer.Generic.Signal",
        "name": "crochetL",
        "normalized": "(a-\u003eb-\u003eMaybe(a,b))-\u003eb-\u003ec a-\u003ec a",
        "package": "synthesizer",
        "partial": "",
        "signature": "(y-\u003es-\u003eMaybe(y,s))-\u003es-\u003esig y-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Signal.html#v:cycle",
      "description": {
        "fct-module": "Synthesizer.Generic.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "sig -\u003e sig",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Cut.html#cycle",
        "fct-type": "unknown",
        "title": "cycle"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Signal",
        "module": "Synthesizer.Generic.Signal",
        "name": "cycle",
        "normalized": "a-\u003ea",
        "package": "synthesizer",
        "partial": "",
        "signature": "sig-\u003esig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Signal.html#v:defaultLazySize",
      "description": {
        "fct-descr": "This can be used for internal signals\nthat have no observable effect on laziness.\nE.g. when you construct a list\nby \u003ctt\u003erepeat defaultLazySize zero\u003c/tt\u003e\nwe assume that zero is defined for all Additive types.\n",
        "fct-module": "Synthesizer.Generic.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "LazySize",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Signal.html#defaultLazySize",
        "fct-type": "unknown",
        "title": "defaultLazySize"
      },
      "index": {
        "description": "This can be used for internal signals that have no observable effect on laziness E.g when you construct list by repeat defaultLazySize zero we assume that zero is defined for all Additive types",
        "hierarchy": "Synthesizer Generic Signal",
        "module": "Synthesizer.Generic.Signal",
        "name": "defaultLazySize",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Lazy Size",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Signal.html#v:delay",
      "description": {
        "fct-module": "Synthesizer.Generic.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "LazySize -\u003e y -\u003e Int -\u003e sig y -\u003e sig y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Signal.html#delay",
        "fct-type": "unknown",
        "title": "delay"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Signal",
        "module": "Synthesizer.Generic.Signal",
        "name": "delay",
        "normalized": "LazySize-\u003ea-\u003eInt-\u003eb a-\u003eb a",
        "package": "synthesizer",
        "partial": "",
        "signature": "LazySize-\u003ey-\u003eInt-\u003esig y-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Signal.html#v:delayLoop",
      "description": {
        "fct-descr": "processor that shall be run in a feedback loop\nprefix of the output, its length determines the delay\n",
        "fct-module": "Synthesizer.Generic.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "sig y -\u003e sig y-\u003e sig y-\u003e sig y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Signal.html#delayLoop",
        "fct-type": "unknown",
        "title": "delayLoop"
      },
      "index": {
        "description": "processor that shall be run in feedback loop prefix of the output its length determines the delay",
        "hierarchy": "Synthesizer Generic Signal",
        "module": "Synthesizer.Generic.Signal",
        "name": "delayLoop",
        "normalized": "a b-\u003ea b-\u003ea b-\u003ea b",
        "package": "synthesizer",
        "partial": "Loop",
        "signature": "sig y-\u003esig y-\u003esig y-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Signal.html#v:delayLoopOverlap",
      "description": {
        "fct-descr": "Processor that shall be run in a feedback loop.\n                 It's absolutely necessary that this function preserves the chunk structure\n                 and that it does not look a chunk ahead.\n                 That's guaranteed for processes that do not look ahead at all,\n                 like \u003ctt\u003e\u003ca\u003emap\u003c/a\u003e\u003c/tt\u003e, \u003ctt\u003e\u003ca\u003ecrochetL\u003c/a\u003e\u003c/tt\u003e and\n                 all of type \u003ctt\u003eCausal.Process\u003c/tt\u003e. \ninput\noutput has the same length as the input\n",
        "fct-module": "Synthesizer.Generic.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "Int-\u003e sig y -\u003e sig y-\u003e sig y-\u003e sig y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Signal.html#delayLoopOverlap",
        "fct-type": "unknown",
        "title": "delayLoopOverlap"
      },
      "index": {
        "description": "Processor that shall be run in feedback loop It absolutely necessary that this function preserves the chunk structure and that it does not look chunk ahead That guaranteed for processes that do not look ahead at all like map crochetL and all of type Causal.Process input output has the same length as the input",
        "hierarchy": "Synthesizer Generic Signal",
        "module": "Synthesizer.Generic.Signal",
        "name": "delayLoopOverlap",
        "normalized": "Int-\u003ea b-\u003ea b-\u003ea b-\u003ea b",
        "package": "synthesizer",
        "partial": "Loop Overlap",
        "signature": "Int-\u003esig y-\u003esig y-\u003esig y-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Signal.html#v:drop",
      "description": {
        "fct-module": "Synthesizer.Generic.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e sig -\u003e sig",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Cut.html#drop",
        "fct-type": "unknown",
        "title": "drop"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Signal",
        "module": "Synthesizer.Generic.Signal",
        "name": "drop",
        "normalized": "Int-\u003ea-\u003ea",
        "package": "synthesizer",
        "partial": "",
        "signature": "Int-\u003esig-\u003esig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Signal.html#v:dropMarginRem",
      "description": {
        "fct-module": "Synthesizer.Generic.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e Int -\u003e sig -\u003e (Int, sig)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Cut.html#dropMarginRem",
        "fct-type": "unknown",
        "title": "dropMarginRem"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Signal",
        "module": "Synthesizer.Generic.Signal",
        "name": "dropMarginRem",
        "normalized": "Int-\u003eInt-\u003ea-\u003e(Int,a)",
        "package": "synthesizer",
        "partial": "Margin Rem",
        "signature": "Int-\u003eInt-\u003esig-\u003e(Int,sig)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Signal.html#v:dropWhile",
      "description": {
        "fct-module": "Synthesizer.Generic.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(y -\u003e Bool) -\u003e sig y -\u003e sig y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Signal.html#dropWhile",
        "fct-type": "unknown",
        "title": "dropWhile"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Signal",
        "module": "Synthesizer.Generic.Signal",
        "name": "dropWhile",
        "normalized": "(a-\u003eBool)-\u003eb a-\u003eb a",
        "package": "synthesizer",
        "partial": "While",
        "signature": "(y-\u003eBool)-\u003esig y-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Signal.html#v:empty",
      "description": {
        "fct-module": "Synthesizer.Generic.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "sig",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Cut.html#empty",
        "fct-type": "unknown",
        "title": "empty"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Signal",
        "module": "Synthesizer.Generic.Signal",
        "name": "empty",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Signal.html#v:extendConstant",
      "description": {
        "fct-module": "Synthesizer.Generic.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "LazySize -\u003e sig y -\u003e sig y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Signal.html#extendConstant",
        "fct-type": "unknown",
        "title": "extendConstant"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Signal",
        "module": "Synthesizer.Generic.Signal",
        "name": "extendConstant",
        "normalized": "LazySize-\u003ea b-\u003ea b",
        "package": "synthesizer",
        "partial": "Constant",
        "signature": "LazySize-\u003esig y-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Signal.html#v:foldL",
      "description": {
        "fct-module": "Synthesizer.Generic.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(s -\u003e y -\u003e s) -\u003e s -\u003e sig y -\u003e s",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Signal.html#foldL",
        "fct-type": "unknown",
        "title": "foldL"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Signal",
        "module": "Synthesizer.Generic.Signal",
        "name": "foldL",
        "normalized": "(a-\u003eb-\u003ea)-\u003ea-\u003ec b-\u003ea",
        "package": "synthesizer",
        "partial": "",
        "signature": "(s-\u003ey-\u003es)-\u003es-\u003esig y-\u003es"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Signal.html#v:fromList",
      "description": {
        "fct-module": "Synthesizer.Generic.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "LazySize -\u003e [y] -\u003e sig y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Signal.html#fromList",
        "fct-type": "unknown",
        "title": "fromList"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Signal",
        "module": "Synthesizer.Generic.Signal",
        "name": "fromList",
        "normalized": "LazySize-\u003e[a]-\u003eb a",
        "package": "synthesizer",
        "partial": "List",
        "signature": "LazySize-\u003e[y]-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Signal.html#v:fromState",
      "description": {
        "fct-module": "Synthesizer.Generic.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "LazySize -\u003e T y -\u003e sig y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Signal.html#fromState",
        "fct-type": "unknown",
        "title": "fromState"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Signal",
        "module": "Synthesizer.Generic.Signal",
        "name": "fromState",
        "normalized": "LazySize-\u003eT a-\u003eb a",
        "package": "synthesizer",
        "partial": "State",
        "signature": "LazySize-\u003eT y-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Signal.html#v:iterate",
      "description": {
        "fct-module": "Synthesizer.Generic.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "LazySize -\u003e (y -\u003e y) -\u003e y -\u003e sig y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Signal.html#iterate",
        "fct-type": "unknown",
        "title": "iterate"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Signal",
        "module": "Synthesizer.Generic.Signal",
        "name": "iterate",
        "normalized": "LazySize-\u003e(a-\u003ea)-\u003ea-\u003eb a",
        "package": "synthesizer",
        "partial": "",
        "signature": "LazySize-\u003e(y-\u003ey)-\u003ey-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Signal.html#v:iterateAssociative",
      "description": {
        "fct-module": "Synthesizer.Generic.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "LazySize -\u003e (y -\u003e y -\u003e y) -\u003e y -\u003e sig y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Signal.html#iterateAssociative",
        "fct-type": "unknown",
        "title": "iterateAssociative"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Signal",
        "module": "Synthesizer.Generic.Signal",
        "name": "iterateAssociative",
        "normalized": "LazySize-\u003e(a-\u003ea-\u003ea)-\u003ea-\u003eb a",
        "package": "synthesizer",
        "partial": "Associative",
        "signature": "LazySize-\u003e(y-\u003ey-\u003ey)-\u003ey-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Signal.html#v:length",
      "description": {
        "fct-module": "Synthesizer.Generic.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "sig -\u003e Int",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Cut.html#length",
        "fct-type": "unknown",
        "title": "length"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Signal",
        "module": "Synthesizer.Generic.Signal",
        "name": "length",
        "normalized": "a-\u003eInt",
        "package": "synthesizer",
        "partial": "",
        "signature": "sig-\u003eInt"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Signal.html#v:lengthAtLeast",
      "description": {
        "fct-descr": "Like \u003ctt\u003elengthAtLeast n xs  =  length xs \u003e= n\u003c/tt\u003e,\nbut is more efficient, because it is more lazy.\n",
        "fct-module": "Synthesizer.Generic.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e sig -\u003e Bool",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Cut.html#lengthAtLeast",
        "fct-type": "unknown",
        "title": "lengthAtLeast"
      },
      "index": {
        "description": "Like lengthAtLeast xs length xs but is more efficient because it is more lazy",
        "hierarchy": "Synthesizer Generic Signal",
        "module": "Synthesizer.Generic.Signal",
        "name": "lengthAtLeast",
        "normalized": "Int-\u003ea-\u003eBool",
        "package": "synthesizer",
        "partial": "At Least",
        "signature": "Int-\u003esig-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Signal.html#v:lengthAtMost",
      "description": {
        "fct-module": "Synthesizer.Generic.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e sig -\u003e Bool",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Cut.html#lengthAtMost",
        "fct-type": "unknown",
        "title": "lengthAtMost"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Signal",
        "module": "Synthesizer.Generic.Signal",
        "name": "lengthAtMost",
        "normalized": "Int-\u003ea-\u003eBool",
        "package": "synthesizer",
        "partial": "At Most",
        "signature": "Int-\u003esig-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Signal.html#v:linearComb",
      "description": {
        "fct-module": "Synthesizer.Generic.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "sig t -\u003e sig y -\u003e y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Signal.html#linearComb",
        "fct-type": "unknown",
        "title": "linearComb"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Signal",
        "module": "Synthesizer.Generic.Signal",
        "name": "linearComb",
        "normalized": "a b-\u003ea c-\u003ec",
        "package": "synthesizer",
        "partial": "Comb",
        "signature": "sig t-\u003esig y-\u003ey"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Signal.html#v:map",
      "description": {
        "fct-module": "Synthesizer.Generic.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(y -\u003e y) -\u003e sig y -\u003e sig y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Signal.html#map",
        "fct-type": "unknown",
        "title": "map"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Signal",
        "module": "Synthesizer.Generic.Signal",
        "name": "map",
        "normalized": "(a-\u003ea)-\u003eb a-\u003eb a",
        "package": "synthesizer",
        "partial": "",
        "signature": "(y-\u003ey)-\u003esig y-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Signal.html#v:mapAdjacent",
      "description": {
        "fct-module": "Synthesizer.Generic.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(a -\u003e a -\u003e a) -\u003e sig a -\u003e sig a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Signal.html#mapAdjacent",
        "fct-type": "unknown",
        "title": "mapAdjacent"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Signal",
        "module": "Synthesizer.Generic.Signal",
        "name": "mapAdjacent",
        "normalized": "(a-\u003ea-\u003ea)-\u003eb a-\u003eb a",
        "package": "synthesizer",
        "partial": "Adjacent",
        "signature": "(a-\u003ea-\u003ea)-\u003esig a-\u003esig a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Signal.html#v:mapTails",
      "description": {
        "fct-module": "Synthesizer.Generic.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(sig a -\u003e a) -\u003e sig a -\u003e sig a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Signal.html#mapTails",
        "fct-type": "unknown",
        "title": "mapTails"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Signal",
        "module": "Synthesizer.Generic.Signal",
        "name": "mapTails",
        "normalized": "(a b-\u003eb)-\u003ea b-\u003ea b",
        "package": "synthesizer",
        "partial": "Tails",
        "signature": "(sig a-\u003ea)-\u003esig a-\u003esig a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Signal.html#v:mapTailsAlt",
      "description": {
        "fct-module": "Synthesizer.Generic.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "LazySize -\u003e (sig a -\u003e b) -\u003e sig a -\u003e sig b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Signal.html#mapTailsAlt",
        "fct-type": "unknown",
        "title": "mapTailsAlt"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Signal",
        "module": "Synthesizer.Generic.Signal",
        "name": "mapTailsAlt",
        "normalized": "LazySize-\u003e(a b-\u003ec)-\u003ea b-\u003ea c",
        "package": "synthesizer",
        "partial": "Tails Alt",
        "signature": "LazySize-\u003e(sig a-\u003eb)-\u003esig a-\u003esig b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Signal.html#v:mix",
      "description": {
        "fct-module": "Synthesizer.Generic.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "sig y -\u003e sig y -\u003e sig y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Signal.html#mix",
        "fct-type": "unknown",
        "title": "mix"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Signal",
        "module": "Synthesizer.Generic.Signal",
        "name": "mix",
        "normalized": "a b-\u003ea b-\u003ea b",
        "package": "synthesizer",
        "partial": "",
        "signature": "sig y-\u003esig y-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Signal.html#v:modifyModulated",
      "description": {
        "fct-descr": "Here the control may vary over the time. \n",
        "fct-module": "Synthesizer.Generic.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "Simple s ctrl a a -\u003e sig ctrl -\u003e sig a -\u003e sig a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Signal.html#modifyModulated",
        "fct-type": "unknown",
        "title": "modifyModulated"
      },
      "index": {
        "description": "Here the control may vary over the time",
        "hierarchy": "Synthesizer Generic Signal",
        "module": "Synthesizer.Generic.Signal",
        "name": "modifyModulated",
        "normalized": "Simple a b c c-\u003ed b-\u003ed c-\u003ed c",
        "package": "synthesizer",
        "partial": "Modulated",
        "signature": "Simple s ctrl a a-\u003esig ctrl-\u003esig a-\u003esig a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Signal.html#v:modifyStatic",
      "description": {
        "fct-module": "Synthesizer.Generic.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "Simple s ctrl a a -\u003e ctrl -\u003e sig a -\u003e sig a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Signal.html#modifyStatic",
        "fct-type": "unknown",
        "title": "modifyStatic"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Signal",
        "module": "Synthesizer.Generic.Signal",
        "name": "modifyStatic",
        "normalized": "Simple a b c c-\u003eb-\u003ed c-\u003ed c",
        "package": "synthesizer",
        "partial": "Static",
        "signature": "Simple s ctrl a a-\u003ectrl-\u003esig a-\u003esig a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Signal.html#v:null",
      "description": {
        "fct-module": "Synthesizer.Generic.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "sig -\u003e Bool",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Cut.html#null",
        "fct-type": "unknown",
        "title": "null"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Signal",
        "module": "Synthesizer.Generic.Signal",
        "name": "null",
        "normalized": "a-\u003eBool",
        "package": "synthesizer",
        "partial": "",
        "signature": "sig-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Signal.html#v:repeat",
      "description": {
        "fct-module": "Synthesizer.Generic.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "LazySize -\u003e y -\u003e sig y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Signal.html#repeat",
        "fct-type": "unknown",
        "title": "repeat"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Signal",
        "module": "Synthesizer.Generic.Signal",
        "name": "repeat",
        "normalized": "LazySize-\u003ea-\u003eb a",
        "package": "synthesizer",
        "partial": "",
        "signature": "LazySize-\u003ey-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Signal.html#v:replicate",
      "description": {
        "fct-module": "Synthesizer.Generic.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "LazySize -\u003e Int -\u003e y -\u003e sig y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Signal.html#replicate",
        "fct-type": "unknown",
        "title": "replicate"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Signal",
        "module": "Synthesizer.Generic.Signal",
        "name": "replicate",
        "normalized": "LazySize-\u003eInt-\u003ea-\u003eb a",
        "package": "synthesizer",
        "partial": "",
        "signature": "LazySize-\u003eInt-\u003ey-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Signal.html#v:reverse",
      "description": {
        "fct-module": "Synthesizer.Generic.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "sig -\u003e sig",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Cut.html#reverse",
        "fct-type": "unknown",
        "title": "reverse"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Signal",
        "module": "Synthesizer.Generic.Signal",
        "name": "reverse",
        "normalized": "a-\u003ea",
        "package": "synthesizer",
        "partial": "",
        "signature": "sig-\u003esig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Signal.html#v:scanL",
      "description": {
        "fct-module": "Synthesizer.Generic.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(y -\u003e y -\u003e y) -\u003e y -\u003e sig y -\u003e sig y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Signal.html#scanL",
        "fct-type": "unknown",
        "title": "scanL"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Signal",
        "module": "Synthesizer.Generic.Signal",
        "name": "scanL",
        "normalized": "(a-\u003ea-\u003ea)-\u003ea-\u003eb a-\u003eb a",
        "package": "synthesizer",
        "partial": "",
        "signature": "(y-\u003ey-\u003ey)-\u003ey-\u003esig y-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Signal.html#v:sliceVertical",
      "description": {
        "fct-module": "Synthesizer.Generic.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e sig -\u003e T sig",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Cut.html#sliceVertical",
        "fct-type": "unknown",
        "title": "sliceVertical"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Signal",
        "module": "Synthesizer.Generic.Signal",
        "name": "sliceVertical",
        "normalized": "Int-\u003ea-\u003eT a",
        "package": "synthesizer",
        "partial": "Vertical",
        "signature": "Int-\u003esig-\u003eT sig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Signal.html#v:span",
      "description": {
        "fct-module": "Synthesizer.Generic.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(y -\u003e Bool) -\u003e sig y -\u003e (sig y, sig y)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Signal.html#span",
        "fct-type": "unknown",
        "title": "span"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Signal",
        "module": "Synthesizer.Generic.Signal",
        "name": "span",
        "normalized": "(a-\u003eBool)-\u003eb a-\u003e(b a,b a)",
        "package": "synthesizer",
        "partial": "",
        "signature": "(y-\u003eBool)-\u003esig y-\u003e(sig y,sig y)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Signal.html#v:splitAt",
      "description": {
        "fct-module": "Synthesizer.Generic.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e sig -\u003e (sig, sig)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Cut.html#splitAt",
        "fct-type": "unknown",
        "title": "splitAt"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Signal",
        "module": "Synthesizer.Generic.Signal",
        "name": "splitAt",
        "normalized": "Int-\u003ea-\u003e(a,a)",
        "package": "synthesizer",
        "partial": "At",
        "signature": "Int-\u003esig-\u003e(sig,sig)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Signal.html#v:sum",
      "description": {
        "fct-module": "Synthesizer.Generic.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "sig a -\u003e a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Signal.html#sum",
        "fct-type": "unknown",
        "title": "sum"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Signal",
        "module": "Synthesizer.Generic.Signal",
        "name": "sum",
        "normalized": "a b-\u003eb",
        "package": "synthesizer",
        "partial": "",
        "signature": "sig a-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Signal.html#v:switchL",
      "description": {
        "fct-module": "Synthesizer.Generic.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e (y -\u003e sig y -\u003e a) -\u003e sig y -\u003e a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Signal.html#switchL",
        "fct-type": "unknown",
        "title": "switchL"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Signal",
        "module": "Synthesizer.Generic.Signal",
        "name": "switchL",
        "normalized": "a-\u003e(b-\u003ec b-\u003ea)-\u003ec b-\u003ea",
        "package": "synthesizer",
        "partial": "",
        "signature": "a-\u003e(y-\u003esig y-\u003ea)-\u003esig y-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Signal.html#v:tails",
      "description": {
        "fct-module": "Synthesizer.Generic.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "sig y -\u003e T (sig y)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Signal.html#tails",
        "fct-type": "unknown",
        "title": "tails"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Signal",
        "module": "Synthesizer.Generic.Signal",
        "name": "tails",
        "normalized": "a b-\u003eT(a b)",
        "package": "synthesizer",
        "partial": "",
        "signature": "sig y-\u003eT(sig y)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Signal.html#v:take",
      "description": {
        "fct-module": "Synthesizer.Generic.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e sig -\u003e sig",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Cut.html#take",
        "fct-type": "unknown",
        "title": "take"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Signal",
        "module": "Synthesizer.Generic.Signal",
        "name": "take",
        "normalized": "Int-\u003ea-\u003ea",
        "package": "synthesizer",
        "partial": "",
        "signature": "Int-\u003esig-\u003esig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Signal.html#v:takeWhile",
      "description": {
        "fct-module": "Synthesizer.Generic.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(y -\u003e Bool) -\u003e sig y -\u003e sig y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Signal.html#takeWhile",
        "fct-type": "unknown",
        "title": "takeWhile"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Signal",
        "module": "Synthesizer.Generic.Signal",
        "name": "takeWhile",
        "normalized": "(a-\u003eBool)-\u003eb a-\u003eb a",
        "package": "synthesizer",
        "partial": "While",
        "signature": "(y-\u003eBool)-\u003esig y-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Signal.html#v:toList",
      "description": {
        "fct-module": "Synthesizer.Generic.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "sig y -\u003e [y]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Signal.html#toList",
        "fct-type": "unknown",
        "title": "toList"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Signal",
        "module": "Synthesizer.Generic.Signal",
        "name": "toList",
        "normalized": "a b-\u003e[b]",
        "package": "synthesizer",
        "partial": "List",
        "signature": "sig y-\u003e[y]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Signal.html#v:toState",
      "description": {
        "fct-module": "Synthesizer.Generic.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "sig y -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Signal.html#toState",
        "fct-type": "unknown",
        "title": "toState"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Signal",
        "module": "Synthesizer.Generic.Signal",
        "name": "toState",
        "normalized": "a b-\u003eT b",
        "package": "synthesizer",
        "partial": "State",
        "signature": "sig y-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Signal.html#v:unfoldR",
      "description": {
        "fct-module": "Synthesizer.Generic.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "LazySize -\u003e (s -\u003e Maybe (y, s)) -\u003e s -\u003e sig y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Signal.html#unfoldR",
        "fct-type": "unknown",
        "title": "unfoldR"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Signal",
        "module": "Synthesizer.Generic.Signal",
        "name": "unfoldR",
        "normalized": "LazySize-\u003e(a-\u003eMaybe(b,a))-\u003ea-\u003ec b",
        "package": "synthesizer",
        "partial": "",
        "signature": "LazySize-\u003e(s-\u003eMaybe(y,s))-\u003es-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Signal.html#v:viewL",
      "description": {
        "fct-module": "Synthesizer.Generic.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "sig y -\u003e Maybe (y, sig y)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Signal.html#viewL",
        "fct-type": "unknown",
        "title": "viewL"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Signal",
        "module": "Synthesizer.Generic.Signal",
        "name": "viewL",
        "normalized": "a b-\u003eMaybe(b,a b)",
        "package": "synthesizer",
        "partial": "",
        "signature": "sig y-\u003eMaybe(y,sig y)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Signal.html#v:viewR",
      "description": {
        "fct-module": "Synthesizer.Generic.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "sig y -\u003e Maybe (sig y, y)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Signal.html#viewR",
        "fct-type": "unknown",
        "title": "viewR"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Signal",
        "module": "Synthesizer.Generic.Signal",
        "name": "viewR",
        "normalized": "a b-\u003eMaybe(a b,b)",
        "package": "synthesizer",
        "partial": "",
        "signature": "sig y-\u003eMaybe(sig y,y)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Signal.html#v:withStorableContext",
      "description": {
        "fct-module": "Synthesizer.Generic.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(ChunkSize -\u003e a) -\u003e LazySize -\u003e a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Signal.html#withStorableContext",
        "fct-type": "unknown",
        "title": "withStorableContext"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Signal",
        "module": "Synthesizer.Generic.Signal",
        "name": "withStorableContext",
        "normalized": "(ChunkSize-\u003ea)-\u003eLazySize-\u003ea",
        "package": "synthesizer",
        "partial": "Storable Context",
        "signature": "(ChunkSize-\u003ea)-\u003eLazySize-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Signal.html#v:zipWith",
      "description": {
        "fct-module": "Synthesizer.Generic.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(a -\u003e b -\u003e b) -\u003e sig a -\u003e sig b -\u003e sig b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Signal.html#zipWith",
        "fct-type": "unknown",
        "title": "zipWith"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Signal",
        "module": "Synthesizer.Generic.Signal",
        "name": "zipWith",
        "normalized": "(a-\u003eb-\u003eb)-\u003ec a-\u003ec b-\u003ec b",
        "package": "synthesizer",
        "partial": "With",
        "signature": "(a-\u003eb-\u003eb)-\u003esig a-\u003esig b-\u003esig b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Signal.html#v:zipWithAppend",
      "description": {
        "fct-module": "Synthesizer.Generic.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(y -\u003e y -\u003e y) -\u003e sig y -\u003e sig y -\u003e sig y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Signal.html#zipWithAppend",
        "fct-type": "unknown",
        "title": "zipWithAppend"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Signal",
        "module": "Synthesizer.Generic.Signal",
        "name": "zipWithAppend",
        "normalized": "(a-\u003ea-\u003ea)-\u003eb a-\u003eb a-\u003eb a",
        "package": "synthesizer",
        "partial": "With Append",
        "signature": "(y-\u003ey-\u003ey)-\u003esig y-\u003esig y-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Signal.html#v:zipWithTails",
      "description": {
        "fct-descr": "\u003cp\u003eOnly non-empty suffixes are processed.\nMore oftenly we might need\n\u003c/p\u003e\u003cpre\u003e zipWithTails :: (Read sig b, Transform2 sig a) =\u003e\n    (b -\u003e sig a -\u003e a) -\u003e sig b -\u003e sig a -\u003e sig a\n\u003c/pre\u003e\u003cp\u003ethis would preserve the chunk structure of \u003ctt\u003esig a\u003c/tt\u003e,\nbut it is a bit more hassle to implement that.\n\u003c/p\u003e",
        "fct-module": "Synthesizer.Generic.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(a -\u003e sig b -\u003e a) -\u003e sig a -\u003e sig b -\u003e sig a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Signal.html#zipWithTails",
        "fct-type": "unknown",
        "title": "zipWithTails"
      },
      "index": {
        "description": "Only non-empty suffixes are processed More oftenly we might need zipWithTails Read sig Transform2 sig sig sig sig sig this would preserve the chunk structure of sig but it is bit more hassle to implement that",
        "hierarchy": "Synthesizer Generic Signal",
        "module": "Synthesizer.Generic.Signal",
        "name": "zipWithTails",
        "normalized": "(a-\u003eb c-\u003ea)-\u003eb a-\u003eb c-\u003eb a",
        "package": "synthesizer",
        "partial": "With Tails",
        "signature": "(a-\u003esig b-\u003ea)-\u003esig a-\u003esig b-\u003esig a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Signal2.html#v:Transform",
      "description": {
        "fct-module": "Synthesizer.Generic.Signal2",
        "fct-package": "synthesizer",
        "fct-signature": "class",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Signal2.html#Transform",
        "fct-type": "unknown",
        "title": "Transform"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Signal2",
        "module": "Synthesizer.Generic.Signal2",
        "name": "Transform",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Transform",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Signal2.html#v:crochetL",
      "description": {
        "fct-module": "Synthesizer.Generic.Signal2",
        "fct-package": "synthesizer",
        "fct-signature": "(y0 -\u003e s -\u003e Maybe (y1, s)) -\u003e s -\u003e sig y0 -\u003e sig y1",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Signal2.html#crochetL",
        "fct-type": "unknown",
        "title": "crochetL"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Signal2",
        "module": "Synthesizer.Generic.Signal2",
        "name": "crochetL",
        "normalized": "(a-\u003eb-\u003eMaybe(a,b))-\u003eb-\u003ec a-\u003ec a",
        "package": "synthesizer",
        "partial": "",
        "signature": "(y-\u003es-\u003eMaybe(y,s))-\u003es-\u003esig y-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Signal2.html#v:linearComb",
      "description": {
        "fct-module": "Synthesizer.Generic.Signal2",
        "fct-package": "synthesizer",
        "fct-signature": "sig t -\u003e sig y -\u003e y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Signal2.html#linearComb",
        "fct-type": "unknown",
        "title": "linearComb"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Signal2",
        "module": "Synthesizer.Generic.Signal2",
        "name": "linearComb",
        "normalized": "a b-\u003ea c-\u003ec",
        "package": "synthesizer",
        "partial": "Comb",
        "signature": "sig t-\u003esig y-\u003ey"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Signal2.html#v:map",
      "description": {
        "fct-module": "Synthesizer.Generic.Signal2",
        "fct-package": "synthesizer",
        "fct-signature": "(y0 -\u003e y1) -\u003e sig y0 -\u003e sig y1",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Signal2.html#map",
        "fct-type": "unknown",
        "title": "map"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Signal2",
        "module": "Synthesizer.Generic.Signal2",
        "name": "map",
        "normalized": "(a-\u003ea)-\u003eb a-\u003eb a",
        "package": "synthesizer",
        "partial": "",
        "signature": "(y-\u003ey)-\u003esig y-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Signal2.html#v:mapAdjacent",
      "description": {
        "fct-module": "Synthesizer.Generic.Signal2",
        "fct-package": "synthesizer",
        "fct-signature": "(a -\u003e a -\u003e b) -\u003e sig a -\u003e sig b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Signal2.html#mapAdjacent",
        "fct-type": "unknown",
        "title": "mapAdjacent"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Signal2",
        "module": "Synthesizer.Generic.Signal2",
        "name": "mapAdjacent",
        "normalized": "(a-\u003ea-\u003eb)-\u003ec a-\u003ec b",
        "package": "synthesizer",
        "partial": "Adjacent",
        "signature": "(a-\u003ea-\u003eb)-\u003esig a-\u003esig b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Signal2.html#v:mapTails",
      "description": {
        "fct-module": "Synthesizer.Generic.Signal2",
        "fct-package": "synthesizer",
        "fct-signature": "(sig a -\u003e b) -\u003e sig a -\u003e sig b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Signal2.html#mapTails",
        "fct-type": "unknown",
        "title": "mapTails"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Signal2",
        "module": "Synthesizer.Generic.Signal2",
        "name": "mapTails",
        "normalized": "(a b-\u003ec)-\u003ea b-\u003ea c",
        "package": "synthesizer",
        "partial": "Tails",
        "signature": "(sig a-\u003eb)-\u003esig a-\u003esig b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Signal2.html#v:modifyModulated",
      "description": {
        "fct-descr": "Here the control may vary over the time. \n",
        "fct-module": "Synthesizer.Generic.Signal2",
        "fct-package": "synthesizer",
        "fct-signature": "Simple s ctrl a b -\u003e sig ctrl -\u003e sig a -\u003e sig b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Signal2.html#modifyModulated",
        "fct-type": "unknown",
        "title": "modifyModulated"
      },
      "index": {
        "description": "Here the control may vary over the time",
        "hierarchy": "Synthesizer Generic Signal2",
        "module": "Synthesizer.Generic.Signal2",
        "name": "modifyModulated",
        "normalized": "Simple a b c d-\u003ee b-\u003ee c-\u003ee d",
        "package": "synthesizer",
        "partial": "Modulated",
        "signature": "Simple s ctrl a b-\u003esig ctrl-\u003esig a-\u003esig b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Signal2.html#v:modifyStatic",
      "description": {
        "fct-module": "Synthesizer.Generic.Signal2",
        "fct-package": "synthesizer",
        "fct-signature": "Simple s ctrl a b -\u003e ctrl -\u003e sig a -\u003e sig b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Signal2.html#modifyStatic",
        "fct-type": "unknown",
        "title": "modifyStatic"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Signal2",
        "module": "Synthesizer.Generic.Signal2",
        "name": "modifyStatic",
        "normalized": "Simple a b c d-\u003eb-\u003ee c-\u003ee d",
        "package": "synthesizer",
        "partial": "Static",
        "signature": "Simple s ctrl a b-\u003ectrl-\u003esig a-\u003esig b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Signal2.html#v:scanL",
      "description": {
        "fct-module": "Synthesizer.Generic.Signal2",
        "fct-package": "synthesizer",
        "fct-signature": "(y1 -\u003e y0 -\u003e y1) -\u003e y1 -\u003e sig y0 -\u003e sig y1",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Signal2.html#scanL",
        "fct-type": "unknown",
        "title": "scanL"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Signal2",
        "module": "Synthesizer.Generic.Signal2",
        "name": "scanL",
        "normalized": "(a-\u003ea-\u003ea)-\u003ea-\u003eb a-\u003eb a",
        "package": "synthesizer",
        "partial": "",
        "signature": "(y-\u003ey-\u003ey)-\u003ey-\u003esig y-\u003esig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Signal2.html#v:unzip",
      "description": {
        "fct-module": "Synthesizer.Generic.Signal2",
        "fct-package": "synthesizer",
        "fct-signature": "sig (a, b) -\u003e (sig a, sig b)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Signal2.html#unzip",
        "fct-type": "unknown",
        "title": "unzip"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Signal2",
        "module": "Synthesizer.Generic.Signal2",
        "name": "unzip",
        "normalized": "a(b,c)-\u003e(a b,a c)",
        "package": "synthesizer",
        "partial": "",
        "signature": "sig(a,b)-\u003e(sig a,sig b)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Signal2.html#v:unzip3",
      "description": {
        "fct-module": "Synthesizer.Generic.Signal2",
        "fct-package": "synthesizer",
        "fct-signature": "sig (a, b, c) -\u003e (sig a, sig b, sig c)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Signal2.html#unzip3",
        "fct-type": "unknown",
        "title": "unzip3"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Signal2",
        "module": "Synthesizer.Generic.Signal2",
        "name": "unzip3",
        "normalized": "a(b,c,d)-\u003e(a b,a c,a d)",
        "package": "synthesizer",
        "partial": "",
        "signature": "sig(a,b,c)-\u003e(sig a,sig b,sig c)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Signal2.html#v:zip",
      "description": {
        "fct-module": "Synthesizer.Generic.Signal2",
        "fct-package": "synthesizer",
        "fct-signature": "sig a -\u003e sig b -\u003e sig (a, b)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Signal2.html#zip",
        "fct-type": "unknown",
        "title": "zip"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Signal2",
        "module": "Synthesizer.Generic.Signal2",
        "name": "zip",
        "normalized": "a b-\u003ea c-\u003ea(b,c)",
        "package": "synthesizer",
        "partial": "",
        "signature": "sig a-\u003esig b-\u003esig(a,b)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Signal2.html#v:zipWith",
      "description": {
        "fct-module": "Synthesizer.Generic.Signal2",
        "fct-package": "synthesizer",
        "fct-signature": "(a -\u003e b -\u003e c) -\u003e sig a -\u003e sig b -\u003e sig c",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Signal2.html#zipWith",
        "fct-type": "unknown",
        "title": "zipWith"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Signal2",
        "module": "Synthesizer.Generic.Signal2",
        "name": "zipWith",
        "normalized": "(a-\u003eb-\u003ec)-\u003ed a-\u003ed b-\u003ed c",
        "package": "synthesizer",
        "partial": "With",
        "signature": "(a-\u003eb-\u003ec)-\u003esig a-\u003esig b-\u003esig c"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Signal2.html#v:zipWith2Tails",
      "description": {
        "fct-module": "Synthesizer.Generic.Signal2",
        "fct-package": "synthesizer",
        "fct-signature": "(a -\u003e sig b -\u003e sig c -\u003e d) -\u003e sig a -\u003e sig b -\u003e sig c -\u003e sig d",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Signal2.html#zipWith2Tails",
        "fct-type": "unknown",
        "title": "zipWith2Tails"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Signal2",
        "module": "Synthesizer.Generic.Signal2",
        "name": "zipWith2Tails",
        "normalized": "(a-\u003eb c-\u003eb d-\u003ee)-\u003eb a-\u003eb c-\u003eb d-\u003eb e",
        "package": "synthesizer",
        "partial": "With Tails",
        "signature": "(a-\u003esig b-\u003esig c-\u003ed)-\u003esig a-\u003esig b-\u003esig c-\u003esig d"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Signal2.html#v:zipWithState",
      "description": {
        "fct-module": "Synthesizer.Generic.Signal2",
        "fct-package": "synthesizer",
        "fct-signature": "(a -\u003e b -\u003e c) -\u003e T a -\u003e sig b -\u003e sig c",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Signal2.html#zipWithState",
        "fct-type": "unknown",
        "title": "zipWithState"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Signal2",
        "module": "Synthesizer.Generic.Signal2",
        "name": "zipWithState",
        "normalized": "(a-\u003eb-\u003ec)-\u003eT a-\u003ed b-\u003ed c",
        "package": "synthesizer",
        "partial": "With State",
        "signature": "(a-\u003eb-\u003ec)-\u003eT a-\u003esig b-\u003esig c"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Signal2.html#v:zipWithTails",
      "description": {
        "fct-module": "Synthesizer.Generic.Signal2",
        "fct-package": "synthesizer",
        "fct-signature": "(a -\u003e sig b -\u003e c) -\u003e sig a -\u003e sig b -\u003e sig c",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Signal2.html#zipWithTails",
        "fct-type": "unknown",
        "title": "zipWithTails"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Signal2",
        "module": "Synthesizer.Generic.Signal2",
        "name": "zipWithTails",
        "normalized": "(a-\u003eb c-\u003ed)-\u003eb a-\u003eb c-\u003eb d",
        "package": "synthesizer",
        "partial": "With Tails",
        "signature": "(a-\u003esig b-\u003ec)-\u003esig a-\u003esig b-\u003esig c"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Tutorial.html#v:filterPingCausal",
      "description": {
        "fct-descr": "\u003cp\u003eIt is however not uncommon that all readers read with the same speed.\nIn this case we would in principle only need to share the input signal per sample.\nThis way we would not need a data structure\nfor storing a sub-sequence of samples temporarily.\nBut how to do that practically?\n\u003c/p\u003e\u003cp\u003eThe solution is not to think in terms of signals and signal processors,\ne.g. \u003ctt\u003eSig.T a\u003c/tt\u003e and \u003ctt\u003eSig.T a -\u003e Sig.T b -\u003e Sig.T c\u003c/tt\u003e, respectively,\nbut in terms of signal processors, that are guaranteed to run in sync.\nThat is we must assert that signal processors\nprocess the samples in chronological order and emit one sample per input sample.\nWe call such processes \"causal\" processes.\nFor example \u003ctt\u003eCausal.T (a,b) c\u003c/tt\u003e represents the function \u003ctt\u003eSig.T (a,b) -\u003e Sig.T c\u003c/tt\u003e\nbut it also carries the guarantee,\nthat for each input of type \u003ctt\u003e(a,b)\u003c/tt\u003e\none sample of type \u003ctt\u003ec\u003c/tt\u003e is emitted or the output terminates.\nInternally it is the Kleisli arrow of the \u003ctt\u003eStateT Maybe\u003c/tt\u003e monad.\n\u003c/p\u003e\u003cp\u003eAnother important application of the Causal arrow is feedback.\nUsing causal processes guarantees, that a process cannot read ahead,\nsuch that it runs into future data, which does still not exist due to recursion.\n\u003c/p\u003e\u003cp\u003eProgramming with arrows needs a bit experience or Haskell extensions.\nHaskell extensions are either an \u003ctt\u003eArrow\u003c/tt\u003e syntax preprocessor\nor the preprocessor that is built into GHC.\nHowever, for computing with physical dimensions\nyou can no longer use the original \u003ctt\u003eArrow\u003c/tt\u003e class\nand thus you cannot use the arrow syntax.\nSo here is an example of how to program \u003ctt\u003e\u003ca\u003efilterPingShare\u003c/a\u003e\u003c/tt\u003e\nusing \u003ctt\u003eArrow\u003c/tt\u003e combinators.\n\u003c/p\u003e",
        "fct-module": "Synthesizer.Generic.Tutorial",
        "fct-package": "synthesizer",
        "fct-signature": "IO ExitCode",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Tutorial.html#filterPingCausal",
        "fct-type": "unknown",
        "title": "filterPingCausal"
      },
      "index": {
        "description": "It is however not uncommon that all readers read with the same speed In this case we would in principle only need to share the input signal per sample This way we would not need data structure for storing sub-sequence of samples temporarily But how to do that practically The solution is not to think in terms of signals and signal processors e.g Sig.T and Sig.T Sig.T Sig.T respectively but in terms of signal processors that are guaranteed to run in sync That is we must assert that signal processors process the samples in chronological order and emit one sample per input sample We call such processes causal processes For example Causal.T represents the function Sig.T Sig.T but it also carries the guarantee that for each input of type one sample of type is emitted or the output terminates Internally it is the Kleisli arrow of the StateT Maybe monad Another important application of the Causal arrow is feedback Using causal processes guarantees that process cannot read ahead such that it runs into future data which does still not exist due to recursion Programming with arrows needs bit experience or Haskell extensions Haskell extensions are either an Arrow syntax preprocessor or the preprocessor that is built into GHC However for computing with physical dimensions you can no longer use the original Arrow class and thus you cannot use the arrow syntax So here is an example of how to program filterPingShare using Arrow combinators",
        "hierarchy": "Synthesizer Generic Tutorial",
        "module": "Synthesizer.Generic.Tutorial",
        "name": "filterPingCausal",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Ping Causal",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Tutorial.html#v:filterPingShare",
      "description": {
        "fct-descr": "\u003cp\u003eYou can achieve sharing by a very simple way.\nYou can write the result of the signal generator in a list (\u003ctt\u003e\u003ca\u003etoList\u003c/a\u003e\u003c/tt\u003e)\nand use this list as source for a new generator (\u003ctt\u003e\u003ca\u003efromList\u003c/a\u003e\u003c/tt\u003e).\n\u003ctt\u003e\u003ca\u003efromList\u003c/a\u003e\u003c/tt\u003e provides a signal generator that generates new sample values\nby delivering the next sample from the list.\n\u003c/p\u003e\u003cp\u003eIn a real world implementation you would move\nthe \u003ctt\u003eSig.fromList . Sig.toList\u003c/tt\u003e to \u003ctt\u003e\u003ca\u003efilterPingStateProc\u003c/a\u003e\u003c/tt\u003e,\nsince the caller cannot know, that this function uses the signal twice,\nand the implementor of \u003ctt\u003e\u003ca\u003efilterPingStateProc\u003c/a\u003e\u003c/tt\u003e cannot know,\nhow expensive the computation of \u003ctt\u003eenv\u003c/tt\u003e is.\n\u003c/p\u003e\u003cp\u003eYou can use any other signal type for sharing, e.g. storable vectors,\nbut whatever type you choose, you also get its disadvantages.\nNamely, storable vectors only work for storable samples\nand lists are generally slow,\nand they also cannot be optimized away,\nsince this only works, when no sharing is required.\n\u003c/p\u003e\u003cp\u003eWhenever a signal is shared as input between several signal processes,\nthe actual materialized data is that\nbetween the slowest and the fastest reading process.\nThis is due to lazy evaluation and garbage collection.\nIf the different readers read with different speed,\nthen you will certainly need a temporary sample storage.\n\u003c/p\u003e",
        "fct-module": "Synthesizer.Generic.Tutorial",
        "fct-package": "synthesizer",
        "fct-signature": "IO ExitCode",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Tutorial.html#filterPingShare",
        "fct-type": "unknown",
        "title": "filterPingShare"
      },
      "index": {
        "description": "You can achieve sharing by very simple way You can write the result of the signal generator in list toList and use this list as source for new generator fromList fromList provides signal generator that generates new sample values by delivering the next sample from the list In real world implementation you would move the Sig.fromList Sig.toList to filterPingStateProc since the caller cannot know that this function uses the signal twice and the implementor of filterPingStateProc cannot know how expensive the computation of env is You can use any other signal type for sharing e.g storable vectors but whatever type you choose you also get its disadvantages Namely storable vectors only work for storable samples and lists are generally slow and they also cannot be optimized away since this only works when no sharing is required Whenever signal is shared as input between several signal processes the actual materialized data is that between the slowest and the fastest reading process This is due to lazy evaluation and garbage collection If the different readers read with different speed then you will certainly need temporary sample storage",
        "hierarchy": "Synthesizer Generic Tutorial",
        "module": "Synthesizer.Generic.Tutorial",
        "name": "filterPingShare",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Ping Share",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Tutorial.html#v:filterPingState",
      "description": {
        "fct-descr": "In the following example we generate an exponential curve\nwhich shall be used both as envelope\nand as resonance frequency control of a resonant lowpass.\nActually, recomputing an exponential curve is not an issue,\nsince it only needs one multiplication per sample.\nBut it is simple enough to demonstrate the problem and its solutions.\nThe expression \u003ctt\u003elet env = exponential2 50000 1\u003c/tt\u003e fools the reader of the program,\nsince the \u003ctt\u003eenv\u003c/tt\u003e that is shared, is only the signal generator,\nthat is, the description of how to compute the exponential curve successively.\nThat is wherever a signal process reads \u003ctt\u003eenv\u003c/tt\u003e, it is computed again.\n",
        "fct-module": "Synthesizer.Generic.Tutorial",
        "fct-package": "synthesizer",
        "fct-signature": "IO ExitCode",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Tutorial.html#filterPingState",
        "fct-type": "unknown",
        "title": "filterPingState"
      },
      "index": {
        "description": "In the following example we generate an exponential curve which shall be used both as envelope and as resonance frequency control of resonant lowpass Actually recomputing an exponential curve is not an issue since it only needs one multiplication per sample But it is simple enough to demonstrate the problem and its solutions The expression let env exponential2 fools the reader of the program since the env that is shared is only the signal generator that is the description of how to compute the exponential curve successively That is wherever signal process reads env it is computed again",
        "hierarchy": "Synthesizer Generic Tutorial",
        "module": "Synthesizer.Generic.Tutorial",
        "name": "filterPingState",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Ping State",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Tutorial.html#v:filterPingStateProc",
      "description": {
        "fct-descr": "Merging subsequent signal processes based on signal generators\ninto an efficient large signal processor is easy.\nNot storing intermediate results is however a problem in another situation:\nSometimes you want to share one signal between several processes.\n",
        "fct-module": "Synthesizer.Generic.Tutorial",
        "fct-package": "synthesizer",
        "fct-signature": "T Double -\u003e T Double",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Tutorial.html#filterPingStateProc",
        "fct-type": "unknown",
        "title": "filterPingStateProc"
      },
      "index": {
        "description": "Merging subsequent signal processes based on signal generators into an efficient large signal processor is easy Not storing intermediate results is however problem in another situation Sometimes you want to share one signal between several processes",
        "hierarchy": "Synthesizer Generic Tutorial",
        "module": "Synthesizer.Generic.Tutorial",
        "name": "filterPingStateProc",
        "normalized": "T Double-\u003eT Double",
        "package": "synthesizer",
        "partial": "Ping State Proc",
        "signature": "T Double-\u003eT Double"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Tutorial.html#v:filterSaw",
      "description": {
        "fct-descr": "Here we instantiate \u003ctt\u003e\u003ca\u003efilterSawSig\u003c/a\u003e\u003c/tt\u003e for storable vectors and play it.\nThis means that all operations convert a storable vector into another storable vector.\nWhile every single operation probably is as efficient as possible,\nthe composition of all those processes could be more efficient.\nSo keep on reading.\n",
        "fct-module": "Synthesizer.Generic.Tutorial",
        "fct-package": "synthesizer",
        "fct-signature": "IO ExitCode",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Tutorial.html#filterSaw",
        "fct-type": "unknown",
        "title": "filterSaw"
      },
      "index": {
        "description": "Here we instantiate filterSawSig for storable vectors and play it This means that all operations convert storable vector into another storable vector While every single operation probably is as efficient as possible the composition of all those processes could be more efficient So keep on reading",
        "hierarchy": "Synthesizer Generic Tutorial",
        "module": "Synthesizer.Generic.Tutorial",
        "name": "filterSaw",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Saw",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Tutorial.html#v:filterSawSig",
      "description": {
        "fct-descr": "We rewrite the filter example \u003ctt\u003e\u003ca\u003efilterSaw\u003c/a\u003e\u003c/tt\u003e\nin terms of type classes for more signal types.\nThe constraints become quite large\nbecause we must assert, that a particular sample type\ncan be used in the addressed signal type.\n",
        "fct-module": "Synthesizer.Generic.Tutorial",
        "fct-package": "synthesizer",
        "fct-signature": "sig Double",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Tutorial.html#filterSawSig",
        "fct-type": "unknown",
        "title": "filterSawSig"
      },
      "index": {
        "description": "We rewrite the filter example filterSaw in terms of type classes for more signal types The constraints become quite large because we must assert that particular sample type can be used in the addressed signal type",
        "hierarchy": "Synthesizer Generic Tutorial",
        "module": "Synthesizer.Generic.Tutorial",
        "name": "filterSawSig",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Saw Sig",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Tutorial.html#v:filterSawState",
      "description": {
        "fct-descr": "We demonstrate the stateful signal generator using the known \u003ctt\u003e\u003ca\u003efilterSaw\u003c/a\u003e\u003c/tt\u003e example.\nActually we can reuse the code from above,\nbecause the signal generator is also an instance of the generic signal class.\n",
        "fct-module": "Synthesizer.Generic.Tutorial",
        "fct-package": "synthesizer",
        "fct-signature": "IO ExitCode",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Tutorial.html#filterSawState",
        "fct-type": "unknown",
        "title": "filterSawState"
      },
      "index": {
        "description": "We demonstrate the stateful signal generator using the known filterSaw example Actually we can reuse the code from above because the signal generator is also an instance of the generic signal class",
        "hierarchy": "Synthesizer Generic Tutorial",
        "module": "Synthesizer.Generic.Tutorial",
        "name": "filterSawState",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Saw State",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Tutorial.html#v:oscillator",
      "description": {
        "fct-descr": "Here is a simple oscillator generated as lazy storable vector.\nAn oscillator is a signal generator,\nthat is it produces a signal\nwithout consuming other signals that correspond in time.\nSignal generators have the maximal block size as parameter.\nThis is the lower limit of possible feedback delays.\n",
        "fct-module": "Synthesizer.Generic.Tutorial",
        "fct-package": "synthesizer",
        "fct-signature": "IO ExitCode",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Tutorial.html#oscillator",
        "fct-type": "unknown",
        "title": "oscillator"
      },
      "index": {
        "description": "Here is simple oscillator generated as lazy storable vector An oscillator is signal generator that is it produces signal without consuming other signals that correspond in time Signal generators have the maximal block size as parameter This is the lower limit of possible feedback delays",
        "hierarchy": "Synthesizer Generic Tutorial",
        "module": "Synthesizer.Generic.Tutorial",
        "name": "oscillator",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Tutorial.html#v:play",
      "description": {
        "fct-descr": "First, we define a play routine for lazy storable vectors.\nStorable lazy vectors are lazy lists of low-level arrays.\nThey are both efficient in time and memory consumption,\nbut the blocks disallow feedback by small delays.\nElements of a storable vector must be of type class Storable.\nThis means that elements must have fixed size\nand advanced data types like functions cannot be used.\n",
        "fct-module": "Synthesizer.Generic.Tutorial",
        "fct-package": "synthesizer",
        "fct-signature": "T Double -\u003e IO ExitCode",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Tutorial.html#play",
        "fct-type": "unknown",
        "title": "play"
      },
      "index": {
        "description": "First we define play routine for lazy storable vectors Storable lazy vectors are lazy lists of low-level arrays They are both efficient in time and memory consumption but the blocks disallow feedback by small delays Elements of storable vector must be of type class Storable This means that elements must have fixed size and advanced data types like functions cannot be used",
        "hierarchy": "Synthesizer Generic Tutorial",
        "module": "Synthesizer.Generic.Tutorial",
        "name": "play",
        "normalized": "T Double-\u003eIO ExitCode",
        "package": "synthesizer",
        "partial": "",
        "signature": "T Double-\u003eIO ExitCode"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Tutorial.html#v:playState",
      "description": {
        "fct-descr": "The next signal type we want to consider is the stateful signal generator.\nIt is not a common data structure, where the sample values are materialized.\nInstead it is a description of how to generate sample values iteratively.\nThis is almost identical to the \u003ctt\u003eData.Stream\u003c/tt\u003e module from the \u003ctt\u003estream-fusion\u003c/tt\u003e package.\nWith respect to laziness and restrictions of the sample type (namely none),\nthis signal representation is equivalent to lists.\nYou can convert one into the other in a lossless way.\nThat is, function as sample type is possible.\nCombination of such signal generators is easily possible\nand does not require temporary storage,\nbecause this signal representation needs no sample value storage at all.\nHowever at the end of such processes, the signal must be materialized.\nHere we write the result into a lazy storable vector and play that.\nWhat the compiler actually does is to create a single loop,\nthat generates the storable vector to be played in one go.\n",
        "fct-module": "Synthesizer.Generic.Tutorial",
        "fct-package": "synthesizer",
        "fct-signature": "T Double -\u003e IO ExitCode",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Tutorial.html#playState",
        "fct-type": "unknown",
        "title": "playState"
      },
      "index": {
        "description": "The next signal type we want to consider is the stateful signal generator It is not common data structure where the sample values are materialized Instead it is description of how to generate sample values iteratively This is almost identical to the Data.Stream module from the stream-fusion package With respect to laziness and restrictions of the sample type namely none this signal representation is equivalent to lists You can convert one into the other in lossless way That is function as sample type is possible Combination of such signal generators is easily possible and does not require temporary storage because this signal representation needs no sample value storage at all However at the end of such processes the signal must be materialized Here we write the result into lazy storable vector and play that What the compiler actually does is to create single loop that generates the storable vector to be played in one go",
        "hierarchy": "Synthesizer Generic Tutorial",
        "module": "Synthesizer.Generic.Tutorial",
        "name": "playState",
        "normalized": "T Double-\u003eIO ExitCode",
        "package": "synthesizer",
        "partial": "State",
        "signature": "T Double-\u003eIO ExitCode"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Wave.html#v:sample",
      "description": {
        "fct-module": "Synthesizer.Generic.Wave",
        "fct-package": "synthesizer",
        "fct-signature": "T a v -\u003e sig v -\u003e T a v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Wave.html#sample",
        "fct-type": "unknown",
        "title": "sample"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Generic Wave",
        "module": "Synthesizer.Generic.Wave",
        "name": "sample",
        "normalized": "T a b-\u003ec b-\u003eT a b",
        "package": "synthesizer",
        "partial": "",
        "signature": "T a v-\u003esig v-\u003eT a v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Generic-Wave.html#v:sampledTone",
      "description": {
        "fct-descr": "Interpolate first within waves and then across waves,\nwhich is simpler but maybe less efficient for lists.\nHowever for types with fast indexing/drop like StorableVector this is optimal.\n",
        "fct-module": "Synthesizer.Generic.Wave",
        "fct-package": "synthesizer",
        "fct-signature": "T a v -\u003e T a v -\u003e a -\u003e sig v -\u003e a -\u003e T a v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Generic-Wave.html#sampledTone",
        "fct-type": "unknown",
        "title": "sampledTone"
      },
      "index": {
        "description": "Interpolate first within waves and then across waves which is simpler but maybe less efficient for lists However for types with fast indexing drop like StorableVector this is optimal",
        "hierarchy": "Synthesizer Generic Wave",
        "module": "Synthesizer.Generic.Wave",
        "name": "sampledTone",
        "normalized": "T a b-\u003eT a b-\u003ea-\u003ec b-\u003ea-\u003eT a b",
        "package": "synthesizer",
        "partial": "Tone",
        "signature": "T a v-\u003eT a v-\u003ea-\u003esig v-\u003ea-\u003eT a v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Inference-Overview.html",
      "description": {
        "fct-descr": "\u003cp\u003eThere are still several alternatives\nof how to handle the sample rates\n(that can be equipped with physical dimensions).\n\u003c/p\u003e\u003col\u003e\u003cli\u003e Stick to simple lists as data and\n    pass additional information directly to the functions.\n    E.g. mixing several signals is easy\n    since only one sample rate is given\n    which applies to all signals.\n    But it leads to the problem\n    that subsequent function calls must receive the same value.\n    This cannot be guaranteed and is thus a source of error.\n    E.g. the mistake\n       \u003ctt\u003eplay (44100*hertz) (osciSine (22050*hertz) (440*hertz))\u003c/tt\u003e\n    can't be detected.\n    In this approach the signal data structure is very simple,\n    the values may be passed to multiple functions,\n    the combinations are simply done by function application,\n    a supervisor is not necessary,\n    consistency checks can hardly be performed.\n    This approach is certainly the most basic one,\n    on which others, more safer ones, can sit on top.\n    It is implemented in \u003ca\u003eSynthesizer.Plain.Signal\u003c/a\u003e with numbers without units.\n\u003c/li\u003e\u003cli\u003e Equip signals with sample rate and amplitude.\n    Processors without input need the sample rate as explicit parameter.\n    If there is more than one signal as input,\n    then there must be additional checks.\n    The error in\n    \u003ctt\u003e\n       mix (osciSine (22050*hertz) (440*hertz))\n           (osciSine (44100*hertz) (330*hertz))\n    \u003c/tt\u003e\n    can be detected at runtime.\n    However the sample rate has to be specified for both input signals,\n    although it is obvious, that both signals have to share the sample rate.\n    In this approach the data structure is more complex,\n    the values may be passed to multiple functions\n    but consistency checks can be performed\n    and a supervisor is still not necessary.\n    This strategy is implemented in the \u003ca\u003eSynthesizer.Physical.Signal\u003c/a\u003e modules.\n\u003c/li\u003e\u003cli\u003e We still like to hide the sample rate where possible.\n    All processors should work as good as possible at each rate.\n    Here we provide the sample rate to each processor.\n    The result of a processor is not just a list of samples\n    but it is a function, which computes the list of samples\n    depending on the sample rate.\n    Sample rate is fixed not until it comes to the rendering of a sound,\n    e.g. for playing or writing of a file.\n       \u003ctt\u003eplay (44100*hertz) (osciSine (440*hertz))\u003c/tt\u003e\n    Returning a function instead of computed data\n    has the disadvantage that multiply used data cannot be shared.\n    For these situations we need a \u003ctt\u003eshare\u003c/tt\u003e function.\n    Combinator functions similar to \u003ctt\u003e($)\u003c/tt\u003e are used\n    to plug sample rate dependent output from one processor\n    into plain signal parameters.\n    With this approach, the type signature tells\n    which signals share the sample rate.\n    Infinitely many signals can be handled.\n    Types for time and volume can be chosen quite freely.\n    Supervision is not necessary.\n    This strategy is implemented in the \u003ca\u003eSynthesizer.Inference.Reader.Signal\u003c/a\u003e modules,\n    where we hide the sample rate in a \u003ca\u003eControl.Monad.Trans.Reader\u003c/a\u003e.\n    There is also \u003ca\u003eSynthesizer.SampleRateContext.Signal\u003c/a\u003e\n    which exposes the sample rate.\n    It is more convenient to implement and to call,\n    but I think it is more unsafe,\n    because you can mix sample rates from different sources accidentally.\n    The same is available for numbers with dimension terms in types.\n    See \u003ca\u003eSynthesizer.Dimensional.Process\u003c/a\u003e.\n    \u003cem\u003eIn most cases this will be the method of choice!\u003c/em\u003e\n    Maybe I'm going to wrap this in a Reader monad/applicative functor.\n    It also requires that Haddock supports comments in parameters of type constructors.\n\u003c/li\u003e\u003cli\u003e I have tried more sophisticated approaches\n    in order to handle not only the sample rates but also the amplitudes.\n    However I feel that I wanted more than I actually needed.\n    I do no longer maintain these approaches but explain them for completeness.\n    The most convenient solution for handling sample rates and amplitudes\n    is certainly an inference system like Haskell's type system.\n    If some input and output signals of a processor\n    must have the same sampling rate,\n    then the concrete rate must only be known for one of these signals.\n    If no participating signal has a fixed rate, this is an error.\n    The dependencies of sampling rates become very large by this system.\n    The direction can be from inputs to outputs and vice versa,\n    not to mention loops.\n    This approach needs a lot of management,\n    e.g. a supervisor which runs the network,\n    but it is very convenient and safe.\n    However, sometimes you have to fiddle with monads.\n    Unfortunately it is restricted to finitely many monads\n    and the types for time and volume are restricted.\n    Thus this concept does not scale to physical units expressed in types.\n    This strategy is implemented in the modules under \u003ca\u003eSynthesizer.Inference.Monad.Signal\u003c/a\u003e.\n\u003c/li\u003e\u003cli\u003e We tried to work-around the restrictions\n    using a function based approach.\n    Since the parameters are functions,\n    sharing cannot take place.\n    There is no way to spread sample rate from one consumer to another one.\n    E.g. If there is\n    \u003ctt\u003e\n       let y = f x;\n           z = g x\n    \u003c/tt\u003e\n    and it is known that \u003ctt\u003ef\u003c/tt\u003e and \u003ctt\u003eg\u003c/tt\u003e maintain the sample rate,\n    and the sample rate of \u003ctt\u003ez\u003c/tt\u003e is known - how to infer the sample rate of \u003ctt\u003ey\u003c/tt\u003e?\n    This approach was dropped quickly and\n    exists for historical reasons in \u003ca\u003eSynthesizer.Inference.Func.Signal\u003c/a\u003e.\n\u003c/li\u003e\u003cli\u003e There is a very cool approach,\n    which implements the equation solver of the monadic approach\n    by lazy evaluation and Peano numbers.\n    This poses no restriction on types\n    and works for infinitely many equations as well.\n    The drawbacks are difficult application\n    (you cannot simply apply a function to a signal,\n    but you must compose functions in an arrow like way),\n    and slow solution of the equation system\n    (quadratic time although in principle\n    only run-time around linear time is necessary,\n    it's similar to topological sort).\n    However it's as slow as the explicit solver using monads in \u003ca\u003eSynthesizer.Inference.Monad.Signal\u003c/a\u003e.\n    This strategy is tested in the modules under \u003ca\u003eSynthesizer.Inference.Fix\u003c/a\u003e.\n\u003c/li\u003e\u003c/ol\u003e",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Inference-Overview.html",
        "fct-type": "unknown",
        "title": ""
      },
      "index": {
        "description": "There are still several alternatives of how to handle the sample rates that can be equipped with physical dimensions Stick to simple lists as data and pass additional information directly to the functions E.g mixing several signals is easy since only one sample rate is given which applies to all signals But it leads to the problem that subsequent function calls must receive the same value This cannot be guaranteed and is thus source of error E.g the mistake play hertz osciSine hertz hertz can be detected In this approach the signal data structure is very simple the values may be passed to multiple functions the combinations are simply done by function application supervisor is not necessary consistency checks can hardly be performed This approach is certainly the most basic one on which others more safer ones can sit on top It is implemented in Synthesizer.Plain.Signal with numbers without units Equip signals with sample rate and amplitude Processors without input need the sample rate as explicit parameter If there is more than one signal as input then there must be additional checks The error in mix osciSine hertz hertz osciSine hertz hertz can be detected at runtime However the sample rate has to be specified for both input signals although it is obvious that both signals have to share the sample rate In this approach the data structure is more complex the values may be passed to multiple functions but consistency checks can be performed and supervisor is still not necessary This strategy is implemented in the Synthesizer.Physical.Signal modules We still like to hide the sample rate where possible All processors should work as good as possible at each rate Here we provide the sample rate to each processor The result of processor is not just list of samples but it is function which computes the list of samples depending on the sample rate Sample rate is fixed not until it comes to the rendering of sound e.g for playing or writing of file play hertz osciSine hertz Returning function instead of computed data has the disadvantage that multiply used data cannot be shared For these situations we need share function Combinator functions similar to are used to plug sample rate dependent output from one processor into plain signal parameters With this approach the type signature tells which signals share the sample rate Infinitely many signals can be handled Types for time and volume can be chosen quite freely Supervision is not necessary This strategy is implemented in the Synthesizer.Inference.Reader.Signal modules where we hide the sample rate in Control.Monad.Trans.Reader There is also Synthesizer.SampleRateContext.Signal which exposes the sample rate It is more convenient to implement and to call but think it is more unsafe because you can mix sample rates from different sources accidentally The same is available for numbers with dimension terms in types See Synthesizer.Dimensional.Process In most cases this will be the method of choice Maybe going to wrap this in Reader monad applicative functor It also requires that Haddock supports comments in parameters of type constructors have tried more sophisticated approaches in order to handle not only the sample rates but also the amplitudes However feel that wanted more than actually needed do no longer maintain these approaches but explain them for completeness The most convenient solution for handling sample rates and amplitudes is certainly an inference system like Haskell type system If some input and output signals of processor must have the same sampling rate then the concrete rate must only be known for one of these signals If no participating signal has fixed rate this is an error The dependencies of sampling rates become very large by this system The direction can be from inputs to outputs and vice versa not to mention loops This approach needs lot of management e.g supervisor which runs the network but it is very convenient and safe However sometimes you have to fiddle with monads Unfortunately it is restricted to finitely many monads and the types for time and volume are restricted Thus this concept does not scale to physical units expressed in types This strategy is implemented in the modules under Synthesizer.Inference.Monad.Signal We tried to work-around the restrictions using function based approach Since the parameters are functions sharing cannot take place There is no way to spread sample rate from one consumer to another one E.g If there is let and it is known that and maintain the sample rate and the sample rate of is known how to infer the sample rate of This approach was dropped quickly and exists for historical reasons in Synthesizer.Inference.Func.Signal There is very cool approach which implements the equation solver of the monadic approach by lazy evaluation and Peano numbers This poses no restriction on types and works for infinitely many equations as well The drawbacks are difficult application you cannot simply apply function to signal but you must compose functions in an arrow like way and slow solution of the equation system quadratic time although in principle only run-time around linear time is necessary it similar to topological sort However it as slow as the explicit solver using monads in Synthesizer.Inference.Monad.Signal This strategy is tested in the modules under Synthesizer.Inference.Fix",
        "hierarchy": "",
        "module": "",
        "name": "",
        "normalized": "",
        "package": "",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Interpolation-Class.html#t:MAC",
      "description": {
        "fct-module": "Synthesizer.Interpolation.Class",
        "fct-package": "synthesizer",
        "fct-signature": "newtype",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Interpolation-Class.html#MAC",
        "fct-type": "unknown",
        "title": "MAC"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Interpolation Class",
        "module": "Synthesizer.Interpolation.Class",
        "name": "MAC",
        "normalized": "",
        "package": "synthesizer",
        "partial": "MAC",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Interpolation-Class.html#v:+.*",
      "description": {
        "fct-descr": "Infix variant of \u003ctt\u003e\u003ca\u003escaleAccumulate\u003c/a\u003e\u003c/tt\u003e.\n",
        "fct-module": "Synthesizer.Interpolation.Class",
        "fct-package": "synthesizer",
        "fct-signature": "v -\u003e (a, v) -\u003e v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Interpolation-Class.html#%2B.%2A",
        "fct-type": "unknown",
        "title": "+.*"
      },
      "index": {
        "description": "Infix variant of scaleAccumulate",
        "hierarchy": "Synthesizer Interpolation Class",
        "module": "Synthesizer.Interpolation.Class",
        "name": "+.*",
        "normalized": "a-\u003e(b,a)-\u003ea",
        "package": "synthesizer",
        "partial": "",
        "signature": "v-\u003e(a,v)-\u003ev"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Interpolation-Class.html#v:C",
      "description": {
        "fct-module": "Synthesizer.Interpolation.Class",
        "fct-package": "synthesizer",
        "fct-signature": "class",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Interpolation-Class.html#C",
        "fct-type": "unknown",
        "title": "C"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Interpolation Class",
        "module": "Synthesizer.Interpolation.Class",
        "name": "C",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Interpolation-Class.html#v:combine2",
      "description": {
        "fct-module": "Synthesizer.Interpolation.Class",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e (v, v) -\u003e v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Interpolation-Class.html#combine2",
        "fct-type": "unknown",
        "title": "combine2"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Interpolation Class",
        "module": "Synthesizer.Interpolation.Class",
        "name": "combine2",
        "normalized": "a-\u003e(b,b)-\u003eb",
        "package": "synthesizer",
        "partial": "",
        "signature": "a-\u003e(v,v)-\u003ev"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Interpolation-Class.html#v:combineMany",
      "description": {
        "fct-module": "Synthesizer.Interpolation.Class",
        "fct-package": "synthesizer",
        "fct-signature": "(a, T a) -\u003e (v, T v) -\u003e v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Interpolation-Class.html#combineMany",
        "fct-type": "unknown",
        "title": "combineMany"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Interpolation Class",
        "module": "Synthesizer.Interpolation.Class",
        "name": "combineMany",
        "normalized": "(a,T a)-\u003e(b,T b)-\u003eb",
        "package": "synthesizer",
        "partial": "Many",
        "signature": "(a,T a)-\u003e(v,T v)-\u003ev"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Interpolation-Class.html#v:element",
      "description": {
        "fct-module": "Synthesizer.Interpolation.Class",
        "fct-package": "synthesizer",
        "fct-signature": "(v -\u003e x) -\u003e MAC a v x",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Interpolation-Class.html#element",
        "fct-type": "unknown",
        "title": "element"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Interpolation Class",
        "module": "Synthesizer.Interpolation.Class",
        "name": "element",
        "normalized": "(a-\u003eb)-\u003eMAC c a b",
        "package": "synthesizer",
        "partial": "",
        "signature": "(v-\u003ex)-\u003eMAC a v x"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Interpolation-Class.html#v:makeMac",
      "description": {
        "fct-module": "Synthesizer.Interpolation.Class",
        "fct-package": "synthesizer",
        "fct-signature": "(x -\u003e v) -\u003e (v -\u003e x) -\u003e (a, v) -\u003e (v, v -\u003e v)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Interpolation-Class.html#makeMac",
        "fct-type": "unknown",
        "title": "makeMac"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Interpolation Class",
        "module": "Synthesizer.Interpolation.Class",
        "name": "makeMac",
        "normalized": "(a-\u003eb)-\u003e(b-\u003ea)-\u003e(c,b)-\u003e(b,b-\u003eb)",
        "package": "synthesizer",
        "partial": "Mac",
        "signature": "(x-\u003ev)-\u003e(v-\u003ex)-\u003e(a,v)-\u003e(v,v-\u003ev)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Interpolation-Class.html#v:makeMac2",
      "description": {
        "fct-module": "Synthesizer.Interpolation.Class",
        "fct-package": "synthesizer",
        "fct-signature": "(x -\u003e y -\u003e v) -\u003e (v -\u003e x) -\u003e (v -\u003e y) -\u003e (a, v) -\u003e (v, v -\u003e v)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Interpolation-Class.html#makeMac2",
        "fct-type": "unknown",
        "title": "makeMac2"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Interpolation Class",
        "module": "Synthesizer.Interpolation.Class",
        "name": "makeMac2",
        "normalized": "(a-\u003eb-\u003ec)-\u003e(c-\u003ea)-\u003e(c-\u003eb)-\u003e(d,c)-\u003e(c,c-\u003ec)",
        "package": "synthesizer",
        "partial": "Mac",
        "signature": "(x-\u003ey-\u003ev)-\u003e(v-\u003ex)-\u003e(v-\u003ey)-\u003e(a,v)-\u003e(v,v-\u003ev)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Interpolation-Class.html#v:makeMac3",
      "description": {
        "fct-module": "Synthesizer.Interpolation.Class",
        "fct-package": "synthesizer",
        "fct-signature": "(x -\u003e y -\u003e z -\u003e v) -\u003e (v -\u003e x) -\u003e (v -\u003e y) -\u003e (v -\u003e z) -\u003e (a, v) -\u003e (v, v -\u003e v)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Interpolation-Class.html#makeMac3",
        "fct-type": "unknown",
        "title": "makeMac3"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Interpolation Class",
        "module": "Synthesizer.Interpolation.Class",
        "name": "makeMac3",
        "normalized": "(a-\u003eb-\u003ec-\u003ed)-\u003e(d-\u003ea)-\u003e(d-\u003eb)-\u003e(d-\u003ec)-\u003e(e,d)-\u003e(d,d-\u003ed)",
        "package": "synthesizer",
        "partial": "Mac",
        "signature": "(x-\u003ey-\u003ez-\u003ev)-\u003e(v-\u003ex)-\u003e(v-\u003ey)-\u003e(v-\u003ez)-\u003e(a,v)-\u003e(v,v-\u003ev)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Interpolation-Class.html#v:scale",
      "description": {
        "fct-module": "Synthesizer.Interpolation.Class",
        "fct-package": "synthesizer",
        "fct-signature": "(a, v) -\u003e v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Interpolation-Class.html#scale",
        "fct-type": "unknown",
        "title": "scale"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Interpolation Class",
        "module": "Synthesizer.Interpolation.Class",
        "name": "scale",
        "normalized": "(a,b)-\u003eb",
        "package": "synthesizer",
        "partial": "",
        "signature": "(a,v)-\u003ev"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Interpolation-Class.html#v:scaleAccumulate",
      "description": {
        "fct-module": "Synthesizer.Interpolation.Class",
        "fct-package": "synthesizer",
        "fct-signature": "(a, v) -\u003e v -\u003e v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Interpolation-Class.html#scaleAccumulate",
        "fct-type": "unknown",
        "title": "scaleAccumulate"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Interpolation Class",
        "module": "Synthesizer.Interpolation.Class",
        "name": "scaleAccumulate",
        "normalized": "(a,b)-\u003eb-\u003eb",
        "package": "synthesizer",
        "partial": "Accumulate",
        "signature": "(a,v)-\u003ev-\u003ev"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Interpolation-Class.html#v:scaleAndAccumulate",
      "description": {
        "fct-module": "Synthesizer.Interpolation.Class",
        "fct-package": "synthesizer",
        "fct-signature": "(a, v) -\u003e (v, v -\u003e v)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Interpolation-Class.html#scaleAndAccumulate",
        "fct-type": "unknown",
        "title": "scaleAndAccumulate"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Interpolation Class",
        "module": "Synthesizer.Interpolation.Class",
        "name": "scaleAndAccumulate",
        "normalized": "(a,b)-\u003e(b,b-\u003eb)",
        "package": "synthesizer",
        "partial": "And Accumulate",
        "signature": "(a,v)-\u003e(v,v-\u003ev)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Interpolation-Class.html#v:scaleAndAccumulateModule",
      "description": {
        "fct-module": "Synthesizer.Interpolation.Class",
        "fct-package": "synthesizer",
        "fct-signature": "(a, v) -\u003e (v, v -\u003e v)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Interpolation-Class.html#scaleAndAccumulateModule",
        "fct-type": "unknown",
        "title": "scaleAndAccumulateModule"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Interpolation Class",
        "module": "Synthesizer.Interpolation.Class",
        "name": "scaleAndAccumulateModule",
        "normalized": "(a,b)-\u003e(b,b-\u003eb)",
        "package": "synthesizer",
        "partial": "And Accumulate Module",
        "signature": "(a,v)-\u003e(v,v-\u003ev)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Interpolation-Class.html#v:scaleAndAccumulateRing",
      "description": {
        "fct-module": "Synthesizer.Interpolation.Class",
        "fct-package": "synthesizer",
        "fct-signature": "(a, a) -\u003e (a, a -\u003e a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Interpolation-Class.html#scaleAndAccumulateRing",
        "fct-type": "unknown",
        "title": "scaleAndAccumulateRing"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Interpolation Class",
        "module": "Synthesizer.Interpolation.Class",
        "name": "scaleAndAccumulateRing",
        "normalized": "(a,a)-\u003e(a,a-\u003ea)",
        "package": "synthesizer",
        "partial": "And Accumulate Ring",
        "signature": "(a,a)-\u003e(a,a-\u003ea)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Interpolation-Custom.html#t:T",
      "description": {
        "fct-module": "Synthesizer.Interpolation.Custom",
        "fct-package": "synthesizer",
        "fct-signature": "data",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Interpolation.html#T",
        "fct-type": "unknown",
        "title": "T"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Interpolation Custom",
        "module": "Synthesizer.Interpolation.Custom",
        "name": "T",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Interpolation-Custom.html#v:constant",
      "description": {
        "fct-descr": "Consider the signal to be piecewise constant. \n",
        "fct-module": "Synthesizer.Interpolation.Custom",
        "fct-package": "synthesizer",
        "fct-signature": "T t y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Interpolation.html#constant",
        "fct-type": "unknown",
        "title": "constant"
      },
      "index": {
        "description": "Consider the signal to be piecewise constant",
        "hierarchy": "Synthesizer Interpolation Custom",
        "module": "Synthesizer.Interpolation.Custom",
        "name": "constant",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Interpolation-Custom.html#v:cubic",
      "description": {
        "fct-descr": "Consider the signal to be piecewise cubic,\nwith smooth connections at the nodes.\nIt uses a cubic curve which has node values\nx0 at 0 and x1 at 1 and derivatives\n(x1-xm1)\u003cem\u003e2 and (x2-x0)\u003c/em\u003e2, respectively.\nYou can see how it works\nif you evaluate the expression for t=0 and t=1\nas well as the derivative at these points.\n",
        "fct-module": "Synthesizer.Interpolation.Custom",
        "fct-package": "synthesizer",
        "fct-signature": "T t y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Interpolation-Custom.html#cubic",
        "fct-type": "unknown",
        "title": "cubic"
      },
      "index": {
        "description": "Consider the signal to be piecewise cubic with smooth connections at the nodes It uses cubic curve which has node values x0 at and x1 at and derivatives x1-xm1 and x2-x0 respectively You can see how it works if you evaluate the expression for and as well as the derivative at these points",
        "hierarchy": "Synthesizer Interpolation Custom",
        "module": "Synthesizer.Interpolation.Custom",
        "name": "cubic",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Interpolation-Custom.html#v:function",
      "description": {
        "fct-descr": "\u003ctt\u003e(left extent, right extent)\u003c/tt\u003e, e.g. \u003ctt\u003e(1,1)\u003c/tt\u003e for linear hat \n",
        "fct-module": "Synthesizer.Interpolation.Custom",
        "fct-package": "synthesizer",
        "fct-signature": "(Int, Int)-\u003e t -\u003e t-\u003e T t y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Interpolation-Custom.html#function",
        "fct-type": "unknown",
        "title": "function"
      },
      "index": {
        "description": "left extent right extent e.g for linear hat",
        "hierarchy": "Synthesizer Interpolation Custom",
        "module": "Synthesizer.Interpolation.Custom",
        "name": "function",
        "normalized": "(Int,Int)-\u003ea-\u003ea-\u003eT a b",
        "package": "synthesizer",
        "partial": "",
        "signature": "(Int,Int)-\u003et-\u003et-\u003eT t y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Interpolation-Custom.html#v:linear",
      "description": {
        "fct-descr": "Consider the signal to be piecewise linear. \n",
        "fct-module": "Synthesizer.Interpolation.Custom",
        "fct-package": "synthesizer",
        "fct-signature": "T t y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Interpolation-Custom.html#linear",
        "fct-type": "unknown",
        "title": "linear"
      },
      "index": {
        "description": "Consider the signal to be piecewise linear",
        "hierarchy": "Synthesizer Interpolation Custom",
        "module": "Synthesizer.Interpolation.Custom",
        "name": "linear",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Interpolation-Custom.html#v:piecewise",
      "description": {
        "fct-descr": "List of functions must be non-empty.\n",
        "fct-module": "Synthesizer.Interpolation.Custom",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e [t -\u003e t] -\u003e T t y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Interpolation-Custom.html#piecewise",
        "fct-type": "unknown",
        "title": "piecewise"
      },
      "index": {
        "description": "List of functions must be non-empty",
        "hierarchy": "Synthesizer Interpolation Custom",
        "module": "Synthesizer.Interpolation.Custom",
        "name": "piecewise",
        "normalized": "Int-\u003e[a-\u003ea]-\u003eT a b",
        "package": "synthesizer",
        "partial": "",
        "signature": "Int-\u003e[t-\u003et]-\u003eT t y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Interpolation-Custom.html#v:piecewiseConstant",
      "description": {
        "fct-module": "Synthesizer.Interpolation.Custom",
        "fct-package": "synthesizer",
        "fct-signature": "T t y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Interpolation-Custom.html#piecewiseConstant",
        "fct-type": "unknown",
        "title": "piecewiseConstant"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Interpolation Custom",
        "module": "Synthesizer.Interpolation.Custom",
        "name": "piecewiseConstant",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Constant",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Interpolation-Custom.html#v:piecewiseCubic",
      "description": {
        "fct-module": "Synthesizer.Interpolation.Custom",
        "fct-package": "synthesizer",
        "fct-signature": "T t y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Interpolation-Custom.html#piecewiseCubic",
        "fct-type": "unknown",
        "title": "piecewiseCubic"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Interpolation Custom",
        "module": "Synthesizer.Interpolation.Custom",
        "name": "piecewiseCubic",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Cubic",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Interpolation-Custom.html#v:piecewiseLinear",
      "description": {
        "fct-module": "Synthesizer.Interpolation.Custom",
        "fct-package": "synthesizer",
        "fct-signature": "T t y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Interpolation-Custom.html#piecewiseLinear",
        "fct-type": "unknown",
        "title": "piecewiseLinear"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Interpolation Custom",
        "module": "Synthesizer.Interpolation.Custom",
        "name": "piecewiseLinear",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Linear",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Interpolation-Module.html#t:T",
      "description": {
        "fct-module": "Synthesizer.Interpolation.Module",
        "fct-package": "synthesizer",
        "fct-signature": "data",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Interpolation.html#T",
        "fct-type": "unknown",
        "title": "T"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Interpolation Module",
        "module": "Synthesizer.Interpolation.Module",
        "name": "T",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Interpolation-Module.html#v:constant",
      "description": {
        "fct-descr": "Consider the signal to be piecewise constant. \n",
        "fct-module": "Synthesizer.Interpolation.Module",
        "fct-package": "synthesizer",
        "fct-signature": "T t y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Interpolation.html#constant",
        "fct-type": "unknown",
        "title": "constant"
      },
      "index": {
        "description": "Consider the signal to be piecewise constant",
        "hierarchy": "Synthesizer Interpolation Module",
        "module": "Synthesizer.Interpolation.Module",
        "name": "constant",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Interpolation-Module.html#v:cubic",
      "description": {
        "fct-descr": "Consider the signal to be piecewise cubic,\nwith smooth connections at the nodes.\nIt uses a cubic curve which has node values\nx0 at 0 and x1 at 1 and derivatives\n(x1-xm1)\u003cem\u003e2 and (x2-x0)\u003c/em\u003e2, respectively.\nYou can see how it works\nif you evaluate the expression for t=0 and t=1\nas well as the derivative at these points.\n",
        "fct-module": "Synthesizer.Interpolation.Module",
        "fct-package": "synthesizer",
        "fct-signature": "T t y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Interpolation-Module.html#cubic",
        "fct-type": "unknown",
        "title": "cubic"
      },
      "index": {
        "description": "Consider the signal to be piecewise cubic with smooth connections at the nodes It uses cubic curve which has node values x0 at and x1 at and derivatives x1-xm1 and x2-x0 respectively You can see how it works if you evaluate the expression for and as well as the derivative at these points",
        "hierarchy": "Synthesizer Interpolation Module",
        "module": "Synthesizer.Interpolation.Module",
        "name": "cubic",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Interpolation-Module.html#v:cubicAlt",
      "description": {
        "fct-descr": "The interpolators for module operations\ndo not simply compute a straight linear combination of some vectors.\nInstead they add then scale, then add again, and so on.\nThis is efficient whenever scaling and addition is cheap.\nIn this case they might save multiplications.\nI can't say much about numeric cancellations, however.\n",
        "fct-module": "Synthesizer.Interpolation.Module",
        "fct-package": "synthesizer",
        "fct-signature": "T t y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Interpolation-Module.html#cubicAlt",
        "fct-type": "unknown",
        "title": "cubicAlt"
      },
      "index": {
        "description": "The interpolators for module operations do not simply compute straight linear combination of some vectors Instead they add then scale then add again and so on This is efficient whenever scaling and addition is cheap In this case they might save multiplications can say much about numeric cancellations however",
        "hierarchy": "Synthesizer Interpolation Module",
        "module": "Synthesizer.Interpolation.Module",
        "name": "cubicAlt",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Alt",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Interpolation-Module.html#v:function",
      "description": {
        "fct-descr": "\u003ctt\u003e(left extent, right extent)\u003c/tt\u003e, e.g. \u003ctt\u003e(1,1)\u003c/tt\u003e for linear hat \n",
        "fct-module": "Synthesizer.Interpolation.Module",
        "fct-package": "synthesizer",
        "fct-signature": "(Int, Int)-\u003e t -\u003e t-\u003e T t y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Interpolation-Module.html#function",
        "fct-type": "unknown",
        "title": "function"
      },
      "index": {
        "description": "left extent right extent e.g for linear hat",
        "hierarchy": "Synthesizer Interpolation Module",
        "module": "Synthesizer.Interpolation.Module",
        "name": "function",
        "normalized": "(Int,Int)-\u003ea-\u003ea-\u003eT a b",
        "package": "synthesizer",
        "partial": "",
        "signature": "(Int,Int)-\u003et-\u003et-\u003eT t y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Interpolation-Module.html#v:linear",
      "description": {
        "fct-descr": "Consider the signal to be piecewise linear. \n",
        "fct-module": "Synthesizer.Interpolation.Module",
        "fct-package": "synthesizer",
        "fct-signature": "T t y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Interpolation-Module.html#linear",
        "fct-type": "unknown",
        "title": "linear"
      },
      "index": {
        "description": "Consider the signal to be piecewise linear",
        "hierarchy": "Synthesizer Interpolation Module",
        "module": "Synthesizer.Interpolation.Module",
        "name": "linear",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Interpolation-Module.html#v:piecewise",
      "description": {
        "fct-module": "Synthesizer.Interpolation.Module",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e [t -\u003e t] -\u003e T t y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Interpolation-Module.html#piecewise",
        "fct-type": "unknown",
        "title": "piecewise"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Interpolation Module",
        "module": "Synthesizer.Interpolation.Module",
        "name": "piecewise",
        "normalized": "Int-\u003e[a-\u003ea]-\u003eT a b",
        "package": "synthesizer",
        "partial": "",
        "signature": "Int-\u003e[t-\u003et]-\u003eT t y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Interpolation-Module.html#v:piecewiseConstant",
      "description": {
        "fct-module": "Synthesizer.Interpolation.Module",
        "fct-package": "synthesizer",
        "fct-signature": "T t y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Interpolation-Module.html#piecewiseConstant",
        "fct-type": "unknown",
        "title": "piecewiseConstant"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Interpolation Module",
        "module": "Synthesizer.Interpolation.Module",
        "name": "piecewiseConstant",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Constant",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Interpolation-Module.html#v:piecewiseCubic",
      "description": {
        "fct-module": "Synthesizer.Interpolation.Module",
        "fct-package": "synthesizer",
        "fct-signature": "T t y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Interpolation-Module.html#piecewiseCubic",
        "fct-type": "unknown",
        "title": "piecewiseCubic"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Interpolation Module",
        "module": "Synthesizer.Interpolation.Module",
        "name": "piecewiseCubic",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Cubic",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Interpolation-Module.html#v:piecewiseLinear",
      "description": {
        "fct-module": "Synthesizer.Interpolation.Module",
        "fct-package": "synthesizer",
        "fct-signature": "T t y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Interpolation-Module.html#piecewiseLinear",
        "fct-type": "unknown",
        "title": "piecewiseLinear"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Interpolation Module",
        "module": "Synthesizer.Interpolation.Module",
        "name": "piecewiseLinear",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Linear",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Interpolation.html#t:Margin",
      "description": {
        "fct-module": "Synthesizer.Interpolation",
        "fct-package": "synthesizer",
        "fct-signature": "data",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Interpolation.html#Margin",
        "fct-type": "unknown",
        "title": "Margin"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Interpolation",
        "module": "Synthesizer.Interpolation",
        "name": "Margin",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Margin",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Interpolation.html#t:PrefixReader",
      "description": {
        "fct-module": "Synthesizer.Interpolation",
        "fct-package": "synthesizer",
        "fct-signature": "newtype",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Interpolation.html#PrefixReader",
        "fct-type": "unknown",
        "title": "PrefixReader"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Interpolation",
        "module": "Synthesizer.Interpolation",
        "name": "PrefixReader",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Prefix Reader",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Interpolation.html#t:T",
      "description": {
        "fct-module": "Synthesizer.Interpolation",
        "fct-package": "synthesizer",
        "fct-signature": "data",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Interpolation.html#T",
        "fct-type": "unknown",
        "title": "T"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Interpolation",
        "module": "Synthesizer.Interpolation",
        "name": "T",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Interpolation.html#v:cons",
      "description": {
        "fct-module": "Synthesizer.Interpolation",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e Int -\u003e (t -\u003e T y -\u003e y) -\u003e T t y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Interpolation.html#cons",
        "fct-type": "unknown",
        "title": "cons"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Interpolation",
        "module": "Synthesizer.Interpolation",
        "name": "cons",
        "normalized": "Int-\u003eInt-\u003e(a-\u003eT b-\u003eb)-\u003eT a b",
        "package": "synthesizer",
        "partial": "",
        "signature": "Int-\u003eInt-\u003e(t-\u003eT y-\u003ey)-\u003eT t y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Interpolation.html#v:constant",
      "description": {
        "fct-descr": "Consider the signal to be piecewise constant. \n",
        "fct-module": "Synthesizer.Interpolation",
        "fct-package": "synthesizer",
        "fct-signature": "T t y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Interpolation.html#constant",
        "fct-type": "unknown",
        "title": "constant"
      },
      "index": {
        "description": "Consider the signal to be piecewise constant",
        "hierarchy": "Synthesizer Interpolation",
        "module": "Synthesizer.Interpolation",
        "name": "constant",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Interpolation.html#v:fromPrefixReader",
      "description": {
        "fct-module": "Synthesizer.Interpolation",
        "fct-package": "synthesizer",
        "fct-signature": "String -\u003e Int -\u003e PrefixReader y (t -\u003e y) -\u003e T t y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Interpolation.html#fromPrefixReader",
        "fct-type": "unknown",
        "title": "fromPrefixReader"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Interpolation",
        "module": "Synthesizer.Interpolation",
        "name": "fromPrefixReader",
        "normalized": "String-\u003eInt-\u003ePrefixReader a(b-\u003ea)-\u003eT b a",
        "package": "synthesizer",
        "partial": "Prefix Reader",
        "signature": "String-\u003eInt-\u003ePrefixReader y(t-\u003ey)-\u003eT t y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Interpolation.html#v:getNode",
      "description": {
        "fct-module": "Synthesizer.Interpolation",
        "fct-package": "synthesizer",
        "fct-signature": "PrefixReader y y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Interpolation.html#getNode",
        "fct-type": "unknown",
        "title": "getNode"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Interpolation",
        "module": "Synthesizer.Interpolation",
        "name": "getNode",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Node",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Interpolation.html#v:number",
      "description": {
        "fct-module": "Synthesizer.Interpolation",
        "fct-package": "synthesizer",
        "fct-signature": "T t y -\u003e Int",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Interpolation.html#number",
        "fct-type": "unknown",
        "title": "number"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Interpolation",
        "module": "Synthesizer.Interpolation",
        "name": "number",
        "normalized": "T a b-\u003eInt",
        "package": "synthesizer",
        "partial": "",
        "signature": "T t y-\u003eInt"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Interpolation.html#v:offset",
      "description": {
        "fct-module": "Synthesizer.Interpolation",
        "fct-package": "synthesizer",
        "fct-signature": "T t y -\u003e Int",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Interpolation.html#offset",
        "fct-type": "unknown",
        "title": "offset"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Interpolation",
        "module": "Synthesizer.Interpolation",
        "name": "offset",
        "normalized": "T a b-\u003eInt",
        "package": "synthesizer",
        "partial": "",
        "signature": "T t y-\u003eInt"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Overview.html",
      "description": {
        "fct-descr": "\u003cp\u003eThis module gives an overview of the library.\n\u003c/p\u003e\u003cp\u003eThe library is a collection of modules for synthesizing and processing audio signals.\nIt allows generation of effects, instruments and\neven music using the Haskore package.\nIt can write raw audio data to files,\nconvert them to common audio formats or\nplay them using external commands from the Sox package.\nIf used properly, it can run in real-time.\n\u003c/p\u003e\u003cp\u003eA signal is modeled by a sequence of sample values.\nE.g. \u003ctt\u003e[Double]\u003c/tt\u003e represents a mono signal,\n\u003ctt\u003e[(Double, Double)]\u003c/tt\u003e stores a stereo signal.\nSince a list is lazy, it can be infinitely long,\nand it also supports feedback.\n(The drawback is, that its implementation is very slow.\nYou have to use other signal presentations of this library for real-time processing.)\nWe are using the NumericPrelude type class hierarchy\nwhich is cleaner than the one of Haskell 98\nand provides us with a type class for vector spaces and other structures.\nThis allows us to formulate many algorithms for mono, stereo and multi-channel signals at once.\nThe drawback is that the vector space type class has multiple type parameters.\nThis type extension is available in GHC and Hugs and maybe other compilers.\nIt may hurt you, because type inference fails sometimes,\nresulting in strange type errors.\n(To be precise: GHC suggests type constraints intended for fixing the problem,\nbut if you copy them to your program, they won't fix the problem,\nbecause the constraint refers to local variables\nthat you have no access to at the signature.\nIn this case you have to use \u003ctt\u003e\u003ca\u003easTypeOf\u003c/a\u003e\u003c/tt\u003e or similar self-written helpers.)\n\u003c/p\u003e\u003cp\u003eThere must also be information about how fast sample values are emitted.\nThis is specified by the sample rate.\n44100 Hz means that 44100 sample values are emitted per second.\nThis information must be stored along with the sample values.\nThis is where things become complicated.\n\u003c/p\u003e\u003cp\u003eIn the very basic modules in the \u003ca\u003eSynthesizer.Plain.Signal\u003c/a\u003e directory,\nthere is no notion of sample rate.\nYou have to base all computations on the number of samples.\nThis is unintuitive and disallows easy adaption to different audio devices\n(CD, DAT, ...).\nBut it is very simple and can be re-used in the higher level modules.\n\u003c/p\u003e\u003cp\u003eLet's continue with the sample rate issue.\nSounds of different sources may differ in their sampling rate\n(and also with respect to its amplitude and the unit of the values).\nSampled sounds have 44100 Hz on a compact disk,\n48000 Hz or 32000 Hz on DAT recorders.\nWe want to respect different sampling rates and volumes,\nwe want to let signals in different formats coexist nicely,\nand we want to let the user choose when to do which conversion\n(called \u003cem\u003eresampling\u003c/em\u003e)\nin order to bring them together.\n\u003c/p\u003e\u003cp\u003eIn fact this view generalizes the concept of note, control, and audio rates,\nwhich is found in some software synthesizers,\nlike CSound and SuperCollider.\nIf signals of different rate are fed to a signal processor\nin such a software synthesizer,\nall signals are converted to the highest rate among the inputs.\nThen the processor runs at this rate.\nThe conversion is usually done by \"constant\" interpolation,\nin order to minimize recomputation of internal parameters.\nHowever the handling of different signal rates must be built into every processor,\nand may even reduce the computation speed.\nConsider an exponential envelope which is computed at control rate\nand an amplifier which applies this envelope to an audio signal.\nThe amplifier has to upsample the exponential envelope before applying it to the signal.\nBut the generation of the exponential is very simple,\none multiplication per sample,\nand the amplifier is very simple, too,\nagain only one multiplication per sample.\nSo, is there a need for trouble of the resampling?\nDoes it really accelerates computation?\nMany other envelope generators like straight lines, sines, oscillators,\nare comparably simple.\nHowever there are some processors like filters,\nwhich need some recomputation when a control parameter changes.\n\u003c/p\u003e\u003cp\u003eOur approach is this one:\nWe try to avoid resampling and compute all signals at the same rate,\nif no speed loss must be expected.\nIf a speed loss is to be expected,\nwe can interpolate the internal parameters of the processor explicitly.\nThis way we can also specify an interpolation method.\nAlternatively we can move the interpolation into the processor\nbut let the user specify an interpolation method.\n(Currently it can be used only manually for the low-level routines in \u003ca\u003eSynthesizer.Plain.Signal\u003c/a\u003e\nand for the high level modules there is \u003ca\u003eSynthesizer.Dimensional.ControlledProcess\u003c/a\u003e.)\n\u003c/p\u003e\u003cp\u003eAdditional to the treatment of sampling rates,\nwe also want to separate amplitude information from the signal.\nThe separated amplitude serves two purposes:\n\u003c/p\u003e\u003col\u003e\u003cli\u003e The amplitude can be equipped with a physical unit,\n    whereas this information is omitted for the samples.\n    Since I can hardly imagine that it is sensible to mix samples\n    with different physical units,\n    it would be only wasted time to always check\n    if all physical values of a sequence have the same unit.\n\u003c/li\u003e\u003cli\u003e The amplitude can be a floating point number,\n    but the samples can be fixed point numbers.\n    This is interesting for hardware digital signal processors\n    or other low-level applications.\n    With this method we can separate the overall dynamics from the samples.\n\u003c/li\u003e\u003c/ol\u003e\u003cp\u003eLet's elaborate on the physical units now.\nWith them we can work with values from the real world immediately\nand we have additional safety by unit checks.\nI have not fixed the physical dimensions for the signal processors,\ne.g. an oscillator can well generate a signal\nover the length dimension mapping to forces.\nThis is useful for interim results in physically motivated signal generation\nbut it can be useful on its own for non-audio signal processing.\nThe processors only check whether the dimensions match,\ne.g. an oscillator generating a time-to-voltage signal\nmust have a frequency in Hertz\nand a length-to-force oscillator must have \u003ctt\u003e1/meter\u003c/tt\u003e as frequency.\n\u003c/p\u003e\u003cp\u003eOf course I prefer static safety.\nE.g. I want to avoid\nto accidentally call a function with conflicting parameters.\nHowever, I see no way for both applying the unit checks statically\nand let check physical quantities that are provided by an application user via I/O.\nSince there seems to be no one solution for all problems,\nwe have two distinct ones:\n\u003c/p\u003e\u003col\u003e\u003cli\u003e Store units in a data structure and check them dynamically.\n    This is imported from NumericPrelude's \u003ca\u003eNumber.Physical\u003c/a\u003e.\n    Units can be fetched from the user.\n    The API of signal processing functions is generic enough\n    to cover both values without units and values with units.\n    Debugging of unit errors is cumbersome.\n\u003c/li\u003e\u003cli\u003e Store physical dimensions in types\n    either using Buckwalter's dimensional package\n    or using NumericPrelude's \u003ca\u003eNumber.DimensionTerm\u003c/a\u003e.\n    Here we use the latter one.\n    This is the most useful if user interaction is not needed.\n    If data is fetched from an audio file\n    the dimensions are statically fixed.\n\u003c/li\u003e\u003c/ol\u003e\u003cul\u003e\u003cli\u003e The various signal storage types are described in \u003ca\u003eSynthesizer.Storage\u003c/a\u003e.\n\u003c/li\u003e\u003cli\u003e The various attributes, that can be attached to plain signal storages\n  are described in \u003ca\u003eSynthesizer.Dimensional.Overview\u003c/a\u003e.\n\u003c/li\u003e\u003cli\u003e Various abstractions are described in \u003ca\u003eSynthesizer.Dimensional.Abstraction.Overview\u003c/a\u003e.\n\u003c/li\u003e\u003cli\u003e For historical reasons there is a survey on various approaches\n  of sample rate abstraction in \u003ca\u003eSynthesizer.Inference.Overview\u003c/a\u003e.\n\u003c/li\u003e\u003cli\u003e Some introductory examples are described\n  in \u003ca\u003eSynthesizer.Tutorial\u003c/a\u003e.\n\u003c/li\u003e\u003c/ul\u003e\u003cp\u003ePackages based on this one:\n\u003c/p\u003e\u003cul\u003e\u003cli\u003e \u003ctt\u003edafx\u003c/tt\u003e package:\n  The module \u003ca\u003ePresentation\u003c/a\u003e contains functions\n  for demonstrating synthesizer functions in GHCi\n  and \u003ca\u003eDAFx\u003c/a\u003e contains some examples based on them.\n  Just hit \u003ctt\u003emake dafx\u003c/tt\u003e in a shell in order to compile the modules\n  and enter the interactive GHC with all modules loaded.\n\u003c/li\u003e\u003cli\u003e An interface to the music composition library Haskore\n  together with various examples\n  can be found in the \u003ctt\u003ehaskore-synthesizer\u003c/tt\u003e package.\n\u003c/li\u003e\u003cli\u003e \u003ctt\u003esynthesizer-alsa\u003c/tt\u003e allows to receive MIDI events via ALSA\n  and convert them to control signals.\n  This way you can do interactive signal processing via MIDI input devices.\n\u003c/li\u003e\u003c/ul\u003e",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Overview.html",
        "fct-type": "unknown",
        "title": ""
      },
      "index": {
        "description": "This module gives an overview of the library The library is collection of modules for synthesizing and processing audio signals It allows generation of effects instruments and even music using the Haskore package It can write raw audio data to files convert them to common audio formats or play them using external commands from the Sox package If used properly it can run in real-time signal is modeled by sequence of sample values E.g Double represents mono signal Double Double stores stereo signal Since list is lazy it can be infinitely long and it also supports feedback The drawback is that its implementation is very slow You have to use other signal presentations of this library for real-time processing We are using the NumericPrelude type class hierarchy which is cleaner than the one of Haskell and provides us with type class for vector spaces and other structures This allows us to formulate many algorithms for mono stereo and multi-channel signals at once The drawback is that the vector space type class has multiple type parameters This type extension is available in GHC and Hugs and maybe other compilers It may hurt you because type inference fails sometimes resulting in strange type errors To be precise GHC suggests type constraints intended for fixing the problem but if you copy them to your program they won fix the problem because the constraint refers to local variables that you have no access to at the signature In this case you have to use asTypeOf or similar self-written helpers There must also be information about how fast sample values are emitted This is specified by the sample rate Hz means that sample values are emitted per second This information must be stored along with the sample values This is where things become complicated In the very basic modules in the Synthesizer.Plain.Signal directory there is no notion of sample rate You have to base all computations on the number of samples This is unintuitive and disallows easy adaption to different audio devices CD DAT But it is very simple and can be re-used in the higher level modules Let continue with the sample rate issue Sounds of different sources may differ in their sampling rate and also with respect to its amplitude and the unit of the values Sampled sounds have Hz on compact disk Hz or Hz on DAT recorders We want to respect different sampling rates and volumes we want to let signals in different formats coexist nicely and we want to let the user choose when to do which conversion called resampling in order to bring them together In fact this view generalizes the concept of note control and audio rates which is found in some software synthesizers like CSound and SuperCollider If signals of different rate are fed to signal processor in such software synthesizer all signals are converted to the highest rate among the inputs Then the processor runs at this rate The conversion is usually done by constant interpolation in order to minimize recomputation of internal parameters However the handling of different signal rates must be built into every processor and may even reduce the computation speed Consider an exponential envelope which is computed at control rate and an amplifier which applies this envelope to an audio signal The amplifier has to upsample the exponential envelope before applying it to the signal But the generation of the exponential is very simple one multiplication per sample and the amplifier is very simple too again only one multiplication per sample So is there need for trouble of the resampling Does it really accelerates computation Many other envelope generators like straight lines sines oscillators are comparably simple However there are some processors like filters which need some recomputation when control parameter changes Our approach is this one We try to avoid resampling and compute all signals at the same rate if no speed loss must be expected If speed loss is to be expected we can interpolate the internal parameters of the processor explicitly This way we can also specify an interpolation method Alternatively we can move the interpolation into the processor but let the user specify an interpolation method Currently it can be used only manually for the low-level routines in Synthesizer.Plain.Signal and for the high level modules there is Synthesizer.Dimensional.ControlledProcess Additional to the treatment of sampling rates we also want to separate amplitude information from the signal The separated amplitude serves two purposes The amplitude can be equipped with physical unit whereas this information is omitted for the samples Since can hardly imagine that it is sensible to mix samples with different physical units it would be only wasted time to always check if all physical values of sequence have the same unit The amplitude can be floating point number but the samples can be fixed point numbers This is interesting for hardware digital signal processors or other low-level applications With this method we can separate the overall dynamics from the samples Let elaborate on the physical units now With them we can work with values from the real world immediately and we have additional safety by unit checks have not fixed the physical dimensions for the signal processors e.g an oscillator can well generate signal over the length dimension mapping to forces This is useful for interim results in physically motivated signal generation but it can be useful on its own for non-audio signal processing The processors only check whether the dimensions match e.g an oscillator generating time-to-voltage signal must have frequency in Hertz and length-to-force oscillator must have meter as frequency Of course prefer static safety E.g want to avoid to accidentally call function with conflicting parameters However see no way for both applying the unit checks statically and let check physical quantities that are provided by an application user via Since there seems to be no one solution for all problems we have two distinct ones Store units in data structure and check them dynamically This is imported from NumericPrelude Number.Physical Units can be fetched from the user The API of signal processing functions is generic enough to cover both values without units and values with units Debugging of unit errors is cumbersome Store physical dimensions in types either using Buckwalter dimensional package or using NumericPrelude Number.DimensionTerm Here we use the latter one This is the most useful if user interaction is not needed If data is fetched from an audio file the dimensions are statically fixed The various signal storage types are described in Synthesizer.Storage The various attributes that can be attached to plain signal storages are described in Synthesizer.Dimensional.Overview Various abstractions are described in Synthesizer.Dimensional.Abstraction.Overview For historical reasons there is survey on various approaches of sample rate abstraction in Synthesizer.Inference.Overview Some introductory examples are described in Synthesizer.Tutorial Packages based on this one dafx package The module Presentation contains functions for demonstrating synthesizer functions in GHCi and DAFx contains some examples based on them Just hit make dafx in shell in order to compile the modules and enter the interactive GHC with all modules loaded An interface to the music composition library Haskore together with various examples can be found in the haskore-synthesizer package synthesizer-alsa allows to receive MIDI events via ALSA and convert them to control signals This way you can do interactive signal processing via MIDI input devices",
        "hierarchy": "",
        "module": "",
        "name": "",
        "normalized": "",
        "package": "",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical-Control.html#v:exponential",
      "description": {
        "fct-descr": "sample rate \ntime where the function reaches 1/e of the initial value \ninitial value \nexponential decay \n",
        "fct-module": "Synthesizer.Physical.Control",
        "fct-package": "synthesizer",
        "fct-signature": "a'-\u003e a'-\u003e a'-\u003e T a a' a a' a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Physical-Control.html#exponential",
        "fct-type": "unknown",
        "title": "exponential"
      },
      "index": {
        "description": "sample rate time where the function reaches of the initial value initial value exponential decay",
        "hierarchy": "Synthesizer Physical Control",
        "module": "Synthesizer.Physical.Control",
        "name": "exponential",
        "normalized": "a-\u003ea-\u003ea-\u003eT b a b a b",
        "package": "synthesizer",
        "partial": "",
        "signature": "a'-\u003ea'-\u003ea'-\u003eT a a' a a' a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical-Control.html#v:exponential2",
      "description": {
        "fct-descr": "sample rate \nhalf life \ninitial value \nexponential decay \n",
        "fct-module": "Synthesizer.Physical.Control",
        "fct-package": "synthesizer",
        "fct-signature": "a'-\u003e a'-\u003e a'-\u003e T a a' a a' a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Physical-Control.html#exponential2",
        "fct-type": "unknown",
        "title": "exponential2"
      },
      "index": {
        "description": "sample rate half life initial value exponential decay",
        "hierarchy": "Synthesizer Physical Control",
        "module": "Synthesizer.Physical.Control",
        "name": "exponential2",
        "normalized": "a-\u003ea-\u003ea-\u003eT b a b a b",
        "package": "synthesizer",
        "partial": "",
        "signature": "a'-\u003ea'-\u003ea'-\u003eT a a' a a' a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical-Control.html#v:vectorExponential",
      "description": {
        "fct-descr": "sample rate \ntime where the function reaches 1/e of the initial value \namplitude unit \ninitial value \nexponential decay \n",
        "fct-module": "Synthesizer.Physical.Control",
        "fct-package": "synthesizer",
        "fct-signature": "t'-\u003e t'-\u003e y'-\u003e yv-\u003e T t t' y y' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Physical-Control.html#vectorExponential",
        "fct-type": "unknown",
        "title": "vectorExponential"
      },
      "index": {
        "description": "sample rate time where the function reaches of the initial value amplitude unit initial value exponential decay",
        "hierarchy": "Synthesizer Physical Control",
        "module": "Synthesizer.Physical.Control",
        "name": "vectorExponential",
        "normalized": "a-\u003ea-\u003eb-\u003ec-\u003eT d a e b c",
        "package": "synthesizer",
        "partial": "Exponential",
        "signature": "t'-\u003et'-\u003ey'-\u003eyv-\u003eT t t' y y' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical-Control.html#v:vectorExponential2",
      "description": {
        "fct-descr": "sample rate \nhalf life \namplitude unit \ninitial value \nexponential decay \n",
        "fct-module": "Synthesizer.Physical.Control",
        "fct-package": "synthesizer",
        "fct-signature": "t'-\u003e t'-\u003e y'-\u003e yv-\u003e T t t' y y' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Physical-Control.html#vectorExponential2",
        "fct-type": "unknown",
        "title": "vectorExponential2"
      },
      "index": {
        "description": "sample rate half life amplitude unit initial value exponential decay",
        "hierarchy": "Synthesizer Physical Control",
        "module": "Synthesizer.Physical.Control",
        "name": "vectorExponential2",
        "normalized": "a-\u003ea-\u003eb-\u003ec-\u003eT d a e b c",
        "package": "synthesizer",
        "partial": "Exponential",
        "signature": "t'-\u003et'-\u003ey'-\u003eyv-\u003eT t t' y y' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical-Cut.html#v:append",
      "description": {
        "fct-module": "Synthesizer.Physical.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "T t t' y y' yv -\u003e T t t' y y' yv -\u003e T t t' y y' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Physical-Cut.html#append",
        "fct-type": "unknown",
        "title": "append"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Physical Cut",
        "module": "Synthesizer.Physical.Cut",
        "name": "append",
        "normalized": "T a b c d e-\u003eT a b c d e-\u003eT a b c d e",
        "package": "synthesizer",
        "partial": "",
        "signature": "T t t' y y' yv-\u003eT t t' y y' yv-\u003eT t t' y y' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical-Cut.html#v:arrange",
      "description": {
        "fct-descr": "Unit of the time values in the time ordered list. \nA list of pairs: (relative start time, signal part),\n              The start time is relative\n              to the start time of the previous event. \nThe mixed signal. \n",
        "fct-module": "Synthesizer.Physical.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "t'-\u003e T t (T t t' y y' yv)-\u003e T t t' y y' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Physical-Cut.html#arrange",
        "fct-type": "unknown",
        "title": "arrange"
      },
      "index": {
        "description": "Unit of the time values in the time ordered list list of pairs relative start time signal part The start time is relative to the start time of the previous event The mixed signal",
        "hierarchy": "Synthesizer Physical Cut",
        "module": "Synthesizer.Physical.Cut",
        "name": "arrange",
        "normalized": "a-\u003eT b(T b a c d e)-\u003eT b a c d e",
        "package": "synthesizer",
        "partial": "",
        "signature": "t'-\u003eT t(T t t' y y' yv)-\u003eT t t' y y' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical-Cut.html#v:arrangeVolume",
      "description": {
        "fct-descr": "Amplitude of output. \nUnit of the time values in the time ordered list. \nA list of pairs: (relative start time, signal part),\n              The start time is relative\n              to the start time of the previous event. \nThe mixed signal. \n",
        "fct-module": "Synthesizer.Physical.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "y'-\u003e t'-\u003e T t (T t t' y y' yv)-\u003e T t t' y y' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Physical-Cut.html#arrangeVolume",
        "fct-type": "unknown",
        "title": "arrangeVolume"
      },
      "index": {
        "description": "Amplitude of output Unit of the time values in the time ordered list list of pairs relative start time signal part The start time is relative to the start time of the previous event The mixed signal",
        "hierarchy": "Synthesizer Physical Cut",
        "module": "Synthesizer.Physical.Cut",
        "name": "arrangeVolume",
        "normalized": "a-\u003eb-\u003eT c(T c b d a e)-\u003eT c b d a e",
        "package": "synthesizer",
        "partial": "Volume",
        "signature": "y'-\u003et'-\u003eT t(T t t' y y' yv)-\u003eT t t' y y' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical-Cut.html#v:concat",
      "description": {
        "fct-descr": "Similar to \u003ctt\u003efoldr1 append\u003c/tt\u003e but more efficient and accurate,\n  because it reduces the number of amplifications.\n  Does not work for infinite lists,\n  because in this case a maximum amplitude cannot be computed.\n",
        "fct-module": "Synthesizer.Physical.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "[T t t' y y' yv] -\u003e T t t' y y' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Physical-Cut.html#concat",
        "fct-type": "unknown",
        "title": "concat"
      },
      "index": {
        "description": "Similar to foldr1 append but more efficient and accurate because it reduces the number of amplifications Does not work for infinite lists because in this case maximum amplitude cannot be computed",
        "hierarchy": "Synthesizer Physical Cut",
        "module": "Synthesizer.Physical.Cut",
        "name": "concat",
        "normalized": "[T a b c d e]-\u003eT a b c d e",
        "package": "synthesizer",
        "partial": "",
        "signature": "[T t t' y y' yv]-\u003eT t t' y y' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical-Cut.html#v:concatVolume",
      "description": {
        "fct-descr": "Like \u003ctt\u003e\u003ca\u003econcat\u003c/a\u003e\u003c/tt\u003e, but you have to specify the amplitude of the resulting signal.\n  This way we can process infinite lists, too.\n  The list must contain at least one element for getting a sample rate.\n",
        "fct-module": "Synthesizer.Physical.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "y' -\u003e [T t t' y y' yv] -\u003e T t t' y y' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Physical-Cut.html#concatVolume",
        "fct-type": "unknown",
        "title": "concatVolume"
      },
      "index": {
        "description": "Like concat but you have to specify the amplitude of the resulting signal This way we can process infinite lists too The list must contain at least one element for getting sample rate",
        "hierarchy": "Synthesizer Physical Cut",
        "module": "Synthesizer.Physical.Cut",
        "name": "concatVolume",
        "normalized": "a-\u003e[T b c d a e]-\u003eT b c d a e",
        "package": "synthesizer",
        "partial": "Volume",
        "signature": "y'-\u003e[T t t' y y' yv]-\u003eT t t' y y' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical-Cut.html#v:drop",
      "description": {
        "fct-module": "Synthesizer.Physical.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "t' -\u003e T t t' y y' yv -\u003e T t t' y y' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Physical-Cut.html#drop",
        "fct-type": "unknown",
        "title": "drop"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Physical Cut",
        "module": "Synthesizer.Physical.Cut",
        "name": "drop",
        "normalized": "a-\u003eT b a c d e-\u003eT b a c d e",
        "package": "synthesizer",
        "partial": "",
        "signature": "t'-\u003eT t t' y y' yv-\u003eT t t' y y' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical-Cut.html#v:propAppendSplit",
      "description": {
        "fct-module": "Synthesizer.Physical.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "t' -\u003e T t t' y y' yv -\u003e Bool",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Physical-Cut.html#propAppendSplit",
        "fct-type": "unknown",
        "title": "propAppendSplit"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Physical Cut",
        "module": "Synthesizer.Physical.Cut",
        "name": "propAppendSplit",
        "normalized": "a-\u003eT b a c d e-\u003eBool",
        "package": "synthesizer",
        "partial": "Append Split",
        "signature": "t'-\u003eT t t' y y' yv-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical-Cut.html#v:propConcatAppend",
      "description": {
        "fct-module": "Synthesizer.Physical.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "T t t' y y' yv -\u003e T t t' y y' yv -\u003e Bool",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Physical-Cut.html#propConcatAppend",
        "fct-type": "unknown",
        "title": "propConcatAppend"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Physical Cut",
        "module": "Synthesizer.Physical.Cut",
        "name": "propConcatAppend",
        "normalized": "T a b c d e-\u003eT a b c d e-\u003eBool",
        "package": "synthesizer",
        "partial": "Concat Append",
        "signature": "T t t' y y' yv-\u003eT t t' y y' yv-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical-Cut.html#v:propSplit",
      "description": {
        "fct-module": "Synthesizer.Physical.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "t' -\u003e T t t' y y' yv -\u003e Bool",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Physical-Cut.html#propSplit",
        "fct-type": "unknown",
        "title": "propSplit"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Physical Cut",
        "module": "Synthesizer.Physical.Cut",
        "name": "propSplit",
        "normalized": "a-\u003eT b a c d e-\u003eBool",
        "package": "synthesizer",
        "partial": "Split",
        "signature": "t'-\u003eT t t' y y' yv-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical-Cut.html#v:propZip",
      "description": {
        "fct-module": "Synthesizer.Physical.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "T t t' y y' (yv0, yv1) -\u003e Bool",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Physical-Cut.html#propZip",
        "fct-type": "unknown",
        "title": "propZip"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Physical Cut",
        "module": "Synthesizer.Physical.Cut",
        "name": "propZip",
        "normalized": "T a b c d(e,e)-\u003eBool",
        "package": "synthesizer",
        "partial": "Zip",
        "signature": "T t t' y y'(yv,yv)-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical-Cut.html#v:propZip3",
      "description": {
        "fct-module": "Synthesizer.Physical.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "T t t' y y' (yv0, yv1, yv2) -\u003e Bool",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Physical-Cut.html#propZip3",
        "fct-type": "unknown",
        "title": "propZip3"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Physical Cut",
        "module": "Synthesizer.Physical.Cut",
        "name": "propZip3",
        "normalized": "T a b c d(e,e,e)-\u003eBool",
        "package": "synthesizer",
        "partial": "Zip",
        "signature": "T t t' y y'(yv,yv,yv)-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical-Cut.html#v:splitAt",
      "description": {
        "fct-module": "Synthesizer.Physical.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "t' -\u003e T t t' y y' yv -\u003e (T t t' y y' yv, T t t' y y' yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Physical-Cut.html#splitAt",
        "fct-type": "unknown",
        "title": "splitAt"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Physical Cut",
        "module": "Synthesizer.Physical.Cut",
        "name": "splitAt",
        "normalized": "a-\u003eT b a c d e-\u003e(T b a c d e,T b a c d e)",
        "package": "synthesizer",
        "partial": "At",
        "signature": "t'-\u003eT t t' y y' yv-\u003e(T t t' y y' yv,T t t' y y' yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical-Cut.html#v:splitSampleRateEventList",
      "description": {
        "fct-module": "Synthesizer.Physical.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "T time (T t t' y y' yv) -\u003e (T t t', T time (T y y' yv))",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Physical-Cut.html#splitSampleRateEventList",
        "fct-type": "unknown",
        "title": "splitSampleRateEventList"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Physical Cut",
        "module": "Synthesizer.Physical.Cut",
        "name": "splitSampleRateEventList",
        "normalized": "T a(T b c d e f)-\u003e(T b c,T a(T d e f))",
        "package": "synthesizer",
        "partial": "Sample Rate Event List",
        "signature": "T time(T t t' y y' yv)-\u003e(T t t',T time(T y y' yv))"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical-Cut.html#v:take",
      "description": {
        "fct-module": "Synthesizer.Physical.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "t' -\u003e T t t' y y' yv -\u003e T t t' y y' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Physical-Cut.html#take",
        "fct-type": "unknown",
        "title": "take"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Physical Cut",
        "module": "Synthesizer.Physical.Cut",
        "name": "take",
        "normalized": "a-\u003eT b a c d e-\u003eT b a c d e",
        "package": "synthesizer",
        "partial": "",
        "signature": "t'-\u003eT t t' y y' yv-\u003eT t t' y y' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical-Cut.html#v:takeUntilPause",
      "description": {
        "fct-module": "Synthesizer.Physical.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "y' -\u003e t' -\u003e T t t' y y' yv -\u003e T t t' y y' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Physical-Cut.html#takeUntilPause",
        "fct-type": "unknown",
        "title": "takeUntilPause"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Physical Cut",
        "module": "Synthesizer.Physical.Cut",
        "name": "takeUntilPause",
        "normalized": "a-\u003eb-\u003eT c b d a e-\u003eT c b d a e",
        "package": "synthesizer",
        "partial": "Until Pause",
        "signature": "y'-\u003et'-\u003eT t t' y y' yv-\u003eT t t' y y' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical-Cut.html#v:unzip",
      "description": {
        "fct-module": "Synthesizer.Physical.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "T t t' y y' (yv0, yv1) -\u003e (T t t' y y' yv0, T t t' y y' yv1)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Physical-Cut.html#unzip",
        "fct-type": "unknown",
        "title": "unzip"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Physical Cut",
        "module": "Synthesizer.Physical.Cut",
        "name": "unzip",
        "normalized": "T a b c d(e,e)-\u003e(T a b c d e,T a b c d e)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T t t' y y'(yv,yv)-\u003e(T t t' y y' yv,T t t' y y' yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical-Cut.html#v:unzip3",
      "description": {
        "fct-module": "Synthesizer.Physical.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "T t t' y y' (yv0, yv1, yv2) -\u003e (T t t' y y' yv0, T t t' y y' yv1, T t t' y y' yv2)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Physical-Cut.html#unzip3",
        "fct-type": "unknown",
        "title": "unzip3"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Physical Cut",
        "module": "Synthesizer.Physical.Cut",
        "name": "unzip3",
        "normalized": "T a b c d(e,e,e)-\u003e(T a b c d e,T a b c d e,T a b c d e)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T t t' y y'(yv,yv,yv)-\u003e(T t t' y y' yv,T t t' y y' yv,T t t' y y' yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical-Cut.html#v:zip",
      "description": {
        "fct-module": "Synthesizer.Physical.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "T t t' y y' yv0 -\u003e T t t' y y' yv1 -\u003e T t t' y y' (yv0, yv1)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Physical-Cut.html#zip",
        "fct-type": "unknown",
        "title": "zip"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Physical Cut",
        "module": "Synthesizer.Physical.Cut",
        "name": "zip",
        "normalized": "T a b c d e-\u003eT a b c d e-\u003eT a b c d(e,e)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T t t' y y' yv-\u003eT t t' y y' yv-\u003eT t t' y y'(yv,yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical-Cut.html#v:zip3",
      "description": {
        "fct-module": "Synthesizer.Physical.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "T t t' y y' yv0 -\u003e T t t' y y' yv1 -\u003e T t t' y y' yv2 -\u003e T t t' y y' (yv0, yv1, yv2)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Physical-Cut.html#zip3",
        "fct-type": "unknown",
        "title": "zip3"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Physical Cut",
        "module": "Synthesizer.Physical.Cut",
        "name": "zip3",
        "normalized": "T a b c d e-\u003eT a b c d e-\u003eT a b c d e-\u003eT a b c d(e,e,e)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T t t' y y' yv-\u003eT t t' y y' yv-\u003eT t t' y y' yv-\u003eT t t' y y'(yv,yv,yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical-Displacement.html#v:mix",
      "description": {
        "fct-descr": "Mix two signals.\n    In opposition to \u003ctt\u003e\u003ca\u003ezipWith\u003c/a\u003e\u003c/tt\u003e the result has the length of the longer signal. \n",
        "fct-module": "Synthesizer.Physical.Displacement",
        "fct-package": "synthesizer",
        "fct-signature": "T t t' y y' yv -\u003e T t t' y y' yv -\u003e T t t' y y' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Physical-Displacement.html#mix",
        "fct-type": "unknown",
        "title": "mix"
      },
      "index": {
        "description": "Mix two signals In opposition to zipWith the result has the length of the longer signal",
        "hierarchy": "Synthesizer Physical Displacement",
        "module": "Synthesizer.Physical.Displacement",
        "name": "mix",
        "normalized": "T a b c d e-\u003eT a b c d e-\u003eT a b c d e",
        "package": "synthesizer",
        "partial": "",
        "signature": "T t t' y y' yv-\u003eT t t' y y' yv-\u003eT t t' y y' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical-Displacement.html#v:mixMulti",
      "description": {
        "fct-descr": "Mix one or more signals. \n",
        "fct-module": "Synthesizer.Physical.Displacement",
        "fct-package": "synthesizer",
        "fct-signature": "[T t t' y y' yv] -\u003e T t t' y y' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Physical-Displacement.html#mixMulti",
        "fct-type": "unknown",
        "title": "mixMulti"
      },
      "index": {
        "description": "Mix one or more signals",
        "hierarchy": "Synthesizer Physical Displacement",
        "module": "Synthesizer.Physical.Displacement",
        "name": "mixMulti",
        "normalized": "[T a b c d e]-\u003eT a b c d e",
        "package": "synthesizer",
        "partial": "Multi",
        "signature": "[T t t' y y' yv]-\u003eT t t' y y' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical-Displacement.html#v:raise",
      "description": {
        "fct-descr": "Add a number to all of the signal values.\n    This is useful for adjusting the center of a modulation. \n",
        "fct-module": "Synthesizer.Physical.Displacement",
        "fct-package": "synthesizer",
        "fct-signature": "y' -\u003e yv -\u003e T t t' y y' yv -\u003e T t t' y y' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Physical-Displacement.html#raise",
        "fct-type": "unknown",
        "title": "raise"
      },
      "index": {
        "description": "Add number to all of the signal values This is useful for adjusting the center of modulation",
        "hierarchy": "Synthesizer Physical Displacement",
        "module": "Synthesizer.Physical.Displacement",
        "name": "raise",
        "normalized": "a-\u003eb-\u003eT c d e a b-\u003eT c d e a b",
        "package": "synthesizer",
        "partial": "",
        "signature": "y'-\u003eyv-\u003eT t t' y y' yv-\u003eT t t' y y' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical-File.html#v:writeToInt16",
      "description": {
        "fct-module": "Synthesizer.Physical.File",
        "fct-package": "synthesizer",
        "fct-signature": "t' -\u003e y' -\u003e FilePath -\u003e T t t' y y' yv -\u003e IO ExitCode",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Physical-File.html#writeToInt16",
        "fct-type": "unknown",
        "title": "writeToInt16"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Physical File",
        "module": "Synthesizer.Physical.File",
        "name": "writeToInt16",
        "normalized": "a-\u003eb-\u003eFilePath-\u003eT c a d b e-\u003eIO ExitCode",
        "package": "synthesizer",
        "partial": "To Int",
        "signature": "t'-\u003ey'-\u003eFilePath-\u003eT t t' y y' yv-\u003eIO ExitCode"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical-Filter.html#v:amplify",
      "description": {
        "fct-module": "Synthesizer.Physical.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "y' -\u003e T t t' y y' yv -\u003e T t t' y y' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Physical-Filter.html#amplify",
        "fct-type": "unknown",
        "title": "amplify"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Physical Filter",
        "module": "Synthesizer.Physical.Filter",
        "name": "amplify",
        "normalized": "a-\u003eT b c d a e-\u003eT b c d a e",
        "package": "synthesizer",
        "partial": "",
        "signature": "y'-\u003eT t t' y y' yv-\u003eT t t' y y' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical-Filter.html#v:comb",
      "description": {
        "fct-descr": "Infinitely many equi-delayed exponentially decaying echos. \n",
        "fct-module": "Synthesizer.Physical.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "t' -\u003e y -\u003e T t t' y y' yv -\u003e T t t' y y' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Physical-Filter.html#comb",
        "fct-type": "unknown",
        "title": "comb"
      },
      "index": {
        "description": "Infinitely many equi-delayed exponentially decaying echos",
        "hierarchy": "Synthesizer Physical Filter",
        "module": "Synthesizer.Physical.Filter",
        "name": "comb",
        "normalized": "a-\u003eb-\u003eT c a b d e-\u003eT c a b d e",
        "package": "synthesizer",
        "partial": "",
        "signature": "t'-\u003ey-\u003eT t t' y y' yv-\u003eT t t' y y' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical-Filter.html#v:differentiate",
      "description": {
        "fct-module": "Synthesizer.Physical.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "T t a' y a' yv -\u003e T t a' y a' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Physical-Filter.html#differentiate",
        "fct-type": "unknown",
        "title": "differentiate"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Physical Filter",
        "module": "Synthesizer.Physical.Filter",
        "name": "differentiate",
        "normalized": "T a b c b d-\u003eT a b c b d",
        "package": "synthesizer",
        "partial": "",
        "signature": "T t a' y a' yv-\u003eT t a' y a' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical-Filter.html#v:envelope",
      "description": {
        "fct-descr": "the envelope \nthe signal to be enveloped \n",
        "fct-module": "Synthesizer.Physical.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "T t t' y y' y0-\u003e T t t' y y' yv-\u003e T t t' y y' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Physical-Filter.html#envelope",
        "fct-type": "unknown",
        "title": "envelope"
      },
      "index": {
        "description": "the envelope the signal to be enveloped",
        "hierarchy": "Synthesizer Physical Filter",
        "module": "Synthesizer.Physical.Filter",
        "name": "envelope",
        "normalized": "T a b c d c-\u003eT a b c d e-\u003eT a b c d e",
        "package": "synthesizer",
        "partial": "",
        "signature": "T t t' y y' y-\u003eT t t' y y' yv-\u003eT t t' y y' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical-Filter.html#v:integrate",
      "description": {
        "fct-module": "Synthesizer.Physical.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "T t a' y a' yv -\u003e T t a' y a' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Physical-Filter.html#integrate",
        "fct-type": "unknown",
        "title": "integrate"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Physical Filter",
        "module": "Synthesizer.Physical.Filter",
        "name": "integrate",
        "normalized": "T a b c b d-\u003eT a b c b d",
        "package": "synthesizer",
        "partial": "",
        "signature": "T t a' y a' yv-\u003eT t a' y a' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical-Noise.html#v:white",
      "description": {
        "fct-descr": "sample rate \nwidth of the frequency band \nvolume caused by the given frequency band \nnoise \n",
        "fct-module": "Synthesizer.Physical.Noise",
        "fct-package": "synthesizer",
        "fct-signature": "q'-\u003e q'-\u003e q'-\u003e T t q' y q' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Physical-Noise.html#white",
        "fct-type": "unknown",
        "title": "white"
      },
      "index": {
        "description": "sample rate width of the frequency band volume caused by the given frequency band noise",
        "hierarchy": "Synthesizer Physical Noise",
        "module": "Synthesizer.Physical.Noise",
        "name": "white",
        "normalized": "a-\u003ea-\u003ea-\u003eT b a c a d",
        "package": "synthesizer",
        "partial": "",
        "signature": "q'-\u003eq'-\u003eq'-\u003eT t q' y q' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical-Oscillator.html#v:freqMod",
      "description": {
        "fct-descr": "oscillator with a functional waveform with modulated frequency \n",
        "fct-module": "Synthesizer.Physical.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "T t yv -\u003e y' -\u003e t -\u003e T t t' t t' t -\u003e T t t' y y' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Physical-Oscillator.html#freqMod",
        "fct-type": "unknown",
        "title": "freqMod"
      },
      "index": {
        "description": "oscillator with functional waveform with modulated frequency",
        "hierarchy": "Synthesizer Physical Oscillator",
        "module": "Synthesizer.Physical.Oscillator",
        "name": "freqMod",
        "normalized": "T a b-\u003ec-\u003ea-\u003eT a d a d a-\u003eT a d e c b",
        "package": "synthesizer",
        "partial": "Mod",
        "signature": "T t yv-\u003ey'-\u003et-\u003eT t t' t t' t-\u003eT t t' y y' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical-Oscillator.html#v:freqModSaw",
      "description": {
        "fct-descr": "saw tooth oscillator with modulated frequency \n",
        "fct-module": "Synthesizer.Physical.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "y' -\u003e a -\u003e T a t' a t' a -\u003e T a t' a y' a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Physical-Oscillator.html#freqModSaw",
        "fct-type": "unknown",
        "title": "freqModSaw"
      },
      "index": {
        "description": "saw tooth oscillator with modulated frequency",
        "hierarchy": "Synthesizer Physical Oscillator",
        "module": "Synthesizer.Physical.Oscillator",
        "name": "freqModSaw",
        "normalized": "a-\u003eb-\u003eT b c b c b-\u003eT b c b a b",
        "package": "synthesizer",
        "partial": "Mod Saw",
        "signature": "y'-\u003ea-\u003eT a t' a t' a-\u003eT a t' a y' a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical-Oscillator.html#v:freqModSine",
      "description": {
        "fct-descr": "sine oscillator with modulated frequency \n",
        "fct-module": "Synthesizer.Physical.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "y' -\u003e a -\u003e T a t' a t' a -\u003e T a t' a y' a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Physical-Oscillator.html#freqModSine",
        "fct-type": "unknown",
        "title": "freqModSine"
      },
      "index": {
        "description": "sine oscillator with modulated frequency",
        "hierarchy": "Synthesizer Physical Oscillator",
        "module": "Synthesizer.Physical.Oscillator",
        "name": "freqModSine",
        "normalized": "a-\u003eb-\u003eT b c b c b-\u003eT b c b a b",
        "package": "synthesizer",
        "partial": "Mod Sine",
        "signature": "y'-\u003ea-\u003eT a t' a t' a-\u003eT a t' a y' a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical-Oscillator.html#v:static",
      "description": {
        "fct-descr": "oscillator with a functional waveform with constant frequency \n",
        "fct-module": "Synthesizer.Physical.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "T t yv -\u003e t' -\u003e y' -\u003e t -\u003e t' -\u003e T t t' y y' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Physical-Oscillator.html#static",
        "fct-type": "unknown",
        "title": "static"
      },
      "index": {
        "description": "oscillator with functional waveform with constant frequency",
        "hierarchy": "Synthesizer Physical Oscillator",
        "module": "Synthesizer.Physical.Oscillator",
        "name": "static",
        "normalized": "T a b-\u003ec-\u003ed-\u003ea-\u003ec-\u003eT a c e d b",
        "package": "synthesizer",
        "partial": "",
        "signature": "T t yv-\u003et'-\u003ey'-\u003et-\u003et'-\u003eT t t' y y' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical-Oscillator.html#v:staticSaw",
      "description": {
        "fct-descr": "saw tooth oscillator with modulated frequency \n",
        "fct-module": "Synthesizer.Physical.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "t' -\u003e y' -\u003e a -\u003e t' -\u003e T a t' a y' a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Physical-Oscillator.html#staticSaw",
        "fct-type": "unknown",
        "title": "staticSaw"
      },
      "index": {
        "description": "saw tooth oscillator with modulated frequency",
        "hierarchy": "Synthesizer Physical Oscillator",
        "module": "Synthesizer.Physical.Oscillator",
        "name": "staticSaw",
        "normalized": "a-\u003eb-\u003ec-\u003ea-\u003eT c a c b c",
        "package": "synthesizer",
        "partial": "Saw",
        "signature": "t'-\u003ey'-\u003ea-\u003et'-\u003eT a t' a y' a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical-Oscillator.html#v:staticSine",
      "description": {
        "fct-descr": "sine oscillator with static frequency \n",
        "fct-module": "Synthesizer.Physical.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "t' -\u003e y' -\u003e a -\u003e t' -\u003e T a t' a y' a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Physical-Oscillator.html#staticSine",
        "fct-type": "unknown",
        "title": "staticSine"
      },
      "index": {
        "description": "sine oscillator with static frequency",
        "hierarchy": "Synthesizer Physical Oscillator",
        "module": "Synthesizer.Physical.Oscillator",
        "name": "staticSine",
        "normalized": "a-\u003eb-\u003ec-\u003ea-\u003eT c a c b c",
        "package": "synthesizer",
        "partial": "Sine",
        "signature": "t'-\u003ey'-\u003ea-\u003et'-\u003eT a t' a y' a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical-Play.html#v:toInt16",
      "description": {
        "fct-module": "Synthesizer.Physical.Play",
        "fct-package": "synthesizer",
        "fct-signature": "t' -\u003e y' -\u003e T t t' y y' yv -\u003e IO ExitCode",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Physical-Play.html#toInt16",
        "fct-type": "unknown",
        "title": "toInt16"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Physical Play",
        "module": "Synthesizer.Physical.Play",
        "name": "toInt16",
        "normalized": "a-\u003eb-\u003eT c a d b e-\u003eIO ExitCode",
        "package": "synthesizer",
        "partial": "Int",
        "signature": "t'-\u003ey'-\u003eT t t' y y' yv-\u003eIO ExitCode"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical-Signal.html#t:T",
      "description": {
        "fct-module": "Synthesizer.Physical.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "data",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Physical-Signal.html#T",
        "fct-type": "unknown",
        "title": "T"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Physical Signal",
        "module": "Synthesizer.Physical.Signal",
        "name": "T",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical-Signal.html#v:addPlainSampleRate",
      "description": {
        "fct-module": "Synthesizer.Physical.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "t' -\u003e T y y' yv -\u003e T t t' y y' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Physical-Signal.html#addPlainSampleRate",
        "fct-type": "unknown",
        "title": "addPlainSampleRate"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Physical Signal",
        "module": "Synthesizer.Physical.Signal",
        "name": "addPlainSampleRate",
        "normalized": "a-\u003eT b c d-\u003eT e a b c d",
        "package": "synthesizer",
        "partial": "Plain Sample Rate",
        "signature": "t'-\u003eT y y' yv-\u003eT t t' y y' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical-Signal.html#v:addSampleRate",
      "description": {
        "fct-module": "Synthesizer.Physical.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T t t' -\u003e T y y' yv -\u003e T t t' y y' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Physical-Signal.html#addSampleRate",
        "fct-type": "unknown",
        "title": "addSampleRate"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Physical Signal",
        "module": "Synthesizer.Physical.Signal",
        "name": "addSampleRate",
        "normalized": "T a b-\u003eT c d e-\u003eT a b c d e",
        "package": "synthesizer",
        "partial": "Sample Rate",
        "signature": "T t t'-\u003eT y y' yv-\u003eT t t' y y' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical-Signal.html#v:amplitude",
      "description": {
        "fct-module": "Synthesizer.Physical.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T t t' y y' yv -\u003e y'",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Physical-Signal.html#amplitude",
        "fct-type": "unknown",
        "title": "amplitude"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Physical Signal",
        "module": "Synthesizer.Physical.Signal",
        "name": "amplitude",
        "normalized": "T a b c d e-\u003ed",
        "package": "synthesizer",
        "partial": "",
        "signature": "T t t' y y' yv-\u003ey'"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical-Signal.html#v:apply",
      "description": {
        "fct-module": "Synthesizer.Physical.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(T t t' -\u003e T y0 y'0 y0v -\u003e T y1 y'1 y1v) -\u003e T t t' y0 y'0 y0v -\u003e T t t' y1 y'1 y1v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Physical-Signal.html#apply",
        "fct-type": "unknown",
        "title": "apply"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Physical Signal",
        "module": "Synthesizer.Physical.Signal",
        "name": "apply",
        "normalized": "(T a b-\u003eT c d c e-\u003eT c d c e)-\u003eT a b c d c e-\u003eT a b c d c e",
        "package": "synthesizer",
        "partial": "",
        "signature": "(T t t'-\u003eT y y' y v-\u003eT y y' y v)-\u003eT t t' y y' y v-\u003eT t t' y y' y v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical-Signal.html#v:asTypeOfAmplitude",
      "description": {
        "fct-descr": "Fix the type of a value to the scalar amplitude type of a signal. \n",
        "fct-module": "Synthesizer.Physical.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "y -\u003e T t t' y y' yv -\u003e y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Physical-Signal.html#asTypeOfAmplitude",
        "fct-type": "unknown",
        "title": "asTypeOfAmplitude"
      },
      "index": {
        "description": "Fix the type of value to the scalar amplitude type of signal",
        "hierarchy": "Synthesizer Physical Signal",
        "module": "Synthesizer.Physical.Signal",
        "name": "asTypeOfAmplitude",
        "normalized": "a-\u003eT b c a d e-\u003ea",
        "package": "synthesizer",
        "partial": "Type Of Amplitude",
        "signature": "y-\u003eT t t' y y' yv-\u003ey"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical-Signal.html#v:asTypeOfTime",
      "description": {
        "fct-descr": "time value, of with a type to be fixed \nsignal, whose time type shall be matched \nthe time value, again \n",
        "fct-module": "Synthesizer.Physical.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "t-\u003e T t t' y y' yv-\u003e t",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Physical-Signal.html#asTypeOfTime",
        "fct-type": "unknown",
        "title": "asTypeOfTime"
      },
      "index": {
        "description": "time value of with type to be fixed signal whose time type shall be matched the time value again",
        "hierarchy": "Synthesizer Physical Signal",
        "module": "Synthesizer.Physical.Signal",
        "name": "asTypeOfTime",
        "normalized": "a-\u003eT a b c d e-\u003ea",
        "package": "synthesizer",
        "partial": "Type Of Time",
        "signature": "t-\u003eT t t' y y' yv-\u003et"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical-Signal.html#v:assert",
      "description": {
        "fct-descr": "Assert a condition before shipping the first sample.\n",
        "fct-module": "Synthesizer.Physical.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "String -\u003e Bool -\u003e T t t' y y' yv -\u003e T t t' y y' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Physical-Signal.html#assert",
        "fct-type": "unknown",
        "title": "assert"
      },
      "index": {
        "description": "Assert condition before shipping the first sample",
        "hierarchy": "Synthesizer Physical Signal",
        "module": "Synthesizer.Physical.Signal",
        "name": "assert",
        "normalized": "String-\u003eBool-\u003eT a b c d e-\u003eT a b c d e",
        "package": "synthesizer",
        "partial": "",
        "signature": "String-\u003eBool-\u003eT t t' y y' yv-\u003eT t t' y y' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical-Signal.html#v:assertAmplitude",
      "description": {
        "fct-descr": "Assert that the amplitude of the signal matches the given one.\nOtherwise give an error when the first sample is fetched.\n",
        "fct-module": "Synthesizer.Physical.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "y' -\u003e T t t' y y' yv -\u003e T t t' y y' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Physical-Signal.html#assertAmplitude",
        "fct-type": "unknown",
        "title": "assertAmplitude"
      },
      "index": {
        "description": "Assert that the amplitude of the signal matches the given one Otherwise give an error when the first sample is fetched",
        "hierarchy": "Synthesizer Physical Signal",
        "module": "Synthesizer.Physical.Signal",
        "name": "assertAmplitude",
        "normalized": "a-\u003eT b c d a e-\u003eT b c d a e",
        "package": "synthesizer",
        "partial": "Amplitude",
        "signature": "y'-\u003eT t t' y y' yv-\u003eT t t' y y' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical-Signal.html#v:assertSampleRate",
      "description": {
        "fct-descr": "Assert that the sample rate of the signal matches the given one.\n",
        "fct-module": "Synthesizer.Physical.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "t' -\u003e T t t' y y' yv -\u003e T t t' y y' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Physical-Signal.html#assertSampleRate",
        "fct-type": "unknown",
        "title": "assertSampleRate"
      },
      "index": {
        "description": "Assert that the sample rate of the signal matches the given one",
        "hierarchy": "Synthesizer Physical Signal",
        "module": "Synthesizer.Physical.Signal",
        "name": "assertSampleRate",
        "normalized": "a-\u003eT b a c d e-\u003eT b a c d e",
        "package": "synthesizer",
        "partial": "Sample Rate",
        "signature": "t'-\u003eT t t' y y' yv-\u003eT t t' y y' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical-Signal.html#v:checkSampleRate",
      "description": {
        "fct-descr": "If the given sample rate matches the one of the signal,\nthen return the core signal, otherwise \u003ctt\u003e\u003ca\u003eundefined\u003c/a\u003e\u003c/tt\u003e.\n",
        "fct-module": "Synthesizer.Physical.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "String -\u003e T t t' -\u003e T t t' y y' yv -\u003e T y y' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Physical-Signal.html#checkSampleRate",
        "fct-type": "unknown",
        "title": "checkSampleRate"
      },
      "index": {
        "description": "If the given sample rate matches the one of the signal then return the core signal otherwise undefined",
        "hierarchy": "Synthesizer Physical Signal",
        "module": "Synthesizer.Physical.Signal",
        "name": "checkSampleRate",
        "normalized": "String-\u003eT a b-\u003eT a b c d e-\u003eT c d e",
        "package": "synthesizer",
        "partial": "Sample Rate",
        "signature": "String-\u003eT t t'-\u003eT t t' y y' yv-\u003eT y y' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical-Signal.html#v:commonSampleRate",
      "description": {
        "fct-descr": "If all signals share the same sampleRate, then return it,\n    otherwise raise an error. \n",
        "fct-module": "Synthesizer.Physical.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T t t' y0 y'0 yv0 -\u003e T t t' y1 y'1 yv1 -\u003e t'",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Physical-Signal.html#commonSampleRate",
        "fct-type": "unknown",
        "title": "commonSampleRate"
      },
      "index": {
        "description": "If all signals share the same sampleRate then return it otherwise raise an error",
        "hierarchy": "Synthesizer Physical Signal",
        "module": "Synthesizer.Physical.Signal",
        "name": "commonSampleRate",
        "normalized": "T a b c d e-\u003eT a b c d e-\u003eb",
        "package": "synthesizer",
        "partial": "Sample Rate",
        "signature": "T t t' y y' yv-\u003eT t t' y y' yv-\u003et'"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical-Signal.html#v:commonSampleRate'",
      "description": {
        "fct-module": "Synthesizer.Physical.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e a -\u003e a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Physical-Signal.html#commonSampleRate%27",
        "fct-type": "unknown",
        "title": "commonSampleRate'"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Physical Signal",
        "module": "Synthesizer.Physical.Signal",
        "name": "commonSampleRate'",
        "normalized": "a-\u003ea-\u003ea",
        "package": "synthesizer",
        "partial": "Sample Rate'",
        "signature": "a-\u003ea-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical-Signal.html#v:cons",
      "description": {
        "fct-descr": "sampling rate, must be positive (unchecked) \namplitude, must be positive (unchecked) \nsamples, values should be between -1 and 1 (unchecked) \n",
        "fct-module": "Synthesizer.Physical.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "t'-\u003e y'-\u003e [yv]-\u003e T t t' y y' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Physical-Signal.html#cons",
        "fct-type": "unknown",
        "title": "cons"
      },
      "index": {
        "description": "sampling rate must be positive unchecked amplitude must be positive unchecked samples values should be between and unchecked",
        "hierarchy": "Synthesizer Physical Signal",
        "module": "Synthesizer.Physical.Signal",
        "name": "cons",
        "normalized": "a-\u003eb-\u003e[c]-\u003eT d a e b c",
        "package": "synthesizer",
        "partial": "",
        "signature": "t'-\u003ey'-\u003e[yv]-\u003eT t t' y y' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical-Signal.html#v:lift0",
      "description": {
        "fct-module": "Synthesizer.Physical.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(T t t' -\u003e T y y' yv) -\u003e t' -\u003e T t t' y y' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Physical-Signal.html#lift0",
        "fct-type": "unknown",
        "title": "lift0"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Physical Signal",
        "module": "Synthesizer.Physical.Signal",
        "name": "lift0",
        "normalized": "(T a b-\u003eT c d e)-\u003eb-\u003eT a b c d e",
        "package": "synthesizer",
        "partial": "",
        "signature": "(T t t'-\u003eT y y' yv)-\u003et'-\u003eT t t' y y' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical-Signal.html#v:lift1",
      "description": {
        "fct-module": "Synthesizer.Physical.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(T t t' -\u003e T y0 y0' yv0 -\u003e T y1 y1' yv1) -\u003e T t t' y0 y0' yv0 -\u003e T t t' y1 y1' yv1",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Physical-Signal.html#lift1",
        "fct-type": "unknown",
        "title": "lift1"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Physical Signal",
        "module": "Synthesizer.Physical.Signal",
        "name": "lift1",
        "normalized": "(T a b-\u003eT c c d-\u003eT c c d)-\u003eT a b c c d-\u003eT a b c c d",
        "package": "synthesizer",
        "partial": "",
        "signature": "(T t t'-\u003eT y y yv-\u003eT y y yv)-\u003eT t t' y y yv-\u003eT t t' y y yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical-Signal.html#v:lift2",
      "description": {
        "fct-module": "Synthesizer.Physical.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(T t t' -\u003e T y0 y'0 yv0 -\u003e T y1 y'1 yv1 -\u003e T y2 y'2 yv2) -\u003e T t t' y0 y'0 yv0 -\u003e T t t' y1 y'1 yv1 -\u003e T t t' y2 y'2 yv2",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Physical-Signal.html#lift2",
        "fct-type": "unknown",
        "title": "lift2"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Physical Signal",
        "module": "Synthesizer.Physical.Signal",
        "name": "lift2",
        "normalized": "(T a b-\u003eT c d e-\u003eT c d e-\u003eT c d e)-\u003eT a b c d e-\u003eT a b c d e-\u003eT a b c d e",
        "package": "synthesizer",
        "partial": "",
        "signature": "(T t t'-\u003eT y y' yv-\u003eT y y' yv-\u003eT y y' yv)-\u003eT t t' y y' yv-\u003eT t t' y y' yv-\u003eT t t' y y' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical-Signal.html#v:lift3",
      "description": {
        "fct-module": "Synthesizer.Physical.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(T t t' -\u003e T y0 y'0 yv0 -\u003e T y1 y'1 yv1 -\u003e T y2 y'2 yv2 -\u003e T y3 y'3 yv3) -\u003e T t t' y0 y'0 yv0 -\u003e T t t' y1 y'1 yv1 -\u003e T t t' y2 y'2 yv2 -\u003e T t t' y3 y'3 yv3",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Physical-Signal.html#lift3",
        "fct-type": "unknown",
        "title": "lift3"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Physical Signal",
        "module": "Synthesizer.Physical.Signal",
        "name": "lift3",
        "normalized": "(T a b-\u003eT c d e-\u003eT c d e-\u003eT c d e-\u003eT c d e)-\u003eT a b c d e-\u003eT a b c d e-\u003eT a b c d e-\u003eT a b c d e",
        "package": "synthesizer",
        "partial": "",
        "signature": "(T t t'-\u003eT y y' yv-\u003eT y y' yv-\u003eT y y' yv-\u003eT y y' yv)-\u003eT t t' y y' yv-\u003eT t t' y y' yv-\u003eT t t' y y' yv-\u003eT t t' y y' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical-Signal.html#v:liftList",
      "description": {
        "fct-module": "Synthesizer.Physical.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(T t t' -\u003e [T y1 y'1 yv1] -\u003e T y y' yv) -\u003e [T t t' y1 y'1 yv1] -\u003e T t t' y y' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Physical-Signal.html#liftList",
        "fct-type": "unknown",
        "title": "liftList"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Physical Signal",
        "module": "Synthesizer.Physical.Signal",
        "name": "liftList",
        "normalized": "(T a b-\u003e[T c d e]-\u003eT c d e)-\u003e[T a b c d e]-\u003eT a b c d e",
        "package": "synthesizer",
        "partial": "List",
        "signature": "(T t t'-\u003e[T y y' yv]-\u003eT y y' yv)-\u003e[T t t' y y' yv]-\u003eT t t' y y' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical-Signal.html#v:liftR2",
      "description": {
        "fct-module": "Synthesizer.Physical.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(T t t' -\u003e T y y' yv -\u003e (T y0 y'0 yv0, T y1 y'1 yv1)) -\u003e T t t' y y' yv -\u003e (T t t' y0 y'0 yv0, T t t' y1 y'1 yv1)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Physical-Signal.html#liftR2",
        "fct-type": "unknown",
        "title": "liftR2"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Physical Signal",
        "module": "Synthesizer.Physical.Signal",
        "name": "liftR2",
        "normalized": "(T a b-\u003eT c d e-\u003e(T c d e,T c d e))-\u003eT a b c d e-\u003e(T a b c d e,T a b c d e)",
        "package": "synthesizer",
        "partial": "",
        "signature": "(T t t'-\u003eT y y' yv-\u003e(T y y' yv,T y y' yv))-\u003eT t t' y y' yv-\u003e(T t t' y y' yv,T t t' y y' yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical-Signal.html#v:liftR3",
      "description": {
        "fct-module": "Synthesizer.Physical.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(T t t' -\u003e T y y' yv -\u003e (T y0 y'0 yv0, T y1 y'1 yv1, T y2 y'2 yv2)) -\u003e T t t' y y' yv -\u003e (T t t' y0 y'0 yv0, T t t' y1 y'1 yv1, T t t' y2 y'2 yv2)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Physical-Signal.html#liftR3",
        "fct-type": "unknown",
        "title": "liftR3"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Physical Signal",
        "module": "Synthesizer.Physical.Signal",
        "name": "liftR3",
        "normalized": "(T a b-\u003eT c d e-\u003e(T c d e,T c d e,T c d e))-\u003eT a b c d e-\u003e(T a b c d e,T a b c d e,T a b c d e)",
        "package": "synthesizer",
        "partial": "",
        "signature": "(T t t'-\u003eT y y' yv-\u003e(T y y' yv,T y y' yv,T y y' yv))-\u003eT t t' y y' yv-\u003e(T t t' y y' yv,T t t' y y' yv,T t t' y y' yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical-Signal.html#v:pureData",
      "description": {
        "fct-descr": "The unit of the sampling frequency, say Number.SI.hertz \nThe maximum expected value.\n               The data is normalized to this value,\n               in order to preserve that all output samples\n               are at most 1 in magnitude. \nThe input signal. \nThe sampling frequency without unit and\n               the list of normalized samples.\n               This information should suffice for playback\n               or writing the signal to a file. \n",
        "fct-module": "Synthesizer.Physical.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "t'-\u003e y'-\u003e T t t' y y' yv-\u003e (t, [yv])",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Physical-Signal.html#pureData",
        "fct-type": "unknown",
        "title": "pureData"
      },
      "index": {
        "description": "The unit of the sampling frequency say Number.SI.hertz The maximum expected value The data is normalized to this value in order to preserve that all output samples are at most in magnitude The input signal The sampling frequency without unit and the list of normalized samples This information should suffice for playback or writing the signal to file",
        "hierarchy": "Synthesizer Physical Signal",
        "module": "Synthesizer.Physical.Signal",
        "name": "pureData",
        "normalized": "a-\u003eb-\u003eT c a d b e-\u003e(c,[e])",
        "package": "synthesizer",
        "partial": "Data",
        "signature": "t'-\u003ey'-\u003eT t t' y y' yv-\u003e(t,[yv])"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical-Signal.html#v:replaceAmplitude",
      "description": {
        "fct-module": "Synthesizer.Physical.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "y1' -\u003e T t t' y y0' yv -\u003e T t t' y y1' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Physical-Signal.html#replaceAmplitude",
        "fct-type": "unknown",
        "title": "replaceAmplitude"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Physical Signal",
        "module": "Synthesizer.Physical.Signal",
        "name": "replaceAmplitude",
        "normalized": "a-\u003eT b c a a d-\u003eT b c a a d",
        "package": "synthesizer",
        "partial": "Amplitude",
        "signature": "y-\u003eT t t' y y yv-\u003eT t t' y y yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical-Signal.html#v:replaceParameters",
      "description": {
        "fct-descr": "Replace sample rate and amplitude\nwith different representations of their values.\nThis is needed for internal purposes,\nespecially for preserving the phantom types.\nDo not use it for arbitrary changes of sample rate or amplitude!\n",
        "fct-module": "Synthesizer.Physical.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "t1' -\u003e y1' -\u003e T t t0' y y0' yv -\u003e T t t1' y y1' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Physical-Signal.html#replaceParameters",
        "fct-type": "unknown",
        "title": "replaceParameters"
      },
      "index": {
        "description": "Replace sample rate and amplitude with different representations of their values This is needed for internal purposes especially for preserving the phantom types Do not use it for arbitrary changes of sample rate or amplitude",
        "hierarchy": "Synthesizer Physical Signal",
        "module": "Synthesizer.Physical.Signal",
        "name": "replaceParameters",
        "normalized": "a-\u003eb-\u003eT a a b b c-\u003eT a a b b c",
        "package": "synthesizer",
        "partial": "Parameters",
        "signature": "t-\u003ey-\u003eT t t y y yv-\u003eT t t y y yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical-Signal.html#v:replaceSampleRate",
      "description": {
        "fct-module": "Synthesizer.Physical.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "t1' -\u003e T t t0' y y' yv -\u003e T t t1' y y' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Physical-Signal.html#replaceSampleRate",
        "fct-type": "unknown",
        "title": "replaceSampleRate"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Physical Signal",
        "module": "Synthesizer.Physical.Signal",
        "name": "replaceSampleRate",
        "normalized": "a-\u003eT a a b c d-\u003eT a a b c d",
        "package": "synthesizer",
        "partial": "Sample Rate",
        "signature": "t-\u003eT t t y y' yv-\u003eT t t y y' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical-Signal.html#v:replaceSamples",
      "description": {
        "fct-module": "Synthesizer.Physical.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "[yv1] -\u003e T t t' y y' yv0 -\u003e T t t' y y' yv1",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Physical-Signal.html#replaceSamples",
        "fct-type": "unknown",
        "title": "replaceSamples"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Physical Signal",
        "module": "Synthesizer.Physical.Signal",
        "name": "replaceSamples",
        "normalized": "[a]-\u003eT b c d e a-\u003eT b c d e a",
        "package": "synthesizer",
        "partial": "Samples",
        "signature": "[yv]-\u003eT t t' y y' yv-\u003eT t t' y y' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical-Signal.html#v:run",
      "description": {
        "fct-module": "Synthesizer.Physical.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T t t' -\u003e (T t t' -\u003e T y y' yv) -\u003e T t t' y y' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Physical-Signal.html#run",
        "fct-type": "unknown",
        "title": "run"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Physical Signal",
        "module": "Synthesizer.Physical.Signal",
        "name": "run",
        "normalized": "T a b-\u003e(T a b-\u003eT c d e)-\u003eT a b c d e",
        "package": "synthesizer",
        "partial": "",
        "signature": "T t t'-\u003e(T t t'-\u003eT y y' yv)-\u003eT t t' y y' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical-Signal.html#v:runPlain",
      "description": {
        "fct-module": "Synthesizer.Physical.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "t' -\u003e (T t t' -\u003e T y y' yv) -\u003e T t t' y y' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Physical-Signal.html#runPlain",
        "fct-type": "unknown",
        "title": "runPlain"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Physical Signal",
        "module": "Synthesizer.Physical.Signal",
        "name": "runPlain",
        "normalized": "a-\u003e(T b a-\u003eT c d e)-\u003eT b a c d e",
        "package": "synthesizer",
        "partial": "Plain",
        "signature": "t'-\u003e(T t t'-\u003eT y y' yv)-\u003eT t t' y y' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical-Signal.html#v:sampleRate",
      "description": {
        "fct-module": "Synthesizer.Physical.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T t t' y y' yv -\u003e t'",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Physical-Signal.html#sampleRate",
        "fct-type": "unknown",
        "title": "sampleRate"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Physical Signal",
        "module": "Synthesizer.Physical.Signal",
        "name": "sampleRate",
        "normalized": "T a b c d e-\u003eb",
        "package": "synthesizer",
        "partial": "Rate",
        "signature": "T t t' y y' yv-\u003et'"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical-Signal.html#v:samples",
      "description": {
        "fct-module": "Synthesizer.Physical.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T t t' y y' yv -\u003e [yv]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Physical-Signal.html#samples",
        "fct-type": "unknown",
        "title": "samples"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Physical Signal",
        "module": "Synthesizer.Physical.Signal",
        "name": "samples",
        "normalized": "T a b c d e-\u003e[e]",
        "package": "synthesizer",
        "partial": "",
        "signature": "T t t' y y' yv-\u003e[yv]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical-Signal.html#v:splitSampleRate",
      "description": {
        "fct-module": "Synthesizer.Physical.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T t t' y y' yv -\u003e (T t t', T y y' yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Physical-Signal.html#splitSampleRate",
        "fct-type": "unknown",
        "title": "splitSampleRate"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Physical Signal",
        "module": "Synthesizer.Physical.Signal",
        "name": "splitSampleRate",
        "normalized": "T a b c d e-\u003e(T a b,T c d e)",
        "package": "synthesizer",
        "partial": "Sample Rate",
        "signature": "T t t' y y' yv-\u003e(T t t',T y y' yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical-Signal.html#v:splitSampleRateList",
      "description": {
        "fct-module": "Synthesizer.Physical.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "[T t t' y y' yv] -\u003e (T t t', [T y y' yv])",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Physical-Signal.html#splitSampleRateList",
        "fct-type": "unknown",
        "title": "splitSampleRateList"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Physical Signal",
        "module": "Synthesizer.Physical.Signal",
        "name": "splitSampleRateList",
        "normalized": "[T a b c d e]-\u003e(T a b,[T c d e])",
        "package": "synthesizer",
        "partial": "Sample Rate List",
        "signature": "[T t t' y y' yv]-\u003e(T t t',[T y y' yv])"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical-Signal.html#v:toAmplitudeScalar",
      "description": {
        "fct-descr": "Express an amplitude value as a multiple of the signal amplitude.\n     The multiplicity is returned.\n     It is a checked error,\n     if the units of amplitude value and signal amplitude mismatch. \n",
        "fct-module": "Synthesizer.Physical.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T t t' y y' yv -\u003e y' -\u003e y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Physical-Signal.html#toAmplitudeScalar",
        "fct-type": "unknown",
        "title": "toAmplitudeScalar"
      },
      "index": {
        "description": "Express an amplitude value as multiple of the signal amplitude The multiplicity is returned It is checked error if the units of amplitude value and signal amplitude mismatch",
        "hierarchy": "Synthesizer Physical Signal",
        "module": "Synthesizer.Physical.Signal",
        "name": "toAmplitudeScalar",
        "normalized": "T a b c d e-\u003ed-\u003ec",
        "package": "synthesizer",
        "partial": "Amplitude Scalar",
        "signature": "T t t' y y' yv-\u003ey'-\u003ey"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical-Signal.html#v:toFrequencyScalar",
      "description": {
        "fct-descr": "Express a frequency value as a multiple of the sampling frequency.\n     The multiplicity is returned.\n     In many applications the multiplicity is below 1.\n     It is a checked error,\n     if the units of frequency value and sampling frequency mismatch. \n",
        "fct-module": "Synthesizer.Physical.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T t t' y y' yv -\u003e t' -\u003e t",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Physical-Signal.html#toFrequencyScalar",
        "fct-type": "unknown",
        "title": "toFrequencyScalar"
      },
      "index": {
        "description": "Express frequency value as multiple of the sampling frequency The multiplicity is returned In many applications the multiplicity is below It is checked error if the units of frequency value and sampling frequency mismatch",
        "hierarchy": "Synthesizer Physical Signal",
        "module": "Synthesizer.Physical.Signal",
        "name": "toFrequencyScalar",
        "normalized": "T a b c d e-\u003eb-\u003ea",
        "package": "synthesizer",
        "partial": "Frequency Scalar",
        "signature": "T t t' y y' yv-\u003et'-\u003et"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical-Signal.html#v:toTimeScalar",
      "description": {
        "fct-descr": "Express a time value as a multiple of the sampling period.\n     The multiplicity is returned.\n     It is a checked error,\n     if the units of time value and sampling period mismatch. \n",
        "fct-module": "Synthesizer.Physical.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T t t' y y' yv -\u003e t' -\u003e t",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Physical-Signal.html#toTimeScalar",
        "fct-type": "unknown",
        "title": "toTimeScalar"
      },
      "index": {
        "description": "Express time value as multiple of the sampling period The multiplicity is returned It is checked error if the units of time value and sampling period mismatch",
        "hierarchy": "Synthesizer Physical Signal",
        "module": "Synthesizer.Physical.Signal",
        "name": "toTimeScalar",
        "normalized": "T a b c d e-\u003eb-\u003ea",
        "package": "synthesizer",
        "partial": "Time Scalar",
        "signature": "T t t' y y' yv-\u003et'-\u003et"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical.html",
      "description": {
        "fct-descr": "This module is for documentation purposes.\nBut the modules below are exported\nin order to let you easily navigate to them.\n",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Physical.html",
        "fct-type": "unknown",
        "title": ""
      },
      "index": {
        "description": "This module is for documentation purposes But the modules below are exported in order to let you easily navigate to them",
        "hierarchy": "",
        "module": "",
        "name": "",
        "normalized": "",
        "package": "",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Piecewise.html#t:Piece",
      "description": {
        "fct-module": "Synthesizer.Piecewise",
        "fct-package": "synthesizer",
        "fct-signature": "newtype",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Piecewise.html#Piece",
        "fct-type": "unknown",
        "title": "Piece"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Piecewise",
        "module": "Synthesizer.Piecewise",
        "name": "Piece",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Piece",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Piecewise.html#t:PieceData",
      "description": {
        "fct-module": "Synthesizer.Piecewise",
        "fct-package": "synthesizer",
        "fct-signature": "data",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Piecewise.html#PieceData",
        "fct-type": "unknown",
        "title": "PieceData"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Piecewise",
        "module": "Synthesizer.Piecewise",
        "name": "PieceData",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Piece Data",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Piecewise.html#t:PieceDist",
      "description": {
        "fct-module": "Synthesizer.Piecewise",
        "fct-package": "synthesizer",
        "fct-signature": "data",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Piecewise.html#PieceDist",
        "fct-type": "unknown",
        "title": "PieceDist"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Piecewise",
        "module": "Synthesizer.Piecewise",
        "name": "PieceDist",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Piece Dist",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Piecewise.html#t:PieceRightDouble",
      "description": {
        "fct-module": "Synthesizer.Piecewise",
        "fct-package": "synthesizer",
        "fct-signature": "newtype",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Piecewise.html#PieceRightDouble",
        "fct-type": "unknown",
        "title": "PieceRightDouble"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Piecewise",
        "module": "Synthesizer.Piecewise",
        "name": "PieceRightDouble",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Piece Right Double",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Piecewise.html#t:PieceRightSingle",
      "description": {
        "fct-module": "Synthesizer.Piecewise",
        "fct-package": "synthesizer",
        "fct-signature": "newtype",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Piecewise.html#PieceRightSingle",
        "fct-type": "unknown",
        "title": "PieceRightSingle"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Piecewise",
        "module": "Synthesizer.Piecewise",
        "name": "PieceRightSingle",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Piece Right Single",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Piecewise.html#t:T",
      "description": {
        "fct-module": "Synthesizer.Piecewise",
        "fct-package": "synthesizer",
        "fct-signature": "type",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Piecewise.html#T",
        "fct-type": "unknown",
        "title": "T"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Piecewise",
        "module": "Synthesizer.Piecewise",
        "name": "T",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Piecewise.html#v:#|",
      "description": {
        "fct-module": "Synthesizer.Piecewise",
        "fct-package": "synthesizer",
        "fct-signature": "(t, Piece t y sig) -\u003e y -\u003e (PieceDist t y sig, T t y sig)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Piecewise.html#%23%7C",
        "fct-type": "unknown",
        "title": "#|"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Piecewise",
        "module": "Synthesizer.Piecewise",
        "name": "#|",
        "normalized": "(a,Piece a b c)-\u003eb-\u003e(PieceDist a b c,T a b c)",
        "package": "synthesizer",
        "partial": "",
        "signature": "(t,Piece t y sig)-\u003ey-\u003e(PieceDist t y sig,T t y sig)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Piecewise.html#v:#|-",
      "description": {
        "fct-descr": "\u003cp\u003eThe 6 operators simplify constructing a list of \u003ctt\u003ePieceData a\u003c/tt\u003e.\nThe description consists of nodes (namely the curve values at nodes)\nand the connecting curve types.\nThe naming scheme is as follows:\nIn the middle there is a bar \u003ctt\u003e|\u003c/tt\u003e.\nWith respect to the bar,\nthe pad symbol \u003ctt\u003e#\u003c/tt\u003e is at the side of the curve type,\nat the other side there is nothing, a minus sign \u003ctt\u003e-\u003c/tt\u003e, or an equality sign \u003ctt\u003e=\u003c/tt\u003e.\n\u003c/p\u003e\u003col\u003e\u003cli\u003e Nothing means that here is the start or the end node of a curve.\n\u003c/li\u003e\u003cli\u003e Minus means that here is a node where left and right curve meet at the same value.\n     The node description is thus one value.\n\u003c/li\u003e\u003cli\u003e Equality sign means that here is a split node,\n     where left and right curve might have different ending and beginning values, respectively.\n     The node description consists of a pair of values.\n\u003c/li\u003e\u003c/ol\u003e",
        "fct-module": "Synthesizer.Piecewise",
        "fct-package": "synthesizer",
        "fct-signature": "(t, Piece t y sig) -\u003e (PieceRightSingle y, T t y sig) -\u003e (PieceDist t y sig, T t y sig)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Piecewise.html#%23%7C-",
        "fct-type": "unknown",
        "title": "#|-"
      },
      "index": {
        "description": "The operators simplify constructing list of PieceData The description consists of nodes namely the curve values at nodes and the connecting curve types The naming scheme is as follows In the middle there is bar With respect to the bar the pad symbol is at the side of the curve type at the other side there is nothing minus sign or an equality sign Nothing means that here is the start or the end node of curve Minus means that here is node where left and right curve meet at the same value The node description is thus one value Equality sign means that here is split node where left and right curve might have different ending and beginning values respectively The node description consists of pair of values",
        "hierarchy": "Synthesizer Piecewise",
        "module": "Synthesizer.Piecewise",
        "name": "#|-",
        "normalized": "(a,Piece a b c)-\u003e(PieceRightSingle b,T a b c)-\u003e(PieceDist a b c,T a b c)",
        "package": "synthesizer",
        "partial": "",
        "signature": "(t,Piece t y sig)-\u003e(PieceRightSingle y,T t y sig)-\u003e(PieceDist t y sig,T t y sig)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Piecewise.html#v:#|=",
      "description": {
        "fct-module": "Synthesizer.Piecewise",
        "fct-package": "synthesizer",
        "fct-signature": "(t, Piece t y sig) -\u003e (PieceRightDouble y, T t y sig) -\u003e (PieceDist t y sig, T t y sig)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Piecewise.html#%23%7C%3D",
        "fct-type": "unknown",
        "title": "#|="
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Piecewise",
        "module": "Synthesizer.Piecewise",
        "name": "#|=",
        "normalized": "(a,Piece a b c)-\u003e(PieceRightDouble b,T a b c)-\u003e(PieceDist a b c,T a b c)",
        "package": "synthesizer",
        "partial": "",
        "signature": "(t,Piece t y sig)-\u003e(PieceRightDouble y,T t y sig)-\u003e(PieceDist t y sig,T t y sig)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Piecewise.html#v:-|#",
      "description": {
        "fct-module": "Synthesizer.Piecewise",
        "fct-package": "synthesizer",
        "fct-signature": "y -\u003e (PieceDist t y sig, T t y sig) -\u003e (PieceRightSingle y, T t y sig)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Piecewise.html#-%7C%23",
        "fct-type": "unknown",
        "title": "-|#"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Piecewise",
        "module": "Synthesizer.Piecewise",
        "name": "-|#",
        "normalized": "a-\u003e(PieceDist b a c,T b a c)-\u003e(PieceRightSingle a,T b a c)",
        "package": "synthesizer",
        "partial": "",
        "signature": "y-\u003e(PieceDist t y sig,T t y sig)-\u003e(PieceRightSingle y,T t y sig)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Piecewise.html#v:=|#",
      "description": {
        "fct-module": "Synthesizer.Piecewise",
        "fct-package": "synthesizer",
        "fct-signature": "(y, y) -\u003e (PieceDist t y sig, T t y sig) -\u003e (PieceRightDouble y, T t y sig)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Piecewise.html#%3D%7C%23",
        "fct-type": "unknown",
        "title": "=|#"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Piecewise",
        "module": "Synthesizer.Piecewise",
        "name": "=|#",
        "normalized": "(a,a)-\u003e(PieceDist b a c,T b a c)-\u003e(PieceRightDouble a,T b a c)",
        "package": "synthesizer",
        "partial": "",
        "signature": "(y,y)-\u003e(PieceDist t y sig,T t y sig)-\u003e(PieceRightDouble y,T t y sig)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Piecewise.html#v:pieceFromFunction",
      "description": {
        "fct-module": "Synthesizer.Piecewise",
        "fct-package": "synthesizer",
        "fct-signature": "(y -\u003e y -\u003e t -\u003e sig) -\u003e Piece t y sig",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Piecewise.html#pieceFromFunction",
        "fct-type": "unknown",
        "title": "pieceFromFunction"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Piecewise",
        "module": "Synthesizer.Piecewise",
        "name": "pieceFromFunction",
        "normalized": "(a-\u003ea-\u003eb-\u003ec)-\u003ePiece b a c",
        "package": "synthesizer",
        "partial": "From Function",
        "signature": "(y-\u003ey-\u003et-\u003esig)-\u003ePiece t y sig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Piecewise.html#v:|#",
      "description": {
        "fct-module": "Synthesizer.Piecewise",
        "fct-package": "synthesizer",
        "fct-signature": "y -\u003e (PieceDist t y sig, T t y sig) -\u003e T t y sig",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Piecewise.html#%7C%23",
        "fct-type": "unknown",
        "title": "|#"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Piecewise",
        "module": "Synthesizer.Piecewise",
        "name": "|#",
        "normalized": "a-\u003e(PieceDist b a c,T b a c)-\u003eT b a c",
        "package": "synthesizer",
        "partial": "",
        "signature": "y-\u003e(PieceDist t y sig,T t y sig)-\u003eT t y sig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Analysis.html#t:BinaryLevel",
      "description": {
        "fct-module": "Synthesizer.Plain.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "data",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Analysis.html#BinaryLevel",
        "fct-type": "unknown",
        "title": "BinaryLevel"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Analysis",
        "module": "Synthesizer.Plain.Analysis",
        "name": "BinaryLevel",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Binary Level",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Analysis.html#v:attachOne",
      "description": {
        "fct-module": "Synthesizer.Plain.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "T i -\u003e T (i, Int)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Analysis.html#attachOne",
        "fct-type": "unknown",
        "title": "attachOne"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Analysis",
        "module": "Synthesizer.Plain.Analysis",
        "name": "attachOne",
        "normalized": "T a-\u003eT(a,Int)",
        "package": "synthesizer",
        "partial": "One",
        "signature": "T i-\u003eT(i,Int)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Analysis.html#v:average",
      "description": {
        "fct-module": "Synthesizer.Plain.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "T y -\u003e y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Analysis.html#average",
        "fct-type": "unknown",
        "title": "average"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Analysis",
        "module": "Synthesizer.Plain.Analysis",
        "name": "average",
        "normalized": "T a-\u003ea",
        "package": "synthesizer",
        "partial": "",
        "signature": "T y-\u003ey"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Analysis.html#v:binaryLevelFromBool",
      "description": {
        "fct-module": "Synthesizer.Plain.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "Bool -\u003e BinaryLevel",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Analysis.html#binaryLevelFromBool",
        "fct-type": "unknown",
        "title": "binaryLevelFromBool"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Analysis",
        "module": "Synthesizer.Plain.Analysis",
        "name": "binaryLevelFromBool",
        "normalized": "Bool-\u003eBinaryLevel",
        "package": "synthesizer",
        "partial": "Level From Bool",
        "signature": "Bool-\u003eBinaryLevel"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Analysis.html#v:binaryLevelToNumber",
      "description": {
        "fct-module": "Synthesizer.Plain.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "BinaryLevel -\u003e a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Analysis.html#binaryLevelToNumber",
        "fct-type": "unknown",
        "title": "binaryLevelToNumber"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Analysis",
        "module": "Synthesizer.Plain.Analysis",
        "name": "binaryLevelToNumber",
        "normalized": "BinaryLevel-\u003ea",
        "package": "synthesizer",
        "partial": "Level To Number",
        "signature": "BinaryLevel-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Analysis.html#v:binarySign",
      "description": {
        "fct-module": "Synthesizer.Plain.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "T y -\u003e T BinaryLevel",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Analysis.html#binarySign",
        "fct-type": "unknown",
        "title": "binarySign"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Analysis",
        "module": "Synthesizer.Plain.Analysis",
        "name": "binarySign",
        "normalized": "T a-\u003eT BinaryLevel",
        "package": "synthesizer",
        "partial": "Sign",
        "signature": "T y-\u003eT BinaryLevel"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Analysis.html#v:bounds",
      "description": {
        "fct-descr": "Compute minimum and maximum value of the stream the efficient way.\nInput list must be non-empty and finite.\n",
        "fct-module": "Synthesizer.Plain.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "T y -\u003e (y, y)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Analysis.html#bounds",
        "fct-type": "unknown",
        "title": "bounds"
      },
      "index": {
        "description": "Compute minimum and maximum value of the stream the efficient way Input list must be non-empty and finite",
        "hierarchy": "Synthesizer Plain Analysis",
        "module": "Synthesizer.Plain.Analysis",
        "name": "bounds",
        "normalized": "T a-\u003e(a,a)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T y-\u003e(y,y)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Analysis.html#v:centroid",
      "description": {
        "fct-descr": "\u003ctt\u003e\u003ca\u003edirectCurrentOffset\u003c/a\u003e\u003c/tt\u003e must be non-zero.\n",
        "fct-module": "Synthesizer.Plain.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "T y -\u003e y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Analysis.html#centroid",
        "fct-type": "unknown",
        "title": "centroid"
      },
      "index": {
        "description": "directCurrentOffset must be non-zero",
        "hierarchy": "Synthesizer Plain Analysis",
        "module": "Synthesizer.Plain.Analysis",
        "name": "centroid",
        "normalized": "T a-\u003ea",
        "package": "synthesizer",
        "partial": "",
        "signature": "T y-\u003ey"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Analysis.html#v:centroidAlt",
      "description": {
        "fct-module": "Synthesizer.Plain.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "T y -\u003e y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Analysis.html#centroidAlt",
        "fct-type": "unknown",
        "title": "centroidAlt"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Analysis",
        "module": "Synthesizer.Plain.Analysis",
        "name": "centroidAlt",
        "normalized": "T a-\u003ea",
        "package": "synthesizer",
        "partial": "Alt",
        "signature": "T y-\u003ey"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Analysis.html#v:chirpTransform",
      "description": {
        "fct-descr": "\u003cp\u003eAlmost naive implementation of the chirp transform,\na generalization of the Fourier transform.\n\u003c/p\u003e\u003cp\u003eMore sophisticated algorithms like Rader, Cooley-Tukey, Winograd, Prime-Factor may follow.\n\u003c/p\u003e",
        "fct-module": "Synthesizer.Plain.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "y -\u003e T y -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Analysis.html#chirpTransform",
        "fct-type": "unknown",
        "title": "chirpTransform"
      },
      "index": {
        "description": "Almost naive implementation of the chirp transform generalization of the Fourier transform More sophisticated algorithms like Rader Cooley-Tukey Winograd Prime-Factor may follow",
        "hierarchy": "Synthesizer Plain Analysis",
        "module": "Synthesizer.Plain.Analysis",
        "name": "chirpTransform",
        "normalized": "a-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "Transform",
        "signature": "y-\u003eT y-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Analysis.html#v:deltaSigmaModulation",
      "description": {
        "fct-descr": "The output type could be different from the input type\nbut then we would need a conversion from output to input for feedback.\n",
        "fct-module": "Synthesizer.Plain.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "T y -\u003e T BinaryLevel",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Analysis.html#deltaSigmaModulation",
        "fct-type": "unknown",
        "title": "deltaSigmaModulation"
      },
      "index": {
        "description": "The output type could be different from the input type but then we would need conversion from output to input for feedback",
        "hierarchy": "Synthesizer Plain Analysis",
        "module": "Synthesizer.Plain.Analysis",
        "name": "deltaSigmaModulation",
        "normalized": "T a-\u003eT BinaryLevel",
        "package": "synthesizer",
        "partial": "Sigma Modulation",
        "signature": "T y-\u003eT BinaryLevel"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Analysis.html#v:directCurrentOffset",
      "description": {
        "fct-descr": "Requires finite length.\nThis is identical to the arithmetic mean.\n",
        "fct-module": "Synthesizer.Plain.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "T y -\u003e y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Analysis.html#directCurrentOffset",
        "fct-type": "unknown",
        "title": "directCurrentOffset"
      },
      "index": {
        "description": "Requires finite length This is identical to the arithmetic mean",
        "hierarchy": "Synthesizer Plain Analysis",
        "module": "Synthesizer.Plain.Analysis",
        "name": "directCurrentOffset",
        "normalized": "T a-\u003ea",
        "package": "synthesizer",
        "partial": "Current Offset",
        "signature": "T y-\u003ey"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Analysis.html#v:firstMoment",
      "description": {
        "fct-module": "Synthesizer.Plain.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "T y -\u003e y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Analysis.html#firstMoment",
        "fct-type": "unknown",
        "title": "firstMoment"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Analysis",
        "module": "Synthesizer.Plain.Analysis",
        "name": "firstMoment",
        "normalized": "T a-\u003ea",
        "package": "synthesizer",
        "partial": "Moment",
        "signature": "T y-\u003ey"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Analysis.html#v:flipFlopHysteresis",
      "description": {
        "fct-descr": "Detect thresholds with a hysteresis.\n",
        "fct-module": "Synthesizer.Plain.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "(y, y) -\u003e BinaryLevel -\u003e T y -\u003e T BinaryLevel",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Analysis.html#flipFlopHysteresis",
        "fct-type": "unknown",
        "title": "flipFlopHysteresis"
      },
      "index": {
        "description": "Detect thresholds with hysteresis",
        "hierarchy": "Synthesizer Plain Analysis",
        "module": "Synthesizer.Plain.Analysis",
        "name": "flipFlopHysteresis",
        "normalized": "(a,a)-\u003eBinaryLevel-\u003eT a-\u003eT BinaryLevel",
        "package": "synthesizer",
        "partial": "Flop Hysteresis",
        "signature": "(y,y)-\u003eBinaryLevel-\u003eT y-\u003eT BinaryLevel"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Analysis.html#v:histogramDiscreteArray",
      "description": {
        "fct-descr": "Input list must be finite.\nList is scanned twice, but counting may be faster.\n",
        "fct-module": "Synthesizer.Plain.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "T Int -\u003e (Int, T Int)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Analysis.html#histogramDiscreteArray",
        "fct-type": "unknown",
        "title": "histogramDiscreteArray"
      },
      "index": {
        "description": "Input list must be finite List is scanned twice but counting may be faster",
        "hierarchy": "Synthesizer Plain Analysis",
        "module": "Synthesizer.Plain.Analysis",
        "name": "histogramDiscreteArray",
        "normalized": "T Int-\u003e(Int,T Int)",
        "package": "synthesizer",
        "partial": "Discrete Array",
        "signature": "T Int-\u003e(Int,T Int)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Analysis.html#v:histogramDiscreteIntMap",
      "description": {
        "fct-descr": "Input list must be finite.\nIf the input signal is empty, the offset is \u003ctt\u003eundefined\u003c/tt\u003e.\nList is scanned once, counting may be slower.\n",
        "fct-module": "Synthesizer.Plain.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "T Int -\u003e (Int, T Int)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Analysis.html#histogramDiscreteIntMap",
        "fct-type": "unknown",
        "title": "histogramDiscreteIntMap"
      },
      "index": {
        "description": "Input list must be finite If the input signal is empty the offset is undefined List is scanned once counting may be slower",
        "hierarchy": "Synthesizer Plain Analysis",
        "module": "Synthesizer.Plain.Analysis",
        "name": "histogramDiscreteIntMap",
        "normalized": "T Int-\u003e(Int,T Int)",
        "package": "synthesizer",
        "partial": "Discrete Int Map",
        "signature": "T Int-\u003e(Int,T Int)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Analysis.html#v:histogramIntMap",
      "description": {
        "fct-module": "Synthesizer.Plain.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "y -\u003e T y -\u003e (Int, T Int)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Analysis.html#histogramIntMap",
        "fct-type": "unknown",
        "title": "histogramIntMap"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Analysis",
        "module": "Synthesizer.Plain.Analysis",
        "name": "histogramIntMap",
        "normalized": "a-\u003eT a-\u003e(Int,T Int)",
        "package": "synthesizer",
        "partial": "Int Map",
        "signature": "y-\u003eT y-\u003e(Int,T Int)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Analysis.html#v:histogramLinearArray",
      "description": {
        "fct-descr": "Input list must be finite.\nIf the input signal is empty, the offset is \u003ctt\u003eundefined\u003c/tt\u003e.\nList is scanned twice, but counting may be faster.\nThe sum of all histogram values is one less than the length of the signal.\n",
        "fct-module": "Synthesizer.Plain.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "T y -\u003e (Int, T y)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Analysis.html#histogramLinearArray",
        "fct-type": "unknown",
        "title": "histogramLinearArray"
      },
      "index": {
        "description": "Input list must be finite If the input signal is empty the offset is undefined List is scanned twice but counting may be faster The sum of all histogram values is one less than the length of the signal",
        "hierarchy": "Synthesizer Plain Analysis",
        "module": "Synthesizer.Plain.Analysis",
        "name": "histogramLinearArray",
        "normalized": "T a-\u003e(Int,T a)",
        "package": "synthesizer",
        "partial": "Linear Array",
        "signature": "T y-\u003e(Int,T y)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Analysis.html#v:histogramLinearIntMap",
      "description": {
        "fct-module": "Synthesizer.Plain.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "T y -\u003e (Int, T y)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Analysis.html#histogramLinearIntMap",
        "fct-type": "unknown",
        "title": "histogramLinearIntMap"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Analysis",
        "module": "Synthesizer.Plain.Analysis",
        "name": "histogramLinearIntMap",
        "normalized": "T a-\u003e(Int,T a)",
        "package": "synthesizer",
        "partial": "Linear Int Map",
        "signature": "T y-\u003e(Int,T y)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Analysis.html#v:meanValues",
      "description": {
        "fct-module": "Synthesizer.Plain.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "T y -\u003e [(Int, y)]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Analysis.html#meanValues",
        "fct-type": "unknown",
        "title": "meanValues"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Analysis",
        "module": "Synthesizer.Plain.Analysis",
        "name": "meanValues",
        "normalized": "T a-\u003e[(Int,a)]",
        "package": "synthesizer",
        "partial": "Values",
        "signature": "T y-\u003e[(Int,y)]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Analysis.html#v:quantize",
      "description": {
        "fct-module": "Synthesizer.Plain.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "y -\u003e T y -\u003e T Int",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Analysis.html#quantize",
        "fct-type": "unknown",
        "title": "quantize"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Analysis",
        "module": "Synthesizer.Plain.Analysis",
        "name": "quantize",
        "normalized": "a-\u003eT a-\u003eT Int",
        "package": "synthesizer",
        "partial": "",
        "signature": "y-\u003eT y-\u003eT Int"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Analysis.html#v:rectify",
      "description": {
        "fct-module": "Synthesizer.Plain.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "T y -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Analysis.html#rectify",
        "fct-type": "unknown",
        "title": "rectify"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Analysis",
        "module": "Synthesizer.Plain.Analysis",
        "name": "rectify",
        "normalized": "T a-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "T y-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Analysis.html#v:scalarProduct",
      "description": {
        "fct-module": "Synthesizer.Plain.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "T y -\u003e T y -\u003e y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Analysis.html#scalarProduct",
        "fct-type": "unknown",
        "title": "scalarProduct"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Analysis",
        "module": "Synthesizer.Plain.Analysis",
        "name": "scalarProduct",
        "normalized": "T a-\u003eT a-\u003ea",
        "package": "synthesizer",
        "partial": "Product",
        "signature": "T y-\u003eT y-\u003ey"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Analysis.html#v:spread",
      "description": {
        "fct-module": "Synthesizer.Plain.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "(y, y) -\u003e [(Int, y)]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Analysis.html#spread",
        "fct-type": "unknown",
        "title": "spread"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Analysis",
        "module": "Synthesizer.Plain.Analysis",
        "name": "spread",
        "normalized": "(a,a)-\u003e[(Int,a)]",
        "package": "synthesizer",
        "partial": "",
        "signature": "(y,y)-\u003e[(Int,y)]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Analysis.html#v:volumeEuclidean",
      "description": {
        "fct-descr": "Volume based on Energy norm.\n",
        "fct-module": "Synthesizer.Plain.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "T y -\u003e y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Analysis.html#volumeEuclidean",
        "fct-type": "unknown",
        "title": "volumeEuclidean"
      },
      "index": {
        "description": "Volume based on Energy norm",
        "hierarchy": "Synthesizer Plain Analysis",
        "module": "Synthesizer.Plain.Analysis",
        "name": "volumeEuclidean",
        "normalized": "T a-\u003ea",
        "package": "synthesizer",
        "partial": "Euclidean",
        "signature": "T y-\u003ey"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Analysis.html#v:volumeEuclideanSqr",
      "description": {
        "fct-module": "Synthesizer.Plain.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "T y -\u003e y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Analysis.html#volumeEuclideanSqr",
        "fct-type": "unknown",
        "title": "volumeEuclideanSqr"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Analysis",
        "module": "Synthesizer.Plain.Analysis",
        "name": "volumeEuclideanSqr",
        "normalized": "T a-\u003ea",
        "package": "synthesizer",
        "partial": "Euclidean Sqr",
        "signature": "T y-\u003ey"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Analysis.html#v:volumeMaximum",
      "description": {
        "fct-descr": "Volume based on Manhattan norm.\n",
        "fct-module": "Synthesizer.Plain.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "T y -\u003e y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Analysis.html#volumeMaximum",
        "fct-type": "unknown",
        "title": "volumeMaximum"
      },
      "index": {
        "description": "Volume based on Manhattan norm",
        "hierarchy": "Synthesizer Plain Analysis",
        "module": "Synthesizer.Plain.Analysis",
        "name": "volumeMaximum",
        "normalized": "T a-\u003ea",
        "package": "synthesizer",
        "partial": "Maximum",
        "signature": "T y-\u003ey"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Analysis.html#v:volumeSum",
      "description": {
        "fct-descr": "Volume based on Sum norm.\n",
        "fct-module": "Synthesizer.Plain.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "T y -\u003e y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Analysis.html#volumeSum",
        "fct-type": "unknown",
        "title": "volumeSum"
      },
      "index": {
        "description": "Volume based on Sum norm",
        "hierarchy": "Synthesizer Plain Analysis",
        "module": "Synthesizer.Plain.Analysis",
        "name": "volumeSum",
        "normalized": "T a-\u003ea",
        "package": "synthesizer",
        "partial": "Sum",
        "signature": "T y-\u003ey"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Analysis.html#v:volumeVectorEuclidean",
      "description": {
        "fct-descr": "Volume based on Energy norm.\n",
        "fct-module": "Synthesizer.Plain.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "T yv -\u003e y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Analysis.html#volumeVectorEuclidean",
        "fct-type": "unknown",
        "title": "volumeVectorEuclidean"
      },
      "index": {
        "description": "Volume based on Energy norm",
        "hierarchy": "Synthesizer Plain Analysis",
        "module": "Synthesizer.Plain.Analysis",
        "name": "volumeVectorEuclidean",
        "normalized": "T a-\u003eb",
        "package": "synthesizer",
        "partial": "Vector Euclidean",
        "signature": "T yv-\u003ey"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Analysis.html#v:volumeVectorEuclideanSqr",
      "description": {
        "fct-module": "Synthesizer.Plain.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "T yv -\u003e y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Analysis.html#volumeVectorEuclideanSqr",
        "fct-type": "unknown",
        "title": "volumeVectorEuclideanSqr"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Analysis",
        "module": "Synthesizer.Plain.Analysis",
        "name": "volumeVectorEuclideanSqr",
        "normalized": "T a-\u003eb",
        "package": "synthesizer",
        "partial": "Vector Euclidean Sqr",
        "signature": "T yv-\u003ey"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Analysis.html#v:volumeVectorMaximum",
      "description": {
        "fct-descr": "Volume based on Manhattan norm.\n",
        "fct-module": "Synthesizer.Plain.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "T yv -\u003e y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Analysis.html#volumeVectorMaximum",
        "fct-type": "unknown",
        "title": "volumeVectorMaximum"
      },
      "index": {
        "description": "Volume based on Manhattan norm",
        "hierarchy": "Synthesizer Plain Analysis",
        "module": "Synthesizer.Plain.Analysis",
        "name": "volumeVectorMaximum",
        "normalized": "T a-\u003eb",
        "package": "synthesizer",
        "partial": "Vector Maximum",
        "signature": "T yv-\u003ey"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Analysis.html#v:volumeVectorSum",
      "description": {
        "fct-descr": "Volume based on Sum norm.\n",
        "fct-module": "Synthesizer.Plain.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "T yv -\u003e y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Analysis.html#volumeVectorSum",
        "fct-type": "unknown",
        "title": "volumeVectorSum"
      },
      "index": {
        "description": "Volume based on Sum norm",
        "hierarchy": "Synthesizer Plain Analysis",
        "module": "Synthesizer.Plain.Analysis",
        "name": "volumeVectorSum",
        "normalized": "T a-\u003eb",
        "package": "synthesizer",
        "partial": "Vector Sum",
        "signature": "T yv-\u003ey"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Analysis.html#v:zeros",
      "description": {
        "fct-descr": "\u003cp\u003eDetects zeros (sign changes) in a signal.\nThis can be used as a simple measure of the portion\nof high frequencies or noise in the signal.\nIt ca be used as voiced/unvoiced detector in a vocoder.\n\u003c/p\u003e\u003cp\u003e\u003ctt\u003ezeros x !! n\u003c/tt\u003e is \u003ctt\u003eTrue\u003c/tt\u003e if and only if\n\u003ctt\u003e(x !! n \u003e= 0) /= (x !! (n+1) \u003e= 0)\u003c/tt\u003e.\nThe result will be one value shorter than the input.\n\u003c/p\u003e",
        "fct-module": "Synthesizer.Plain.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "T y -\u003e T Bool",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Analysis.html#zeros",
        "fct-type": "unknown",
        "title": "zeros"
      },
      "index": {
        "description": "Detects zeros sign changes in signal This can be used as simple measure of the portion of high frequencies or noise in the signal It ca be used as voiced unvoiced detector in vocoder zeros is True if and only if The result will be one value shorter than the input",
        "hierarchy": "Synthesizer Plain Analysis",
        "module": "Synthesizer.Plain.Analysis",
        "name": "zeros",
        "normalized": "T a-\u003eT Bool",
        "package": "synthesizer",
        "partial": "",
        "signature": "T y-\u003eT Bool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Builder.html#t:Put",
      "description": {
        "fct-module": "Synthesizer.Plain.Builder",
        "fct-package": "synthesizer",
        "fct-signature": "type",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Builder.html#Put",
        "fct-type": "unknown",
        "title": "Put"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Builder",
        "module": "Synthesizer.Plain.Builder",
        "name": "Put",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Put",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Builder.html#t:T",
      "description": {
        "fct-module": "Synthesizer.Plain.Builder",
        "fct-package": "synthesizer",
        "fct-signature": "data",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Builder.html#T",
        "fct-type": "unknown",
        "title": "T"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Builder",
        "module": "Synthesizer.Plain.Builder",
        "name": "T",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Builder.html#v:put",
      "description": {
        "fct-module": "Synthesizer.Plain.Builder",
        "fct-package": "synthesizer",
        "fct-signature": "Put a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Builder.html#put",
        "fct-type": "unknown",
        "title": "put"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Builder",
        "module": "Synthesizer.Plain.Builder",
        "name": "put",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Builder.html#v:run",
      "description": {
        "fct-module": "Synthesizer.Plain.Builder",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e [a]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Builder.html#run",
        "fct-type": "unknown",
        "title": "run"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Builder",
        "module": "Synthesizer.Plain.Builder",
        "name": "run",
        "normalized": "T a-\u003e[a]",
        "package": "synthesizer",
        "partial": "",
        "signature": "T a-\u003e[a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Builder.html#v:signalToBinary",
      "description": {
        "fct-module": "Synthesizer.Plain.Builder",
        "fct-package": "synthesizer",
        "fct-signature": "[v] -\u003e [int]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Builder.html#signalToBinary",
        "fct-type": "unknown",
        "title": "signalToBinary"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Builder",
        "module": "Synthesizer.Plain.Builder",
        "name": "signalToBinary",
        "normalized": "[a]-\u003e[b]",
        "package": "synthesizer",
        "partial": "To Binary",
        "signature": "[v]-\u003e[int]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Builder.html#v:signalToBinaryMono",
      "description": {
        "fct-module": "Synthesizer.Plain.Builder",
        "fct-package": "synthesizer",
        "fct-signature": "[a] -\u003e [int]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Builder.html#signalToBinaryMono",
        "fct-type": "unknown",
        "title": "signalToBinaryMono"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Builder",
        "module": "Synthesizer.Plain.Builder",
        "name": "signalToBinaryMono",
        "normalized": "[a]-\u003e[b]",
        "package": "synthesizer",
        "partial": "To Binary Mono",
        "signature": "[a]-\u003e[int]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Builder.html#v:signalToBinaryStereo",
      "description": {
        "fct-module": "Synthesizer.Plain.Builder",
        "fct-package": "synthesizer",
        "fct-signature": "[(a, a)] -\u003e [int]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Builder.html#signalToBinaryStereo",
        "fct-type": "unknown",
        "title": "signalToBinaryStereo"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Builder",
        "module": "Synthesizer.Plain.Builder",
        "name": "signalToBinaryStereo",
        "normalized": "[(a,a)]-\u003e[b]",
        "package": "synthesizer",
        "partial": "To Binary Stereo",
        "signature": "[(a,a)]-\u003e[int]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Control.html#t:Control",
      "description": {
        "fct-module": "Synthesizer.Plain.Control",
        "fct-package": "synthesizer",
        "fct-signature": "data",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Control.html#Control",
        "fct-type": "unknown",
        "title": "Control"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Control",
        "module": "Synthesizer.Plain.Control",
        "name": "Control",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Control",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Control.html#t:ControlDist",
      "description": {
        "fct-module": "Synthesizer.Plain.Control",
        "fct-package": "synthesizer",
        "fct-signature": "type",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Control.html#ControlDist",
        "fct-type": "unknown",
        "title": "ControlDist"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Control",
        "module": "Synthesizer.Plain.Control",
        "name": "ControlDist",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Control Dist",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Control.html#t:ControlPiece",
      "description": {
        "fct-module": "Synthesizer.Plain.Control",
        "fct-package": "synthesizer",
        "fct-signature": "data",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Control.html#ControlPiece",
        "fct-type": "unknown",
        "title": "ControlPiece"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Control",
        "module": "Synthesizer.Plain.Control",
        "name": "ControlPiece",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Control Piece",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Control.html#t:PieceRightDouble",
      "description": {
        "fct-module": "Synthesizer.Plain.Control",
        "fct-package": "synthesizer",
        "fct-signature": "newtype",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Control.html#PieceRightDouble",
        "fct-type": "unknown",
        "title": "PieceRightDouble"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Control",
        "module": "Synthesizer.Plain.Control",
        "name": "PieceRightDouble",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Piece Right Double",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Control.html#t:PieceRightSingle",
      "description": {
        "fct-module": "Synthesizer.Plain.Control",
        "fct-package": "synthesizer",
        "fct-signature": "newtype",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Control.html#PieceRightSingle",
        "fct-type": "unknown",
        "title": "PieceRightSingle"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Control",
        "module": "Synthesizer.Plain.Control",
        "name": "PieceRightSingle",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Piece Right Single",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Control.html#v:#|",
      "description": {
        "fct-module": "Synthesizer.Plain.Control",
        "fct-package": "synthesizer",
        "fct-signature": "(y, Control y) -\u003e y -\u003e (ControlDist y, [ControlPiece y])",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Control.html#%23%7C",
        "fct-type": "unknown",
        "title": "#|"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Control",
        "module": "Synthesizer.Plain.Control",
        "name": "#|",
        "normalized": "(a,Control a)-\u003ea-\u003e(ControlDist a,[ControlPiece a])",
        "package": "synthesizer",
        "partial": "",
        "signature": "(y,Control y)-\u003ey-\u003e(ControlDist y,[ControlPiece y])"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Control.html#v:#|-",
      "description": {
        "fct-descr": "\u003cp\u003eThe 6 operators simplify constructing a list of \u003ctt\u003eControlPiece a\u003c/tt\u003e.\nThe description consists of nodes (namely the curve values at nodes)\nand the connecting curve types.\nThe naming scheme is as follows:\nIn the middle there is a bar \u003ctt\u003e|\u003c/tt\u003e.\nWith respect to the bar,\nthe pad symbol \u003ctt\u003e#\u003c/tt\u003e is at the side of the curve type,\nat the other side there is nothing, a minus sign \u003ctt\u003e-\u003c/tt\u003e, or an equality sign \u003ctt\u003e=\u003c/tt\u003e.\n\u003c/p\u003e\u003col\u003e\u003cli\u003e Nothing means that here is the start or the end node of a curve.\n\u003c/li\u003e\u003cli\u003e Minus means that here is a node where left and right curve meet at the same value.\n     The node description is thus one value.\n\u003c/li\u003e\u003cli\u003e Equality sign means that here is a split node,\n     where left and right curve might have different ending and beginning values, respectively.\n     The node description consists of a pair of values.\n\u003c/li\u003e\u003c/ol\u003e",
        "fct-module": "Synthesizer.Plain.Control",
        "fct-package": "synthesizer",
        "fct-signature": "(y, Control y) -\u003e (PieceRightSingle y, [ControlPiece y]) -\u003e (ControlDist y, [ControlPiece y])",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Control.html#%23%7C-",
        "fct-type": "unknown",
        "title": "#|-"
      },
      "index": {
        "description": "The operators simplify constructing list of ControlPiece The description consists of nodes namely the curve values at nodes and the connecting curve types The naming scheme is as follows In the middle there is bar With respect to the bar the pad symbol is at the side of the curve type at the other side there is nothing minus sign or an equality sign Nothing means that here is the start or the end node of curve Minus means that here is node where left and right curve meet at the same value The node description is thus one value Equality sign means that here is split node where left and right curve might have different ending and beginning values respectively The node description consists of pair of values",
        "hierarchy": "Synthesizer Plain Control",
        "module": "Synthesizer.Plain.Control",
        "name": "#|-",
        "normalized": "(a,Control a)-\u003e(PieceRightSingle a,[ControlPiece a])-\u003e(ControlDist a,[ControlPiece a])",
        "package": "synthesizer",
        "partial": "",
        "signature": "(y,Control y)-\u003e(PieceRightSingle y,[ControlPiece y])-\u003e(ControlDist y,[ControlPiece y])"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Control.html#v:#|=",
      "description": {
        "fct-module": "Synthesizer.Plain.Control",
        "fct-package": "synthesizer",
        "fct-signature": "(y, Control y) -\u003e (PieceRightDouble y, [ControlPiece y]) -\u003e (ControlDist y, [ControlPiece y])",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Control.html#%23%7C%3D",
        "fct-type": "unknown",
        "title": "#|="
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Control",
        "module": "Synthesizer.Plain.Control",
        "name": "#|=",
        "normalized": "(a,Control a)-\u003e(PieceRightDouble a,[ControlPiece a])-\u003e(ControlDist a,[ControlPiece a])",
        "package": "synthesizer",
        "partial": "",
        "signature": "(y,Control y)-\u003e(PieceRightDouble y,[ControlPiece y])-\u003e(ControlDist y,[ControlPiece y])"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Control.html#v:-|#",
      "description": {
        "fct-module": "Synthesizer.Plain.Control",
        "fct-package": "synthesizer",
        "fct-signature": "y -\u003e (ControlDist y, [ControlPiece y]) -\u003e (PieceRightSingle y, [ControlPiece y])",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Control.html#-%7C%23",
        "fct-type": "unknown",
        "title": "-|#"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Control",
        "module": "Synthesizer.Plain.Control",
        "name": "-|#",
        "normalized": "a-\u003e(ControlDist a,[ControlPiece a])-\u003e(PieceRightSingle a,[ControlPiece a])",
        "package": "synthesizer",
        "partial": "",
        "signature": "y-\u003e(ControlDist y,[ControlPiece y])-\u003e(PieceRightSingle y,[ControlPiece y])"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Control.html#v:=|#",
      "description": {
        "fct-module": "Synthesizer.Plain.Control",
        "fct-package": "synthesizer",
        "fct-signature": "(y, y) -\u003e (ControlDist y, [ControlPiece y]) -\u003e (PieceRightDouble y, [ControlPiece y])",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Control.html#%3D%7C%23",
        "fct-type": "unknown",
        "title": "=|#"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Control",
        "module": "Synthesizer.Plain.Control",
        "name": "=|#",
        "normalized": "(a,a)-\u003e(ControlDist a,[ControlPiece a])-\u003e(PieceRightDouble a,[ControlPiece a])",
        "package": "synthesizer",
        "partial": "",
        "signature": "(y,y)-\u003e(ControlDist y,[ControlPiece y])-\u003e(PieceRightDouble y,[ControlPiece y])"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Control.html#v:concatMapPair",
      "description": {
        "fct-module": "Synthesizer.Plain.Control",
        "fct-package": "synthesizer",
        "fct-signature": "(a -\u003e (b, b)) -\u003e T a -\u003e T b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Control.html#concatMapPair",
        "fct-type": "unknown",
        "title": "concatMapPair"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Control",
        "module": "Synthesizer.Plain.Control",
        "name": "concatMapPair",
        "normalized": "(a-\u003e(b,b))-\u003eT a-\u003eT b",
        "package": "synthesizer",
        "partial": "Map Pair",
        "signature": "(a-\u003e(b,b))-\u003eT a-\u003eT b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Control.html#v:concatMapPair'",
      "description": {
        "fct-module": "Synthesizer.Plain.Control",
        "fct-package": "synthesizer",
        "fct-signature": "(a -\u003e (b, b)) -\u003e T a -\u003e T b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Control.html#concatMapPair%27",
        "fct-type": "unknown",
        "title": "concatMapPair'"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Control",
        "module": "Synthesizer.Plain.Control",
        "name": "concatMapPair'",
        "normalized": "(a-\u003e(b,b))-\u003eT a-\u003eT b",
        "package": "synthesizer",
        "partial": "Map Pair'",
        "signature": "(a-\u003e(b,b))-\u003eT a-\u003eT b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Control.html#v:constant",
      "description": {
        "fct-module": "Synthesizer.Plain.Control",
        "fct-package": "synthesizer",
        "fct-signature": "y -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Control.html#constant",
        "fct-type": "unknown",
        "title": "constant"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Control",
        "module": "Synthesizer.Plain.Control",
        "name": "constant",
        "normalized": "a-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "y-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Control.html#v:cosine",
      "description": {
        "fct-descr": "time t0 where  1 is approached \ntime t1 where -1 is approached \na cosine wave where one half wave is between t0 and t1 \n",
        "fct-module": "Synthesizer.Plain.Control",
        "fct-package": "synthesizer",
        "fct-signature": "y-\u003e y-\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Control.html#cosine",
        "fct-type": "unknown",
        "title": "cosine"
      },
      "index": {
        "description": "time t0 where is approached time t1 where is approached cosine wave where one half wave is between t0 and t1",
        "hierarchy": "Synthesizer Plain Control",
        "module": "Synthesizer.Plain.Control",
        "name": "cosine",
        "normalized": "a-\u003ea-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "y-\u003ey-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Control.html#v:cosineMultiscale",
      "description": {
        "fct-descr": "time t0 where  1 is approached \ntime t1 where -1 is approached \na cosine wave where one half wave is between t0 and t1 \n",
        "fct-module": "Synthesizer.Plain.Control",
        "fct-package": "synthesizer",
        "fct-signature": "y-\u003e y-\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Control.html#cosineMultiscale",
        "fct-type": "unknown",
        "title": "cosineMultiscale"
      },
      "index": {
        "description": "time t0 where is approached time t1 where is approached cosine wave where one half wave is between t0 and t1",
        "hierarchy": "Synthesizer Plain Control",
        "module": "Synthesizer.Plain.Control",
        "name": "cosineMultiscale",
        "normalized": "a-\u003ea-\u003eT a",
        "package": "synthesizer",
        "partial": "Multiscale",
        "signature": "y-\u003ey-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Control.html#v:cosineStable",
      "description": {
        "fct-descr": "time t0 where  1 is approached \ntime t1 where -1 is approached \na cosine wave where one half wave is between t0 and t1 \n",
        "fct-module": "Synthesizer.Plain.Control",
        "fct-package": "synthesizer",
        "fct-signature": "y-\u003e y-\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Control.html#cosineStable",
        "fct-type": "unknown",
        "title": "cosineStable"
      },
      "index": {
        "description": "time t0 where is approached time t1 where is approached cosine wave where one half wave is between t0 and t1",
        "hierarchy": "Synthesizer Plain Control",
        "module": "Synthesizer.Plain.Control",
        "name": "cosineStable",
        "normalized": "a-\u003ea-\u003eT a",
        "package": "synthesizer",
        "partial": "Stable",
        "signature": "y-\u003ey-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Control.html#v:cosineSubdiv",
      "description": {
        "fct-descr": "time t0 where  1 is approached \ntime t1 where -1 is approached \na cosine wave where one half wave is between t0 and t1 \n",
        "fct-module": "Synthesizer.Plain.Control",
        "fct-package": "synthesizer",
        "fct-signature": "y-\u003e y-\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Control.html#cosineSubdiv",
        "fct-type": "unknown",
        "title": "cosineSubdiv"
      },
      "index": {
        "description": "time t0 where is approached time t1 where is approached cosine wave where one half wave is between t0 and t1",
        "hierarchy": "Synthesizer Plain Control",
        "module": "Synthesizer.Plain.Control",
        "name": "cosineSubdiv",
        "normalized": "a-\u003ea-\u003eT a",
        "package": "synthesizer",
        "partial": "Subdiv",
        "signature": "y-\u003ey-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Control.html#v:cosineSubdivision",
      "description": {
        "fct-module": "Synthesizer.Plain.Control",
        "fct-package": "synthesizer",
        "fct-signature": "y -\u003e T y -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Control.html#cosineSubdivision",
        "fct-type": "unknown",
        "title": "cosineSubdivision"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Control",
        "module": "Synthesizer.Plain.Control",
        "name": "cosineSubdivision",
        "normalized": "a-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "Subdivision",
        "signature": "y-\u003eT y-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Control.html#v:cosineWithSlope",
      "description": {
        "fct-module": "Synthesizer.Plain.Control",
        "fct-package": "synthesizer",
        "fct-signature": "(y -\u003e y -\u003e signal) -\u003e y -\u003e y -\u003e signal",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Control.html#cosineWithSlope",
        "fct-type": "unknown",
        "title": "cosineWithSlope"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Control",
        "module": "Synthesizer.Plain.Control",
        "name": "cosineWithSlope",
        "normalized": "(a-\u003ea-\u003eb)-\u003ea-\u003ea-\u003eb",
        "package": "synthesizer",
        "partial": "With Slope",
        "signature": "(y-\u003ey-\u003esignal)-\u003ey-\u003ey-\u003esignal"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Control.html#v:cubicFunc",
      "description": {
        "fct-descr": "0                                     16\n0               8                     16\n0       4       8         12          16\n0   2   4   6   8   10    12    14    16\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\n",
        "fct-module": "Synthesizer.Plain.Control",
        "fct-package": "synthesizer",
        "fct-signature": "(y, (y, y)) -\u003e (y, (y, y)) -\u003e y -\u003e y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Control.html#cubicFunc",
        "fct-type": "unknown",
        "title": "cubicFunc"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Control",
        "module": "Synthesizer.Plain.Control",
        "name": "cubicFunc",
        "normalized": "(a,(a,a))-\u003e(a,(a,a))-\u003ea-\u003ea",
        "package": "synthesizer",
        "partial": "Func",
        "signature": "(y,(y,y))-\u003e(y,(y,y))-\u003ey-\u003ey"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Control.html#v:cubicHermite",
      "description": {
        "fct-module": "Synthesizer.Plain.Control",
        "fct-package": "synthesizer",
        "fct-signature": "(y, (y, y)) -\u003e (y, (y, y)) -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Control.html#cubicHermite",
        "fct-type": "unknown",
        "title": "cubicHermite"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Control",
        "module": "Synthesizer.Plain.Control",
        "name": "cubicHermite",
        "normalized": "(a,(a,a))-\u003e(a,(a,a))-\u003eT a",
        "package": "synthesizer",
        "partial": "Hermite",
        "signature": "(y,(y,y))-\u003e(y,(y,y))-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Control.html#v:cubicHermiteStable",
      "description": {
        "fct-module": "Synthesizer.Plain.Control",
        "fct-package": "synthesizer",
        "fct-signature": "(y, (y, y)) -\u003e (y, (y, y)) -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Control.html#cubicHermiteStable",
        "fct-type": "unknown",
        "title": "cubicHermiteStable"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Control",
        "module": "Synthesizer.Plain.Control",
        "name": "cubicHermiteStable",
        "normalized": "(a,(a,a))-\u003e(a,(a,a))-\u003eT a",
        "package": "synthesizer",
        "partial": "Hermite Stable",
        "signature": "(y,(y,y))-\u003e(y,(y,y))-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Control.html#v:cubicSubdivision",
      "description": {
        "fct-module": "Synthesizer.Plain.Control",
        "fct-package": "synthesizer",
        "fct-signature": "T y -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Control.html#cubicSubdivision",
        "fct-type": "unknown",
        "title": "cubicSubdivision"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Control",
        "module": "Synthesizer.Plain.Control",
        "name": "cubicSubdivision",
        "normalized": "T a-\u003eT a",
        "package": "synthesizer",
        "partial": "Subdivision",
        "signature": "T y-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Control.html#v:curveMultiscale",
      "description": {
        "fct-module": "Synthesizer.Plain.Control",
        "fct-package": "synthesizer",
        "fct-signature": "(y -\u003e y -\u003e y) -\u003e y -\u003e y -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Control.html#curveMultiscale",
        "fct-type": "unknown",
        "title": "curveMultiscale"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Control",
        "module": "Synthesizer.Plain.Control",
        "name": "curveMultiscale",
        "normalized": "(a-\u003ea-\u003ea)-\u003ea-\u003ea-\u003eT a",
        "package": "synthesizer",
        "partial": "Multiscale",
        "signature": "(y-\u003ey-\u003ey)-\u003ey-\u003ey-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Control.html#v:curveMultiscaleNeutral",
      "description": {
        "fct-module": "Synthesizer.Plain.Control",
        "fct-package": "synthesizer",
        "fct-signature": "(y -\u003e y -\u003e y) -\u003e y -\u003e y -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Control.html#curveMultiscaleNeutral",
        "fct-type": "unknown",
        "title": "curveMultiscaleNeutral"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Control",
        "module": "Synthesizer.Plain.Control",
        "name": "curveMultiscaleNeutral",
        "normalized": "(a-\u003ea-\u003ea)-\u003ea-\u003ea-\u003eT a",
        "package": "synthesizer",
        "partial": "Multiscale Neutral",
        "signature": "(y-\u003ey-\u003ey)-\u003ey-\u003ey-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Control.html#v:curveStable",
      "description": {
        "fct-module": "Synthesizer.Plain.Control",
        "fct-package": "synthesizer",
        "fct-signature": "(t -\u003e y) -\u003e (y -\u003e y -\u003e y) -\u003e t -\u003e y -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Control.html#curveStable",
        "fct-type": "unknown",
        "title": "curveStable"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Control",
        "module": "Synthesizer.Plain.Control",
        "name": "curveStable",
        "normalized": "(a-\u003eb)-\u003e(b-\u003eb-\u003eb)-\u003ea-\u003eb-\u003eT b",
        "package": "synthesizer",
        "partial": "Stable",
        "signature": "(t-\u003ey)-\u003e(y-\u003ey-\u003ey)-\u003et-\u003ey-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Control.html#v:double",
      "description": {
        "fct-module": "Synthesizer.Plain.Control",
        "fct-package": "synthesizer",
        "fct-signature": "t -\u003e t",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Control.html#double",
        "fct-type": "unknown",
        "title": "double"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Control",
        "module": "Synthesizer.Plain.Control",
        "name": "double",
        "normalized": "a-\u003ea",
        "package": "synthesizer",
        "partial": "",
        "signature": "t-\u003et"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Control.html#v:exponential",
      "description": {
        "fct-descr": "time where the function reaches 1/e of the initial value \ninitial value \nexponential decay \n",
        "fct-module": "Synthesizer.Plain.Control",
        "fct-package": "synthesizer",
        "fct-signature": "y-\u003e y-\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Control.html#exponential",
        "fct-type": "unknown",
        "title": "exponential"
      },
      "index": {
        "description": "time where the function reaches of the initial value initial value exponential decay",
        "hierarchy": "Synthesizer Plain Control",
        "module": "Synthesizer.Plain.Control",
        "name": "exponential",
        "normalized": "a-\u003ea-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "y-\u003ey-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Control.html#v:exponential2",
      "description": {
        "fct-descr": "half life \ninitial value \nexponential decay \n",
        "fct-module": "Synthesizer.Plain.Control",
        "fct-package": "synthesizer",
        "fct-signature": "y-\u003e y-\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Control.html#exponential2",
        "fct-type": "unknown",
        "title": "exponential2"
      },
      "index": {
        "description": "half life initial value exponential decay",
        "hierarchy": "Synthesizer Plain Control",
        "module": "Synthesizer.Plain.Control",
        "name": "exponential2",
        "normalized": "a-\u003ea-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "y-\u003ey-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Control.html#v:exponential2Multiscale",
      "description": {
        "fct-descr": "half life \ninitial value \nexponential decay \n",
        "fct-module": "Synthesizer.Plain.Control",
        "fct-package": "synthesizer",
        "fct-signature": "y-\u003e y-\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Control.html#exponential2Multiscale",
        "fct-type": "unknown",
        "title": "exponential2Multiscale"
      },
      "index": {
        "description": "half life initial value exponential decay",
        "hierarchy": "Synthesizer Plain Control",
        "module": "Synthesizer.Plain.Control",
        "name": "exponential2Multiscale",
        "normalized": "a-\u003ea-\u003eT a",
        "package": "synthesizer",
        "partial": "Multiscale",
        "signature": "y-\u003ey-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Control.html#v:exponential2MultiscaleNeutral",
      "description": {
        "fct-descr": "half life \nexponential decay \n",
        "fct-module": "Synthesizer.Plain.Control",
        "fct-package": "synthesizer",
        "fct-signature": "y-\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Control.html#exponential2MultiscaleNeutral",
        "fct-type": "unknown",
        "title": "exponential2MultiscaleNeutral"
      },
      "index": {
        "description": "half life exponential decay",
        "hierarchy": "Synthesizer Plain Control",
        "module": "Synthesizer.Plain.Control",
        "name": "exponential2MultiscaleNeutral",
        "normalized": "a-\u003eT a",
        "package": "synthesizer",
        "partial": "Multiscale Neutral",
        "signature": "y-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Control.html#v:exponential2Stable",
      "description": {
        "fct-descr": "half life \ninitial value \nexponential decay \n",
        "fct-module": "Synthesizer.Plain.Control",
        "fct-package": "synthesizer",
        "fct-signature": "y-\u003e y-\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Control.html#exponential2Stable",
        "fct-type": "unknown",
        "title": "exponential2Stable"
      },
      "index": {
        "description": "half life initial value exponential decay",
        "hierarchy": "Synthesizer Plain Control",
        "module": "Synthesizer.Plain.Control",
        "name": "exponential2Stable",
        "normalized": "a-\u003ea-\u003eT a",
        "package": "synthesizer",
        "partial": "Stable",
        "signature": "y-\u003ey-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Control.html#v:exponentialFromTo",
      "description": {
        "fct-descr": "time where the function reaches 1/e of the initial value \ninitial value \nvalue after given time \nexponential decay \n",
        "fct-module": "Synthesizer.Plain.Control",
        "fct-package": "synthesizer",
        "fct-signature": "y-\u003e y-\u003e y-\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Control.html#exponentialFromTo",
        "fct-type": "unknown",
        "title": "exponentialFromTo"
      },
      "index": {
        "description": "time where the function reaches of the initial value initial value value after given time exponential decay",
        "hierarchy": "Synthesizer Plain Control",
        "module": "Synthesizer.Plain.Control",
        "name": "exponentialFromTo",
        "normalized": "a-\u003ea-\u003ea-\u003eT a",
        "package": "synthesizer",
        "partial": "From To",
        "signature": "y-\u003ey-\u003ey-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Control.html#v:exponentialFromToMultiscale",
      "description": {
        "fct-descr": "time where the function reaches 1/e of the initial value \ninitial value \nvalue after given time \nexponential decay \n",
        "fct-module": "Synthesizer.Plain.Control",
        "fct-package": "synthesizer",
        "fct-signature": "y-\u003e y-\u003e y-\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Control.html#exponentialFromToMultiscale",
        "fct-type": "unknown",
        "title": "exponentialFromToMultiscale"
      },
      "index": {
        "description": "time where the function reaches of the initial value initial value value after given time exponential decay",
        "hierarchy": "Synthesizer Plain Control",
        "module": "Synthesizer.Plain.Control",
        "name": "exponentialFromToMultiscale",
        "normalized": "a-\u003ea-\u003ea-\u003eT a",
        "package": "synthesizer",
        "partial": "From To Multiscale",
        "signature": "y-\u003ey-\u003ey-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Control.html#v:exponentialMultiscale",
      "description": {
        "fct-descr": "time where the function reaches 1/e of the initial value \ninitial value \nexponential decay \n",
        "fct-module": "Synthesizer.Plain.Control",
        "fct-package": "synthesizer",
        "fct-signature": "y-\u003e y-\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Control.html#exponentialMultiscale",
        "fct-type": "unknown",
        "title": "exponentialMultiscale"
      },
      "index": {
        "description": "time where the function reaches of the initial value initial value exponential decay",
        "hierarchy": "Synthesizer Plain Control",
        "module": "Synthesizer.Plain.Control",
        "name": "exponentialMultiscale",
        "normalized": "a-\u003ea-\u003eT a",
        "package": "synthesizer",
        "partial": "Multiscale",
        "signature": "y-\u003ey-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Control.html#v:exponentialMultiscaleNeutral",
      "description": {
        "fct-descr": "time where the function reaches 1/e of the initial value \nexponential decay \n",
        "fct-module": "Synthesizer.Plain.Control",
        "fct-package": "synthesizer",
        "fct-signature": "y-\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Control.html#exponentialMultiscaleNeutral",
        "fct-type": "unknown",
        "title": "exponentialMultiscaleNeutral"
      },
      "index": {
        "description": "time where the function reaches of the initial value exponential decay",
        "hierarchy": "Synthesizer Plain Control",
        "module": "Synthesizer.Plain.Control",
        "name": "exponentialMultiscaleNeutral",
        "normalized": "a-\u003eT a",
        "package": "synthesizer",
        "partial": "Multiscale Neutral",
        "signature": "y-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Control.html#v:exponentialStable",
      "description": {
        "fct-descr": "time where the function reaches 1/e of the initial value \ninitial value \nexponential decay \n",
        "fct-module": "Synthesizer.Plain.Control",
        "fct-package": "synthesizer",
        "fct-signature": "y-\u003e y-\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Control.html#exponentialStable",
        "fct-type": "unknown",
        "title": "exponentialStable"
      },
      "index": {
        "description": "time where the function reaches of the initial value initial value exponential decay",
        "hierarchy": "Synthesizer Plain Control",
        "module": "Synthesizer.Plain.Control",
        "name": "exponentialStable",
        "normalized": "a-\u003ea-\u003eT a",
        "package": "synthesizer",
        "partial": "Stable",
        "signature": "y-\u003ey-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Control.html#v:exponentialStableGen",
      "description": {
        "fct-module": "Synthesizer.Plain.Control",
        "fct-package": "synthesizer",
        "fct-signature": "(t -\u003e y) -\u003e t -\u003e y -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Control.html#exponentialStableGen",
        "fct-type": "unknown",
        "title": "exponentialStableGen"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Control",
        "module": "Synthesizer.Plain.Control",
        "name": "exponentialStableGen",
        "normalized": "(a-\u003eb)-\u003ea-\u003eb-\u003eT b",
        "package": "synthesizer",
        "partial": "Stable Gen",
        "signature": "(t-\u003ey)-\u003et-\u003ey-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Control.html#v:flattenPairs",
      "description": {
        "fct-module": "Synthesizer.Plain.Control",
        "fct-package": "synthesizer",
        "fct-signature": "T (a, a) -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Control.html#flattenPairs",
        "fct-type": "unknown",
        "title": "flattenPairs"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Control",
        "module": "Synthesizer.Plain.Control",
        "name": "flattenPairs",
        "normalized": "T(a,a)-\u003eT a",
        "package": "synthesizer",
        "partial": "Pairs",
        "signature": "T(a,a)-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Control.html#v:line",
      "description": {
        "fct-descr": "length \ninitial and final value \nlinear progression \n",
        "fct-module": "Synthesizer.Plain.Control",
        "fct-package": "synthesizer",
        "fct-signature": "Int-\u003e (y, y)-\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Control.html#line",
        "fct-type": "unknown",
        "title": "line"
      },
      "index": {
        "description": "length initial and final value linear progression",
        "hierarchy": "Synthesizer Plain Control",
        "module": "Synthesizer.Plain.Control",
        "name": "line",
        "normalized": "Int-\u003e(a,a)-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "Int-\u003e(y,y)-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Control.html#v:linear",
      "description": {
        "fct-descr": "steepness \ninitial value \nlinear progression \n",
        "fct-module": "Synthesizer.Plain.Control",
        "fct-package": "synthesizer",
        "fct-signature": "y-\u003e y-\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Control.html#linear",
        "fct-type": "unknown",
        "title": "linear"
      },
      "index": {
        "description": "steepness initial value linear progression",
        "hierarchy": "Synthesizer Plain Control",
        "module": "Synthesizer.Plain.Control",
        "name": "linear",
        "normalized": "a-\u003ea-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "y-\u003ey-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Control.html#v:linearMean",
      "description": {
        "fct-descr": "\u003cp\u003eIt computes the same like \u003ctt\u003e\u003ca\u003elinear\u003c/a\u003e\u003c/tt\u003e but in a numerically more stable manner,\nnamely using a subdivision scheme.\nThe division needed is a division by two.\n\u003c/p\u003e\u003cp\u003e0       4       8\n0   2   4   6   8\n0 1 2 3 4 5 6 7 8\n\u003c/p\u003e",
        "fct-module": "Synthesizer.Plain.Control",
        "fct-package": "synthesizer",
        "fct-signature": "y -\u003e y -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Control.html#linearMean",
        "fct-type": "unknown",
        "title": "linearMean"
      },
      "index": {
        "description": "It computes the same like linear but in numerically more stable manner namely using subdivision scheme The division needed is division by two",
        "hierarchy": "Synthesizer Plain Control",
        "module": "Synthesizer.Plain.Control",
        "name": "linearMean",
        "normalized": "a-\u003ea-\u003eT a",
        "package": "synthesizer",
        "partial": "Mean",
        "signature": "y-\u003ey-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Control.html#v:linearMultiscale",
      "description": {
        "fct-descr": "Minimize rounding errors by reducing number of operations per element\nto a logarithmuc number.\n",
        "fct-module": "Synthesizer.Plain.Control",
        "fct-package": "synthesizer",
        "fct-signature": "y -\u003e y -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Control.html#linearMultiscale",
        "fct-type": "unknown",
        "title": "linearMultiscale"
      },
      "index": {
        "description": "Minimize rounding errors by reducing number of operations per element to logarithmuc number",
        "hierarchy": "Synthesizer Plain Control",
        "module": "Synthesizer.Plain.Control",
        "name": "linearMultiscale",
        "normalized": "a-\u003ea-\u003eT a",
        "package": "synthesizer",
        "partial": "Multiscale",
        "signature": "y-\u003ey-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Control.html#v:linearMultiscaleNeutral",
      "description": {
        "fct-descr": "Linear curve starting at zero.\n",
        "fct-module": "Synthesizer.Plain.Control",
        "fct-package": "synthesizer",
        "fct-signature": "y -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Control.html#linearMultiscaleNeutral",
        "fct-type": "unknown",
        "title": "linearMultiscaleNeutral"
      },
      "index": {
        "description": "Linear curve starting at zero",
        "hierarchy": "Synthesizer Plain Control",
        "module": "Synthesizer.Plain.Control",
        "name": "linearMultiscaleNeutral",
        "normalized": "a-\u003eT a",
        "package": "synthesizer",
        "partial": "Multiscale Neutral",
        "signature": "y-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Control.html#v:linearStable",
      "description": {
        "fct-descr": "As stable as the addition of time values.\n",
        "fct-module": "Synthesizer.Plain.Control",
        "fct-package": "synthesizer",
        "fct-signature": "y -\u003e y -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Control.html#linearStable",
        "fct-type": "unknown",
        "title": "linearStable"
      },
      "index": {
        "description": "As stable as the addition of time values",
        "hierarchy": "Synthesizer Plain Control",
        "module": "Synthesizer.Plain.Control",
        "name": "linearStable",
        "normalized": "a-\u003ea-\u003eT a",
        "package": "synthesizer",
        "partial": "Stable",
        "signature": "y-\u003ey-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Control.html#v:linearSubdivision",
      "description": {
        "fct-descr": "Intersperse linearly interpolated values. \n",
        "fct-module": "Synthesizer.Plain.Control",
        "fct-package": "synthesizer",
        "fct-signature": "T y -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Control.html#linearSubdivision",
        "fct-type": "unknown",
        "title": "linearSubdivision"
      },
      "index": {
        "description": "Intersperse linearly interpolated values",
        "hierarchy": "Synthesizer Plain Control",
        "module": "Synthesizer.Plain.Control",
        "name": "linearSubdivision",
        "normalized": "T a-\u003eT a",
        "package": "synthesizer",
        "partial": "Subdivision",
        "signature": "T y-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Control.html#v:piecewise",
      "description": {
        "fct-module": "Synthesizer.Plain.Control",
        "fct-package": "synthesizer",
        "fct-signature": "[ControlPiece y] -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Control.html#piecewise",
        "fct-type": "unknown",
        "title": "piecewise"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Control",
        "module": "Synthesizer.Plain.Control",
        "name": "piecewise",
        "normalized": "[ControlPiece a]-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "[ControlPiece y]-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Control.html#v:piecewisePart",
      "description": {
        "fct-module": "Synthesizer.Plain.Control",
        "fct-package": "synthesizer",
        "fct-signature": "y -\u003e y -\u003e y -\u003e y -\u003e Int -\u003e Control y -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Control.html#piecewisePart",
        "fct-type": "unknown",
        "title": "piecewisePart"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Control",
        "module": "Synthesizer.Plain.Control",
        "name": "piecewisePart",
        "normalized": "a-\u003ea-\u003ea-\u003ea-\u003eInt-\u003eControl a-\u003eT a",
        "package": "synthesizer",
        "partial": "Part",
        "signature": "y-\u003ey-\u003ey-\u003ey-\u003eInt-\u003eControl y-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Control.html#v:subdivide",
      "description": {
        "fct-module": "Synthesizer.Plain.Control",
        "fct-package": "synthesizer",
        "fct-signature": "(y -\u003e y -\u003e y) -\u003e T y -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Control.html#subdivide",
        "fct-type": "unknown",
        "title": "subdivide"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Control",
        "module": "Synthesizer.Plain.Control",
        "name": "subdivide",
        "normalized": "(a-\u003ea-\u003ea)-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "(y-\u003ey-\u003ey)-\u003eT y-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Control.html#v:unreachable",
      "description": {
        "fct-module": "Synthesizer.Plain.Control",
        "fct-package": "synthesizer",
        "fct-signature": "a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Control.html#unreachable",
        "fct-type": "unknown",
        "title": "unreachable"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Control",
        "module": "Synthesizer.Plain.Control",
        "name": "unreachable",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Control.html#v:vectorExponential",
      "description": {
        "fct-descr": "time where the function reaches 1/e of the initial value \ninitial value \nexponential decay \n",
        "fct-module": "Synthesizer.Plain.Control",
        "fct-package": "synthesizer",
        "fct-signature": "y-\u003e v-\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Control.html#vectorExponential",
        "fct-type": "unknown",
        "title": "vectorExponential"
      },
      "index": {
        "description": "time where the function reaches of the initial value initial value exponential decay",
        "hierarchy": "Synthesizer Plain Control",
        "module": "Synthesizer.Plain.Control",
        "name": "vectorExponential",
        "normalized": "a-\u003eb-\u003eT b",
        "package": "synthesizer",
        "partial": "Exponential",
        "signature": "y-\u003ev-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Control.html#v:vectorExponential2",
      "description": {
        "fct-descr": "half life \ninitial value \nexponential decay \n",
        "fct-module": "Synthesizer.Plain.Control",
        "fct-package": "synthesizer",
        "fct-signature": "y-\u003e v-\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Control.html#vectorExponential2",
        "fct-type": "unknown",
        "title": "vectorExponential2"
      },
      "index": {
        "description": "half life initial value exponential decay",
        "hierarchy": "Synthesizer Plain Control",
        "module": "Synthesizer.Plain.Control",
        "name": "vectorExponential2",
        "normalized": "a-\u003eb-\u003eT b",
        "package": "synthesizer",
        "partial": "Exponential",
        "signature": "y-\u003ev-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Control.html#v:|#",
      "description": {
        "fct-module": "Synthesizer.Plain.Control",
        "fct-package": "synthesizer",
        "fct-signature": "y -\u003e (ControlDist y, [ControlPiece y]) -\u003e [ControlPiece y]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Control.html#%7C%23",
        "fct-type": "unknown",
        "title": "|#"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Control",
        "module": "Synthesizer.Plain.Control",
        "name": "|#",
        "normalized": "a-\u003e(ControlDist a,[ControlPiece a])-\u003e[ControlPiece a]",
        "package": "synthesizer",
        "partial": "",
        "signature": "y-\u003e(ControlDist y,[ControlPiece y])-\u003e[ControlPiece y]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Cut.html#v:arrange",
      "description": {
        "fct-descr": "A list of pairs: (relative start time, signal part),\n                The start time is relative to the start time\n                of the previous event. \nThe mixed signal. \n",
        "fct-module": "Synthesizer.Plain.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "T Int (T v)-\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Cut.html#arrange",
        "fct-type": "unknown",
        "title": "arrange"
      },
      "index": {
        "description": "list of pairs relative start time signal part The start time is relative to the start time of the previous event The mixed signal",
        "hierarchy": "Synthesizer Plain Cut",
        "module": "Synthesizer.Plain.Cut",
        "name": "arrange",
        "normalized": "T Int(T a)-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "T Int(T v)-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Cut.html#v:select",
      "description": {
        "fct-module": "Synthesizer.Plain.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "Array i (T a) -\u003e T i -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Cut.html#select",
        "fct-type": "unknown",
        "title": "select"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Cut",
        "module": "Synthesizer.Plain.Cut",
        "name": "select",
        "normalized": "Array a(T b)-\u003eT a-\u003eT b",
        "package": "synthesizer",
        "partial": "",
        "signature": "Array i(T a)-\u003eT i-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Cut.html#v:selectBool",
      "description": {
        "fct-module": "Synthesizer.Plain.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "(T a, T a) -\u003e T Bool -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Cut.html#selectBool",
        "fct-type": "unknown",
        "title": "selectBool"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Cut",
        "module": "Synthesizer.Plain.Cut",
        "name": "selectBool",
        "normalized": "(T a,T a)-\u003eT Bool-\u003eT a",
        "package": "synthesizer",
        "partial": "Bool",
        "signature": "(T a,T a)-\u003eT Bool-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Cut.html#v:takeUntilInterval",
      "description": {
        "fct-descr": "Take values until the predicate p holds for n successive values.\nThe list is truncated at the beginning of the interval of matching values.\n",
        "fct-module": "Synthesizer.Plain.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "(a -\u003e Bool) -\u003e Int -\u003e T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Cut.html#takeUntilInterval",
        "fct-type": "unknown",
        "title": "takeUntilInterval"
      },
      "index": {
        "description": "Take values until the predicate holds for successive values The list is truncated at the beginning of the interval of matching values",
        "hierarchy": "Synthesizer Plain Cut",
        "module": "Synthesizer.Plain.Cut",
        "name": "takeUntilInterval",
        "normalized": "(a-\u003eBool)-\u003eInt-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "Until Interval",
        "signature": "(a-\u003eBool)-\u003eInt-\u003eT a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Cut.html#v:takeUntilPause",
      "description": {
        "fct-descr": "Take signal until it falls short of a certain amplitude for a given time.\n",
        "fct-module": "Synthesizer.Plain.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e Int -\u003e T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Cut.html#takeUntilPause",
        "fct-type": "unknown",
        "title": "takeUntilPause"
      },
      "index": {
        "description": "Take signal until it falls short of certain amplitude for given time",
        "hierarchy": "Synthesizer Plain Cut",
        "module": "Synthesizer.Plain.Cut",
        "name": "takeUntilPause",
        "normalized": "a-\u003eInt-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "Until Pause",
        "signature": "a-\u003eInt-\u003eT a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Displacement.html#v:distort",
      "description": {
        "fct-descr": "In \u003ca\u003eSynthesizer.Basic.Distortion\u003c/a\u003e you find a collection\nof appropriate distortion functions.\n",
        "fct-module": "Synthesizer.Plain.Displacement",
        "fct-package": "synthesizer",
        "fct-signature": "(c -\u003e a -\u003e a) -\u003e T c -\u003e T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Displacement.html#distort",
        "fct-type": "unknown",
        "title": "distort"
      },
      "index": {
        "description": "In Synthesizer.Basic.Distortion you find collection of appropriate distortion functions",
        "hierarchy": "Synthesizer Plain Displacement",
        "module": "Synthesizer.Plain.Displacement",
        "name": "distort",
        "normalized": "(a-\u003eb-\u003eb)-\u003eT a-\u003eT b-\u003eT b",
        "package": "synthesizer",
        "partial": "",
        "signature": "(c-\u003ea-\u003ea)-\u003eT c-\u003eT a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Displacement.html#v:mix",
      "description": {
        "fct-descr": "Mix two signals.\n    In opposition to \u003ctt\u003e\u003ca\u003ezipWith\u003c/a\u003e\u003c/tt\u003e the result has the length of the longer signal. \n",
        "fct-module": "Synthesizer.Plain.Displacement",
        "fct-package": "synthesizer",
        "fct-signature": "T v -\u003e T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Displacement.html#mix",
        "fct-type": "unknown",
        "title": "mix"
      },
      "index": {
        "description": "Mix two signals In opposition to zipWith the result has the length of the longer signal",
        "hierarchy": "Synthesizer Plain Displacement",
        "module": "Synthesizer.Plain.Displacement",
        "name": "mix",
        "normalized": "T a-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "T v-\u003eT v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Displacement.html#v:mixMulti",
      "description": {
        "fct-descr": "Mix an arbitrary number of signals. \n",
        "fct-module": "Synthesizer.Plain.Displacement",
        "fct-package": "synthesizer",
        "fct-signature": "[T v] -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Displacement.html#mixMulti",
        "fct-type": "unknown",
        "title": "mixMulti"
      },
      "index": {
        "description": "Mix an arbitrary number of signals",
        "hierarchy": "Synthesizer Plain Displacement",
        "module": "Synthesizer.Plain.Displacement",
        "name": "mixMulti",
        "normalized": "[T a]-\u003eT a",
        "package": "synthesizer",
        "partial": "Multi",
        "signature": "[T v]-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Displacement.html#v:raise",
      "description": {
        "fct-descr": "Add a number to all of the signal values.\n    This is useful for adjusting the center of a modulation. \n",
        "fct-module": "Synthesizer.Plain.Displacement",
        "fct-package": "synthesizer",
        "fct-signature": "v -\u003e T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Displacement.html#raise",
        "fct-type": "unknown",
        "title": "raise"
      },
      "index": {
        "description": "Add number to all of the signal values This is useful for adjusting the center of modulation",
        "hierarchy": "Synthesizer Plain Displacement",
        "module": "Synthesizer.Plain.Displacement",
        "name": "raise",
        "normalized": "a-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "v-\u003eT v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Effect-Fly.html#v:fly",
      "description": {
        "fct-descr": "stereo sound of a humming fly \n",
        "fct-module": "Synthesizer.Plain.Effect.Fly",
        "fct-package": "synthesizer",
        "fct-signature": "[(Double, Double)]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Effect-Fly.html#fly",
        "fct-type": "unknown",
        "title": "fly"
      },
      "index": {
        "description": "stereo sound of humming fly",
        "hierarchy": "Synthesizer Plain Effect Fly",
        "module": "Synthesizer.Plain.Effect.Fly",
        "name": "fly",
        "normalized": "[(Double,Double)]",
        "package": "synthesizer",
        "partial": "",
        "signature": "[(Double,Double)]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Effect-Fly.html#v:main",
      "description": {
        "fct-module": "Synthesizer.Plain.Effect.Fly",
        "fct-package": "synthesizer",
        "fct-signature": "IO ExitCode",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Effect-Fly.html#main",
        "fct-type": "unknown",
        "title": "main"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Effect Fly",
        "module": "Synthesizer.Plain.Effect.Fly",
        "name": "main",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Effect-Fly.html#v:sampleRate",
      "description": {
        "fct-module": "Synthesizer.Plain.Effect.Fly",
        "fct-package": "synthesizer",
        "fct-signature": "Double",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Effect-Fly.html#sampleRate",
        "fct-type": "unknown",
        "title": "sampleRate"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Effect Fly",
        "module": "Synthesizer.Plain.Effect.Fly",
        "name": "sampleRate",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Rate",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Effect-Glass.html#v:densityHeavy",
      "description": {
        "fct-module": "Synthesizer.Plain.Effect.Glass",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Effect-Glass.html#densityHeavy",
        "fct-type": "unknown",
        "title": "densityHeavy"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Effect Glass",
        "module": "Synthesizer.Plain.Effect.Glass",
        "name": "densityHeavy",
        "normalized": "a-\u003ea",
        "package": "synthesizer",
        "partial": "Heavy",
        "signature": "a-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Effect-Glass.html#v:densitySmooth",
      "description": {
        "fct-module": "Synthesizer.Plain.Effect.Glass",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Effect-Glass.html#densitySmooth",
        "fct-type": "unknown",
        "title": "densitySmooth"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Effect Glass",
        "module": "Synthesizer.Plain.Effect.Glass",
        "name": "densitySmooth",
        "normalized": "a-\u003ea",
        "package": "synthesizer",
        "partial": "Smooth",
        "signature": "a-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Effect-Glass.html#v:glass",
      "description": {
        "fct-descr": "We try to simulate the sound of broken glass\n     as a mixture of short percussive sounds with random pitch \n",
        "fct-module": "Synthesizer.Plain.Effect.Glass",
        "fct-package": "synthesizer",
        "fct-signature": "Double -\u003e [Double]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Effect-Glass.html#glass",
        "fct-type": "unknown",
        "title": "glass"
      },
      "index": {
        "description": "We try to simulate the sound of broken glass as mixture of short percussive sounds with random pitch",
        "hierarchy": "Synthesizer Plain Effect Glass",
        "module": "Synthesizer.Plain.Effect.Glass",
        "name": "glass",
        "normalized": "Double-\u003e[Double]",
        "package": "synthesizer",
        "partial": "",
        "signature": "Double-\u003e[Double]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Effect-Glass.html#v:particle",
      "description": {
        "fct-module": "Synthesizer.Plain.Effect.Glass",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e a -\u003e a -\u003e [a]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Effect-Glass.html#particle",
        "fct-type": "unknown",
        "title": "particle"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Effect Glass",
        "module": "Synthesizer.Plain.Effect.Glass",
        "name": "particle",
        "normalized": "a-\u003ea-\u003ea-\u003e[a]",
        "package": "synthesizer",
        "partial": "",
        "signature": "a-\u003ea-\u003ea-\u003e[a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Effect-Glass.html#v:particles",
      "description": {
        "fct-module": "Synthesizer.Plain.Effect.Glass",
        "fct-package": "synthesizer",
        "fct-signature": "Double -\u003e Double -\u003e T Int [Double]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Effect-Glass.html#particles",
        "fct-type": "unknown",
        "title": "particles"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Effect Glass",
        "module": "Synthesizer.Plain.Effect.Glass",
        "name": "particles",
        "normalized": "Double-\u003eDouble-\u003eT Int[Double]",
        "package": "synthesizer",
        "partial": "",
        "signature": "Double-\u003eDouble-\u003eT Int[Double]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Effect-Glass.html#v:segmentBefore",
      "description": {
        "fct-module": "Synthesizer.Plain.Effect.Glass",
        "fct-package": "synthesizer",
        "fct-signature": "(a -\u003e Bool) -\u003e [a] -\u003e [[a]]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Effect-Glass.html#segmentBefore",
        "fct-type": "unknown",
        "title": "segmentBefore"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Effect Glass",
        "module": "Synthesizer.Plain.Effect.Glass",
        "name": "segmentBefore",
        "normalized": "(a-\u003eBool)-\u003e[a]-\u003e[[a]]",
        "package": "synthesizer",
        "partial": "Before",
        "signature": "(a-\u003eBool)-\u003e[a]-\u003e[[a]]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Effect-Glass.html#v:timeDiffs",
      "description": {
        "fct-module": "Synthesizer.Plain.Effect.Glass",
        "fct-package": "synthesizer",
        "fct-signature": "[Bool] -\u003e [Int]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Effect-Glass.html#timeDiffs",
        "fct-type": "unknown",
        "title": "timeDiffs"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Effect Glass",
        "module": "Synthesizer.Plain.Effect.Glass",
        "name": "timeDiffs",
        "normalized": "[Bool]-\u003e[Int]",
        "package": "synthesizer",
        "partial": "Diffs",
        "signature": "[Bool]-\u003e[Int]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Effect-Glass.html#v:timeDiffsAlt",
      "description": {
        "fct-module": "Synthesizer.Plain.Effect.Glass",
        "fct-package": "synthesizer",
        "fct-signature": "[Bool] -\u003e [Int]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Effect-Glass.html#timeDiffsAlt",
        "fct-type": "unknown",
        "title": "timeDiffsAlt"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Effect Glass",
        "module": "Synthesizer.Plain.Effect.Glass",
        "name": "timeDiffsAlt",
        "normalized": "[Bool]-\u003e[Int]",
        "package": "synthesizer",
        "partial": "Diffs Alt",
        "signature": "[Bool]-\u003e[Int]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Effect.html#v:cFreq",
      "description": {
        "fct-module": "Synthesizer.Plain.Effect",
        "fct-package": "synthesizer",
        "fct-signature": "Double",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Effect.html#cFreq",
        "fct-type": "unknown",
        "title": "cFreq"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Effect",
        "module": "Synthesizer.Plain.Effect",
        "name": "cFreq",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Freq",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Effect.html#v:main",
      "description": {
        "fct-module": "Synthesizer.Plain.Effect",
        "fct-package": "synthesizer",
        "fct-signature": "IO ExitCode",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Effect.html#main",
        "fct-type": "unknown",
        "title": "main"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Effect",
        "module": "Synthesizer.Plain.Effect",
        "name": "main",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Effect.html#v:sound0",
      "description": {
        "fct-module": "Synthesizer.Plain.Effect",
        "fct-package": "synthesizer",
        "fct-signature": "Double -\u003e [Double]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Effect.html#sound0",
        "fct-type": "unknown",
        "title": "sound0"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Effect",
        "module": "Synthesizer.Plain.Effect",
        "name": "sound0",
        "normalized": "Double-\u003e[Double]",
        "package": "synthesizer",
        "partial": "",
        "signature": "Double-\u003e[Double]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Effect.html#v:sound1",
      "description": {
        "fct-module": "Synthesizer.Plain.Effect",
        "fct-package": "synthesizer",
        "fct-signature": "Double -\u003e [Double]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Effect.html#sound1",
        "fct-type": "unknown",
        "title": "sound1"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Effect",
        "module": "Synthesizer.Plain.Effect",
        "name": "sound1",
        "normalized": "Double-\u003e[Double]",
        "package": "synthesizer",
        "partial": "",
        "signature": "Double-\u003e[Double]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Effect.html#v:sound2",
      "description": {
        "fct-module": "Synthesizer.Plain.Effect",
        "fct-package": "synthesizer",
        "fct-signature": "Double -\u003e [Double]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Effect.html#sound2",
        "fct-type": "unknown",
        "title": "sound2"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Effect",
        "module": "Synthesizer.Plain.Effect",
        "name": "sound2",
        "normalized": "Double-\u003e[Double]",
        "package": "synthesizer",
        "partial": "",
        "signature": "Double-\u003e[Double]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Effect.html#v:sound3",
      "description": {
        "fct-module": "Synthesizer.Plain.Effect",
        "fct-package": "synthesizer",
        "fct-signature": "Double -\u003e [Double]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Effect.html#sound3",
        "fct-type": "unknown",
        "title": "sound3"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Effect",
        "module": "Synthesizer.Plain.Effect",
        "name": "sound3",
        "normalized": "Double-\u003e[Double]",
        "package": "synthesizer",
        "partial": "",
        "signature": "Double-\u003e[Double]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Effect.html#v:sound4",
      "description": {
        "fct-module": "Synthesizer.Plain.Effect",
        "fct-package": "synthesizer",
        "fct-signature": "Double -\u003e [Double]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Effect.html#sound4",
        "fct-type": "unknown",
        "title": "sound4"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Effect",
        "module": "Synthesizer.Plain.Effect",
        "name": "sound4",
        "normalized": "Double-\u003e[Double]",
        "package": "synthesizer",
        "partial": "",
        "signature": "Double-\u003e[Double]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Effect.html#v:sound5",
      "description": {
        "fct-module": "Synthesizer.Plain.Effect",
        "fct-package": "synthesizer",
        "fct-signature": "Double -\u003e [Double]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Effect.html#sound5",
        "fct-type": "unknown",
        "title": "sound5"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Effect",
        "module": "Synthesizer.Plain.Effect",
        "name": "sound5",
        "normalized": "Double-\u003e[Double]",
        "package": "synthesizer",
        "partial": "",
        "signature": "Double-\u003e[Double]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Effect.html#v:sound6",
      "description": {
        "fct-module": "Synthesizer.Plain.Effect",
        "fct-package": "synthesizer",
        "fct-signature": "Double -\u003e [Double]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Effect.html#sound6",
        "fct-type": "unknown",
        "title": "sound6"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Effect",
        "module": "Synthesizer.Plain.Effect",
        "name": "sound6",
        "normalized": "Double-\u003e[Double]",
        "package": "synthesizer",
        "partial": "",
        "signature": "Double-\u003e[Double]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Effect.html#v:sound7",
      "description": {
        "fct-module": "Synthesizer.Plain.Effect",
        "fct-package": "synthesizer",
        "fct-signature": "Double -\u003e [Double]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Effect.html#sound7",
        "fct-type": "unknown",
        "title": "sound7"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Effect",
        "module": "Synthesizer.Plain.Effect",
        "name": "sound7",
        "normalized": "Double-\u003e[Double]",
        "package": "synthesizer",
        "partial": "",
        "signature": "Double-\u003e[Double]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Effect.html#v:sound8",
      "description": {
        "fct-module": "Synthesizer.Plain.Effect",
        "fct-package": "synthesizer",
        "fct-signature": "Double -\u003e [Double]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Effect.html#sound8",
        "fct-type": "unknown",
        "title": "sound8"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Effect",
        "module": "Synthesizer.Plain.Effect",
        "name": "sound8",
        "normalized": "Double-\u003e[Double]",
        "package": "synthesizer",
        "partial": "",
        "signature": "Double-\u003e[Double]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Effect.html#v:sound9",
      "description": {
        "fct-module": "Synthesizer.Plain.Effect",
        "fct-package": "synthesizer",
        "fct-signature": "Double -\u003e [Double]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Effect.html#sound9",
        "fct-type": "unknown",
        "title": "sound9"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Effect",
        "module": "Synthesizer.Plain.Effect",
        "name": "sound9",
        "normalized": "Double-\u003e[Double]",
        "package": "synthesizer",
        "partial": "",
        "signature": "Double-\u003e[Double]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Effect.html#v:soundA",
      "description": {
        "fct-module": "Synthesizer.Plain.Effect",
        "fct-package": "synthesizer",
        "fct-signature": "Double -\u003e [Double]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Effect.html#soundA",
        "fct-type": "unknown",
        "title": "soundA"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Effect",
        "module": "Synthesizer.Plain.Effect",
        "name": "soundA",
        "normalized": "Double-\u003e[Double]",
        "package": "synthesizer",
        "partial": "",
        "signature": "Double-\u003e[Double]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Effect.html#v:soundB",
      "description": {
        "fct-module": "Synthesizer.Plain.Effect",
        "fct-package": "synthesizer",
        "fct-signature": "Double -\u003e [Double]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Effect.html#soundB",
        "fct-type": "unknown",
        "title": "soundB"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Effect",
        "module": "Synthesizer.Plain.Effect",
        "name": "soundB",
        "normalized": "Double-\u003e[Double]",
        "package": "synthesizer",
        "partial": "",
        "signature": "Double-\u003e[Double]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Effect.html#v:soundC",
      "description": {
        "fct-module": "Synthesizer.Plain.Effect",
        "fct-package": "synthesizer",
        "fct-signature": "Double -\u003e [Double]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Effect.html#soundC",
        "fct-type": "unknown",
        "title": "soundC"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Effect",
        "module": "Synthesizer.Plain.Effect",
        "name": "soundC",
        "normalized": "Double-\u003e[Double]",
        "package": "synthesizer",
        "partial": "",
        "signature": "Double-\u003e[Double]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Effect.html#v:soundD",
      "description": {
        "fct-module": "Synthesizer.Plain.Effect",
        "fct-package": "synthesizer",
        "fct-signature": "Double -\u003e [Double]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Effect.html#soundD",
        "fct-type": "unknown",
        "title": "soundD"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Effect",
        "module": "Synthesizer.Plain.Effect",
        "name": "soundD",
        "normalized": "Double-\u003e[Double]",
        "package": "synthesizer",
        "partial": "",
        "signature": "Double-\u003e[Double]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Effect.html#v:soundE",
      "description": {
        "fct-module": "Synthesizer.Plain.Effect",
        "fct-package": "synthesizer",
        "fct-signature": "Double -\u003e [Double]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Effect.html#soundE",
        "fct-type": "unknown",
        "title": "soundE"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Effect",
        "module": "Synthesizer.Plain.Effect",
        "name": "soundE",
        "normalized": "Double-\u003e[Double]",
        "package": "synthesizer",
        "partial": "",
        "signature": "Double-\u003e[Double]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Effect.html#v:soundm0",
      "description": {
        "fct-module": "Synthesizer.Plain.Effect",
        "fct-package": "synthesizer",
        "fct-signature": "Double -\u003e [Double]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Effect.html#soundm0",
        "fct-type": "unknown",
        "title": "soundm0"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Effect",
        "module": "Synthesizer.Plain.Effect",
        "name": "soundm0",
        "normalized": "Double-\u003e[Double]",
        "package": "synthesizer",
        "partial": "",
        "signature": "Double-\u003e[Double]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-File.html#v:compress",
      "description": {
        "fct-module": "Synthesizer.Plain.File",
        "fct-package": "synthesizer",
        "fct-signature": "FilePath -\u003e IO ExitCode",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-File.html#compress",
        "fct-type": "unknown",
        "title": "compress"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain File",
        "module": "Synthesizer.Plain.File",
        "name": "compress",
        "normalized": "FilePath-\u003eIO ExitCode",
        "package": "synthesizer",
        "partial": "",
        "signature": "FilePath-\u003eIO ExitCode"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-File.html#v:getInt16List",
      "description": {
        "fct-module": "Synthesizer.Plain.File",
        "fct-package": "synthesizer",
        "fct-signature": "Get [Int16]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-File.html#getInt16List",
        "fct-type": "unknown",
        "title": "getInt16List"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain File",
        "module": "Synthesizer.Plain.File",
        "name": "getInt16List",
        "normalized": "Get[Int]",
        "package": "synthesizer",
        "partial": "Int List",
        "signature": "Get[Int]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-File.html#v:rawToAIFF",
      "description": {
        "fct-module": "Synthesizer.Plain.File",
        "fct-package": "synthesizer",
        "fct-signature": "FilePath -\u003e T -\u003e a -\u003e Int -\u003e IO ExitCode",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-File.html#rawToAIFF",
        "fct-type": "unknown",
        "title": "rawToAIFF"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain File",
        "module": "Synthesizer.Plain.File",
        "name": "rawToAIFF",
        "normalized": "FilePath-\u003eT-\u003ea-\u003eInt-\u003eIO ExitCode",
        "package": "synthesizer",
        "partial": "To AIFF",
        "signature": "FilePath-\u003eT-\u003ea-\u003eInt-\u003eIO ExitCode"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-File.html#v:readAIFFMono",
      "description": {
        "fct-module": "Synthesizer.Plain.File",
        "fct-package": "synthesizer",
        "fct-signature": "FilePath -\u003e IO [a]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-File.html#readAIFFMono",
        "fct-type": "unknown",
        "title": "readAIFFMono"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain File",
        "module": "Synthesizer.Plain.File",
        "name": "readAIFFMono",
        "normalized": "FilePath-\u003eIO[a]",
        "package": "synthesizer",
        "partial": "AIFFMono",
        "signature": "FilePath-\u003eIO[a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-File.html#v:readMonoFromInt16",
      "description": {
        "fct-descr": "I suspect we cannot handle file closing properly.\n",
        "fct-module": "Synthesizer.Plain.File",
        "fct-package": "synthesizer",
        "fct-signature": "FilePath -\u003e IO [a]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-File.html#readMonoFromInt16",
        "fct-type": "unknown",
        "title": "readMonoFromInt16"
      },
      "index": {
        "description": "suspect we cannot handle file closing properly",
        "hierarchy": "Synthesizer Plain File",
        "module": "Synthesizer.Plain.File",
        "name": "readMonoFromInt16",
        "normalized": "FilePath-\u003eIO[a]",
        "package": "synthesizer",
        "partial": "Mono From Int",
        "signature": "FilePath-\u003eIO[a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-File.html#v:render",
      "description": {
        "fct-descr": "See \u003ctt\u003e\u003ca\u003ewrite\u003c/a\u003e\u003c/tt\u003e.\n",
        "fct-module": "Synthesizer.Plain.File",
        "fct-package": "synthesizer",
        "fct-signature": "Put int -\u003e FilePath -\u003e a -\u003e (a -\u003e [v]) -\u003e IO ExitCode",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-File.html#render",
        "fct-type": "unknown",
        "title": "render"
      },
      "index": {
        "description": "See write",
        "hierarchy": "Synthesizer Plain File",
        "module": "Synthesizer.Plain.File",
        "name": "render",
        "normalized": "Put a-\u003eFilePath-\u003eb-\u003e(b-\u003e[c])-\u003eIO ExitCode",
        "package": "synthesizer",
        "partial": "",
        "signature": "Put int-\u003eFilePath-\u003ea-\u003e(a-\u003e[v])-\u003eIO ExitCode"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-File.html#v:renderMonoToInt16",
      "description": {
        "fct-module": "Synthesizer.Plain.File",
        "fct-package": "synthesizer",
        "fct-signature": "FilePath -\u003e a -\u003e (a -\u003e [a]) -\u003e IO ExitCode",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-File.html#renderMonoToInt16",
        "fct-type": "unknown",
        "title": "renderMonoToInt16"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain File",
        "module": "Synthesizer.Plain.File",
        "name": "renderMonoToInt16",
        "normalized": "FilePath-\u003ea-\u003e(a-\u003e[a])-\u003eIO ExitCode",
        "package": "synthesizer",
        "partial": "Mono To Int",
        "signature": "FilePath-\u003ea-\u003e(a-\u003e[a])-\u003eIO ExitCode"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-File.html#v:renderStereoToInt16",
      "description": {
        "fct-module": "Synthesizer.Plain.File",
        "fct-package": "synthesizer",
        "fct-signature": "FilePath -\u003e a -\u003e (a -\u003e [(a, a)]) -\u003e IO ExitCode",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-File.html#renderStereoToInt16",
        "fct-type": "unknown",
        "title": "renderStereoToInt16"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain File",
        "module": "Synthesizer.Plain.File",
        "name": "renderStereoToInt16",
        "normalized": "FilePath-\u003ea-\u003e(a-\u003e[(a,a)])-\u003eIO ExitCode",
        "package": "synthesizer",
        "partial": "Stereo To Int",
        "signature": "FilePath-\u003ea-\u003e(a-\u003e[(a,a)])-\u003eIO ExitCode"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-File.html#v:renderToInt16",
      "description": {
        "fct-module": "Synthesizer.Plain.File",
        "fct-package": "synthesizer",
        "fct-signature": "FilePath -\u003e a -\u003e (a -\u003e [v]) -\u003e IO ExitCode",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-File.html#renderToInt16",
        "fct-type": "unknown",
        "title": "renderToInt16"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain File",
        "module": "Synthesizer.Plain.File",
        "name": "renderToInt16",
        "normalized": "FilePath-\u003ea-\u003e(a-\u003e[b])-\u003eIO ExitCode",
        "package": "synthesizer",
        "partial": "To Int",
        "signature": "FilePath-\u003ea-\u003e(a-\u003e[v])-\u003eIO ExitCode"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-File.html#v:write",
      "description": {
        "fct-descr": "\u003cp\u003eThe output format is determined by SoX by the file name extension.\nThe sample precision is determined by the provided \u003ctt\u003e\u003ca\u003ePut\u003c/a\u003e\u003c/tt\u003e function.\n\u003c/p\u003e\u003cp\u003eExample:\n\u003c/p\u003e\u003cpre\u003e import qualified Synthesizer.Plain.Builder as Builder\n\n write (Builder.put :: Builder.Put Int16) \"test.aiff\" 44100 sound\n\u003c/pre\u003e",
        "fct-module": "Synthesizer.Plain.File",
        "fct-package": "synthesizer",
        "fct-signature": "Put int -\u003e FilePath -\u003e a -\u003e [v] -\u003e IO ExitCode",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-File.html#write",
        "fct-type": "unknown",
        "title": "write"
      },
      "index": {
        "description": "The output format is determined by SoX by the file name extension The sample precision is determined by the provided Put function Example import qualified Synthesizer.Plain.Builder as Builder write Builder.put Builder.Put Int16 test.aiff sound",
        "hierarchy": "Synthesizer Plain File",
        "module": "Synthesizer.Plain.File",
        "name": "write",
        "normalized": "Put a-\u003eFilePath-\u003eb-\u003e[c]-\u003eIO ExitCode",
        "package": "synthesizer",
        "partial": "",
        "signature": "Put int-\u003eFilePath-\u003ea-\u003e[v]-\u003eIO ExitCode"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-File.html#v:writeMonoToInt16",
      "description": {
        "fct-module": "Synthesizer.Plain.File",
        "fct-package": "synthesizer",
        "fct-signature": "FilePath -\u003e a -\u003e [a] -\u003e IO ExitCode",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-File.html#writeMonoToInt16",
        "fct-type": "unknown",
        "title": "writeMonoToInt16"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain File",
        "module": "Synthesizer.Plain.File",
        "name": "writeMonoToInt16",
        "normalized": "FilePath-\u003ea-\u003e[a]-\u003eIO ExitCode",
        "package": "synthesizer",
        "partial": "Mono To Int",
        "signature": "FilePath-\u003ea-\u003e[a]-\u003eIO ExitCode"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-File.html#v:writeRaw",
      "description": {
        "fct-module": "Synthesizer.Plain.File",
        "fct-package": "synthesizer",
        "fct-signature": "T -\u003e FilePath -\u003e a -\u003e [v] -\u003e IO ExitCode",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-File.html#writeRaw",
        "fct-type": "unknown",
        "title": "writeRaw"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain File",
        "module": "Synthesizer.Plain.File",
        "name": "writeRaw",
        "normalized": "T-\u003eFilePath-\u003ea-\u003e[b]-\u003eIO ExitCode",
        "package": "synthesizer",
        "partial": "Raw",
        "signature": "T-\u003eFilePath-\u003ea-\u003e[v]-\u003eIO ExitCode"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-File.html#v:writeRawCompressed",
      "description": {
        "fct-descr": "You hardly need this routine\nsince you can use a filename with \u003ctt\u003e.mp3\u003c/tt\u003e or \u003ctt\u003e.ogg\u003c/tt\u003e\nextension for \u003ctt\u003e\u003ca\u003ewriteRaw\u003c/a\u003e\u003c/tt\u003e\nand SoX will do the corresponding compression for you.\n",
        "fct-module": "Synthesizer.Plain.File",
        "fct-package": "synthesizer",
        "fct-signature": "T -\u003e FilePath -\u003e a -\u003e [v] -\u003e IO ExitCode",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-File.html#writeRawCompressed",
        "fct-type": "unknown",
        "title": "writeRawCompressed"
      },
      "index": {
        "description": "You hardly need this routine since you can use filename with mp3 or ogg extension for writeRaw and SoX will do the corresponding compression for you",
        "hierarchy": "Synthesizer Plain File",
        "module": "Synthesizer.Plain.File",
        "name": "writeRawCompressed",
        "normalized": "T-\u003eFilePath-\u003ea-\u003e[b]-\u003eIO ExitCode",
        "package": "synthesizer",
        "partial": "Raw Compressed",
        "signature": "T-\u003eFilePath-\u003ea-\u003e[v]-\u003eIO ExitCode"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-File.html#v:writeStereoToInt16",
      "description": {
        "fct-module": "Synthesizer.Plain.File",
        "fct-package": "synthesizer",
        "fct-signature": "FilePath -\u003e a -\u003e [(a, a)] -\u003e IO ExitCode",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-File.html#writeStereoToInt16",
        "fct-type": "unknown",
        "title": "writeStereoToInt16"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain File",
        "module": "Synthesizer.Plain.File",
        "name": "writeStereoToInt16",
        "normalized": "FilePath-\u003ea-\u003e[(a,a)]-\u003eIO ExitCode",
        "package": "synthesizer",
        "partial": "Stereo To Int",
        "signature": "FilePath-\u003ea-\u003e[(a,a)]-\u003eIO ExitCode"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-File.html#v:writeToInt16",
      "description": {
        "fct-module": "Synthesizer.Plain.File",
        "fct-package": "synthesizer",
        "fct-signature": "FilePath -\u003e a -\u003e [v] -\u003e IO ExitCode",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-File.html#writeToInt16",
        "fct-type": "unknown",
        "title": "writeToInt16"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain File",
        "module": "Synthesizer.Plain.File",
        "name": "writeToInt16",
        "normalized": "FilePath-\u003ea-\u003e[b]-\u003eIO ExitCode",
        "package": "synthesizer",
        "partial": "To Int",
        "signature": "FilePath-\u003ea-\u003e[v]-\u003eIO ExitCode"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Delay-Block.html#t:BlockList",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Delay.Block",
        "fct-package": "synthesizer",
        "fct-signature": "type",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Delay-Block.html#BlockList",
        "fct-type": "unknown",
        "title": "BlockList"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Delay Block",
        "module": "Synthesizer.Plain.Filter.Delay.Block",
        "name": "BlockList",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Block List",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Delay-Block.html#v:dropBlocksToList",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Delay.Block",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e BlockList a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Delay-Block.html#dropBlocksToList",
        "fct-type": "unknown",
        "title": "dropBlocksToList"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Delay Block",
        "module": "Synthesizer.Plain.Filter.Delay.Block",
        "name": "dropBlocksToList",
        "normalized": "Int-\u003eBlockList a-\u003eT a",
        "package": "synthesizer",
        "partial": "Blocks To List",
        "signature": "Int-\u003eBlockList a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Delay-Block.html#v:dropSingleBlocksToList",
      "description": {
        "fct-descr": "Drop elements from a blocked list.\nThe offset must lie in the leading block.\n",
        "fct-module": "Synthesizer.Plain.Filter.Delay.Block",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e BlockList a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Delay-Block.html#dropSingleBlocksToList",
        "fct-type": "unknown",
        "title": "dropSingleBlocksToList"
      },
      "index": {
        "description": "Drop elements from blocked list The offset must lie in the leading block",
        "hierarchy": "Synthesizer Plain Filter Delay Block",
        "module": "Synthesizer.Plain.Filter.Delay.Block",
        "name": "dropSingleBlocksToList",
        "normalized": "Int-\u003eBlockList a-\u003eT a",
        "package": "synthesizer",
        "partial": "Single Blocks To List",
        "signature": "Int-\u003eBlockList a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Delay-Block.html#v:listToBlocks",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Delay.Block",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e T a -\u003e BlockList a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Delay-Block.html#listToBlocks",
        "fct-type": "unknown",
        "title": "listToBlocks"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Delay Block",
        "module": "Synthesizer.Plain.Filter.Delay.Block",
        "name": "listToBlocks",
        "normalized": "Int-\u003eT a-\u003eBlockList a",
        "package": "synthesizer",
        "partial": "To Blocks",
        "signature": "Int-\u003eT a-\u003eBlockList a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Delay-Block.html#v:modulated",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Delay.Block",
        "fct-package": "synthesizer",
        "fct-signature": "T a v -\u003e Int -\u003e T a -\u003e T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Delay-Block.html#modulated",
        "fct-type": "unknown",
        "title": "modulated"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Delay Block",
        "module": "Synthesizer.Plain.Filter.Delay.Block",
        "name": "modulated",
        "normalized": "T a b-\u003eInt-\u003eT a-\u003eT b-\u003eT b",
        "package": "synthesizer",
        "partial": "",
        "signature": "T a v-\u003eInt-\u003eT a-\u003eT v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Delay-Block.html#v:modulatedCore",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Delay.Block",
        "fct-package": "synthesizer",
        "fct-signature": "T a v -\u003e Int -\u003e T a -\u003e T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Delay-Block.html#modulatedCore",
        "fct-type": "unknown",
        "title": "modulatedCore"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Delay Block",
        "module": "Synthesizer.Plain.Filter.Delay.Block",
        "name": "modulatedCore",
        "normalized": "T a b-\u003eInt-\u003eT a-\u003eT b-\u003eT b",
        "package": "synthesizer",
        "partial": "Core",
        "signature": "T a v-\u003eInt-\u003eT a-\u003eT v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Delay-Block.html#v:propDrop",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Delay.Block",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e Int -\u003e [Int] -\u003e Property",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Delay-Block.html#propDrop",
        "fct-type": "unknown",
        "title": "propDrop"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Delay Block",
        "module": "Synthesizer.Plain.Filter.Delay.Block",
        "name": "propDrop",
        "normalized": "Int-\u003eInt-\u003e[Int]-\u003eProperty",
        "package": "synthesizer",
        "partial": "Drop",
        "signature": "Int-\u003eInt-\u003e[Int]-\u003eProperty"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Delay-Block.html#v:suffixIndexes",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Delay.Block",
        "fct-package": "synthesizer",
        "fct-signature": "BlockList a -\u003e [(Int, BlockList a)]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Delay-Block.html#suffixIndexes",
        "fct-type": "unknown",
        "title": "suffixIndexes"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Delay Block",
        "module": "Synthesizer.Plain.Filter.Delay.Block",
        "name": "suffixIndexes",
        "normalized": "BlockList a-\u003e[(Int,BlockList a)]",
        "package": "synthesizer",
        "partial": "Indexes",
        "signature": "BlockList a-\u003e[(Int,BlockList a)]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Delay-List.html#v:modulated",
      "description": {
        "fct-descr": "This is essentially different for constant interpolation,\nbecause this function \u003ca\u003elooks forward\u003c/a\u003e\nwhereas the other two variants \u003ca\u003elook backward\u003c/a\u003e.\nFor the symmetric interpolation functions\nof linear and cubic interpolation, this does not really matter.\n",
        "fct-module": "Synthesizer.Plain.Filter.Delay.List",
        "fct-package": "synthesizer",
        "fct-signature": "T a v -\u003e Int -\u003e [a] -\u003e [v] -\u003e [v]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Delay-List.html#modulated",
        "fct-type": "unknown",
        "title": "modulated"
      },
      "index": {
        "description": "This is essentially different for constant interpolation because this function looks forward whereas the other two variants look backward For the symmetric interpolation functions of linear and cubic interpolation this does not really matter",
        "hierarchy": "Synthesizer Plain Filter Delay List",
        "module": "Synthesizer.Plain.Filter.Delay.List",
        "name": "modulated",
        "normalized": "T a b-\u003eInt-\u003e[a]-\u003e[b]-\u003e[b]",
        "package": "synthesizer",
        "partial": "",
        "signature": "T a v-\u003eInt-\u003e[a]-\u003e[v]-\u003e[v]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Delay-List.html#v:modulatedCore",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Delay.List",
        "fct-package": "synthesizer",
        "fct-signature": "T a v -\u003e Int -\u003e [a] -\u003e [v] -\u003e [v]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Delay-List.html#modulatedCore",
        "fct-type": "unknown",
        "title": "modulatedCore"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Delay List",
        "module": "Synthesizer.Plain.Filter.Delay.List",
        "name": "modulatedCore",
        "normalized": "T a b-\u003eInt-\u003e[a]-\u003e[b]-\u003e[b]",
        "package": "synthesizer",
        "partial": "Core",
        "signature": "T a v-\u003eInt-\u003e[a]-\u003e[v]-\u003e[v]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Delay-List.html#v:modulatedRev",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Delay.List",
        "fct-package": "synthesizer",
        "fct-signature": "T a v -\u003e Int -\u003e [a] -\u003e [v] -\u003e [v]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Delay-List.html#modulatedRev",
        "fct-type": "unknown",
        "title": "modulatedRev"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Delay List",
        "module": "Synthesizer.Plain.Filter.Delay.List",
        "name": "modulatedRev",
        "normalized": "T a b-\u003eInt-\u003e[a]-\u003e[b]-\u003e[b]",
        "package": "synthesizer",
        "partial": "Rev",
        "signature": "T a v-\u003eInt-\u003e[a]-\u003e[v]-\u003e[v]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Delay-List.html#v:modulatedRevCore",
      "description": {
        "fct-descr": "This function uses suffixes of the reversed signal.\nThis way small delays perform well\nbut the big drawback is that the garbage collector\ncan not deallocate old samples.\n",
        "fct-module": "Synthesizer.Plain.Filter.Delay.List",
        "fct-package": "synthesizer",
        "fct-signature": "T a v -\u003e Int -\u003e [a] -\u003e [v] -\u003e [v]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Delay-List.html#modulatedRevCore",
        "fct-type": "unknown",
        "title": "modulatedRevCore"
      },
      "index": {
        "description": "This function uses suffixes of the reversed signal This way small delays perform well but the big drawback is that the garbage collector can not deallocate old samples",
        "hierarchy": "Synthesizer Plain Filter Delay List",
        "module": "Synthesizer.Plain.Filter.Delay.List",
        "name": "modulatedRevCore",
        "normalized": "T a b-\u003eInt-\u003e[a]-\u003e[b]-\u003e[b]",
        "package": "synthesizer",
        "partial": "Rev Core",
        "signature": "T a v-\u003eInt-\u003e[a]-\u003e[v]-\u003e[v]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Delay-ST.html#v:modulated",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Delay.ST",
        "fct-package": "synthesizer",
        "fct-signature": "T a v -\u003e Int -\u003e [a] -\u003e [v] -\u003e [v]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Delay-ST.html#modulated",
        "fct-type": "unknown",
        "title": "modulated"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Delay ST",
        "module": "Synthesizer.Plain.Filter.Delay.ST",
        "name": "modulated",
        "normalized": "T a b-\u003eInt-\u003e[a]-\u003e[b]-\u003e[b]",
        "package": "synthesizer",
        "partial": "",
        "signature": "T a v-\u003eInt-\u003e[a]-\u003e[v]-\u003e[v]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Delay-ST.html#v:modulatedAction",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Delay.ST",
        "fct-package": "synthesizer",
        "fct-signature": "T a v -\u003e Int -\u003e [a] -\u003e [v] -\u003e ST s [v]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Delay-ST.html#modulatedAction",
        "fct-type": "unknown",
        "title": "modulatedAction"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Delay ST",
        "module": "Synthesizer.Plain.Filter.Delay.ST",
        "name": "modulatedAction",
        "normalized": "T a b-\u003eInt-\u003e[a]-\u003e[b]-\u003eST c[b]",
        "package": "synthesizer",
        "partial": "Action",
        "signature": "T a v-\u003eInt-\u003e[a]-\u003e[v]-\u003eST s[v]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Delay.html#v:phaser",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Delay",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e [a] -\u003e [v] -\u003e [v]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Delay.html#phaser",
        "fct-type": "unknown",
        "title": "phaser"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Delay",
        "module": "Synthesizer.Plain.Filter.Delay",
        "name": "phaser",
        "normalized": "a-\u003e[a]-\u003e[b]-\u003e[b]",
        "package": "synthesizer",
        "partial": "",
        "signature": "a-\u003e[a]-\u003e[v]-\u003e[v]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Delay.html#v:plane",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Delay",
        "fct-package": "synthesizer",
        "fct-signature": "Double -\u003e [Double]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Delay.html#plane",
        "fct-type": "unknown",
        "title": "plane"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Delay",
        "module": "Synthesizer.Plain.Filter.Delay",
        "name": "plane",
        "normalized": "Double-\u003e[Double]",
        "package": "synthesizer",
        "partial": "",
        "signature": "Double-\u003e[Double]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Delay.html#v:propAll",
      "description": {
        "fct-descr": "The test for constant interpolation will fail,\ndue to different point of views in forward and backward interpolation.\n",
        "fct-module": "Synthesizer.Plain.Filter.Delay",
        "fct-package": "synthesizer",
        "fct-signature": "[[Bool]]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Delay.html#propAll",
        "fct-type": "unknown",
        "title": "propAll"
      },
      "index": {
        "description": "The test for constant interpolation will fail due to different point of views in forward and backward interpolation",
        "hierarchy": "Synthesizer Plain Filter Delay",
        "module": "Synthesizer.Plain.Filter.Delay",
        "name": "propAll",
        "normalized": "[[Bool]]",
        "package": "synthesizer",
        "partial": "All",
        "signature": "[[Bool]]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Delay.html#v:propSingle",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Delay",
        "fct-package": "synthesizer",
        "fct-signature": "T Double Double -\u003e [Bool]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Delay.html#propSingle",
        "fct-type": "unknown",
        "title": "propSingle"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Delay",
        "module": "Synthesizer.Plain.Filter.Delay",
        "name": "propSingle",
        "normalized": "T Double Double-\u003e[Bool]",
        "package": "synthesizer",
        "partial": "Single",
        "signature": "T Double Double-\u003e[Bool]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-LinearPredictive.html#v:approxCoefficients",
      "description": {
        "fct-descr": "Determine optimal filter coefficients and residue by adaptive approximation.\nThe number of initial filter coefficients is used as filter order.\n",
        "fct-module": "Synthesizer.Plain.Filter.LinearPredictive",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e [a] -\u003e [a] -\u003e [(a, [a])]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-LinearPredictive.html#approxCoefficients",
        "fct-type": "unknown",
        "title": "approxCoefficients"
      },
      "index": {
        "description": "Determine optimal filter coefficients and residue by adaptive approximation The number of initial filter coefficients is used as filter order",
        "hierarchy": "Synthesizer Plain Filter LinearPredictive",
        "module": "Synthesizer.Plain.Filter.LinearPredictive",
        "name": "approxCoefficients",
        "normalized": "a-\u003e[a]-\u003e[a]-\u003e[(a,[a])]",
        "package": "synthesizer",
        "partial": "Coefficients",
        "signature": "a-\u003e[a]-\u003e[a]-\u003e[(a,[a])]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-NonRecursive.html#v:amplify",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.NonRecursive",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-NonRecursive.html#amplify",
        "fct-type": "unknown",
        "title": "amplify"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter NonRecursive",
        "module": "Synthesizer.Plain.Filter.NonRecursive",
        "name": "amplify",
        "normalized": "a-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "a-\u003eT a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-NonRecursive.html#v:amplifyVector",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.NonRecursive",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-NonRecursive.html#amplifyVector",
        "fct-type": "unknown",
        "title": "amplifyVector"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter NonRecursive",
        "module": "Synthesizer.Plain.Filter.NonRecursive",
        "name": "amplifyVector",
        "normalized": "a-\u003eT b-\u003eT b",
        "package": "synthesizer",
        "partial": "Vector",
        "signature": "a-\u003eT v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-NonRecursive.html#v:binomial",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.NonRecursive",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e a -\u003e T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-NonRecursive.html#binomial",
        "fct-type": "unknown",
        "title": "binomial"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter NonRecursive",
        "module": "Synthesizer.Plain.Filter.NonRecursive",
        "name": "binomial",
        "normalized": "a-\u003ea-\u003eT b-\u003eT b",
        "package": "synthesizer",
        "partial": "",
        "signature": "a-\u003ea-\u003eT v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-NonRecursive.html#v:binomial1",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.NonRecursive",
        "fct-package": "synthesizer",
        "fct-signature": "T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-NonRecursive.html#binomial1",
        "fct-type": "unknown",
        "title": "binomial1"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter NonRecursive",
        "module": "Synthesizer.Plain.Filter.NonRecursive",
        "name": "binomial1",
        "normalized": "T a-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "T v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-NonRecursive.html#v:delay",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.NonRecursive",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e T y -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-NonRecursive.html#delay",
        "fct-type": "unknown",
        "title": "delay"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter NonRecursive",
        "module": "Synthesizer.Plain.Filter.NonRecursive",
        "name": "delay",
        "normalized": "Int-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "Int-\u003eT y-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-NonRecursive.html#v:delayPad",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.NonRecursive",
        "fct-package": "synthesizer",
        "fct-signature": "y -\u003e Int -\u003e T y -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-NonRecursive.html#delayPad",
        "fct-type": "unknown",
        "title": "delayPad"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter NonRecursive",
        "module": "Synthesizer.Plain.Filter.NonRecursive",
        "name": "delayPad",
        "normalized": "a-\u003eInt-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "Pad",
        "signature": "y-\u003eInt-\u003eT y-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-NonRecursive.html#v:differentiate",
      "description": {
        "fct-descr": "Forward difference quotient.\nShortens the signal by one.\nInverts Synthesizer.Plain.Filter.Recursive.Integration.run in the sense that\n\u003ctt\u003edifferentiate (zero : integrate x) == x\u003c/tt\u003e.\nThe signal is shifted by a half time unit.\n",
        "fct-module": "Synthesizer.Plain.Filter.NonRecursive",
        "fct-package": "synthesizer",
        "fct-signature": "T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-NonRecursive.html#differentiate",
        "fct-type": "unknown",
        "title": "differentiate"
      },
      "index": {
        "description": "Forward difference quotient Shortens the signal by one Inverts Synthesizer.Plain.Filter.Recursive.Integration.run in the sense that differentiate zero integrate The signal is shifted by half time unit",
        "hierarchy": "Synthesizer Plain Filter NonRecursive",
        "module": "Synthesizer.Plain.Filter.NonRecursive",
        "name": "differentiate",
        "normalized": "T a-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "T v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-NonRecursive.html#v:differentiate2",
      "description": {
        "fct-descr": "Second derivative.\nIt is \u003ctt\u003edifferentiate2 == differentiate . differentiate\u003c/tt\u003e\nbut \u003ctt\u003e\u003ca\u003edifferentiate2\u003c/a\u003e\u003c/tt\u003e should be faster.\n",
        "fct-module": "Synthesizer.Plain.Filter.NonRecursive",
        "fct-package": "synthesizer",
        "fct-signature": "T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-NonRecursive.html#differentiate2",
        "fct-type": "unknown",
        "title": "differentiate2"
      },
      "index": {
        "description": "Second derivative It is differentiate2 differentiate differentiate but differentiate2 should be faster",
        "hierarchy": "Synthesizer Plain Filter NonRecursive",
        "module": "Synthesizer.Plain.Filter.NonRecursive",
        "name": "differentiate2",
        "normalized": "T a-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "T v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-NonRecursive.html#v:differentiateCenter",
      "description": {
        "fct-descr": "\u003cp\u003eCentral difference quotient.\nShortens the signal by two elements,\nand shifts the signal by one element.\n(Which can be fixed by prepending an appropriate value.)\nFor linear functions this will yield\nessentially the same result as \u003ctt\u003e\u003ca\u003edifferentiate\u003c/a\u003e\u003c/tt\u003e.\nYou obtain the result of \u003ctt\u003e\u003ca\u003edifferentiateCenter\u003c/a\u003e\u003c/tt\u003e\nif you smooth the one of \u003ctt\u003e\u003ca\u003edifferentiate\u003c/a\u003e\u003c/tt\u003e\nby averaging pairs of adjacent values.\n\u003c/p\u003e\u003cp\u003eToDo: Vector variant\n\u003c/p\u003e",
        "fct-module": "Synthesizer.Plain.Filter.NonRecursive",
        "fct-package": "synthesizer",
        "fct-signature": "T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-NonRecursive.html#differentiateCenter",
        "fct-type": "unknown",
        "title": "differentiateCenter"
      },
      "index": {
        "description": "Central difference quotient Shortens the signal by two elements and shifts the signal by one element Which can be fixed by prepending an appropriate value For linear functions this will yield essentially the same result as differentiate You obtain the result of differentiateCenter if you smooth the one of differentiate by averaging pairs of adjacent values ToDo Vector variant",
        "hierarchy": "Synthesizer Plain Filter NonRecursive",
        "module": "Synthesizer.Plain.Filter.NonRecursive",
        "name": "differentiateCenter",
        "normalized": "T a-\u003eT a",
        "package": "synthesizer",
        "partial": "Center",
        "signature": "T v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-NonRecursive.html#v:downsample2",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.NonRecursive",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-NonRecursive.html#downsample2",
        "fct-type": "unknown",
        "title": "downsample2"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter NonRecursive",
        "module": "Synthesizer.Plain.Filter.NonRecursive",
        "name": "downsample2",
        "normalized": "T a-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "T a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-NonRecursive.html#v:envelope",
      "description": {
        "fct-descr": "the envelope \nthe signal to be enveloped \n",
        "fct-module": "Synthesizer.Plain.Filter.NonRecursive",
        "fct-package": "synthesizer",
        "fct-signature": "T a-\u003e T a-\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-NonRecursive.html#envelope",
        "fct-type": "unknown",
        "title": "envelope"
      },
      "index": {
        "description": "the envelope the signal to be enveloped",
        "hierarchy": "Synthesizer Plain Filter NonRecursive",
        "module": "Synthesizer.Plain.Filter.NonRecursive",
        "name": "envelope",
        "normalized": "T a-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "T a-\u003eT a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-NonRecursive.html#v:envelopeVector",
      "description": {
        "fct-descr": "the envelope \nthe signal to be enveloped \n",
        "fct-module": "Synthesizer.Plain.Filter.NonRecursive",
        "fct-package": "synthesizer",
        "fct-signature": "T a-\u003e T v-\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-NonRecursive.html#envelopeVector",
        "fct-type": "unknown",
        "title": "envelopeVector"
      },
      "index": {
        "description": "the envelope the signal to be enveloped",
        "hierarchy": "Synthesizer Plain Filter NonRecursive",
        "module": "Synthesizer.Plain.Filter.NonRecursive",
        "name": "envelopeVector",
        "normalized": "T a-\u003eT b-\u003eT b",
        "package": "synthesizer",
        "partial": "Vector",
        "signature": "T a-\u003eT v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-NonRecursive.html#v:fadeInOut",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.NonRecursive",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e Int -\u003e Int -\u003e T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-NonRecursive.html#fadeInOut",
        "fct-type": "unknown",
        "title": "fadeInOut"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter NonRecursive",
        "module": "Synthesizer.Plain.Filter.NonRecursive",
        "name": "fadeInOut",
        "normalized": "Int-\u003eInt-\u003eInt-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "In Out",
        "signature": "Int-\u003eInt-\u003eInt-\u003eT a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-NonRecursive.html#v:fadeInOutAlt",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.NonRecursive",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e Int -\u003e Int -\u003e T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-NonRecursive.html#fadeInOutAlt",
        "fct-type": "unknown",
        "title": "fadeInOutAlt"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter NonRecursive",
        "module": "Synthesizer.Plain.Filter.NonRecursive",
        "name": "fadeInOutAlt",
        "normalized": "Int-\u003eInt-\u003eInt-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "In Out Alt",
        "signature": "Int-\u003eInt-\u003eInt-\u003eT a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-NonRecursive.html#v:gaussian",
      "description": {
        "fct-descr": "\u003ctt\u003eeps\u003c/tt\u003e is the threshold relatively to the maximum.\nThat is, if the gaussian falls below \u003ctt\u003eeps * gaussian 0\u003c/tt\u003e,\nthen the function truncated.\n",
        "fct-module": "Synthesizer.Plain.Filter.NonRecursive",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e a -\u003e a -\u003e T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-NonRecursive.html#gaussian",
        "fct-type": "unknown",
        "title": "gaussian"
      },
      "index": {
        "description": "eps is the threshold relatively to the maximum That is if the gaussian falls below eps gaussian then the function truncated",
        "hierarchy": "Synthesizer Plain Filter NonRecursive",
        "module": "Synthesizer.Plain.Filter.NonRecursive",
        "name": "gaussian",
        "normalized": "a-\u003ea-\u003ea-\u003eT b-\u003eT b",
        "package": "synthesizer",
        "partial": "",
        "signature": "a-\u003ea-\u003ea-\u003eT v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-NonRecursive.html#v:generic",
      "description": {
        "fct-descr": "Unmodulated non-recursive filter \n",
        "fct-module": "Synthesizer.Plain.Filter.NonRecursive",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-NonRecursive.html#generic",
        "fct-type": "unknown",
        "title": "generic"
      },
      "index": {
        "description": "Unmodulated non-recursive filter",
        "hierarchy": "Synthesizer Plain Filter NonRecursive",
        "module": "Synthesizer.Plain.Filter.NonRecursive",
        "name": "generic",
        "normalized": "T a-\u003eT b-\u003eT b",
        "package": "synthesizer",
        "partial": "",
        "signature": "T a-\u003eT v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-NonRecursive.html#v:genericAlt",
      "description": {
        "fct-descr": "\u003cp\u003eUnmodulated non-recursive filter\nOutput has same length as the input.\n\u003c/p\u003e\u003cp\u003eIt is elegant but leaks memory.\n\u003c/p\u003e",
        "fct-module": "Synthesizer.Plain.Filter.NonRecursive",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-NonRecursive.html#genericAlt",
        "fct-type": "unknown",
        "title": "genericAlt"
      },
      "index": {
        "description": "Unmodulated non-recursive filter Output has same length as the input It is elegant but leaks memory",
        "hierarchy": "Synthesizer Plain Filter NonRecursive",
        "module": "Synthesizer.Plain.Filter.NonRecursive",
        "name": "genericAlt",
        "normalized": "T a-\u003eT b-\u003eT b",
        "package": "synthesizer",
        "partial": "Alt",
        "signature": "T a-\u003eT v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-NonRecursive.html#v:propGeneric",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.NonRecursive",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e T v -\u003e Bool",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-NonRecursive.html#propGeneric",
        "fct-type": "unknown",
        "title": "propGeneric"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter NonRecursive",
        "module": "Synthesizer.Plain.Filter.NonRecursive",
        "name": "propGeneric",
        "normalized": "T a-\u003eT b-\u003eBool",
        "package": "synthesizer",
        "partial": "Generic",
        "signature": "T a-\u003eT v-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-NonRecursive.html#v:ratioFreqToVariance",
      "description": {
        "fct-descr": "Compute the variance of the Gaussian\n  such that its Fourier transform has value \u003ctt\u003eratio\u003c/tt\u003e at frequency \u003ctt\u003efreq\u003c/tt\u003e.\n",
        "fct-module": "Synthesizer.Plain.Filter.NonRecursive",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e a -\u003e a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-NonRecursive.html#ratioFreqToVariance",
        "fct-type": "unknown",
        "title": "ratioFreqToVariance"
      },
      "index": {
        "description": "Compute the variance of the Gaussian such that its Fourier transform has value ratio at frequency freq",
        "hierarchy": "Synthesizer Plain Filter NonRecursive",
        "module": "Synthesizer.Plain.Filter.NonRecursive",
        "name": "ratioFreqToVariance",
        "normalized": "a-\u003ea-\u003ea",
        "package": "synthesizer",
        "partial": "Freq To Variance",
        "signature": "a-\u003ea-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-NonRecursive.html#v:sums",
      "description": {
        "fct-descr": "Moving (uniformly weighted) average in the most trivial form.\nThis is very slow and needs about \u003ctt\u003en * length x\u003c/tt\u003e operations.\n",
        "fct-module": "Synthesizer.Plain.Filter.NonRecursive",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-NonRecursive.html#sums",
        "fct-type": "unknown",
        "title": "sums"
      },
      "index": {
        "description": "Moving uniformly weighted average in the most trivial form This is very slow and needs about length operations",
        "hierarchy": "Synthesizer Plain Filter NonRecursive",
        "module": "Synthesizer.Plain.Filter.NonRecursive",
        "name": "sums",
        "normalized": "Int-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "Int-\u003eT v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-NonRecursive.html#v:sumsDownsample2",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.NonRecursive",
        "fct-package": "synthesizer",
        "fct-signature": "T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-NonRecursive.html#sumsDownsample2",
        "fct-type": "unknown",
        "title": "sumsDownsample2"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter NonRecursive",
        "module": "Synthesizer.Plain.Filter.NonRecursive",
        "name": "sumsDownsample2",
        "normalized": "T a-\u003eT a",
        "package": "synthesizer",
        "partial": "Downsample",
        "signature": "T v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-NonRecursive.html#v:sumsPyramid",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.NonRecursive",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-NonRecursive.html#sumsPyramid",
        "fct-type": "unknown",
        "title": "sumsPyramid"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter NonRecursive",
        "module": "Synthesizer.Plain.Filter.NonRecursive",
        "name": "sumsPyramid",
        "normalized": "Int-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "Pyramid",
        "signature": "Int-\u003eT v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-NonRecursive.html#v:sumsUpsampleEven",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.NonRecursive",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e T v -\u003e T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-NonRecursive.html#sumsUpsampleEven",
        "fct-type": "unknown",
        "title": "sumsUpsampleEven"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter NonRecursive",
        "module": "Synthesizer.Plain.Filter.NonRecursive",
        "name": "sumsUpsampleEven",
        "normalized": "Int-\u003eT a-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "Upsample Even",
        "signature": "Int-\u003eT v-\u003eT v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-NonRecursive.html#v:sumsUpsampleOdd",
      "description": {
        "fct-descr": "\u003cp\u003eGiven a list of numbers\nand a list of sums of (2*k) of successive summands,\ncompute a list of the sums of (2*k+1) or (2*k+2) summands.\n\u003c/p\u003e\u003cp\u003eEample for 2*k+1\n\u003c/p\u003e\u003cpre\u003e\n [0+1+2+3, 2+3+4+5, 4+5+6+7, ...] -\u003e\n    [0+1+2+3+4, 1+2+3+4+5, 2+3+4+5+6, 3+4+5+6+7, 4+5+6+7+8, ...]\n\u003c/pre\u003e\u003cp\u003eExample for 2*k+2\n\u003c/p\u003e\u003cpre\u003e\n [0+1+2+3, 2+3+4+5, 4+5+6+7, ...] -\u003e\n    [0+1+2+3+4+5, 1+2+3+4+5+6, 2+3+4+5+6+7, 3+4+5+6+7+8, 4+5+6+7+8+9, ...]\n\u003c/pre\u003e",
        "fct-module": "Synthesizer.Plain.Filter.NonRecursive",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e T v -\u003e T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-NonRecursive.html#sumsUpsampleOdd",
        "fct-type": "unknown",
        "title": "sumsUpsampleOdd"
      },
      "index": {
        "description": "Given list of numbers and list of sums of of successive summands compute list of the sums of or summands Eample for Example for",
        "hierarchy": "Synthesizer Plain Filter NonRecursive",
        "module": "Synthesizer.Plain.Filter.NonRecursive",
        "name": "sumsUpsampleOdd",
        "normalized": "Int-\u003eT a-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "Upsample Odd",
        "signature": "Int-\u003eT v-\u003eT v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Allpass.html#t:Parameter",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Allpass",
        "fct-package": "synthesizer",
        "fct-signature": "newtype",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Allpass.html#Parameter",
        "fct-type": "unknown",
        "title": "Parameter"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Allpass",
        "module": "Synthesizer.Plain.Filter.Recursive.Allpass",
        "name": "Parameter",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Parameter",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Allpass.html#v:cascade",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Allpass",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e T (Parameter a) -\u003e T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Allpass.html#cascade",
        "fct-type": "unknown",
        "title": "cascade"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Allpass",
        "module": "Synthesizer.Plain.Filter.Recursive.Allpass",
        "name": "cascade",
        "normalized": "Int-\u003eT(Parameter a)-\u003eT b-\u003eT b",
        "package": "synthesizer",
        "partial": "",
        "signature": "Int-\u003eT(Parameter a)-\u003eT v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Allpass.html#v:cascadeCausal",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Allpass",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e T (Parameter a, v) v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Allpass.html#cascadeCausal",
        "fct-type": "unknown",
        "title": "cascadeCausal"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Allpass",
        "module": "Synthesizer.Plain.Filter.Recursive.Allpass",
        "name": "cascadeCausal",
        "normalized": "Int-\u003eT(Parameter a,b)b",
        "package": "synthesizer",
        "partial": "Causal",
        "signature": "Int-\u003eT(Parameter a,v)v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Allpass.html#v:cascadeCausalModifier",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Allpass",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e T (Parameter a, v) v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Allpass.html#cascadeCausalModifier",
        "fct-type": "unknown",
        "title": "cascadeCausalModifier"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Allpass",
        "module": "Synthesizer.Plain.Filter.Recursive.Allpass",
        "name": "cascadeCausalModifier",
        "normalized": "Int-\u003eT(Parameter a,b)b",
        "package": "synthesizer",
        "partial": "Causal Modifier",
        "signature": "Int-\u003eT(Parameter a,v)v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Allpass.html#v:cascadeCausalStacked",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Allpass",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e T (Parameter a, v) v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Allpass.html#cascadeCausalStacked",
        "fct-type": "unknown",
        "title": "cascadeCausalStacked"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Allpass",
        "module": "Synthesizer.Plain.Filter.Recursive.Allpass",
        "name": "cascadeCausalStacked",
        "normalized": "Int-\u003eT(Parameter a,b)b",
        "package": "synthesizer",
        "partial": "Causal Stacked",
        "signature": "Int-\u003eT(Parameter a,v)v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Allpass.html#v:cascadeIterative",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Allpass",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e T (Parameter a) -\u003e T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Allpass.html#cascadeIterative",
        "fct-type": "unknown",
        "title": "cascadeIterative"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Allpass",
        "module": "Synthesizer.Plain.Filter.Recursive.Allpass",
        "name": "cascadeIterative",
        "normalized": "Int-\u003eT(Parameter a)-\u003eT b-\u003eT b",
        "package": "synthesizer",
        "partial": "Iterative",
        "signature": "Int-\u003eT(Parameter a)-\u003eT v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Allpass.html#v:cascadeModifier",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Allpass",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e Simple [v] (Parameter a) v v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Allpass.html#cascadeModifier",
        "fct-type": "unknown",
        "title": "cascadeModifier"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Allpass",
        "module": "Synthesizer.Plain.Filter.Recursive.Allpass",
        "name": "cascadeModifier",
        "normalized": "Int-\u003eSimple[a](Parameter b)a a",
        "package": "synthesizer",
        "partial": "Modifier",
        "signature": "Int-\u003eSimple[v](Parameter a)v v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Allpass.html#v:cascadeState",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Allpass",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e T (Parameter a) -\u003e T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Allpass.html#cascadeState",
        "fct-type": "unknown",
        "title": "cascadeState"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Allpass",
        "module": "Synthesizer.Plain.Filter.Recursive.Allpass",
        "name": "cascadeState",
        "normalized": "Int-\u003eT(Parameter a)-\u003eT b-\u003eT b",
        "package": "synthesizer",
        "partial": "State",
        "signature": "Int-\u003eT(Parameter a)-\u003eT v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Allpass.html#v:cascadeStep",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Allpass",
        "fct-package": "synthesizer",
        "fct-signature": "Parameter a -\u003e v -\u003e State [v] v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Allpass.html#cascadeStep",
        "fct-type": "unknown",
        "title": "cascadeStep"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Allpass",
        "module": "Synthesizer.Plain.Filter.Recursive.Allpass",
        "name": "cascadeStep",
        "normalized": "Parameter a-\u003eb-\u003eState[b]b",
        "package": "synthesizer",
        "partial": "Step",
        "signature": "Parameter a-\u003ev-\u003eState[v]v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Allpass.html#v:cascadeStepRec",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Allpass",
        "fct-package": "synthesizer",
        "fct-signature": "Parameter a -\u003e v -\u003e State [v] v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Allpass.html#cascadeStepRec",
        "fct-type": "unknown",
        "title": "cascadeStepRec"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Allpass",
        "module": "Synthesizer.Plain.Filter.Recursive.Allpass",
        "name": "cascadeStepRec",
        "normalized": "Parameter a-\u003eb-\u003eState[b]b",
        "package": "synthesizer",
        "partial": "Step Rec",
        "signature": "Parameter a-\u003ev-\u003eState[v]v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Allpass.html#v:cascadeStepRecAlt",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Allpass",
        "fct-package": "synthesizer",
        "fct-signature": "Parameter a -\u003e v -\u003e State [v] v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Allpass.html#cascadeStepRecAlt",
        "fct-type": "unknown",
        "title": "cascadeStepRecAlt"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Allpass",
        "module": "Synthesizer.Plain.Filter.Recursive.Allpass",
        "name": "cascadeStepRecAlt",
        "normalized": "Parameter a-\u003eb-\u003eState[b]b",
        "package": "synthesizer",
        "partial": "Step Rec Alt",
        "signature": "Parameter a-\u003ev-\u003eState[v]v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Allpass.html#v:cascadeStepStack",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Allpass",
        "fct-package": "synthesizer",
        "fct-signature": "Parameter a -\u003e v -\u003e State [v] v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Allpass.html#cascadeStepStack",
        "fct-type": "unknown",
        "title": "cascadeStepStack"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Allpass",
        "module": "Synthesizer.Plain.Filter.Recursive.Allpass",
        "name": "cascadeStepStack",
        "normalized": "Parameter a-\u003eb-\u003eState[b]b",
        "package": "synthesizer",
        "partial": "Step Stack",
        "signature": "Parameter a-\u003ev-\u003eState[v]v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Allpass.html#v:cascadeStepStackPairs",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Allpass",
        "fct-package": "synthesizer",
        "fct-signature": "Parameter a -\u003e v -\u003e State [(v, v)] v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Allpass.html#cascadeStepStackPairs",
        "fct-type": "unknown",
        "title": "cascadeStepStackPairs"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Allpass",
        "module": "Synthesizer.Plain.Filter.Recursive.Allpass",
        "name": "cascadeStepStackPairs",
        "normalized": "Parameter a-\u003eb-\u003eState[(b,b)]b",
        "package": "synthesizer",
        "partial": "Step Stack Pairs",
        "signature": "Parameter a-\u003ev-\u003eState[(v,v)]v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Allpass.html#v:firstOrder",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Allpass",
        "fct-package": "synthesizer",
        "fct-signature": "T (Parameter a) -\u003e T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Allpass.html#firstOrder",
        "fct-type": "unknown",
        "title": "firstOrder"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Allpass",
        "module": "Synthesizer.Plain.Filter.Recursive.Allpass",
        "name": "firstOrder",
        "normalized": "T(Parameter a)-\u003eT b-\u003eT b",
        "package": "synthesizer",
        "partial": "Order",
        "signature": "T(Parameter a)-\u003eT v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Allpass.html#v:firstOrderCausal",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Allpass",
        "fct-package": "synthesizer",
        "fct-signature": "T (Parameter a, v) v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Allpass.html#firstOrderCausal",
        "fct-type": "unknown",
        "title": "firstOrderCausal"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Allpass",
        "module": "Synthesizer.Plain.Filter.Recursive.Allpass",
        "name": "firstOrderCausal",
        "normalized": "T(Parameter a,b)b",
        "package": "synthesizer",
        "partial": "Order Causal",
        "signature": "T(Parameter a,v)v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Allpass.html#v:firstOrderModifier",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Allpass",
        "fct-package": "synthesizer",
        "fct-signature": "Simple (v, v) (Parameter a) v v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Allpass.html#firstOrderModifier",
        "fct-type": "unknown",
        "title": "firstOrderModifier"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Allpass",
        "module": "Synthesizer.Plain.Filter.Recursive.Allpass",
        "name": "firstOrderModifier",
        "normalized": "Simple(a,a)(Parameter b)a a",
        "package": "synthesizer",
        "partial": "Order Modifier",
        "signature": "Simple(v,v)(Parameter a)v v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Allpass.html#v:firstOrderStep",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Allpass",
        "fct-package": "synthesizer",
        "fct-signature": "Parameter a -\u003e v -\u003e State (v, v) v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Allpass.html#firstOrderStep",
        "fct-type": "unknown",
        "title": "firstOrderStep"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Allpass",
        "module": "Synthesizer.Plain.Filter.Recursive.Allpass",
        "name": "firstOrderStep",
        "normalized": "Parameter a-\u003eb-\u003eState(b,b)b",
        "package": "synthesizer",
        "partial": "Order Step",
        "signature": "Parameter a-\u003ev-\u003eState(v,v)v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Allpass.html#v:flangerParameter",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Allpass",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e a -\u003e Parameter a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Allpass.html#flangerParameter",
        "fct-type": "unknown",
        "title": "flangerParameter"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Allpass",
        "module": "Synthesizer.Plain.Filter.Recursive.Allpass",
        "name": "flangerParameter",
        "normalized": "Int-\u003ea-\u003eParameter a",
        "package": "synthesizer",
        "partial": "Parameter",
        "signature": "Int-\u003ea-\u003eParameter a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Allpass.html#v:flangerPhase",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Allpass",
        "fct-package": "synthesizer",
        "fct-signature": "a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Allpass.html#flangerPhase",
        "fct-type": "unknown",
        "title": "flangerPhase"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Allpass",
        "module": "Synthesizer.Plain.Filter.Recursive.Allpass",
        "name": "flangerPhase",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Phase",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Allpass.html#v:fromPairs",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Allpass",
        "fct-package": "synthesizer",
        "fct-signature": "[(a, a)] -\u003e [a]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Allpass.html#fromPairs",
        "fct-type": "unknown",
        "title": "fromPairs"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Allpass",
        "module": "Synthesizer.Plain.Filter.Recursive.Allpass",
        "name": "fromPairs",
        "normalized": "[(a,a)]-\u003e[a]",
        "package": "synthesizer",
        "partial": "Pairs",
        "signature": "[(a,a)]-\u003e[a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Allpass.html#v:makePhase",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Allpass",
        "fct-package": "synthesizer",
        "fct-signature": "Parameter a -\u003e a -\u003e a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Allpass.html#makePhase",
        "fct-type": "unknown",
        "title": "makePhase"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Allpass",
        "module": "Synthesizer.Plain.Filter.Recursive.Allpass",
        "name": "makePhase",
        "normalized": "Parameter a-\u003ea-\u003ea",
        "package": "synthesizer",
        "partial": "Phase",
        "signature": "Parameter a-\u003ea-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Allpass.html#v:parameter",
      "description": {
        "fct-descr": "The number of equally designed 1st order allpasses. \nThe phase shift to be achieved for the given frequency. \nThe frequency we specified the phase shift for. \n",
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Allpass",
        "fct-package": "synthesizer",
        "fct-signature": "Int-\u003e a-\u003e a-\u003e Parameter a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Allpass.html#parameter",
        "fct-type": "unknown",
        "title": "parameter"
      },
      "index": {
        "description": "The number of equally designed st order allpasses The phase shift to be achieved for the given frequency The frequency we specified the phase shift for",
        "hierarchy": "Synthesizer Plain Filter Recursive Allpass",
        "module": "Synthesizer.Plain.Filter.Recursive.Allpass",
        "name": "parameter",
        "normalized": "Int-\u003ea-\u003ea-\u003eParameter a",
        "package": "synthesizer",
        "partial": "",
        "signature": "Int-\u003ea-\u003ea-\u003eParameter a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Allpass.html#v:toPairs",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Allpass",
        "fct-package": "synthesizer",
        "fct-signature": "[a] -\u003e [(a, a)]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Allpass.html#toPairs",
        "fct-type": "unknown",
        "title": "toPairs"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Allpass",
        "module": "Synthesizer.Plain.Filter.Recursive.Allpass",
        "name": "toPairs",
        "normalized": "[a]-\u003e[(a,a)]",
        "package": "synthesizer",
        "partial": "Pairs",
        "signature": "[a]-\u003e[(a,a)]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-AllpassPoly.html#t:Parameter",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.AllpassPoly",
        "fct-package": "synthesizer",
        "fct-signature": "newtype",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-AllpassPoly.html#Parameter",
        "fct-type": "unknown",
        "title": "Parameter"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive AllpassPoly",
        "module": "Synthesizer.Plain.Filter.Recursive.AllpassPoly",
        "name": "Parameter",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Parameter",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-AllpassPoly.html#v:integrateNum",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.AllpassPoly",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e (a, a) -\u003e (a -\u003e v) -\u003e v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-AllpassPoly.html#integrateNum",
        "fct-type": "unknown",
        "title": "integrateNum"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive AllpassPoly",
        "module": "Synthesizer.Plain.Filter.Recursive.AllpassPoly",
        "name": "integrateNum",
        "normalized": "Int-\u003e(a,a)-\u003e(a-\u003eb)-\u003eb",
        "package": "synthesizer",
        "partial": "Num",
        "signature": "Int-\u003e(a,a)-\u003e(a-\u003ev)-\u003ev"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-AllpassPoly.html#v:integrateScrewExp",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.AllpassPoly",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e Int -\u003e (a, a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-AllpassPoly.html#integrateScrewExp",
        "fct-type": "unknown",
        "title": "integrateScrewExp"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive AllpassPoly",
        "module": "Synthesizer.Plain.Filter.Recursive.AllpassPoly",
        "name": "integrateScrewExp",
        "normalized": "a-\u003eInt-\u003e(a,a)",
        "package": "synthesizer",
        "partial": "Screw Exp",
        "signature": "a-\u003eInt-\u003e(a,a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-AllpassPoly.html#v:makePhase",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.AllpassPoly",
        "fct-package": "synthesizer",
        "fct-signature": "Parameter a -\u003e a -\u003e a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-AllpassPoly.html#makePhase",
        "fct-type": "unknown",
        "title": "makePhase"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive AllpassPoly",
        "module": "Synthesizer.Plain.Filter.Recursive.AllpassPoly",
        "name": "makePhase",
        "normalized": "Parameter a-\u003ea-\u003ea",
        "package": "synthesizer",
        "partial": "Phase",
        "signature": "Parameter a-\u003ea-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-AllpassPoly.html#v:scalarProdScrewExp",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.AllpassPoly",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e Int -\u003e a -\u003e Int -\u003e Int -\u003e a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-AllpassPoly.html#scalarProdScrewExp",
        "fct-type": "unknown",
        "title": "scalarProdScrewExp"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive AllpassPoly",
        "module": "Synthesizer.Plain.Filter.Recursive.AllpassPoly",
        "name": "scalarProdScrewExp",
        "normalized": "a-\u003eInt-\u003ea-\u003eInt-\u003eInt-\u003ea",
        "package": "synthesizer",
        "partial": "Prod Screw Exp",
        "signature": "a-\u003eInt-\u003ea-\u003eInt-\u003eInt-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-AllpassPoly.html#v:screwProd",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.AllpassPoly",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e a -\u003e Int -\u003e Int -\u003e a -\u003e a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-AllpassPoly.html#screwProd",
        "fct-type": "unknown",
        "title": "screwProd"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive AllpassPoly",
        "module": "Synthesizer.Plain.Filter.Recursive.AllpassPoly",
        "name": "screwProd",
        "normalized": "Int-\u003ea-\u003eInt-\u003eInt-\u003ea-\u003ea",
        "package": "synthesizer",
        "partial": "Prod",
        "signature": "Int-\u003ea-\u003eInt-\u003eInt-\u003ea-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-AllpassPoly.html#v:shiftParam",
      "description": {
        "fct-descr": "Compute coefficients for an allpass that shifts low frequencies\n     by approximately the shift you want.\n     To achieve this we solve a linear least squares problem,\n     where low frequencies are more weighted than high ones.\n     The output is a list of coefficients for an arbitrary order allpass. \n",
        "fct-module": "Synthesizer.Plain.Filter.Recursive.AllpassPoly",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e a -\u003e a -\u003e Parameter a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-AllpassPoly.html#shiftParam",
        "fct-type": "unknown",
        "title": "shiftParam"
      },
      "index": {
        "description": "Compute coefficients for an allpass that shifts low frequencies by approximately the shift you want To achieve this we solve linear least squares problem where low frequencies are more weighted than high ones The output is list of coefficients for an arbitrary order allpass",
        "hierarchy": "Synthesizer Plain Filter Recursive AllpassPoly",
        "module": "Synthesizer.Plain.Filter.Recursive.AllpassPoly",
        "name": "shiftParam",
        "normalized": "Int-\u003ea-\u003ea-\u003eParameter a",
        "package": "synthesizer",
        "partial": "Param",
        "signature": "Int-\u003ea-\u003ea-\u003eParameter a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Butterworth.html#t:Parameter",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Butterworth",
        "fct-package": "synthesizer",
        "fct-signature": "type",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Butterworth.html#Parameter",
        "fct-type": "unknown",
        "title": "Parameter"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Butterworth",
        "module": "Synthesizer.Plain.Filter.Recursive.Butterworth",
        "name": "Parameter",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Parameter",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Butterworth.html#v:causal",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Butterworth",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e T (Parameter a, v) v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Butterworth.html#causal",
        "fct-type": "unknown",
        "title": "causal"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Butterworth",
        "module": "Synthesizer.Plain.Filter.Recursive.Butterworth",
        "name": "causal",
        "normalized": "Int-\u003eT(Parameter a,b)b",
        "package": "synthesizer",
        "partial": "",
        "signature": "Int-\u003eT(Parameter a,v)v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Butterworth.html#v:causalPole",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Butterworth",
        "fct-package": "synthesizer",
        "fct-signature": "Passband -\u003e Int -\u003e T (Pole a, v) v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Butterworth.html#causalPole",
        "fct-type": "unknown",
        "title": "causalPole"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Butterworth",
        "module": "Synthesizer.Plain.Filter.Recursive.Butterworth",
        "name": "causalPole",
        "normalized": "Passband-\u003eInt-\u003eT(Pole a,b)b",
        "package": "synthesizer",
        "partial": "Pole",
        "signature": "Passband-\u003eInt-\u003eT(Pole a,v)v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Butterworth.html#v:checkedHalf",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Butterworth",
        "fct-package": "synthesizer",
        "fct-signature": "String -\u003e Int -\u003e Int",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Butterworth.html#checkedHalf",
        "fct-type": "unknown",
        "title": "checkedHalf"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Butterworth",
        "module": "Synthesizer.Plain.Filter.Recursive.Butterworth",
        "name": "checkedHalf",
        "normalized": "String-\u003eInt-\u003eInt",
        "package": "synthesizer",
        "partial": "Half",
        "signature": "String-\u003eInt-\u003eInt"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Butterworth.html#v:highpassCausalPole",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Butterworth",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e T (Pole a, v) v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Butterworth.html#highpassCausalPole",
        "fct-type": "unknown",
        "title": "highpassCausalPole"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Butterworth",
        "module": "Synthesizer.Plain.Filter.Recursive.Butterworth",
        "name": "highpassCausalPole",
        "normalized": "Int-\u003eT(Pole a,b)b",
        "package": "synthesizer",
        "partial": "Causal Pole",
        "signature": "Int-\u003eT(Pole a,v)v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Butterworth.html#v:highpassPole",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Butterworth",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e T a -\u003e T a -\u003e T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Butterworth.html#highpassPole",
        "fct-type": "unknown",
        "title": "highpassPole"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Butterworth",
        "module": "Synthesizer.Plain.Filter.Recursive.Butterworth",
        "name": "highpassPole",
        "normalized": "Int-\u003eT a-\u003eT a-\u003eT b-\u003eT b",
        "package": "synthesizer",
        "partial": "Pole",
        "signature": "Int-\u003eT a-\u003eT a-\u003eT v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Butterworth.html#v:lowpassCausalPole",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Butterworth",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e T (Pole a, v) v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Butterworth.html#lowpassCausalPole",
        "fct-type": "unknown",
        "title": "lowpassCausalPole"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Butterworth",
        "module": "Synthesizer.Plain.Filter.Recursive.Butterworth",
        "name": "lowpassCausalPole",
        "normalized": "Int-\u003eT(Pole a,b)b",
        "package": "synthesizer",
        "partial": "Causal Pole",
        "signature": "Int-\u003eT(Pole a,v)v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Butterworth.html#v:lowpassPole",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Butterworth",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e T a -\u003e T a -\u003e T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Butterworth.html#lowpassPole",
        "fct-type": "unknown",
        "title": "lowpassPole"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Butterworth",
        "module": "Synthesizer.Plain.Filter.Recursive.Butterworth",
        "name": "lowpassPole",
        "normalized": "Int-\u003eT a-\u003eT a-\u003eT b-\u003eT b",
        "package": "synthesizer",
        "partial": "Pole",
        "signature": "Int-\u003eT a-\u003eT a-\u003eT v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Butterworth.html#v:makeSines",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Butterworth",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e [a]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Butterworth.html#makeSines",
        "fct-type": "unknown",
        "title": "makeSines"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Butterworth",
        "module": "Synthesizer.Plain.Filter.Recursive.Butterworth",
        "name": "makeSines",
        "normalized": "Int-\u003e[a]",
        "package": "synthesizer",
        "partial": "Sines",
        "signature": "Int-\u003e[a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Butterworth.html#v:modifier",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Butterworth",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e Simple (Status v) (Parameter a) v v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Butterworth.html#modifier",
        "fct-type": "unknown",
        "title": "modifier"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Butterworth",
        "module": "Synthesizer.Plain.Filter.Recursive.Butterworth",
        "name": "modifier",
        "normalized": "Int-\u003eSimple(Status a)(Parameter b)a a",
        "package": "synthesizer",
        "partial": "",
        "signature": "Int-\u003eSimple(Status v)(Parameter a)v v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Butterworth.html#v:parameter",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Butterworth",
        "fct-package": "synthesizer",
        "fct-signature": "Passband -\u003e Int -\u003e Pole a -\u003e Parameter a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Butterworth.html#parameter",
        "fct-type": "unknown",
        "title": "parameter"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Butterworth",
        "module": "Synthesizer.Plain.Filter.Recursive.Butterworth",
        "name": "parameter",
        "normalized": "Passband-\u003eInt-\u003ePole a-\u003eParameter a",
        "package": "synthesizer",
        "partial": "",
        "signature": "Passband-\u003eInt-\u003ePole a-\u003eParameter a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Butterworth.html#v:partialParameter",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Butterworth",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e a -\u003e a -\u003e Parameter a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Butterworth.html#partialParameter",
        "fct-type": "unknown",
        "title": "partialParameter"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Butterworth",
        "module": "Synthesizer.Plain.Filter.Recursive.Butterworth",
        "name": "partialParameter",
        "normalized": "a-\u003ea-\u003ea-\u003eParameter a",
        "package": "synthesizer",
        "partial": "Parameter",
        "signature": "a-\u003ea-\u003ea-\u003eParameter a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Butterworth.html#v:partialParameterInstable",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Butterworth",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e a -\u003e a -\u003e Parameter a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Butterworth.html#partialParameterInstable",
        "fct-type": "unknown",
        "title": "partialParameterInstable"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Butterworth",
        "module": "Synthesizer.Plain.Filter.Recursive.Butterworth",
        "name": "partialParameterInstable",
        "normalized": "a-\u003ea-\u003ea-\u003eParameter a",
        "package": "synthesizer",
        "partial": "Parameter Instable",
        "signature": "a-\u003ea-\u003ea-\u003eParameter a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Butterworth.html#v:partialRatio",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Butterworth",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e a -\u003e a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Butterworth.html#partialRatio",
        "fct-type": "unknown",
        "title": "partialRatio"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Butterworth",
        "module": "Synthesizer.Plain.Filter.Recursive.Butterworth",
        "name": "partialRatio",
        "normalized": "Int-\u003ea-\u003ea",
        "package": "synthesizer",
        "partial": "Ratio",
        "signature": "Int-\u003ea-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Butterworth.html#v:runPole",
      "description": {
        "fct-descr": "\u003cp\u003eWhen called as \u003ctt\u003erunPole kind order ratio freqs\u003c/tt\u003e,\nthe filter amplifies frequency 0 with factor 1\nand frequency \u003ctt\u003efreq\u003c/tt\u003e with factor \u003ctt\u003eratio\u003c/tt\u003e.\n\u003c/p\u003e\u003cp\u003eIt uses the frequency and ratio information directly\nand thus cannot benefit from efficient parameter interpolation\n(asynchronous run of a ControlledProcess.\n\u003c/p\u003e",
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Butterworth",
        "fct-package": "synthesizer",
        "fct-signature": "Passband -\u003e Int -\u003e T a -\u003e T a -\u003e T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Butterworth.html#runPole",
        "fct-type": "unknown",
        "title": "runPole"
      },
      "index": {
        "description": "When called as runPole kind order ratio freqs the filter amplifies frequency with factor and frequency freq with factor ratio It uses the frequency and ratio information directly and thus cannot benefit from efficient parameter interpolation asynchronous run of ControlledProcess",
        "hierarchy": "Synthesizer Plain Filter Recursive Butterworth",
        "module": "Synthesizer.Plain.Filter.Recursive.Butterworth",
        "name": "runPole",
        "normalized": "Passband-\u003eInt-\u003eT a-\u003eT a-\u003eT b-\u003eT b",
        "package": "synthesizer",
        "partial": "Pole",
        "signature": "Passband-\u003eInt-\u003eT a-\u003eT a-\u003eT v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Butterworth.html#v:sineList",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Butterworth",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e [a]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Butterworth.html#sineList",
        "fct-type": "unknown",
        "title": "sineList"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Butterworth",
        "module": "Synthesizer.Plain.Filter.Recursive.Butterworth",
        "name": "sineList",
        "normalized": "a-\u003e[a]",
        "package": "synthesizer",
        "partial": "List",
        "signature": "a-\u003e[a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Butterworth.html#v:sineListFast",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Butterworth",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e [a]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Butterworth.html#sineListFast",
        "fct-type": "unknown",
        "title": "sineListFast"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Butterworth",
        "module": "Synthesizer.Plain.Filter.Recursive.Butterworth",
        "name": "sineListFast",
        "normalized": "a-\u003e[a]",
        "package": "synthesizer",
        "partial": "List Fast",
        "signature": "a-\u003e[a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Butterworth.html#v:sineListSlow",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Butterworth",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e [a]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Butterworth.html#sineListSlow",
        "fct-type": "unknown",
        "title": "sineListSlow"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Butterworth",
        "module": "Synthesizer.Plain.Filter.Recursive.Butterworth",
        "name": "sineListSlow",
        "normalized": "a-\u003e[a]",
        "package": "synthesizer",
        "partial": "List Slow",
        "signature": "a-\u003e[a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Chebyshev.html#t:ParameterA",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Chebyshev",
        "fct-package": "synthesizer",
        "fct-signature": "type",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Chebyshev.html#ParameterA",
        "fct-type": "unknown",
        "title": "ParameterA"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Chebyshev",
        "module": "Synthesizer.Plain.Filter.Recursive.Chebyshev",
        "name": "ParameterA",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Parameter",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Chebyshev.html#t:ParameterB",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Chebyshev",
        "fct-package": "synthesizer",
        "fct-signature": "type",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Chebyshev.html#ParameterB",
        "fct-type": "unknown",
        "title": "ParameterB"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Chebyshev",
        "module": "Synthesizer.Plain.Filter.Recursive.Chebyshev",
        "name": "ParameterB",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Parameter",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Chebyshev.html#v:causalA",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Chebyshev",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e T (ParameterA a, v) v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Chebyshev.html#causalA",
        "fct-type": "unknown",
        "title": "causalA"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Chebyshev",
        "module": "Synthesizer.Plain.Filter.Recursive.Chebyshev",
        "name": "causalA",
        "normalized": "Int-\u003eT(ParameterA a,b)b",
        "package": "synthesizer",
        "partial": "",
        "signature": "Int-\u003eT(ParameterA a,v)v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Chebyshev.html#v:causalAPole",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Chebyshev",
        "fct-package": "synthesizer",
        "fct-signature": "Passband -\u003e Int -\u003e T (Pole a, v) v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Chebyshev.html#causalAPole",
        "fct-type": "unknown",
        "title": "causalAPole"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Chebyshev",
        "module": "Synthesizer.Plain.Filter.Recursive.Chebyshev",
        "name": "causalAPole",
        "normalized": "Passband-\u003eInt-\u003eT(Pole a,b)b",
        "package": "synthesizer",
        "partial": "APole",
        "signature": "Passband-\u003eInt-\u003eT(Pole a,v)v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Chebyshev.html#v:causalB",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Chebyshev",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e T (ParameterB a, v) v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Chebyshev.html#causalB",
        "fct-type": "unknown",
        "title": "causalB"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Chebyshev",
        "module": "Synthesizer.Plain.Filter.Recursive.Chebyshev",
        "name": "causalB",
        "normalized": "Int-\u003eT(ParameterB a,b)b",
        "package": "synthesizer",
        "partial": "",
        "signature": "Int-\u003eT(ParameterB a,v)v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Chebyshev.html#v:causalBPole",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Chebyshev",
        "fct-package": "synthesizer",
        "fct-signature": "Passband -\u003e Int -\u003e T (Pole a, v) v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Chebyshev.html#causalBPole",
        "fct-type": "unknown",
        "title": "causalBPole"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Chebyshev",
        "module": "Synthesizer.Plain.Filter.Recursive.Chebyshev",
        "name": "causalBPole",
        "normalized": "Passband-\u003eInt-\u003eT(Pole a,b)b",
        "package": "synthesizer",
        "partial": "BPole",
        "signature": "Passband-\u003eInt-\u003eT(Pole a,v)v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Chebyshev.html#v:circleList",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Chebyshev",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e [T a]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Chebyshev.html#circleList",
        "fct-type": "unknown",
        "title": "circleList"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Chebyshev",
        "module": "Synthesizer.Plain.Filter.Recursive.Chebyshev",
        "name": "circleList",
        "normalized": "a-\u003e[T a]",
        "package": "synthesizer",
        "partial": "List",
        "signature": "a-\u003e[T a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Chebyshev.html#v:circleListFast",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Chebyshev",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e [T a]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Chebyshev.html#circleListFast",
        "fct-type": "unknown",
        "title": "circleListFast"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Chebyshev",
        "module": "Synthesizer.Plain.Filter.Recursive.Chebyshev",
        "name": "circleListFast",
        "normalized": "a-\u003e[T a]",
        "package": "synthesizer",
        "partial": "List Fast",
        "signature": "a-\u003e[T a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Chebyshev.html#v:circleListSlow",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Chebyshev",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e [T a]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Chebyshev.html#circleListSlow",
        "fct-type": "unknown",
        "title": "circleListSlow"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Chebyshev",
        "module": "Synthesizer.Plain.Filter.Recursive.Chebyshev",
        "name": "circleListSlow",
        "normalized": "a-\u003e[T a]",
        "package": "synthesizer",
        "partial": "List Slow",
        "signature": "a-\u003e[T a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Chebyshev.html#v:highpassACausalPole",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Chebyshev",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e T (Pole a, v) v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Chebyshev.html#highpassACausalPole",
        "fct-type": "unknown",
        "title": "highpassACausalPole"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Chebyshev",
        "module": "Synthesizer.Plain.Filter.Recursive.Chebyshev",
        "name": "highpassACausalPole",
        "normalized": "Int-\u003eT(Pole a,b)b",
        "package": "synthesizer",
        "partial": "ACausal Pole",
        "signature": "Int-\u003eT(Pole a,v)v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Chebyshev.html#v:highpassAPole",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Chebyshev",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e T a -\u003e T a -\u003e T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Chebyshev.html#highpassAPole",
        "fct-type": "unknown",
        "title": "highpassAPole"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Chebyshev",
        "module": "Synthesizer.Plain.Filter.Recursive.Chebyshev",
        "name": "highpassAPole",
        "normalized": "Int-\u003eT a-\u003eT a-\u003eT b-\u003eT b",
        "package": "synthesizer",
        "partial": "APole",
        "signature": "Int-\u003eT a-\u003eT a-\u003eT v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Chebyshev.html#v:highpassBCausalPole",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Chebyshev",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e T (Pole a, v) v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Chebyshev.html#highpassBCausalPole",
        "fct-type": "unknown",
        "title": "highpassBCausalPole"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Chebyshev",
        "module": "Synthesizer.Plain.Filter.Recursive.Chebyshev",
        "name": "highpassBCausalPole",
        "normalized": "Int-\u003eT(Pole a,b)b",
        "package": "synthesizer",
        "partial": "BCausal Pole",
        "signature": "Int-\u003eT(Pole a,v)v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Chebyshev.html#v:highpassBPole",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Chebyshev",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e T a -\u003e T a -\u003e T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Chebyshev.html#highpassBPole",
        "fct-type": "unknown",
        "title": "highpassBPole"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Chebyshev",
        "module": "Synthesizer.Plain.Filter.Recursive.Chebyshev",
        "name": "highpassBPole",
        "normalized": "Int-\u003eT a-\u003eT a-\u003eT b-\u003eT b",
        "package": "synthesizer",
        "partial": "BPole",
        "signature": "Int-\u003eT a-\u003eT a-\u003eT v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Chebyshev.html#v:lowpassACausalPole",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Chebyshev",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e T (Pole a, v) v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Chebyshev.html#lowpassACausalPole",
        "fct-type": "unknown",
        "title": "lowpassACausalPole"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Chebyshev",
        "module": "Synthesizer.Plain.Filter.Recursive.Chebyshev",
        "name": "lowpassACausalPole",
        "normalized": "Int-\u003eT(Pole a,b)b",
        "package": "synthesizer",
        "partial": "ACausal Pole",
        "signature": "Int-\u003eT(Pole a,v)v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Chebyshev.html#v:lowpassAPole",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Chebyshev",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e T a -\u003e T a -\u003e T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Chebyshev.html#lowpassAPole",
        "fct-type": "unknown",
        "title": "lowpassAPole"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Chebyshev",
        "module": "Synthesizer.Plain.Filter.Recursive.Chebyshev",
        "name": "lowpassAPole",
        "normalized": "Int-\u003eT a-\u003eT a-\u003eT b-\u003eT b",
        "package": "synthesizer",
        "partial": "APole",
        "signature": "Int-\u003eT a-\u003eT a-\u003eT v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Chebyshev.html#v:lowpassBCausalPole",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Chebyshev",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e T (Pole a, v) v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Chebyshev.html#lowpassBCausalPole",
        "fct-type": "unknown",
        "title": "lowpassBCausalPole"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Chebyshev",
        "module": "Synthesizer.Plain.Filter.Recursive.Chebyshev",
        "name": "lowpassBCausalPole",
        "normalized": "Int-\u003eT(Pole a,b)b",
        "package": "synthesizer",
        "partial": "BCausal Pole",
        "signature": "Int-\u003eT(Pole a,v)v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Chebyshev.html#v:lowpassBPole",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Chebyshev",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e T a -\u003e T a -\u003e T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Chebyshev.html#lowpassBPole",
        "fct-type": "unknown",
        "title": "lowpassBPole"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Chebyshev",
        "module": "Synthesizer.Plain.Filter.Recursive.Chebyshev",
        "name": "lowpassBPole",
        "normalized": "Int-\u003eT a-\u003eT a-\u003eT b-\u003eT b",
        "package": "synthesizer",
        "partial": "BPole",
        "signature": "Int-\u003eT a-\u003eT a-\u003eT v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Chebyshev.html#v:makeCirclePoints",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Chebyshev",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e [T a]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Chebyshev.html#makeCirclePoints",
        "fct-type": "unknown",
        "title": "makeCirclePoints"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Chebyshev",
        "module": "Synthesizer.Plain.Filter.Recursive.Chebyshev",
        "name": "makeCirclePoints",
        "normalized": "Int-\u003e[T a]",
        "package": "synthesizer",
        "partial": "Circle Points",
        "signature": "Int-\u003e[T a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Chebyshev.html#v:parameterA",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Chebyshev",
        "fct-package": "synthesizer",
        "fct-signature": "Passband -\u003e Int -\u003e Pole a -\u003e ParameterA a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Chebyshev.html#parameterA",
        "fct-type": "unknown",
        "title": "parameterA"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Chebyshev",
        "module": "Synthesizer.Plain.Filter.Recursive.Chebyshev",
        "name": "parameterA",
        "normalized": "Passband-\u003eInt-\u003ePole a-\u003eParameterA a",
        "package": "synthesizer",
        "partial": "",
        "signature": "Passband-\u003eInt-\u003ePole a-\u003eParameterA a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Chebyshev.html#v:parameterB",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Chebyshev",
        "fct-package": "synthesizer",
        "fct-signature": "Passband -\u003e Int -\u003e Pole a -\u003e ParameterB a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Chebyshev.html#parameterB",
        "fct-type": "unknown",
        "title": "parameterB"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Chebyshev",
        "module": "Synthesizer.Plain.Filter.Recursive.Chebyshev",
        "name": "parameterB",
        "normalized": "Passband-\u003eInt-\u003ePole a-\u003eParameterB a",
        "package": "synthesizer",
        "partial": "",
        "signature": "Passband-\u003eInt-\u003ePole a-\u003eParameterB a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Chebyshev.html#v:partialParameterA",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Chebyshev",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e a -\u003e a -\u003e T a -\u003e Parameter a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Chebyshev.html#partialParameterA",
        "fct-type": "unknown",
        "title": "partialParameterA"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Chebyshev",
        "module": "Synthesizer.Plain.Filter.Recursive.Chebyshev",
        "name": "partialParameterA",
        "normalized": "Int-\u003ea-\u003ea-\u003eT a-\u003eParameter a",
        "package": "synthesizer",
        "partial": "Parameter",
        "signature": "Int-\u003ea-\u003ea-\u003eT a-\u003eParameter a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Chebyshev.html#v:partialParameterB",
      "description": {
        "fct-descr": "compute the partial filter of the second order from the pole information\n",
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Chebyshev",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e a -\u003e a -\u003e T a -\u003e Parameter a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Chebyshev.html#partialParameterB",
        "fct-type": "unknown",
        "title": "partialParameterB"
      },
      "index": {
        "description": "compute the partial filter of the second order from the pole information",
        "hierarchy": "Synthesizer Plain Filter Recursive Chebyshev",
        "module": "Synthesizer.Plain.Filter.Recursive.Chebyshev",
        "name": "partialParameterB",
        "normalized": "Int-\u003ea-\u003ea-\u003eT a-\u003eParameter a",
        "package": "synthesizer",
        "partial": "Parameter",
        "signature": "Int-\u003ea-\u003ea-\u003eT a-\u003eParameter a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Chebyshev.html#v:runAPole",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Chebyshev",
        "fct-package": "synthesizer",
        "fct-signature": "Passband -\u003e Int -\u003e T a -\u003e T a -\u003e T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Chebyshev.html#runAPole",
        "fct-type": "unknown",
        "title": "runAPole"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Chebyshev",
        "module": "Synthesizer.Plain.Filter.Recursive.Chebyshev",
        "name": "runAPole",
        "normalized": "Passband-\u003eInt-\u003eT a-\u003eT a-\u003eT b-\u003eT b",
        "package": "synthesizer",
        "partial": "APole",
        "signature": "Passband-\u003eInt-\u003eT a-\u003eT a-\u003eT v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Chebyshev.html#v:runBPole",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Chebyshev",
        "fct-package": "synthesizer",
        "fct-signature": "Passband -\u003e Int -\u003e T a -\u003e T a -\u003e T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Chebyshev.html#runBPole",
        "fct-type": "unknown",
        "title": "runBPole"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Chebyshev",
        "module": "Synthesizer.Plain.Filter.Recursive.Chebyshev",
        "name": "runBPole",
        "normalized": "Passband-\u003eInt-\u003eT a-\u003eT a-\u003eT b-\u003eT b",
        "package": "synthesizer",
        "partial": "BPole",
        "signature": "Passband-\u003eInt-\u003eT a-\u003eT a-\u003eT v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Comb.html#v:karplusStrong",
      "description": {
        "fct-descr": "The most simple version of the Karplus-Strong algorithm\nwhich is suitable to simulate a plucked string.\nIt is similar to the \u003ctt\u003e\u003ca\u003erunProc\u003c/a\u003e\u003c/tt\u003e function.\n",
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Comb",
        "fct-package": "synthesizer",
        "fct-signature": "Parameter a -\u003e T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Comb.html#karplusStrong",
        "fct-type": "unknown",
        "title": "karplusStrong"
      },
      "index": {
        "description": "The most simple version of the Karplus-Strong algorithm which is suitable to simulate plucked string It is similar to the runProc function",
        "hierarchy": "Synthesizer Plain Filter Recursive Comb",
        "module": "Synthesizer.Plain.Filter.Recursive.Comb",
        "name": "karplusStrong",
        "normalized": "Parameter a-\u003eT b-\u003eT b",
        "package": "synthesizer",
        "partial": "Strong",
        "signature": "Parameter a-\u003eT v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Comb.html#v:run",
      "description": {
        "fct-descr": "Infinitely many equi-delayed exponentially decaying echos.\nThe echos are clipped to the input length.\nWe think it is easier (and simpler to do efficiently)\nto pad the input with zeros or whatever\ninstead of cutting the result according to the input length.\n",
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Comb",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e a -\u003e T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Comb.html#run",
        "fct-type": "unknown",
        "title": "run"
      },
      "index": {
        "description": "Infinitely many equi-delayed exponentially decaying echos The echos are clipped to the input length We think it is easier and simpler to do efficiently to pad the input with zeros or whatever instead of cutting the result according to the input length",
        "hierarchy": "Synthesizer Plain Filter Recursive Comb",
        "module": "Synthesizer.Plain.Filter.Recursive.Comb",
        "name": "run",
        "normalized": "Int-\u003ea-\u003eT b-\u003eT b",
        "package": "synthesizer",
        "partial": "",
        "signature": "Int-\u003ea-\u003eT v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Comb.html#v:runMulti",
      "description": {
        "fct-descr": "Echos of different delays. \n",
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Comb",
        "fct-package": "synthesizer",
        "fct-signature": "[Int] -\u003e a -\u003e T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Comb.html#runMulti",
        "fct-type": "unknown",
        "title": "runMulti"
      },
      "index": {
        "description": "Echos of different delays",
        "hierarchy": "Synthesizer Plain Filter Recursive Comb",
        "module": "Synthesizer.Plain.Filter.Recursive.Comb",
        "name": "runMulti",
        "normalized": "[Int]-\u003ea-\u003eT b-\u003eT b",
        "package": "synthesizer",
        "partial": "Multi",
        "signature": "[Int]-\u003ea-\u003eT v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Comb.html#v:runProc",
      "description": {
        "fct-descr": "Echos can be piped through an arbitrary signal processor. \n",
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Comb",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e (T v -\u003e T v) -\u003e T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Comb.html#runProc",
        "fct-type": "unknown",
        "title": "runProc"
      },
      "index": {
        "description": "Echos can be piped through an arbitrary signal processor",
        "hierarchy": "Synthesizer Plain Filter Recursive Comb",
        "module": "Synthesizer.Plain.Filter.Recursive.Comb",
        "name": "runProc",
        "normalized": "Int-\u003e(T a-\u003eT a)-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "Proc",
        "signature": "Int-\u003e(T v-\u003eT v)-\u003eT v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-FirstOrder.html#t:Parameter",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.FirstOrder",
        "fct-package": "synthesizer",
        "fct-signature": "newtype",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-FirstOrder.html#Parameter",
        "fct-type": "unknown",
        "title": "Parameter"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive FirstOrder",
        "module": "Synthesizer.Plain.Filter.Recursive.FirstOrder",
        "name": "Parameter",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Parameter",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-FirstOrder.html#t:Result",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.FirstOrder",
        "fct-package": "synthesizer",
        "fct-signature": "data",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-FirstOrder.html#Result",
        "fct-type": "unknown",
        "title": "Result"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive FirstOrder",
        "module": "Synthesizer.Plain.Filter.Recursive.FirstOrder",
        "name": "Result",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Result",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-FirstOrder.html#v:highpass",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.FirstOrder",
        "fct-package": "synthesizer",
        "fct-signature": "T (Parameter a) -\u003e T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-FirstOrder.html#highpass",
        "fct-type": "unknown",
        "title": "highpass"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive FirstOrder",
        "module": "Synthesizer.Plain.Filter.Recursive.FirstOrder",
        "name": "highpass",
        "normalized": "T(Parameter a)-\u003eT b-\u003eT b",
        "package": "synthesizer",
        "partial": "",
        "signature": "T(Parameter a)-\u003eT v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-FirstOrder.html#v:highpassInit",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.FirstOrder",
        "fct-package": "synthesizer",
        "fct-signature": "v -\u003e T (Parameter a) -\u003e T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-FirstOrder.html#highpassInit",
        "fct-type": "unknown",
        "title": "highpassInit"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive FirstOrder",
        "module": "Synthesizer.Plain.Filter.Recursive.FirstOrder",
        "name": "highpassInit",
        "normalized": "a-\u003eT(Parameter b)-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "Init",
        "signature": "v-\u003eT(Parameter a)-\u003eT v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-FirstOrder.html#v:highpassInitAlt",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.FirstOrder",
        "fct-package": "synthesizer",
        "fct-signature": "v -\u003e T (Parameter a) -\u003e T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-FirstOrder.html#highpassInitAlt",
        "fct-type": "unknown",
        "title": "highpassInitAlt"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive FirstOrder",
        "module": "Synthesizer.Plain.Filter.Recursive.FirstOrder",
        "name": "highpassInitAlt",
        "normalized": "a-\u003eT(Parameter b)-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "Init Alt",
        "signature": "v-\u003eT(Parameter a)-\u003eT v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-FirstOrder.html#v:highpassModifier",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.FirstOrder",
        "fct-package": "synthesizer",
        "fct-signature": "Simple v (Parameter a) v v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-FirstOrder.html#highpassModifier",
        "fct-type": "unknown",
        "title": "highpassModifier"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive FirstOrder",
        "module": "Synthesizer.Plain.Filter.Recursive.FirstOrder",
        "name": "highpassModifier",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Modifier",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-FirstOrder.html#v:highpassModifierInit",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.FirstOrder",
        "fct-package": "synthesizer",
        "fct-signature": "Initialized v v (Parameter a) v v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-FirstOrder.html#highpassModifierInit",
        "fct-type": "unknown",
        "title": "highpassModifierInit"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive FirstOrder",
        "module": "Synthesizer.Plain.Filter.Recursive.FirstOrder",
        "name": "highpassModifierInit",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Modifier Init",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-FirstOrder.html#v:highpassStep",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.FirstOrder",
        "fct-package": "synthesizer",
        "fct-signature": "Parameter a -\u003e v -\u003e State v v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-FirstOrder.html#highpassStep",
        "fct-type": "unknown",
        "title": "highpassStep"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive FirstOrder",
        "module": "Synthesizer.Plain.Filter.Recursive.FirstOrder",
        "name": "highpassStep",
        "normalized": "Parameter a-\u003eb-\u003eState b b",
        "package": "synthesizer",
        "partial": "Step",
        "signature": "Parameter a-\u003ev-\u003eState v v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-FirstOrder.html#v:lowpass",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.FirstOrder",
        "fct-package": "synthesizer",
        "fct-signature": "T (Parameter a) -\u003e T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-FirstOrder.html#lowpass",
        "fct-type": "unknown",
        "title": "lowpass"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive FirstOrder",
        "module": "Synthesizer.Plain.Filter.Recursive.FirstOrder",
        "name": "lowpass",
        "normalized": "T(Parameter a)-\u003eT b-\u003eT b",
        "package": "synthesizer",
        "partial": "",
        "signature": "T(Parameter a)-\u003eT v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-FirstOrder.html#v:lowpassCausal",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.FirstOrder",
        "fct-package": "synthesizer",
        "fct-signature": "T (Parameter a, v) v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-FirstOrder.html#lowpassCausal",
        "fct-type": "unknown",
        "title": "lowpassCausal"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive FirstOrder",
        "module": "Synthesizer.Plain.Filter.Recursive.FirstOrder",
        "name": "lowpassCausal",
        "normalized": "T(Parameter a,b)b",
        "package": "synthesizer",
        "partial": "Causal",
        "signature": "T(Parameter a,v)v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-FirstOrder.html#v:lowpassInit",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.FirstOrder",
        "fct-package": "synthesizer",
        "fct-signature": "v -\u003e T (Parameter a) -\u003e T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-FirstOrder.html#lowpassInit",
        "fct-type": "unknown",
        "title": "lowpassInit"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive FirstOrder",
        "module": "Synthesizer.Plain.Filter.Recursive.FirstOrder",
        "name": "lowpassInit",
        "normalized": "a-\u003eT(Parameter b)-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "Init",
        "signature": "v-\u003eT(Parameter a)-\u003eT v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-FirstOrder.html#v:lowpassModifier",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.FirstOrder",
        "fct-package": "synthesizer",
        "fct-signature": "Simple v (Parameter a) v v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-FirstOrder.html#lowpassModifier",
        "fct-type": "unknown",
        "title": "lowpassModifier"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive FirstOrder",
        "module": "Synthesizer.Plain.Filter.Recursive.FirstOrder",
        "name": "lowpassModifier",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Modifier",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-FirstOrder.html#v:lowpassModifierInit",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.FirstOrder",
        "fct-package": "synthesizer",
        "fct-signature": "Initialized v v (Parameter a) v v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-FirstOrder.html#lowpassModifierInit",
        "fct-type": "unknown",
        "title": "lowpassModifierInit"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive FirstOrder",
        "module": "Synthesizer.Plain.Filter.Recursive.FirstOrder",
        "name": "lowpassModifierInit",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Modifier Init",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-FirstOrder.html#v:lowpassStep",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.FirstOrder",
        "fct-package": "synthesizer",
        "fct-signature": "Parameter a -\u003e v -\u003e State v v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-FirstOrder.html#lowpassStep",
        "fct-type": "unknown",
        "title": "lowpassStep"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive FirstOrder",
        "module": "Synthesizer.Plain.Filter.Recursive.FirstOrder",
        "name": "lowpassStep",
        "normalized": "Parameter a-\u003eb-\u003eState b b",
        "package": "synthesizer",
        "partial": "Step",
        "signature": "Parameter a-\u003ev-\u003eState v v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-FirstOrder.html#v:parameter",
      "description": {
        "fct-descr": "Convert cut-off frequency to feedback factor. \n",
        "fct-module": "Synthesizer.Plain.Filter.Recursive.FirstOrder",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e Parameter a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-FirstOrder.html#parameter",
        "fct-type": "unknown",
        "title": "parameter"
      },
      "index": {
        "description": "Convert cut-off frequency to feedback factor",
        "hierarchy": "Synthesizer Plain Filter Recursive FirstOrder",
        "module": "Synthesizer.Plain.Filter.Recursive.FirstOrder",
        "name": "parameter",
        "normalized": "a-\u003eParameter a",
        "package": "synthesizer",
        "partial": "",
        "signature": "a-\u003eParameter a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-FirstOrder.html#v:step",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.FirstOrder",
        "fct-package": "synthesizer",
        "fct-signature": "Parameter a -\u003e v -\u003e State v (Result v)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-FirstOrder.html#step",
        "fct-type": "unknown",
        "title": "step"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive FirstOrder",
        "module": "Synthesizer.Plain.Filter.Recursive.FirstOrder",
        "name": "step",
        "normalized": "Parameter a-\u003eb-\u003eState b(Result b)",
        "package": "synthesizer",
        "partial": "",
        "signature": "Parameter a-\u003ev-\u003eState v(Result v)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-FirstOrderComplex.html#t:Parameter",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.FirstOrderComplex",
        "fct-package": "synthesizer",
        "fct-signature": "data",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-FirstOrderComplex.html#Parameter",
        "fct-type": "unknown",
        "title": "Parameter"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive FirstOrderComplex",
        "module": "Synthesizer.Plain.Filter.Recursive.FirstOrderComplex",
        "name": "Parameter",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Parameter",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-FirstOrderComplex.html#v:causal",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.FirstOrderComplex",
        "fct-package": "synthesizer",
        "fct-signature": "T (Parameter a, v) (Result v)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-FirstOrderComplex.html#causal",
        "fct-type": "unknown",
        "title": "causal"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive FirstOrderComplex",
        "module": "Synthesizer.Plain.Filter.Recursive.FirstOrderComplex",
        "name": "causal",
        "normalized": "T(Parameter a,b)(Result b)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T(Parameter a,v)(Result v)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-FirstOrderComplex.html#v:modifier",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.FirstOrderComplex",
        "fct-package": "synthesizer",
        "fct-signature": "Simple (T v) (Parameter a) v (Result v)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-FirstOrderComplex.html#modifier",
        "fct-type": "unknown",
        "title": "modifier"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive FirstOrderComplex",
        "module": "Synthesizer.Plain.Filter.Recursive.FirstOrderComplex",
        "name": "modifier",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-FirstOrderComplex.html#v:modifierInit",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.FirstOrderComplex",
        "fct-package": "synthesizer",
        "fct-signature": "Initialized (T v) (T v) (Parameter a) v (Result v)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-FirstOrderComplex.html#modifierInit",
        "fct-type": "unknown",
        "title": "modifierInit"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive FirstOrderComplex",
        "module": "Synthesizer.Plain.Filter.Recursive.FirstOrderComplex",
        "name": "modifierInit",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Init",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-FirstOrderComplex.html#v:parameter",
      "description": {
        "fct-descr": "\u003cp\u003eThe internal parameters are computed such that:\n\u003c/p\u003e\u003cul\u003e\u003cli\u003e At the resonance frequency\n  the filter amplifies by the factor \u003ctt\u003eresonance\u003c/tt\u003e\n  with no phase shift.\n\u003c/li\u003e\u003cli\u003e At resonance frequency plus half sample rate\n  the filter amplifies by facter \u003ctt\u003erecip $ 2 - recip resonance\u003c/tt\u003e\n  with no phase shift,\n  but you cannot observe this immediately,\n  because it is outside the Nyquist band.\n\u003c/li\u003e\u003c/ul\u003e",
        "fct-module": "Synthesizer.Plain.Filter.Recursive.FirstOrderComplex",
        "fct-package": "synthesizer",
        "fct-signature": "Pole a -\u003e Parameter a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-FirstOrderComplex.html#parameter",
        "fct-type": "unknown",
        "title": "parameter"
      },
      "index": {
        "description": "The internal parameters are computed such that At the resonance frequency the filter amplifies by the factor resonance with no phase shift At resonance frequency plus half sample rate the filter amplifies by facter recip recip resonance with no phase shift but you cannot observe this immediately because it is outside the Nyquist band",
        "hierarchy": "Synthesizer Plain Filter Recursive FirstOrderComplex",
        "module": "Synthesizer.Plain.Filter.Recursive.FirstOrderComplex",
        "name": "parameter",
        "normalized": "Pole a-\u003eParameter a",
        "package": "synthesizer",
        "partial": "",
        "signature": "Pole a-\u003eParameter a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-FirstOrderComplex.html#v:parameterFromPeakToDCRatio",
      "description": {
        "fct-descr": "\u003cp\u003eThe internal parameters are computed such that:\n\u003c/p\u003e\u003cul\u003e\u003cli\u003e At the resonance frequency\n  the filter amplifies by the factor \u003ctt\u003eresonance\u003c/tt\u003e\n  with a non-zero phase shift.\n\u003c/li\u003e\u003cli\u003e The filter amplifies the direct current (frequency zero) by factor 1\n  with no phase shift.\n\u003c/li\u003e\u003cli\u003e The real component is a lowpass,\n  the imaginary component is a highpass.\n  You can interpolate between them using other complex projections.\n\u003c/li\u003e\u003c/ul\u003e",
        "fct-module": "Synthesizer.Plain.Filter.Recursive.FirstOrderComplex",
        "fct-package": "synthesizer",
        "fct-signature": "Pole a -\u003e Parameter a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-FirstOrderComplex.html#parameterFromPeakToDCRatio",
        "fct-type": "unknown",
        "title": "parameterFromPeakToDCRatio"
      },
      "index": {
        "description": "The internal parameters are computed such that At the resonance frequency the filter amplifies by the factor resonance with non-zero phase shift The filter amplifies the direct current frequency zero by factor with no phase shift The real component is lowpass the imaginary component is highpass You can interpolate between them using other complex projections",
        "hierarchy": "Synthesizer Plain Filter Recursive FirstOrderComplex",
        "module": "Synthesizer.Plain.Filter.Recursive.FirstOrderComplex",
        "name": "parameterFromPeakToDCRatio",
        "normalized": "Pole a-\u003eParameter a",
        "package": "synthesizer",
        "partial": "From Peak To DCRatio",
        "signature": "Pole a-\u003eParameter a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-FirstOrderComplex.html#v:parameterFromPeakWidth",
      "description": {
        "fct-descr": "\u003cp\u003eThe internal parameters are computed such that:\n\u003c/p\u003e\u003cul\u003e\u003cli\u003e At the resonance frequency\n  the filter amplifies by the factor \u003ctt\u003eresonance\u003c/tt\u003e\n  with no phase shift.\n\u003c/li\u003e\u003cli\u003e At resonance frequency plus and minus band width\n  the filter amplifies by facter 1 with a non-zero phase shift.\n\u003c/li\u003e\u003c/ul\u003e",
        "fct-module": "Synthesizer.Plain.Filter.Recursive.FirstOrderComplex",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e Pole a -\u003e Parameter a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-FirstOrderComplex.html#parameterFromPeakWidth",
        "fct-type": "unknown",
        "title": "parameterFromPeakWidth"
      },
      "index": {
        "description": "The internal parameters are computed such that At the resonance frequency the filter amplifies by the factor resonance with no phase shift At resonance frequency plus and minus band width the filter amplifies by facter with non-zero phase shift",
        "hierarchy": "Synthesizer Plain Filter Recursive FirstOrderComplex",
        "module": "Synthesizer.Plain.Filter.Recursive.FirstOrderComplex",
        "name": "parameterFromPeakWidth",
        "normalized": "a-\u003ePole a-\u003eParameter a",
        "package": "synthesizer",
        "partial": "From Peak Width",
        "signature": "a-\u003ePole a-\u003eParameter a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-FirstOrderComplex.html#v:run",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.FirstOrderComplex",
        "fct-package": "synthesizer",
        "fct-signature": "T (Parameter a) -\u003e T v -\u003e T (Result v)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-FirstOrderComplex.html#run",
        "fct-type": "unknown",
        "title": "run"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive FirstOrderComplex",
        "module": "Synthesizer.Plain.Filter.Recursive.FirstOrderComplex",
        "name": "run",
        "normalized": "T(Parameter a)-\u003eT b-\u003eT(Result b)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T(Parameter a)-\u003eT v-\u003eT(Result v)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-FirstOrderComplex.html#v:runInit",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.FirstOrderComplex",
        "fct-package": "synthesizer",
        "fct-signature": "T v -\u003e T (Parameter a) -\u003e T v -\u003e T (Result v)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-FirstOrderComplex.html#runInit",
        "fct-type": "unknown",
        "title": "runInit"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive FirstOrderComplex",
        "module": "Synthesizer.Plain.Filter.Recursive.FirstOrderComplex",
        "name": "runInit",
        "normalized": "T a-\u003eT(Parameter b)-\u003eT a-\u003eT(Result a)",
        "package": "synthesizer",
        "partial": "Init",
        "signature": "T v-\u003eT(Parameter a)-\u003eT v-\u003eT(Result v)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-FirstOrderComplex.html#v:step",
      "description": {
        "fct-descr": "Universal filter: Computes high pass, band pass, low pass in one go \n",
        "fct-module": "Synthesizer.Plain.Filter.Recursive.FirstOrderComplex",
        "fct-package": "synthesizer",
        "fct-signature": "Parameter a -\u003e v -\u003e State (T v) (Result v)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-FirstOrderComplex.html#step",
        "fct-type": "unknown",
        "title": "step"
      },
      "index": {
        "description": "Universal filter Computes high pass band pass low pass in one go",
        "hierarchy": "Synthesizer Plain Filter Recursive FirstOrderComplex",
        "module": "Synthesizer.Plain.Filter.Recursive.FirstOrderComplex",
        "name": "step",
        "normalized": "Parameter a-\u003eb-\u003eState(T b)(Result b)",
        "package": "synthesizer",
        "partial": "",
        "signature": "Parameter a-\u003ev-\u003eState(T v)(Result v)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Integration.html#v:run",
      "description": {
        "fct-descr": "Integrate with initial value zero.\nHowever the first emitted value is the value of the input signal.\nIt maintains the length of the signal.\n",
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Integration",
        "fct-package": "synthesizer",
        "fct-signature": "T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Integration.html#run",
        "fct-type": "unknown",
        "title": "run"
      },
      "index": {
        "description": "Integrate with initial value zero However the first emitted value is the value of the input signal It maintains the length of the signal",
        "hierarchy": "Synthesizer Plain Filter Recursive Integration",
        "module": "Synthesizer.Plain.Filter.Recursive.Integration",
        "name": "run",
        "normalized": "T a-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "T v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Integration.html#v:runInit",
      "description": {
        "fct-descr": "Integrate with initial condition.\nFirst emitted value is the initial condition.\nThe signal become one element longer.\n",
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Integration",
        "fct-package": "synthesizer",
        "fct-signature": "v -\u003e T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Integration.html#runInit",
        "fct-type": "unknown",
        "title": "runInit"
      },
      "index": {
        "description": "Integrate with initial condition First emitted value is the initial condition The signal become one element longer",
        "hierarchy": "Synthesizer Plain Filter Recursive Integration",
        "module": "Synthesizer.Plain.Filter.Recursive.Integration",
        "name": "runInit",
        "normalized": "a-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "Init",
        "signature": "v-\u003eT v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Moog.html#t:Parameter",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Moog",
        "fct-package": "synthesizer",
        "fct-signature": "data",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Moog.html#Parameter",
        "fct-type": "unknown",
        "title": "Parameter"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Moog",
        "module": "Synthesizer.Plain.Filter.Recursive.Moog",
        "name": "Parameter",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Parameter",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Moog.html#v:lowpass",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Moog",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e T (Parameter a) -\u003e T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Moog.html#lowpass",
        "fct-type": "unknown",
        "title": "lowpass"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Moog",
        "module": "Synthesizer.Plain.Filter.Recursive.Moog",
        "name": "lowpass",
        "normalized": "Int-\u003eT(Parameter a)-\u003eT b-\u003eT b",
        "package": "synthesizer",
        "partial": "",
        "signature": "Int-\u003eT(Parameter a)-\u003eT v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Moog.html#v:lowpassCausal",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Moog",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e T (Parameter a, v) v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Moog.html#lowpassCausal",
        "fct-type": "unknown",
        "title": "lowpassCausal"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Moog",
        "module": "Synthesizer.Plain.Filter.Recursive.Moog",
        "name": "lowpassCausal",
        "normalized": "Int-\u003eT(Parameter a,b)b",
        "package": "synthesizer",
        "partial": "Causal",
        "signature": "Int-\u003eT(Parameter a,v)v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Moog.html#v:lowpassCausalModifier",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Moog",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e T (Parameter a, v) v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Moog.html#lowpassCausalModifier",
        "fct-type": "unknown",
        "title": "lowpassCausalModifier"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Moog",
        "module": "Synthesizer.Plain.Filter.Recursive.Moog",
        "name": "lowpassCausalModifier",
        "normalized": "Int-\u003eT(Parameter a,b)b",
        "package": "synthesizer",
        "partial": "Causal Modifier",
        "signature": "Int-\u003eT(Parameter a,v)v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Moog.html#v:lowpassCausalStacked",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Moog",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e T (Parameter a, v) v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Moog.html#lowpassCausalStacked",
        "fct-type": "unknown",
        "title": "lowpassCausalStacked"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Moog",
        "module": "Synthesizer.Plain.Filter.Recursive.Moog",
        "name": "lowpassCausalStacked",
        "normalized": "Int-\u003eT(Parameter a,b)b",
        "package": "synthesizer",
        "partial": "Causal Stacked",
        "signature": "Int-\u003eT(Parameter a,v)v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Moog.html#v:lowpassModifier",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Moog",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e Simple [v] (Parameter a) v v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Moog.html#lowpassModifier",
        "fct-type": "unknown",
        "title": "lowpassModifier"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Moog",
        "module": "Synthesizer.Plain.Filter.Recursive.Moog",
        "name": "lowpassModifier",
        "normalized": "Int-\u003eSimple[a](Parameter b)a a",
        "package": "synthesizer",
        "partial": "Modifier",
        "signature": "Int-\u003eSimple[v](Parameter a)v v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Moog.html#v:lowpassRecursive",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Moog",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e T (Parameter a) -\u003e T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Moog.html#lowpassRecursive",
        "fct-type": "unknown",
        "title": "lowpassRecursive"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Moog",
        "module": "Synthesizer.Plain.Filter.Recursive.Moog",
        "name": "lowpassRecursive",
        "normalized": "Int-\u003eT(Parameter a)-\u003eT b-\u003eT b",
        "package": "synthesizer",
        "partial": "Recursive",
        "signature": "Int-\u003eT(Parameter a)-\u003eT v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Moog.html#v:lowpassState",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Moog",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e T (Parameter a) -\u003e T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Moog.html#lowpassState",
        "fct-type": "unknown",
        "title": "lowpassState"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Moog",
        "module": "Synthesizer.Plain.Filter.Recursive.Moog",
        "name": "lowpassState",
        "normalized": "Int-\u003eT(Parameter a)-\u003eT b-\u003eT b",
        "package": "synthesizer",
        "partial": "State",
        "signature": "Int-\u003eT(Parameter a)-\u003eT v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Moog.html#v:lowpassStepRev",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Moog",
        "fct-package": "synthesizer",
        "fct-signature": "Parameter a -\u003e v -\u003e State [v] v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Moog.html#lowpassStepRev",
        "fct-type": "unknown",
        "title": "lowpassStepRev"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Moog",
        "module": "Synthesizer.Plain.Filter.Recursive.Moog",
        "name": "lowpassStepRev",
        "normalized": "Parameter a-\u003eb-\u003eState[b]b",
        "package": "synthesizer",
        "partial": "Step Rev",
        "signature": "Parameter a-\u003ev-\u003eState[v]v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Moog.html#v:lowpassStepStack",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Moog",
        "fct-package": "synthesizer",
        "fct-signature": "Parameter a -\u003e v -\u003e State [v] v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Moog.html#lowpassStepStack",
        "fct-type": "unknown",
        "title": "lowpassStepStack"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Moog",
        "module": "Synthesizer.Plain.Filter.Recursive.Moog",
        "name": "lowpassStepStack",
        "normalized": "Parameter a-\u003eb-\u003eState[b]b",
        "package": "synthesizer",
        "partial": "Step Stack",
        "signature": "Parameter a-\u003ev-\u003eState[v]v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Moog.html#v:parameter",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Moog",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e Pole a -\u003e Parameter a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Moog.html#parameter",
        "fct-type": "unknown",
        "title": "parameter"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Moog",
        "module": "Synthesizer.Plain.Filter.Recursive.Moog",
        "name": "parameter",
        "normalized": "Int-\u003ePole a-\u003eParameter a",
        "package": "synthesizer",
        "partial": "",
        "signature": "Int-\u003ePole a-\u003eParameter a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-MovingAverage.html#v:modulatedFrac",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.MovingAverage",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e T a -\u003e T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-MovingAverage.html#modulatedFrac",
        "fct-type": "unknown",
        "title": "modulatedFrac"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive MovingAverage",
        "module": "Synthesizer.Plain.Filter.Recursive.MovingAverage",
        "name": "modulatedFrac",
        "normalized": "Int-\u003eT a-\u003eT b-\u003eT b",
        "package": "synthesizer",
        "partial": "Frac",
        "signature": "Int-\u003eT a-\u003eT v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-MovingAverage.html#v:sumsStaticInt",
      "description": {
        "fct-descr": "\u003cp\u003eLike Synthesizer.Plain.Filter.NonRecursive.sums but in a recursive form.\nThis needs only linear time (independent of the window size)\nbut may accumulate rounding errors.\n\u003c/p\u003e\u003cpre\u003e\nys = xs * (1,0,0,0,-1) / (1,-1)\nys * (1,-1) = xs * (1,0,0,0,-1)\nys = xs * (1,0,0,0,-1) + ys * (0,1)\n\u003c/pre\u003e",
        "fct-module": "Synthesizer.Plain.Filter.Recursive.MovingAverage",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-MovingAverage.html#sumsStaticInt",
        "fct-type": "unknown",
        "title": "sumsStaticInt"
      },
      "index": {
        "description": "Like Synthesizer.Plain.Filter.NonRecursive.sums but in recursive form This needs only linear time independent of the window size but may accumulate rounding errors ys xs ys xs ys xs ys",
        "hierarchy": "Synthesizer Plain Filter Recursive MovingAverage",
        "module": "Synthesizer.Plain.Filter.Recursive.MovingAverage",
        "name": "sumsStaticInt",
        "normalized": "Int-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "Static Int",
        "signature": "Int-\u003eT v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-SecondOrder.html#t:Parameter",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.SecondOrder",
        "fct-package": "synthesizer",
        "fct-signature": "data",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-SecondOrder.html#Parameter",
        "fct-type": "unknown",
        "title": "Parameter"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive SecondOrder",
        "module": "Synthesizer.Plain.Filter.Recursive.SecondOrder",
        "name": "Parameter",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Parameter",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-SecondOrder.html#t:Status",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.SecondOrder",
        "fct-package": "synthesizer",
        "fct-signature": "data",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-SecondOrder.html#Status",
        "fct-type": "unknown",
        "title": "Status"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive SecondOrder",
        "module": "Synthesizer.Plain.Filter.Recursive.SecondOrder",
        "name": "Status",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Status",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-SecondOrder.html#v:adjustPassband",
      "description": {
        "fct-descr": "Given a function which computes the filter parameters of a lowpass filter\nfor a given frequency,\nturn that into a function which generates highpass parameters,\nif requested filter type is Highpass.\n",
        "fct-module": "Synthesizer.Plain.Filter.Recursive.SecondOrder",
        "fct-package": "synthesizer",
        "fct-signature": "Passband -\u003e (a -\u003e Parameter a) -\u003e a -\u003e Parameter a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-SecondOrder.html#adjustPassband",
        "fct-type": "unknown",
        "title": "adjustPassband"
      },
      "index": {
        "description": "Given function which computes the filter parameters of lowpass filter for given frequency turn that into function which generates highpass parameters if requested filter type is Highpass",
        "hierarchy": "Synthesizer Plain Filter Recursive SecondOrder",
        "module": "Synthesizer.Plain.Filter.Recursive.SecondOrder",
        "name": "adjustPassband",
        "normalized": "Passband-\u003e(a-\u003eParameter a)-\u003ea-\u003eParameter a",
        "package": "synthesizer",
        "partial": "Passband",
        "signature": "Passband-\u003e(a-\u003eParameter a)-\u003ea-\u003eParameter a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-SecondOrder.html#v:causal",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.SecondOrder",
        "fct-package": "synthesizer",
        "fct-signature": "T (Parameter a, v) v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-SecondOrder.html#causal",
        "fct-type": "unknown",
        "title": "causal"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive SecondOrder",
        "module": "Synthesizer.Plain.Filter.Recursive.SecondOrder",
        "name": "causal",
        "normalized": "T(Parameter a,b)b",
        "package": "synthesizer",
        "partial": "",
        "signature": "T(Parameter a,v)v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-SecondOrder.html#v:modifier",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.SecondOrder",
        "fct-package": "synthesizer",
        "fct-signature": "Simple (Status v) (Parameter a) v v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-SecondOrder.html#modifier",
        "fct-type": "unknown",
        "title": "modifier"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive SecondOrder",
        "module": "Synthesizer.Plain.Filter.Recursive.SecondOrder",
        "name": "modifier",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-SecondOrder.html#v:modifierInit",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.SecondOrder",
        "fct-package": "synthesizer",
        "fct-signature": "Initialized (Status v) (Status v) (Parameter a) v v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-SecondOrder.html#modifierInit",
        "fct-type": "unknown",
        "title": "modifierInit"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive SecondOrder",
        "module": "Synthesizer.Plain.Filter.Recursive.SecondOrder",
        "name": "modifierInit",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Init",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-SecondOrder.html#v:run",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.SecondOrder",
        "fct-package": "synthesizer",
        "fct-signature": "T (Parameter a) -\u003e T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-SecondOrder.html#run",
        "fct-type": "unknown",
        "title": "run"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive SecondOrder",
        "module": "Synthesizer.Plain.Filter.Recursive.SecondOrder",
        "name": "run",
        "normalized": "T(Parameter a)-\u003eT b-\u003eT b",
        "package": "synthesizer",
        "partial": "",
        "signature": "T(Parameter a)-\u003eT v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-SecondOrder.html#v:runInit",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.SecondOrder",
        "fct-package": "synthesizer",
        "fct-signature": "Status v -\u003e T (Parameter a) -\u003e T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-SecondOrder.html#runInit",
        "fct-type": "unknown",
        "title": "runInit"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive SecondOrder",
        "module": "Synthesizer.Plain.Filter.Recursive.SecondOrder",
        "name": "runInit",
        "normalized": "Status a-\u003eT(Parameter b)-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "Init",
        "signature": "Status v-\u003eT(Parameter a)-\u003eT v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-SecondOrder.html#v:step",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.SecondOrder",
        "fct-package": "synthesizer",
        "fct-signature": "Parameter a -\u003e v -\u003e State (Status v) v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-SecondOrder.html#step",
        "fct-type": "unknown",
        "title": "step"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive SecondOrder",
        "module": "Synthesizer.Plain.Filter.Recursive.SecondOrder",
        "name": "step",
        "normalized": "Parameter a-\u003eb-\u003eState(Status b)b",
        "package": "synthesizer",
        "partial": "",
        "signature": "Parameter a-\u003ev-\u003eState(Status v)v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-SecondOrder.html#v:storeParameter",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.SecondOrder",
        "fct-package": "synthesizer",
        "fct-signature": "Dictionary (Parameter a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-SecondOrder.html#storeParameter",
        "fct-type": "unknown",
        "title": "storeParameter"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive SecondOrder",
        "module": "Synthesizer.Plain.Filter.Recursive.SecondOrder",
        "name": "storeParameter",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Parameter",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-SecondOrder.html#v:storeStatus",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.SecondOrder",
        "fct-package": "synthesizer",
        "fct-signature": "Dictionary (Status a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-SecondOrder.html#storeStatus",
        "fct-type": "unknown",
        "title": "storeStatus"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive SecondOrder",
        "module": "Synthesizer.Plain.Filter.Recursive.SecondOrder",
        "name": "storeStatus",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Status",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-SecondOrder.html#v:zeroStatus",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.SecondOrder",
        "fct-package": "synthesizer",
        "fct-signature": "Status a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-SecondOrder.html#zeroStatus",
        "fct-type": "unknown",
        "title": "zeroStatus"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive SecondOrder",
        "module": "Synthesizer.Plain.Filter.Recursive.SecondOrder",
        "name": "zeroStatus",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Status",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-SecondOrderCascade.html#t:Parameter",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.SecondOrderCascade",
        "fct-package": "synthesizer",
        "fct-signature": "newtype",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-SecondOrderCascade.html#Parameter",
        "fct-type": "unknown",
        "title": "Parameter"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive SecondOrderCascade",
        "module": "Synthesizer.Plain.Filter.Recursive.SecondOrderCascade",
        "name": "Parameter",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Parameter",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-SecondOrderCascade.html#t:Status",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.SecondOrderCascade",
        "fct-package": "synthesizer",
        "fct-signature": "type",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-SecondOrderCascade.html#Status",
        "fct-type": "unknown",
        "title": "Status"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive SecondOrderCascade",
        "module": "Synthesizer.Plain.Filter.Recursive.SecondOrderCascade",
        "name": "Status",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Status",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-SecondOrderCascade.html#v:causal",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.SecondOrderCascade",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e T (Parameter a, v) v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-SecondOrderCascade.html#causal",
        "fct-type": "unknown",
        "title": "causal"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive SecondOrderCascade",
        "module": "Synthesizer.Plain.Filter.Recursive.SecondOrderCascade",
        "name": "causal",
        "normalized": "Int-\u003eT(Parameter a,b)b",
        "package": "synthesizer",
        "partial": "",
        "signature": "Int-\u003eT(Parameter a,v)v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-SecondOrderCascade.html#v:checkSizes",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.SecondOrderCascade",
        "fct-package": "synthesizer",
        "fct-signature": "String -\u003e Vector a -\u003e Vector b -\u003e c -\u003e c",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-SecondOrderCascade.html#checkSizes",
        "fct-type": "unknown",
        "title": "checkSizes"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive SecondOrderCascade",
        "module": "Synthesizer.Plain.Filter.Recursive.SecondOrderCascade",
        "name": "checkSizes",
        "normalized": "String-\u003eVector a-\u003eVector b-\u003ec-\u003ec",
        "package": "synthesizer",
        "partial": "Sizes",
        "signature": "String-\u003eVector a-\u003eVector b-\u003ec-\u003ec"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-SecondOrderCascade.html#v:modifier",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.SecondOrderCascade",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e Simple (Status v) (Parameter a) v v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-SecondOrderCascade.html#modifier",
        "fct-type": "unknown",
        "title": "modifier"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive SecondOrderCascade",
        "module": "Synthesizer.Plain.Filter.Recursive.SecondOrderCascade",
        "name": "modifier",
        "normalized": "Int-\u003eSimple(Status a)(Parameter b)a a",
        "package": "synthesizer",
        "partial": "",
        "signature": "Int-\u003eSimple(Status v)(Parameter a)v v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-SecondOrderCascade.html#v:modifierInit",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.SecondOrderCascade",
        "fct-package": "synthesizer",
        "fct-signature": "Initialized (Status v) (Status v) (Parameter a) v v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-SecondOrderCascade.html#modifierInit",
        "fct-type": "unknown",
        "title": "modifierInit"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive SecondOrderCascade",
        "module": "Synthesizer.Plain.Filter.Recursive.SecondOrderCascade",
        "name": "modifierInit",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Init",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-SecondOrderCascade.html#v:step",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.SecondOrderCascade",
        "fct-package": "synthesizer",
        "fct-signature": "Parameter a -\u003e v -\u003e State (Status v) v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-SecondOrderCascade.html#step",
        "fct-type": "unknown",
        "title": "step"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive SecondOrderCascade",
        "module": "Synthesizer.Plain.Filter.Recursive.SecondOrderCascade",
        "name": "step",
        "normalized": "Parameter a-\u003eb-\u003eState(Status b)b",
        "package": "synthesizer",
        "partial": "",
        "signature": "Parameter a-\u003ev-\u003eState(Status v)v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-SecondOrderCascade.html#v:withSizeCheck",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.SecondOrderCascade",
        "fct-package": "synthesizer",
        "fct-signature": "String -\u003e (Vector a -\u003e Vector b -\u003e c) -\u003e Vector a -\u003e Vector b -\u003e c",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-SecondOrderCascade.html#withSizeCheck",
        "fct-type": "unknown",
        "title": "withSizeCheck"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive SecondOrderCascade",
        "module": "Synthesizer.Plain.Filter.Recursive.SecondOrderCascade",
        "name": "withSizeCheck",
        "normalized": "String-\u003e(Vector a-\u003eVector b-\u003ec)-\u003eVector a-\u003eVector b-\u003ec",
        "package": "synthesizer",
        "partial": "Size Check",
        "signature": "String-\u003e(Vector a-\u003eVector b-\u003ec)-\u003eVector a-\u003eVector b-\u003ec"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Test.html#v:butterworthLowpassTest0",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Test",
        "fct-package": "synthesizer",
        "fct-signature": "[Double]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Test.html#butterworthLowpassTest0",
        "fct-type": "unknown",
        "title": "butterworthLowpassTest0"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Test",
        "module": "Synthesizer.Plain.Filter.Recursive.Test",
        "name": "butterworthLowpassTest0",
        "normalized": "[Double]",
        "package": "synthesizer",
        "partial": "Lowpass Test",
        "signature": "[Double]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Test.html#v:butterworthLowpassTest1",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Test",
        "fct-package": "synthesizer",
        "fct-signature": "Double",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Test.html#butterworthLowpassTest1",
        "fct-type": "unknown",
        "title": "butterworthLowpassTest1"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Test",
        "module": "Synthesizer.Plain.Filter.Recursive.Test",
        "name": "butterworthLowpassTest1",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Lowpass Test",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Test.html#v:butterworthLowpassTest2",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Test",
        "fct-package": "synthesizer",
        "fct-signature": "[Double]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Test.html#butterworthLowpassTest2",
        "fct-type": "unknown",
        "title": "butterworthLowpassTest2"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Test",
        "module": "Synthesizer.Plain.Filter.Recursive.Test",
        "name": "butterworthLowpassTest2",
        "normalized": "[Double]",
        "package": "synthesizer",
        "partial": "Lowpass Test",
        "signature": "[Double]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Test.html#v:chebyParameterA",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Test",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e T a -\u003e a -\u003e Parameter a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Test.html#chebyParameterA",
        "fct-type": "unknown",
        "title": "chebyParameterA"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Test",
        "module": "Synthesizer.Plain.Filter.Recursive.Test",
        "name": "chebyParameterA",
        "normalized": "a-\u003eT a-\u003ea-\u003eParameter a",
        "package": "synthesizer",
        "partial": "Parameter",
        "signature": "a-\u003eT a-\u003ea-\u003eParameter a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Test.html#v:chebyParameterB",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Test",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e T a -\u003e a -\u003e Parameter a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Test.html#chebyParameterB",
        "fct-type": "unknown",
        "title": "chebyParameterB"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Test",
        "module": "Synthesizer.Plain.Filter.Recursive.Test",
        "name": "chebyParameterB",
        "normalized": "a-\u003eT a-\u003ea-\u003eParameter a",
        "package": "synthesizer",
        "partial": "Parameter",
        "signature": "a-\u003eT a-\u003ea-\u003eParameter a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Test.html#v:chebyshevALowpassTest0",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Test",
        "fct-package": "synthesizer",
        "fct-signature": "Parameter Double",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Test.html#chebyshevALowpassTest0",
        "fct-type": "unknown",
        "title": "chebyshevALowpassTest0"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Test",
        "module": "Synthesizer.Plain.Filter.Recursive.Test",
        "name": "chebyshevALowpassTest0",
        "normalized": "",
        "package": "synthesizer",
        "partial": "ALowpass Test",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Test.html#v:chebyshevALowpassTest2",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Test",
        "fct-package": "synthesizer",
        "fct-signature": "[Double]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Test.html#chebyshevALowpassTest2",
        "fct-type": "unknown",
        "title": "chebyshevALowpassTest2"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Test",
        "module": "Synthesizer.Plain.Filter.Recursive.Test",
        "name": "chebyshevALowpassTest2",
        "normalized": "[Double]",
        "package": "synthesizer",
        "partial": "ALowpass Test",
        "signature": "[Double]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Test.html#v:chebyshevBLowpassTest0",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Test",
        "fct-package": "synthesizer",
        "fct-signature": "Parameter Double",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Test.html#chebyshevBLowpassTest0",
        "fct-type": "unknown",
        "title": "chebyshevBLowpassTest0"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Test",
        "module": "Synthesizer.Plain.Filter.Recursive.Test",
        "name": "chebyshevBLowpassTest0",
        "normalized": "",
        "package": "synthesizer",
        "partial": "BLowpass Test",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Test.html#v:chebyshevBLowpassTest2",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Test",
        "fct-package": "synthesizer",
        "fct-signature": "[Double]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Test.html#chebyshevBLowpassTest2",
        "fct-type": "unknown",
        "title": "chebyshevBLowpassTest2"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Test",
        "module": "Synthesizer.Plain.Filter.Recursive.Test",
        "name": "chebyshevBLowpassTest2",
        "normalized": "[Double]",
        "package": "synthesizer",
        "partial": "BLowpass Test",
        "signature": "[Double]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Test.html#v:chebyshevLowpassTest1",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Test",
        "fct-package": "synthesizer",
        "fct-signature": "[Double]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Test.html#chebyshevLowpassTest1",
        "fct-type": "unknown",
        "title": "chebyshevLowpassTest1"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Test",
        "module": "Synthesizer.Plain.Filter.Recursive.Test",
        "name": "chebyshevLowpassTest1",
        "normalized": "[Double]",
        "package": "synthesizer",
        "partial": "Lowpass Test",
        "signature": "[Double]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Test.html#v:chirp",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Test",
        "fct-package": "synthesizer",
        "fct-signature": "Double -\u003e [Double]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Test.html#chirp",
        "fct-type": "unknown",
        "title": "chirp"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Test",
        "module": "Synthesizer.Plain.Filter.Recursive.Test",
        "name": "chirp",
        "normalized": "Double-\u003e[Double]",
        "package": "synthesizer",
        "partial": "",
        "signature": "Double-\u003e[Double]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Test.html#v:chirpComplex",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Test",
        "fct-package": "synthesizer",
        "fct-signature": "Double -\u003e [T Double]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Test.html#chirpComplex",
        "fct-type": "unknown",
        "title": "chirpComplex"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Test",
        "module": "Synthesizer.Plain.Filter.Recursive.Test",
        "name": "chirpComplex",
        "normalized": "Double-\u003e[T Double]",
        "package": "synthesizer",
        "partial": "Complex",
        "signature": "Double-\u003e[T Double]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Test.html#v:complexRealTest",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Test",
        "fct-package": "synthesizer",
        "fct-signature": "[T Double]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Test.html#complexRealTest",
        "fct-type": "unknown",
        "title": "complexRealTest"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Test",
        "module": "Synthesizer.Plain.Filter.Recursive.Test",
        "name": "complexRealTest",
        "normalized": "[T Double]",
        "package": "synthesizer",
        "partial": "Real Test",
        "signature": "[T Double]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Test.html#v:complexTest",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Test",
        "fct-package": "synthesizer",
        "fct-signature": "[T Double]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Test.html#complexTest",
        "fct-type": "unknown",
        "title": "complexTest"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Test",
        "module": "Synthesizer.Plain.Filter.Recursive.Test",
        "name": "complexTest",
        "normalized": "[T Double]",
        "package": "synthesizer",
        "partial": "Test",
        "signature": "[T Double]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Test.html#v:filter2ndOrderTest",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Test",
        "fct-package": "synthesizer",
        "fct-signature": "[Double]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Test.html#filter2ndOrderTest",
        "fct-type": "unknown",
        "title": "filter2ndOrderTest"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Test",
        "module": "Synthesizer.Plain.Filter.Recursive.Test",
        "name": "filter2ndOrderTest",
        "normalized": "[Double]",
        "package": "synthesizer",
        "partial": "Order Test",
        "signature": "[Double]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Test.html#v:moogLowpassTest",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Test",
        "fct-package": "synthesizer",
        "fct-signature": "[Double]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Test.html#moogLowpassTest",
        "fct-type": "unknown",
        "title": "moogLowpassTest"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Test",
        "module": "Synthesizer.Plain.Filter.Recursive.Test",
        "name": "moogLowpassTest",
        "normalized": "[Double]",
        "package": "synthesizer",
        "partial": "Lowpass Test",
        "signature": "[Double]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Test.html#v:sampleRate",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Test",
        "fct-package": "synthesizer",
        "fct-signature": "a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Test.html#sampleRate",
        "fct-type": "unknown",
        "title": "sampleRate"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Test",
        "module": "Synthesizer.Plain.Filter.Recursive.Test",
        "name": "sampleRate",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Rate",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Test.html#v:universalTest",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Test",
        "fct-package": "synthesizer",
        "fct-signature": "[Result Double]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Test.html#universalTest",
        "fct-type": "unknown",
        "title": "universalTest"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Test",
        "module": "Synthesizer.Plain.Filter.Recursive.Test",
        "name": "universalTest",
        "normalized": "[Result Double]",
        "package": "synthesizer",
        "partial": "Test",
        "signature": "[Result Double]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Universal.html#t:Parameter",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Universal",
        "fct-package": "synthesizer",
        "fct-signature": "data",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Universal.html#Parameter",
        "fct-type": "unknown",
        "title": "Parameter"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Universal",
        "module": "Synthesizer.Plain.Filter.Recursive.Universal",
        "name": "Parameter",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Parameter",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Universal.html#t:Result",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Universal",
        "fct-package": "synthesizer",
        "fct-signature": "data",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Universal.html#Result",
        "fct-type": "unknown",
        "title": "Result"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Universal",
        "module": "Synthesizer.Plain.Filter.Recursive.Universal",
        "name": "Result",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Result",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Universal.html#v:causal",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Universal",
        "fct-package": "synthesizer",
        "fct-signature": "T (Parameter a, v) (Result v)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Universal.html#causal",
        "fct-type": "unknown",
        "title": "causal"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Universal",
        "module": "Synthesizer.Plain.Filter.Recursive.Universal",
        "name": "causal",
        "normalized": "T(Parameter a,b)(Result b)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T(Parameter a,v)(Result v)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Universal.html#v:modifier",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Universal",
        "fct-package": "synthesizer",
        "fct-signature": "Simple (v, v) (Parameter a) v (Result v)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Universal.html#modifier",
        "fct-type": "unknown",
        "title": "modifier"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Universal",
        "module": "Synthesizer.Plain.Filter.Recursive.Universal",
        "name": "modifier",
        "normalized": "Simple(a,a)(Parameter b)a(Result a)",
        "package": "synthesizer",
        "partial": "",
        "signature": "Simple(v,v)(Parameter a)v(Result v)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Universal.html#v:modifierInit",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Universal",
        "fct-package": "synthesizer",
        "fct-signature": "Initialized (v, v) (v, v) (Parameter a) v (Result v)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Universal.html#modifierInit",
        "fct-type": "unknown",
        "title": "modifierInit"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Universal",
        "module": "Synthesizer.Plain.Filter.Recursive.Universal",
        "name": "modifierInit",
        "normalized": "Initialized(a,a)(a,a)(Parameter b)a(Result a)",
        "package": "synthesizer",
        "partial": "Init",
        "signature": "Initialized(v,v)(v,v)(Parameter a)v(Result v)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Universal.html#v:parameter",
      "description": {
        "fct-descr": "\u003cp\u003eThe computation of the internal parameters is a bit complicated,\nbut it fulfills the following properties:\n\u003c/p\u003e\u003cul\u003e\u003cli\u003e At the resonance frequency the band pass has 180 degree phase shift.\n  This is also approximately the frequency\n  where the filter has maximum output.\n  Even more important, this is the frequency where the band limit filter works.\n\u003c/li\u003e\u003cli\u003e At the resonance frequency highpass, lowpass, and bandpass\n  amplify by the factor \u003ctt\u003eresonance\u003c/tt\u003e.\n\u003c/li\u003e\u003cli\u003e The lowpass amplifies the frequency zero by factor 1.\n\u003c/li\u003e\u003cli\u003e The highpass amplifies the highest representable (Nyquist) frequency by the factor 1.\n\u003c/li\u003e\u003cli\u003e The bandlimit amplifies both frequency zero and Nyquist frequency\n  by factor one and cancels the resonance frequency.\n\u003c/li\u003e\u003c/ul\u003e",
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Universal",
        "fct-package": "synthesizer",
        "fct-signature": "Pole a -\u003e Parameter a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Universal.html#parameter",
        "fct-type": "unknown",
        "title": "parameter"
      },
      "index": {
        "description": "The computation of the internal parameters is bit complicated but it fulfills the following properties At the resonance frequency the band pass has degree phase shift This is also approximately the frequency where the filter has maximum output Even more important this is the frequency where the band limit filter works At the resonance frequency highpass lowpass and bandpass amplify by the factor resonance The lowpass amplifies the frequency zero by factor The highpass amplifies the highest representable Nyquist frequency by the factor The bandlimit amplifies both frequency zero and Nyquist frequency by factor one and cancels the resonance frequency",
        "hierarchy": "Synthesizer Plain Filter Recursive Universal",
        "module": "Synthesizer.Plain.Filter.Recursive.Universal",
        "name": "parameter",
        "normalized": "Pole a-\u003eParameter a",
        "package": "synthesizer",
        "partial": "",
        "signature": "Pole a-\u003eParameter a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Universal.html#v:run",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Universal",
        "fct-package": "synthesizer",
        "fct-signature": "T (Parameter a) -\u003e T v -\u003e T (Result v)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Universal.html#run",
        "fct-type": "unknown",
        "title": "run"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Universal",
        "module": "Synthesizer.Plain.Filter.Recursive.Universal",
        "name": "run",
        "normalized": "T(Parameter a)-\u003eT b-\u003eT(Result b)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T(Parameter a)-\u003eT v-\u003eT(Result v)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Universal.html#v:runInit",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Universal",
        "fct-package": "synthesizer",
        "fct-signature": "(v, v) -\u003e T (Parameter a) -\u003e T v -\u003e T (Result v)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Universal.html#runInit",
        "fct-type": "unknown",
        "title": "runInit"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Universal",
        "module": "Synthesizer.Plain.Filter.Recursive.Universal",
        "name": "runInit",
        "normalized": "(a,a)-\u003eT(Parameter b)-\u003eT a-\u003eT(Result a)",
        "package": "synthesizer",
        "partial": "Init",
        "signature": "(v,v)-\u003eT(Parameter a)-\u003eT v-\u003eT(Result v)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Universal.html#v:step",
      "description": {
        "fct-descr": "Universal filter: Computes high pass, band pass, low pass in one go \n",
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Universal",
        "fct-package": "synthesizer",
        "fct-signature": "Parameter a -\u003e v -\u003e State (v, v) (Result v)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Universal.html#step",
        "fct-type": "unknown",
        "title": "step"
      },
      "index": {
        "description": "Universal filter Computes high pass band pass low pass in one go",
        "hierarchy": "Synthesizer Plain Filter Recursive Universal",
        "module": "Synthesizer.Plain.Filter.Recursive.Universal",
        "name": "step",
        "normalized": "Parameter a-\u003eb-\u003eState(b,b)(Result b)",
        "package": "synthesizer",
        "partial": "",
        "signature": "Parameter a-\u003ev-\u003eState(v,v)(Result v)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Universal.html#v:storeParameter",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Universal",
        "fct-package": "synthesizer",
        "fct-signature": "Dictionary (Parameter a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Universal.html#storeParameter",
        "fct-type": "unknown",
        "title": "storeParameter"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Universal",
        "module": "Synthesizer.Plain.Filter.Recursive.Universal",
        "name": "storeParameter",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Parameter",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive-Universal.html#v:storeResult",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive.Universal",
        "fct-package": "synthesizer",
        "fct-signature": "Dictionary (Result a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive-Universal.html#storeResult",
        "fct-type": "unknown",
        "title": "storeResult"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive Universal",
        "module": "Synthesizer.Plain.Filter.Recursive.Universal",
        "name": "storeResult",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Result",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive.html#t:Passband",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive",
        "fct-package": "synthesizer",
        "fct-signature": "data",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive.html#Passband",
        "fct-type": "unknown",
        "title": "Passband"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive",
        "module": "Synthesizer.Plain.Filter.Recursive",
        "name": "Passband",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Passband",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Filter-Recursive.html#t:Pole",
      "description": {
        "fct-module": "Synthesizer.Plain.Filter.Recursive",
        "fct-package": "synthesizer",
        "fct-signature": "data",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Filter-Recursive.html#Pole",
        "fct-type": "unknown",
        "title": "Pole"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Filter Recursive",
        "module": "Synthesizer.Plain.Filter.Recursive",
        "name": "Pole",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Pole",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-IO.html#v:intToTwoLEChars",
      "description": {
        "fct-module": "Synthesizer.Plain.IO",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e [Char]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-IO.html#intToTwoLEChars",
        "fct-type": "unknown",
        "title": "intToTwoLEChars"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain IO",
        "module": "Synthesizer.Plain.IO",
        "name": "intToTwoLEChars",
        "normalized": "Int-\u003e[Char]",
        "package": "synthesizer",
        "partial": "To Two LEChars",
        "signature": "Int-\u003e[Char]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-IO.html#v:putInt16Stream",
      "description": {
        "fct-module": "Synthesizer.Plain.IO",
        "fct-package": "synthesizer",
        "fct-signature": "Handle -\u003e [Int16] -\u003e IO ()",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-IO.html#putInt16Stream",
        "fct-type": "unknown",
        "title": "putInt16Stream"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain IO",
        "module": "Synthesizer.Plain.IO",
        "name": "putInt16Stream",
        "normalized": "Handle-\u003e[Int]-\u003eIO()",
        "package": "synthesizer",
        "partial": "Int Stream",
        "signature": "Handle-\u003e[Int]-\u003eIO()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-IO.html#v:putInt16StreamChunky",
      "description": {
        "fct-module": "Synthesizer.Plain.IO",
        "fct-package": "synthesizer",
        "fct-signature": "Handle -\u003e [Int16] -\u003e IO ()",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-IO.html#putInt16StreamChunky",
        "fct-type": "unknown",
        "title": "putInt16StreamChunky"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain IO",
        "module": "Synthesizer.Plain.IO",
        "name": "putInt16StreamChunky",
        "normalized": "Handle-\u003e[Int]-\u003eIO()",
        "package": "synthesizer",
        "partial": "Int Stream Chunky",
        "signature": "Handle-\u003e[Int]-\u003eIO()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-IO.html#v:readInt16StreamStrict",
      "description": {
        "fct-descr": "The end of the list is undefined,\nif the file has odd length.\nIt would be better if it throws an exception.\n",
        "fct-module": "Synthesizer.Plain.IO",
        "fct-package": "synthesizer",
        "fct-signature": "FilePath -\u003e IO [Int16]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-IO.html#readInt16StreamStrict",
        "fct-type": "unknown",
        "title": "readInt16StreamStrict"
      },
      "index": {
        "description": "The end of the list is undefined if the file has odd length It would be better if it throws an exception",
        "hierarchy": "Synthesizer Plain IO",
        "module": "Synthesizer.Plain.IO",
        "name": "readInt16StreamStrict",
        "normalized": "FilePath-\u003eIO[Int]",
        "package": "synthesizer",
        "partial": "Int Stream Strict",
        "signature": "FilePath-\u003eIO[Int]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-IO.html#v:readLEInt16Stream",
      "description": {
        "fct-descr": "The end of the list is undefined,\nif the file has odd length.\nIt would be better if it throws an exception.\n",
        "fct-module": "Synthesizer.Plain.IO",
        "fct-package": "synthesizer",
        "fct-signature": "FilePath -\u003e IO [Int16]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-IO.html#readLEInt16Stream",
        "fct-type": "unknown",
        "title": "readLEInt16Stream"
      },
      "index": {
        "description": "The end of the list is undefined if the file has odd length It would be better if it throws an exception",
        "hierarchy": "Synthesizer Plain IO",
        "module": "Synthesizer.Plain.IO",
        "name": "readLEInt16Stream",
        "normalized": "FilePath-\u003eIO[Int]",
        "package": "synthesizer",
        "partial": "LEInt Stream",
        "signature": "FilePath-\u003eIO[Int]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-IO.html#v:twoLECharsToInt",
      "description": {
        "fct-module": "Synthesizer.Plain.IO",
        "fct-package": "synthesizer",
        "fct-signature": "Char -\u003e Char -\u003e Int",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-IO.html#twoLECharsToInt",
        "fct-type": "unknown",
        "title": "twoLECharsToInt"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain IO",
        "module": "Synthesizer.Plain.IO",
        "name": "twoLECharsToInt",
        "normalized": "Char-\u003eChar-\u003eInt",
        "package": "synthesizer",
        "partial": "LEChars To Int",
        "signature": "Char-\u003eChar-\u003eInt"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-IO.html#v:writeInt16Stream",
      "description": {
        "fct-descr": "Uses endianess of the machine, like Sox does.\n",
        "fct-module": "Synthesizer.Plain.IO",
        "fct-package": "synthesizer",
        "fct-signature": "FilePath -\u003e [Int16] -\u003e IO ()",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-IO.html#writeInt16Stream",
        "fct-type": "unknown",
        "title": "writeInt16Stream"
      },
      "index": {
        "description": "Uses endianess of the machine like Sox does",
        "hierarchy": "Synthesizer Plain IO",
        "module": "Synthesizer.Plain.IO",
        "name": "writeInt16Stream",
        "normalized": "FilePath-\u003e[Int]-\u003eIO()",
        "package": "synthesizer",
        "partial": "Int Stream",
        "signature": "FilePath-\u003e[Int]-\u003eIO()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-IO.html#v:writeLEInt16Stream",
      "description": {
        "fct-descr": "Write a little endian 16 bit integer stream\nvia String data and \u003ctt\u003e\u003ca\u003ewriteFile\u003c/a\u003e\u003c/tt\u003e.\n",
        "fct-module": "Synthesizer.Plain.IO",
        "fct-package": "synthesizer",
        "fct-signature": "FilePath -\u003e [Int16] -\u003e IO ()",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-IO.html#writeLEInt16Stream",
        "fct-type": "unknown",
        "title": "writeLEInt16Stream"
      },
      "index": {
        "description": "Write little endian bit integer stream via String data and writeFile",
        "hierarchy": "Synthesizer Plain IO",
        "module": "Synthesizer.Plain.IO",
        "name": "writeLEInt16Stream",
        "normalized": "FilePath-\u003e[Int]-\u003eIO()",
        "package": "synthesizer",
        "partial": "LEInt Stream",
        "signature": "FilePath-\u003e[Int]-\u003eIO()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Instrument.html#v:accumulatedSaws",
      "description": {
        "fct-module": "Synthesizer.Plain.Instrument",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e a -\u003e [[a]]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Instrument.html#accumulatedSaws",
        "fct-type": "unknown",
        "title": "accumulatedSaws"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Instrument",
        "module": "Synthesizer.Plain.Instrument",
        "name": "accumulatedSaws",
        "normalized": "a-\u003ea-\u003e[[a]]",
        "package": "synthesizer",
        "partial": "Saws",
        "signature": "a-\u003ea-\u003e[[a]]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Instrument.html#v:allpassDown",
      "description": {
        "fct-module": "Synthesizer.Plain.Instrument",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e Int -\u003e a -\u003e a -\u003e a -\u003e [a]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Instrument.html#allpassDown",
        "fct-type": "unknown",
        "title": "allpassDown"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Instrument",
        "module": "Synthesizer.Plain.Instrument",
        "name": "allpassDown",
        "normalized": "a-\u003eInt-\u003ea-\u003ea-\u003ea-\u003e[a]",
        "package": "synthesizer",
        "partial": "Down",
        "signature": "a-\u003eInt-\u003ea-\u003ea-\u003ea-\u003e[a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Instrument.html#v:allpassPlain",
      "description": {
        "fct-module": "Synthesizer.Plain.Instrument",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e a -\u003e a -\u003e a -\u003e [a]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Instrument.html#allpassPlain",
        "fct-type": "unknown",
        "title": "allpassPlain"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Instrument",
        "module": "Synthesizer.Plain.Instrument",
        "name": "allpassPlain",
        "normalized": "a-\u003ea-\u003ea-\u003ea-\u003e[a]",
        "package": "synthesizer",
        "partial": "Plain",
        "signature": "a-\u003ea-\u003ea-\u003ea-\u003e[a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Instrument.html#v:bell",
      "description": {
        "fct-module": "Synthesizer.Plain.Instrument",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e a -\u003e [a]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Instrument.html#bell",
        "fct-type": "unknown",
        "title": "bell"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Instrument",
        "module": "Synthesizer.Plain.Instrument",
        "name": "bell",
        "normalized": "a-\u003ea-\u003e[a]",
        "package": "synthesizer",
        "partial": "",
        "signature": "a-\u003ea-\u003e[a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Instrument.html#v:bellHarmonic",
      "description": {
        "fct-module": "Synthesizer.Plain.Instrument",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e a -\u003e a -\u003e a -\u003e [a]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Instrument.html#bellHarmonic",
        "fct-type": "unknown",
        "title": "bellHarmonic"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Instrument",
        "module": "Synthesizer.Plain.Instrument",
        "name": "bellHarmonic",
        "normalized": "a-\u003ea-\u003ea-\u003ea-\u003e[a]",
        "package": "synthesizer",
        "partial": "Harmonic",
        "signature": "a-\u003ea-\u003ea-\u003ea-\u003e[a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Instrument.html#v:choir",
      "description": {
        "fct-module": "Synthesizer.Plain.Instrument",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e a -\u003e [a]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Instrument.html#choir",
        "fct-type": "unknown",
        "title": "choir"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Instrument",
        "module": "Synthesizer.Plain.Instrument",
        "name": "choir",
        "normalized": "a-\u003ea-\u003e[a]",
        "package": "synthesizer",
        "partial": "",
        "signature": "a-\u003ea-\u003e[a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Instrument.html#v:choirWave",
      "description": {
        "fct-module": "Synthesizer.Plain.Instrument",
        "fct-package": "synthesizer",
        "fct-signature": "[a]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Instrument.html#choirWave",
        "fct-type": "unknown",
        "title": "choirWave"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Instrument",
        "module": "Synthesizer.Plain.Instrument",
        "name": "choirWave",
        "normalized": "[a]",
        "package": "synthesizer",
        "partial": "Wave",
        "signature": "[a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Instrument.html#v:electroTom",
      "description": {
        "fct-descr": "Drum sound using the Karplus-Strong-Algorithm\n    This is a Noise.white enveloped by an exponential2\n    which is piped through the Karplus-Strong machine\n    for generating some frequency.\n    The whole thing is then frequency modulated\n    to give a falling frequency. \n",
        "fct-module": "Synthesizer.Plain.Instrument",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e [a]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Instrument.html#electroTom",
        "fct-type": "unknown",
        "title": "electroTom"
      },
      "index": {
        "description": "Drum sound using the Karplus-Strong-Algorithm This is Noise.white enveloped by an exponential2 which is piped through the Karplus-Strong machine for generating some frequency The whole thing is then frequency modulated to give falling frequency",
        "hierarchy": "Synthesizer Plain Instrument",
        "module": "Synthesizer.Plain.Instrument",
        "name": "electroTom",
        "normalized": "a-\u003e[a]",
        "package": "synthesizer",
        "partial": "Tom",
        "signature": "a-\u003e[a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Instrument.html#v:fastBell",
      "description": {
        "fct-module": "Synthesizer.Plain.Instrument",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e a -\u003e [a]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Instrument.html#fastBell",
        "fct-type": "unknown",
        "title": "fastBell"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Instrument",
        "module": "Synthesizer.Plain.Instrument",
        "name": "fastBell",
        "normalized": "a-\u003ea-\u003e[a]",
        "package": "synthesizer",
        "partial": "Bell",
        "signature": "a-\u003ea-\u003e[a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Instrument.html#v:fatSaw",
      "description": {
        "fct-module": "Synthesizer.Plain.Instrument",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e a -\u003e [a]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Instrument.html#fatSaw",
        "fct-type": "unknown",
        "title": "fatSaw"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Instrument",
        "module": "Synthesizer.Plain.Instrument",
        "name": "fatSaw",
        "normalized": "a-\u003ea-\u003e[a]",
        "package": "synthesizer",
        "partial": "Saw",
        "signature": "a-\u003ea-\u003e[a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Instrument.html#v:fatSawChord",
      "description": {
        "fct-module": "Synthesizer.Plain.Instrument",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e a -\u003e [a]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Instrument.html#fatSawChord",
        "fct-type": "unknown",
        "title": "fatSawChord"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Instrument",
        "module": "Synthesizer.Plain.Instrument",
        "name": "fatSawChord",
        "normalized": "a-\u003ea-\u003e[a]",
        "package": "synthesizer",
        "partial": "Saw Chord",
        "signature": "a-\u003ea-\u003e[a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Instrument.html#v:fatSawChordFilter",
      "description": {
        "fct-module": "Synthesizer.Plain.Instrument",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e a -\u003e [a]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Instrument.html#fatSawChordFilter",
        "fct-type": "unknown",
        "title": "fatSawChordFilter"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Instrument",
        "module": "Synthesizer.Plain.Instrument",
        "name": "fatSawChordFilter",
        "normalized": "a-\u003ea-\u003e[a]",
        "package": "synthesizer",
        "partial": "Saw Chord Filter",
        "signature": "a-\u003ea-\u003e[a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Instrument.html#v:filterDown",
      "description": {
        "fct-module": "Synthesizer.Plain.Instrument",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e [Parameter a]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Instrument.html#filterDown",
        "fct-type": "unknown",
        "title": "filterDown"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Instrument",
        "module": "Synthesizer.Plain.Instrument",
        "name": "filterDown",
        "normalized": "a-\u003e[Parameter a]",
        "package": "synthesizer",
        "partial": "Down",
        "signature": "a-\u003e[Parameter a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Instrument.html#v:filterSaw",
      "description": {
        "fct-module": "Synthesizer.Plain.Instrument",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e a -\u003e a -\u003e [a]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Instrument.html#filterSaw",
        "fct-type": "unknown",
        "title": "filterSaw"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Instrument",
        "module": "Synthesizer.Plain.Instrument",
        "name": "filterSaw",
        "normalized": "a-\u003ea-\u003ea-\u003e[a]",
        "package": "synthesizer",
        "partial": "Saw",
        "signature": "a-\u003ea-\u003ea-\u003e[a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Instrument.html#v:filterSweep",
      "description": {
        "fct-descr": "low pass with resonance \n",
        "fct-module": "Synthesizer.Plain.Instrument",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e a -\u003e [v] -\u003e [v]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Instrument.html#filterSweep",
        "fct-type": "unknown",
        "title": "filterSweep"
      },
      "index": {
        "description": "low pass with resonance",
        "hierarchy": "Synthesizer Plain Instrument",
        "module": "Synthesizer.Plain.Instrument",
        "name": "filterSweep",
        "normalized": "a-\u003ea-\u003e[b]-\u003e[b]",
        "package": "synthesizer",
        "partial": "Sweep",
        "signature": "a-\u003ea-\u003e[v]-\u003e[v]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Instrument.html#v:fmBell",
      "description": {
        "fct-module": "Synthesizer.Plain.Instrument",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e a -\u003e a -\u003e a -\u003e [a]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Instrument.html#fmBell",
        "fct-type": "unknown",
        "title": "fmBell"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Instrument",
        "module": "Synthesizer.Plain.Instrument",
        "name": "fmBell",
        "normalized": "a-\u003ea-\u003ea-\u003ea-\u003e[a]",
        "package": "synthesizer",
        "partial": "Bell",
        "signature": "a-\u003ea-\u003ea-\u003ea-\u003e[a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Instrument.html#v:modulatedWave",
      "description": {
        "fct-descr": "accumulate multiple similar saw sounds and observe the increase of volume\n    The oscillator \u003ctt\u003eosc\u003c/tt\u003e must accept relative frequencies. \n",
        "fct-module": "Synthesizer.Plain.Instrument",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e (a -\u003e [a] -\u003e [a]) -\u003e a -\u003e a -\u003e a -\u003e a -\u003e a -\u003e [a]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Instrument.html#modulatedWave",
        "fct-type": "unknown",
        "title": "modulatedWave"
      },
      "index": {
        "description": "accumulate multiple similar saw sounds and observe the increase of volume The oscillator osc must accept relative frequencies",
        "hierarchy": "Synthesizer Plain Instrument",
        "module": "Synthesizer.Plain.Instrument",
        "name": "modulatedWave",
        "normalized": "a-\u003e(a-\u003e[a]-\u003e[a])-\u003ea-\u003ea-\u003ea-\u003ea-\u003ea-\u003e[a]",
        "package": "synthesizer",
        "partial": "Wave",
        "signature": "a-\u003e(a-\u003e[a]-\u003e[a])-\u003ea-\u003ea-\u003ea-\u003ea-\u003ea-\u003e[a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Instrument.html#v:moogDown",
      "description": {
        "fct-module": "Synthesizer.Plain.Instrument",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e Int -\u003e a -\u003e a -\u003e a -\u003e [a]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Instrument.html#moogDown",
        "fct-type": "unknown",
        "title": "moogDown"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Instrument",
        "module": "Synthesizer.Plain.Instrument",
        "name": "moogDown",
        "normalized": "a-\u003eInt-\u003ea-\u003ea-\u003ea-\u003e[a]",
        "package": "synthesizer",
        "partial": "Down",
        "signature": "a-\u003eInt-\u003ea-\u003ea-\u003ea-\u003e[a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Instrument.html#v:moogGuitar",
      "description": {
        "fct-module": "Synthesizer.Plain.Instrument",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e a -\u003e [a]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Instrument.html#moogGuitar",
        "fct-type": "unknown",
        "title": "moogGuitar"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Instrument",
        "module": "Synthesizer.Plain.Instrument",
        "name": "moogGuitar",
        "normalized": "a-\u003ea-\u003e[a]",
        "package": "synthesizer",
        "partial": "Guitar",
        "signature": "a-\u003ea-\u003e[a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Instrument.html#v:moogGuitarSoft",
      "description": {
        "fct-module": "Synthesizer.Plain.Instrument",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e a -\u003e [a]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Instrument.html#moogGuitarSoft",
        "fct-type": "unknown",
        "title": "moogGuitarSoft"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Instrument",
        "module": "Synthesizer.Plain.Instrument",
        "name": "moogGuitarSoft",
        "normalized": "a-\u003ea-\u003e[a]",
        "package": "synthesizer",
        "partial": "Guitar Soft",
        "signature": "a-\u003ea-\u003e[a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Instrument.html#v:moogReso",
      "description": {
        "fct-module": "Synthesizer.Plain.Instrument",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e Int -\u003e a -\u003e a -\u003e a -\u003e [a]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Instrument.html#moogReso",
        "fct-type": "unknown",
        "title": "moogReso"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Instrument",
        "module": "Synthesizer.Plain.Instrument",
        "name": "moogReso",
        "normalized": "a-\u003eInt-\u003ea-\u003ea-\u003ea-\u003e[a]",
        "package": "synthesizer",
        "partial": "Reso",
        "signature": "a-\u003eInt-\u003ea-\u003ea-\u003ea-\u003e[a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Instrument.html#v:noiseBass",
      "description": {
        "fct-module": "Synthesizer.Plain.Instrument",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e a -\u003e [a]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Instrument.html#noiseBass",
        "fct-type": "unknown",
        "title": "noiseBass"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Instrument",
        "module": "Synthesizer.Plain.Instrument",
        "name": "noiseBass",
        "normalized": "a-\u003ea-\u003e[a]",
        "package": "synthesizer",
        "partial": "Bass",
        "signature": "a-\u003ea-\u003e[a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Instrument.html#v:osciAbsModSaw",
      "description": {
        "fct-descr": "Build a saw sound from its harmonics and modulate it.\n    Different to normal modulation\n    I modulate each harmonic with the same depth rather than a proportional one. \n",
        "fct-module": "Synthesizer.Plain.Instrument",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e a -\u003e [a]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Instrument.html#osciAbsModSaw",
        "fct-type": "unknown",
        "title": "osciAbsModSaw"
      },
      "index": {
        "description": "Build saw sound from its harmonics and modulate it Different to normal modulation modulate each harmonic with the same depth rather than proportional one",
        "hierarchy": "Synthesizer Plain Instrument",
        "module": "Synthesizer.Plain.Instrument",
        "name": "osciAbsModSaw",
        "normalized": "a-\u003ea-\u003e[a]",
        "package": "synthesizer",
        "partial": "Abs Mod Saw",
        "signature": "a-\u003ea-\u003e[a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Instrument.html#v:osciDoubleSaw",
      "description": {
        "fct-module": "Synthesizer.Plain.Instrument",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e [a] -\u003e [a]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Instrument.html#osciDoubleSaw",
        "fct-type": "unknown",
        "title": "osciDoubleSaw"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Instrument",
        "module": "Synthesizer.Plain.Instrument",
        "name": "osciDoubleSaw",
        "normalized": "a-\u003e[a]-\u003e[a]",
        "package": "synthesizer",
        "partial": "Double Saw",
        "signature": "a-\u003e[a]-\u003e[a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Instrument.html#v:osciSharp",
      "description": {
        "fct-descr": "A tone with a waveform with roughly the dependency x -\u003e x**p,\n    where the waveform is normalized to constant quadratic norm \n",
        "fct-module": "Synthesizer.Plain.Instrument",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e a -\u003e [a]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Instrument.html#osciSharp",
        "fct-type": "unknown",
        "title": "osciSharp"
      },
      "index": {
        "description": "tone with waveform with roughly the dependency where the waveform is normalized to constant quadratic norm",
        "hierarchy": "Synthesizer Plain Instrument",
        "module": "Synthesizer.Plain.Instrument",
        "name": "osciSharp",
        "normalized": "a-\u003ea-\u003e[a]",
        "package": "synthesizer",
        "partial": "Sharp",
        "signature": "a-\u003ea-\u003e[a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Instrument.html#v:pulsedNoise",
      "description": {
        "fct-descr": "frequency of the pulses, interesting ones are around 100 Hz and below \n",
        "fct-module": "Synthesizer.Plain.Instrument",
        "fct-package": "synthesizer",
        "fct-signature": "a-\u003e a-\u003e [a]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Instrument.html#pulsedNoise",
        "fct-type": "unknown",
        "title": "pulsedNoise"
      },
      "index": {
        "description": "frequency of the pulses interesting ones are around Hz and below",
        "hierarchy": "Synthesizer Plain Instrument",
        "module": "Synthesizer.Plain.Instrument",
        "name": "pulsedNoise",
        "normalized": "a-\u003ea-\u003e[a]",
        "package": "synthesizer",
        "partial": "Noise",
        "signature": "a-\u003ea-\u003e[a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Instrument.html#v:simpleSaw",
      "description": {
        "fct-module": "Synthesizer.Plain.Instrument",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e a -\u003e [a]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Instrument.html#simpleSaw",
        "fct-type": "unknown",
        "title": "simpleSaw"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Instrument",
        "module": "Synthesizer.Plain.Instrument",
        "name": "simpleSaw",
        "normalized": "a-\u003ea-\u003e[a]",
        "package": "synthesizer",
        "partial": "Saw",
        "signature": "a-\u003ea-\u003e[a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Instrument.html#v:squareBell",
      "description": {
        "fct-module": "Synthesizer.Plain.Instrument",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e a -\u003e [a]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Instrument.html#squareBell",
        "fct-type": "unknown",
        "title": "squareBell"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Instrument",
        "module": "Synthesizer.Plain.Instrument",
        "name": "squareBell",
        "normalized": "a-\u003ea-\u003e[a]",
        "package": "synthesizer",
        "partial": "Bell",
        "signature": "a-\u003ea-\u003e[a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Instrument.html#v:stereoPhaser",
      "description": {
        "fct-descr": "A function mapping a frequency to a signal. \nThe factor to the frequency, should be close to 1. \nThe base (undeviated) frequency of the sound. \n",
        "fct-module": "Synthesizer.Plain.Instrument",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e [b]-\u003e a-\u003e a-\u003e [b]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Instrument.html#stereoPhaser",
        "fct-type": "unknown",
        "title": "stereoPhaser"
      },
      "index": {
        "description": "function mapping frequency to signal The factor to the frequency should be close to The base undeviated frequency of the sound",
        "hierarchy": "Synthesizer Plain Instrument",
        "module": "Synthesizer.Plain.Instrument",
        "name": "stereoPhaser",
        "normalized": "a-\u003e[b]-\u003ea-\u003ea-\u003e[b]",
        "package": "synthesizer",
        "partial": "Phaser",
        "signature": "a-\u003e[b]-\u003ea-\u003ea-\u003e[b]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Interpolation.html#t:Margin",
      "description": {
        "fct-module": "Synthesizer.Plain.Interpolation",
        "fct-package": "synthesizer",
        "fct-signature": "data",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Interpolation.html#Margin",
        "fct-type": "unknown",
        "title": "Margin"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Interpolation",
        "module": "Synthesizer.Plain.Interpolation",
        "name": "Margin",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Margin",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Interpolation.html#t:T",
      "description": {
        "fct-module": "Synthesizer.Plain.Interpolation",
        "fct-package": "synthesizer",
        "fct-signature": "data",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Interpolation.html#T",
        "fct-type": "unknown",
        "title": "T"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Interpolation",
        "module": "Synthesizer.Plain.Interpolation",
        "name": "T",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Interpolation.html#v:constant",
      "description": {
        "fct-descr": "Consider the signal to be piecewise constant. \n",
        "fct-module": "Synthesizer.Plain.Interpolation",
        "fct-package": "synthesizer",
        "fct-signature": "T t y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Interpolation.html#constant",
        "fct-type": "unknown",
        "title": "constant"
      },
      "index": {
        "description": "Consider the signal to be piecewise constant",
        "hierarchy": "Synthesizer Plain Interpolation",
        "module": "Synthesizer.Plain.Interpolation",
        "name": "constant",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Interpolation.html#v:constantPad",
      "description": {
        "fct-module": "Synthesizer.Plain.Interpolation",
        "fct-package": "synthesizer",
        "fct-signature": "(T t y -\u003e t -\u003e T y -\u003e a) -\u003e T t y -\u003e t -\u003e T y -\u003e a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Interpolation.html#constantPad",
        "fct-type": "unknown",
        "title": "constantPad"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Interpolation",
        "module": "Synthesizer.Plain.Interpolation",
        "name": "constantPad",
        "normalized": "(T a b-\u003ea-\u003eT b-\u003ec)-\u003eT a b-\u003ea-\u003eT b-\u003ec",
        "package": "synthesizer",
        "partial": "Pad",
        "signature": "(T t y-\u003et-\u003eT y-\u003ea)-\u003eT t y-\u003et-\u003eT y-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Interpolation.html#v:cubic",
      "description": {
        "fct-descr": "Consider the signal to be piecewise cubic,\nwith smooth connections at the nodes.\nIt uses a cubic curve which has node values\nx0 at 0 and x1 at 1 and derivatives\n(x1-xm1)\u003cem\u003e2 and (x2-x0)\u003c/em\u003e2, respectively.\nYou can see how it works\nif you evaluate the expression for t=0 and t=1\nas well as the derivative at these points.\n",
        "fct-module": "Synthesizer.Plain.Interpolation",
        "fct-package": "synthesizer",
        "fct-signature": "T t y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Interpolation-Module.html#cubic",
        "fct-type": "unknown",
        "title": "cubic"
      },
      "index": {
        "description": "Consider the signal to be piecewise cubic with smooth connections at the nodes It uses cubic curve which has node values x0 at and x1 at and derivatives x1-xm1 and x2-x0 respectively You can see how it works if you evaluate the expression for and as well as the derivative at these points",
        "hierarchy": "Synthesizer Plain Interpolation",
        "module": "Synthesizer.Plain.Interpolation",
        "name": "cubic",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Interpolation.html#v:cyclicPad",
      "description": {
        "fct-descr": "Only for finite input signals.\n",
        "fct-module": "Synthesizer.Plain.Interpolation",
        "fct-package": "synthesizer",
        "fct-signature": "(T t y -\u003e t -\u003e T y -\u003e a) -\u003e T t y -\u003e t -\u003e T y -\u003e a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Interpolation.html#cyclicPad",
        "fct-type": "unknown",
        "title": "cyclicPad"
      },
      "index": {
        "description": "Only for finite input signals",
        "hierarchy": "Synthesizer Plain Interpolation",
        "module": "Synthesizer.Plain.Interpolation",
        "name": "cyclicPad",
        "normalized": "(T a b-\u003ea-\u003eT b-\u003ec)-\u003eT a b-\u003ea-\u003eT b-\u003ec",
        "package": "synthesizer",
        "partial": "Pad",
        "signature": "(T t y-\u003et-\u003eT y-\u003ea)-\u003eT t y-\u003et-\u003eT y-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Interpolation.html#v:extrapolationPad",
      "description": {
        "fct-descr": "The extrapolation may miss some of the first and some of the last points\n",
        "fct-module": "Synthesizer.Plain.Interpolation",
        "fct-package": "synthesizer",
        "fct-signature": "(T t y -\u003e t -\u003e T y -\u003e a) -\u003e T t y -\u003e t -\u003e T y -\u003e a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Interpolation.html#extrapolationPad",
        "fct-type": "unknown",
        "title": "extrapolationPad"
      },
      "index": {
        "description": "The extrapolation may miss some of the first and some of the last points",
        "hierarchy": "Synthesizer Plain Interpolation",
        "module": "Synthesizer.Plain.Interpolation",
        "name": "extrapolationPad",
        "normalized": "(T a b-\u003ea-\u003eT b-\u003ec)-\u003eT a b-\u003ea-\u003eT b-\u003ec",
        "package": "synthesizer",
        "partial": "Pad",
        "signature": "(T t y-\u003et-\u003eT y-\u003ea)-\u003eT t y-\u003et-\u003eT y-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Interpolation.html#v:func",
      "description": {
        "fct-module": "Synthesizer.Plain.Interpolation",
        "fct-package": "synthesizer",
        "fct-signature": "T t y -\u003e t -\u003e T y -\u003e y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Interpolation.html#func",
        "fct-type": "unknown",
        "title": "func"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Interpolation",
        "module": "Synthesizer.Plain.Interpolation",
        "name": "func",
        "normalized": "T a b-\u003ea-\u003eT b-\u003eb",
        "package": "synthesizer",
        "partial": "",
        "signature": "T t y-\u003et-\u003eT y-\u003ey"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Interpolation.html#v:function",
      "description": {
        "fct-descr": "\u003ctt\u003e(left extent, right extent)\u003c/tt\u003e, e.g. \u003ctt\u003e(1,1)\u003c/tt\u003e for linear hat \n",
        "fct-module": "Synthesizer.Plain.Interpolation",
        "fct-package": "synthesizer",
        "fct-signature": "(Int, Int)-\u003e t -\u003e t-\u003e T t y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Interpolation-Module.html#function",
        "fct-type": "unknown",
        "title": "function"
      },
      "index": {
        "description": "left extent right extent e.g for linear hat",
        "hierarchy": "Synthesizer Plain Interpolation",
        "module": "Synthesizer.Plain.Interpolation",
        "name": "function",
        "normalized": "(Int,Int)-\u003ea-\u003ea-\u003eT a b",
        "package": "synthesizer",
        "partial": "",
        "signature": "(Int,Int)-\u003et-\u003et-\u003eT t y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Interpolation.html#v:linear",
      "description": {
        "fct-descr": "Consider the signal to be piecewise linear. \n",
        "fct-module": "Synthesizer.Plain.Interpolation",
        "fct-package": "synthesizer",
        "fct-signature": "T t y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Interpolation-Module.html#linear",
        "fct-type": "unknown",
        "title": "linear"
      },
      "index": {
        "description": "Consider the signal to be piecewise linear",
        "hierarchy": "Synthesizer Plain Interpolation",
        "module": "Synthesizer.Plain.Interpolation",
        "name": "linear",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Interpolation.html#v:margin",
      "description": {
        "fct-module": "Synthesizer.Plain.Interpolation",
        "fct-package": "synthesizer",
        "fct-signature": "T t y -\u003e Margin",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Interpolation.html#margin",
        "fct-type": "unknown",
        "title": "margin"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Interpolation",
        "module": "Synthesizer.Plain.Interpolation",
        "name": "margin",
        "normalized": "T a b-\u003eMargin",
        "package": "synthesizer",
        "partial": "",
        "signature": "T t y-\u003eMargin"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Interpolation.html#v:multiRelative",
      "description": {
        "fct-descr": "All values of frequency control must be non-negative. \n",
        "fct-module": "Synthesizer.Plain.Interpolation",
        "fct-package": "synthesizer",
        "fct-signature": "T t y -\u003e t -\u003e T y -\u003e T t -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Interpolation.html#multiRelative",
        "fct-type": "unknown",
        "title": "multiRelative"
      },
      "index": {
        "description": "All values of frequency control must be non-negative",
        "hierarchy": "Synthesizer Plain Interpolation",
        "module": "Synthesizer.Plain.Interpolation",
        "name": "multiRelative",
        "normalized": "T a b-\u003ea-\u003eT b-\u003eT a-\u003eT b",
        "package": "synthesizer",
        "partial": "Relative",
        "signature": "T t y-\u003et-\u003eT y-\u003eT t-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Interpolation.html#v:multiRelativeConstantPad",
      "description": {
        "fct-module": "Synthesizer.Plain.Interpolation",
        "fct-package": "synthesizer",
        "fct-signature": "T t y -\u003e t -\u003e T t -\u003e T y -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Interpolation.html#multiRelativeConstantPad",
        "fct-type": "unknown",
        "title": "multiRelativeConstantPad"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Interpolation",
        "module": "Synthesizer.Plain.Interpolation",
        "name": "multiRelativeConstantPad",
        "normalized": "T a b-\u003ea-\u003eT a-\u003eT b-\u003eT b",
        "package": "synthesizer",
        "partial": "Relative Constant Pad",
        "signature": "T t y-\u003et-\u003eT t-\u003eT y-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Interpolation.html#v:multiRelativeCyclicPad",
      "description": {
        "fct-module": "Synthesizer.Plain.Interpolation",
        "fct-package": "synthesizer",
        "fct-signature": "T t y -\u003e t -\u003e T t -\u003e T y -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Interpolation.html#multiRelativeCyclicPad",
        "fct-type": "unknown",
        "title": "multiRelativeCyclicPad"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Interpolation",
        "module": "Synthesizer.Plain.Interpolation",
        "name": "multiRelativeCyclicPad",
        "normalized": "T a b-\u003ea-\u003eT a-\u003eT b-\u003eT b",
        "package": "synthesizer",
        "partial": "Relative Cyclic Pad",
        "signature": "T t y-\u003et-\u003eT t-\u003eT y-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Interpolation.html#v:multiRelativeExtrapolationPad",
      "description": {
        "fct-descr": "The extrapolation may miss some of the first and some of the last points\n",
        "fct-module": "Synthesizer.Plain.Interpolation",
        "fct-package": "synthesizer",
        "fct-signature": "T t y -\u003e t -\u003e T t -\u003e T y -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Interpolation.html#multiRelativeExtrapolationPad",
        "fct-type": "unknown",
        "title": "multiRelativeExtrapolationPad"
      },
      "index": {
        "description": "The extrapolation may miss some of the first and some of the last points",
        "hierarchy": "Synthesizer Plain Interpolation",
        "module": "Synthesizer.Plain.Interpolation",
        "name": "multiRelativeExtrapolationPad",
        "normalized": "T a b-\u003ea-\u003eT a-\u003eT b-\u003eT b",
        "package": "synthesizer",
        "partial": "Relative Extrapolation Pad",
        "signature": "T t y-\u003et-\u003eT t-\u003eT y-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Interpolation.html#v:multiRelativeZeroPad",
      "description": {
        "fct-module": "Synthesizer.Plain.Interpolation",
        "fct-package": "synthesizer",
        "fct-signature": "y -\u003e T t y -\u003e t -\u003e T t -\u003e T y -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Interpolation.html#multiRelativeZeroPad",
        "fct-type": "unknown",
        "title": "multiRelativeZeroPad"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Interpolation",
        "module": "Synthesizer.Plain.Interpolation",
        "name": "multiRelativeZeroPad",
        "normalized": "a-\u003eT b a-\u003eb-\u003eT b-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "Relative Zero Pad",
        "signature": "y-\u003eT t y-\u003et-\u003eT t-\u003eT y-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Interpolation.html#v:multiRelativeZeroPadConstant",
      "description": {
        "fct-module": "Synthesizer.Plain.Interpolation",
        "fct-package": "synthesizer",
        "fct-signature": "t -\u003e T t -\u003e T y -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Interpolation.html#multiRelativeZeroPadConstant",
        "fct-type": "unknown",
        "title": "multiRelativeZeroPadConstant"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Interpolation",
        "module": "Synthesizer.Plain.Interpolation",
        "name": "multiRelativeZeroPadConstant",
        "normalized": "a-\u003eT a-\u003eT b-\u003eT b",
        "package": "synthesizer",
        "partial": "Relative Zero Pad Constant",
        "signature": "t-\u003eT t-\u003eT y-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Interpolation.html#v:multiRelativeZeroPadCubic",
      "description": {
        "fct-module": "Synthesizer.Plain.Interpolation",
        "fct-package": "synthesizer",
        "fct-signature": "t -\u003e T t -\u003e T y -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Interpolation.html#multiRelativeZeroPadCubic",
        "fct-type": "unknown",
        "title": "multiRelativeZeroPadCubic"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Interpolation",
        "module": "Synthesizer.Plain.Interpolation",
        "name": "multiRelativeZeroPadCubic",
        "normalized": "a-\u003eT a-\u003eT b-\u003eT b",
        "package": "synthesizer",
        "partial": "Relative Zero Pad Cubic",
        "signature": "t-\u003eT t-\u003eT y-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Interpolation.html#v:multiRelativeZeroPadLinear",
      "description": {
        "fct-module": "Synthesizer.Plain.Interpolation",
        "fct-package": "synthesizer",
        "fct-signature": "t -\u003e T t -\u003e T y -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Interpolation.html#multiRelativeZeroPadLinear",
        "fct-type": "unknown",
        "title": "multiRelativeZeroPadLinear"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Interpolation",
        "module": "Synthesizer.Plain.Interpolation",
        "name": "multiRelativeZeroPadLinear",
        "normalized": "a-\u003eT a-\u003eT b-\u003eT b",
        "package": "synthesizer",
        "partial": "Relative Zero Pad Linear",
        "signature": "t-\u003eT t-\u003eT y-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Interpolation.html#v:number",
      "description": {
        "fct-module": "Synthesizer.Plain.Interpolation",
        "fct-package": "synthesizer",
        "fct-signature": "T t y -\u003e Int",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Interpolation.html#number",
        "fct-type": "unknown",
        "title": "number"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Interpolation",
        "module": "Synthesizer.Plain.Interpolation",
        "name": "number",
        "normalized": "T a b-\u003eInt",
        "package": "synthesizer",
        "partial": "",
        "signature": "T t y-\u003eInt"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Interpolation.html#v:offset",
      "description": {
        "fct-module": "Synthesizer.Plain.Interpolation",
        "fct-package": "synthesizer",
        "fct-signature": "T t y -\u003e Int",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Interpolation.html#offset",
        "fct-type": "unknown",
        "title": "offset"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Interpolation",
        "module": "Synthesizer.Plain.Interpolation",
        "name": "offset",
        "normalized": "T a b-\u003eInt",
        "package": "synthesizer",
        "partial": "",
        "signature": "T t y-\u003eInt"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Interpolation.html#v:piecewise",
      "description": {
        "fct-module": "Synthesizer.Plain.Interpolation",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e [t -\u003e t] -\u003e T t y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Interpolation-Module.html#piecewise",
        "fct-type": "unknown",
        "title": "piecewise"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Interpolation",
        "module": "Synthesizer.Plain.Interpolation",
        "name": "piecewise",
        "normalized": "Int-\u003e[a-\u003ea]-\u003eT a b",
        "package": "synthesizer",
        "partial": "",
        "signature": "Int-\u003e[t-\u003et]-\u003eT t y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Interpolation.html#v:single",
      "description": {
        "fct-module": "Synthesizer.Plain.Interpolation",
        "fct-package": "synthesizer",
        "fct-signature": "T t y -\u003e t -\u003e T y -\u003e y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Interpolation.html#single",
        "fct-type": "unknown",
        "title": "single"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Interpolation",
        "module": "Synthesizer.Plain.Interpolation",
        "name": "single",
        "normalized": "T a b-\u003ea-\u003eT b-\u003eb",
        "package": "synthesizer",
        "partial": "",
        "signature": "T t y-\u003et-\u003eT y-\u003ey"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Interpolation.html#v:singleRec",
      "description": {
        "fct-descr": "alternative implementation of \u003ctt\u003e\u003ca\u003esingle\u003c/a\u003e\u003c/tt\u003e\n",
        "fct-module": "Synthesizer.Plain.Interpolation",
        "fct-package": "synthesizer",
        "fct-signature": "T t y -\u003e t -\u003e T y -\u003e y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Interpolation.html#singleRec",
        "fct-type": "unknown",
        "title": "singleRec"
      },
      "index": {
        "description": "alternative implementation of single",
        "hierarchy": "Synthesizer Plain Interpolation",
        "module": "Synthesizer.Plain.Interpolation",
        "name": "singleRec",
        "normalized": "T a b-\u003ea-\u003eT b-\u003eb",
        "package": "synthesizer",
        "partial": "Rec",
        "signature": "T t y-\u003et-\u003eT y-\u003ey"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Interpolation.html#v:zeroPad",
      "description": {
        "fct-module": "Synthesizer.Plain.Interpolation",
        "fct-package": "synthesizer",
        "fct-signature": "(T t y -\u003e t -\u003e T y -\u003e a) -\u003e y -\u003e T t y -\u003e t -\u003e T y -\u003e a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Interpolation.html#zeroPad",
        "fct-type": "unknown",
        "title": "zeroPad"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Interpolation",
        "module": "Synthesizer.Plain.Interpolation",
        "name": "zeroPad",
        "normalized": "(T a b-\u003ea-\u003eT b-\u003ec)-\u003eb-\u003eT a b-\u003ea-\u003eT b-\u003ec",
        "package": "synthesizer",
        "partial": "Pad",
        "signature": "(T t y-\u003et-\u003eT y-\u003ea)-\u003ey-\u003eT t y-\u003et-\u003eT y-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-LorenzAttractor.html#v:computeDerivatives",
      "description": {
        "fct-module": "Synthesizer.Plain.LorenzAttractor",
        "fct-package": "synthesizer",
        "fct-signature": "(y, y, y) -\u003e (y, y, y) -\u003e (y, y, y)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-LorenzAttractor.html#computeDerivatives",
        "fct-type": "unknown",
        "title": "computeDerivatives"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain LorenzAttractor",
        "module": "Synthesizer.Plain.LorenzAttractor",
        "name": "computeDerivatives",
        "normalized": "(a,a,a)-\u003e(a,a,a)-\u003e(a,a,a)",
        "package": "synthesizer",
        "partial": "Derivatives",
        "signature": "(y,y,y)-\u003e(y,y,y)-\u003e(y,y,y)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-LorenzAttractor.html#v:equilibrium",
      "description": {
        "fct-module": "Synthesizer.Plain.LorenzAttractor",
        "fct-package": "synthesizer",
        "fct-signature": "(Double, Double, Double)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-LorenzAttractor.html#equilibrium",
        "fct-type": "unknown",
        "title": "equilibrium"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain LorenzAttractor",
        "module": "Synthesizer.Plain.LorenzAttractor",
        "name": "equilibrium",
        "normalized": "(Double,Double,Double)",
        "package": "synthesizer",
        "partial": "",
        "signature": "(Double,Double,Double)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-LorenzAttractor.html#v:example",
      "description": {
        "fct-module": "Synthesizer.Plain.LorenzAttractor",
        "fct-package": "synthesizer",
        "fct-signature": "[(Double, Double, Double)]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-LorenzAttractor.html#example",
        "fct-type": "unknown",
        "title": "example"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain LorenzAttractor",
        "module": "Synthesizer.Plain.LorenzAttractor",
        "name": "example",
        "normalized": "[(Double,Double,Double)]",
        "package": "synthesizer",
        "partial": "",
        "signature": "[(Double,Double,Double)]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-LorenzAttractor.html#v:example0",
      "description": {
        "fct-module": "Synthesizer.Plain.LorenzAttractor",
        "fct-package": "synthesizer",
        "fct-signature": "[(Double, Double, Double)]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-LorenzAttractor.html#example0",
        "fct-type": "unknown",
        "title": "example0"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain LorenzAttractor",
        "module": "Synthesizer.Plain.LorenzAttractor",
        "name": "example0",
        "normalized": "[(Double,Double,Double)]",
        "package": "synthesizer",
        "partial": "",
        "signature": "[(Double,Double,Double)]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-LorenzAttractor.html#v:explicitEuler",
      "description": {
        "fct-module": "Synthesizer.Plain.LorenzAttractor",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e (v -\u003e v) -\u003e v -\u003e [v]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-LorenzAttractor.html#explicitEuler",
        "fct-type": "unknown",
        "title": "explicitEuler"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain LorenzAttractor",
        "module": "Synthesizer.Plain.LorenzAttractor",
        "name": "explicitEuler",
        "normalized": "a-\u003e(b-\u003eb)-\u003eb-\u003e[b]",
        "package": "synthesizer",
        "partial": "Euler",
        "signature": "a-\u003e(v-\u003ev)-\u003ev-\u003e[v]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Miscellaneous.html#v:receive3Dsound",
      "description": {
        "fct-descr": "simulate an moving sounding object\n   convert the way of the object through 3D space\n   into a delay and attenuation information,\n   sonicDelay is the reciprocal of the sonic velocity \n",
        "fct-module": "Synthesizer.Plain.Miscellaneous",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e a -\u003e v -\u003e [v] -\u003e ([a], [a])",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Miscellaneous.html#receive3Dsound",
        "fct-type": "unknown",
        "title": "receive3Dsound"
      },
      "index": {
        "description": "simulate an moving sounding object convert the way of the object through space into delay and attenuation information sonicDelay is the reciprocal of the sonic velocity",
        "hierarchy": "Synthesizer Plain Miscellaneous",
        "module": "Synthesizer.Plain.Miscellaneous",
        "name": "receive3Dsound",
        "normalized": "a-\u003ea-\u003eb-\u003e[b]-\u003e([a],[a])",
        "package": "synthesizer",
        "partial": "Dsound",
        "signature": "a-\u003ea-\u003ev-\u003e[v]-\u003e([a],[a])"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Modifier.html#t:Initialized",
      "description": {
        "fct-module": "Synthesizer.Plain.Modifier",
        "fct-package": "synthesizer",
        "fct-signature": "data",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Modifier.html#Initialized",
        "fct-type": "unknown",
        "title": "Initialized"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Modifier",
        "module": "Synthesizer.Plain.Modifier",
        "name": "Initialized",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Initialized",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Modifier.html#t:Simple",
      "description": {
        "fct-module": "Synthesizer.Plain.Modifier",
        "fct-package": "synthesizer",
        "fct-signature": "data",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Modifier.html#Simple",
        "fct-type": "unknown",
        "title": "Simple"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Modifier",
        "module": "Synthesizer.Plain.Modifier",
        "name": "Simple",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Simple",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Modifier.html#t:T",
      "description": {
        "fct-module": "Synthesizer.Plain.Modifier",
        "fct-package": "synthesizer",
        "fct-signature": "type",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Modifier.html#T",
        "fct-type": "unknown",
        "title": "T"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Modifier",
        "module": "Synthesizer.Plain.Modifier",
        "name": "T",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Modifier.html#v:initialize",
      "description": {
        "fct-module": "Synthesizer.Plain.Modifier",
        "fct-package": "synthesizer",
        "fct-signature": "Initialized s init ctrl a b -\u003e init -\u003e Simple s ctrl a b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Modifier.html#initialize",
        "fct-type": "unknown",
        "title": "initialize"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Modifier",
        "module": "Synthesizer.Plain.Modifier",
        "name": "initialize",
        "normalized": "Initialized a b c d e-\u003eb-\u003eSimple a c d e",
        "package": "synthesizer",
        "partial": "",
        "signature": "Initialized s init ctrl a b-\u003einit-\u003eSimple s ctrl a b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Modifier.html#v:modulated",
      "description": {
        "fct-descr": "Here the control may vary over the time. \n",
        "fct-module": "Synthesizer.Plain.Modifier",
        "fct-package": "synthesizer",
        "fct-signature": "Simple s ctrl a b -\u003e T ctrl -\u003e T a -\u003e T b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Modifier.html#modulated",
        "fct-type": "unknown",
        "title": "modulated"
      },
      "index": {
        "description": "Here the control may vary over the time",
        "hierarchy": "Synthesizer Plain Modifier",
        "module": "Synthesizer.Plain.Modifier",
        "name": "modulated",
        "normalized": "Simple a b c d-\u003eT b-\u003eT c-\u003eT d",
        "package": "synthesizer",
        "partial": "",
        "signature": "Simple s ctrl a b-\u003eT ctrl-\u003eT a-\u003eT b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Modifier.html#v:modulatedInit",
      "description": {
        "fct-descr": "Here the control may vary over the time. \n",
        "fct-module": "Synthesizer.Plain.Modifier",
        "fct-package": "synthesizer",
        "fct-signature": "Initialized s init ctrl a b -\u003e init -\u003e T ctrl -\u003e T a -\u003e T b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Modifier.html#modulatedInit",
        "fct-type": "unknown",
        "title": "modulatedInit"
      },
      "index": {
        "description": "Here the control may vary over the time",
        "hierarchy": "Synthesizer Plain Modifier",
        "module": "Synthesizer.Plain.Modifier",
        "name": "modulatedInit",
        "normalized": "Initialized a b c d e-\u003eb-\u003eT c-\u003eT d-\u003eT e",
        "package": "synthesizer",
        "partial": "Init",
        "signature": "Initialized s init ctrl a b-\u003einit-\u003eT ctrl-\u003eT a-\u003eT b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Modifier.html#v:stackStatesL",
      "description": {
        "fct-module": "Synthesizer.Plain.Modifier",
        "fct-package": "synthesizer",
        "fct-signature": "(a -\u003e State s a) -\u003e a -\u003e State [s] a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Modifier.html#stackStatesL",
        "fct-type": "unknown",
        "title": "stackStatesL"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Modifier",
        "module": "Synthesizer.Plain.Modifier",
        "name": "stackStatesL",
        "normalized": "(a-\u003eState b a)-\u003ea-\u003eState[b]a",
        "package": "synthesizer",
        "partial": "States",
        "signature": "(a-\u003eState s a)-\u003ea-\u003eState[s]a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Modifier.html#v:stackStatesR",
      "description": {
        "fct-descr": "The number of stacked state monads\ndepends on the size of the list of state values.\nThis is like a dynamically nested StateT.\n",
        "fct-module": "Synthesizer.Plain.Modifier",
        "fct-package": "synthesizer",
        "fct-signature": "(a -\u003e State s a) -\u003e a -\u003e State [s] a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Modifier.html#stackStatesR",
        "fct-type": "unknown",
        "title": "stackStatesR"
      },
      "index": {
        "description": "The number of stacked state monads depends on the size of the list of state values This is like dynamically nested StateT",
        "hierarchy": "Synthesizer Plain Modifier",
        "module": "Synthesizer.Plain.Modifier",
        "name": "stackStatesR",
        "normalized": "(a-\u003eState b a)-\u003ea-\u003eState[b]a",
        "package": "synthesizer",
        "partial": "States",
        "signature": "(a-\u003eState s a)-\u003ea-\u003eState[s]a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Modifier.html#v:stackStatesStorableL",
      "description": {
        "fct-module": "Synthesizer.Plain.Modifier",
        "fct-package": "synthesizer",
        "fct-signature": "(a -\u003e State s a) -\u003e a -\u003e State (Vector s) a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Modifier.html#stackStatesStorableL",
        "fct-type": "unknown",
        "title": "stackStatesStorableL"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Modifier",
        "module": "Synthesizer.Plain.Modifier",
        "name": "stackStatesStorableL",
        "normalized": "(a-\u003eState b a)-\u003ea-\u003eState(Vector b)a",
        "package": "synthesizer",
        "partial": "States Storable",
        "signature": "(a-\u003eState s a)-\u003ea-\u003eState(Vector s)a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Modifier.html#v:stackStatesStorableR",
      "description": {
        "fct-module": "Synthesizer.Plain.Modifier",
        "fct-package": "synthesizer",
        "fct-signature": "(a -\u003e State s a) -\u003e a -\u003e State (Vector s) a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Modifier.html#stackStatesStorableR",
        "fct-type": "unknown",
        "title": "stackStatesStorableR"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Modifier",
        "module": "Synthesizer.Plain.Modifier",
        "name": "stackStatesStorableR",
        "normalized": "(a-\u003eState b a)-\u003ea-\u003eState(Vector b)a",
        "package": "synthesizer",
        "partial": "States Storable",
        "signature": "(a-\u003eState s a)-\u003ea-\u003eState(Vector s)a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Modifier.html#v:stackStatesStorableVaryL",
      "description": {
        "fct-module": "Synthesizer.Plain.Modifier",
        "fct-package": "synthesizer",
        "fct-signature": "(c -\u003e a -\u003e State s a) -\u003e Vector c -\u003e a -\u003e State (Vector s) a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Modifier.html#stackStatesStorableVaryL",
        "fct-type": "unknown",
        "title": "stackStatesStorableVaryL"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Modifier",
        "module": "Synthesizer.Plain.Modifier",
        "name": "stackStatesStorableVaryL",
        "normalized": "(a-\u003eb-\u003eState c b)-\u003eVector a-\u003eb-\u003eState(Vector c)b",
        "package": "synthesizer",
        "partial": "States Storable Vary",
        "signature": "(c-\u003ea-\u003eState s a)-\u003eVector c-\u003ea-\u003eState(Vector s)a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Modifier.html#v:static",
      "description": {
        "fct-descr": "\u003cp\u003emodif is a process controlled by values of type c\nwith an internal state of type s,\nit converts an input value of type a into an output value of type b\nwhile turning into a new state\n\u003c/p\u003e\u003cp\u003eToDo:\nShall finite signals be padded with zeros?\n\u003c/p\u003e",
        "fct-module": "Synthesizer.Plain.Modifier",
        "fct-package": "synthesizer",
        "fct-signature": "Simple s ctrl a b -\u003e ctrl -\u003e T a -\u003e T b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Modifier.html#static",
        "fct-type": "unknown",
        "title": "static"
      },
      "index": {
        "description": "modif is process controlled by values of type with an internal state of type it converts an input value of type into an output value of type while turning into new state ToDo Shall finite signals be padded with zeros",
        "hierarchy": "Synthesizer Plain Modifier",
        "module": "Synthesizer.Plain.Modifier",
        "name": "static",
        "normalized": "Simple a b c d-\u003eb-\u003eT c-\u003eT d",
        "package": "synthesizer",
        "partial": "",
        "signature": "Simple s ctrl a b-\u003ectrl-\u003eT a-\u003eT b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Modifier.html#v:staticInit",
      "description": {
        "fct-module": "Synthesizer.Plain.Modifier",
        "fct-package": "synthesizer",
        "fct-signature": "Initialized s init ctrl a b -\u003e init -\u003e ctrl -\u003e T a -\u003e T b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Modifier.html#staticInit",
        "fct-type": "unknown",
        "title": "staticInit"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Modifier",
        "module": "Synthesizer.Plain.Modifier",
        "name": "staticInit",
        "normalized": "Initialized a b c d e-\u003eb-\u003ec-\u003eT d-\u003eT e",
        "package": "synthesizer",
        "partial": "Init",
        "signature": "Initialized s init ctrl a b-\u003einit-\u003ectrl-\u003eT a-\u003eT b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Noise.html#v:randomPeeks",
      "description": {
        "fct-descr": "momentary densities, \u003ctt\u003ep\u003c/tt\u003e means that there is about one peak\n                      in the time range of \u003ctt\u003e1/p\u003c/tt\u003e samples \nEvery occurence of \u003ctt\u003e\u003ca\u003eTrue\u003c/a\u003e\u003c/tt\u003e represents a peak. \n",
        "fct-module": "Synthesizer.Plain.Noise",
        "fct-package": "synthesizer",
        "fct-signature": "T y-\u003e T Bool",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Noise.html#randomPeeks",
        "fct-type": "unknown",
        "title": "randomPeeks"
      },
      "index": {
        "description": "momentary densities means that there is about one peak in the time range of samples Every occurence of True represents peak",
        "hierarchy": "Synthesizer Plain Noise",
        "module": "Synthesizer.Plain.Noise",
        "name": "randomPeeks",
        "normalized": "T a-\u003eT Bool",
        "package": "synthesizer",
        "partial": "Peeks",
        "signature": "T y-\u003eT Bool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Noise.html#v:randomPeeksGen",
      "description": {
        "fct-module": "Synthesizer.Plain.Noise",
        "fct-package": "synthesizer",
        "fct-signature": "g -\u003e T y -\u003e T Bool",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Noise.html#randomPeeksGen",
        "fct-type": "unknown",
        "title": "randomPeeksGen"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Noise",
        "module": "Synthesizer.Plain.Noise",
        "name": "randomPeeksGen",
        "normalized": "a-\u003eT b-\u003eT Bool",
        "package": "synthesizer",
        "partial": "Peeks Gen",
        "signature": "g-\u003eT y-\u003eT Bool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Noise.html#v:white",
      "description": {
        "fct-descr": "Deterministic white noise, uniformly distributed between -1 and 1.\nThat is, variance is 1/3.\n",
        "fct-module": "Synthesizer.Plain.Noise",
        "fct-package": "synthesizer",
        "fct-signature": "T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Noise.html#white",
        "fct-type": "unknown",
        "title": "white"
      },
      "index": {
        "description": "Deterministic white noise uniformly distributed between and That is variance is",
        "hierarchy": "Synthesizer Plain Noise",
        "module": "Synthesizer.Plain.Noise",
        "name": "white",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Noise.html#v:whiteGen",
      "description": {
        "fct-module": "Synthesizer.Plain.Noise",
        "fct-package": "synthesizer",
        "fct-signature": "g -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Noise.html#whiteGen",
        "fct-type": "unknown",
        "title": "whiteGen"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Noise",
        "module": "Synthesizer.Plain.Noise",
        "name": "whiteGen",
        "normalized": "a-\u003eT b",
        "package": "synthesizer",
        "partial": "Gen",
        "signature": "g-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Noise.html#v:whiteQuadraticBSplineGen",
      "description": {
        "fct-descr": "Approximates normal distribution with variance 1\nby a quadratic B-spline distribution.\n",
        "fct-module": "Synthesizer.Plain.Noise",
        "fct-package": "synthesizer",
        "fct-signature": "g -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Noise.html#whiteQuadraticBSplineGen",
        "fct-type": "unknown",
        "title": "whiteQuadraticBSplineGen"
      },
      "index": {
        "description": "Approximates normal distribution with variance by quadratic B-spline distribution",
        "hierarchy": "Synthesizer Plain Noise",
        "module": "Synthesizer.Plain.Noise",
        "name": "whiteQuadraticBSplineGen",
        "normalized": "a-\u003eT b",
        "package": "synthesizer",
        "partial": "Quadratic BSpline Gen",
        "signature": "g-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Oscillator.html#t:Phase",
      "description": {
        "fct-module": "Synthesizer.Plain.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "type",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Oscillator.html#Phase",
        "fct-type": "unknown",
        "title": "Phase"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Oscillator",
        "module": "Synthesizer.Plain.Oscillator",
        "name": "Phase",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Phase",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Oscillator.html#v:freqMod",
      "description": {
        "fct-descr": "oscillator with modulated frequency \n",
        "fct-module": "Synthesizer.Plain.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "T a b -\u003e Phase a -\u003e T a -\u003e T b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Oscillator.html#freqMod",
        "fct-type": "unknown",
        "title": "freqMod"
      },
      "index": {
        "description": "oscillator with modulated frequency",
        "hierarchy": "Synthesizer Plain Oscillator",
        "module": "Synthesizer.Plain.Oscillator",
        "name": "freqMod",
        "normalized": "T a b-\u003ePhase a-\u003eT a-\u003eT b",
        "package": "synthesizer",
        "partial": "Mod",
        "signature": "T a b-\u003ePhase a-\u003eT a-\u003eT b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Oscillator.html#v:freqModSample",
      "description": {
        "fct-descr": "oscillator with a sampled waveform with modulated frequency\n     Should behave homogenously for different types of interpolation. \n",
        "fct-module": "Synthesizer.Plain.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "T a b -\u003e [b] -\u003e Phase a -\u003e T a -\u003e T b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Oscillator.html#freqModSample",
        "fct-type": "unknown",
        "title": "freqModSample"
      },
      "index": {
        "description": "oscillator with sampled waveform with modulated frequency Should behave homogenously for different types of interpolation",
        "hierarchy": "Synthesizer Plain Oscillator",
        "module": "Synthesizer.Plain.Oscillator",
        "name": "freqModSample",
        "normalized": "T a b-\u003e[b]-\u003ePhase a-\u003eT a-\u003eT b",
        "package": "synthesizer",
        "partial": "Mod Sample",
        "signature": "T a b-\u003e[b]-\u003ePhase a-\u003eT a-\u003eT b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Oscillator.html#v:freqModSaw",
      "description": {
        "fct-descr": "saw tooth oscillator with modulated frequency \n",
        "fct-module": "Synthesizer.Plain.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Oscillator.html#freqModSaw",
        "fct-type": "unknown",
        "title": "freqModSaw"
      },
      "index": {
        "description": "saw tooth oscillator with modulated frequency",
        "hierarchy": "Synthesizer Plain Oscillator",
        "module": "Synthesizer.Plain.Oscillator",
        "name": "freqModSaw",
        "normalized": "a-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "Mod Saw",
        "signature": "a-\u003eT a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Oscillator.html#v:freqModSine",
      "description": {
        "fct-descr": "sine oscillator with modulated frequency \n",
        "fct-module": "Synthesizer.Plain.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Oscillator.html#freqModSine",
        "fct-type": "unknown",
        "title": "freqModSine"
      },
      "index": {
        "description": "sine oscillator with modulated frequency",
        "hierarchy": "Synthesizer Plain Oscillator",
        "module": "Synthesizer.Plain.Oscillator",
        "name": "freqModSine",
        "normalized": "a-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "Mod Sine",
        "signature": "a-\u003eT a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Oscillator.html#v:phaseFreqMod",
      "description": {
        "fct-descr": "oscillator with both phase and frequency modulation \n",
        "fct-module": "Synthesizer.Plain.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "T a b -\u003e T (Phase a) -\u003e T a -\u003e T b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Oscillator.html#phaseFreqMod",
        "fct-type": "unknown",
        "title": "phaseFreqMod"
      },
      "index": {
        "description": "oscillator with both phase and frequency modulation",
        "hierarchy": "Synthesizer Plain Oscillator",
        "module": "Synthesizer.Plain.Oscillator",
        "name": "phaseFreqMod",
        "normalized": "T a b-\u003eT(Phase a)-\u003eT a-\u003eT b",
        "package": "synthesizer",
        "partial": "Freq Mod",
        "signature": "T a b-\u003eT(Phase a)-\u003eT a-\u003eT b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Oscillator.html#v:phaseMod",
      "description": {
        "fct-descr": "oscillator with modulated phase \n",
        "fct-module": "Synthesizer.Plain.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "T a b -\u003e a -\u003e T (Phase a) -\u003e T b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Oscillator.html#phaseMod",
        "fct-type": "unknown",
        "title": "phaseMod"
      },
      "index": {
        "description": "oscillator with modulated phase",
        "hierarchy": "Synthesizer Plain Oscillator",
        "module": "Synthesizer.Plain.Oscillator",
        "name": "phaseMod",
        "normalized": "T a b-\u003ea-\u003eT(Phase a)-\u003eT b",
        "package": "synthesizer",
        "partial": "Mod",
        "signature": "T a b-\u003ea-\u003eT(Phase a)-\u003eT b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Oscillator.html#v:phaseModSine",
      "description": {
        "fct-descr": "sine oscillator with modulated phase, useful for FM synthesis \n",
        "fct-module": "Synthesizer.Plain.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Oscillator.html#phaseModSine",
        "fct-type": "unknown",
        "title": "phaseModSine"
      },
      "index": {
        "description": "sine oscillator with modulated phase useful for FM synthesis",
        "hierarchy": "Synthesizer Plain Oscillator",
        "module": "Synthesizer.Plain.Oscillator",
        "name": "phaseModSine",
        "normalized": "a-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "Mod Sine",
        "signature": "a-\u003eT a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Oscillator.html#v:shapeFreqMod",
      "description": {
        "fct-descr": "oscillator with both shape and frequency modulation \n",
        "fct-module": "Synthesizer.Plain.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "(c -\u003e T a b) -\u003e Phase a -\u003e T c -\u003e T a -\u003e T b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Oscillator.html#shapeFreqMod",
        "fct-type": "unknown",
        "title": "shapeFreqMod"
      },
      "index": {
        "description": "oscillator with both shape and frequency modulation",
        "hierarchy": "Synthesizer Plain Oscillator",
        "module": "Synthesizer.Plain.Oscillator",
        "name": "shapeFreqMod",
        "normalized": "(a-\u003eT b c)-\u003ePhase b-\u003eT a-\u003eT b-\u003eT c",
        "package": "synthesizer",
        "partial": "Freq Mod",
        "signature": "(c-\u003eT a b)-\u003ePhase a-\u003eT c-\u003eT a-\u003eT b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Oscillator.html#v:shapeFreqModFromSampledTone",
      "description": {
        "fct-descr": "\u003cp\u003eTime stretching and frequency modulation of a pure tone.\n\u003c/p\u003e\u003cp\u003eWe consider a tone as the result of a shape modulated oscillator,\nand virtually reconstruct the waveform function\n(a function of time and phase) by interpolation and resample it.\nThis way we can alter frequency and time progress of the tone independently.\n\u003c/p\u003e\u003cp\u003eThis function is identical to using \u003ctt\u003e\u003ca\u003eshapeFreqMod\u003c/a\u003e\u003c/tt\u003e\nwith a wave function constructed by Wave.sampledTone\nbut it consumes the sampled source tone lazily\nand thus allows only relative shape control with non-negative control steps.\n\u003c/p\u003e\u003cp\u003eThe function is similar to \u003ctt\u003e\u003ca\u003eshapeFreqModSample\u003c/a\u003e\u003c/tt\u003e but respects\nthat in a sampled tone, phase and shape control advance synchronously.\nActually we could re-use \u003ctt\u003e\u003ca\u003eshapeFreqModSample\u003c/a\u003e\u003c/tt\u003e with modified phase values.\nBut we would have to cope with negative shape control jumps,\nand waves would be padded locally cyclically.\nThe latter one is not wanted\nsince we want padding according to the adjacencies in the source tone.\nNote that differently from \u003ctt\u003e\u003ca\u003eshapeFreqModSample\u003c/a\u003e\u003c/tt\u003e\nthe shape control difference \u003ctt\u003e1\u003c/tt\u003e does not mean to skip to the next wave,\nsince this oscillator has no discrete waveforms.\nInstead \u003ctt\u003e1\u003c/tt\u003e means that the shape alters as fast as in the prototype signal.\n\u003c/p\u003e\u003cp\u003eAlthough the shape difference values must be non-negative\nI hesitate to give them the type \u003ctt\u003eNumber.NonNegative.T t\u003c/tt\u003e\nbecause then you cannot call this function with other types\nof non-negative numbers like Number.NonNegativeChunky.T.\n\u003c/p\u003e\u003cp\u003eThe prototype tone signal is reproduced if\n\u003ctt\u003efreqs == repeat (1/period)\u003c/tt\u003e and \u003ctt\u003eshapes == repeat 1\u003c/tt\u003e.\n\u003c/p\u003e",
        "fct-module": "Synthesizer.Plain.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "T t y -\u003e T t y -\u003e t -\u003e T y -\u003e t -\u003e t -\u003e T t -\u003e T t -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Oscillator.html#shapeFreqModFromSampledTone",
        "fct-type": "unknown",
        "title": "shapeFreqModFromSampledTone"
      },
      "index": {
        "description": "Time stretching and frequency modulation of pure tone We consider tone as the result of shape modulated oscillator and virtually reconstruct the waveform function function of time and phase by interpolation and resample it This way we can alter frequency and time progress of the tone independently This function is identical to using shapeFreqMod with wave function constructed by Wave.sampledTone but it consumes the sampled source tone lazily and thus allows only relative shape control with non-negative control steps The function is similar to shapeFreqModSample but respects that in sampled tone phase and shape control advance synchronously Actually we could re-use shapeFreqModSample with modified phase values But we would have to cope with negative shape control jumps and waves would be padded locally cyclically The latter one is not wanted since we want padding according to the adjacencies in the source tone Note that differently from shapeFreqModSample the shape control difference does not mean to skip to the next wave since this oscillator has no discrete waveforms Instead means that the shape alters as fast as in the prototype signal Although the shape difference values must be non-negative hesitate to give them the type Number.NonNegative.T because then you cannot call this function with other types of non-negative numbers like Number.NonNegativeChunky.T The prototype tone signal is reproduced if freqs repeat period and shapes repeat",
        "hierarchy": "Synthesizer Plain Oscillator",
        "module": "Synthesizer.Plain.Oscillator",
        "name": "shapeFreqModFromSampledTone",
        "normalized": "T a b-\u003eT a b-\u003ea-\u003eT b-\u003ea-\u003ea-\u003eT a-\u003eT a-\u003eT b",
        "package": "synthesizer",
        "partial": "Freq Mod From Sampled Tone",
        "signature": "T t y-\u003eT t y-\u003et-\u003eT y-\u003et-\u003et-\u003eT t-\u003eT t-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Oscillator.html#v:shapeFreqModSample",
      "description": {
        "fct-descr": "\u003cp\u003eShape control is a list of relative changes,\neach of which must be non-negative in order to allow lazy processing.\n'1' advances by one wave.\nFrequency control can be negative.\nIf you want to use sampled waveforms as well\nthen use Wave.sample in the list of waveforms.\nWith sampled waves this function is identical to HunkTranspose in Assampler.\n\u003c/p\u003e\u003cp\u003eExample: interpolate different versions\nof Wave.oddCosine and Wave.oddTriangle.\n\u003c/p\u003e\u003cp\u003eYou could also chop a tone into single waves\nand use the waves as input for this function\nbut you certainly want to use\nWave.sampledTone or \u003ctt\u003e\u003ca\u003eshapeFreqModFromSampledTone\u003c/a\u003e\u003c/tt\u003e instead,\nbecause in the wave information for \u003ctt\u003e\u003ca\u003eshapeFreqModSample\u003c/a\u003e\u003c/tt\u003e\nshape and phase are strictly separated.\n\u003c/p\u003e",
        "fct-module": "Synthesizer.Plain.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "T c (T b a) -\u003e [T b a] -\u003e c -\u003e Phase b -\u003e T c -\u003e T b -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Oscillator.html#shapeFreqModSample",
        "fct-type": "unknown",
        "title": "shapeFreqModSample"
      },
      "index": {
        "description": "Shape control is list of relative changes each of which must be non-negative in order to allow lazy processing advances by one wave Frequency control can be negative If you want to use sampled waveforms as well then use Wave.sample in the list of waveforms With sampled waves this function is identical to HunkTranspose in Assampler Example interpolate different versions of Wave.oddCosine and Wave.oddTriangle You could also chop tone into single waves and use the waves as input for this function but you certainly want to use Wave.sampledTone or shapeFreqModFromSampledTone instead because in the wave information for shapeFreqModSample shape and phase are strictly separated",
        "hierarchy": "Synthesizer Plain Oscillator",
        "module": "Synthesizer.Plain.Oscillator",
        "name": "shapeFreqModSample",
        "normalized": "T a(T b c)-\u003e[T b c]-\u003ea-\u003ePhase b-\u003eT a-\u003eT b-\u003eT c",
        "package": "synthesizer",
        "partial": "Freq Mod Sample",
        "signature": "T c(T b a)-\u003e[T b a]-\u003ec-\u003ePhase b-\u003eT c-\u003eT b-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Oscillator.html#v:shapeMod",
      "description": {
        "fct-descr": "oscillator with modulated shape \n",
        "fct-module": "Synthesizer.Plain.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "(c -\u003e T a b) -\u003e Phase a -\u003e a -\u003e T c -\u003e T b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Oscillator.html#shapeMod",
        "fct-type": "unknown",
        "title": "shapeMod"
      },
      "index": {
        "description": "oscillator with modulated shape",
        "hierarchy": "Synthesizer Plain Oscillator",
        "module": "Synthesizer.Plain.Oscillator",
        "name": "shapeMod",
        "normalized": "(a-\u003eT b c)-\u003ePhase b-\u003eb-\u003eT a-\u003eT c",
        "package": "synthesizer",
        "partial": "Mod",
        "signature": "(c-\u003eT a b)-\u003ePhase a-\u003ea-\u003eT c-\u003eT b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Oscillator.html#v:shapePhaseFreqModFromSampledTone",
      "description": {
        "fct-module": "Synthesizer.Plain.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "T t y -\u003e T t y -\u003e t -\u003e T y -\u003e t -\u003e t -\u003e T t -\u003e T t -\u003e T t -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Oscillator.html#shapePhaseFreqModFromSampledTone",
        "fct-type": "unknown",
        "title": "shapePhaseFreqModFromSampledTone"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Oscillator",
        "module": "Synthesizer.Plain.Oscillator",
        "name": "shapePhaseFreqModFromSampledTone",
        "normalized": "T a b-\u003eT a b-\u003ea-\u003eT b-\u003ea-\u003ea-\u003eT a-\u003eT a-\u003eT a-\u003eT b",
        "package": "synthesizer",
        "partial": "Phase Freq Mod From Sampled Tone",
        "signature": "T t y-\u003eT t y-\u003et-\u003eT y-\u003et-\u003et-\u003eT t-\u003eT t-\u003eT t-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Oscillator.html#v:shapePhaseFreqModSample",
      "description": {
        "fct-module": "Synthesizer.Plain.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "T c (T b a) -\u003e [T b a] -\u003e c -\u003e T c -\u003e T (Phase b) -\u003e T b -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Oscillator.html#shapePhaseFreqModSample",
        "fct-type": "unknown",
        "title": "shapePhaseFreqModSample"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Oscillator",
        "module": "Synthesizer.Plain.Oscillator",
        "name": "shapePhaseFreqModSample",
        "normalized": "T a(T b c)-\u003e[T b c]-\u003ea-\u003eT a-\u003eT(Phase b)-\u003eT b-\u003eT c",
        "package": "synthesizer",
        "partial": "Phase Freq Mod Sample",
        "signature": "T c(T b a)-\u003e[T b a]-\u003ec-\u003eT c-\u003eT(Phase b)-\u003eT b-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Oscillator.html#v:static",
      "description": {
        "fct-descr": "oscillator with constant frequency \n",
        "fct-module": "Synthesizer.Plain.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "T a b -\u003e Phase a -\u003e a -\u003e T b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Oscillator.html#static",
        "fct-type": "unknown",
        "title": "static"
      },
      "index": {
        "description": "oscillator with constant frequency",
        "hierarchy": "Synthesizer Plain Oscillator",
        "module": "Synthesizer.Plain.Oscillator",
        "name": "static",
        "normalized": "T a b-\u003ePhase a-\u003ea-\u003eT b",
        "package": "synthesizer",
        "partial": "",
        "signature": "T a b-\u003ePhase a-\u003ea-\u003eT b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Oscillator.html#v:staticSample",
      "description": {
        "fct-descr": "oscillator with a sampled waveform with constant frequency\n     This is essentially an interpolation with cyclic padding. \n",
        "fct-module": "Synthesizer.Plain.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "T a b -\u003e [b] -\u003e Phase a -\u003e a -\u003e T b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Oscillator.html#staticSample",
        "fct-type": "unknown",
        "title": "staticSample"
      },
      "index": {
        "description": "oscillator with sampled waveform with constant frequency This is essentially an interpolation with cyclic padding",
        "hierarchy": "Synthesizer Plain Oscillator",
        "module": "Synthesizer.Plain.Oscillator",
        "name": "staticSample",
        "normalized": "T a b-\u003e[b]-\u003ePhase a-\u003ea-\u003eT b",
        "package": "synthesizer",
        "partial": "Sample",
        "signature": "T a b-\u003e[b]-\u003ePhase a-\u003ea-\u003eT b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Oscillator.html#v:staticSaw",
      "description": {
        "fct-descr": "saw tooth oscillator with modulated frequency \n",
        "fct-module": "Synthesizer.Plain.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Oscillator.html#staticSaw",
        "fct-type": "unknown",
        "title": "staticSaw"
      },
      "index": {
        "description": "saw tooth oscillator with modulated frequency",
        "hierarchy": "Synthesizer Plain Oscillator",
        "module": "Synthesizer.Plain.Oscillator",
        "name": "staticSaw",
        "normalized": "a-\u003ea-\u003eT a",
        "package": "synthesizer",
        "partial": "Saw",
        "signature": "a-\u003ea-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Oscillator.html#v:staticSine",
      "description": {
        "fct-descr": "sine oscillator with static frequency \n",
        "fct-module": "Synthesizer.Plain.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Oscillator.html#staticSine",
        "fct-type": "unknown",
        "title": "staticSine"
      },
      "index": {
        "description": "sine oscillator with static frequency",
        "hierarchy": "Synthesizer Plain Oscillator",
        "module": "Synthesizer.Plain.Oscillator",
        "name": "staticSine",
        "normalized": "a-\u003ea-\u003eT a",
        "package": "synthesizer",
        "partial": "Sine",
        "signature": "a-\u003ea-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Play.html#v:auto",
      "description": {
        "fct-descr": "See Synthesizer.Plain.File.write.\n",
        "fct-module": "Synthesizer.Plain.Play",
        "fct-package": "synthesizer",
        "fct-signature": "Put int -\u003e a -\u003e [v] -\u003e IO ExitCode",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Play.html#auto",
        "fct-type": "unknown",
        "title": "auto"
      },
      "index": {
        "description": "See Synthesizer.Plain.File.write",
        "hierarchy": "Synthesizer Plain Play",
        "module": "Synthesizer.Plain.Play",
        "name": "auto",
        "normalized": "Put a-\u003eb-\u003e[c]-\u003eIO ExitCode",
        "package": "synthesizer",
        "partial": "",
        "signature": "Put int-\u003ea-\u003e[v]-\u003eIO ExitCode"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Play.html#v:exampleMono",
      "description": {
        "fct-module": "Synthesizer.Plain.Play",
        "fct-package": "synthesizer",
        "fct-signature": "IO ExitCode",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Play.html#exampleMono",
        "fct-type": "unknown",
        "title": "exampleMono"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Play",
        "module": "Synthesizer.Plain.Play",
        "name": "exampleMono",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Mono",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Play.html#v:exampleStereo",
      "description": {
        "fct-module": "Synthesizer.Plain.Play",
        "fct-package": "synthesizer",
        "fct-signature": "IO ExitCode",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Play.html#exampleStereo",
        "fct-type": "unknown",
        "title": "exampleStereo"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Play",
        "module": "Synthesizer.Plain.Play",
        "name": "exampleStereo",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Stereo",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Play.html#v:monoToInt16",
      "description": {
        "fct-module": "Synthesizer.Plain.Play",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e [a] -\u003e IO ExitCode",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Play.html#monoToInt16",
        "fct-type": "unknown",
        "title": "monoToInt16"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Play",
        "module": "Synthesizer.Plain.Play",
        "name": "monoToInt16",
        "normalized": "a-\u003e[a]-\u003eIO ExitCode",
        "package": "synthesizer",
        "partial": "To Int",
        "signature": "a-\u003e[a]-\u003eIO ExitCode"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Play.html#v:raw",
      "description": {
        "fct-module": "Synthesizer.Plain.Play",
        "fct-package": "synthesizer",
        "fct-signature": "T -\u003e a -\u003e [v] -\u003e IO ExitCode",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Play.html#raw",
        "fct-type": "unknown",
        "title": "raw"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Play",
        "module": "Synthesizer.Plain.Play",
        "name": "raw",
        "normalized": "T-\u003ea-\u003e[b]-\u003eIO ExitCode",
        "package": "synthesizer",
        "partial": "",
        "signature": "T-\u003ea-\u003e[v]-\u003eIO ExitCode"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Play.html#v:render",
      "description": {
        "fct-descr": "See Synthesizer.Plain.File.write.\n",
        "fct-module": "Synthesizer.Plain.Play",
        "fct-package": "synthesizer",
        "fct-signature": "Put int -\u003e a -\u003e (a -\u003e [v]) -\u003e IO ExitCode",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Play.html#render",
        "fct-type": "unknown",
        "title": "render"
      },
      "index": {
        "description": "See Synthesizer.Plain.File.write",
        "hierarchy": "Synthesizer Plain Play",
        "module": "Synthesizer.Plain.Play",
        "name": "render",
        "normalized": "Put a-\u003eb-\u003e(b-\u003e[c])-\u003eIO ExitCode",
        "package": "synthesizer",
        "partial": "",
        "signature": "Put int-\u003ea-\u003e(a-\u003e[v])-\u003eIO ExitCode"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Play.html#v:renderMonoToInt16",
      "description": {
        "fct-module": "Synthesizer.Plain.Play",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e (a -\u003e [a]) -\u003e IO ExitCode",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Play.html#renderMonoToInt16",
        "fct-type": "unknown",
        "title": "renderMonoToInt16"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Play",
        "module": "Synthesizer.Plain.Play",
        "name": "renderMonoToInt16",
        "normalized": "a-\u003e(a-\u003e[a])-\u003eIO ExitCode",
        "package": "synthesizer",
        "partial": "Mono To Int",
        "signature": "a-\u003e(a-\u003e[a])-\u003eIO ExitCode"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Play.html#v:renderStereoToInt16",
      "description": {
        "fct-module": "Synthesizer.Plain.Play",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e (a -\u003e [(a, a)]) -\u003e IO ExitCode",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Play.html#renderStereoToInt16",
        "fct-type": "unknown",
        "title": "renderStereoToInt16"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Play",
        "module": "Synthesizer.Plain.Play",
        "name": "renderStereoToInt16",
        "normalized": "a-\u003e(a-\u003e[(a,a)])-\u003eIO ExitCode",
        "package": "synthesizer",
        "partial": "Stereo To Int",
        "signature": "a-\u003e(a-\u003e[(a,a)])-\u003eIO ExitCode"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Play.html#v:renderToInt16",
      "description": {
        "fct-module": "Synthesizer.Plain.Play",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e (a -\u003e [v]) -\u003e IO ExitCode",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Play.html#renderToInt16",
        "fct-type": "unknown",
        "title": "renderToInt16"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Play",
        "module": "Synthesizer.Plain.Play",
        "name": "renderToInt16",
        "normalized": "a-\u003e(a-\u003e[b])-\u003eIO ExitCode",
        "package": "synthesizer",
        "partial": "To Int",
        "signature": "a-\u003e(a-\u003e[v])-\u003eIO ExitCode"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Play.html#v:stereoToInt16",
      "description": {
        "fct-module": "Synthesizer.Plain.Play",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e [(a, a)] -\u003e IO ExitCode",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Play.html#stereoToInt16",
        "fct-type": "unknown",
        "title": "stereoToInt16"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Play",
        "module": "Synthesizer.Plain.Play",
        "name": "stereoToInt16",
        "normalized": "a-\u003e[(a,a)]-\u003eIO ExitCode",
        "package": "synthesizer",
        "partial": "To Int",
        "signature": "a-\u003e[(a,a)]-\u003eIO ExitCode"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Play.html#v:toInt16",
      "description": {
        "fct-module": "Synthesizer.Plain.Play",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e [v] -\u003e IO ExitCode",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Play.html#toInt16",
        "fct-type": "unknown",
        "title": "toInt16"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Play",
        "module": "Synthesizer.Plain.Play",
        "name": "toInt16",
        "normalized": "a-\u003e[b]-\u003eIO ExitCode",
        "package": "synthesizer",
        "partial": "Int",
        "signature": "a-\u003e[v]-\u003eIO ExitCode"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Signal.html#t:Modifier",
      "description": {
        "fct-module": "Synthesizer.Plain.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "type",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Signal.html#Modifier",
        "fct-type": "unknown",
        "title": "Modifier"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Signal",
        "module": "Synthesizer.Plain.Signal",
        "name": "Modifier",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Modifier",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Signal.html#t:ModifierInit",
      "description": {
        "fct-module": "Synthesizer.Plain.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "type",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Signal.html#ModifierInit",
        "fct-type": "unknown",
        "title": "ModifierInit"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Signal",
        "module": "Synthesizer.Plain.Signal",
        "name": "ModifierInit",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Modifier Init",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Signal.html#t:T",
      "description": {
        "fct-module": "Synthesizer.Plain.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "type",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Signal.html#T",
        "fct-type": "unknown",
        "title": "T"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Signal",
        "module": "Synthesizer.Plain.Signal",
        "name": "T",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Signal.html#v:crochetL",
      "description": {
        "fct-module": "Synthesizer.Plain.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(x -\u003e acc -\u003e Maybe (y, acc)) -\u003e acc -\u003e T x -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Signal.html#crochetL",
        "fct-type": "unknown",
        "title": "crochetL"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Signal",
        "module": "Synthesizer.Plain.Signal",
        "name": "crochetL",
        "normalized": "(a-\u003eb-\u003eMaybe(c,b))-\u003eb-\u003eT a-\u003eT c",
        "package": "synthesizer",
        "partial": "",
        "signature": "(x-\u003eacc-\u003eMaybe(y,acc))-\u003eacc-\u003eT x-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Signal.html#v:dropMargin",
      "description": {
        "fct-module": "Synthesizer.Plain.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e Int -\u003e T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Signal.html#dropMargin",
        "fct-type": "unknown",
        "title": "dropMargin"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Signal",
        "module": "Synthesizer.Plain.Signal",
        "name": "dropMargin",
        "normalized": "Int-\u003eInt-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "Margin",
        "signature": "Int-\u003eInt-\u003eT a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Signal.html#v:dropMarginRem",
      "description": {
        "fct-descr": "\u003ctt\u003edropMarginRem n m xs\u003c/tt\u003e\ndrops at most the first \u003ctt\u003em\u003c/tt\u003e elements of \u003ctt\u003exs\u003c/tt\u003e\nand ensures that \u003ctt\u003exs\u003c/tt\u003e still contains \u003ctt\u003en\u003c/tt\u003e elements.\nAdditionally returns the number of elements that could not be dropped\ndue to the margin constraint.\nThat is \u003ctt\u003edropMarginRem n m xs == (k,ys)\u003c/tt\u003e implies \u003ctt\u003elength xs - m == length ys - k\u003c/tt\u003e.\nRequires \u003ctt\u003elength xs \u003e= n\u003c/tt\u003e.\n",
        "fct-module": "Synthesizer.Plain.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e Int -\u003e T a -\u003e (Int, T a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Signal.html#dropMarginRem",
        "fct-type": "unknown",
        "title": "dropMarginRem"
      },
      "index": {
        "description": "dropMarginRem xs drops at most the first elements of xs and ensures that xs still contains elements Additionally returns the number of elements that could not be dropped due to the margin constraint That is dropMarginRem xs ys implies length xs length ys Requires length xs",
        "hierarchy": "Synthesizer Plain Signal",
        "module": "Synthesizer.Plain.Signal",
        "name": "dropMarginRem",
        "normalized": "Int-\u003eInt-\u003eT a-\u003e(Int,T a)",
        "package": "synthesizer",
        "partial": "Margin Rem",
        "signature": "Int-\u003eInt-\u003eT a-\u003e(Int,T a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Signal.html#v:fix1",
      "description": {
        "fct-descr": "Feed back signal into signal processor,\nand apply a delay by one value.\n\u003ctt\u003e\u003ca\u003efix1\u003c/a\u003e\u003c/tt\u003e is a kind of Signal.generate.\n",
        "fct-module": "Synthesizer.Plain.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "y -\u003e (T y -\u003e T y) -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Signal.html#fix1",
        "fct-type": "unknown",
        "title": "fix1"
      },
      "index": {
        "description": "Feed back signal into signal processor and apply delay by one value fix1 is kind of Signal.generate",
        "hierarchy": "Synthesizer Plain Signal",
        "module": "Synthesizer.Plain.Signal",
        "name": "fix1",
        "normalized": "a-\u003e(T a-\u003eT a)-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "y-\u003e(T y-\u003eT y)-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Signal.html#v:lengthAtLeast",
      "description": {
        "fct-descr": "Test whether a list has at least \u003ctt\u003en\u003c/tt\u003e elements.\n",
        "fct-module": "Synthesizer.Plain.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e T a -\u003e Bool",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Signal.html#lengthAtLeast",
        "fct-type": "unknown",
        "title": "lengthAtLeast"
      },
      "index": {
        "description": "Test whether list has at least elements",
        "hierarchy": "Synthesizer Plain Signal",
        "module": "Synthesizer.Plain.Signal",
        "name": "lengthAtLeast",
        "normalized": "Int-\u003eT a-\u003eBool",
        "package": "synthesizer",
        "partial": "At Least",
        "signature": "Int-\u003eT a-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Signal.html#v:mapAccumL",
      "description": {
        "fct-module": "Synthesizer.Plain.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(x -\u003e acc -\u003e Maybe (y, acc)) -\u003e acc -\u003e T x -\u003e (acc, T y)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Signal.html#mapAccumL",
        "fct-type": "unknown",
        "title": "mapAccumL"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Signal",
        "module": "Synthesizer.Plain.Signal",
        "name": "mapAccumL",
        "normalized": "(a-\u003eb-\u003eMaybe(c,b))-\u003eb-\u003eT a-\u003e(b,T c)",
        "package": "synthesizer",
        "partial": "Accum",
        "signature": "(x-\u003eacc-\u003eMaybe(y,acc))-\u003eacc-\u003eT x-\u003e(acc,T y)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Signal.html#v:modifierInitialize",
      "description": {
        "fct-module": "Synthesizer.Plain.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "ModifierInit s init ctrl a b -\u003e init -\u003e Modifier s ctrl a b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Signal.html#modifierInitialize",
        "fct-type": "unknown",
        "title": "modifierInitialize"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Signal",
        "module": "Synthesizer.Plain.Signal",
        "name": "modifierInitialize",
        "normalized": "ModifierInit a b c d e-\u003eb-\u003eModifier a c d e",
        "package": "synthesizer",
        "partial": "Initialize",
        "signature": "ModifierInit s init ctrl a b-\u003einit-\u003eModifier s ctrl a b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Signal.html#v:modifyModulated",
      "description": {
        "fct-descr": "Here the control may vary over the time. \n",
        "fct-module": "Synthesizer.Plain.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "Modifier s ctrl a b -\u003e T ctrl -\u003e T a -\u003e T b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Signal.html#modifyModulated",
        "fct-type": "unknown",
        "title": "modifyModulated"
      },
      "index": {
        "description": "Here the control may vary over the time",
        "hierarchy": "Synthesizer Plain Signal",
        "module": "Synthesizer.Plain.Signal",
        "name": "modifyModulated",
        "normalized": "Modifier a b c d-\u003eT b-\u003eT c-\u003eT d",
        "package": "synthesizer",
        "partial": "Modulated",
        "signature": "Modifier s ctrl a b-\u003eT ctrl-\u003eT a-\u003eT b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Signal.html#v:modifyModulatedInit",
      "description": {
        "fct-descr": "Here the control may vary over the time. \n",
        "fct-module": "Synthesizer.Plain.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "ModifierInit s init ctrl a b -\u003e init -\u003e T ctrl -\u003e T a -\u003e T b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Signal.html#modifyModulatedInit",
        "fct-type": "unknown",
        "title": "modifyModulatedInit"
      },
      "index": {
        "description": "Here the control may vary over the time",
        "hierarchy": "Synthesizer Plain Signal",
        "module": "Synthesizer.Plain.Signal",
        "name": "modifyModulatedInit",
        "normalized": "ModifierInit a b c d e-\u003eb-\u003eT c-\u003eT d-\u003eT e",
        "package": "synthesizer",
        "partial": "Modulated Init",
        "signature": "ModifierInit s init ctrl a b-\u003einit-\u003eT ctrl-\u003eT a-\u003eT b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Signal.html#v:modifyStatic",
      "description": {
        "fct-descr": "\u003cp\u003emodif is a process controlled by values of type c\nwith an internal state of type s,\nit converts an input value of type a into an output value of type b\nwhile turning into a new state\n\u003c/p\u003e\u003cp\u003eToDo:\nShall finite signals be padded with zeros?\n\u003c/p\u003e",
        "fct-module": "Synthesizer.Plain.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "Modifier s ctrl a b -\u003e ctrl -\u003e T a -\u003e T b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Signal.html#modifyStatic",
        "fct-type": "unknown",
        "title": "modifyStatic"
      },
      "index": {
        "description": "modif is process controlled by values of type with an internal state of type it converts an input value of type into an output value of type while turning into new state ToDo Shall finite signals be padded with zeros",
        "hierarchy": "Synthesizer Plain Signal",
        "module": "Synthesizer.Plain.Signal",
        "name": "modifyStatic",
        "normalized": "Modifier a b c d-\u003eb-\u003eT c-\u003eT d",
        "package": "synthesizer",
        "partial": "Static",
        "signature": "Modifier s ctrl a b-\u003ectrl-\u003eT a-\u003eT b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Signal.html#v:modifyStaticInit",
      "description": {
        "fct-module": "Synthesizer.Plain.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "ModifierInit s init ctrl a b -\u003e init -\u003e ctrl -\u003e T a -\u003e T b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Signal.html#modifyStaticInit",
        "fct-type": "unknown",
        "title": "modifyStaticInit"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Signal",
        "module": "Synthesizer.Plain.Signal",
        "name": "modifyStaticInit",
        "normalized": "ModifierInit a b c d e-\u003eb-\u003ec-\u003eT d-\u003eT e",
        "package": "synthesizer",
        "partial": "Static Init",
        "signature": "ModifierInit s init ctrl a b-\u003einit-\u003ectrl-\u003eT a-\u003eT b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Signal.html#v:reduceL",
      "description": {
        "fct-module": "Synthesizer.Plain.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(x -\u003e acc -\u003e Maybe acc) -\u003e acc -\u003e T x -\u003e acc",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Signal.html#reduceL",
        "fct-type": "unknown",
        "title": "reduceL"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Signal",
        "module": "Synthesizer.Plain.Signal",
        "name": "reduceL",
        "normalized": "(a-\u003eb-\u003eMaybe b)-\u003eb-\u003eT a-\u003eb",
        "package": "synthesizer",
        "partial": "",
        "signature": "(x-\u003eacc-\u003eMaybe acc)-\u003eacc-\u003eT x-\u003eacc"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Signal.html#v:unfoldR",
      "description": {
        "fct-module": "Synthesizer.Plain.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(acc -\u003e Maybe (y, acc)) -\u003e acc -\u003e (acc, T y)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Signal.html#unfoldR",
        "fct-type": "unknown",
        "title": "unfoldR"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Signal",
        "module": "Synthesizer.Plain.Signal",
        "name": "unfoldR",
        "normalized": "(a-\u003eMaybe(b,a))-\u003ea-\u003e(a,T b)",
        "package": "synthesizer",
        "partial": "",
        "signature": "(acc-\u003eMaybe(y,acc))-\u003eacc-\u003e(acc,T y)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Signal.html#v:zipWithAppend",
      "description": {
        "fct-module": "Synthesizer.Plain.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(y -\u003e y -\u003e y) -\u003e T y -\u003e T y -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Signal.html#zipWithAppend",
        "fct-type": "unknown",
        "title": "zipWithAppend"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Signal",
        "module": "Synthesizer.Plain.Signal",
        "name": "zipWithAppend",
        "normalized": "(a-\u003ea-\u003ea)-\u003eT a-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "With Append",
        "signature": "(y-\u003ey-\u003ey)-\u003eT y-\u003eT y-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Signal.html#v:zipWithRest",
      "description": {
        "fct-module": "Synthesizer.Plain.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(y0 -\u003e y0 -\u003e y1) -\u003e T y0 -\u003e T y0 -\u003e (T y1, (Bool, T y0))",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Signal.html#zipWithRest",
        "fct-type": "unknown",
        "title": "zipWithRest"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Signal",
        "module": "Synthesizer.Plain.Signal",
        "name": "zipWithRest",
        "normalized": "(a-\u003ea-\u003ea)-\u003eT a-\u003eT a-\u003e(T a,(Bool,T a))",
        "package": "synthesizer",
        "partial": "With Rest",
        "signature": "(y-\u003ey-\u003ey)-\u003eT y-\u003eT y-\u003e(T y,(Bool,T y))"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Signal.html#v:zipWithRest'",
      "description": {
        "fct-module": "Synthesizer.Plain.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(y0 -\u003e y0 -\u003e y1) -\u003e T y0 -\u003e T y0 -\u003e (T y1, (Bool, T y0))",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Signal.html#zipWithRest%27",
        "fct-type": "unknown",
        "title": "zipWithRest'"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Signal",
        "module": "Synthesizer.Plain.Signal",
        "name": "zipWithRest'",
        "normalized": "(a-\u003ea-\u003ea)-\u003eT a-\u003eT a-\u003e(T a,(Bool,T a))",
        "package": "synthesizer",
        "partial": "With Rest'",
        "signature": "(y-\u003ey-\u003ey)-\u003eT y-\u003eT y-\u003e(T y,(Bool,T y))"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Signal.html#v:zipWithTails",
      "description": {
        "fct-descr": "Can be implemented more efficiently\nthan just by \u003ctt\u003e\u003ca\u003ezipWith\u003c/a\u003e\u003c/tt\u003e and \u003ctt\u003e\u003ca\u003etails\u003c/a\u003e\u003c/tt\u003e\nfor other data structures.\n",
        "fct-module": "Synthesizer.Plain.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(y0 -\u003e T y1 -\u003e y2) -\u003e T y0 -\u003e T y1 -\u003e T y2",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Signal.html#zipWithTails",
        "fct-type": "unknown",
        "title": "zipWithTails"
      },
      "index": {
        "description": "Can be implemented more efficiently than just by zipWith and tails for other data structures",
        "hierarchy": "Synthesizer Plain Signal",
        "module": "Synthesizer.Plain.Signal",
        "name": "zipWithTails",
        "normalized": "(a-\u003eT a-\u003ea)-\u003eT a-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "With Tails",
        "signature": "(y-\u003eT y-\u003ey)-\u003eT y-\u003eT y-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-ToneModulation.html#t:Cell",
      "description": {
        "fct-module": "Synthesizer.Plain.ToneModulation",
        "fct-package": "synthesizer",
        "fct-signature": "type",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-ToneModulation.html#Cell",
        "fct-type": "unknown",
        "title": "Cell"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain ToneModulation",
        "module": "Synthesizer.Plain.ToneModulation",
        "name": "Cell",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Cell",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-ToneModulation.html#t:Prototype",
      "description": {
        "fct-module": "Synthesizer.Plain.ToneModulation",
        "fct-package": "synthesizer",
        "fct-signature": "data",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-ToneModulation.html#Prototype",
        "fct-type": "unknown",
        "title": "Prototype"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain ToneModulation",
        "module": "Synthesizer.Plain.ToneModulation",
        "name": "Prototype",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Prototype",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-ToneModulation.html#v:dropFrac",
      "description": {
        "fct-module": "Synthesizer.Plain.ToneModulation",
        "fct-package": "synthesizer",
        "fct-signature": "i -\u003e T a -\u003e (Int, i, T a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-ToneModulation.html#dropFrac",
        "fct-type": "unknown",
        "title": "dropFrac"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain ToneModulation",
        "module": "Synthesizer.Plain.ToneModulation",
        "name": "dropFrac",
        "normalized": "a-\u003eT b-\u003e(Int,a,T b)",
        "package": "synthesizer",
        "partial": "Frac",
        "signature": "i-\u003eT a-\u003e(Int,i,T a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-ToneModulation.html#v:dropFrac'",
      "description": {
        "fct-module": "Synthesizer.Plain.ToneModulation",
        "fct-package": "synthesizer",
        "fct-signature": "i -\u003e T a -\u003e (Int, i, T a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-ToneModulation.html#dropFrac%27",
        "fct-type": "unknown",
        "title": "dropFrac'"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain ToneModulation",
        "module": "Synthesizer.Plain.ToneModulation",
        "name": "dropFrac'",
        "normalized": "a-\u003eT b-\u003e(Int,a,T b)",
        "package": "synthesizer",
        "partial": "Frac'",
        "signature": "i-\u003eT a-\u003e(Int,i,T a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-ToneModulation.html#v:dropRem",
      "description": {
        "fct-module": "Synthesizer.Plain.ToneModulation",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e T a -\u003e (Int, T a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-ToneModulation.html#dropRem",
        "fct-type": "unknown",
        "title": "dropRem"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain ToneModulation",
        "module": "Synthesizer.Plain.ToneModulation",
        "name": "dropRem",
        "normalized": "Int-\u003eT a-\u003e(Int,T a)",
        "package": "synthesizer",
        "partial": "Rem",
        "signature": "Int-\u003eT a-\u003e(Int,T a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-ToneModulation.html#v:dropRem'",
      "description": {
        "fct-module": "Synthesizer.Plain.ToneModulation",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e T a -\u003e (Int, T a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-ToneModulation.html#dropRem%27",
        "fct-type": "unknown",
        "title": "dropRem'"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain ToneModulation",
        "module": "Synthesizer.Plain.ToneModulation",
        "name": "dropRem'",
        "normalized": "Int-\u003eT a-\u003e(Int,T a)",
        "package": "synthesizer",
        "partial": "Rem'",
        "signature": "Int-\u003eT a-\u003e(Int,T a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-ToneModulation.html#v:freqsToPhases",
      "description": {
        "fct-descr": "Convert a list of phase steps into a list of momentum phases\nphase is a number in the interval [0,1)\nfreq contains the phase steps\n",
        "fct-module": "Synthesizer.Plain.ToneModulation",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e T a -\u003e T (T a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-ToneModulation.html#freqsToPhases",
        "fct-type": "unknown",
        "title": "freqsToPhases"
      },
      "index": {
        "description": "Convert list of phase steps into list of momentum phases phase is number in the interval freq contains the phase steps",
        "hierarchy": "Synthesizer Plain ToneModulation",
        "module": "Synthesizer.Plain.ToneModulation",
        "name": "freqsToPhases",
        "normalized": "T a-\u003eT a-\u003eT(T a)",
        "package": "synthesizer",
        "partial": "To Phases",
        "signature": "T a-\u003eT a-\u003eT(T a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-ToneModulation.html#v:integrateFractional",
      "description": {
        "fct-module": "Synthesizer.Plain.ToneModulation",
        "fct-package": "synthesizer",
        "fct-signature": "t -\u003e (t, T t) -\u003e (T t, T t) -\u003e T (Skip t)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-ToneModulation.html#integrateFractional",
        "fct-type": "unknown",
        "title": "integrateFractional"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain ToneModulation",
        "module": "Synthesizer.Plain.ToneModulation",
        "name": "integrateFractional",
        "normalized": "a-\u003e(a,T a)-\u003e(T a,T a)-\u003eT(Skip a)",
        "package": "synthesizer",
        "partial": "Fractional",
        "signature": "t-\u003e(t,T t)-\u003e(T t,T t)-\u003eT(Skip t)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-ToneModulation.html#v:interpolateCell",
      "description": {
        "fct-module": "Synthesizer.Plain.ToneModulation",
        "fct-package": "synthesizer",
        "fct-signature": "T a y -\u003e T b y -\u003e (a, b) -\u003e Cell y -\u003e y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-ToneModulation.html#interpolateCell",
        "fct-type": "unknown",
        "title": "interpolateCell"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain ToneModulation",
        "module": "Synthesizer.Plain.ToneModulation",
        "name": "interpolateCell",
        "normalized": "T a b-\u003eT c b-\u003e(a,c)-\u003eCell b-\u003eb",
        "package": "synthesizer",
        "partial": "Cell",
        "signature": "T a y-\u003eT b y-\u003e(a,b)-\u003eCell y-\u003ey"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-ToneModulation.html#v:limitMaxRelativeValues",
      "description": {
        "fct-module": "Synthesizer.Plain.ToneModulation",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e a -\u003e T a -\u003e (a, T a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-ToneModulation.html#limitMaxRelativeValues",
        "fct-type": "unknown",
        "title": "limitMaxRelativeValues"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain ToneModulation",
        "module": "Synthesizer.Plain.ToneModulation",
        "name": "limitMaxRelativeValues",
        "normalized": "a-\u003ea-\u003eT a-\u003e(a,T a)",
        "package": "synthesizer",
        "partial": "Max Relative Values",
        "signature": "a-\u003ea-\u003eT a-\u003e(a,T a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-ToneModulation.html#v:limitMaxRelativeValuesNonNeg",
      "description": {
        "fct-descr": "Avoids negative numbers and thus can be used with Chunky numbers.\n",
        "fct-module": "Synthesizer.Plain.ToneModulation",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e a -\u003e T a -\u003e (a, T a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-ToneModulation.html#limitMaxRelativeValuesNonNeg",
        "fct-type": "unknown",
        "title": "limitMaxRelativeValuesNonNeg"
      },
      "index": {
        "description": "Avoids negative numbers and thus can be used with Chunky numbers",
        "hierarchy": "Synthesizer Plain ToneModulation",
        "module": "Synthesizer.Plain.ToneModulation",
        "name": "limitMaxRelativeValuesNonNeg",
        "normalized": "a-\u003ea-\u003eT a-\u003e(a,T a)",
        "package": "synthesizer",
        "partial": "Max Relative Values Non Neg",
        "signature": "a-\u003ea-\u003eT a-\u003e(a,T a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-ToneModulation.html#v:limitMinRelativeValues",
      "description": {
        "fct-module": "Synthesizer.Plain.ToneModulation",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e a -\u003e T a -\u003e (a, T a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-ToneModulation.html#limitMinRelativeValues",
        "fct-type": "unknown",
        "title": "limitMinRelativeValues"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain ToneModulation",
        "module": "Synthesizer.Plain.ToneModulation",
        "name": "limitMinRelativeValues",
        "normalized": "a-\u003ea-\u003eT a-\u003e(a,T a)",
        "package": "synthesizer",
        "partial": "Min Relative Values",
        "signature": "a-\u003ea-\u003eT a-\u003e(a,T a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-ToneModulation.html#v:limitRelativeShapes",
      "description": {
        "fct-module": "Synthesizer.Plain.ToneModulation",
        "fct-package": "synthesizer",
        "fct-signature": "Margin -\u003e Margin -\u003e Int -\u003e T y -\u003e (t, T t) -\u003e (t, T t)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-ToneModulation.html#limitRelativeShapes",
        "fct-type": "unknown",
        "title": "limitRelativeShapes"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain ToneModulation",
        "module": "Synthesizer.Plain.ToneModulation",
        "name": "limitRelativeShapes",
        "normalized": "Margin-\u003eMargin-\u003eInt-\u003eT a-\u003e(b,T b)-\u003e(b,T b)",
        "package": "synthesizer",
        "partial": "Relative Shapes",
        "signature": "Margin-\u003eMargin-\u003eInt-\u003eT y-\u003e(t,T t)-\u003e(t,T t)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-ToneModulation.html#v:makePrototype",
      "description": {
        "fct-module": "Synthesizer.Plain.ToneModulation",
        "fct-package": "synthesizer",
        "fct-signature": "Margin -\u003e Margin -\u003e Int -\u003e t -\u003e T y -\u003e Prototype t y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-ToneModulation.html#makePrototype",
        "fct-type": "unknown",
        "title": "makePrototype"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain ToneModulation",
        "module": "Synthesizer.Plain.ToneModulation",
        "name": "makePrototype",
        "normalized": "Margin-\u003eMargin-\u003eInt-\u003ea-\u003eT b-\u003ePrototype a b",
        "package": "synthesizer",
        "partial": "Prototype",
        "signature": "Margin-\u003eMargin-\u003eInt-\u003et-\u003eT y-\u003ePrototype t y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-ToneModulation.html#v:oscillatorCells",
      "description": {
        "fct-module": "Synthesizer.Plain.ToneModulation",
        "fct-package": "synthesizer",
        "fct-signature": "Margin -\u003e Margin -\u003e Int -\u003e t -\u003e T y -\u003e (t, T t) -\u003e (T t, T t) -\u003e T ((t, t), Cell y)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-ToneModulation.html#oscillatorCells",
        "fct-type": "unknown",
        "title": "oscillatorCells"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain ToneModulation",
        "module": "Synthesizer.Plain.ToneModulation",
        "name": "oscillatorCells",
        "normalized": "Margin-\u003eMargin-\u003eInt-\u003ea-\u003eT b-\u003e(a,T a)-\u003e(T a,T a)-\u003eT((a,a),Cell b)",
        "package": "synthesizer",
        "partial": "Cells",
        "signature": "Margin-\u003eMargin-\u003eInt-\u003et-\u003eT y-\u003e(t,T t)-\u003e(T t,T t)-\u003eT((t,t),Cell y)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-ToneModulation.html#v:oscillatorCoords",
      "description": {
        "fct-module": "Synthesizer.Plain.ToneModulation",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e t -\u003e (t, T t) -\u003e (T t, T t) -\u003e T (Coords t)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-ToneModulation.html#oscillatorCoords",
        "fct-type": "unknown",
        "title": "oscillatorCoords"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain ToneModulation",
        "module": "Synthesizer.Plain.ToneModulation",
        "name": "oscillatorCoords",
        "normalized": "Int-\u003ea-\u003e(a,T a)-\u003e(T a,T a)-\u003eT(Coords a)",
        "package": "synthesizer",
        "partial": "Coords",
        "signature": "Int-\u003et-\u003e(t,T t)-\u003e(T t,T t)-\u003eT(Coords t)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-ToneModulation.html#v:oscillatorSuffixes",
      "description": {
        "fct-module": "Synthesizer.Plain.ToneModulation",
        "fct-package": "synthesizer",
        "fct-signature": "Margin -\u003e Margin -\u003e Int -\u003e t -\u003e T y -\u003e (t, T t) -\u003e (T t, T t) -\u003e T ((t, T t), Cell y)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-ToneModulation.html#oscillatorSuffixes",
        "fct-type": "unknown",
        "title": "oscillatorSuffixes"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain ToneModulation",
        "module": "Synthesizer.Plain.ToneModulation",
        "name": "oscillatorSuffixes",
        "normalized": "Margin-\u003eMargin-\u003eInt-\u003ea-\u003eT b-\u003e(a,T a)-\u003e(T a,T a)-\u003eT((a,T a),Cell b)",
        "package": "synthesizer",
        "partial": "Suffixes",
        "signature": "Margin-\u003eMargin-\u003eInt-\u003et-\u003eT y-\u003e(t,T t)-\u003e(T t,T t)-\u003eT((t,T t),Cell y)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-ToneModulation.html#v:propDropFrac",
      "description": {
        "fct-module": "Synthesizer.Plain.ToneModulation",
        "fct-package": "synthesizer",
        "fct-signature": "i -\u003e T a -\u003e Bool",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-ToneModulation.html#propDropFrac",
        "fct-type": "unknown",
        "title": "propDropFrac"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain ToneModulation",
        "module": "Synthesizer.Plain.ToneModulation",
        "name": "propDropFrac",
        "normalized": "a-\u003eT b-\u003eBool",
        "package": "synthesizer",
        "partial": "Drop Frac",
        "signature": "i-\u003eT a-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-ToneModulation.html#v:propDropRem",
      "description": {
        "fct-module": "Synthesizer.Plain.ToneModulation",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e T a -\u003e Bool",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-ToneModulation.html#propDropRem",
        "fct-type": "unknown",
        "title": "propDropRem"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain ToneModulation",
        "module": "Synthesizer.Plain.ToneModulation",
        "name": "propDropRem",
        "normalized": "Int-\u003eT a-\u003eBool",
        "package": "synthesizer",
        "partial": "Drop Rem",
        "signature": "Int-\u003eT a-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-ToneModulation.html#v:safeSub",
      "description": {
        "fct-module": "Synthesizer.Plain.ToneModulation",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e a -\u003e (Bool, a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-ToneModulation.html#safeSub",
        "fct-type": "unknown",
        "title": "safeSub"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain ToneModulation",
        "module": "Synthesizer.Plain.ToneModulation",
        "name": "safeSub",
        "normalized": "a-\u003ea-\u003e(Bool,a)",
        "package": "synthesizer",
        "partial": "Sub",
        "signature": "a-\u003ea-\u003e(Bool,a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-ToneModulation.html#v:sampledToneCell",
      "description": {
        "fct-module": "Synthesizer.Plain.ToneModulation",
        "fct-package": "synthesizer",
        "fct-signature": "Prototype t y -\u003e t -\u003e T t -\u003e ((t, t), Cell y)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-ToneModulation.html#sampledToneCell",
        "fct-type": "unknown",
        "title": "sampledToneCell"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain ToneModulation",
        "module": "Synthesizer.Plain.ToneModulation",
        "name": "sampledToneCell",
        "normalized": "Prototype a b-\u003ea-\u003eT a-\u003e((a,a),Cell b)",
        "package": "synthesizer",
        "partial": "Tone Cell",
        "signature": "Prototype t y-\u003et-\u003eT t-\u003e((t,t),Cell y)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-ToneModulation.html#v:seekCell",
      "description": {
        "fct-module": "Synthesizer.Plain.ToneModulation",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e t -\u003e ((t, T t), Cell y) -\u003e ((t, t), Cell y)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-ToneModulation.html#seekCell",
        "fct-type": "unknown",
        "title": "seekCell"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain ToneModulation",
        "module": "Synthesizer.Plain.ToneModulation",
        "name": "seekCell",
        "normalized": "Int-\u003ea-\u003e((a,T a),Cell b)-\u003e((a,a),Cell b)",
        "package": "synthesizer",
        "partial": "Cell",
        "signature": "Int-\u003et-\u003e((t,T t),Cell y)-\u003e((t,t),Cell y)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Tutorial.html#v:cubic",
      "description": {
        "fct-descr": "When we apply a third power to each value of the saw tooths\nwe get an oscillator with cubic polynomial functions as waveform.\nThe distortion function applied to a saw wave can be used\nto turn every function on the interval [-1,1] into a waveform.\n",
        "fct-module": "Synthesizer.Plain.Tutorial",
        "fct-package": "synthesizer",
        "fct-signature": "IO ExitCode",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Tutorial.html#cubic",
        "fct-type": "unknown",
        "title": "cubic"
      },
      "index": {
        "description": "When we apply third power to each value of the saw tooths we get an oscillator with cubic polynomial functions as waveform The distortion function applied to saw wave can be used to turn every function on the interval into waveform",
        "hierarchy": "Synthesizer Plain Tutorial",
        "module": "Synthesizer.Plain.Tutorial",
        "name": "cubic",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Tutorial.html#v:filterSaw",
      "description": {
        "fct-descr": "\u003cp\u003eOne of the most impressive sounds effects is certainly frequency filtering,\nespecially when the filter parameters are modulated.\nIn this example we use a resonant lowpass\nwhose resonance frequency is controlled by a slow sine wave.\nThe frequency filters usually use internal filter parameters\nthat are not very intuitive to use directly.\nThus we apply a function (here \u003ctt\u003e\u003ca\u003eparameter\u003c/a\u003e\u003c/tt\u003e)\nin order to turn the intuitive parameters \"resonance frequency\" and \"resonance\"\n(resonance frequency amplification while frequency zero is left unchanged)\ninto internal filter parameters.\nWe have not merged these two steps\nsince the computation of internal filter parameters\nis more expensive then the filtering itself\nand you may want to reduce the computation\nby computing the internal filter parameters at a low sample rate\nand interpolate them.\nHowever, in the list implementation\nthis will not save you much time, if at all,\nsince the list operations are too expensive.\n\u003c/p\u003e\u003cp\u003eNow this is the example where my machine is no longer able to produce\na constant audio stream in real-time.\nFor tackling this problem, please continue with \u003ca\u003eSynthesizer.Generic.Tutorial\u003c/a\u003e.\n\u003c/p\u003e",
        "fct-module": "Synthesizer.Plain.Tutorial",
        "fct-package": "synthesizer",
        "fct-signature": "IO ExitCode",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Tutorial.html#filterSaw",
        "fct-type": "unknown",
        "title": "filterSaw"
      },
      "index": {
        "description": "One of the most impressive sounds effects is certainly frequency filtering especially when the filter parameters are modulated In this example we use resonant lowpass whose resonance frequency is controlled by slow sine wave The frequency filters usually use internal filter parameters that are not very intuitive to use directly Thus we apply function here parameter in order to turn the intuitive parameters resonance frequency and resonance resonance frequency amplification while frequency zero is left unchanged into internal filter parameters We have not merged these two steps since the computation of internal filter parameters is more expensive then the filtering itself and you may want to reduce the computation by computing the internal filter parameters at low sample rate and interpolate them However in the list implementation this will not save you much time if at all since the list operations are too expensive Now this is the example where my machine is no longer able to produce constant audio stream in real-time For tackling this problem please continue with Synthesizer.Generic.Tutorial",
        "hierarchy": "Synthesizer Plain Tutorial",
        "module": "Synthesizer.Plain.Tutorial",
        "name": "filterSaw",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Saw",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Tutorial.html#v:fmPing",
      "description": {
        "fct-descr": "The \u003ctt\u003e\u003ca\u003eping\u003c/a\u003e\u003c/tt\u003e sound can also be used\nto modulate the phase another oscillator.\nThis is a well-known effect used excessively in FM synthesis,\nthat was introduced by the Yamaha DX-7 synthesizer.\n",
        "fct-module": "Synthesizer.Plain.Tutorial",
        "fct-package": "synthesizer",
        "fct-signature": "IO ExitCode",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Tutorial.html#fmPing",
        "fct-type": "unknown",
        "title": "fmPing"
      },
      "index": {
        "description": "The ping sound can also be used to modulate the phase another oscillator This is well-known effect used excessively in FM synthesis that was introduced by the Yamaha DX-7 synthesizer",
        "hierarchy": "Synthesizer Plain Tutorial",
        "module": "Synthesizer.Plain.Tutorial",
        "name": "fmPing",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Ping",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Tutorial.html#v:laser",
      "description": {
        "fct-descr": "It's also very common to modulate the frequency of a tone.\n",
        "fct-module": "Synthesizer.Plain.Tutorial",
        "fct-package": "synthesizer",
        "fct-signature": "IO ExitCode",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Tutorial.html#laser",
        "fct-type": "unknown",
        "title": "laser"
      },
      "index": {
        "description": "It also very common to modulate the frequency of tone",
        "hierarchy": "Synthesizer Plain Tutorial",
        "module": "Synthesizer.Plain.Tutorial",
        "name": "laser",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Tutorial.html#v:oscillator",
      "description": {
        "fct-descr": "\u003cp\u003eNow, let's repeat the \u003ctt\u003e\u003ca\u003esine\u003c/a\u003e\u003c/tt\u003e example in a higher level style.\nWe use the oscillator \u003ctt\u003e\u003ca\u003estatic\u003c/a\u003e\u003c/tt\u003e that does not allow any modulation.\nWe can however use any waveform.\nThe waveform is essentially a function\nwhich maps from the phase to the displacement.\nFunctional programming proves to be very useful here,\nsince anonymous functions as waveforms are optimally supported by the language.\nWe can also expect, that in compiled form\nthe oscillator does not have to call back the waveform function\nby an expensive explicit function call,\nbut that the compiler will inline both oscillator and waveform\nsuch that the oscillator is turned into a simple loop\nwhich handles both oscillation and waveform computation.\n\u003c/p\u003e\u003cp\u003eUsing the oscillator with \u003ctt\u003e\u003ca\u003esine\u003c/a\u003e\u003c/tt\u003e also has the advantage\nthat we do not have to cope with \u003ctt\u003e\u003ca\u003epi\u003c/a\u003e\u003c/tt\u003es any longer.\nThe frequency is given as ratio of the sample rate.\nThat is, \u003ctt\u003e0.01\u003c/tt\u003e at \u003ctt\u003e44100 Hz\u003c/tt\u003e sample rate means \u003ctt\u003e441 Hz\u003c/tt\u003e.\nThis way all frequencies are given in the low-level signal processing.\n\u003c/p\u003e\u003cp\u003eIt is not optimal to handle frequencies this way,\nsince all frequency values are bound to the sample rate.\nFor overcoming this problem, see the high level routines using physical dimensions.\nFor examples see \u003ca\u003eSynthesizer.Dimensional.RateAmplitude.Demonstration\u003c/a\u003e.\n\u003c/p\u003e",
        "fct-module": "Synthesizer.Plain.Tutorial",
        "fct-package": "synthesizer",
        "fct-signature": "IO ExitCode",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Tutorial.html#oscillator",
        "fct-type": "unknown",
        "title": "oscillator"
      },
      "index": {
        "description": "Now let repeat the sine example in higher level style We use the oscillator static that does not allow any modulation We can however use any waveform The waveform is essentially function which maps from the phase to the displacement Functional programming proves to be very useful here since anonymous functions as waveforms are optimally supported by the language We can also expect that in compiled form the oscillator does not have to call back the waveform function by an expensive explicit function call but that the compiler will inline both oscillator and waveform such that the oscillator is turned into simple loop which handles both oscillation and waveform computation Using the oscillator with sine also has the advantage that we do not have to cope with pi any longer The frequency is given as ratio of the sample rate That is at Hz sample rate means Hz This way all frequencies are given in the low-level signal processing It is not optimal to handle frequencies this way since all frequency values are bound to the sample rate For overcoming this problem see the high level routines using physical dimensions For examples see Synthesizer.Dimensional.RateAmplitude.Demonstration",
        "hierarchy": "Synthesizer Plain Tutorial",
        "module": "Synthesizer.Plain.Tutorial",
        "name": "oscillator",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Tutorial.html#v:ping",
      "description": {
        "fct-descr": "A simple sine wave with exponentially decaying amplitude.\n",
        "fct-module": "Synthesizer.Plain.Tutorial",
        "fct-package": "synthesizer",
        "fct-signature": "IO ExitCode",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Tutorial.html#ping",
        "fct-type": "unknown",
        "title": "ping"
      },
      "index": {
        "description": "simple sine wave with exponentially decaying amplitude",
        "hierarchy": "Synthesizer Plain Tutorial",
        "module": "Synthesizer.Plain.Tutorial",
        "name": "ping",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Tutorial.html#v:pingSig",
      "description": {
        "fct-module": "Synthesizer.Plain.Tutorial",
        "fct-package": "synthesizer",
        "fct-signature": "T Double",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Tutorial.html#pingSig",
        "fct-type": "unknown",
        "title": "pingSig"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Tutorial",
        "module": "Synthesizer.Plain.Tutorial",
        "name": "pingSig",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Sig",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Tutorial.html#v:play",
      "description": {
        "fct-descr": "For the following examples we will stick to monophonic sounds played at 44100 Hz.\nThus we define a function for convenience.\n",
        "fct-module": "Synthesizer.Plain.Tutorial",
        "fct-package": "synthesizer",
        "fct-signature": "T Double -\u003e IO ExitCode",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Tutorial.html#play",
        "fct-type": "unknown",
        "title": "play"
      },
      "index": {
        "description": "For the following examples we will stick to monophonic sounds played at Hz Thus we define function for convenience",
        "hierarchy": "Synthesizer Plain Tutorial",
        "module": "Synthesizer.Plain.Tutorial",
        "name": "play",
        "normalized": "T Double-\u003eIO ExitCode",
        "package": "synthesizer",
        "partial": "",
        "signature": "T Double-\u003eIO ExitCode"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Tutorial.html#v:saw",
      "description": {
        "fct-descr": "It is very simple to switch to another waveform like a saw tooth wave.\nInstead of a sharp saw tooth,\nwe use an extreme asymmetric triangle.\nThis is a poor man's band-limiting approach\nthat shall reduce aliasing at high oscillation frequencies.\nWe should really work on band-limited oscillators,\nbut this is hard in the general case.\n",
        "fct-module": "Synthesizer.Plain.Tutorial",
        "fct-package": "synthesizer",
        "fct-signature": "IO ExitCode",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Tutorial.html#saw",
        "fct-type": "unknown",
        "title": "saw"
      },
      "index": {
        "description": "It is very simple to switch to another waveform like saw tooth wave Instead of sharp saw tooth we use an extreme asymmetric triangle This is poor man band-limiting approach that shall reduce aliasing at high oscillation frequencies We should really work on band-limited oscillators but this is hard in the general case",
        "hierarchy": "Synthesizer Plain Tutorial",
        "module": "Synthesizer.Plain.Tutorial",
        "name": "saw",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Tutorial.html#v:sawMorph",
      "description": {
        "fct-descr": "Now let's start with modulated tones.\nThe first simple example is changing the degree of asymmetry\naccording to a slow oscillator (LFO = low frequency oscillator).\n",
        "fct-module": "Synthesizer.Plain.Tutorial",
        "fct-package": "synthesizer",
        "fct-signature": "IO ExitCode",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Tutorial.html#sawMorph",
        "fct-type": "unknown",
        "title": "sawMorph"
      },
      "index": {
        "description": "Now let start with modulated tones The first simple example is changing the degree of asymmetry according to slow oscillator LFO low frequency oscillator",
        "hierarchy": "Synthesizer Plain Tutorial",
        "module": "Synthesizer.Plain.Tutorial",
        "name": "sawMorph",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Morph",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Tutorial.html#v:sine",
      "description": {
        "fct-descr": "Play a simple sine tone at 44100 sample rate and 16 bit.\nThese are the parameters used for compact disks.\nThe period of the tone is \u003ctt\u003e2*pi*10\u003c/tt\u003e.\nPlaying at sample rate 44100 Hz results in a tone of \u003ctt\u003e44100 / (20*pi) Hz\u003c/tt\u003e,\nthat is about \u003ctt\u003e702 Hz\u003c/tt\u003e.\nThis is simple enough to be performed in real-time,\nat least on my machine.\nFor playback we use \u003ctt\u003eSoX\u003c/tt\u003e.\n",
        "fct-module": "Synthesizer.Plain.Tutorial",
        "fct-package": "synthesizer",
        "fct-signature": "IO ExitCode",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Tutorial.html#sine",
        "fct-type": "unknown",
        "title": "sine"
      },
      "index": {
        "description": "Play simple sine tone at sample rate and bit These are the parameters used for compact disks The period of the tone is pi Playing at sample rate Hz results in tone of pi Hz that is about Hz This is simple enough to be performed in real-time at least on my machine For playback we use SoX",
        "hierarchy": "Synthesizer Plain Tutorial",
        "module": "Synthesizer.Plain.Tutorial",
        "name": "sine",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Tutorial.html#v:sineStereo",
      "description": {
        "fct-descr": "Now the same for a stereo signal.\nBoth stereo channels are slightly detuned\nin order to achieve a stereophonic phasing effect.\nIn principle there is no limit of the number of channels,\nbut with more channels playback becomes difficult.\nMany signal processes in our package\nsupport any tuple and even nested tuples\nusing the notion of an algebraic \u003ctt\u003emodule\u003c/tt\u003e (see \u003ctt\u003e\u003ca\u003eC\u003c/a\u003e\u003c/tt\u003e).\nA module is a vector space where the scalar numbers\ndo not need to support division.\nA vector space is often also called a linear space,\nbecause all we require of vectors is that they can be added and scaled\nand these two operations fulfill some natural laws.\n",
        "fct-module": "Synthesizer.Plain.Tutorial",
        "fct-package": "synthesizer",
        "fct-signature": "IO ExitCode",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Tutorial.html#sineStereo",
        "fct-type": "unknown",
        "title": "sineStereo"
      },
      "index": {
        "description": "Now the same for stereo signal Both stereo channels are slightly detuned in order to achieve stereophonic phasing effect In principle there is no limit of the number of channels but with more channels playback becomes difficult Many signal processes in our package support any tuple and even nested tuples using the notion of an algebraic module see module is vector space where the scalar numbers do not need to support division vector space is often also called linear space because all we require of vectors is that they can be added and scaled and these two operations fulfill some natural laws",
        "hierarchy": "Synthesizer Plain Tutorial",
        "module": "Synthesizer.Plain.Tutorial",
        "name": "sineStereo",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Stereo",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Tutorial.html#v:writeSine",
      "description": {
        "fct-descr": "Of course we can also write a tone to disk using \u003ctt\u003esox\u003c/tt\u003e.\n",
        "fct-module": "Synthesizer.Plain.Tutorial",
        "fct-package": "synthesizer",
        "fct-signature": "IO ExitCode",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Tutorial.html#writeSine",
        "fct-type": "unknown",
        "title": "writeSine"
      },
      "index": {
        "description": "Of course we can also write tone to disk using sox",
        "hierarchy": "Synthesizer Plain Tutorial",
        "module": "Synthesizer.Plain.Tutorial",
        "name": "writeSine",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Sine",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Wave.html#v:sample",
      "description": {
        "fct-module": "Synthesizer.Plain.Wave",
        "fct-package": "synthesizer",
        "fct-signature": "T a v -\u003e T v -\u003e T a v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Wave.html#sample",
        "fct-type": "unknown",
        "title": "sample"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Plain Wave",
        "module": "Synthesizer.Plain.Wave",
        "name": "sample",
        "normalized": "T a b-\u003eT b-\u003eT a b",
        "package": "synthesizer",
        "partial": "",
        "signature": "T a v-\u003eT v-\u003eT a v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Plain-Wave.html#v:sampledTone",
      "description": {
        "fct-descr": "\u003cp\u003eWe assume that a tone was generated by a shape modulated oscillator.\nWe try to reconstruct the wave function\n(with parameters shape control and phase)\nfrom a tone by interpolation.\n\u003c/p\u003e\u003cp\u003eThe unit for the shape control parameter is the sampling period.\nThat is the shape parameter is a time parameter\npointing to a momentary shape of the prototype signal.\nOf course this momentary shape does not exist\nand we can only guess it using interpolation.\n\u003c/p\u003e\u003cp\u003eAt the boundaries we repeat the outermost shapes\nthat can be reconstructed entirely from interpolated data\n(that is, no extrapolation is needed).\nThis way we cannot reproduce the shape at the boundaries\nbecause we have no data for cyclically extending it.\nOn the other hand this method guarantees a nice wave shape\nwith the required fractional period.\n\u003c/p\u003e\u003cp\u003eIt must be\n   \u003ctt\u003elength tone \u003e=\n       Interpolation.number ipStep +\n       Interpolation.number ipLeap * ceiling period\u003c/tt\u003e.\n\u003c/p\u003e",
        "fct-module": "Synthesizer.Plain.Wave",
        "fct-package": "synthesizer",
        "fct-signature": "T a v -\u003e T a v -\u003e a -\u003e T v -\u003e a -\u003e T a v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Wave.html#sampledTone",
        "fct-type": "unknown",
        "title": "sampledTone"
      },
      "index": {
        "description": "We assume that tone was generated by shape modulated oscillator We try to reconstruct the wave function with parameters shape control and phase from tone by interpolation The unit for the shape control parameter is the sampling period That is the shape parameter is time parameter pointing to momentary shape of the prototype signal Of course this momentary shape does not exist and we can only guess it using interpolation At the boundaries we repeat the outermost shapes that can be reconstructed entirely from interpolated data that is no extrapolation is needed This way we cannot reproduce the shape at the boundaries because we have no data for cyclically extending it On the other hand this method guarantees nice wave shape with the required fractional period It must be length tone Interpolation.number ipStep Interpolation.number ipLeap ceiling period",
        "hierarchy": "Synthesizer Plain Wave",
        "module": "Synthesizer.Plain.Wave",
        "name": "sampledTone",
        "normalized": "T a b-\u003eT a b-\u003ea-\u003eT b-\u003ea-\u003eT a b",
        "package": "synthesizer",
        "partial": "Tone",
        "signature": "T a v-\u003eT a v-\u003ea-\u003eT v-\u003ea-\u003eT a v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-RandomKnuth.html#t:T",
      "description": {
        "fct-module": "Synthesizer.RandomKnuth",
        "fct-package": "synthesizer",
        "fct-signature": "data",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-RandomKnuth.html#T",
        "fct-type": "unknown",
        "title": "T"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer RandomKnuth",
        "module": "Synthesizer.RandomKnuth",
        "name": "T",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-RandomKnuth.html#v:cons",
      "description": {
        "fct-module": "Synthesizer.RandomKnuth",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e T",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-RandomKnuth.html#cons",
        "fct-type": "unknown",
        "title": "cons"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer RandomKnuth",
        "module": "Synthesizer.RandomKnuth",
        "name": "cons",
        "normalized": "Int-\u003eT",
        "package": "synthesizer",
        "partial": "",
        "signature": "Int-\u003eT"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Control.html#t:Control",
      "description": {
        "fct-module": "Synthesizer.SampleRateContext.Control",
        "fct-package": "synthesizer",
        "fct-signature": "data",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Control.html#Control",
        "fct-type": "unknown",
        "title": "Control"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer SampleRateContext Control",
        "module": "Synthesizer.SampleRateContext.Control",
        "name": "Control",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Control",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Control.html#t:ControlPiece",
      "description": {
        "fct-module": "Synthesizer.SampleRateContext.Control",
        "fct-package": "synthesizer",
        "fct-signature": "data",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Control.html#ControlPiece",
        "fct-type": "unknown",
        "title": "ControlPiece"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer SampleRateContext Control",
        "module": "Synthesizer.SampleRateContext.Control",
        "name": "ControlPiece",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Control Piece",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Control.html#v:#|",
      "description": {
        "fct-module": "Synthesizer.SampleRateContext.Control",
        "fct-package": "synthesizer",
        "fct-signature": "(y, Control y) -\u003e y -\u003e (ControlDist y, [ControlPiece y])",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Control.html#%23%7C",
        "fct-type": "unknown",
        "title": "#|"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer SampleRateContext Control",
        "module": "Synthesizer.SampleRateContext.Control",
        "name": "#|",
        "normalized": "(a,Control a)-\u003ea-\u003e(ControlDist a,[ControlPiece a])",
        "package": "synthesizer",
        "partial": "",
        "signature": "(y,Control y)-\u003ey-\u003e(ControlDist y,[ControlPiece y])"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Control.html#v:#|-",
      "description": {
        "fct-descr": "\u003cp\u003eThe 6 operators simplify constructing a list of \u003ctt\u003eControlPiece a\u003c/tt\u003e.\nThe description consists of nodes (namely the curve values at nodes)\nand the connecting curve types.\nThe naming scheme is as follows:\nIn the middle there is a bar \u003ctt\u003e|\u003c/tt\u003e.\nWith respect to the bar,\nthe pad symbol \u003ctt\u003e#\u003c/tt\u003e is at the side of the curve type,\nat the other side there is nothing, a minus sign \u003ctt\u003e-\u003c/tt\u003e, or an equality sign \u003ctt\u003e=\u003c/tt\u003e.\n\u003c/p\u003e\u003col\u003e\u003cli\u003e Nothing means that here is the start or the end node of a curve.\n\u003c/li\u003e\u003cli\u003e Minus means that here is a node where left and right curve meet at the same value.\n     The node description is thus one value.\n\u003c/li\u003e\u003cli\u003e Equality sign means that here is a split node,\n     where left and right curve might have different ending and beginning values, respectively.\n     The node description consists of a pair of values.\n\u003c/li\u003e\u003c/ol\u003e",
        "fct-module": "Synthesizer.SampleRateContext.Control",
        "fct-package": "synthesizer",
        "fct-signature": "(y, Control y) -\u003e (PieceRightSingle y, [ControlPiece y]) -\u003e (ControlDist y, [ControlPiece y])",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Control.html#%23%7C-",
        "fct-type": "unknown",
        "title": "#|-"
      },
      "index": {
        "description": "The operators simplify constructing list of ControlPiece The description consists of nodes namely the curve values at nodes and the connecting curve types The naming scheme is as follows In the middle there is bar With respect to the bar the pad symbol is at the side of the curve type at the other side there is nothing minus sign or an equality sign Nothing means that here is the start or the end node of curve Minus means that here is node where left and right curve meet at the same value The node description is thus one value Equality sign means that here is split node where left and right curve might have different ending and beginning values respectively The node description consists of pair of values",
        "hierarchy": "Synthesizer SampleRateContext Control",
        "module": "Synthesizer.SampleRateContext.Control",
        "name": "#|-",
        "normalized": "(a,Control a)-\u003e(PieceRightSingle a,[ControlPiece a])-\u003e(ControlDist a,[ControlPiece a])",
        "package": "synthesizer",
        "partial": "",
        "signature": "(y,Control y)-\u003e(PieceRightSingle y,[ControlPiece y])-\u003e(ControlDist y,[ControlPiece y])"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Control.html#v:#|=",
      "description": {
        "fct-module": "Synthesizer.SampleRateContext.Control",
        "fct-package": "synthesizer",
        "fct-signature": "(y, Control y) -\u003e (PieceRightDouble y, [ControlPiece y]) -\u003e (ControlDist y, [ControlPiece y])",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Control.html#%23%7C%3D",
        "fct-type": "unknown",
        "title": "#|="
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer SampleRateContext Control",
        "module": "Synthesizer.SampleRateContext.Control",
        "name": "#|=",
        "normalized": "(a,Control a)-\u003e(PieceRightDouble a,[ControlPiece a])-\u003e(ControlDist a,[ControlPiece a])",
        "package": "synthesizer",
        "partial": "",
        "signature": "(y,Control y)-\u003e(PieceRightDouble y,[ControlPiece y])-\u003e(ControlDist y,[ControlPiece y])"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Control.html#v:-|#",
      "description": {
        "fct-module": "Synthesizer.SampleRateContext.Control",
        "fct-package": "synthesizer",
        "fct-signature": "y -\u003e (ControlDist y, [ControlPiece y]) -\u003e (PieceRightSingle y, [ControlPiece y])",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Control.html#-%7C%23",
        "fct-type": "unknown",
        "title": "-|#"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer SampleRateContext Control",
        "module": "Synthesizer.SampleRateContext.Control",
        "name": "-|#",
        "normalized": "a-\u003e(ControlDist a,[ControlPiece a])-\u003e(PieceRightSingle a,[ControlPiece a])",
        "package": "synthesizer",
        "partial": "",
        "signature": "y-\u003e(ControlDist y,[ControlPiece y])-\u003e(PieceRightSingle y,[ControlPiece y])"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Control.html#v:=|#",
      "description": {
        "fct-module": "Synthesizer.SampleRateContext.Control",
        "fct-package": "synthesizer",
        "fct-signature": "(y, y) -\u003e (ControlDist y, [ControlPiece y]) -\u003e (PieceRightDouble y, [ControlPiece y])",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Control.html#%3D%7C%23",
        "fct-type": "unknown",
        "title": "=|#"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer SampleRateContext Control",
        "module": "Synthesizer.SampleRateContext.Control",
        "name": "=|#",
        "normalized": "(a,a)-\u003e(ControlDist a,[ControlPiece a])-\u003e(PieceRightDouble a,[ControlPiece a])",
        "package": "synthesizer",
        "partial": "",
        "signature": "(y,y)-\u003e(ControlDist y,[ControlPiece y])-\u003e(PieceRightDouble y,[ControlPiece y])"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Control.html#v:constant",
      "description": {
        "fct-descr": "value \n",
        "fct-module": "Synthesizer.SampleRateContext.Control",
        "fct-package": "synthesizer",
        "fct-signature": "y'-\u003e T t t'-\u003e T y y' y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-SampleRateContext-Control.html#constant",
        "fct-type": "unknown",
        "title": "constant"
      },
      "index": {
        "description": "value",
        "hierarchy": "Synthesizer SampleRateContext Control",
        "module": "Synthesizer.SampleRateContext.Control",
        "name": "constant",
        "normalized": "a-\u003eT b c-\u003eT d a d",
        "package": "synthesizer",
        "partial": "",
        "signature": "y'-\u003eT t t'-\u003eT y y' y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Control.html#v:constantVector",
      "description": {
        "fct-descr": "amplitude \nvalue \n",
        "fct-module": "Synthesizer.SampleRateContext.Control",
        "fct-package": "synthesizer",
        "fct-signature": "y'-\u003e yv-\u003e T t t'-\u003e T y y' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-SampleRateContext-Control.html#constantVector",
        "fct-type": "unknown",
        "title": "constantVector"
      },
      "index": {
        "description": "amplitude value",
        "hierarchy": "Synthesizer SampleRateContext Control",
        "module": "Synthesizer.SampleRateContext.Control",
        "name": "constantVector",
        "normalized": "a-\u003eb-\u003eT c d-\u003eT e a b",
        "package": "synthesizer",
        "partial": "Vector",
        "signature": "y'-\u003eyv-\u003eT t t'-\u003eT y y' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Control.html#v:exponential",
      "description": {
        "fct-descr": "time where the function reaches 1/e of the initial value \ninitial value \n",
        "fct-module": "Synthesizer.SampleRateContext.Control",
        "fct-package": "synthesizer",
        "fct-signature": "q'-\u003e q'-\u003e T q q'-\u003e T q q' q",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-SampleRateContext-Control.html#exponential",
        "fct-type": "unknown",
        "title": "exponential"
      },
      "index": {
        "description": "time where the function reaches of the initial value initial value",
        "hierarchy": "Synthesizer SampleRateContext Control",
        "module": "Synthesizer.SampleRateContext.Control",
        "name": "exponential",
        "normalized": "a-\u003ea-\u003eT b a-\u003eT b a b",
        "package": "synthesizer",
        "partial": "",
        "signature": "q'-\u003eq'-\u003eT q q'-\u003eT q q' q"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Control.html#v:exponential2",
      "description": {
        "fct-descr": "half life, time where the function reaches 1/2 of the initial value \ninitial value \n",
        "fct-module": "Synthesizer.SampleRateContext.Control",
        "fct-package": "synthesizer",
        "fct-signature": "q'-\u003e q'-\u003e T q q'-\u003e T q q' q",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-SampleRateContext-Control.html#exponential2",
        "fct-type": "unknown",
        "title": "exponential2"
      },
      "index": {
        "description": "half life time where the function reaches of the initial value initial value",
        "hierarchy": "Synthesizer SampleRateContext Control",
        "module": "Synthesizer.SampleRateContext.Control",
        "name": "exponential2",
        "normalized": "a-\u003ea-\u003eT b a-\u003eT b a b",
        "package": "synthesizer",
        "partial": "",
        "signature": "q'-\u003eq'-\u003eT q q'-\u003eT q q' q"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Control.html#v:line",
      "description": {
        "fct-descr": "duration of the ramp \ninitial and final value \n",
        "fct-module": "Synthesizer.SampleRateContext.Control",
        "fct-package": "synthesizer",
        "fct-signature": "q'-\u003e (q', q')-\u003e T q q'-\u003e T q q' q",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-SampleRateContext-Control.html#line",
        "fct-type": "unknown",
        "title": "line"
      },
      "index": {
        "description": "duration of the ramp initial and final value",
        "hierarchy": "Synthesizer SampleRateContext Control",
        "module": "Synthesizer.SampleRateContext.Control",
        "name": "line",
        "normalized": "a-\u003e(a,a)-\u003eT b a-\u003eT b a b",
        "package": "synthesizer",
        "partial": "",
        "signature": "q'-\u003e(q',q')-\u003eT q q'-\u003eT q q' q"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Control.html#v:linear",
      "description": {
        "fct-descr": "slope of the curve \ninitial value \n",
        "fct-module": "Synthesizer.SampleRateContext.Control",
        "fct-package": "synthesizer",
        "fct-signature": "q'-\u003e q'-\u003e T q q'-\u003e T q q' q",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-SampleRateContext-Control.html#linear",
        "fct-type": "unknown",
        "title": "linear"
      },
      "index": {
        "description": "slope of the curve initial value",
        "hierarchy": "Synthesizer SampleRateContext Control",
        "module": "Synthesizer.SampleRateContext.Control",
        "name": "linear",
        "normalized": "a-\u003ea-\u003eT b a-\u003eT b a b",
        "package": "synthesizer",
        "partial": "",
        "signature": "q'-\u003eq'-\u003eT q q'-\u003eT q q' q"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Control.html#v:mapExponential",
      "description": {
        "fct-descr": "range: one is mapped to \u003ctt\u003ecenter*range\u003c/tt\u003e, must be positive \ncenter: zero is mapped to \u003ctt\u003ecenter\u003c/tt\u003e \n",
        "fct-module": "Synthesizer.SampleRateContext.Control",
        "fct-package": "synthesizer",
        "fct-signature": "y-\u003e y'-\u003e T t t'-\u003e T y y y-\u003e T y y' y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-SampleRateContext-Control.html#mapExponential",
        "fct-type": "unknown",
        "title": "mapExponential"
      },
      "index": {
        "description": "range one is mapped to center range must be positive center zero is mapped to center",
        "hierarchy": "Synthesizer SampleRateContext Control",
        "module": "Synthesizer.SampleRateContext.Control",
        "name": "mapExponential",
        "normalized": "a-\u003eb-\u003eT c d-\u003eT a a a-\u003eT a b a",
        "package": "synthesizer",
        "partial": "Exponential",
        "signature": "y-\u003ey'-\u003eT t t'-\u003eT y y y-\u003eT y y' y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Control.html#v:mapLinear",
      "description": {
        "fct-descr": "range: one is mapped to \u003ctt\u003ecenter+range\u003c/tt\u003e \ncenter: zero is mapped to \u003ctt\u003ecenter\u003c/tt\u003e \n",
        "fct-module": "Synthesizer.SampleRateContext.Control",
        "fct-package": "synthesizer",
        "fct-signature": "y'-\u003e y'-\u003e T t t'-\u003e T y y' y-\u003e T y y' y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-SampleRateContext-Control.html#mapLinear",
        "fct-type": "unknown",
        "title": "mapLinear"
      },
      "index": {
        "description": "range one is mapped to center range center zero is mapped to center",
        "hierarchy": "Synthesizer SampleRateContext Control",
        "module": "Synthesizer.SampleRateContext.Control",
        "name": "mapLinear",
        "normalized": "a-\u003ea-\u003eT b c-\u003eT d a d-\u003eT d a d",
        "package": "synthesizer",
        "partial": "Linear",
        "signature": "y'-\u003ey'-\u003eT t t'-\u003eT y y' y-\u003eT y y' y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Control.html#v:piecewise",
      "description": {
        "fct-descr": "Since this function looks for the maximum node value,\nand since the signal parameter inference phase must be completed before signal processing,\ninfinite descriptions cannot be used here.\n",
        "fct-module": "Synthesizer.SampleRateContext.Control",
        "fct-package": "synthesizer",
        "fct-signature": "[ControlPiece q'] -\u003e T q q' -\u003e T q q' q",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-SampleRateContext-Control.html#piecewise",
        "fct-type": "unknown",
        "title": "piecewise"
      },
      "index": {
        "description": "Since this function looks for the maximum node value and since the signal parameter inference phase must be completed before signal processing infinite descriptions cannot be used here",
        "hierarchy": "Synthesizer SampleRateContext Control",
        "module": "Synthesizer.SampleRateContext.Control",
        "name": "piecewise",
        "normalized": "[ControlPiece a]-\u003eT b a-\u003eT b a b",
        "package": "synthesizer",
        "partial": "",
        "signature": "[ControlPiece q']-\u003eT q q'-\u003eT q q' q"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Control.html#v:piecewiseVolume",
      "description": {
        "fct-module": "Synthesizer.SampleRateContext.Control",
        "fct-package": "synthesizer",
        "fct-signature": "[ControlPiece q'] -\u003e q' -\u003e T q q' -\u003e T q q' q",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-SampleRateContext-Control.html#piecewiseVolume",
        "fct-type": "unknown",
        "title": "piecewiseVolume"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer SampleRateContext Control",
        "module": "Synthesizer.SampleRateContext.Control",
        "name": "piecewiseVolume",
        "normalized": "[ControlPiece a]-\u003ea-\u003eT b a-\u003eT b a b",
        "package": "synthesizer",
        "partial": "Volume",
        "signature": "[ControlPiece q']-\u003eq'-\u003eT q q'-\u003eT q q' q"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Control.html#v:|#",
      "description": {
        "fct-module": "Synthesizer.SampleRateContext.Control",
        "fct-package": "synthesizer",
        "fct-signature": "y -\u003e (ControlDist y, [ControlPiece y]) -\u003e [ControlPiece y]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Plain-Control.html#%7C%23",
        "fct-type": "unknown",
        "title": "|#"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer SampleRateContext Control",
        "module": "Synthesizer.SampleRateContext.Control",
        "name": "|#",
        "normalized": "a-\u003e(ControlDist a,[ControlPiece a])-\u003e[ControlPiece a]",
        "package": "synthesizer",
        "partial": "",
        "signature": "y-\u003e(ControlDist y,[ControlPiece y])-\u003e[ControlPiece y]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Cut.html#v:append",
      "description": {
        "fct-module": "Synthesizer.SampleRateContext.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "T t t' -\u003e T y y' yv -\u003e T y y' yv -\u003e T y y' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-SampleRateContext-Cut.html#append",
        "fct-type": "unknown",
        "title": "append"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer SampleRateContext Cut",
        "module": "Synthesizer.SampleRateContext.Cut",
        "name": "append",
        "normalized": "T a b-\u003eT c d e-\u003eT c d e-\u003eT c d e",
        "package": "synthesizer",
        "partial": "",
        "signature": "T t t'-\u003eT y y' yv-\u003eT y y' yv-\u003eT y y' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Cut.html#v:appendVolume",
      "description": {
        "fct-module": "Synthesizer.SampleRateContext.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "y' -\u003e T t t' -\u003e T y y' yv -\u003e T y y' yv -\u003e T y y' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-SampleRateContext-Cut.html#appendVolume",
        "fct-type": "unknown",
        "title": "appendVolume"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer SampleRateContext Cut",
        "module": "Synthesizer.SampleRateContext.Cut",
        "name": "appendVolume",
        "normalized": "a-\u003eT b c-\u003eT d a e-\u003eT d a e-\u003eT d a e",
        "package": "synthesizer",
        "partial": "Volume",
        "signature": "y'-\u003eT t t'-\u003eT y y' yv-\u003eT y y' yv-\u003eT y y' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Cut.html#v:arrange",
      "description": {
        "fct-descr": "Unit of the time values in the time ordered list. \nA list of pairs: (relative start time, signal part),\n                 The start time is relative\n                 to the start time of the previous event. \nThe mixed signal. \n",
        "fct-module": "Synthesizer.SampleRateContext.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "t'-\u003e T t t'-\u003e T t (T y y' yv)-\u003e T y y' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-SampleRateContext-Cut.html#arrange",
        "fct-type": "unknown",
        "title": "arrange"
      },
      "index": {
        "description": "Unit of the time values in the time ordered list list of pairs relative start time signal part The start time is relative to the start time of the previous event The mixed signal",
        "hierarchy": "Synthesizer SampleRateContext Cut",
        "module": "Synthesizer.SampleRateContext.Cut",
        "name": "arrange",
        "normalized": "a-\u003eT b a-\u003eT b(T c d e)-\u003eT c d e",
        "package": "synthesizer",
        "partial": "",
        "signature": "t'-\u003eT t t'-\u003eT t(T y y' yv)-\u003eT y y' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Cut.html#v:arrangeVolume",
      "description": {
        "fct-descr": "Output volume. \nUnit of the time values in the time ordered list. \nA list of pairs: (relative start time, signal part),\n                 The start time is relative\n                 to the start time of the previous event. \nThe mixed signal. \n",
        "fct-module": "Synthesizer.SampleRateContext.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "y'-\u003e t'-\u003e T t t'-\u003e T t (T y y' yv)-\u003e T y y' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-SampleRateContext-Cut.html#arrangeVolume",
        "fct-type": "unknown",
        "title": "arrangeVolume"
      },
      "index": {
        "description": "Output volume Unit of the time values in the time ordered list list of pairs relative start time signal part The start time is relative to the start time of the previous event The mixed signal",
        "hierarchy": "Synthesizer SampleRateContext Cut",
        "module": "Synthesizer.SampleRateContext.Cut",
        "name": "arrangeVolume",
        "normalized": "a-\u003eb-\u003eT c b-\u003eT c(T d a e)-\u003eT d a e",
        "package": "synthesizer",
        "partial": "Volume",
        "signature": "y'-\u003et'-\u003eT t t'-\u003eT t(T y y' yv)-\u003eT y y' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Cut.html#v:concat",
      "description": {
        "fct-descr": "Similar to \u003ctt\u003efoldr1 append\u003c/tt\u003e but more efficient and accurate,\nbecause it reduces the number of amplifications.\nDoes not work for infinite lists,\nbecause no maximum amplitude can be computed.\n",
        "fct-module": "Synthesizer.SampleRateContext.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "T t t' -\u003e [T y y' yv] -\u003e T y y' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-SampleRateContext-Cut.html#concat",
        "fct-type": "unknown",
        "title": "concat"
      },
      "index": {
        "description": "Similar to foldr1 append but more efficient and accurate because it reduces the number of amplifications Does not work for infinite lists because no maximum amplitude can be computed",
        "hierarchy": "Synthesizer SampleRateContext Cut",
        "module": "Synthesizer.SampleRateContext.Cut",
        "name": "concat",
        "normalized": "T a b-\u003e[T c d e]-\u003eT c d e",
        "package": "synthesizer",
        "partial": "",
        "signature": "T t t'-\u003e[T y y' yv]-\u003eT y y' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Cut.html#v:concatVolume",
      "description": {
        "fct-descr": "Give the output volume explicitly.\nDoes also work for infinite lists.\n",
        "fct-module": "Synthesizer.SampleRateContext.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "y' -\u003e T t t' -\u003e [T y y' yv] -\u003e T y y' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-SampleRateContext-Cut.html#concatVolume",
        "fct-type": "unknown",
        "title": "concatVolume"
      },
      "index": {
        "description": "Give the output volume explicitly Does also work for infinite lists",
        "hierarchy": "Synthesizer SampleRateContext Cut",
        "module": "Synthesizer.SampleRateContext.Cut",
        "name": "concatVolume",
        "normalized": "a-\u003eT b c-\u003e[T d a e]-\u003eT d a e",
        "package": "synthesizer",
        "partial": "Volume",
        "signature": "y'-\u003eT t t'-\u003e[T y y' yv]-\u003eT y y' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Cut.html#v:drop",
      "description": {
        "fct-module": "Synthesizer.SampleRateContext.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "t' -\u003e T t t' -\u003e T y y' yv -\u003e T y y' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-SampleRateContext-Cut.html#drop",
        "fct-type": "unknown",
        "title": "drop"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer SampleRateContext Cut",
        "module": "Synthesizer.SampleRateContext.Cut",
        "name": "drop",
        "normalized": "a-\u003eT b a-\u003eT c d e-\u003eT c d e",
        "package": "synthesizer",
        "partial": "",
        "signature": "t'-\u003eT t t'-\u003eT y y' yv-\u003eT y y' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Cut.html#v:splitAt",
      "description": {
        "fct-module": "Synthesizer.SampleRateContext.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "t' -\u003e T t t' -\u003e T y y' yv -\u003e (T y y' yv, T y y' yv)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-SampleRateContext-Cut.html#splitAt",
        "fct-type": "unknown",
        "title": "splitAt"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer SampleRateContext Cut",
        "module": "Synthesizer.SampleRateContext.Cut",
        "name": "splitAt",
        "normalized": "a-\u003eT b a-\u003eT c d e-\u003e(T c d e,T c d e)",
        "package": "synthesizer",
        "partial": "At",
        "signature": "t'-\u003eT t t'-\u003eT y y' yv-\u003e(T y y' yv,T y y' yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Cut.html#v:take",
      "description": {
        "fct-module": "Synthesizer.SampleRateContext.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "t' -\u003e T t t' -\u003e T y y' yv -\u003e T y y' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-SampleRateContext-Cut.html#take",
        "fct-type": "unknown",
        "title": "take"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer SampleRateContext Cut",
        "module": "Synthesizer.SampleRateContext.Cut",
        "name": "take",
        "normalized": "a-\u003eT b a-\u003eT c d e-\u003eT c d e",
        "package": "synthesizer",
        "partial": "",
        "signature": "t'-\u003eT t t'-\u003eT y y' yv-\u003eT y y' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Cut.html#v:takeUntilPause",
      "description": {
        "fct-module": "Synthesizer.SampleRateContext.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "y' -\u003e t' -\u003e T t t' -\u003e T y y' yv -\u003e T y y' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-SampleRateContext-Cut.html#takeUntilPause",
        "fct-type": "unknown",
        "title": "takeUntilPause"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer SampleRateContext Cut",
        "module": "Synthesizer.SampleRateContext.Cut",
        "name": "takeUntilPause",
        "normalized": "a-\u003eb-\u003eT c b-\u003eT d a e-\u003eT d a e",
        "package": "synthesizer",
        "partial": "Until Pause",
        "signature": "y'-\u003et'-\u003eT t t'-\u003eT y y' yv-\u003eT y y' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Cut.html#v:unzip",
      "description": {
        "fct-module": "Synthesizer.SampleRateContext.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "T t t' -\u003e T y y' (yv0, yv1) -\u003e (T y y' yv0, T y y' yv1)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-SampleRateContext-Cut.html#unzip",
        "fct-type": "unknown",
        "title": "unzip"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer SampleRateContext Cut",
        "module": "Synthesizer.SampleRateContext.Cut",
        "name": "unzip",
        "normalized": "T a b-\u003eT c d(e,e)-\u003e(T c d e,T c d e)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T t t'-\u003eT y y'(yv,yv)-\u003e(T y y' yv,T y y' yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Cut.html#v:unzip3",
      "description": {
        "fct-module": "Synthesizer.SampleRateContext.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "T t t' -\u003e T y y' (yv0, yv1, yv2) -\u003e (T y y' yv0, T y y' yv1, T y y' yv2)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-SampleRateContext-Cut.html#unzip3",
        "fct-type": "unknown",
        "title": "unzip3"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer SampleRateContext Cut",
        "module": "Synthesizer.SampleRateContext.Cut",
        "name": "unzip3",
        "normalized": "T a b-\u003eT c d(e,e,e)-\u003e(T c d e,T c d e,T c d e)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T t t'-\u003eT y y'(yv,yv,yv)-\u003e(T y y' yv,T y y' yv,T y y' yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Cut.html#v:zip",
      "description": {
        "fct-module": "Synthesizer.SampleRateContext.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "T t t' -\u003e T y y' yv0 -\u003e T y y' yv1 -\u003e T y y' (yv0, yv1)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-SampleRateContext-Cut.html#zip",
        "fct-type": "unknown",
        "title": "zip"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer SampleRateContext Cut",
        "module": "Synthesizer.SampleRateContext.Cut",
        "name": "zip",
        "normalized": "T a b-\u003eT c d e-\u003eT c d e-\u003eT c d(e,e)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T t t'-\u003eT y y' yv-\u003eT y y' yv-\u003eT y y'(yv,yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Cut.html#v:zip3",
      "description": {
        "fct-module": "Synthesizer.SampleRateContext.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "T t t' -\u003e T y y' yv0 -\u003e T y y' yv1 -\u003e T y y' yv2 -\u003e T y y' (yv0, yv1, yv2)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-SampleRateContext-Cut.html#zip3",
        "fct-type": "unknown",
        "title": "zip3"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer SampleRateContext Cut",
        "module": "Synthesizer.SampleRateContext.Cut",
        "name": "zip3",
        "normalized": "T a b-\u003eT c d e-\u003eT c d e-\u003eT c d e-\u003eT c d(e,e,e)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T t t'-\u003eT y y' yv-\u003eT y y' yv-\u003eT y y' yv-\u003eT y y'(yv,yv,yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Cut.html#v:zip3Volume",
      "description": {
        "fct-module": "Synthesizer.SampleRateContext.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "y' -\u003e T t t' -\u003e T y y' yv0 -\u003e T y y' yv1 -\u003e T y y' yv2 -\u003e T y y' (yv0, yv1, yv2)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-SampleRateContext-Cut.html#zip3Volume",
        "fct-type": "unknown",
        "title": "zip3Volume"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer SampleRateContext Cut",
        "module": "Synthesizer.SampleRateContext.Cut",
        "name": "zip3Volume",
        "normalized": "a-\u003eT b c-\u003eT d a e-\u003eT d a e-\u003eT d a e-\u003eT d a(e,e,e)",
        "package": "synthesizer",
        "partial": "Volume",
        "signature": "y'-\u003eT t t'-\u003eT y y' yv-\u003eT y y' yv-\u003eT y y' yv-\u003eT y y'(yv,yv,yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Cut.html#v:zipVolume",
      "description": {
        "fct-module": "Synthesizer.SampleRateContext.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "y' -\u003e T t t' -\u003e T y y' yv0 -\u003e T y y' yv1 -\u003e T y y' (yv0, yv1)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-SampleRateContext-Cut.html#zipVolume",
        "fct-type": "unknown",
        "title": "zipVolume"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer SampleRateContext Cut",
        "module": "Synthesizer.SampleRateContext.Cut",
        "name": "zipVolume",
        "normalized": "a-\u003eT b c-\u003eT d a e-\u003eT d a e-\u003eT d a(e,e)",
        "package": "synthesizer",
        "partial": "Volume",
        "signature": "y'-\u003eT t t'-\u003eT y y' yv-\u003eT y y' yv-\u003eT y y'(yv,yv)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Displacement.html#v:mix",
      "description": {
        "fct-descr": "Mix two signals.\n    In opposition to \u003ctt\u003e\u003ca\u003ezipWith\u003c/a\u003e\u003c/tt\u003e the result has the length of the longer signal. \n",
        "fct-module": "Synthesizer.SampleRateContext.Displacement",
        "fct-package": "synthesizer",
        "fct-signature": "T t t' -\u003e T y y' yv -\u003e T y y' yv -\u003e T y y' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-SampleRateContext-Displacement.html#mix",
        "fct-type": "unknown",
        "title": "mix"
      },
      "index": {
        "description": "Mix two signals In opposition to zipWith the result has the length of the longer signal",
        "hierarchy": "Synthesizer SampleRateContext Displacement",
        "module": "Synthesizer.SampleRateContext.Displacement",
        "name": "mix",
        "normalized": "T a b-\u003eT c d e-\u003eT c d e-\u003eT c d e",
        "package": "synthesizer",
        "partial": "",
        "signature": "T t t'-\u003eT y y' yv-\u003eT y y' yv-\u003eT y y' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Displacement.html#v:mixMulti",
      "description": {
        "fct-descr": "Mix one or more signals. \n",
        "fct-module": "Synthesizer.SampleRateContext.Displacement",
        "fct-package": "synthesizer",
        "fct-signature": "T t t' -\u003e [T y y' yv] -\u003e T y y' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-SampleRateContext-Displacement.html#mixMulti",
        "fct-type": "unknown",
        "title": "mixMulti"
      },
      "index": {
        "description": "Mix one or more signals",
        "hierarchy": "Synthesizer SampleRateContext Displacement",
        "module": "Synthesizer.SampleRateContext.Displacement",
        "name": "mixMulti",
        "normalized": "T a b-\u003e[T c d e]-\u003eT c d e",
        "package": "synthesizer",
        "partial": "Multi",
        "signature": "T t t'-\u003e[T y y' yv]-\u003eT y y' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Displacement.html#v:mixMultiVolume",
      "description": {
        "fct-module": "Synthesizer.SampleRateContext.Displacement",
        "fct-package": "synthesizer",
        "fct-signature": "y' -\u003e T t t' -\u003e [T y y' yv] -\u003e T y y' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-SampleRateContext-Displacement.html#mixMultiVolume",
        "fct-type": "unknown",
        "title": "mixMultiVolume"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer SampleRateContext Displacement",
        "module": "Synthesizer.SampleRateContext.Displacement",
        "name": "mixMultiVolume",
        "normalized": "a-\u003eT b c-\u003e[T d a e]-\u003eT d a e",
        "package": "synthesizer",
        "partial": "Multi Volume",
        "signature": "y'-\u003eT t t'-\u003e[T y y' yv]-\u003eT y y' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Displacement.html#v:mixVolume",
      "description": {
        "fct-module": "Synthesizer.SampleRateContext.Displacement",
        "fct-package": "synthesizer",
        "fct-signature": "y' -\u003e T t t' -\u003e T y y' yv -\u003e T y y' yv -\u003e T y y' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-SampleRateContext-Displacement.html#mixVolume",
        "fct-type": "unknown",
        "title": "mixVolume"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer SampleRateContext Displacement",
        "module": "Synthesizer.SampleRateContext.Displacement",
        "name": "mixVolume",
        "normalized": "a-\u003eT b c-\u003eT d a e-\u003eT d a e-\u003eT d a e",
        "package": "synthesizer",
        "partial": "Volume",
        "signature": "y'-\u003eT t t'-\u003eT y y' yv-\u003eT y y' yv-\u003eT y y' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Displacement.html#v:raise",
      "description": {
        "fct-descr": "Add a number to all of the signal values.\n    This is useful for adjusting the center of a modulation. \n",
        "fct-module": "Synthesizer.SampleRateContext.Displacement",
        "fct-package": "synthesizer",
        "fct-signature": "y' -\u003e yv -\u003e T t t' -\u003e T y y' yv -\u003e T y y' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-SampleRateContext-Displacement.html#raise",
        "fct-type": "unknown",
        "title": "raise"
      },
      "index": {
        "description": "Add number to all of the signal values This is useful for adjusting the center of modulation",
        "hierarchy": "Synthesizer SampleRateContext Displacement",
        "module": "Synthesizer.SampleRateContext.Displacement",
        "name": "raise",
        "normalized": "a-\u003eb-\u003eT c d-\u003eT e a b-\u003eT e a b",
        "package": "synthesizer",
        "partial": "",
        "signature": "y'-\u003eyv-\u003eT t t'-\u003eT y y' yv-\u003eT y y' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Filter.html#v:amplify",
      "description": {
        "fct-descr": "The amplification factor must be positive. \n",
        "fct-module": "Synthesizer.SampleRateContext.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "y' -\u003e T t t' -\u003e T y y' yv -\u003e T y y' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-SampleRateContext-Filter.html#amplify",
        "fct-type": "unknown",
        "title": "amplify"
      },
      "index": {
        "description": "The amplification factor must be positive",
        "hierarchy": "Synthesizer SampleRateContext Filter",
        "module": "Synthesizer.SampleRateContext.Filter",
        "name": "amplify",
        "normalized": "a-\u003eT b c-\u003eT d a e-\u003eT d a e",
        "package": "synthesizer",
        "partial": "",
        "signature": "y'-\u003eT t t'-\u003eT y y' yv-\u003eT y y' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Filter.html#v:comb",
      "description": {
        "fct-descr": "Infinitely many equi-delayed exponentially decaying echos. \n",
        "fct-module": "Synthesizer.SampleRateContext.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "t' -\u003e y -\u003e T t t' -\u003e T y y' yv -\u003e T y y' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-SampleRateContext-Filter.html#comb",
        "fct-type": "unknown",
        "title": "comb"
      },
      "index": {
        "description": "Infinitely many equi-delayed exponentially decaying echos",
        "hierarchy": "Synthesizer SampleRateContext Filter",
        "module": "Synthesizer.SampleRateContext.Filter",
        "name": "comb",
        "normalized": "a-\u003eb-\u003eT c a-\u003eT b d e-\u003eT b d e",
        "package": "synthesizer",
        "partial": "",
        "signature": "t'-\u003ey-\u003eT t t'-\u003eT y y' yv-\u003eT y y' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Filter.html#v:differentiate",
      "description": {
        "fct-module": "Synthesizer.SampleRateContext.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "T t q' -\u003e T y q' v -\u003e T y q' v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-SampleRateContext-Filter.html#differentiate",
        "fct-type": "unknown",
        "title": "differentiate"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer SampleRateContext Filter",
        "module": "Synthesizer.SampleRateContext.Filter",
        "name": "differentiate",
        "normalized": "T a b-\u003eT c b d-\u003eT c b d",
        "package": "synthesizer",
        "partial": "",
        "signature": "T t q'-\u003eT y q' v-\u003eT y q' v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Filter.html#v:envelope",
      "description": {
        "fct-module": "Synthesizer.SampleRateContext.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "T t t' -\u003e T y y' y0 -\u003e T y y' yv -\u003e T y y' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-SampleRateContext-Filter.html#envelope",
        "fct-type": "unknown",
        "title": "envelope"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer SampleRateContext Filter",
        "module": "Synthesizer.SampleRateContext.Filter",
        "name": "envelope",
        "normalized": "T a b-\u003eT c d c-\u003eT c d e-\u003eT c d e",
        "package": "synthesizer",
        "partial": "",
        "signature": "T t t'-\u003eT y y' y-\u003eT y y' yv-\u003eT y y' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Filter.html#v:integrate",
      "description": {
        "fct-module": "Synthesizer.SampleRateContext.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "T t q' -\u003e T y q' v -\u003e T y q' v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-SampleRateContext-Filter.html#integrate",
        "fct-type": "unknown",
        "title": "integrate"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer SampleRateContext Filter",
        "module": "Synthesizer.SampleRateContext.Filter",
        "name": "integrate",
        "normalized": "T a b-\u003eT c b d-\u003eT c b d",
        "package": "synthesizer",
        "partial": "",
        "signature": "T t q'-\u003eT y q' v-\u003eT y q' v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Filter.html#v:negate",
      "description": {
        "fct-module": "Synthesizer.SampleRateContext.Filter",
        "fct-package": "synthesizer",
        "fct-signature": "T t t' -\u003e T y y' yv -\u003e T y y' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-SampleRateContext-Filter.html#negate",
        "fct-type": "unknown",
        "title": "negate"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer SampleRateContext Filter",
        "module": "Synthesizer.SampleRateContext.Filter",
        "name": "negate",
        "normalized": "T a b-\u003eT c d e-\u003eT c d e",
        "package": "synthesizer",
        "partial": "",
        "signature": "T t t'-\u003eT y y' yv-\u003eT y y' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Noise.html#v:randomPeeks",
      "description": {
        "fct-descr": "momentary densities (frequency),\n                           \u003ctt\u003ep\u003c/tt\u003e means that there is about one peak\n                           in the time range of \u003ctt\u003e1/p\u003c/tt\u003e. \nEvery occurence of \u003ctt\u003e\u003ca\u003eTrue\u003c/a\u003e\u003c/tt\u003e represents a peak. \n",
        "fct-module": "Synthesizer.SampleRateContext.Noise",
        "fct-package": "synthesizer",
        "fct-signature": "T q q'-\u003e T q q' q-\u003e [Bool]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-SampleRateContext-Noise.html#randomPeeks",
        "fct-type": "unknown",
        "title": "randomPeeks"
      },
      "index": {
        "description": "momentary densities frequency means that there is about one peak in the time range of Every occurence of True represents peak",
        "hierarchy": "Synthesizer SampleRateContext Noise",
        "module": "Synthesizer.SampleRateContext.Noise",
        "name": "randomPeeks",
        "normalized": "T a b-\u003eT a b a-\u003e[Bool]",
        "package": "synthesizer",
        "partial": "Peeks",
        "signature": "T q q'-\u003eT q q' q-\u003e[Bool]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Noise.html#v:randomPeeksGen",
      "description": {
        "fct-descr": "random generator, can be used to choose a seed \nmomentary densities (frequency),\n                           \u003ctt\u003ep\u003c/tt\u003e means that there is about one peak\n                           in the time range of \u003ctt\u003e1/p\u003c/tt\u003e. \nEvery occurence of \u003ctt\u003e\u003ca\u003eTrue\u003c/a\u003e\u003c/tt\u003e represents a peak. \n",
        "fct-module": "Synthesizer.SampleRateContext.Noise",
        "fct-package": "synthesizer",
        "fct-signature": "g-\u003e T q q'-\u003e T q q' q-\u003e [Bool]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-SampleRateContext-Noise.html#randomPeeksGen",
        "fct-type": "unknown",
        "title": "randomPeeksGen"
      },
      "index": {
        "description": "random generator can be used to choose seed momentary densities frequency means that there is about one peak in the time range of Every occurence of True represents peak",
        "hierarchy": "Synthesizer SampleRateContext Noise",
        "module": "Synthesizer.SampleRateContext.Noise",
        "name": "randomPeeksGen",
        "normalized": "a-\u003eT b c-\u003eT b c b-\u003e[Bool]",
        "package": "synthesizer",
        "partial": "Peeks Gen",
        "signature": "g-\u003eT q q'-\u003eT q q' q-\u003e[Bool]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Noise.html#v:white",
      "description": {
        "fct-descr": "width of the frequency band \nvolume caused by the given frequency band \nnoise \n",
        "fct-module": "Synthesizer.SampleRateContext.Noise",
        "fct-package": "synthesizer",
        "fct-signature": "q'-\u003e q'-\u003e T t q'-\u003e T y q' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-SampleRateContext-Noise.html#white",
        "fct-type": "unknown",
        "title": "white"
      },
      "index": {
        "description": "width of the frequency band volume caused by the given frequency band noise",
        "hierarchy": "Synthesizer SampleRateContext Noise",
        "module": "Synthesizer.SampleRateContext.Noise",
        "name": "white",
        "normalized": "a-\u003ea-\u003eT b a-\u003eT c a d",
        "package": "synthesizer",
        "partial": "",
        "signature": "q'-\u003eq'-\u003eT t q'-\u003eT y q' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Noise.html#v:whiteBandEnergy",
      "description": {
        "fct-descr": "energy per frequency band \nnoise \n",
        "fct-module": "Synthesizer.SampleRateContext.Noise",
        "fct-package": "synthesizer",
        "fct-signature": "q'-\u003e T t q'-\u003e T y q' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-SampleRateContext-Noise.html#whiteBandEnergy",
        "fct-type": "unknown",
        "title": "whiteBandEnergy"
      },
      "index": {
        "description": "energy per frequency band noise",
        "hierarchy": "Synthesizer SampleRateContext Noise",
        "module": "Synthesizer.SampleRateContext.Noise",
        "name": "whiteBandEnergy",
        "normalized": "a-\u003eT b a-\u003eT c a d",
        "package": "synthesizer",
        "partial": "Band Energy",
        "signature": "q'-\u003eT t q'-\u003eT y q' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Noise.html#v:whiteBandEnergyGen",
      "description": {
        "fct-descr": "random generator, can be used to choose a seed \nenergy per frequency band \nnoise \n",
        "fct-module": "Synthesizer.SampleRateContext.Noise",
        "fct-package": "synthesizer",
        "fct-signature": "g-\u003e q'-\u003e T t q'-\u003e T y q' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-SampleRateContext-Noise.html#whiteBandEnergyGen",
        "fct-type": "unknown",
        "title": "whiteBandEnergyGen"
      },
      "index": {
        "description": "random generator can be used to choose seed energy per frequency band noise",
        "hierarchy": "Synthesizer SampleRateContext Noise",
        "module": "Synthesizer.SampleRateContext.Noise",
        "name": "whiteBandEnergyGen",
        "normalized": "a-\u003eb-\u003eT c b-\u003eT d b e",
        "package": "synthesizer",
        "partial": "Band Energy Gen",
        "signature": "g-\u003eq'-\u003eT t q'-\u003eT y q' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Noise.html#v:whiteGen",
      "description": {
        "fct-descr": "random generator, can be used to choose a seed \nwidth of the frequency band \nvolume caused by the given frequency band \nnoise \n",
        "fct-module": "Synthesizer.SampleRateContext.Noise",
        "fct-package": "synthesizer",
        "fct-signature": "g-\u003e q'-\u003e q'-\u003e T t q'-\u003e T y q' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-SampleRateContext-Noise.html#whiteGen",
        "fct-type": "unknown",
        "title": "whiteGen"
      },
      "index": {
        "description": "random generator can be used to choose seed width of the frequency band volume caused by the given frequency band noise",
        "hierarchy": "Synthesizer SampleRateContext Noise",
        "module": "Synthesizer.SampleRateContext.Noise",
        "name": "whiteGen",
        "normalized": "a-\u003eb-\u003eb-\u003eT c b-\u003eT d b e",
        "package": "synthesizer",
        "partial": "Gen",
        "signature": "g-\u003eq'-\u003eq'-\u003eT t q'-\u003eT y q' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Oscillator.html#v:freqMod",
      "description": {
        "fct-descr": "waveform \namplitude \nstart phase from the range [0,1] \nfrequency control \n",
        "fct-module": "Synthesizer.SampleRateContext.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "T t yv-\u003e y'-\u003e t-\u003e T t t'-\u003e T t t' t-\u003e T y y' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-SampleRateContext-Oscillator.html#freqMod",
        "fct-type": "unknown",
        "title": "freqMod"
      },
      "index": {
        "description": "waveform amplitude start phase from the range frequency control",
        "hierarchy": "Synthesizer SampleRateContext Oscillator",
        "module": "Synthesizer.SampleRateContext.Oscillator",
        "name": "freqMod",
        "normalized": "T a b-\u003ec-\u003ea-\u003eT a d-\u003eT a d a-\u003eT e c b",
        "package": "synthesizer",
        "partial": "Mod",
        "signature": "T t yv-\u003ey'-\u003et-\u003eT t t'-\u003eT t t' t-\u003eT y y' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Oscillator.html#v:phaseFreqMod",
      "description": {
        "fct-descr": "waveform \namplitude \nphase control \nfrequency control \n",
        "fct-module": "Synthesizer.SampleRateContext.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "T t yv-\u003e y'-\u003e T t t'-\u003e T t t t-\u003e T t t' t-\u003e T y y' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-SampleRateContext-Oscillator.html#phaseFreqMod",
        "fct-type": "unknown",
        "title": "phaseFreqMod"
      },
      "index": {
        "description": "waveform amplitude phase control frequency control",
        "hierarchy": "Synthesizer SampleRateContext Oscillator",
        "module": "Synthesizer.SampleRateContext.Oscillator",
        "name": "phaseFreqMod",
        "normalized": "T a b-\u003ec-\u003eT a d-\u003eT a a a-\u003eT a d a-\u003eT e c b",
        "package": "synthesizer",
        "partial": "Freq Mod",
        "signature": "T t yv-\u003ey'-\u003eT t t'-\u003eT t t t-\u003eT t t' t-\u003eT y y' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Oscillator.html#v:phaseMod",
      "description": {
        "fct-descr": "waveform \namplitude \nfrequency control \nphase modulation, phases must have no unit and\n                          are from range [0,1] \n",
        "fct-module": "Synthesizer.SampleRateContext.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "T t yv-\u003e y'-\u003e t'-\u003e T t t'-\u003e T t t t-\u003e T y y' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-SampleRateContext-Oscillator.html#phaseMod",
        "fct-type": "unknown",
        "title": "phaseMod"
      },
      "index": {
        "description": "waveform amplitude frequency control phase modulation phases must have no unit and are from range",
        "hierarchy": "Synthesizer SampleRateContext Oscillator",
        "module": "Synthesizer.SampleRateContext.Oscillator",
        "name": "phaseMod",
        "normalized": "T a b-\u003ec-\u003ed-\u003eT a d-\u003eT a a a-\u003eT e c b",
        "package": "synthesizer",
        "partial": "Mod",
        "signature": "T t yv-\u003ey'-\u003et'-\u003eT t t'-\u003eT t t t-\u003eT y y' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Oscillator.html#v:static",
      "description": {
        "fct-descr": "waveform \namplitude \nstart phase from the range [0,1] \nfrequency \n",
        "fct-module": "Synthesizer.SampleRateContext.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "T t yv-\u003e y'-\u003e t-\u003e t'-\u003e T t t'-\u003e T y y' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-SampleRateContext-Oscillator.html#static",
        "fct-type": "unknown",
        "title": "static"
      },
      "index": {
        "description": "waveform amplitude start phase from the range frequency",
        "hierarchy": "Synthesizer SampleRateContext Oscillator",
        "module": "Synthesizer.SampleRateContext.Oscillator",
        "name": "static",
        "normalized": "T a b-\u003ec-\u003ea-\u003ed-\u003eT a d-\u003eT e c b",
        "package": "synthesizer",
        "partial": "",
        "signature": "T t yv-\u003ey'-\u003et-\u003et'-\u003eT t t'-\u003eT y y' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Play.html#v:toInt16",
      "description": {
        "fct-module": "Synthesizer.SampleRateContext.Play",
        "fct-package": "synthesizer",
        "fct-signature": "t' -\u003e y' -\u003e t' -\u003e (T t t' -\u003e T y y' yv) -\u003e IO ExitCode",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-SampleRateContext-Play.html#toInt16",
        "fct-type": "unknown",
        "title": "toInt16"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer SampleRateContext Play",
        "module": "Synthesizer.SampleRateContext.Play",
        "name": "toInt16",
        "normalized": "a-\u003eb-\u003ea-\u003e(T c a-\u003eT d b e)-\u003eIO ExitCode",
        "package": "synthesizer",
        "partial": "Int",
        "signature": "t'-\u003ey'-\u003et'-\u003e(T t t'-\u003eT y y' yv)-\u003eIO ExitCode"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Rate.html#t:T",
      "description": {
        "fct-module": "Synthesizer.SampleRateContext.Rate",
        "fct-package": "synthesizer",
        "fct-signature": "newtype",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-SampleRateContext-Rate.html#T",
        "fct-type": "unknown",
        "title": "T"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer SampleRateContext Rate",
        "module": "Synthesizer.SampleRateContext.Rate",
        "name": "T",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Rate.html#v:$#",
      "description": {
        "fct-module": "Synthesizer.SampleRateContext.Rate",
        "fct-package": "synthesizer",
        "fct-signature": "f (a -\u003e b) -\u003e a -\u003e f b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-ApplicativeUtility.html#%24%23",
        "fct-type": "unknown",
        "title": "$#"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer SampleRateContext Rate",
        "module": "Synthesizer.SampleRateContext.Rate",
        "name": "$#",
        "normalized": "a(b-\u003ec)-\u003eb-\u003ea c",
        "package": "synthesizer",
        "partial": "",
        "signature": "f(a-\u003eb)-\u003ea-\u003ef b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Rate.html#v:$:",
      "description": {
        "fct-descr": "This corresponds to \u003ctt\u003e\u003ca\u003e\u003c*\u003e\u003c/a\u003e\u003c/tt\u003e\n",
        "fct-module": "Synthesizer.SampleRateContext.Rate",
        "fct-package": "synthesizer",
        "fct-signature": "f (a -\u003e b) -\u003e f a -\u003e f b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-ApplicativeUtility.html#%24%3A",
        "fct-type": "unknown",
        "title": "$:"
      },
      "index": {
        "description": "This corresponds to",
        "hierarchy": "Synthesizer SampleRateContext Rate",
        "module": "Synthesizer.SampleRateContext.Rate",
        "name": "$:",
        "normalized": "a(b-\u003ec)-\u003ea b-\u003ea c",
        "package": "synthesizer",
        "partial": "",
        "signature": "f(a-\u003eb)-\u003ef a-\u003ef b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Rate.html#v:$::",
      "description": {
        "fct-descr": "Instead of \u003ctt\u003emixMulti $:: map f xs\u003c/tt\u003e\nthe caller should write \u003ctt\u003emixMulti $: mapM f xs\u003c/tt\u003e\nin order to save the user from learning another infix operator.\n",
        "fct-module": "Synthesizer.SampleRateContext.Rate",
        "fct-package": "synthesizer",
        "fct-signature": "f (t a -\u003e b) -\u003e t (f a) -\u003e f b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-ApplicativeUtility.html#%24%3A%3A",
        "fct-type": "unknown",
        "title": "$::"
      },
      "index": {
        "description": "Instead of mixMulti map xs the caller should write mixMulti mapM xs in order to save the user from learning another infix operator",
        "hierarchy": "Synthesizer SampleRateContext Rate",
        "module": "Synthesizer.SampleRateContext.Rate",
        "name": "$::",
        "normalized": "a(b c-\u003ed)-\u003eb(a c)-\u003ea d",
        "package": "synthesizer",
        "partial": "",
        "signature": "f(t a-\u003eb)-\u003et(f a)-\u003ef b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Rate.html#v:$^",
      "description": {
        "fct-module": "Synthesizer.SampleRateContext.Rate",
        "fct-package": "synthesizer",
        "fct-signature": "(a -\u003e b) -\u003e f a -\u003e f b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-ApplicativeUtility.html#%24%5E",
        "fct-type": "unknown",
        "title": "$^"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer SampleRateContext Rate",
        "module": "Synthesizer.SampleRateContext.Rate",
        "name": "$^",
        "normalized": "(a-\u003eb)-\u003ec a-\u003ec b",
        "package": "synthesizer",
        "partial": "",
        "signature": "(a-\u003eb)-\u003ef a-\u003ef b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Rate.html#v:.:",
      "description": {
        "fct-module": "Synthesizer.SampleRateContext.Rate",
        "fct-package": "synthesizer",
        "fct-signature": "f (b -\u003e c) -\u003e f (a -\u003e b) -\u003e f (a -\u003e c)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-ApplicativeUtility.html#.%3A",
        "fct-type": "unknown",
        "title": ".:"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer SampleRateContext Rate",
        "module": "Synthesizer.SampleRateContext.Rate",
        "name": ".:",
        "normalized": "a(b-\u003ec)-\u003ea(d-\u003eb)-\u003ea(d-\u003ec)",
        "package": "synthesizer",
        "partial": "",
        "signature": "f(b-\u003ec)-\u003ef(a-\u003eb)-\u003ef(a-\u003ec)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Rate.html#v:.^",
      "description": {
        "fct-module": "Synthesizer.SampleRateContext.Rate",
        "fct-package": "synthesizer",
        "fct-signature": "(b -\u003e c) -\u003e f (a -\u003e b) -\u003e f (a -\u003e c)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-ApplicativeUtility.html#.%5E",
        "fct-type": "unknown",
        "title": ".^"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer SampleRateContext Rate",
        "module": "Synthesizer.SampleRateContext.Rate",
        "name": ".^",
        "normalized": "(a-\u003eb)-\u003ec(d-\u003ea)-\u003ec(d-\u003eb)",
        "package": "synthesizer",
        "partial": "",
        "signature": "(b-\u003ec)-\u003ef(a-\u003eb)-\u003ef(a-\u003ec)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Rate.html#v:fromNumber",
      "description": {
        "fct-module": "Synthesizer.SampleRateContext.Rate",
        "fct-package": "synthesizer",
        "fct-signature": "t' -\u003e T t t'",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-SampleRateContext-Rate.html#fromNumber",
        "fct-type": "unknown",
        "title": "fromNumber"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer SampleRateContext Rate",
        "module": "Synthesizer.SampleRateContext.Rate",
        "name": "fromNumber",
        "normalized": "a-\u003eT b a",
        "package": "synthesizer",
        "partial": "Number",
        "signature": "t'-\u003eT t t'"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Rate.html#v:liftP",
      "description": {
        "fct-descr": "Our signal processors have types like \u003ctt\u003ef (a -\u003e b -\u003e c)\u003c/tt\u003e.\nThey could also have the type \u003ctt\u003ea -\u003e b -\u003e f c\u003c/tt\u003e\nor \u003ctt\u003ef a -\u003e f b -\u003e f c\u003c/tt\u003e.\nWe did not choose the last variant for reduction of redundancy in type signatures,\nand we did not choose the second variant for easy composition of processors.\nHowever the forms are freely convertible,\nand if you prefer the last one because you do not want to sprinkle '($:)' in your code,\nthen you may want to convert the processors using the following functions,\nthat can be defined purely in the \u003ctt\u003e\u003ca\u003eApplicative\u003c/a\u003e\u003c/tt\u003e class.\n",
        "fct-module": "Synthesizer.SampleRateContext.Rate",
        "fct-package": "synthesizer",
        "fct-signature": "f (a -\u003e b) -\u003e f a -\u003e f b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-ApplicativeUtility.html#liftP",
        "fct-type": "unknown",
        "title": "liftP"
      },
      "index": {
        "description": "Our signal processors have types like They could also have the type or We did not choose the last variant for reduction of redundancy in type signatures and we did not choose the second variant for easy composition of processors However the forms are freely convertible and if you prefer the last one because you do not want to sprinkle in your code then you may want to convert the processors using the following functions that can be defined purely in the Applicative class",
        "hierarchy": "Synthesizer SampleRateContext Rate",
        "module": "Synthesizer.SampleRateContext.Rate",
        "name": "liftP",
        "normalized": "a(b-\u003ec)-\u003ea b-\u003ea c",
        "package": "synthesizer",
        "partial": "",
        "signature": "f(a-\u003eb)-\u003ef a-\u003ef b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Rate.html#v:liftP2",
      "description": {
        "fct-module": "Synthesizer.SampleRateContext.Rate",
        "fct-package": "synthesizer",
        "fct-signature": "f (a -\u003e b -\u003e c) -\u003e f a -\u003e f b -\u003e f c",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-ApplicativeUtility.html#liftP2",
        "fct-type": "unknown",
        "title": "liftP2"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer SampleRateContext Rate",
        "module": "Synthesizer.SampleRateContext.Rate",
        "name": "liftP2",
        "normalized": "a(b-\u003ec-\u003ed)-\u003ea b-\u003ea c-\u003ea d",
        "package": "synthesizer",
        "partial": "",
        "signature": "f(a-\u003eb-\u003ec)-\u003ef a-\u003ef b-\u003ef c"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Rate.html#v:liftP3",
      "description": {
        "fct-module": "Synthesizer.SampleRateContext.Rate",
        "fct-package": "synthesizer",
        "fct-signature": "f (a -\u003e b -\u003e c -\u003e d) -\u003e f a -\u003e f b -\u003e f c -\u003e f d",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-ApplicativeUtility.html#liftP3",
        "fct-type": "unknown",
        "title": "liftP3"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer SampleRateContext Rate",
        "module": "Synthesizer.SampleRateContext.Rate",
        "name": "liftP3",
        "normalized": "a(b-\u003ec-\u003ed-\u003ee)-\u003ea b-\u003ea c-\u003ea d-\u003ea e",
        "package": "synthesizer",
        "partial": "",
        "signature": "f(a-\u003eb-\u003ec-\u003ed)-\u003ef a-\u003ef b-\u003ef c-\u003ef d"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Rate.html#v:liftP4",
      "description": {
        "fct-module": "Synthesizer.SampleRateContext.Rate",
        "fct-package": "synthesizer",
        "fct-signature": "f (a -\u003e b -\u003e c -\u003e d -\u003e e) -\u003e f a -\u003e f b -\u003e f c -\u003e f d -\u003e f e",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-ApplicativeUtility.html#liftP4",
        "fct-type": "unknown",
        "title": "liftP4"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer SampleRateContext Rate",
        "module": "Synthesizer.SampleRateContext.Rate",
        "name": "liftP4",
        "normalized": "a(b-\u003ec-\u003ed-\u003ee-\u003ef)-\u003ea b-\u003ea c-\u003ea d-\u003ea e-\u003ea f",
        "package": "synthesizer",
        "partial": "",
        "signature": "f(a-\u003eb-\u003ec-\u003ed-\u003ee)-\u003ef a-\u003ef b-\u003ef c-\u003ef d-\u003ef e"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Rate.html#v:loop",
      "description": {
        "fct-descr": "process chain that shall be looped \n",
        "fct-module": "Synthesizer.SampleRateContext.Rate",
        "fct-package": "synthesizer",
        "fct-signature": "f (a -\u003e a)-\u003e f a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-ApplicativeUtility.html#loop",
        "fct-type": "unknown",
        "title": "loop"
      },
      "index": {
        "description": "process chain that shall be looped",
        "hierarchy": "Synthesizer SampleRateContext Rate",
        "module": "Synthesizer.SampleRateContext.Rate",
        "name": "loop",
        "normalized": "a(b-\u003eb)-\u003ea b",
        "package": "synthesizer",
        "partial": "",
        "signature": "f(a-\u003ea)-\u003ef a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Rate.html#v:pure",
      "description": {
        "fct-module": "Synthesizer.SampleRateContext.Rate",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e T t t' -\u003e a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-SampleRateContext-Rate.html#pure",
        "fct-type": "unknown",
        "title": "pure"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer SampleRateContext Rate",
        "module": "Synthesizer.SampleRateContext.Rate",
        "name": "pure",
        "normalized": "a-\u003eT b c-\u003ea",
        "package": "synthesizer",
        "partial": "",
        "signature": "a-\u003eT t t'-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Rate.html#v:toNumber",
      "description": {
        "fct-module": "Synthesizer.SampleRateContext.Rate",
        "fct-package": "synthesizer",
        "fct-signature": "T t t' -\u003e t'",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-SampleRateContext-Rate.html#toNumber",
        "fct-type": "unknown",
        "title": "toNumber"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer SampleRateContext Rate",
        "module": "Synthesizer.SampleRateContext.Rate",
        "name": "toNumber",
        "normalized": "T a b-\u003eb",
        "package": "synthesizer",
        "partial": "Number",
        "signature": "T t t'-\u003et'"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Signal.html#t:T",
      "description": {
        "fct-module": "Synthesizer.SampleRateContext.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "data",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Amplitude-Signal.html#T",
        "fct-type": "unknown",
        "title": "T"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer SampleRateContext Signal",
        "module": "Synthesizer.SampleRateContext.Signal",
        "name": "T",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Signal.html#v:$-",
      "description": {
        "fct-descr": "Take a scalar argument where a process expects a signal.\nOnly possible for non-negative values so far.\n",
        "fct-module": "Synthesizer.SampleRateContext.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(T t t' -\u003e T y y' y -\u003e a) -\u003e y' -\u003e T t t' -\u003e a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-SampleRateContext-Signal.html#%24-",
        "fct-type": "unknown",
        "title": "$-"
      },
      "index": {
        "description": "Take scalar argument where process expects signal Only possible for non-negative values so far",
        "hierarchy": "Synthesizer SampleRateContext Signal",
        "module": "Synthesizer.SampleRateContext.Signal",
        "name": "$-",
        "normalized": "(T a b-\u003eT c d c-\u003ee)-\u003ed-\u003eT a b-\u003ee",
        "package": "synthesizer",
        "partial": "",
        "signature": "(T t t'-\u003eT y y' y-\u003ea)-\u003ey'-\u003eT t t'-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Signal.html#v:replaceAmplitude",
      "description": {
        "fct-module": "Synthesizer.SampleRateContext.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "y1' -\u003e T y y0' yv -\u003e T y y1' yv",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Amplitude-Signal.html#replaceAmplitude",
        "fct-type": "unknown",
        "title": "replaceAmplitude"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer SampleRateContext Signal",
        "module": "Synthesizer.SampleRateContext.Signal",
        "name": "replaceAmplitude",
        "normalized": "a-\u003eT a a b-\u003eT a a b",
        "package": "synthesizer",
        "partial": "Amplitude",
        "signature": "y-\u003eT y y yv-\u003eT y y yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Signal.html#v:replaceSamples",
      "description": {
        "fct-module": "Synthesizer.SampleRateContext.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "[yv1] -\u003e T y y' yv0 -\u003e T y y' yv1",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Amplitude-Signal.html#replaceSamples",
        "fct-type": "unknown",
        "title": "replaceSamples"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer SampleRateContext Signal",
        "module": "Synthesizer.SampleRateContext.Signal",
        "name": "replaceSamples",
        "normalized": "[a]-\u003eT b c a-\u003eT b c a",
        "package": "synthesizer",
        "partial": "Samples",
        "signature": "[yv]-\u003eT y y' yv-\u003eT y y' yv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Signal.html#v:scalarSamples",
      "description": {
        "fct-module": "Synthesizer.SampleRateContext.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(y' -\u003e y) -\u003e T y y' y -\u003e [y]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Amplitude-Signal.html#scalarSamples",
        "fct-type": "unknown",
        "title": "scalarSamples"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer SampleRateContext Signal",
        "module": "Synthesizer.SampleRateContext.Signal",
        "name": "scalarSamples",
        "normalized": "(a-\u003eb)-\u003eT b a b-\u003e[b]",
        "package": "synthesizer",
        "partial": "Samples",
        "signature": "(y'-\u003ey)-\u003eT y y' y-\u003e[y]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Signal.html#v:toAmplitudeScalar",
      "description": {
        "fct-module": "Synthesizer.SampleRateContext.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T y y' yv -\u003e y' -\u003e y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Amplitude-Signal.html#toAmplitudeScalar",
        "fct-type": "unknown",
        "title": "toAmplitudeScalar"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer SampleRateContext Signal",
        "module": "Synthesizer.SampleRateContext.Signal",
        "name": "toAmplitudeScalar",
        "normalized": "T a b c-\u003eb-\u003ea",
        "package": "synthesizer",
        "partial": "Amplitude Scalar",
        "signature": "T y y' yv-\u003ey'-\u003ey"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Signal.html#v:toFrequencyScalar",
      "description": {
        "fct-module": "Synthesizer.SampleRateContext.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T t t' -\u003e t' -\u003e t",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-SampleRateContext-Signal.html#toFrequencyScalar",
        "fct-type": "unknown",
        "title": "toFrequencyScalar"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer SampleRateContext Signal",
        "module": "Synthesizer.SampleRateContext.Signal",
        "name": "toFrequencyScalar",
        "normalized": "T a b-\u003eb-\u003ea",
        "package": "synthesizer",
        "partial": "Frequency Scalar",
        "signature": "T t t'-\u003et'-\u003et"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Signal.html#v:toGradientScalar",
      "description": {
        "fct-module": "Synthesizer.SampleRateContext.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "q' -\u003e T q q' -\u003e q' -\u003e q",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-SampleRateContext-Signal.html#toGradientScalar",
        "fct-type": "unknown",
        "title": "toGradientScalar"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer SampleRateContext Signal",
        "module": "Synthesizer.SampleRateContext.Signal",
        "name": "toGradientScalar",
        "normalized": "a-\u003eT b a-\u003ea-\u003eb",
        "package": "synthesizer",
        "partial": "Gradient Scalar",
        "signature": "q'-\u003eT q q'-\u003eq'-\u003eq"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Signal.html#v:toTimeScalar",
      "description": {
        "fct-module": "Synthesizer.SampleRateContext.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T t t' -\u003e t' -\u003e t",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-SampleRateContext-Signal.html#toTimeScalar",
        "fct-type": "unknown",
        "title": "toTimeScalar"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer SampleRateContext Signal",
        "module": "Synthesizer.SampleRateContext.Signal",
        "name": "toTimeScalar",
        "normalized": "T a b-\u003eb-\u003ea",
        "package": "synthesizer",
        "partial": "Time Scalar",
        "signature": "T t t'-\u003et'-\u003et"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-SampleRateContext-Signal.html#v:vectorSamples",
      "description": {
        "fct-module": "Synthesizer.SampleRateContext.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(y' -\u003e y) -\u003e T y y' yv -\u003e [yv]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Amplitude-Signal.html#vectorSamples",
        "fct-type": "unknown",
        "title": "vectorSamples"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer SampleRateContext Signal",
        "module": "Synthesizer.SampleRateContext.Signal",
        "name": "vectorSamples",
        "normalized": "(a-\u003eb)-\u003eT b a c-\u003e[c]",
        "package": "synthesizer",
        "partial": "Samples",
        "signature": "(y'-\u003ey)-\u003eT y y' yv-\u003e[yv]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Analysis.html#v:attachOne",
      "description": {
        "fct-module": "Synthesizer.State.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "T i -\u003e [(i, Int)]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Analysis.html#attachOne",
        "fct-type": "unknown",
        "title": "attachOne"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Analysis",
        "module": "Synthesizer.State.Analysis",
        "name": "attachOne",
        "normalized": "T a-\u003e[(a,Int)]",
        "package": "synthesizer",
        "partial": "One",
        "signature": "T i-\u003e[(i,Int)]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Analysis.html#v:average",
      "description": {
        "fct-module": "Synthesizer.State.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "T y -\u003e y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Analysis.html#average",
        "fct-type": "unknown",
        "title": "average"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Analysis",
        "module": "Synthesizer.State.Analysis",
        "name": "average",
        "normalized": "T a-\u003ea",
        "package": "synthesizer",
        "partial": "",
        "signature": "T y-\u003ey"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Analysis.html#v:averageRecompute",
      "description": {
        "fct-module": "Synthesizer.State.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "T y -\u003e y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Analysis.html#averageRecompute",
        "fct-type": "unknown",
        "title": "averageRecompute"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Analysis",
        "module": "Synthesizer.State.Analysis",
        "name": "averageRecompute",
        "normalized": "T a-\u003ea",
        "package": "synthesizer",
        "partial": "Recompute",
        "signature": "T y-\u003ey"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Analysis.html#v:bounds",
      "description": {
        "fct-descr": "Compute minimum and maximum value of the stream the efficient way.\nInput list must be non-empty and finite.\n",
        "fct-module": "Synthesizer.State.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "T y -\u003e (y, y)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Analysis.html#bounds",
        "fct-type": "unknown",
        "title": "bounds"
      },
      "index": {
        "description": "Compute minimum and maximum value of the stream the efficient way Input list must be non-empty and finite",
        "hierarchy": "Synthesizer State Analysis",
        "module": "Synthesizer.State.Analysis",
        "name": "bounds",
        "normalized": "T a-\u003e(a,a)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T y-\u003e(y,y)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Analysis.html#v:centroid",
      "description": {
        "fct-descr": "\u003ctt\u003e\u003ca\u003edirectCurrentOffset\u003c/a\u003e\u003c/tt\u003e must be non-zero.\n",
        "fct-module": "Synthesizer.State.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "T y -\u003e y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Analysis.html#centroid",
        "fct-type": "unknown",
        "title": "centroid"
      },
      "index": {
        "description": "directCurrentOffset must be non-zero",
        "hierarchy": "Synthesizer State Analysis",
        "module": "Synthesizer.State.Analysis",
        "name": "centroid",
        "normalized": "T a-\u003ea",
        "package": "synthesizer",
        "partial": "",
        "signature": "T y-\u003ey"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Analysis.html#v:centroidRecompute",
      "description": {
        "fct-module": "Synthesizer.State.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "T y -\u003e y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Analysis.html#centroidRecompute",
        "fct-type": "unknown",
        "title": "centroidRecompute"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Analysis",
        "module": "Synthesizer.State.Analysis",
        "name": "centroidRecompute",
        "normalized": "T a-\u003ea",
        "package": "synthesizer",
        "partial": "Recompute",
        "signature": "T y-\u003ey"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Analysis.html#v:chirpTransform",
      "description": {
        "fct-descr": "\u003cp\u003eAlmost naive implementation of the chirp transform,\na generalization of the Fourier transform.\n\u003c/p\u003e\u003cp\u003eMore sophisticated algorithms like Rader, Cooley-Tukey, Winograd, Prime-Factor may follow.\n\u003c/p\u003e",
        "fct-module": "Synthesizer.State.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "y -\u003e T y -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Analysis.html#chirpTransform",
        "fct-type": "unknown",
        "title": "chirpTransform"
      },
      "index": {
        "description": "Almost naive implementation of the chirp transform generalization of the Fourier transform More sophisticated algorithms like Rader Cooley-Tukey Winograd Prime-Factor may follow",
        "hierarchy": "Synthesizer State Analysis",
        "module": "Synthesizer.State.Analysis",
        "name": "chirpTransform",
        "normalized": "a-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "Transform",
        "signature": "y-\u003eT y-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Analysis.html#v:directCurrentOffset",
      "description": {
        "fct-descr": "Requires finite length.\nThis is identical to the arithmetic mean.\n",
        "fct-module": "Synthesizer.State.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "T y -\u003e y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Analysis.html#directCurrentOffset",
        "fct-type": "unknown",
        "title": "directCurrentOffset"
      },
      "index": {
        "description": "Requires finite length This is identical to the arithmetic mean",
        "hierarchy": "Synthesizer State Analysis",
        "module": "Synthesizer.State.Analysis",
        "name": "directCurrentOffset",
        "normalized": "T a-\u003ea",
        "package": "synthesizer",
        "partial": "Current Offset",
        "signature": "T y-\u003ey"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Analysis.html#v:firstMoment",
      "description": {
        "fct-module": "Synthesizer.State.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "T y -\u003e y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Analysis.html#firstMoment",
        "fct-type": "unknown",
        "title": "firstMoment"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Analysis",
        "module": "Synthesizer.State.Analysis",
        "name": "firstMoment",
        "normalized": "T a-\u003ea",
        "package": "synthesizer",
        "partial": "Moment",
        "signature": "T y-\u003ey"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Analysis.html#v:flipFlopHysteresis",
      "description": {
        "fct-descr": "Detect thresholds with a hysteresis.\n",
        "fct-module": "Synthesizer.State.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "(y, y) -\u003e Bool -\u003e T y -\u003e T Bool",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Analysis.html#flipFlopHysteresis",
        "fct-type": "unknown",
        "title": "flipFlopHysteresis"
      },
      "index": {
        "description": "Detect thresholds with hysteresis",
        "hierarchy": "Synthesizer State Analysis",
        "module": "Synthesizer.State.Analysis",
        "name": "flipFlopHysteresis",
        "normalized": "(a,a)-\u003eBool-\u003eT a-\u003eT Bool",
        "package": "synthesizer",
        "partial": "Flop Hysteresis",
        "signature": "(y,y)-\u003eBool-\u003eT y-\u003eT Bool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Analysis.html#v:histogramDiscreteArray",
      "description": {
        "fct-descr": "Input list must be finite.\nList is scanned twice, but counting may be faster.\n",
        "fct-module": "Synthesizer.State.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "T Int -\u003e (Int, T Int)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Analysis.html#histogramDiscreteArray",
        "fct-type": "unknown",
        "title": "histogramDiscreteArray"
      },
      "index": {
        "description": "Input list must be finite List is scanned twice but counting may be faster",
        "hierarchy": "Synthesizer State Analysis",
        "module": "Synthesizer.State.Analysis",
        "name": "histogramDiscreteArray",
        "normalized": "T Int-\u003e(Int,T Int)",
        "package": "synthesizer",
        "partial": "Discrete Array",
        "signature": "T Int-\u003e(Int,T Int)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Analysis.html#v:histogramDiscreteIntMap",
      "description": {
        "fct-descr": "Input list must be finite.\nIf the input signal is empty, the offset is \u003ctt\u003eundefined\u003c/tt\u003e.\nList is scanned once, counting may be slower.\n",
        "fct-module": "Synthesizer.State.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "T Int -\u003e (Int, T Int)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Analysis.html#histogramDiscreteIntMap",
        "fct-type": "unknown",
        "title": "histogramDiscreteIntMap"
      },
      "index": {
        "description": "Input list must be finite If the input signal is empty the offset is undefined List is scanned once counting may be slower",
        "hierarchy": "Synthesizer State Analysis",
        "module": "Synthesizer.State.Analysis",
        "name": "histogramDiscreteIntMap",
        "normalized": "T Int-\u003e(Int,T Int)",
        "package": "synthesizer",
        "partial": "Discrete Int Map",
        "signature": "T Int-\u003e(Int,T Int)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Analysis.html#v:histogramIntMap",
      "description": {
        "fct-module": "Synthesizer.State.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "y -\u003e T y -\u003e (Int, T Int)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Analysis.html#histogramIntMap",
        "fct-type": "unknown",
        "title": "histogramIntMap"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Analysis",
        "module": "Synthesizer.State.Analysis",
        "name": "histogramIntMap",
        "normalized": "a-\u003eT a-\u003e(Int,T Int)",
        "package": "synthesizer",
        "partial": "Int Map",
        "signature": "y-\u003eT y-\u003e(Int,T Int)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Analysis.html#v:histogramLinearArray",
      "description": {
        "fct-descr": "Input list must be finite.\nIf the input signal is empty, the offset is \u003ctt\u003eundefined\u003c/tt\u003e.\nList is scanned twice, but counting may be faster.\nThe sum of all histogram values is one less than the length of the signal.\n",
        "fct-module": "Synthesizer.State.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "T y -\u003e (Int, T y)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Analysis.html#histogramLinearArray",
        "fct-type": "unknown",
        "title": "histogramLinearArray"
      },
      "index": {
        "description": "Input list must be finite If the input signal is empty the offset is undefined List is scanned twice but counting may be faster The sum of all histogram values is one less than the length of the signal",
        "hierarchy": "Synthesizer State Analysis",
        "module": "Synthesizer.State.Analysis",
        "name": "histogramLinearArray",
        "normalized": "T a-\u003e(Int,T a)",
        "package": "synthesizer",
        "partial": "Linear Array",
        "signature": "T y-\u003e(Int,T y)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Analysis.html#v:histogramLinearIntMap",
      "description": {
        "fct-module": "Synthesizer.State.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "T y -\u003e (Int, T y)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Analysis.html#histogramLinearIntMap",
        "fct-type": "unknown",
        "title": "histogramLinearIntMap"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Analysis",
        "module": "Synthesizer.State.Analysis",
        "name": "histogramLinearIntMap",
        "normalized": "T a-\u003e(Int,T a)",
        "package": "synthesizer",
        "partial": "Linear Int Map",
        "signature": "T y-\u003e(Int,T y)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Analysis.html#v:meanValues",
      "description": {
        "fct-module": "Synthesizer.State.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "T y -\u003e [(Int, y)]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Analysis.html#meanValues",
        "fct-type": "unknown",
        "title": "meanValues"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Analysis",
        "module": "Synthesizer.State.Analysis",
        "name": "meanValues",
        "normalized": "T a-\u003e[(Int,a)]",
        "package": "synthesizer",
        "partial": "Values",
        "signature": "T y-\u003e[(Int,y)]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Analysis.html#v:quantize",
      "description": {
        "fct-module": "Synthesizer.State.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "y -\u003e T y -\u003e T Int",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Analysis.html#quantize",
        "fct-type": "unknown",
        "title": "quantize"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Analysis",
        "module": "Synthesizer.State.Analysis",
        "name": "quantize",
        "normalized": "a-\u003eT a-\u003eT Int",
        "package": "synthesizer",
        "partial": "",
        "signature": "y-\u003eT y-\u003eT Int"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Analysis.html#v:rectify",
      "description": {
        "fct-module": "Synthesizer.State.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "T y -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Analysis.html#rectify",
        "fct-type": "unknown",
        "title": "rectify"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Analysis",
        "module": "Synthesizer.State.Analysis",
        "name": "rectify",
        "normalized": "T a-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "T y-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Analysis.html#v:scalarProduct",
      "description": {
        "fct-module": "Synthesizer.State.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "T y -\u003e T y -\u003e y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Analysis.html#scalarProduct",
        "fct-type": "unknown",
        "title": "scalarProduct"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Analysis",
        "module": "Synthesizer.State.Analysis",
        "name": "scalarProduct",
        "normalized": "T a-\u003eT a-\u003ea",
        "package": "synthesizer",
        "partial": "Product",
        "signature": "T y-\u003eT y-\u003ey"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Analysis.html#v:spread",
      "description": {
        "fct-module": "Synthesizer.State.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "(y, y) -\u003e [(Int, y)]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Analysis.html#spread",
        "fct-type": "unknown",
        "title": "spread"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Analysis",
        "module": "Synthesizer.State.Analysis",
        "name": "spread",
        "normalized": "(a,a)-\u003e[(Int,a)]",
        "package": "synthesizer",
        "partial": "",
        "signature": "(y,y)-\u003e[(Int,y)]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Analysis.html#v:volumeEuclidean",
      "description": {
        "fct-descr": "Volume based on Energy norm.\n",
        "fct-module": "Synthesizer.State.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "T y -\u003e y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Analysis.html#volumeEuclidean",
        "fct-type": "unknown",
        "title": "volumeEuclidean"
      },
      "index": {
        "description": "Volume based on Energy norm",
        "hierarchy": "Synthesizer State Analysis",
        "module": "Synthesizer.State.Analysis",
        "name": "volumeEuclidean",
        "normalized": "T a-\u003ea",
        "package": "synthesizer",
        "partial": "Euclidean",
        "signature": "T y-\u003ey"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Analysis.html#v:volumeEuclideanSqr",
      "description": {
        "fct-module": "Synthesizer.State.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "T y -\u003e y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Analysis.html#volumeEuclideanSqr",
        "fct-type": "unknown",
        "title": "volumeEuclideanSqr"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Analysis",
        "module": "Synthesizer.State.Analysis",
        "name": "volumeEuclideanSqr",
        "normalized": "T a-\u003ea",
        "package": "synthesizer",
        "partial": "Euclidean Sqr",
        "signature": "T y-\u003ey"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Analysis.html#v:volumeMaximum",
      "description": {
        "fct-descr": "Volume based on Manhattan norm.\n",
        "fct-module": "Synthesizer.State.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "T y -\u003e y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Analysis.html#volumeMaximum",
        "fct-type": "unknown",
        "title": "volumeMaximum"
      },
      "index": {
        "description": "Volume based on Manhattan norm",
        "hierarchy": "Synthesizer State Analysis",
        "module": "Synthesizer.State.Analysis",
        "name": "volumeMaximum",
        "normalized": "T a-\u003ea",
        "package": "synthesizer",
        "partial": "Maximum",
        "signature": "T y-\u003ey"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Analysis.html#v:volumeSum",
      "description": {
        "fct-descr": "Volume based on Sum norm.\n",
        "fct-module": "Synthesizer.State.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "T y -\u003e y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Analysis.html#volumeSum",
        "fct-type": "unknown",
        "title": "volumeSum"
      },
      "index": {
        "description": "Volume based on Sum norm",
        "hierarchy": "Synthesizer State Analysis",
        "module": "Synthesizer.State.Analysis",
        "name": "volumeSum",
        "normalized": "T a-\u003ea",
        "package": "synthesizer",
        "partial": "Sum",
        "signature": "T y-\u003ey"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Analysis.html#v:volumeVectorEuclidean",
      "description": {
        "fct-descr": "Volume based on Energy norm.\n",
        "fct-module": "Synthesizer.State.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "T yv -\u003e y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Analysis.html#volumeVectorEuclidean",
        "fct-type": "unknown",
        "title": "volumeVectorEuclidean"
      },
      "index": {
        "description": "Volume based on Energy norm",
        "hierarchy": "Synthesizer State Analysis",
        "module": "Synthesizer.State.Analysis",
        "name": "volumeVectorEuclidean",
        "normalized": "T a-\u003eb",
        "package": "synthesizer",
        "partial": "Vector Euclidean",
        "signature": "T yv-\u003ey"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Analysis.html#v:volumeVectorEuclideanSqr",
      "description": {
        "fct-module": "Synthesizer.State.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "T yv -\u003e y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Analysis.html#volumeVectorEuclideanSqr",
        "fct-type": "unknown",
        "title": "volumeVectorEuclideanSqr"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Analysis",
        "module": "Synthesizer.State.Analysis",
        "name": "volumeVectorEuclideanSqr",
        "normalized": "T a-\u003eb",
        "package": "synthesizer",
        "partial": "Vector Euclidean Sqr",
        "signature": "T yv-\u003ey"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Analysis.html#v:volumeVectorMaximum",
      "description": {
        "fct-descr": "Volume based on Manhattan norm.\n",
        "fct-module": "Synthesizer.State.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "T yv -\u003e y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Analysis.html#volumeVectorMaximum",
        "fct-type": "unknown",
        "title": "volumeVectorMaximum"
      },
      "index": {
        "description": "Volume based on Manhattan norm",
        "hierarchy": "Synthesizer State Analysis",
        "module": "Synthesizer.State.Analysis",
        "name": "volumeVectorMaximum",
        "normalized": "T a-\u003eb",
        "package": "synthesizer",
        "partial": "Vector Maximum",
        "signature": "T yv-\u003ey"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Analysis.html#v:volumeVectorSum",
      "description": {
        "fct-descr": "Volume based on Sum norm.\n",
        "fct-module": "Synthesizer.State.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "T yv -\u003e y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Analysis.html#volumeVectorSum",
        "fct-type": "unknown",
        "title": "volumeVectorSum"
      },
      "index": {
        "description": "Volume based on Sum norm",
        "hierarchy": "Synthesizer State Analysis",
        "module": "Synthesizer.State.Analysis",
        "name": "volumeVectorSum",
        "normalized": "T a-\u003eb",
        "package": "synthesizer",
        "partial": "Vector Sum",
        "signature": "T yv-\u003ey"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Analysis.html#v:withAtLeast1",
      "description": {
        "fct-module": "Synthesizer.State.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "String -\u003e (T y -\u003e (Int, T y)) -\u003e T y -\u003e (Int, T y)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Analysis.html#withAtLeast1",
        "fct-type": "unknown",
        "title": "withAtLeast1"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Analysis",
        "module": "Synthesizer.State.Analysis",
        "name": "withAtLeast1",
        "normalized": "String-\u003e(T a-\u003e(Int,T a))-\u003eT a-\u003e(Int,T a)",
        "package": "synthesizer",
        "partial": "At Least",
        "signature": "String-\u003e(T y-\u003e(Int,T y))-\u003eT y-\u003e(Int,T y)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Analysis.html#v:withAtLeast2",
      "description": {
        "fct-module": "Synthesizer.State.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "String -\u003e (T y -\u003e (Int, T y)) -\u003e T y -\u003e (Int, T y)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Analysis.html#withAtLeast2",
        "fct-type": "unknown",
        "title": "withAtLeast2"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Analysis",
        "module": "Synthesizer.State.Analysis",
        "name": "withAtLeast2",
        "normalized": "String-\u003e(T a-\u003e(Int,T a))-\u003eT a-\u003e(Int,T a)",
        "package": "synthesizer",
        "partial": "At Least",
        "signature": "String-\u003e(T y-\u003e(Int,T y))-\u003eT y-\u003e(Int,T y)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Analysis.html#v:zeros",
      "description": {
        "fct-descr": "\u003cp\u003eDetects zeros (sign changes) in a signal.\nThis can be used as a simple measure of the portion\nof high frequencies or noise in the signal.\nIt ca be used as voiced/unvoiced detector in a vocoder.\n\u003c/p\u003e\u003cp\u003e\u003ctt\u003ezeros x !! n\u003c/tt\u003e is \u003ctt\u003eTrue\u003c/tt\u003e if and only if\n\u003ctt\u003e(x !! n \u003e= 0) /= (x !! (n+1) \u003e= 0)\u003c/tt\u003e.\nThe result will be one value shorter than the input.\n\u003c/p\u003e",
        "fct-module": "Synthesizer.State.Analysis",
        "fct-package": "synthesizer",
        "fct-signature": "T y -\u003e T Bool",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Analysis.html#zeros",
        "fct-type": "unknown",
        "title": "zeros"
      },
      "index": {
        "description": "Detects zeros sign changes in signal This can be used as simple measure of the portion of high frequencies or noise in the signal It ca be used as voiced unvoiced detector in vocoder zeros is True if and only if The result will be one value shorter than the input",
        "hierarchy": "Synthesizer State Analysis",
        "module": "Synthesizer.State.Analysis",
        "name": "zeros",
        "normalized": "T a-\u003eT Bool",
        "package": "synthesizer",
        "partial": "",
        "signature": "T y-\u003eT Bool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Control.html#t:Piece",
      "description": {
        "fct-module": "Synthesizer.State.Control",
        "fct-package": "synthesizer",
        "fct-signature": "type",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Control.html#Piece",
        "fct-type": "unknown",
        "title": "Piece"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Control",
        "module": "Synthesizer.State.Control",
        "name": "Piece",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Piece",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Control.html#v:constant",
      "description": {
        "fct-module": "Synthesizer.State.Control",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Control.html#constant",
        "fct-type": "unknown",
        "title": "constant"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Control",
        "module": "Synthesizer.State.Control",
        "name": "constant",
        "normalized": "a-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Control.html#v:cosine",
      "description": {
        "fct-descr": "time t0 where  1 is approached \ntime t1 where -1 is approached \na cosine wave where one half wave is between t0 and t1 \n",
        "fct-module": "Synthesizer.State.Control",
        "fct-package": "synthesizer",
        "fct-signature": "a-\u003e a-\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Control.html#cosine",
        "fct-type": "unknown",
        "title": "cosine"
      },
      "index": {
        "description": "time t0 where is approached time t1 where is approached cosine wave where one half wave is between t0 and t1",
        "hierarchy": "Synthesizer State Control",
        "module": "Synthesizer.State.Control",
        "name": "cosine",
        "normalized": "a-\u003ea-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "a-\u003ea-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Control.html#v:cosinePiece",
      "description": {
        "fct-module": "Synthesizer.State.Control",
        "fct-package": "synthesizer",
        "fct-signature": "Piece a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Control.html#cosinePiece",
        "fct-type": "unknown",
        "title": "cosinePiece"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Control",
        "module": "Synthesizer.State.Control",
        "name": "cosinePiece",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Piece",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Control.html#v:cubicHermite",
      "description": {
        "fct-module": "Synthesizer.State.Control",
        "fct-package": "synthesizer",
        "fct-signature": "(a, (a, a)) -\u003e (a, (a, a)) -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Control.html#cubicHermite",
        "fct-type": "unknown",
        "title": "cubicHermite"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Control",
        "module": "Synthesizer.State.Control",
        "name": "cubicHermite",
        "normalized": "(a,(a,a))-\u003e(a,(a,a))-\u003eT a",
        "package": "synthesizer",
        "partial": "Hermite",
        "signature": "(a,(a,a))-\u003e(a,(a,a))-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Control.html#v:cubicPiece",
      "description": {
        "fct-module": "Synthesizer.State.Control",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e a -\u003e Piece a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Control.html#cubicPiece",
        "fct-type": "unknown",
        "title": "cubicPiece"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Control",
        "module": "Synthesizer.State.Control",
        "name": "cubicPiece",
        "normalized": "a-\u003ea-\u003ePiece a",
        "package": "synthesizer",
        "partial": "Piece",
        "signature": "a-\u003ea-\u003ePiece a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Control.html#v:curveMultiscale",
      "description": {
        "fct-module": "Synthesizer.State.Control",
        "fct-package": "synthesizer",
        "fct-signature": "(y -\u003e y -\u003e y) -\u003e y -\u003e y -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Control.html#curveMultiscale",
        "fct-type": "unknown",
        "title": "curveMultiscale"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Control",
        "module": "Synthesizer.State.Control",
        "name": "curveMultiscale",
        "normalized": "(a-\u003ea-\u003ea)-\u003ea-\u003ea-\u003eT a",
        "package": "synthesizer",
        "partial": "Multiscale",
        "signature": "(y-\u003ey-\u003ey)-\u003ey-\u003ey-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Control.html#v:curveMultiscaleNeutral",
      "description": {
        "fct-module": "Synthesizer.State.Control",
        "fct-package": "synthesizer",
        "fct-signature": "(y -\u003e y -\u003e y) -\u003e y -\u003e y -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Control.html#curveMultiscaleNeutral",
        "fct-type": "unknown",
        "title": "curveMultiscaleNeutral"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Control",
        "module": "Synthesizer.State.Control",
        "name": "curveMultiscaleNeutral",
        "normalized": "(a-\u003ea-\u003ea)-\u003ea-\u003ea-\u003eT a",
        "package": "synthesizer",
        "partial": "Multiscale Neutral",
        "signature": "(y-\u003ey-\u003ey)-\u003ey-\u003ey-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Control.html#v:exponential",
      "description": {
        "fct-descr": "time where the function reaches 1/e of the initial value \ninitial value \nexponential decay \n",
        "fct-module": "Synthesizer.State.Control",
        "fct-package": "synthesizer",
        "fct-signature": "a-\u003e a-\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Control.html#exponential",
        "fct-type": "unknown",
        "title": "exponential"
      },
      "index": {
        "description": "time where the function reaches of the initial value initial value exponential decay",
        "hierarchy": "Synthesizer State Control",
        "module": "Synthesizer.State.Control",
        "name": "exponential",
        "normalized": "a-\u003ea-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "a-\u003ea-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Control.html#v:exponential2",
      "description": {
        "fct-descr": "half life \ninitial value \nexponential decay \n",
        "fct-module": "Synthesizer.State.Control",
        "fct-package": "synthesizer",
        "fct-signature": "a-\u003e a-\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Control.html#exponential2",
        "fct-type": "unknown",
        "title": "exponential2"
      },
      "index": {
        "description": "half life initial value exponential decay",
        "hierarchy": "Synthesizer State Control",
        "module": "Synthesizer.State.Control",
        "name": "exponential2",
        "normalized": "a-\u003ea-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "a-\u003ea-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Control.html#v:exponential2Multiscale",
      "description": {
        "fct-descr": "half life \ninitial value \nexponential decay \n",
        "fct-module": "Synthesizer.State.Control",
        "fct-package": "synthesizer",
        "fct-signature": "a-\u003e a-\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Control.html#exponential2Multiscale",
        "fct-type": "unknown",
        "title": "exponential2Multiscale"
      },
      "index": {
        "description": "half life initial value exponential decay",
        "hierarchy": "Synthesizer State Control",
        "module": "Synthesizer.State.Control",
        "name": "exponential2Multiscale",
        "normalized": "a-\u003ea-\u003eT a",
        "package": "synthesizer",
        "partial": "Multiscale",
        "signature": "a-\u003ea-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Control.html#v:exponential2MultiscaleNeutral",
      "description": {
        "fct-descr": "half life \nexponential decay \n",
        "fct-module": "Synthesizer.State.Control",
        "fct-package": "synthesizer",
        "fct-signature": "y-\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Control.html#exponential2MultiscaleNeutral",
        "fct-type": "unknown",
        "title": "exponential2MultiscaleNeutral"
      },
      "index": {
        "description": "half life exponential decay",
        "hierarchy": "Synthesizer State Control",
        "module": "Synthesizer.State.Control",
        "name": "exponential2MultiscaleNeutral",
        "normalized": "a-\u003eT a",
        "package": "synthesizer",
        "partial": "Multiscale Neutral",
        "signature": "y-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Control.html#v:exponentialFromTo",
      "description": {
        "fct-descr": "time where the function reaches 1/e of the initial value \ninitial value \nvalue after given time \nexponential decay \n",
        "fct-module": "Synthesizer.State.Control",
        "fct-package": "synthesizer",
        "fct-signature": "y-\u003e y-\u003e y-\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Control.html#exponentialFromTo",
        "fct-type": "unknown",
        "title": "exponentialFromTo"
      },
      "index": {
        "description": "time where the function reaches of the initial value initial value value after given time exponential decay",
        "hierarchy": "Synthesizer State Control",
        "module": "Synthesizer.State.Control",
        "name": "exponentialFromTo",
        "normalized": "a-\u003ea-\u003ea-\u003eT a",
        "package": "synthesizer",
        "partial": "From To",
        "signature": "y-\u003ey-\u003ey-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Control.html#v:exponentialFromToMultiscale",
      "description": {
        "fct-descr": "time where the function reaches 1/e of the initial value \ninitial value \nvalue after given time \nexponential decay \n",
        "fct-module": "Synthesizer.State.Control",
        "fct-package": "synthesizer",
        "fct-signature": "y-\u003e y-\u003e y-\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Control.html#exponentialFromToMultiscale",
        "fct-type": "unknown",
        "title": "exponentialFromToMultiscale"
      },
      "index": {
        "description": "time where the function reaches of the initial value initial value value after given time exponential decay",
        "hierarchy": "Synthesizer State Control",
        "module": "Synthesizer.State.Control",
        "name": "exponentialFromToMultiscale",
        "normalized": "a-\u003ea-\u003ea-\u003eT a",
        "package": "synthesizer",
        "partial": "From To Multiscale",
        "signature": "y-\u003ey-\u003ey-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Control.html#v:exponentialMultiscale",
      "description": {
        "fct-descr": "time where the function reaches 1/e of the initial value \ninitial value \nexponential decay \n",
        "fct-module": "Synthesizer.State.Control",
        "fct-package": "synthesizer",
        "fct-signature": "a-\u003e a-\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Control.html#exponentialMultiscale",
        "fct-type": "unknown",
        "title": "exponentialMultiscale"
      },
      "index": {
        "description": "time where the function reaches of the initial value initial value exponential decay",
        "hierarchy": "Synthesizer State Control",
        "module": "Synthesizer.State.Control",
        "name": "exponentialMultiscale",
        "normalized": "a-\u003ea-\u003eT a",
        "package": "synthesizer",
        "partial": "Multiscale",
        "signature": "a-\u003ea-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Control.html#v:exponentialMultiscaleNeutral",
      "description": {
        "fct-descr": "time where the function reaches 1/e of the initial value \nexponential decay \n",
        "fct-module": "Synthesizer.State.Control",
        "fct-package": "synthesizer",
        "fct-signature": "y-\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Control.html#exponentialMultiscaleNeutral",
        "fct-type": "unknown",
        "title": "exponentialMultiscaleNeutral"
      },
      "index": {
        "description": "time where the function reaches of the initial value exponential decay",
        "hierarchy": "Synthesizer State Control",
        "module": "Synthesizer.State.Control",
        "name": "exponentialMultiscaleNeutral",
        "normalized": "a-\u003eT a",
        "package": "synthesizer",
        "partial": "Multiscale Neutral",
        "signature": "y-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Control.html#v:exponentialPiece",
      "description": {
        "fct-module": "Synthesizer.State.Control",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e Piece a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Control.html#exponentialPiece",
        "fct-type": "unknown",
        "title": "exponentialPiece"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Control",
        "module": "Synthesizer.State.Control",
        "name": "exponentialPiece",
        "normalized": "a-\u003ePiece a",
        "package": "synthesizer",
        "partial": "Piece",
        "signature": "a-\u003ePiece a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Control.html#v:line",
      "description": {
        "fct-descr": "length \ninitial and final value \nlinear progression \n",
        "fct-module": "Synthesizer.State.Control",
        "fct-package": "synthesizer",
        "fct-signature": "Int-\u003e (y, y)-\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Control.html#line",
        "fct-type": "unknown",
        "title": "line"
      },
      "index": {
        "description": "length initial and final value linear progression",
        "hierarchy": "Synthesizer State Control",
        "module": "Synthesizer.State.Control",
        "name": "line",
        "normalized": "Int-\u003e(a,a)-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "Int-\u003e(y,y)-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Control.html#v:linear",
      "description": {
        "fct-descr": "steepness \ninitial value \nlinear progression \n",
        "fct-module": "Synthesizer.State.Control",
        "fct-package": "synthesizer",
        "fct-signature": "a-\u003e a-\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Control.html#linear",
        "fct-type": "unknown",
        "title": "linear"
      },
      "index": {
        "description": "steepness initial value linear progression",
        "hierarchy": "Synthesizer State Control",
        "module": "Synthesizer.State.Control",
        "name": "linear",
        "normalized": "a-\u003ea-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "a-\u003ea-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Control.html#v:linearMultiscale",
      "description": {
        "fct-descr": "As stable as the addition of time values.\n",
        "fct-module": "Synthesizer.State.Control",
        "fct-package": "synthesizer",
        "fct-signature": "y -\u003e y -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Control.html#linearMultiscale",
        "fct-type": "unknown",
        "title": "linearMultiscale"
      },
      "index": {
        "description": "As stable as the addition of time values",
        "hierarchy": "Synthesizer State Control",
        "module": "Synthesizer.State.Control",
        "name": "linearMultiscale",
        "normalized": "a-\u003ea-\u003eT a",
        "package": "synthesizer",
        "partial": "Multiscale",
        "signature": "y-\u003ey-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Control.html#v:linearMultiscaleNeutral",
      "description": {
        "fct-descr": "Linear curve starting at zero.\n",
        "fct-module": "Synthesizer.State.Control",
        "fct-package": "synthesizer",
        "fct-signature": "y -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Control.html#linearMultiscaleNeutral",
        "fct-type": "unknown",
        "title": "linearMultiscaleNeutral"
      },
      "index": {
        "description": "Linear curve starting at zero",
        "hierarchy": "Synthesizer State Control",
        "module": "Synthesizer.State.Control",
        "name": "linearMultiscaleNeutral",
        "normalized": "a-\u003eT a",
        "package": "synthesizer",
        "partial": "Multiscale Neutral",
        "signature": "y-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Control.html#v:linearPiece",
      "description": {
        "fct-module": "Synthesizer.State.Control",
        "fct-package": "synthesizer",
        "fct-signature": "Piece a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Control.html#linearPiece",
        "fct-type": "unknown",
        "title": "linearPiece"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Control",
        "module": "Synthesizer.State.Control",
        "name": "linearPiece",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Piece",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Control.html#v:piecewise",
      "description": {
        "fct-module": "Synthesizer.State.Control",
        "fct-package": "synthesizer",
        "fct-signature": "T a a (a -\u003e T a) -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Control.html#piecewise",
        "fct-type": "unknown",
        "title": "piecewise"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Control",
        "module": "Synthesizer.State.Control",
        "name": "piecewise",
        "normalized": "T a a(a-\u003eT a)-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "T a a(a-\u003eT a)-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Control.html#v:splitDurations",
      "description": {
        "fct-module": "Synthesizer.State.Control",
        "fct-package": "synthesizer",
        "fct-signature": "[t] -\u003e [(Int, t)]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Control.html#splitDurations",
        "fct-type": "unknown",
        "title": "splitDurations"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Control",
        "module": "Synthesizer.State.Control",
        "name": "splitDurations",
        "normalized": "[a]-\u003e[(Int,a)]",
        "package": "synthesizer",
        "partial": "Durations",
        "signature": "[t]-\u003e[(Int,t)]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Control.html#v:stepPiece",
      "description": {
        "fct-module": "Synthesizer.State.Control",
        "fct-package": "synthesizer",
        "fct-signature": "Piece a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Control.html#stepPiece",
        "fct-type": "unknown",
        "title": "stepPiece"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Control",
        "module": "Synthesizer.State.Control",
        "name": "stepPiece",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Piece",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Control.html#v:vectorExponential",
      "description": {
        "fct-descr": "time where the function reaches 1/e of the initial value \ninitial value \nexponential decay \n",
        "fct-module": "Synthesizer.State.Control",
        "fct-package": "synthesizer",
        "fct-signature": "a-\u003e v-\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Control.html#vectorExponential",
        "fct-type": "unknown",
        "title": "vectorExponential"
      },
      "index": {
        "description": "time where the function reaches of the initial value initial value exponential decay",
        "hierarchy": "Synthesizer State Control",
        "module": "Synthesizer.State.Control",
        "name": "vectorExponential",
        "normalized": "a-\u003eb-\u003eT b",
        "package": "synthesizer",
        "partial": "Exponential",
        "signature": "a-\u003ev-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Control.html#v:vectorExponential2",
      "description": {
        "fct-descr": "half life \ninitial value \nexponential decay \n",
        "fct-module": "Synthesizer.State.Control",
        "fct-package": "synthesizer",
        "fct-signature": "a-\u003e v-\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Control.html#vectorExponential2",
        "fct-type": "unknown",
        "title": "vectorExponential2"
      },
      "index": {
        "description": "half life initial value exponential decay",
        "hierarchy": "Synthesizer State Control",
        "module": "Synthesizer.State.Control",
        "name": "vectorExponential2",
        "normalized": "a-\u003eb-\u003eT b",
        "package": "synthesizer",
        "partial": "Exponential",
        "signature": "a-\u003ev-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Cut.html#v:arrange",
      "description": {
        "fct-descr": "A list of pairs: (relative start time, signal part),\n                The start time is relative to the start time\n                of the previous event. \nThe mixed signal. \n",
        "fct-module": "Synthesizer.State.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "T Int (T v)-\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Cut.html#arrange",
        "fct-type": "unknown",
        "title": "arrange"
      },
      "index": {
        "description": "list of pairs relative start time signal part The start time is relative to the start time of the previous event The mixed signal",
        "hierarchy": "Synthesizer State Cut",
        "module": "Synthesizer.State.Cut",
        "name": "arrange",
        "normalized": "T Int(T a)-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "T Int(T v)-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Cut.html#v:arrangeList",
      "description": {
        "fct-descr": "A list of pairs: (relative start time, signal part),\n                The start time is relative to the start time\n                of the previous event. \nThe mixed signal. \n",
        "fct-module": "Synthesizer.State.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "T Int (T v)-\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Cut.html#arrangeList",
        "fct-type": "unknown",
        "title": "arrangeList"
      },
      "index": {
        "description": "list of pairs relative start time signal part The start time is relative to the start time of the previous event The mixed signal",
        "hierarchy": "Synthesizer State Cut",
        "module": "Synthesizer.State.Cut",
        "name": "arrangeList",
        "normalized": "T Int(T a)-\u003eT a",
        "package": "synthesizer",
        "partial": "List",
        "signature": "T Int(T v)-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Cut.html#v:select",
      "description": {
        "fct-module": "Synthesizer.State.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "Array i (T a) -\u003e T i -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Cut.html#select",
        "fct-type": "unknown",
        "title": "select"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Cut",
        "module": "Synthesizer.State.Cut",
        "name": "select",
        "normalized": "Array a(T b)-\u003eT a-\u003eT b",
        "package": "synthesizer",
        "partial": "",
        "signature": "Array i(T a)-\u003eT i-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Cut.html#v:selectBool",
      "description": {
        "fct-module": "Synthesizer.State.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "(T a, T a) -\u003e T Bool -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Cut.html#selectBool",
        "fct-type": "unknown",
        "title": "selectBool"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Cut",
        "module": "Synthesizer.State.Cut",
        "name": "selectBool",
        "normalized": "(T a,T a)-\u003eT Bool-\u003eT a",
        "package": "synthesizer",
        "partial": "Bool",
        "signature": "(T a,T a)-\u003eT Bool-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Cut.html#v:takeUntilInterval",
      "description": {
        "fct-descr": "Take values until the predicate p holds for n successive values.\nThe list is truncated at the beginning of the interval of matching values.\n",
        "fct-module": "Synthesizer.State.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "(a -\u003e Bool) -\u003e Int -\u003e T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Cut.html#takeUntilInterval",
        "fct-type": "unknown",
        "title": "takeUntilInterval"
      },
      "index": {
        "description": "Take values until the predicate holds for successive values The list is truncated at the beginning of the interval of matching values",
        "hierarchy": "Synthesizer State Cut",
        "module": "Synthesizer.State.Cut",
        "name": "takeUntilInterval",
        "normalized": "(a-\u003eBool)-\u003eInt-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "Until Interval",
        "signature": "(a-\u003eBool)-\u003eInt-\u003eT a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Cut.html#v:takeUntilPause",
      "description": {
        "fct-descr": "Take signal until it falls short of a certain amplitude for a given time.\n",
        "fct-module": "Synthesizer.State.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e Int -\u003e T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Cut.html#takeUntilPause",
        "fct-type": "unknown",
        "title": "takeUntilPause"
      },
      "index": {
        "description": "Take signal until it falls short of certain amplitude for given time",
        "hierarchy": "Synthesizer State Cut",
        "module": "Synthesizer.State.Cut",
        "name": "takeUntilPause",
        "normalized": "a-\u003eInt-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "Until Pause",
        "signature": "a-\u003eInt-\u003eT a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Displacement.html#v:distort",
      "description": {
        "fct-descr": "In \u003ca\u003eSynthesizer.Basic.Distortion\u003c/a\u003e you find a collection\nof appropriate distortion functions.\n",
        "fct-module": "Synthesizer.State.Displacement",
        "fct-package": "synthesizer",
        "fct-signature": "(c -\u003e a -\u003e a) -\u003e T c -\u003e T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Displacement.html#distort",
        "fct-type": "unknown",
        "title": "distort"
      },
      "index": {
        "description": "In Synthesizer.Basic.Distortion you find collection of appropriate distortion functions",
        "hierarchy": "Synthesizer State Displacement",
        "module": "Synthesizer.State.Displacement",
        "name": "distort",
        "normalized": "(a-\u003eb-\u003eb)-\u003eT a-\u003eT b-\u003eT b",
        "package": "synthesizer",
        "partial": "",
        "signature": "(c-\u003ea-\u003ea)-\u003eT c-\u003eT a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Displacement.html#v:mix",
      "description": {
        "fct-descr": "Mix two signals.\nIn opposition to \u003ctt\u003e\u003ca\u003ezipWith\u003c/a\u003e\u003c/tt\u003e the result has the length of the longer signal.\n",
        "fct-module": "Synthesizer.State.Displacement",
        "fct-package": "synthesizer",
        "fct-signature": "T v -\u003e T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Displacement.html#mix",
        "fct-type": "unknown",
        "title": "mix"
      },
      "index": {
        "description": "Mix two signals In opposition to zipWith the result has the length of the longer signal",
        "hierarchy": "Synthesizer State Displacement",
        "module": "Synthesizer.State.Displacement",
        "name": "mix",
        "normalized": "T a-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "T v-\u003eT v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Displacement.html#v:mixMulti",
      "description": {
        "fct-descr": "Mix an arbitrary number of signals. \n",
        "fct-module": "Synthesizer.State.Displacement",
        "fct-package": "synthesizer",
        "fct-signature": "[T v] -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Displacement.html#mixMulti",
        "fct-type": "unknown",
        "title": "mixMulti"
      },
      "index": {
        "description": "Mix an arbitrary number of signals",
        "hierarchy": "Synthesizer State Displacement",
        "module": "Synthesizer.State.Displacement",
        "name": "mixMulti",
        "normalized": "[T a]-\u003eT a",
        "package": "synthesizer",
        "partial": "Multi",
        "signature": "[T v]-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Displacement.html#v:raise",
      "description": {
        "fct-descr": "Add a number to all of the signal values.\nThis is useful for adjusting the center of a modulation.\n",
        "fct-module": "Synthesizer.State.Displacement",
        "fct-package": "synthesizer",
        "fct-signature": "v -\u003e T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Displacement.html#raise",
        "fct-type": "unknown",
        "title": "raise"
      },
      "index": {
        "description": "Add number to all of the signal values This is useful for adjusting the center of modulation",
        "hierarchy": "Synthesizer State Displacement",
        "module": "Synthesizer.State.Displacement",
        "name": "raise",
        "normalized": "a-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "v-\u003eT v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Filter-Delay.html#v:modulated",
      "description": {
        "fct-descr": "This is essentially different for constant interpolation,\nbecause this function \u003ca\u003elooks forward\u003c/a\u003e\nwhereas the other two variants \u003ca\u003elook backward\u003c/a\u003e.\nFor the symmetric interpolation functions\nof linear and cubic interpolation, this does not really matter.\n",
        "fct-module": "Synthesizer.State.Filter.Delay",
        "fct-package": "synthesizer",
        "fct-signature": "T a v -\u003e Int -\u003e T a -\u003e T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Filter-Delay.html#modulated",
        "fct-type": "unknown",
        "title": "modulated"
      },
      "index": {
        "description": "This is essentially different for constant interpolation because this function looks forward whereas the other two variants look backward For the symmetric interpolation functions of linear and cubic interpolation this does not really matter",
        "hierarchy": "Synthesizer State Filter Delay",
        "module": "Synthesizer.State.Filter.Delay",
        "name": "modulated",
        "normalized": "T a b-\u003eInt-\u003eT a-\u003eT b-\u003eT b",
        "package": "synthesizer",
        "partial": "",
        "signature": "T a v-\u003eInt-\u003eT a-\u003eT v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Filter-Delay.html#v:modulatedCore",
      "description": {
        "fct-module": "Synthesizer.State.Filter.Delay",
        "fct-package": "synthesizer",
        "fct-signature": "T a v -\u003e Int -\u003e T a -\u003e T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Filter-Delay.html#modulatedCore",
        "fct-type": "unknown",
        "title": "modulatedCore"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Filter Delay",
        "module": "Synthesizer.State.Filter.Delay",
        "name": "modulatedCore",
        "normalized": "T a b-\u003eInt-\u003eT a-\u003eT b-\u003eT b",
        "package": "synthesizer",
        "partial": "Core",
        "signature": "T a v-\u003eInt-\u003eT a-\u003eT v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Filter-Delay.html#v:static",
      "description": {
        "fct-module": "Synthesizer.State.Filter.Delay",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e T y -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Filter-Delay.html#static",
        "fct-type": "unknown",
        "title": "static"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Filter Delay",
        "module": "Synthesizer.State.Filter.Delay",
        "name": "static",
        "normalized": "Int-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "Int-\u003eT y-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Filter-Delay.html#v:staticNeg",
      "description": {
        "fct-module": "Synthesizer.State.Filter.Delay",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e T y -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Filter-Delay.html#staticNeg",
        "fct-type": "unknown",
        "title": "staticNeg"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Filter Delay",
        "module": "Synthesizer.State.Filter.Delay",
        "name": "staticNeg",
        "normalized": "Int-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "Neg",
        "signature": "Int-\u003eT y-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Filter-Delay.html#v:staticPad",
      "description": {
        "fct-module": "Synthesizer.State.Filter.Delay",
        "fct-package": "synthesizer",
        "fct-signature": "y -\u003e Int -\u003e T y -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Filter-Delay.html#staticPad",
        "fct-type": "unknown",
        "title": "staticPad"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Filter Delay",
        "module": "Synthesizer.State.Filter.Delay",
        "name": "staticPad",
        "normalized": "a-\u003eInt-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "Pad",
        "signature": "y-\u003eInt-\u003eT y-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Filter-Delay.html#v:staticPos",
      "description": {
        "fct-module": "Synthesizer.State.Filter.Delay",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e T y -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Filter-Delay.html#staticPos",
        "fct-type": "unknown",
        "title": "staticPos"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Filter Delay",
        "module": "Synthesizer.State.Filter.Delay",
        "name": "staticPos",
        "normalized": "Int-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "Pos",
        "signature": "Int-\u003eT y-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Filter-NonRecursive.html#v:amplify",
      "description": {
        "fct-module": "Synthesizer.State.Filter.NonRecursive",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Filter-NonRecursive.html#amplify",
        "fct-type": "unknown",
        "title": "amplify"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Filter NonRecursive",
        "module": "Synthesizer.State.Filter.NonRecursive",
        "name": "amplify",
        "normalized": "a-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "a-\u003eT a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Filter-NonRecursive.html#v:amplifyVector",
      "description": {
        "fct-module": "Synthesizer.State.Filter.NonRecursive",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Filter-NonRecursive.html#amplifyVector",
        "fct-type": "unknown",
        "title": "amplifyVector"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Filter NonRecursive",
        "module": "Synthesizer.State.Filter.NonRecursive",
        "name": "amplifyVector",
        "normalized": "a-\u003eT b-\u003eT b",
        "package": "synthesizer",
        "partial": "Vector",
        "signature": "a-\u003eT v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Filter-NonRecursive.html#v:binomial",
      "description": {
        "fct-module": "Synthesizer.State.Filter.NonRecursive",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e a -\u003e T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Filter-NonRecursive.html#binomial",
        "fct-type": "unknown",
        "title": "binomial"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Filter NonRecursive",
        "module": "Synthesizer.State.Filter.NonRecursive",
        "name": "binomial",
        "normalized": "a-\u003ea-\u003eT b-\u003eT b",
        "package": "synthesizer",
        "partial": "",
        "signature": "a-\u003ea-\u003eT v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Filter-NonRecursive.html#v:binomial1",
      "description": {
        "fct-module": "Synthesizer.State.Filter.NonRecursive",
        "fct-package": "synthesizer",
        "fct-signature": "T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Filter-NonRecursive.html#binomial1",
        "fct-type": "unknown",
        "title": "binomial1"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Filter NonRecursive",
        "module": "Synthesizer.State.Filter.NonRecursive",
        "name": "binomial1",
        "normalized": "T a-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "T v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Filter-NonRecursive.html#v:differentiate",
      "description": {
        "fct-descr": "Forward difference quotient.\nShortens the signal by one.\nInverts Synthesizer.State.Filter.Recursive.Integration.run in the sense that\n\u003ctt\u003edifferentiate (zero : integrate x) == x\u003c/tt\u003e.\nThe signal is shifted by a half time unit.\n",
        "fct-module": "Synthesizer.State.Filter.NonRecursive",
        "fct-package": "synthesizer",
        "fct-signature": "T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Filter-NonRecursive.html#differentiate",
        "fct-type": "unknown",
        "title": "differentiate"
      },
      "index": {
        "description": "Forward difference quotient Shortens the signal by one Inverts Synthesizer.State.Filter.Recursive.Integration.run in the sense that differentiate zero integrate The signal is shifted by half time unit",
        "hierarchy": "Synthesizer State Filter NonRecursive",
        "module": "Synthesizer.State.Filter.NonRecursive",
        "name": "differentiate",
        "normalized": "T a-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "T v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Filter-NonRecursive.html#v:differentiate2",
      "description": {
        "fct-descr": "Second derivative.\nIt is \u003ctt\u003edifferentiate2 == differentiate . differentiate\u003c/tt\u003e\nbut \u003ctt\u003e\u003ca\u003edifferentiate2\u003c/a\u003e\u003c/tt\u003e should be faster.\n",
        "fct-module": "Synthesizer.State.Filter.NonRecursive",
        "fct-package": "synthesizer",
        "fct-signature": "T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Filter-NonRecursive.html#differentiate2",
        "fct-type": "unknown",
        "title": "differentiate2"
      },
      "index": {
        "description": "Second derivative It is differentiate2 differentiate differentiate but differentiate2 should be faster",
        "hierarchy": "Synthesizer State Filter NonRecursive",
        "module": "Synthesizer.State.Filter.NonRecursive",
        "name": "differentiate2",
        "normalized": "T a-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "T v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Filter-NonRecursive.html#v:differentiateCenter",
      "description": {
        "fct-descr": "\u003cp\u003eCentral difference quotient.\nShortens the signal by two elements,\nand shifts the signal by one element.\n(Which can be fixed by prepending an appropriate value.)\nFor linear functions this will yield\nessentially the same result as \u003ctt\u003e\u003ca\u003edifferentiate\u003c/a\u003e\u003c/tt\u003e.\nYou obtain the result of \u003ctt\u003e\u003ca\u003edifferentiateCenter\u003c/a\u003e\u003c/tt\u003e\nif you smooth the one of \u003ctt\u003e\u003ca\u003edifferentiate\u003c/a\u003e\u003c/tt\u003e\nby averaging pairs of adjacent values.\n\u003c/p\u003e\u003cp\u003eToDo: Vector variant\n\u003c/p\u003e",
        "fct-module": "Synthesizer.State.Filter.NonRecursive",
        "fct-package": "synthesizer",
        "fct-signature": "T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Filter-NonRecursive.html#differentiateCenter",
        "fct-type": "unknown",
        "title": "differentiateCenter"
      },
      "index": {
        "description": "Central difference quotient Shortens the signal by two elements and shifts the signal by one element Which can be fixed by prepending an appropriate value For linear functions this will yield essentially the same result as differentiate You obtain the result of differentiateCenter if you smooth the one of differentiate by averaging pairs of adjacent values ToDo Vector variant",
        "hierarchy": "Synthesizer State Filter NonRecursive",
        "module": "Synthesizer.State.Filter.NonRecursive",
        "name": "differentiateCenter",
        "normalized": "T a-\u003eT a",
        "package": "synthesizer",
        "partial": "Center",
        "signature": "T v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Filter-NonRecursive.html#v:envelope",
      "description": {
        "fct-descr": "the envelope \nthe signal to be enveloped \n",
        "fct-module": "Synthesizer.State.Filter.NonRecursive",
        "fct-package": "synthesizer",
        "fct-signature": "T a-\u003e T a-\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Filter-NonRecursive.html#envelope",
        "fct-type": "unknown",
        "title": "envelope"
      },
      "index": {
        "description": "the envelope the signal to be enveloped",
        "hierarchy": "Synthesizer State Filter NonRecursive",
        "module": "Synthesizer.State.Filter.NonRecursive",
        "name": "envelope",
        "normalized": "T a-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "T a-\u003eT a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Filter-NonRecursive.html#v:envelopeVector",
      "description": {
        "fct-descr": "the envelope \nthe signal to be enveloped \n",
        "fct-module": "Synthesizer.State.Filter.NonRecursive",
        "fct-package": "synthesizer",
        "fct-signature": "T a-\u003e T v-\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Filter-NonRecursive.html#envelopeVector",
        "fct-type": "unknown",
        "title": "envelopeVector"
      },
      "index": {
        "description": "the envelope the signal to be enveloped",
        "hierarchy": "Synthesizer State Filter NonRecursive",
        "module": "Synthesizer.State.Filter.NonRecursive",
        "name": "envelopeVector",
        "normalized": "T a-\u003eT b-\u003eT b",
        "package": "synthesizer",
        "partial": "Vector",
        "signature": "T a-\u003eT v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Filter-NonRecursive.html#v:fadeInOut",
      "description": {
        "fct-module": "Synthesizer.State.Filter.NonRecursive",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e Int -\u003e Int -\u003e T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Filter-NonRecursive.html#fadeInOut",
        "fct-type": "unknown",
        "title": "fadeInOut"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Filter NonRecursive",
        "module": "Synthesizer.State.Filter.NonRecursive",
        "name": "fadeInOut",
        "normalized": "Int-\u003eInt-\u003eInt-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "In Out",
        "signature": "Int-\u003eInt-\u003eInt-\u003eT a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Filter-NonRecursive.html#v:generic",
      "description": {
        "fct-descr": "Unmodulated non-recursive filter \n",
        "fct-module": "Synthesizer.State.Filter.NonRecursive",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Filter-NonRecursive.html#generic",
        "fct-type": "unknown",
        "title": "generic"
      },
      "index": {
        "description": "Unmodulated non-recursive filter",
        "hierarchy": "Synthesizer State Filter NonRecursive",
        "module": "Synthesizer.State.Filter.NonRecursive",
        "name": "generic",
        "normalized": "T a-\u003eT b-\u003eT b",
        "package": "synthesizer",
        "partial": "",
        "signature": "T a-\u003eT v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Filter-NonRecursive.html#v:ratioFreqToVariance",
      "description": {
        "fct-descr": "Compute the variance of the Gaussian\n  such that its Fourier transform has value \u003ctt\u003eratio\u003c/tt\u003e at frequency \u003ctt\u003efreq\u003c/tt\u003e.\n",
        "fct-module": "Synthesizer.State.Filter.NonRecursive",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e a -\u003e a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Filter-NonRecursive.html#ratioFreqToVariance",
        "fct-type": "unknown",
        "title": "ratioFreqToVariance"
      },
      "index": {
        "description": "Compute the variance of the Gaussian such that its Fourier transform has value ratio at frequency freq",
        "hierarchy": "Synthesizer State Filter NonRecursive",
        "module": "Synthesizer.State.Filter.NonRecursive",
        "name": "ratioFreqToVariance",
        "normalized": "a-\u003ea-\u003ea",
        "package": "synthesizer",
        "partial": "Freq To Variance",
        "signature": "a-\u003ea-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Filter-NonRecursive.html#v:sums",
      "description": {
        "fct-descr": "Moving (uniformly weighted) average in the most trivial form.\nThis is very slow and needs about \u003ctt\u003en * length x\u003c/tt\u003e operations.\n",
        "fct-module": "Synthesizer.State.Filter.NonRecursive",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Filter-NonRecursive.html#sums",
        "fct-type": "unknown",
        "title": "sums"
      },
      "index": {
        "description": "Moving uniformly weighted average in the most trivial form This is very slow and needs about length operations",
        "hierarchy": "Synthesizer State Filter NonRecursive",
        "module": "Synthesizer.State.Filter.NonRecursive",
        "name": "sums",
        "normalized": "Int-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "Int-\u003eT v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Filter-Recursive-Comb.html#v:karplusStrong",
      "description": {
        "fct-descr": "The most simple version of the Karplus-Strong algorithm\nwhich is suitable to simulate a plucked string.\nIt is similar to the \u003ctt\u003e\u003ca\u003erunProc\u003c/a\u003e\u003c/tt\u003e function.\n",
        "fct-module": "Synthesizer.State.Filter.Recursive.Comb",
        "fct-package": "synthesizer",
        "fct-signature": "Parameter a -\u003e T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Filter-Recursive-Comb.html#karplusStrong",
        "fct-type": "unknown",
        "title": "karplusStrong"
      },
      "index": {
        "description": "The most simple version of the Karplus-Strong algorithm which is suitable to simulate plucked string It is similar to the runProc function",
        "hierarchy": "Synthesizer State Filter Recursive Comb",
        "module": "Synthesizer.State.Filter.Recursive.Comb",
        "name": "karplusStrong",
        "normalized": "Parameter a-\u003eT b-\u003eT b",
        "package": "synthesizer",
        "partial": "Strong",
        "signature": "Parameter a-\u003eT v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Filter-Recursive-Comb.html#v:run",
      "description": {
        "fct-descr": "Infinitely many equi-delayed exponentially decaying echos.\nThe echos are clipped to the input length.\nWe think it is easier (and simpler to do efficiently)\nto pad the input with zeros or whatever\ninstead of cutting the result according to the input length.\n",
        "fct-module": "Synthesizer.State.Filter.Recursive.Comb",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e a -\u003e T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Filter-Recursive-Comb.html#run",
        "fct-type": "unknown",
        "title": "run"
      },
      "index": {
        "description": "Infinitely many equi-delayed exponentially decaying echos The echos are clipped to the input length We think it is easier and simpler to do efficiently to pad the input with zeros or whatever instead of cutting the result according to the input length",
        "hierarchy": "Synthesizer State Filter Recursive Comb",
        "module": "Synthesizer.State.Filter.Recursive.Comb",
        "name": "run",
        "normalized": "Int-\u003ea-\u003eT b-\u003eT b",
        "package": "synthesizer",
        "partial": "",
        "signature": "Int-\u003ea-\u003eT v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Filter-Recursive-Comb.html#v:runMulti",
      "description": {
        "fct-descr": "Echos of different delays. \n",
        "fct-module": "Synthesizer.State.Filter.Recursive.Comb",
        "fct-package": "synthesizer",
        "fct-signature": "[Int] -\u003e a -\u003e T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Filter-Recursive-Comb.html#runMulti",
        "fct-type": "unknown",
        "title": "runMulti"
      },
      "index": {
        "description": "Echos of different delays",
        "hierarchy": "Synthesizer State Filter Recursive Comb",
        "module": "Synthesizer.State.Filter.Recursive.Comb",
        "name": "runMulti",
        "normalized": "[Int]-\u003ea-\u003eT b-\u003eT b",
        "package": "synthesizer",
        "partial": "Multi",
        "signature": "[Int]-\u003ea-\u003eT v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Filter-Recursive-Comb.html#v:runProc",
      "description": {
        "fct-descr": "Echos can be piped through an arbitrary signal processor. \n",
        "fct-module": "Synthesizer.State.Filter.Recursive.Comb",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e (T v -\u003e T v) -\u003e T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Filter-Recursive-Comb.html#runProc",
        "fct-type": "unknown",
        "title": "runProc"
      },
      "index": {
        "description": "Echos can be piped through an arbitrary signal processor",
        "hierarchy": "Synthesizer State Filter Recursive Comb",
        "module": "Synthesizer.State.Filter.Recursive.Comb",
        "name": "runProc",
        "normalized": "Int-\u003e(T a-\u003eT a)-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "Proc",
        "signature": "Int-\u003e(T v-\u003eT v)-\u003eT v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Filter-Recursive-Integration.html#v:causal",
      "description": {
        "fct-module": "Synthesizer.State.Filter.Recursive.Integration",
        "fct-package": "synthesizer",
        "fct-signature": "T v v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Filter-Recursive-Integration.html#causal",
        "fct-type": "unknown",
        "title": "causal"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Filter Recursive Integration",
        "module": "Synthesizer.State.Filter.Recursive.Integration",
        "name": "causal",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Filter-Recursive-Integration.html#v:causalInit",
      "description": {
        "fct-descr": "Integrate with initial condition.\nFirst emitted value is the initial condition.\nThe signal become one element longer.\n",
        "fct-module": "Synthesizer.State.Filter.Recursive.Integration",
        "fct-package": "synthesizer",
        "fct-signature": "v -\u003e T v v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Filter-Recursive-Integration.html#causalInit",
        "fct-type": "unknown",
        "title": "causalInit"
      },
      "index": {
        "description": "Integrate with initial condition First emitted value is the initial condition The signal become one element longer",
        "hierarchy": "Synthesizer State Filter Recursive Integration",
        "module": "Synthesizer.State.Filter.Recursive.Integration",
        "name": "causalInit",
        "normalized": "a-\u003eT a a",
        "package": "synthesizer",
        "partial": "Init",
        "signature": "v-\u003eT v v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Filter-Recursive-Integration.html#v:run",
      "description": {
        "fct-descr": "Integrate with initial value zero.\nHowever the first emitted value is the value of the input signal.\nIt maintains the length of the signal.\n",
        "fct-module": "Synthesizer.State.Filter.Recursive.Integration",
        "fct-package": "synthesizer",
        "fct-signature": "T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Filter-Recursive-Integration.html#run",
        "fct-type": "unknown",
        "title": "run"
      },
      "index": {
        "description": "Integrate with initial value zero However the first emitted value is the value of the input signal It maintains the length of the signal",
        "hierarchy": "Synthesizer State Filter Recursive Integration",
        "module": "Synthesizer.State.Filter.Recursive.Integration",
        "name": "run",
        "normalized": "T a-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "T v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Filter-Recursive-Integration.html#v:runInit",
      "description": {
        "fct-descr": "Integrate with initial condition.\nFirst emitted value is the initial condition.\nThe signal become one element longer.\n",
        "fct-module": "Synthesizer.State.Filter.Recursive.Integration",
        "fct-package": "synthesizer",
        "fct-signature": "v -\u003e T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Filter-Recursive-Integration.html#runInit",
        "fct-type": "unknown",
        "title": "runInit"
      },
      "index": {
        "description": "Integrate with initial condition First emitted value is the initial condition The signal become one element longer",
        "hierarchy": "Synthesizer State Filter Recursive Integration",
        "module": "Synthesizer.State.Filter.Recursive.Integration",
        "name": "runInit",
        "normalized": "a-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "Init",
        "signature": "v-\u003eT v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Filter-Recursive-MovingAverage.html#v:modulatedFrac",
      "description": {
        "fct-module": "Synthesizer.State.Filter.Recursive.MovingAverage",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e T a -\u003e T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Filter-Recursive-MovingAverage.html#modulatedFrac",
        "fct-type": "unknown",
        "title": "modulatedFrac"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Filter Recursive MovingAverage",
        "module": "Synthesizer.State.Filter.Recursive.MovingAverage",
        "name": "modulatedFrac",
        "normalized": "Int-\u003eT a-\u003eT b-\u003eT b",
        "package": "synthesizer",
        "partial": "Frac",
        "signature": "Int-\u003eT a-\u003eT v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Filter-Recursive-MovingAverage.html#v:sumsStaticInt",
      "description": {
        "fct-descr": "\u003cp\u003eLike Synthesizer.State.Filter.NonRecursive.sums but in a recursive form.\nThis needs only linear time (independent of the window size)\nbut may accumulate rounding errors.\n\u003c/p\u003e\u003cpre\u003e\nys = xs * (1,0,0,0,-1) / (1,-1)\nys * (1,-1) = xs * (1,0,0,0,-1)\nys = xs * (1,0,0,0,-1) + ys * (0,1)\n\u003c/pre\u003e",
        "fct-module": "Synthesizer.State.Filter.Recursive.MovingAverage",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e T v -\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Filter-Recursive-MovingAverage.html#sumsStaticInt",
        "fct-type": "unknown",
        "title": "sumsStaticInt"
      },
      "index": {
        "description": "Like Synthesizer.State.Filter.NonRecursive.sums but in recursive form This needs only linear time independent of the window size but may accumulate rounding errors ys xs ys xs ys xs ys",
        "hierarchy": "Synthesizer State Filter Recursive MovingAverage",
        "module": "Synthesizer.State.Filter.Recursive.MovingAverage",
        "name": "sumsStaticInt",
        "normalized": "Int-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "Static Int",
        "signature": "Int-\u003eT v-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Interpolation.html#v:constantPad",
      "description": {
        "fct-module": "Synthesizer.State.Interpolation",
        "fct-package": "synthesizer",
        "fct-signature": "(T t y -\u003e t -\u003e T y -\u003e a) -\u003e T t y -\u003e t -\u003e T y -\u003e a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Interpolation.html#constantPad",
        "fct-type": "unknown",
        "title": "constantPad"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Interpolation",
        "module": "Synthesizer.State.Interpolation",
        "name": "constantPad",
        "normalized": "(T a b-\u003ea-\u003eT b-\u003ec)-\u003eT a b-\u003ea-\u003eT b-\u003ec",
        "package": "synthesizer",
        "partial": "Pad",
        "signature": "(T t y-\u003et-\u003eT y-\u003ea)-\u003eT t y-\u003et-\u003eT y-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Interpolation.html#v:cyclicPad",
      "description": {
        "fct-descr": "Only for finite input signals.\n",
        "fct-module": "Synthesizer.State.Interpolation",
        "fct-package": "synthesizer",
        "fct-signature": "(T t y -\u003e t -\u003e T y -\u003e a) -\u003e T t y -\u003e t -\u003e T y -\u003e a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Interpolation.html#cyclicPad",
        "fct-type": "unknown",
        "title": "cyclicPad"
      },
      "index": {
        "description": "Only for finite input signals",
        "hierarchy": "Synthesizer State Interpolation",
        "module": "Synthesizer.State.Interpolation",
        "name": "cyclicPad",
        "normalized": "(T a b-\u003ea-\u003eT b-\u003ec)-\u003eT a b-\u003ea-\u003eT b-\u003ec",
        "package": "synthesizer",
        "partial": "Pad",
        "signature": "(T t y-\u003et-\u003eT y-\u003ea)-\u003eT t y-\u003et-\u003eT y-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Interpolation.html#v:delayPad",
      "description": {
        "fct-module": "Synthesizer.State.Interpolation",
        "fct-package": "synthesizer",
        "fct-signature": "y -\u003e Int -\u003e T y -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Interpolation.html#delayPad",
        "fct-type": "unknown",
        "title": "delayPad"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Interpolation",
        "module": "Synthesizer.State.Interpolation",
        "name": "delayPad",
        "normalized": "a-\u003eInt-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "Pad",
        "signature": "y-\u003eInt-\u003eT y-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Interpolation.html#v:extrapolationPad",
      "description": {
        "fct-descr": "The extrapolation may miss some of the first and some of the last points\n",
        "fct-module": "Synthesizer.State.Interpolation",
        "fct-package": "synthesizer",
        "fct-signature": "(T t y -\u003e t -\u003e T y -\u003e a) -\u003e T t y -\u003e t -\u003e T y -\u003e a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Interpolation.html#extrapolationPad",
        "fct-type": "unknown",
        "title": "extrapolationPad"
      },
      "index": {
        "description": "The extrapolation may miss some of the first and some of the last points",
        "hierarchy": "Synthesizer State Interpolation",
        "module": "Synthesizer.State.Interpolation",
        "name": "extrapolationPad",
        "normalized": "(T a b-\u003ea-\u003eT b-\u003ec)-\u003eT a b-\u003ea-\u003eT b-\u003ec",
        "package": "synthesizer",
        "partial": "Pad",
        "signature": "(T t y-\u003et-\u003eT y-\u003ea)-\u003eT t y-\u003et-\u003eT y-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Interpolation.html#v:single",
      "description": {
        "fct-module": "Synthesizer.State.Interpolation",
        "fct-package": "synthesizer",
        "fct-signature": "T t y -\u003e t -\u003e T y -\u003e y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Interpolation.html#single",
        "fct-type": "unknown",
        "title": "single"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Interpolation",
        "module": "Synthesizer.State.Interpolation",
        "name": "single",
        "normalized": "T a b-\u003ea-\u003eT b-\u003eb",
        "package": "synthesizer",
        "partial": "",
        "signature": "T t y-\u003et-\u003eT y-\u003ey"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Interpolation.html#v:skip",
      "description": {
        "fct-module": "Synthesizer.State.Interpolation",
        "fct-package": "synthesizer",
        "fct-signature": "T t y -\u003e (t, T y) -\u003e (t, T y)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Interpolation.html#skip",
        "fct-type": "unknown",
        "title": "skip"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Interpolation",
        "module": "Synthesizer.State.Interpolation",
        "name": "skip",
        "normalized": "T a b-\u003e(a,T b)-\u003e(a,T b)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T t y-\u003e(t,T y)-\u003e(t,T y)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Interpolation.html#v:zeroPad",
      "description": {
        "fct-module": "Synthesizer.State.Interpolation",
        "fct-package": "synthesizer",
        "fct-signature": "(T t y -\u003e t -\u003e T y -\u003e a) -\u003e y -\u003e T t y -\u003e t -\u003e T y -\u003e a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Interpolation.html#zeroPad",
        "fct-type": "unknown",
        "title": "zeroPad"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Interpolation",
        "module": "Synthesizer.State.Interpolation",
        "name": "zeroPad",
        "normalized": "(T a b-\u003ea-\u003eT b-\u003ec)-\u003eb-\u003eT a b-\u003ea-\u003eT b-\u003ec",
        "package": "synthesizer",
        "partial": "Pad",
        "signature": "(T t y-\u003et-\u003eT y-\u003ea)-\u003ey-\u003eT t y-\u003et-\u003eT y-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Miscellaneous.html#v:receive3Dsound",
      "description": {
        "fct-descr": "simulate an moving sounding object\n   convert the way of the object through 3D space\n   into a delay and attenuation information,\n   sonicDelay is the reciprocal of the sonic velocity \n",
        "fct-module": "Synthesizer.State.Miscellaneous",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e a -\u003e v -\u003e T v -\u003e (T a, T a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Miscellaneous.html#receive3Dsound",
        "fct-type": "unknown",
        "title": "receive3Dsound"
      },
      "index": {
        "description": "simulate an moving sounding object convert the way of the object through space into delay and attenuation information sonicDelay is the reciprocal of the sonic velocity",
        "hierarchy": "Synthesizer State Miscellaneous",
        "module": "Synthesizer.State.Miscellaneous",
        "name": "receive3Dsound",
        "normalized": "a-\u003ea-\u003eb-\u003eT b-\u003e(T a,T a)",
        "package": "synthesizer",
        "partial": "Dsound",
        "signature": "a-\u003ea-\u003ev-\u003eT v-\u003e(T a,T a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Noise.html#v:randomPeeks",
      "description": {
        "fct-descr": "momentary densities, \u003ctt\u003ep\u003c/tt\u003e means that there is about one peak\n                      in the time range of \u003ctt\u003e1/p\u003c/tt\u003e samples \nEvery occurence of \u003ctt\u003e\u003ca\u003eTrue\u003c/a\u003e\u003c/tt\u003e represents a peak. \n",
        "fct-module": "Synthesizer.State.Noise",
        "fct-package": "synthesizer",
        "fct-signature": "T y-\u003e T Bool",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Noise.html#randomPeeks",
        "fct-type": "unknown",
        "title": "randomPeeks"
      },
      "index": {
        "description": "momentary densities means that there is about one peak in the time range of samples Every occurence of True represents peak",
        "hierarchy": "Synthesizer State Noise",
        "module": "Synthesizer.State.Noise",
        "name": "randomPeeks",
        "normalized": "T a-\u003eT Bool",
        "package": "synthesizer",
        "partial": "Peeks",
        "signature": "T y-\u003eT Bool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Noise.html#v:randomPeeksGen",
      "description": {
        "fct-module": "Synthesizer.State.Noise",
        "fct-package": "synthesizer",
        "fct-signature": "g -\u003e T y -\u003e T Bool",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Noise.html#randomPeeksGen",
        "fct-type": "unknown",
        "title": "randomPeeksGen"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Noise",
        "module": "Synthesizer.State.Noise",
        "name": "randomPeeksGen",
        "normalized": "a-\u003eT b-\u003eT Bool",
        "package": "synthesizer",
        "partial": "Peeks Gen",
        "signature": "g-\u003eT y-\u003eT Bool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Noise.html#v:randomRs",
      "description": {
        "fct-module": "Synthesizer.State.Noise",
        "fct-package": "synthesizer",
        "fct-signature": "(y, y) -\u003e g -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Noise.html#randomRs",
        "fct-type": "unknown",
        "title": "randomRs"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Noise",
        "module": "Synthesizer.State.Noise",
        "name": "randomRs",
        "normalized": "(a,a)-\u003eb-\u003eT a",
        "package": "synthesizer",
        "partial": "Rs",
        "signature": "(y,y)-\u003eg-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Noise.html#v:white",
      "description": {
        "fct-descr": "Deterministic white noise, uniformly distributed between -1 and 1.\nThat is, variance is 1/3.\n",
        "fct-module": "Synthesizer.State.Noise",
        "fct-package": "synthesizer",
        "fct-signature": "T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Noise.html#white",
        "fct-type": "unknown",
        "title": "white"
      },
      "index": {
        "description": "Deterministic white noise uniformly distributed between and That is variance is",
        "hierarchy": "Synthesizer State Noise",
        "module": "Synthesizer.State.Noise",
        "name": "white",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Noise.html#v:whiteGen",
      "description": {
        "fct-module": "Synthesizer.State.Noise",
        "fct-package": "synthesizer",
        "fct-signature": "g -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Noise.html#whiteGen",
        "fct-type": "unknown",
        "title": "whiteGen"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Noise",
        "module": "Synthesizer.State.Noise",
        "name": "whiteGen",
        "normalized": "a-\u003eT b",
        "package": "synthesizer",
        "partial": "Gen",
        "signature": "g-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Noise.html#v:whiteQuadraticBSplineGen",
      "description": {
        "fct-descr": "Approximates normal distribution with variance 1\nby a quadratic B-spline distribution.\n",
        "fct-module": "Synthesizer.State.Noise",
        "fct-package": "synthesizer",
        "fct-signature": "g -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Noise.html#whiteQuadraticBSplineGen",
        "fct-type": "unknown",
        "title": "whiteQuadraticBSplineGen"
      },
      "index": {
        "description": "Approximates normal distribution with variance by quadratic B-spline distribution",
        "hierarchy": "Synthesizer State Noise",
        "module": "Synthesizer.State.Noise",
        "name": "whiteQuadraticBSplineGen",
        "normalized": "a-\u003eT b",
        "package": "synthesizer",
        "partial": "Quadratic BSpline Gen",
        "signature": "g-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-NoiseCustom.html#v:randomPeeks",
      "description": {
        "fct-descr": "momentary densities, \u003ctt\u003ep\u003c/tt\u003e means that there is about one peak\n                      in the time range of \u003ctt\u003e1/p\u003c/tt\u003e samples \nEvery occurence of \u003ctt\u003e\u003ca\u003eTrue\u003c/a\u003e\u003c/tt\u003e represents a peak. \n",
        "fct-module": "Synthesizer.State.NoiseCustom",
        "fct-package": "synthesizer",
        "fct-signature": "T y-\u003e T Bool",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-NoiseCustom.html#randomPeeks",
        "fct-type": "unknown",
        "title": "randomPeeks"
      },
      "index": {
        "description": "momentary densities means that there is about one peak in the time range of samples Every occurence of True represents peak",
        "hierarchy": "Synthesizer State NoiseCustom",
        "module": "Synthesizer.State.NoiseCustom",
        "name": "randomPeeks",
        "normalized": "T a-\u003eT Bool",
        "package": "synthesizer",
        "partial": "Peeks",
        "signature": "T y-\u003eT Bool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-NoiseCustom.html#v:randomPeeksGen",
      "description": {
        "fct-module": "Synthesizer.State.NoiseCustom",
        "fct-package": "synthesizer",
        "fct-signature": "g -\u003e T y -\u003e T Bool",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-NoiseCustom.html#randomPeeksGen",
        "fct-type": "unknown",
        "title": "randomPeeksGen"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State NoiseCustom",
        "module": "Synthesizer.State.NoiseCustom",
        "name": "randomPeeksGen",
        "normalized": "a-\u003eT b-\u003eT Bool",
        "package": "synthesizer",
        "partial": "Peeks Gen",
        "signature": "g-\u003eT y-\u003eT Bool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-NoiseCustom.html#v:randomR",
      "description": {
        "fct-module": "Synthesizer.State.NoiseCustom",
        "fct-package": "synthesizer",
        "fct-signature": "(y, y) -\u003e g -\u003e (y, g)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-NoiseCustom.html#randomR",
        "fct-type": "unknown",
        "title": "randomR"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State NoiseCustom",
        "module": "Synthesizer.State.NoiseCustom",
        "name": "randomR",
        "normalized": "(a,a)-\u003eb-\u003e(a,b)",
        "package": "synthesizer",
        "partial": "",
        "signature": "(y,y)-\u003eg-\u003e(y,g)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-NoiseCustom.html#v:randomRs",
      "description": {
        "fct-module": "Synthesizer.State.NoiseCustom",
        "fct-package": "synthesizer",
        "fct-signature": "(y, y) -\u003e g -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-NoiseCustom.html#randomRs",
        "fct-type": "unknown",
        "title": "randomRs"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State NoiseCustom",
        "module": "Synthesizer.State.NoiseCustom",
        "name": "randomRs",
        "normalized": "(a,a)-\u003eb-\u003eT a",
        "package": "synthesizer",
        "partial": "Rs",
        "signature": "(y,y)-\u003eg-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-NoiseCustom.html#v:white",
      "description": {
        "fct-descr": "Deterministic white noise, uniformly distributed between -1 and 1.\nThat is, variance is 1/3.\n",
        "fct-module": "Synthesizer.State.NoiseCustom",
        "fct-package": "synthesizer",
        "fct-signature": "T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-NoiseCustom.html#white",
        "fct-type": "unknown",
        "title": "white"
      },
      "index": {
        "description": "Deterministic white noise uniformly distributed between and That is variance is",
        "hierarchy": "Synthesizer State NoiseCustom",
        "module": "Synthesizer.State.NoiseCustom",
        "name": "white",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-NoiseCustom.html#v:whiteGen",
      "description": {
        "fct-module": "Synthesizer.State.NoiseCustom",
        "fct-package": "synthesizer",
        "fct-signature": "g -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-NoiseCustom.html#whiteGen",
        "fct-type": "unknown",
        "title": "whiteGen"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State NoiseCustom",
        "module": "Synthesizer.State.NoiseCustom",
        "name": "whiteGen",
        "normalized": "a-\u003eT b",
        "package": "synthesizer",
        "partial": "Gen",
        "signature": "g-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-NoiseCustom.html#v:whiteQuadraticBSplineGen",
      "description": {
        "fct-descr": "Approximates normal distribution with variance 1\nby a quadratic B-spline distribution.\n",
        "fct-module": "Synthesizer.State.NoiseCustom",
        "fct-package": "synthesizer",
        "fct-signature": "g -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-NoiseCustom.html#whiteQuadraticBSplineGen",
        "fct-type": "unknown",
        "title": "whiteQuadraticBSplineGen"
      },
      "index": {
        "description": "Approximates normal distribution with variance by quadratic B-spline distribution",
        "hierarchy": "Synthesizer State NoiseCustom",
        "module": "Synthesizer.State.NoiseCustom",
        "name": "whiteQuadraticBSplineGen",
        "normalized": "a-\u003eT b",
        "package": "synthesizer",
        "partial": "Quadratic BSpline Gen",
        "signature": "g-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Oscillator.html#v:freqMod",
      "description": {
        "fct-descr": "oscillator with modulated frequency \n",
        "fct-module": "Synthesizer.State.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "T a b -\u003e T a -\u003e T a -\u003e T b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Oscillator.html#freqMod",
        "fct-type": "unknown",
        "title": "freqMod"
      },
      "index": {
        "description": "oscillator with modulated frequency",
        "hierarchy": "Synthesizer State Oscillator",
        "module": "Synthesizer.State.Oscillator",
        "name": "freqMod",
        "normalized": "T a b-\u003eT a-\u003eT a-\u003eT b",
        "package": "synthesizer",
        "partial": "Mod",
        "signature": "T a b-\u003eT a-\u003eT a-\u003eT b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Oscillator.html#v:freqModAntiAlias",
      "description": {
        "fct-descr": "oscillator with modulated frequency \n",
        "fct-module": "Synthesizer.State.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "T a b -\u003e T a -\u003e T a -\u003e T b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Oscillator.html#freqModAntiAlias",
        "fct-type": "unknown",
        "title": "freqModAntiAlias"
      },
      "index": {
        "description": "oscillator with modulated frequency",
        "hierarchy": "Synthesizer State Oscillator",
        "module": "Synthesizer.State.Oscillator",
        "name": "freqModAntiAlias",
        "normalized": "T a b-\u003eT a-\u003eT a-\u003eT b",
        "package": "synthesizer",
        "partial": "Mod Anti Alias",
        "signature": "T a b-\u003eT a-\u003eT a-\u003eT b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Oscillator.html#v:freqModSample",
      "description": {
        "fct-descr": "oscillator with a sampled waveform with modulated frequency\n     Should behave homogenously for different types of interpolation. \n",
        "fct-module": "Synthesizer.State.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "T a b -\u003e T b -\u003e T a -\u003e T a -\u003e T b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Oscillator.html#freqModSample",
        "fct-type": "unknown",
        "title": "freqModSample"
      },
      "index": {
        "description": "oscillator with sampled waveform with modulated frequency Should behave homogenously for different types of interpolation",
        "hierarchy": "Synthesizer State Oscillator",
        "module": "Synthesizer.State.Oscillator",
        "name": "freqModSample",
        "normalized": "T a b-\u003eT b-\u003eT a-\u003eT a-\u003eT b",
        "package": "synthesizer",
        "partial": "Mod Sample",
        "signature": "T a b-\u003eT b-\u003eT a-\u003eT a-\u003eT b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Oscillator.html#v:freqModSaw",
      "description": {
        "fct-descr": "saw tooth oscillator with modulated frequency \n",
        "fct-module": "Synthesizer.State.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Oscillator.html#freqModSaw",
        "fct-type": "unknown",
        "title": "freqModSaw"
      },
      "index": {
        "description": "saw tooth oscillator with modulated frequency",
        "hierarchy": "Synthesizer State Oscillator",
        "module": "Synthesizer.State.Oscillator",
        "name": "freqModSaw",
        "normalized": "T a-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "Mod Saw",
        "signature": "T a-\u003eT a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Oscillator.html#v:freqModSine",
      "description": {
        "fct-descr": "sine oscillator with modulated frequency \n",
        "fct-module": "Synthesizer.State.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Oscillator.html#freqModSine",
        "fct-type": "unknown",
        "title": "freqModSine"
      },
      "index": {
        "description": "sine oscillator with modulated frequency",
        "hierarchy": "Synthesizer State Oscillator",
        "module": "Synthesizer.State.Oscillator",
        "name": "freqModSine",
        "normalized": "T a-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "Mod Sine",
        "signature": "T a-\u003eT a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Oscillator.html#v:phaseFreqMod",
      "description": {
        "fct-descr": "oscillator with both phase and frequency modulation \n",
        "fct-module": "Synthesizer.State.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "T a b -\u003e T a -\u003e T a -\u003e T b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Oscillator.html#phaseFreqMod",
        "fct-type": "unknown",
        "title": "phaseFreqMod"
      },
      "index": {
        "description": "oscillator with both phase and frequency modulation",
        "hierarchy": "Synthesizer State Oscillator",
        "module": "Synthesizer.State.Oscillator",
        "name": "phaseFreqMod",
        "normalized": "T a b-\u003eT a-\u003eT a-\u003eT b",
        "package": "synthesizer",
        "partial": "Freq Mod",
        "signature": "T a b-\u003eT a-\u003eT a-\u003eT b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Oscillator.html#v:phaseMod",
      "description": {
        "fct-descr": "oscillator with modulated phase \n",
        "fct-module": "Synthesizer.State.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "T a b -\u003e a -\u003e T a -\u003e T b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Oscillator.html#phaseMod",
        "fct-type": "unknown",
        "title": "phaseMod"
      },
      "index": {
        "description": "oscillator with modulated phase",
        "hierarchy": "Synthesizer State Oscillator",
        "module": "Synthesizer.State.Oscillator",
        "name": "phaseMod",
        "normalized": "T a b-\u003ea-\u003eT a-\u003eT b",
        "package": "synthesizer",
        "partial": "Mod",
        "signature": "T a b-\u003ea-\u003eT a-\u003eT b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Oscillator.html#v:phaseModSine",
      "description": {
        "fct-descr": "sine oscillator with modulated phase, useful for FM synthesis \n",
        "fct-module": "Synthesizer.State.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Oscillator.html#phaseModSine",
        "fct-type": "unknown",
        "title": "phaseModSine"
      },
      "index": {
        "description": "sine oscillator with modulated phase useful for FM synthesis",
        "hierarchy": "Synthesizer State Oscillator",
        "module": "Synthesizer.State.Oscillator",
        "name": "phaseModSine",
        "normalized": "a-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "Mod Sine",
        "signature": "a-\u003eT a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Oscillator.html#v:shapeFreqMod",
      "description": {
        "fct-descr": "oscillator with both shape and frequency modulation \n",
        "fct-module": "Synthesizer.State.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "(c -\u003e T a b) -\u003e T a -\u003e T c -\u003e T a -\u003e T b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Oscillator.html#shapeFreqMod",
        "fct-type": "unknown",
        "title": "shapeFreqMod"
      },
      "index": {
        "description": "oscillator with both shape and frequency modulation",
        "hierarchy": "Synthesizer State Oscillator",
        "module": "Synthesizer.State.Oscillator",
        "name": "shapeFreqMod",
        "normalized": "(a-\u003eT b c)-\u003eT b-\u003eT a-\u003eT b-\u003eT c",
        "package": "synthesizer",
        "partial": "Freq Mod",
        "signature": "(c-\u003eT a b)-\u003eT a-\u003eT c-\u003eT a-\u003eT b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Oscillator.html#v:shapeFreqModFromSampledTone",
      "description": {
        "fct-module": "Synthesizer.State.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "T a b -\u003e T a b -\u003e a -\u003e sig b -\u003e a -\u003e T a -\u003e T a -\u003e T a -\u003e T b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Oscillator.html#shapeFreqModFromSampledTone",
        "fct-type": "unknown",
        "title": "shapeFreqModFromSampledTone"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Oscillator",
        "module": "Synthesizer.State.Oscillator",
        "name": "shapeFreqModFromSampledTone",
        "normalized": "T a b-\u003eT a b-\u003ea-\u003ec b-\u003ea-\u003eT a-\u003eT a-\u003eT a-\u003eT b",
        "package": "synthesizer",
        "partial": "Freq Mod From Sampled Tone",
        "signature": "T a b-\u003eT a b-\u003ea-\u003esig b-\u003ea-\u003eT a-\u003eT a-\u003eT a-\u003eT b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Oscillator.html#v:shapeFreqModSample",
      "description": {
        "fct-module": "Synthesizer.State.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "T c (T a b) -\u003e T (T a b) -\u003e c -\u003e T a -\u003e T c -\u003e T a -\u003e T b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Oscillator.html#shapeFreqModSample",
        "fct-type": "unknown",
        "title": "shapeFreqModSample"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Oscillator",
        "module": "Synthesizer.State.Oscillator",
        "name": "shapeFreqModSample",
        "normalized": "T a(T b c)-\u003eT(T b c)-\u003ea-\u003eT b-\u003eT a-\u003eT b-\u003eT c",
        "package": "synthesizer",
        "partial": "Freq Mod Sample",
        "signature": "T c(T a b)-\u003eT(T a b)-\u003ec-\u003eT a-\u003eT c-\u003eT a-\u003eT b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Oscillator.html#v:shapeMod",
      "description": {
        "fct-descr": "oscillator with modulated shape \n",
        "fct-module": "Synthesizer.State.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "(c -\u003e T a b) -\u003e T a -\u003e a -\u003e T c -\u003e T b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Oscillator.html#shapeMod",
        "fct-type": "unknown",
        "title": "shapeMod"
      },
      "index": {
        "description": "oscillator with modulated shape",
        "hierarchy": "Synthesizer State Oscillator",
        "module": "Synthesizer.State.Oscillator",
        "name": "shapeMod",
        "normalized": "(a-\u003eT b c)-\u003eT b-\u003eb-\u003eT a-\u003eT c",
        "package": "synthesizer",
        "partial": "Mod",
        "signature": "(c-\u003eT a b)-\u003eT a-\u003ea-\u003eT c-\u003eT b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Oscillator.html#v:shapePhaseFreqModFromSampledTone",
      "description": {
        "fct-module": "Synthesizer.State.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "T a b -\u003e T a b -\u003e a -\u003e sig b -\u003e a -\u003e T a -\u003e T a -\u003e T a -\u003e T a -\u003e T b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Oscillator.html#shapePhaseFreqModFromSampledTone",
        "fct-type": "unknown",
        "title": "shapePhaseFreqModFromSampledTone"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Oscillator",
        "module": "Synthesizer.State.Oscillator",
        "name": "shapePhaseFreqModFromSampledTone",
        "normalized": "T a b-\u003eT a b-\u003ea-\u003ec b-\u003ea-\u003eT a-\u003eT a-\u003eT a-\u003eT a-\u003eT b",
        "package": "synthesizer",
        "partial": "Phase Freq Mod From Sampled Tone",
        "signature": "T a b-\u003eT a b-\u003ea-\u003esig b-\u003ea-\u003eT a-\u003eT a-\u003eT a-\u003eT a-\u003eT b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Oscillator.html#v:static",
      "description": {
        "fct-descr": "Oscillator with constant frequency.\nIt causes aliasing effects for sharp waveforms and high frequencies.\n",
        "fct-module": "Synthesizer.State.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "T a b -\u003e T a -\u003e a -\u003e T b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Oscillator.html#static",
        "fct-type": "unknown",
        "title": "static"
      },
      "index": {
        "description": "Oscillator with constant frequency It causes aliasing effects for sharp waveforms and high frequencies",
        "hierarchy": "Synthesizer State Oscillator",
        "module": "Synthesizer.State.Oscillator",
        "name": "static",
        "normalized": "T a b-\u003eT a-\u003ea-\u003eT b",
        "package": "synthesizer",
        "partial": "",
        "signature": "T a b-\u003eT a-\u003ea-\u003eT b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Oscillator.html#v:staticAntiAlias",
      "description": {
        "fct-descr": "Oscillator with constant frequency\nthat suppresses aliasing effects using waveforms with controllable smoothness.\n",
        "fct-module": "Synthesizer.State.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "T a b -\u003e T a -\u003e a -\u003e T b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Oscillator.html#staticAntiAlias",
        "fct-type": "unknown",
        "title": "staticAntiAlias"
      },
      "index": {
        "description": "Oscillator with constant frequency that suppresses aliasing effects using waveforms with controllable smoothness",
        "hierarchy": "Synthesizer State Oscillator",
        "module": "Synthesizer.State.Oscillator",
        "name": "staticAntiAlias",
        "normalized": "T a b-\u003eT a-\u003ea-\u003eT b",
        "package": "synthesizer",
        "partial": "Anti Alias",
        "signature": "T a b-\u003eT a-\u003ea-\u003eT b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Oscillator.html#v:staticSample",
      "description": {
        "fct-descr": "oscillator with a sampled waveform with constant frequency\n     This essentially an interpolation with cyclic padding. \n",
        "fct-module": "Synthesizer.State.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "T a b -\u003e T b -\u003e T a -\u003e a -\u003e T b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Oscillator.html#staticSample",
        "fct-type": "unknown",
        "title": "staticSample"
      },
      "index": {
        "description": "oscillator with sampled waveform with constant frequency This essentially an interpolation with cyclic padding",
        "hierarchy": "Synthesizer State Oscillator",
        "module": "Synthesizer.State.Oscillator",
        "name": "staticSample",
        "normalized": "T a b-\u003eT b-\u003eT a-\u003ea-\u003eT b",
        "package": "synthesizer",
        "partial": "Sample",
        "signature": "T a b-\u003eT b-\u003eT a-\u003ea-\u003eT b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Oscillator.html#v:staticSaw",
      "description": {
        "fct-descr": "saw tooth oscillator with modulated frequency \n",
        "fct-module": "Synthesizer.State.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Oscillator.html#staticSaw",
        "fct-type": "unknown",
        "title": "staticSaw"
      },
      "index": {
        "description": "saw tooth oscillator with modulated frequency",
        "hierarchy": "Synthesizer State Oscillator",
        "module": "Synthesizer.State.Oscillator",
        "name": "staticSaw",
        "normalized": "T a-\u003ea-\u003eT a",
        "package": "synthesizer",
        "partial": "Saw",
        "signature": "T a-\u003ea-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Oscillator.html#v:staticSine",
      "description": {
        "fct-descr": "sine oscillator with static frequency \n",
        "fct-module": "Synthesizer.State.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Oscillator.html#staticSine",
        "fct-type": "unknown",
        "title": "staticSine"
      },
      "index": {
        "description": "sine oscillator with static frequency",
        "hierarchy": "Synthesizer State Oscillator",
        "module": "Synthesizer.State.Oscillator",
        "name": "staticSine",
        "normalized": "T a-\u003ea-\u003eT a",
        "package": "synthesizer",
        "partial": "Sine",
        "signature": "T a-\u003ea-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#t:T",
      "description": {
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "data",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#T",
        "fct-type": "unknown",
        "title": "T"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "T",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:append",
      "description": {
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#append",
        "fct-type": "unknown",
        "title": "append"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "append",
        "normalized": "T a-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "T a-\u003eT a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:appendStored",
      "description": {
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#appendStored",
        "fct-type": "unknown",
        "title": "appendStored"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "appendStored",
        "normalized": "T a-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "Stored",
        "signature": "T a-\u003eT a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:appendStoredSize",
      "description": {
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "ChunkSize -\u003e T a -\u003e T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#appendStoredSize",
        "fct-type": "unknown",
        "title": "appendStoredSize"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "appendStoredSize",
        "normalized": "ChunkSize-\u003eT a-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "Stored Size",
        "signature": "ChunkSize-\u003eT a-\u003eT a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:concat",
      "description": {
        "fct-descr": "certainly inefficient because of frequent list deconstruction\n",
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "[T a] -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#concat",
        "fct-type": "unknown",
        "title": "concat"
      },
      "index": {
        "description": "certainly inefficient because of frequent list deconstruction",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "concat",
        "normalized": "[T a]-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "[T a]-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:concatStored",
      "description": {
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "[T a] -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#concatStored",
        "fct-type": "unknown",
        "title": "concatStored"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "concatStored",
        "normalized": "[T a]-\u003eT a",
        "package": "synthesizer",
        "partial": "Stored",
        "signature": "[T a]-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:concatStoredSize",
      "description": {
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "ChunkSize -\u003e [T a] -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#concatStoredSize",
        "fct-type": "unknown",
        "title": "concatStoredSize"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "concatStoredSize",
        "normalized": "ChunkSize-\u003e[T a]-\u003eT a",
        "package": "synthesizer",
        "partial": "Stored Size",
        "signature": "ChunkSize-\u003e[T a]-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:cons",
      "description": {
        "fct-descr": "This is expensive and should not be used to construct lists iteratively!\n",
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#cons",
        "fct-type": "unknown",
        "title": "cons"
      },
      "index": {
        "description": "This is expensive and should not be used to construct lists iteratively",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "cons",
        "normalized": "a-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "a-\u003eT a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:crochetL",
      "description": {
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(x -\u003e acc -\u003e Maybe (y, acc)) -\u003e acc -\u003e T x -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#crochetL",
        "fct-type": "unknown",
        "title": "crochetL"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "crochetL",
        "normalized": "(a-\u003eb-\u003eMaybe(c,b))-\u003eb-\u003eT a-\u003eT c",
        "package": "synthesizer",
        "partial": "",
        "signature": "(x-\u003eacc-\u003eMaybe(y,acc))-\u003eacc-\u003eT x-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:cycle",
      "description": {
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#cycle",
        "fct-type": "unknown",
        "title": "cycle"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "cycle",
        "normalized": "T a-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "T a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:delay",
      "description": {
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "y -\u003e Int -\u003e T y -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#delay",
        "fct-type": "unknown",
        "title": "delay"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "delay",
        "normalized": "a-\u003eInt-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "y-\u003eInt-\u003eT y-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:delay1",
      "description": {
        "fct-descr": "This is a fusion friendly implementation of delay.\nHowever, in order to be a \u003ctt\u003e\u003ca\u003ecrochetL\u003c/a\u003e\u003c/tt\u003e\nthe output has the same length as the input,\nthat is, the last element is removed - at least for finite input.\n",
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#delay1",
        "fct-type": "unknown",
        "title": "delay1"
      },
      "index": {
        "description": "This is fusion friendly implementation of delay However in order to be crochetL the output has the same length as the input that is the last element is removed at least for finite input",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "delay1",
        "normalized": "a-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "a-\u003eT a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:delayLoop",
      "description": {
        "fct-descr": "processor that shall be run in a feedback loop\nprefix of the output, its length determines the delay\n",
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T y -\u003e T y-\u003e T y-\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#delayLoop",
        "fct-type": "unknown",
        "title": "delayLoop"
      },
      "index": {
        "description": "processor that shall be run in feedback loop prefix of the output its length determines the delay",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "delayLoop",
        "normalized": "T a-\u003eT a-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "Loop",
        "signature": "T y-\u003eT y-\u003eT y-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:delayLoopOverlap",
      "description": {
        "fct-descr": "processor that shall be run in a feedback loop\ninput\noutput has the same length as the input\n",
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "Int-\u003e T y -\u003e T y-\u003e T y-\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#delayLoopOverlap",
        "fct-type": "unknown",
        "title": "delayLoopOverlap"
      },
      "index": {
        "description": "processor that shall be run in feedback loop input output has the same length as the input",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "delayLoopOverlap",
        "normalized": "Int-\u003eT a-\u003eT a-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "Loop Overlap",
        "signature": "Int-\u003eT y-\u003eT y-\u003eT y-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:drop",
      "description": {
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#drop",
        "fct-type": "unknown",
        "title": "drop"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "drop",
        "normalized": "Int-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "Int-\u003eT a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:dropMargin",
      "description": {
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e Int -\u003e T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#dropMargin",
        "fct-type": "unknown",
        "title": "dropMargin"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "dropMargin",
        "normalized": "Int-\u003eInt-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "Margin",
        "signature": "Int-\u003eInt-\u003eT a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:dropMarginRem",
      "description": {
        "fct-descr": "This implementation expects that looking ahead is cheap.\n",
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e Int -\u003e T a -\u003e (Int, T a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#dropMarginRem",
        "fct-type": "unknown",
        "title": "dropMarginRem"
      },
      "index": {
        "description": "This implementation expects that looking ahead is cheap",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "dropMarginRem",
        "normalized": "Int-\u003eInt-\u003eT a-\u003e(Int,T a)",
        "package": "synthesizer",
        "partial": "Margin Rem",
        "signature": "Int-\u003eInt-\u003eT a-\u003e(Int,T a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:dropMatch",
      "description": {
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T b -\u003e T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#dropMatch",
        "fct-type": "unknown",
        "title": "dropMatch"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "dropMatch",
        "normalized": "T a-\u003eT b-\u003eT b",
        "package": "synthesizer",
        "partial": "Match",
        "signature": "T b-\u003eT a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:dropWhile",
      "description": {
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(a -\u003e Bool) -\u003e T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#dropWhile",
        "fct-type": "unknown",
        "title": "dropWhile"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "dropWhile",
        "normalized": "(a-\u003eBool)-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "While",
        "signature": "(a-\u003eBool)-\u003eT a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:empty",
      "description": {
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#empty",
        "fct-type": "unknown",
        "title": "empty"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "empty",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:extendConstant",
      "description": {
        "fct-descr": "This implementation requires\nthat the input generator has to check repeatedly whether it is finished.\n",
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#extendConstant",
        "fct-type": "unknown",
        "title": "extendConstant"
      },
      "index": {
        "description": "This implementation requires that the input generator has to check repeatedly whether it is finished",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "extendConstant",
        "normalized": "T a-\u003eT a",
        "package": "synthesizer",
        "partial": "Constant",
        "signature": "T a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:foldL",
      "description": {
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(acc -\u003e x -\u003e acc) -\u003e acc -\u003e T x -\u003e acc",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#foldL",
        "fct-type": "unknown",
        "title": "foldL"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "foldL",
        "normalized": "(a-\u003eb-\u003ea)-\u003ea-\u003eT b-\u003ea",
        "package": "synthesizer",
        "partial": "",
        "signature": "(acc-\u003ex-\u003eacc)-\u003eacc-\u003eT x-\u003eacc"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:foldL'",
      "description": {
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(x -\u003e acc -\u003e acc) -\u003e acc -\u003e T x -\u003e acc",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#foldL%27",
        "fct-type": "unknown",
        "title": "foldL'"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "foldL'",
        "normalized": "(a-\u003eb-\u003eb)-\u003eb-\u003eT a-\u003eb",
        "package": "synthesizer",
        "partial": "L'",
        "signature": "(x-\u003eacc-\u003eacc)-\u003eacc-\u003eT x-\u003eacc"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:foldR",
      "description": {
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(x -\u003e acc -\u003e acc) -\u003e acc -\u003e T x -\u003e acc",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#foldR",
        "fct-type": "unknown",
        "title": "foldR"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "foldR",
        "normalized": "(a-\u003eb-\u003eb)-\u003eb-\u003eT a-\u003eb",
        "package": "synthesizer",
        "partial": "",
        "signature": "(x-\u003eacc-\u003eacc)-\u003eacc-\u003eT x-\u003eacc"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:fromList",
      "description": {
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "[y] -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#fromList",
        "fct-type": "unknown",
        "title": "fromList"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "fromList",
        "normalized": "[a]-\u003eT a",
        "package": "synthesizer",
        "partial": "List",
        "signature": "[y]-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:fromStorableSignal",
      "description": {
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#fromStorableSignal",
        "fct-type": "unknown",
        "title": "fromStorableSignal"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "fromStorableSignal",
        "normalized": "T a-\u003eT a",
        "package": "synthesizer",
        "partial": "Storable Signal",
        "signature": "T a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:generate",
      "description": {
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(acc -\u003e Maybe (y, acc)) -\u003e acc -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#generate",
        "fct-type": "unknown",
        "title": "generate"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "generate",
        "normalized": "(a-\u003eMaybe(b,a))-\u003ea-\u003eT b",
        "package": "synthesizer",
        "partial": "",
        "signature": "(acc-\u003eMaybe(y,acc))-\u003eacc-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:generateInfinite",
      "description": {
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(acc -\u003e (y, acc)) -\u003e acc -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#generateInfinite",
        "fct-type": "unknown",
        "title": "generateInfinite"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "generateInfinite",
        "normalized": "(a-\u003e(b,a))-\u003ea-\u003eT b",
        "package": "synthesizer",
        "partial": "Infinite",
        "signature": "(acc-\u003e(y,acc))-\u003eacc-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:index",
      "description": {
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e T a -\u003e a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#index",
        "fct-type": "unknown",
        "title": "index"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "index",
        "normalized": "Int-\u003eT a-\u003ea",
        "package": "synthesizer",
        "partial": "",
        "signature": "Int-\u003eT a-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:init",
      "description": {
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T y -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#init",
        "fct-type": "unknown",
        "title": "init"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "init",
        "normalized": "T a-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "T y-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:iterate",
      "description": {
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(a -\u003e a) -\u003e a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#iterate",
        "fct-type": "unknown",
        "title": "iterate"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "iterate",
        "normalized": "(a-\u003ea)-\u003ea-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "(a-\u003ea)-\u003ea-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:iterateAssociative",
      "description": {
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(a -\u003e a -\u003e a) -\u003e a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#iterateAssociative",
        "fct-type": "unknown",
        "title": "iterateAssociative"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "iterateAssociative",
        "normalized": "(a-\u003ea-\u003ea)-\u003ea-\u003eT a",
        "package": "synthesizer",
        "partial": "Associative",
        "signature": "(a-\u003ea-\u003ea)-\u003ea-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:length",
      "description": {
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e Int",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#length",
        "fct-type": "unknown",
        "title": "length"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "length",
        "normalized": "T a-\u003eInt",
        "package": "synthesizer",
        "partial": "",
        "signature": "T a-\u003eInt"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:linearComb",
      "description": {
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T t -\u003e T y -\u003e y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#linearComb",
        "fct-type": "unknown",
        "title": "linearComb"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "linearComb",
        "normalized": "T a-\u003eT b-\u003eb",
        "package": "synthesizer",
        "partial": "Comb",
        "signature": "T t-\u003eT y-\u003ey"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:map",
      "description": {
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(a -\u003e b) -\u003e T a -\u003e T b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#map",
        "fct-type": "unknown",
        "title": "map"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "map",
        "normalized": "(a-\u003eb)-\u003eT a-\u003eT b",
        "package": "synthesizer",
        "partial": "",
        "signature": "(a-\u003eb)-\u003eT a-\u003eT b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:mapM_",
      "description": {
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(a -\u003e m ()) -\u003e T a -\u003e m ()",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#mapM_",
        "fct-type": "unknown",
        "title": "mapM_"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "mapM_",
        "normalized": "(a-\u003eb())-\u003eT a-\u003eb()",
        "package": "synthesizer",
        "partial": "",
        "signature": "(a-\u003em())-\u003eT a-\u003em()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:mapTails",
      "description": {
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(T y0 -\u003e y1) -\u003e T y0 -\u003e T y1",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#mapTails",
        "fct-type": "unknown",
        "title": "mapTails"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "mapTails",
        "normalized": "(T a-\u003ea)-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "Tails",
        "signature": "(T y-\u003ey)-\u003eT y-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:maximum",
      "description": {
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#maximum",
        "fct-type": "unknown",
        "title": "maximum"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "maximum",
        "normalized": "T a-\u003ea",
        "package": "synthesizer",
        "partial": "",
        "signature": "T a-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:mix",
      "description": {
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#mix",
        "fct-type": "unknown",
        "title": "mix"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "mix",
        "normalized": "T a-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "T a-\u003eT a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:modifyModulated",
      "description": {
        "fct-descr": "Here the control may vary over the time. \n",
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "Simple s ctrl a b -\u003e T ctrl -\u003e T a -\u003e T b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#modifyModulated",
        "fct-type": "unknown",
        "title": "modifyModulated"
      },
      "index": {
        "description": "Here the control may vary over the time",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "modifyModulated",
        "normalized": "Simple a b c d-\u003eT b-\u003eT c-\u003eT d",
        "package": "synthesizer",
        "partial": "Modulated",
        "signature": "Simple s ctrl a b-\u003eT ctrl-\u003eT a-\u003eT b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:modifyStatic",
      "description": {
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "Simple s ctrl a b -\u003e ctrl -\u003e T a -\u003e T b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#modifyStatic",
        "fct-type": "unknown",
        "title": "modifyStatic"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "modifyStatic",
        "normalized": "Simple a b c d-\u003eb-\u003eT c-\u003eT d",
        "package": "synthesizer",
        "partial": "Static",
        "signature": "Simple s ctrl a b-\u003ectrl-\u003eT a-\u003eT b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:monoidConcat",
      "description": {
        "fct-descr": "Counterpart to Data.Monoid.mconcat.\n",
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T m -\u003e m",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#monoidConcat",
        "fct-type": "unknown",
        "title": "monoidConcat"
      },
      "index": {
        "description": "Counterpart to Data.Monoid.mconcat",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "monoidConcat",
        "normalized": "T a-\u003ea",
        "package": "synthesizer",
        "partial": "Concat",
        "signature": "T m-\u003em"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:monoidConcatMap",
      "description": {
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(a -\u003e m) -\u003e T a -\u003e m",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#monoidConcatMap",
        "fct-type": "unknown",
        "title": "monoidConcatMap"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "monoidConcatMap",
        "normalized": "(a-\u003eb)-\u003eT a-\u003eb",
        "package": "synthesizer",
        "partial": "Concat Map",
        "signature": "(a-\u003em)-\u003eT a-\u003em"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:neg",
      "description": {
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#neg",
        "fct-type": "unknown",
        "title": "neg"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "neg",
        "normalized": "T a-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "T a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:null",
      "description": {
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e Bool",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#null",
        "fct-type": "unknown",
        "title": "null"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "null",
        "normalized": "T a-\u003eBool",
        "package": "synthesizer",
        "partial": "",
        "signature": "T a-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:repeat",
      "description": {
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#repeat",
        "fct-type": "unknown",
        "title": "repeat"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "repeat",
        "normalized": "a-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:replicate",
      "description": {
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#replicate",
        "fct-type": "unknown",
        "title": "replicate"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "replicate",
        "normalized": "Int-\u003ea-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "Int-\u003ea-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:reverse",
      "description": {
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#reverse",
        "fct-type": "unknown",
        "title": "reverse"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "reverse",
        "normalized": "T a-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "T a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:reverseStored",
      "description": {
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#reverseStored",
        "fct-type": "unknown",
        "title": "reverseStored"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "reverseStored",
        "normalized": "T a-\u003eT a",
        "package": "synthesizer",
        "partial": "Stored",
        "signature": "T a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:reverseStoredSize",
      "description": {
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "ChunkSize -\u003e T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#reverseStoredSize",
        "fct-type": "unknown",
        "title": "reverseStoredSize"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "reverseStoredSize",
        "normalized": "ChunkSize-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "Stored Size",
        "signature": "ChunkSize-\u003eT a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:scanL",
      "description": {
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(acc -\u003e x -\u003e acc) -\u003e acc -\u003e T x -\u003e T acc",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#scanL",
        "fct-type": "unknown",
        "title": "scanL"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "scanL",
        "normalized": "(a-\u003eb-\u003ea)-\u003ea-\u003eT b-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "(acc-\u003ex-\u003eacc)-\u003eacc-\u003eT x-\u003eT acc"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:scanLClip",
      "description": {
        "fct-descr": "input and output have equal length, that's better for fusion\n",
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(acc -\u003e x -\u003e acc) -\u003e acc -\u003e T x -\u003e T acc",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#scanLClip",
        "fct-type": "unknown",
        "title": "scanLClip"
      },
      "index": {
        "description": "input and output have equal length that better for fusion",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "scanLClip",
        "normalized": "(a-\u003eb-\u003ea)-\u003ea-\u003eT b-\u003eT a",
        "package": "synthesizer",
        "partial": "LClip",
        "signature": "(acc-\u003ex-\u003eacc)-\u003eacc-\u003eT x-\u003eT acc"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:sequence_",
      "description": {
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T (m a) -\u003e m ()",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#sequence_",
        "fct-type": "unknown",
        "title": "sequence_"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "sequence_",
        "normalized": "T(a b)-\u003ea()",
        "package": "synthesizer",
        "partial": "",
        "signature": "T(m a)-\u003em()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:singleton",
      "description": {
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#singleton",
        "fct-type": "unknown",
        "title": "singleton"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "singleton",
        "normalized": "a-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:sliceVert",
      "description": {
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e T y -\u003e [T y]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#sliceVert",
        "fct-type": "unknown",
        "title": "sliceVert"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "sliceVert",
        "normalized": "Int-\u003eT a-\u003e[T a]",
        "package": "synthesizer",
        "partial": "Vert",
        "signature": "Int-\u003eT y-\u003e[T y]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:span",
      "description": {
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(a -\u003e Bool) -\u003e T a -\u003e (T a, T a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#span",
        "fct-type": "unknown",
        "title": "span"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "span",
        "normalized": "(a-\u003eBool)-\u003eT a-\u003e(T a,T a)",
        "package": "synthesizer",
        "partial": "",
        "signature": "(a-\u003eBool)-\u003eT a-\u003e(T a,T a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:spanSize",
      "description": {
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "ChunkSize -\u003e (a -\u003e Bool) -\u003e T a -\u003e (T a, T a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#spanSize",
        "fct-type": "unknown",
        "title": "spanSize"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "spanSize",
        "normalized": "ChunkSize-\u003e(a-\u003eBool)-\u003eT a-\u003e(T a,T a)",
        "package": "synthesizer",
        "partial": "Size",
        "signature": "ChunkSize-\u003e(a-\u003eBool)-\u003eT a-\u003e(T a,T a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:splitAt",
      "description": {
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e T a -\u003e (T a, T a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#splitAt",
        "fct-type": "unknown",
        "title": "splitAt"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "splitAt",
        "normalized": "Int-\u003eT a-\u003e(T a,T a)",
        "package": "synthesizer",
        "partial": "At",
        "signature": "Int-\u003eT a-\u003e(T a,T a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:splitAtSize",
      "description": {
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "ChunkSize -\u003e Int -\u003e T a -\u003e (T a, T a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#splitAtSize",
        "fct-type": "unknown",
        "title": "splitAtSize"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "splitAtSize",
        "normalized": "ChunkSize-\u003eInt-\u003eT a-\u003e(T a,T a)",
        "package": "synthesizer",
        "partial": "At Size",
        "signature": "ChunkSize-\u003eInt-\u003eT a-\u003e(T a,T a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:sub",
      "description": {
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#sub",
        "fct-type": "unknown",
        "title": "sub"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "sub",
        "normalized": "T a-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "T a-\u003eT a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:sum",
      "description": {
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#sum",
        "fct-type": "unknown",
        "title": "sum"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "sum",
        "normalized": "T a-\u003ea",
        "package": "synthesizer",
        "partial": "",
        "signature": "T a-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:switchL",
      "description": {
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "b -\u003e (a -\u003e T a -\u003e b) -\u003e T a -\u003e b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#switchL",
        "fct-type": "unknown",
        "title": "switchL"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "switchL",
        "normalized": "a-\u003e(b-\u003eT b-\u003ea)-\u003eT b-\u003ea",
        "package": "synthesizer",
        "partial": "",
        "signature": "b-\u003e(a-\u003eT a-\u003eb)-\u003eT a-\u003eb"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:switchR",
      "description": {
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "b -\u003e (T a -\u003e a -\u003e b) -\u003e T a -\u003e b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#switchR",
        "fct-type": "unknown",
        "title": "switchR"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "switchR",
        "normalized": "a-\u003e(T b-\u003eb-\u003ea)-\u003eT b-\u003ea",
        "package": "synthesizer",
        "partial": "",
        "signature": "b-\u003e(T a-\u003ea-\u003eb)-\u003eT a-\u003eb"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:take",
      "description": {
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#take",
        "fct-type": "unknown",
        "title": "take"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "take",
        "normalized": "Int-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "Int-\u003eT a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:takeWhile",
      "description": {
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(a -\u003e Bool) -\u003e T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#takeWhile",
        "fct-type": "unknown",
        "title": "takeWhile"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "takeWhile",
        "normalized": "(a-\u003eBool)-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "While",
        "signature": "(a-\u003eBool)-\u003eT a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:toList",
      "description": {
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T y -\u003e [y]",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#toList",
        "fct-type": "unknown",
        "title": "toList"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "toList",
        "normalized": "T a-\u003e[a]",
        "package": "synthesizer",
        "partial": "List",
        "signature": "T y-\u003e[y]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:toStorableSignal",
      "description": {
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "ChunkSize -\u003e T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#toStorableSignal",
        "fct-type": "unknown",
        "title": "toStorableSignal"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "toStorableSignal",
        "normalized": "ChunkSize-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "Storable Signal",
        "signature": "ChunkSize-\u003eT a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:toStorableSignalVary",
      "description": {
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "LazySize -\u003e T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#toStorableSignalVary",
        "fct-type": "unknown",
        "title": "toStorableSignalVary"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "toStorableSignalVary",
        "normalized": "LazySize-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "Storable Signal Vary",
        "signature": "LazySize-\u003eT a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:unfoldR",
      "description": {
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(acc -\u003e Maybe (y, acc)) -\u003e acc -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#unfoldR",
        "fct-type": "unknown",
        "title": "unfoldR"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "unfoldR",
        "normalized": "(a-\u003eMaybe(b,a))-\u003ea-\u003eT b",
        "package": "synthesizer",
        "partial": "",
        "signature": "(acc-\u003eMaybe(y,acc))-\u003eacc-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:unzip",
      "description": {
        "fct-descr": "This function will recompute the input lists\nand is thus probably not what you want.\nIf you want to avoid recomputation please consider Causal.Process.\n",
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T (a, b) -\u003e (T a, T b)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#unzip",
        "fct-type": "unknown",
        "title": "unzip"
      },
      "index": {
        "description": "This function will recompute the input lists and is thus probably not what you want If you want to avoid recomputation please consider Causal.Process",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "unzip",
        "normalized": "T(a,b)-\u003e(T a,T b)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T(a,b)-\u003e(T a,T b)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:unzip3",
      "description": {
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T (a, b, c) -\u003e (T a, T b, T c)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#unzip3",
        "fct-type": "unknown",
        "title": "unzip3"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "unzip3",
        "normalized": "T(a,b,c)-\u003e(T a,T b,T c)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T(a,b,c)-\u003e(T a,T b,T c)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:viewL",
      "description": {
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e Maybe (a, T a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#viewL",
        "fct-type": "unknown",
        "title": "viewL"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "viewL",
        "normalized": "T a-\u003eMaybe(a,T a)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T a-\u003eMaybe(a,T a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:viewR",
      "description": {
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e Maybe (T a, a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#viewR",
        "fct-type": "unknown",
        "title": "viewR"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "viewR",
        "normalized": "T a-\u003eMaybe(T a,a)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T a-\u003eMaybe(T a,a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:viewRSize",
      "description": {
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "ChunkSize -\u003e T a -\u003e Maybe (T a, a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#viewRSize",
        "fct-type": "unknown",
        "title": "viewRSize"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "viewRSize",
        "normalized": "ChunkSize-\u003eT a-\u003eMaybe(T a,a)",
        "package": "synthesizer",
        "partial": "RSize",
        "signature": "ChunkSize-\u003eT a-\u003eMaybe(T a,a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:zapWith",
      "description": {
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(a -\u003e a -\u003e b) -\u003e T a -\u003e T b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#zapWith",
        "fct-type": "unknown",
        "title": "zapWith"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "zapWith",
        "normalized": "(a-\u003ea-\u003eb)-\u003eT a-\u003eT b",
        "package": "synthesizer",
        "partial": "With",
        "signature": "(a-\u003ea-\u003eb)-\u003eT a-\u003eT b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:zapWithAlt",
      "description": {
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(a -\u003e a -\u003e b) -\u003e T a -\u003e T b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#zapWithAlt",
        "fct-type": "unknown",
        "title": "zapWithAlt"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "zapWithAlt",
        "normalized": "(a-\u003ea-\u003eb)-\u003eT a-\u003eT b",
        "package": "synthesizer",
        "partial": "With Alt",
        "signature": "(a-\u003ea-\u003eb)-\u003eT a-\u003eT b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:zip",
      "description": {
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e T b -\u003e T (a, b)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#zip",
        "fct-type": "unknown",
        "title": "zip"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "zip",
        "normalized": "T a-\u003eT b-\u003eT(a,b)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T a-\u003eT b-\u003eT(a,b)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:zip3",
      "description": {
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e T b -\u003e T c -\u003e T (a, b, c)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#zip3",
        "fct-type": "unknown",
        "title": "zip3"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "zip3",
        "normalized": "T a-\u003eT b-\u003eT c-\u003eT(a,b,c)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T a-\u003eT b-\u003eT c-\u003eT(a,b,c)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:zip4",
      "description": {
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e T b -\u003e T c -\u003e T d -\u003e T (a, b, c, d)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#zip4",
        "fct-type": "unknown",
        "title": "zip4"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "zip4",
        "normalized": "T a-\u003eT b-\u003eT c-\u003eT d-\u003eT(a,b,c,d)",
        "package": "synthesizer",
        "partial": "",
        "signature": "T a-\u003eT b-\u003eT c-\u003eT d-\u003eT(a,b,c,d)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:zipStep",
      "description": {
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(a -\u003e a -\u003e a) -\u003e (T a, T a) -\u003e Maybe (a, (T a, T a))",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#zipStep",
        "fct-type": "unknown",
        "title": "zipStep"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "zipStep",
        "normalized": "(a-\u003ea-\u003ea)-\u003e(T a,T a)-\u003eMaybe(a,(T a,T a))",
        "package": "synthesizer",
        "partial": "Step",
        "signature": "(a-\u003ea-\u003ea)-\u003e(T a,T a)-\u003eMaybe(a,(T a,T a))"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:zipWith",
      "description": {
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(a -\u003e b -\u003e c) -\u003e T a -\u003e T b -\u003e T c",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#zipWith",
        "fct-type": "unknown",
        "title": "zipWith"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "zipWith",
        "normalized": "(a-\u003eb-\u003ec)-\u003eT a-\u003eT b-\u003eT c",
        "package": "synthesizer",
        "partial": "With",
        "signature": "(a-\u003eb-\u003ec)-\u003eT a-\u003eT b-\u003eT c"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:zipWith3",
      "description": {
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(a -\u003e b -\u003e c -\u003e d) -\u003e T a -\u003e T b -\u003e T c -\u003e T d",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#zipWith3",
        "fct-type": "unknown",
        "title": "zipWith3"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "zipWith3",
        "normalized": "(a-\u003eb-\u003ec-\u003ed)-\u003eT a-\u003eT b-\u003eT c-\u003eT d",
        "package": "synthesizer",
        "partial": "With",
        "signature": "(a-\u003eb-\u003ec-\u003ed)-\u003eT a-\u003eT b-\u003eT c-\u003eT d"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:zipWith4",
      "description": {
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(a -\u003e b -\u003e c -\u003e d -\u003e e) -\u003e T a -\u003e T b -\u003e T c -\u003e T d -\u003e T e",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#zipWith4",
        "fct-type": "unknown",
        "title": "zipWith4"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "zipWith4",
        "normalized": "(a-\u003eb-\u003ec-\u003ed-\u003ee)-\u003eT a-\u003eT b-\u003eT c-\u003eT d-\u003eT e",
        "package": "synthesizer",
        "partial": "With",
        "signature": "(a-\u003eb-\u003ec-\u003ed-\u003ee)-\u003eT a-\u003eT b-\u003eT c-\u003eT d-\u003eT e"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:zipWithAppend",
      "description": {
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(y -\u003e y -\u003e y) -\u003e T y -\u003e T y -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#zipWithAppend",
        "fct-type": "unknown",
        "title": "zipWithAppend"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "zipWithAppend",
        "normalized": "(a-\u003ea-\u003ea)-\u003eT a-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "With Append",
        "signature": "(y-\u003ey-\u003ey)-\u003eT y-\u003eT y-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:zipWithStorable",
      "description": {
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(a -\u003e b -\u003e c) -\u003e T a -\u003e T b -\u003e T c",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#zipWithStorable",
        "fct-type": "unknown",
        "title": "zipWithStorable"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "zipWithStorable",
        "normalized": "(a-\u003eb-\u003ec)-\u003eT a-\u003eT b-\u003eT c",
        "package": "synthesizer",
        "partial": "With Storable",
        "signature": "(a-\u003eb-\u003ec)-\u003eT a-\u003eT b-\u003eT c"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-Signal.html#v:zipWithTails",
      "description": {
        "fct-module": "Synthesizer.State.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(y0 -\u003e T y1 -\u003e y2) -\u003e T y0 -\u003e T y1 -\u003e T y2",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-Signal.html#zipWithTails",
        "fct-type": "unknown",
        "title": "zipWithTails"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State Signal",
        "module": "Synthesizer.State.Signal",
        "name": "zipWithTails",
        "normalized": "(a-\u003eT a-\u003ea)-\u003eT a-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "With Tails",
        "signature": "(y-\u003eT y-\u003ey)-\u003eT y-\u003eT y-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-ToneModulation.html#t:Cell",
      "description": {
        "fct-module": "Synthesizer.State.ToneModulation",
        "fct-package": "synthesizer",
        "fct-signature": "type",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-ToneModulation.html#Cell",
        "fct-type": "unknown",
        "title": "Cell"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State ToneModulation",
        "module": "Synthesizer.State.ToneModulation",
        "name": "Cell",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Cell",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-ToneModulation.html#t:Prototype",
      "description": {
        "fct-module": "Synthesizer.State.ToneModulation",
        "fct-package": "synthesizer",
        "fct-signature": "data",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-ToneModulation.html#Prototype",
        "fct-type": "unknown",
        "title": "Prototype"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State ToneModulation",
        "module": "Synthesizer.State.ToneModulation",
        "name": "Prototype",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Prototype",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-ToneModulation.html#v:checkNonNeg",
      "description": {
        "fct-module": "Synthesizer.State.ToneModulation",
        "fct-package": "synthesizer",
        "fct-signature": "a -\u003e a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-ToneModulation.html#checkNonNeg",
        "fct-type": "unknown",
        "title": "checkNonNeg"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State ToneModulation",
        "module": "Synthesizer.State.ToneModulation",
        "name": "checkNonNeg",
        "normalized": "a-\u003ea",
        "package": "synthesizer",
        "partial": "Non Neg",
        "signature": "a-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-ToneModulation.html#v:freqsToPhases",
      "description": {
        "fct-descr": "Convert a list of phase steps into a list of momentum phases.\nphase is a number in the interval [0,1).\nfreq contains the phase steps.\nThe last element is omitted.\n",
        "fct-module": "Synthesizer.State.ToneModulation",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e T a (T a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-ToneModulation.html#freqsToPhases",
        "fct-type": "unknown",
        "title": "freqsToPhases"
      },
      "index": {
        "description": "Convert list of phase steps into list of momentum phases phase is number in the interval freq contains the phase steps The last element is omitted",
        "hierarchy": "Synthesizer State ToneModulation",
        "module": "Synthesizer.State.ToneModulation",
        "name": "freqsToPhases",
        "normalized": "T a-\u003eT a(T a)",
        "package": "synthesizer",
        "partial": "To Phases",
        "signature": "T a-\u003eT a(T a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-ToneModulation.html#v:freqsToPhasesSync",
      "description": {
        "fct-descr": "Like \u003ctt\u003e\u003ca\u003efreqsToPhases\u003c/a\u003e\u003c/tt\u003e but the first element is omitted.\n",
        "fct-module": "Synthesizer.State.ToneModulation",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e T a (T a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-ToneModulation.html#freqsToPhasesSync",
        "fct-type": "unknown",
        "title": "freqsToPhasesSync"
      },
      "index": {
        "description": "Like freqsToPhases but the first element is omitted",
        "hierarchy": "Synthesizer State ToneModulation",
        "module": "Synthesizer.State.ToneModulation",
        "name": "freqsToPhasesSync",
        "normalized": "T a-\u003eT a(T a)",
        "package": "synthesizer",
        "partial": "To Phases Sync",
        "signature": "T a-\u003eT a(T a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-ToneModulation.html#v:interpolateCell",
      "description": {
        "fct-module": "Synthesizer.State.ToneModulation",
        "fct-package": "synthesizer",
        "fct-signature": "T a y -\u003e T b y -\u003e (a, b) -\u003e Cell sig y -\u003e y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-ToneModulation.html#interpolateCell",
        "fct-type": "unknown",
        "title": "interpolateCell"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State ToneModulation",
        "module": "Synthesizer.State.ToneModulation",
        "name": "interpolateCell",
        "normalized": "T a b-\u003eT c b-\u003e(a,c)-\u003eCell d b-\u003eb",
        "package": "synthesizer",
        "partial": "Cell",
        "signature": "T a y-\u003eT b y-\u003e(a,b)-\u003eCell sig y-\u003ey"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-ToneModulation.html#v:limitMinRelativeValues",
      "description": {
        "fct-module": "Synthesizer.State.ToneModulation",
        "fct-package": "synthesizer",
        "fct-signature": "t -\u003e (t, T t) -\u003e (t, T t)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-ToneModulation.html#limitMinRelativeValues",
        "fct-type": "unknown",
        "title": "limitMinRelativeValues"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State ToneModulation",
        "module": "Synthesizer.State.ToneModulation",
        "name": "limitMinRelativeValues",
        "normalized": "a-\u003e(a,T a)-\u003e(a,T a)",
        "package": "synthesizer",
        "partial": "Min Relative Values",
        "signature": "t-\u003e(t,T t)-\u003e(t,T t)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-ToneModulation.html#v:limitRelativeShapes",
      "description": {
        "fct-module": "Synthesizer.State.ToneModulation",
        "fct-package": "synthesizer",
        "fct-signature": "Margin -\u003e Margin -\u003e Int -\u003e (t, T t) -\u003e (t, T t)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-ToneModulation.html#limitRelativeShapes",
        "fct-type": "unknown",
        "title": "limitRelativeShapes"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State ToneModulation",
        "module": "Synthesizer.State.ToneModulation",
        "name": "limitRelativeShapes",
        "normalized": "Margin-\u003eMargin-\u003eInt-\u003e(a,T a)-\u003e(a,T a)",
        "package": "synthesizer",
        "partial": "Relative Shapes",
        "signature": "Margin-\u003eMargin-\u003eInt-\u003e(t,T t)-\u003e(t,T t)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-ToneModulation.html#v:makeCell",
      "description": {
        "fct-module": "Synthesizer.State.ToneModulation",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e sig y -\u003e Cell sig y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-ToneModulation.html#makeCell",
        "fct-type": "unknown",
        "title": "makeCell"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State ToneModulation",
        "module": "Synthesizer.State.ToneModulation",
        "name": "makeCell",
        "normalized": "Int-\u003ea b-\u003eCell a b",
        "package": "synthesizer",
        "partial": "Cell",
        "signature": "Int-\u003esig y-\u003eCell sig y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-ToneModulation.html#v:makePrototype",
      "description": {
        "fct-module": "Synthesizer.State.ToneModulation",
        "fct-package": "synthesizer",
        "fct-signature": "Margin -\u003e Margin -\u003e a -\u003e sig v -\u003e Prototype sig a v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-ToneModulation.html#makePrototype",
        "fct-type": "unknown",
        "title": "makePrototype"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State ToneModulation",
        "module": "Synthesizer.State.ToneModulation",
        "name": "makePrototype",
        "normalized": "Margin-\u003eMargin-\u003ea-\u003eb c-\u003ePrototype b a c",
        "package": "synthesizer",
        "partial": "Prototype",
        "signature": "Margin-\u003eMargin-\u003ea-\u003esig v-\u003ePrototype sig a v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-ToneModulation.html#v:oscillatorCells",
      "description": {
        "fct-descr": "This function should not be used,\nsince it requires recomputation of \u003ctt\u003eshapes\u003c/tt\u003e and \u003ctt\u003efreqs\u003c/tt\u003e lists.\n",
        "fct-module": "Synthesizer.State.ToneModulation",
        "fct-package": "synthesizer",
        "fct-signature": "Margin -\u003e Margin -\u003e t -\u003e sig y -\u003e (t, T t) -\u003e (T t, T t) -\u003e T ((t, t), Cell sig y)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-ToneModulation.html#oscillatorCells",
        "fct-type": "unknown",
        "title": "oscillatorCells"
      },
      "index": {
        "description": "This function should not be used since it requires recomputation of shapes and freqs lists",
        "hierarchy": "Synthesizer State ToneModulation",
        "module": "Synthesizer.State.ToneModulation",
        "name": "oscillatorCells",
        "normalized": "Margin-\u003eMargin-\u003ea-\u003eb c-\u003e(a,T a)-\u003e(T a,T a)-\u003eT((a,a),Cell b c)",
        "package": "synthesizer",
        "partial": "Cells",
        "signature": "Margin-\u003eMargin-\u003et-\u003esig y-\u003e(t,T t)-\u003e(T t,T t)-\u003eT((t,t),Cell sig y)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-ToneModulation.html#v:oscillatorCoords",
      "description": {
        "fct-module": "Synthesizer.State.ToneModulation",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e t -\u003e (t, T t) -\u003e (T t, T t) -\u003e T (Coords t)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-ToneModulation.html#oscillatorCoords",
        "fct-type": "unknown",
        "title": "oscillatorCoords"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State ToneModulation",
        "module": "Synthesizer.State.ToneModulation",
        "name": "oscillatorCoords",
        "normalized": "Int-\u003ea-\u003e(a,T a)-\u003e(T a,T a)-\u003eT(Coords a)",
        "package": "synthesizer",
        "partial": "Coords",
        "signature": "Int-\u003et-\u003e(t,T t)-\u003e(T t,T t)-\u003eT(Coords t)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-State-ToneModulation.html#v:sampledToneCell",
      "description": {
        "fct-module": "Synthesizer.State.ToneModulation",
        "fct-package": "synthesizer",
        "fct-signature": "Prototype sig a v -\u003e a -\u003e T a -\u003e ((a, a), Cell sig v)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-State-ToneModulation.html#sampledToneCell",
        "fct-type": "unknown",
        "title": "sampledToneCell"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer State ToneModulation",
        "module": "Synthesizer.State.ToneModulation",
        "name": "sampledToneCell",
        "normalized": "Prototype a b c-\u003eb-\u003eT b-\u003e((b,b),Cell a c)",
        "package": "synthesizer",
        "partial": "Tone Cell",
        "signature": "Prototype sig a v-\u003ea-\u003eT a-\u003e((a,a),Cell sig v)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Storable-Cut.html#v:addShifted",
      "description": {
        "fct-module": "Synthesizer.Storable.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "ChunkSize -\u003e Int -\u003e T a -\u003e T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Storable-Cut.html#addShifted",
        "fct-type": "unknown",
        "title": "addShifted"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Storable Cut",
        "module": "Synthesizer.Storable.Cut",
        "name": "addShifted",
        "normalized": "ChunkSize-\u003eInt-\u003eT a-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "Shifted",
        "signature": "ChunkSize-\u003eInt-\u003eT a-\u003eT a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Storable-Cut.html#v:addShiftedMany",
      "description": {
        "fct-module": "Synthesizer.Storable.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "ChunkSize -\u003e [Int] -\u003e [T a] -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Storable-Cut.html#addShiftedMany",
        "fct-type": "unknown",
        "title": "addShiftedMany"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Storable Cut",
        "module": "Synthesizer.Storable.Cut",
        "name": "addShiftedMany",
        "normalized": "ChunkSize-\u003e[Int]-\u003e[T a]-\u003eT a",
        "package": "synthesizer",
        "partial": "Shifted Many",
        "signature": "ChunkSize-\u003e[Int]-\u003e[T a]-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Storable-Cut.html#v:addToBuffer",
      "description": {
        "fct-module": "Synthesizer.Storable.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "Vector s a -\u003e Int -\u003e T a -\u003e ST s (T a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Storable-Cut.html#addToBuffer",
        "fct-type": "unknown",
        "title": "addToBuffer"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Storable Cut",
        "module": "Synthesizer.Storable.Cut",
        "name": "addToBuffer",
        "normalized": "Vector a b-\u003eInt-\u003eT b-\u003eST a(T b)",
        "package": "synthesizer",
        "partial": "To Buffer",
        "signature": "Vector s a-\u003eInt-\u003eT a-\u003eST s(T a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Storable-Cut.html#v:arrange",
      "description": {
        "fct-descr": "A list of pairs: (relative start time, signal part),\n                The start time is relative to the start time\n                of the previous event. \nThe mixed signal. \n",
        "fct-module": "Synthesizer.Storable.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "ChunkSize-\u003e T Int (T v)-\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Storable-Cut.html#arrange",
        "fct-type": "unknown",
        "title": "arrange"
      },
      "index": {
        "description": "list of pairs relative start time signal part The start time is relative to the start time of the previous event The mixed signal",
        "hierarchy": "Synthesizer Storable Cut",
        "module": "Synthesizer.Storable.Cut",
        "name": "arrange",
        "normalized": "ChunkSize-\u003eT Int(T a)-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "ChunkSize-\u003eT Int(T v)-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Storable-Cut.html#v:arrangeEquidist",
      "description": {
        "fct-descr": "A list of pairs: (relative start time, signal part),\n                The start time is relative to the start time\n                of the previous event. \nThe mixed signal. \n",
        "fct-module": "Synthesizer.Storable.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "ChunkSize-\u003e T Int (T v)-\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Storable-Cut.html#arrangeEquidist",
        "fct-type": "unknown",
        "title": "arrangeEquidist"
      },
      "index": {
        "description": "list of pairs relative start time signal part The start time is relative to the start time of the previous event The mixed signal",
        "hierarchy": "Synthesizer Storable Cut",
        "module": "Synthesizer.Storable.Cut",
        "name": "arrangeEquidist",
        "normalized": "ChunkSize-\u003eT Int(T a)-\u003eT a",
        "package": "synthesizer",
        "partial": "Equidist",
        "signature": "ChunkSize-\u003eT Int(T v)-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Storable-Cut.html#v:arrangeList",
      "description": {
        "fct-descr": "A list of pairs: (relative start time, signal part),\n                The start time is relative to the start time\n                of the previous event. \nThe mixed signal. \n",
        "fct-module": "Synthesizer.Storable.Cut",
        "fct-package": "synthesizer",
        "fct-signature": "ChunkSize-\u003e T Int (T v)-\u003e T v",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Storable-Cut.html#arrangeList",
        "fct-type": "unknown",
        "title": "arrangeList"
      },
      "index": {
        "description": "list of pairs relative start time signal part The start time is relative to the start time of the previous event The mixed signal",
        "hierarchy": "Synthesizer Storable Cut",
        "module": "Synthesizer.Storable.Cut",
        "name": "arrangeList",
        "normalized": "ChunkSize-\u003eT Int(T a)-\u003eT a",
        "package": "synthesizer",
        "partial": "List",
        "signature": "ChunkSize-\u003eT Int(T v)-\u003eT v"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Storable-Instance.html#v:storePair",
      "description": {
        "fct-module": "Synthesizer.Storable.Instance",
        "fct-package": "synthesizer",
        "fct-signature": "Dictionary (a, b)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Storable-Instance.html#storePair",
        "fct-type": "unknown",
        "title": "storePair"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Storable Instance",
        "module": "Synthesizer.Storable.Instance",
        "name": "storePair",
        "normalized": "Dictionary(a,b)",
        "package": "synthesizer",
        "partial": "Pair",
        "signature": "Dictionary(a,b)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Storable-Instance.html#v:storeTriple",
      "description": {
        "fct-module": "Synthesizer.Storable.Instance",
        "fct-package": "synthesizer",
        "fct-signature": "Dictionary (a, b, c)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Storable-Instance.html#storeTriple",
        "fct-type": "unknown",
        "title": "storeTriple"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Storable Instance",
        "module": "Synthesizer.Storable.Instance",
        "name": "storeTriple",
        "normalized": "Dictionary(a,b,c)",
        "package": "synthesizer",
        "partial": "Triple",
        "signature": "Dictionary(a,b,c)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Storable-Oscillator.html#v:freqMod",
      "description": {
        "fct-descr": "oscillator with modulated frequency \n",
        "fct-module": "Synthesizer.Storable.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "ChunkSize -\u003e T a b -\u003e T a -\u003e T a -\u003e T b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Storable-Oscillator.html#freqMod",
        "fct-type": "unknown",
        "title": "freqMod"
      },
      "index": {
        "description": "oscillator with modulated frequency",
        "hierarchy": "Synthesizer Storable Oscillator",
        "module": "Synthesizer.Storable.Oscillator",
        "name": "freqMod",
        "normalized": "ChunkSize-\u003eT a b-\u003eT a-\u003eT a-\u003eT b",
        "package": "synthesizer",
        "partial": "Mod",
        "signature": "ChunkSize-\u003eT a b-\u003eT a-\u003eT a-\u003eT b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Storable-Oscillator.html#v:freqModSaw",
      "description": {
        "fct-descr": "saw tooth oscillator with modulated frequency \n",
        "fct-module": "Synthesizer.Storable.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "ChunkSize -\u003e T a -\u003e T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Storable-Oscillator.html#freqModSaw",
        "fct-type": "unknown",
        "title": "freqModSaw"
      },
      "index": {
        "description": "saw tooth oscillator with modulated frequency",
        "hierarchy": "Synthesizer Storable Oscillator",
        "module": "Synthesizer.Storable.Oscillator",
        "name": "freqModSaw",
        "normalized": "ChunkSize-\u003eT a-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "Mod Saw",
        "signature": "ChunkSize-\u003eT a-\u003eT a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Storable-Oscillator.html#v:freqModSine",
      "description": {
        "fct-descr": "sine oscillator with modulated frequency \n",
        "fct-module": "Synthesizer.Storable.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "ChunkSize -\u003e T a -\u003e T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Storable-Oscillator.html#freqModSine",
        "fct-type": "unknown",
        "title": "freqModSine"
      },
      "index": {
        "description": "sine oscillator with modulated frequency",
        "hierarchy": "Synthesizer Storable Oscillator",
        "module": "Synthesizer.Storable.Oscillator",
        "name": "freqModSine",
        "normalized": "ChunkSize-\u003eT a-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "Mod Sine",
        "signature": "ChunkSize-\u003eT a-\u003eT a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Storable-Oscillator.html#v:freqToPhase",
      "description": {
        "fct-descr": "Convert a list of phase steps into a list of momentum phases\n     phase is a number in the interval [0,1)\n     freq contains the phase steps \n",
        "fct-module": "Synthesizer.Storable.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "T a -\u003e T a -\u003e T (T a)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Storable-Oscillator.html#freqToPhase",
        "fct-type": "unknown",
        "title": "freqToPhase"
      },
      "index": {
        "description": "Convert list of phase steps into list of momentum phases phase is number in the interval freq contains the phase steps",
        "hierarchy": "Synthesizer Storable Oscillator",
        "module": "Synthesizer.Storable.Oscillator",
        "name": "freqToPhase",
        "normalized": "T a-\u003eT a-\u003eT(T a)",
        "package": "synthesizer",
        "partial": "To Phase",
        "signature": "T a-\u003eT a-\u003eT(T a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Storable-Oscillator.html#v:phaseFreqMod",
      "description": {
        "fct-descr": "oscillator with both phase and frequency modulation \n",
        "fct-module": "Synthesizer.Storable.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "ChunkSize -\u003e T a b -\u003e T a -\u003e T a -\u003e T b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Storable-Oscillator.html#phaseFreqMod",
        "fct-type": "unknown",
        "title": "phaseFreqMod"
      },
      "index": {
        "description": "oscillator with both phase and frequency modulation",
        "hierarchy": "Synthesizer Storable Oscillator",
        "module": "Synthesizer.Storable.Oscillator",
        "name": "phaseFreqMod",
        "normalized": "ChunkSize-\u003eT a b-\u003eT a-\u003eT a-\u003eT b",
        "package": "synthesizer",
        "partial": "Freq Mod",
        "signature": "ChunkSize-\u003eT a b-\u003eT a-\u003eT a-\u003eT b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Storable-Oscillator.html#v:phaseMod",
      "description": {
        "fct-descr": "oscillator with modulated phase \n",
        "fct-module": "Synthesizer.Storable.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "ChunkSize -\u003e T a b -\u003e a -\u003e T a -\u003e T b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Storable-Oscillator.html#phaseMod",
        "fct-type": "unknown",
        "title": "phaseMod"
      },
      "index": {
        "description": "oscillator with modulated phase",
        "hierarchy": "Synthesizer Storable Oscillator",
        "module": "Synthesizer.Storable.Oscillator",
        "name": "phaseMod",
        "normalized": "ChunkSize-\u003eT a b-\u003ea-\u003eT a-\u003eT b",
        "package": "synthesizer",
        "partial": "Mod",
        "signature": "ChunkSize-\u003eT a b-\u003ea-\u003eT a-\u003eT b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Storable-Oscillator.html#v:phaseModSine",
      "description": {
        "fct-descr": "sine oscillator with modulated phase, useful for FM synthesis \n",
        "fct-module": "Synthesizer.Storable.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "ChunkSize -\u003e a -\u003e T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Storable-Oscillator.html#phaseModSine",
        "fct-type": "unknown",
        "title": "phaseModSine"
      },
      "index": {
        "description": "sine oscillator with modulated phase useful for FM synthesis",
        "hierarchy": "Synthesizer Storable Oscillator",
        "module": "Synthesizer.Storable.Oscillator",
        "name": "phaseModSine",
        "normalized": "ChunkSize-\u003ea-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "Mod Sine",
        "signature": "ChunkSize-\u003ea-\u003eT a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Storable-Oscillator.html#v:shapeFreqMod",
      "description": {
        "fct-descr": "oscillator with both shape and frequency modulation \n",
        "fct-module": "Synthesizer.Storable.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "ChunkSize -\u003e (c -\u003e T a b) -\u003e T a -\u003e T c -\u003e T a -\u003e T b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Storable-Oscillator.html#shapeFreqMod",
        "fct-type": "unknown",
        "title": "shapeFreqMod"
      },
      "index": {
        "description": "oscillator with both shape and frequency modulation",
        "hierarchy": "Synthesizer Storable Oscillator",
        "module": "Synthesizer.Storable.Oscillator",
        "name": "shapeFreqMod",
        "normalized": "ChunkSize-\u003e(a-\u003eT b c)-\u003eT b-\u003eT a-\u003eT b-\u003eT c",
        "package": "synthesizer",
        "partial": "Freq Mod",
        "signature": "ChunkSize-\u003e(c-\u003eT a b)-\u003eT a-\u003eT c-\u003eT a-\u003eT b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Storable-Oscillator.html#v:shapeMod",
      "description": {
        "fct-descr": "oscillator with modulated shape \n",
        "fct-module": "Synthesizer.Storable.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "ChunkSize -\u003e (c -\u003e T a b) -\u003e T a -\u003e a -\u003e T c -\u003e T b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Storable-Oscillator.html#shapeMod",
        "fct-type": "unknown",
        "title": "shapeMod"
      },
      "index": {
        "description": "oscillator with modulated shape",
        "hierarchy": "Synthesizer Storable Oscillator",
        "module": "Synthesizer.Storable.Oscillator",
        "name": "shapeMod",
        "normalized": "ChunkSize-\u003e(a-\u003eT b c)-\u003eT b-\u003eb-\u003eT a-\u003eT c",
        "package": "synthesizer",
        "partial": "Mod",
        "signature": "ChunkSize-\u003e(c-\u003eT a b)-\u003eT a-\u003ea-\u003eT c-\u003eT b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Storable-Oscillator.html#v:static",
      "description": {
        "fct-descr": "oscillator with constant frequency \n",
        "fct-module": "Synthesizer.Storable.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "ChunkSize -\u003e T a b -\u003e T a -\u003e a -\u003e T b",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Storable-Oscillator.html#static",
        "fct-type": "unknown",
        "title": "static"
      },
      "index": {
        "description": "oscillator with constant frequency",
        "hierarchy": "Synthesizer Storable Oscillator",
        "module": "Synthesizer.Storable.Oscillator",
        "name": "static",
        "normalized": "ChunkSize-\u003eT a b-\u003eT a-\u003ea-\u003eT b",
        "package": "synthesizer",
        "partial": "",
        "signature": "ChunkSize-\u003eT a b-\u003eT a-\u003ea-\u003eT b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Storable-Oscillator.html#v:staticSaw",
      "description": {
        "fct-descr": "saw tooth oscillator with modulated frequency \n",
        "fct-module": "Synthesizer.Storable.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "ChunkSize -\u003e T a -\u003e a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Storable-Oscillator.html#staticSaw",
        "fct-type": "unknown",
        "title": "staticSaw"
      },
      "index": {
        "description": "saw tooth oscillator with modulated frequency",
        "hierarchy": "Synthesizer Storable Oscillator",
        "module": "Synthesizer.Storable.Oscillator",
        "name": "staticSaw",
        "normalized": "ChunkSize-\u003eT a-\u003ea-\u003eT a",
        "package": "synthesizer",
        "partial": "Saw",
        "signature": "ChunkSize-\u003eT a-\u003ea-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Storable-Oscillator.html#v:staticSine",
      "description": {
        "fct-descr": "sine oscillator with static frequency \n",
        "fct-module": "Synthesizer.Storable.Oscillator",
        "fct-package": "synthesizer",
        "fct-signature": "ChunkSize -\u003e T a -\u003e a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Storable-Oscillator.html#staticSine",
        "fct-type": "unknown",
        "title": "staticSine"
      },
      "index": {
        "description": "sine oscillator with static frequency",
        "hierarchy": "Synthesizer Storable Oscillator",
        "module": "Synthesizer.Storable.Oscillator",
        "name": "staticSine",
        "normalized": "ChunkSize-\u003eT a-\u003ea-\u003eT a",
        "package": "synthesizer",
        "partial": "Sine",
        "signature": "ChunkSize-\u003eT a-\u003ea-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Storable-Signal.html#t:T",
      "description": {
        "fct-module": "Synthesizer.Storable.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "type",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Storable-Signal.html#T",
        "fct-type": "unknown",
        "title": "T"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Storable Signal",
        "module": "Synthesizer.Storable.Signal",
        "name": "T",
        "normalized": "",
        "package": "synthesizer",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Storable-Signal.html#v:appendFromFusionList",
      "description": {
        "fct-module": "Synthesizer.Storable.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "ChunkSize -\u003e T a -\u003e T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Storable-Signal.html#appendFromFusionList",
        "fct-type": "unknown",
        "title": "appendFromFusionList"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Storable Signal",
        "module": "Synthesizer.Storable.Signal",
        "name": "appendFromFusionList",
        "normalized": "ChunkSize-\u003eT a-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "From Fusion List",
        "signature": "ChunkSize-\u003eT a-\u003eT a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Storable-Signal.html#v:appendFusionList",
      "description": {
        "fct-descr": "Like \u003ctt\u003e\u003ca\u003eappendFromFusionList\u003c/a\u003e\u003c/tt\u003e but returns a \u003ctt\u003e\u003ca\u003eT\u003c/a\u003e\u003c/tt\u003e\nfor more flexible following processing.\n",
        "fct-module": "Synthesizer.Storable.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "ChunkSize -\u003e T a -\u003e T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Storable-Signal.html#appendFusionList",
        "fct-type": "unknown",
        "title": "appendFusionList"
      },
      "index": {
        "description": "Like appendFromFusionList but returns for more flexible following processing",
        "hierarchy": "Synthesizer Storable Signal",
        "module": "Synthesizer.Storable.Signal",
        "name": "appendFusionList",
        "normalized": "ChunkSize-\u003eT a-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "Fusion List",
        "signature": "ChunkSize-\u003eT a-\u003eT a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Storable-Signal.html#v:defaultChunkSize",
      "description": {
        "fct-module": "Synthesizer.Storable.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "ChunkSize",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Storable-Signal.html#defaultChunkSize",
        "fct-type": "unknown",
        "title": "defaultChunkSize"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Storable Signal",
        "module": "Synthesizer.Storable.Signal",
        "name": "defaultChunkSize",
        "normalized": "",
        "package": "synthesizer",
        "partial": "Chunk Size",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Storable-Signal.html#v:delay",
      "description": {
        "fct-module": "Synthesizer.Storable.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "ChunkSize -\u003e y -\u003e Int -\u003e T y -\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Storable-Signal.html#delay",
        "fct-type": "unknown",
        "title": "delay"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Storable Signal",
        "module": "Synthesizer.Storable.Signal",
        "name": "delay",
        "normalized": "ChunkSize-\u003ea-\u003eInt-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "ChunkSize-\u003ey-\u003eInt-\u003eT y-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Storable-Signal.html#v:delayLoop",
      "description": {
        "fct-descr": "processor that shall be run in a feedback loop\nprefix of the output, its length determines the delay\n",
        "fct-module": "Synthesizer.Storable.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T y -\u003e T y-\u003e T y-\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Storable-Signal.html#delayLoop",
        "fct-type": "unknown",
        "title": "delayLoop"
      },
      "index": {
        "description": "processor that shall be run in feedback loop prefix of the output its length determines the delay",
        "hierarchy": "Synthesizer Storable Signal",
        "module": "Synthesizer.Storable.Signal",
        "name": "delayLoop",
        "normalized": "T a-\u003eT a-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "Loop",
        "signature": "T y-\u003eT y-\u003eT y-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Storable-Signal.html#v:delayLoopOverlap",
      "description": {
        "fct-descr": "Processor that shall be run in a feedback loop.\n                 It's absolutely necessary that this function preserves the chunk structure\n                 and that it does not look a chunk ahead.\n                 That's guaranteed for processes that do not look ahead at all,\n                 like \u003ctt\u003e\u003ca\u003emap\u003c/a\u003e\u003c/tt\u003e, \u003ctt\u003e\u003ca\u003ecrochetL\u003c/a\u003e\u003c/tt\u003e and\n                 all of type \u003ctt\u003eCausal.Process\u003c/tt\u003e. \ninput\noutput has the same length as the input\n",
        "fct-module": "Synthesizer.Storable.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "Int-\u003e T y -\u003e T y-\u003e T y-\u003e T y",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Storable-Signal.html#delayLoopOverlap",
        "fct-type": "unknown",
        "title": "delayLoopOverlap"
      },
      "index": {
        "description": "Processor that shall be run in feedback loop It absolutely necessary that this function preserves the chunk structure and that it does not look chunk ahead That guaranteed for processes that do not look ahead at all like map crochetL and all of type Causal.Process input output has the same length as the input",
        "hierarchy": "Synthesizer Storable Signal",
        "module": "Synthesizer.Storable.Signal",
        "name": "delayLoopOverlap",
        "normalized": "Int-\u003eT a-\u003eT a-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "Loop Overlap",
        "signature": "Int-\u003eT y-\u003eT y-\u003eT y-\u003eT y"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Storable-Signal.html#v:fromFusionList",
      "description": {
        "fct-module": "Synthesizer.Storable.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "ChunkSize -\u003e T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Storable-Signal.html#fromFusionList",
        "fct-type": "unknown",
        "title": "fromFusionList"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Storable Signal",
        "module": "Synthesizer.Storable.Signal",
        "name": "fromFusionList",
        "normalized": "ChunkSize-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "Fusion List",
        "signature": "ChunkSize-\u003eT a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Storable-Signal.html#v:fromList",
      "description": {
        "fct-module": "Synthesizer.Storable.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "ChunkSize -\u003e [a] -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Storable-Signal.html#fromList",
        "fct-type": "unknown",
        "title": "fromList"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Storable Signal",
        "module": "Synthesizer.Storable.Signal",
        "name": "fromList",
        "normalized": "ChunkSize-\u003e[a]-\u003eT a",
        "package": "synthesizer",
        "partial": "List",
        "signature": "ChunkSize-\u003e[a]-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Storable-Signal.html#v:genericLength",
      "description": {
        "fct-module": "Synthesizer.Storable.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T x -\u003e i",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Storable-Signal.html#genericLength",
        "fct-type": "unknown",
        "title": "genericLength"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Storable Signal",
        "module": "Synthesizer.Storable.Signal",
        "name": "genericLength",
        "normalized": "T a-\u003eb",
        "package": "synthesizer",
        "partial": "Length",
        "signature": "T x-\u003ei"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Storable-Signal.html#v:mix",
      "description": {
        "fct-module": "Synthesizer.Storable.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "T x -\u003e T x -\u003e T x",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Storable-Signal.html#mix",
        "fct-type": "unknown",
        "title": "mix"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Storable Signal",
        "module": "Synthesizer.Storable.Signal",
        "name": "mix",
        "normalized": "T a-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "T x-\u003eT x-\u003eT x"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Storable-Signal.html#v:mixSize",
      "description": {
        "fct-module": "Synthesizer.Storable.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "ChunkSize -\u003e T x -\u003e T x -\u003e T x",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Storable-Signal.html#mixSize",
        "fct-type": "unknown",
        "title": "mixSize"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Storable Signal",
        "module": "Synthesizer.Storable.Signal",
        "name": "mixSize",
        "normalized": "ChunkSize-\u003eT a-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "Size",
        "signature": "ChunkSize-\u003eT x-\u003eT x-\u003eT x"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Storable-Signal.html#v:scanL",
      "description": {
        "fct-module": "Synthesizer.Storable.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(a -\u003e b -\u003e a) -\u003e a -\u003e T b -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Storable-Signal.html#scanL",
        "fct-type": "unknown",
        "title": "scanL"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Storable Signal",
        "module": "Synthesizer.Storable.Signal",
        "name": "scanL",
        "normalized": "(a-\u003eb-\u003ea)-\u003ea-\u003eT b-\u003eT a",
        "package": "synthesizer",
        "partial": "",
        "signature": "(a-\u003eb-\u003ea)-\u003ea-\u003eT b-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Storable-Signal.html#v:splitAtPad",
      "description": {
        "fct-module": "Synthesizer.Storable.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "ChunkSize -\u003e Int -\u003e T x -\u003e (T x, T x)",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Storable-Signal.html#splitAtPad",
        "fct-type": "unknown",
        "title": "splitAtPad"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Storable Signal",
        "module": "Synthesizer.Storable.Signal",
        "name": "splitAtPad",
        "normalized": "ChunkSize-\u003eInt-\u003eT a-\u003e(T a,T a)",
        "package": "synthesizer",
        "partial": "At Pad",
        "signature": "ChunkSize-\u003eInt-\u003eT x-\u003e(T x,T x)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Storable-Signal.html#v:takeCrochet",
      "description": {
        "fct-module": "Synthesizer.Storable.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "Int -\u003e T a -\u003e T a",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Storable-Signal.html#takeCrochet",
        "fct-type": "unknown",
        "title": "takeCrochet"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Storable Signal",
        "module": "Synthesizer.Storable.Signal",
        "name": "takeCrochet",
        "normalized": "Int-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "Crochet",
        "signature": "Int-\u003eT a-\u003eT a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Storable-Signal.html#v:zipWithAppend",
      "description": {
        "fct-module": "Synthesizer.Storable.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(x -\u003e x -\u003e x) -\u003e T x -\u003e T x -\u003e T x",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Storable-Signal.html#zipWithAppend",
        "fct-type": "unknown",
        "title": "zipWithAppend"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Storable Signal",
        "module": "Synthesizer.Storable.Signal",
        "name": "zipWithAppend",
        "normalized": "(a-\u003ea-\u003ea)-\u003eT a-\u003eT a-\u003eT a",
        "package": "synthesizer",
        "partial": "With Append",
        "signature": "(x-\u003ex-\u003ex)-\u003eT x-\u003eT x-\u003eT x"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Storable-Signal.html#v:zipWithRest",
      "description": {
        "fct-module": "Synthesizer.Storable.Signal",
        "fct-package": "synthesizer",
        "fct-signature": "(x -\u003e x -\u003e c) -\u003e T x -\u003e T x -\u003e (Vector c, (Bool, T x))",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/src/Synthesizer-Storable-Signal.html#zipWithRest",
        "fct-type": "unknown",
        "title": "zipWithRest"
      },
      "index": {
        "description": "",
        "hierarchy": "Synthesizer Storable Signal",
        "module": "Synthesizer.Storable.Signal",
        "name": "zipWithRest",
        "normalized": "(a-\u003ea-\u003eb)-\u003eT a-\u003eT a-\u003e(Vector b,(Bool,T a))",
        "package": "synthesizer",
        "partial": "With Rest",
        "signature": "(x-\u003ex-\u003ec)-\u003eT x-\u003eT x-\u003e(Vector c,(Bool,T x))"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Storage.html",
      "description": {
        "fct-descr": "\u003cp\u003eRendering sound effects off-line has its virtue,\nbut really cool is real-time signal generation.\nFor a long time I thought that it is the compiler's responsibility\nto make list based signal processing fast enough.\nHowever, the compiler has to respect correctness first.\nThat is, it cannot do too fancy optimization,\nsince the optimized program must still do the same as the unoptimized program.\nSo, when we write functions that rely on the maximal flexibility,\nthe compiler cannot turn it to something less flexible.\nActually, a list as in \u003ca\u003eSynthesizer.Plain.Signal\u003c/a\u003e\nis the best representation of a signal\nin terms of flexibility:\nIt allows free choice of the element type, even functions,\nit is element-wise lazy, allowing for short feedback,\nit allows sharing of computed data.\nThe drawback is, that it is slow and memory inefficient.\nIn most cases we don't need this full flexibility,\nbut the compiler has no chance to find this out automatically.\nIt can merge several operations on a list\nto a single operation by the fusion technique,\nhowever even a single list operation is hard to get in real-time.\n\u003c/p\u003e\u003cp\u003eHow do real-time software synthesizer achieve real-time performance?\nThey get the popular fast inner loops\nby processing signals in chunks of raw data.\nThis way, they lose flexibility, because they cannot do quick feedback.\nWe can do the same in Haskell, getting the same restrictions.\nAdditionally, in order to store raw data\nwe must restrict the element types\ne.g. to the \u003ctt\u003eStorable\u003c/tt\u003e class,\nsince we use \u003ctt\u003eStorableVector\u003c/tt\u003e in \u003ca\u003eSynthesizer.Storable.Signal\u003c/a\u003e.\nWith this technique single signal operations are fast,\nbut their combination cannot be optimized in many cases.\nThis is so, again, because top priority in optimization is correctness.\nConsider \u003ctt\u003emix x (cons 0 x)\u003c/tt\u003e\nwhere \u003ctt\u003econs 0 x\u003c/tt\u003e means \u003ctt\u003e0:x\u003c/tt\u003e for our chunky signal data.\nThis expression is a perfect candidate for optimization.\nBut in this case it must not be applied since the chunk structures of\n\u003ctt\u003ex\u003c/tt\u003e and \u003ctt\u003econs 0 x\u003c/tt\u003e do not match.\nIn such cases we would not gain anything over SuperCollider and CSound.\n\u003c/p\u003e\u003cp\u003eRemember that we introduced the chunky signal representation\nentirely because of efficiency concerns.\nActually we are not interested in a special chunk structure,\nso this should not be a reason for disabling optimization.\nOf course, we could ignore the correctness\nand write incorrect optimizer rules\nthat are based on correct ideas.\nHowever, experience shows that wrong optimization\nleads to surprise and infelicities sooner or later.\nThe later the worse,\nbecause the later the more code you have written\nrelying on invalid optimization.\n\u003c/p\u003e\u003cp\u003eWhat we can try is to use list representation,\nenjoy the optimization that GHC already provides for it,\nand then let fusion rules jump in\nthat make lists disappear when they are used in connection with chunky sequences.\nE.g. \u003ctt\u003eChunky.fromList (List.oscillator freq)\u003c/tt\u003e\ncould be turned into \u003ctt\u003eChunky.oscillator freq\u003c/tt\u003e.\nThis approach would be really cool, but works only in theory.\nIn practice it is hard to predict how GHC transforms various operations.\nAdditionally to optimizer rule application\nit also expands functions to their definitions (known as inlining/unfolding)\nor specializes functions to fixed types.\nWe cannot rely on our optimizer rules being actually applied.\nThis means however, that in unpredictable cases\nthe optimization fails and the efficiency drops from real-time to non-real-time.\nThis is unacceptable.\n\u003c/p\u003e\u003cp\u003eThe solution is a third signal representation,\nsee \u003ca\u003eSynthesizer.State.Signal\u003c/a\u003e.\n(Already got tired?)\nIt consists of no actual data\nbut it is a function that generates elements.\nIts type is \u003ctt\u003es -\u003e Maybe (a,s)\u003c/tt\u003e or short \u003ctt\u003eStateT s Maybe a\u003c/tt\u003e.\nGiven a state of type \u003ctt\u003es\u003c/tt\u003e it produces \u003ctt\u003eNothing\u003c/tt\u003e when the list terminates\nor \u003ctt\u003eJust\u003c/tt\u003e the next element and the updated state.\nThis can be easily converted from and to lists\nwhile preserving laziness.\nWe convert to lists by \u003ctt\u003eList.unfoldr\u003c/tt\u003e and from lists using \u003ctt\u003eviewL\u003c/tt\u003e.\nActually this signal representation is very close\nto the list representation used in the streams package.\nThe main differences are:\nFirstly, we do not use a list storage that is fused away when only used temporarily.\nThus we do not need a fusion rule (that could be skipped by the compiler).\nSecondly, we have no notion of Skip,\nsince operations like \u003ctt\u003e\u003ca\u003efilter\u003c/a\u003e\u003c/tt\u003e are uncommon in signal processing.\nIf we write our signal processing in terms of these virtual signals\nand then convert the result to regular lists or chunky sequences,\nthen only one data structure will be built\nand GHC does it's best to generate efficient inner loops.\n\u003c/p\u003e\u003cp\u003eWe cannot use these virtual signals for sharing and feedback,\nbecause there is no data structure that stores the data.\nIf we try to do so anyway, data will be recomputed.\nThus we still need chunky sequences or lists\nfor sharing of interim results and for feedback.\nActually, an expression like \u003ctt\u003emix x (reverse x)\u003c/tt\u003e\nwould definitely benefit from interim conversion to a chunky sequence,\nbut for \u003ctt\u003emix x (cons 0 x)\u003c/tt\u003e this is overkill.\n\u003c/p\u003e\u003cp\u003eIn order to get processes like the last one efficient\nwe have a new data type (no, not another one!)\nbut this time it is not a signal data type\nbut a signal processor type.\nIt is the result of thinking about\nwhich processes allow sharing on a per-sample basis at all.\nWe come to the conclusion that these can be only causal processes,\ni.e. processes that depend only on current and past data,\nnot on data from the future.\nSo, we already have a good name: \u003ca\u003eSynthesizer.Causal.Process\u003c/a\u003e.\nCausal processes are \u003ca\u003eControl.Arrow\u003c/a\u003es,\nhowever the higher level variant does no longer fit into the Arrow type class.\nThis means that there are various combinations\nthat turn causal processes into larger causal processes.\nIt needs a bit experience in pointfree coding style\nin order to use the arrow combinators,\nbut there is no way around it,\nwhen you want to use physical dimensions.\nGHC's arrow notation does only support types of the Arrow class.\nE.g. the expression \u003ctt\u003emix x (cons 0 x)\u003c/tt\u003e\nbecomes \u003ctt\u003eCausal.mix \u003c\u003c\u003c (Causal.id &&& Causal.cons 0)\u003c/tt\u003e.\nWhen you manage this burden\nyou get processes that are warranted to be causal.\nThey can not only be used to make something efficient,\nbut they also allow to process data from the outside world\nin a streaming way without unsafeInterleaveIO\nas required e.g. in JACK plugins.\n\u003c/p\u003e\u003cp\u003eFor historical reasons there is also \u003ca\u003eSynthesizer.FusionList.Signal\u003c/a\u003e\nwhich is a wrapper around lists.\nI used this data type to disable GHC's default list optimizer rules\nand use my own ones.\nThe fusion is based on \u003ctt\u003eunfoldr\u003c/tt\u003e and \u003ctt\u003ecrochetL\u003c/tt\u003e\nwhich is quite similar to the \u003ctt\u003estream-fusion\u003c/tt\u003e package.\nThe \u003ctt\u003estream-fusion\u003c/tt\u003e uses internally a \u003ctt\u003eSkip\u003c/tt\u003e constructor,\nwhich, as far as I understand,\nis better for the \u003ctt\u003efilter\u003c/tt\u003e function.\nWe do not need it,\nbecause the \u003ctt\u003efilter\u003c/tt\u003e function is very uncommon in signal processing.\nI think, \u003ctt\u003eFusionList\u003c/tt\u003e can be replaced by \u003ctt\u003estream-fusion\u003c/tt\u003e functions.\n\u003c/p\u003e\u003cp\u003eWe have now a pretty big set of signal storage types\nthat differ considerably in performance\nbut not in the set of operations.\nThis calls for a type class!\nYou find it in \u003ca\u003eSynthesizer.Generic.Signal\u003c/a\u003e\nand \u003ca\u003eSynthesizer.Generic.Signal2\u003c/a\u003e.\n\u003c/p\u003e",
        "fct-source": "http://hackage.haskell.org/package/synthesizer/docs/Synthesizer-Storage.html",
        "fct-type": "unknown",
        "title": ""
      },
      "index": {
        "description": "Rendering sound effects off-line has its virtue but really cool is real-time signal generation For long time thought that it is the compiler responsibility to make list based signal processing fast enough However the compiler has to respect correctness first That is it cannot do too fancy optimization since the optimized program must still do the same as the unoptimized program So when we write functions that rely on the maximal flexibility the compiler cannot turn it to something less flexible Actually list as in Synthesizer.Plain.Signal is the best representation of signal in terms of flexibility It allows free choice of the element type even functions it is element-wise lazy allowing for short feedback it allows sharing of computed data The drawback is that it is slow and memory inefficient In most cases we don need this full flexibility but the compiler has no chance to find this out automatically It can merge several operations on list to single operation by the fusion technique however even single list operation is hard to get in real-time How do real-time software synthesizer achieve real-time performance They get the popular fast inner loops by processing signals in chunks of raw data This way they lose flexibility because they cannot do quick feedback We can do the same in Haskell getting the same restrictions Additionally in order to store raw data we must restrict the element types e.g to the Storable class since we use StorableVector in Synthesizer.Storable.Signal With this technique single signal operations are fast but their combination cannot be optimized in many cases This is so again because top priority in optimization is correctness Consider mix cons where cons means for our chunky signal data This expression is perfect candidate for optimization But in this case it must not be applied since the chunk structures of and cons do not match In such cases we would not gain anything over SuperCollider and CSound Remember that we introduced the chunky signal representation entirely because of efficiency concerns Actually we are not interested in special chunk structure so this should not be reason for disabling optimization Of course we could ignore the correctness and write incorrect optimizer rules that are based on correct ideas However experience shows that wrong optimization leads to surprise and infelicities sooner or later The later the worse because the later the more code you have written relying on invalid optimization What we can try is to use list representation enjoy the optimization that GHC already provides for it and then let fusion rules jump in that make lists disappear when they are used in connection with chunky sequences E.g Chunky.fromList List.oscillator freq could be turned into Chunky.oscillator freq This approach would be really cool but works only in theory In practice it is hard to predict how GHC transforms various operations Additionally to optimizer rule application it also expands functions to their definitions known as inlining unfolding or specializes functions to fixed types We cannot rely on our optimizer rules being actually applied This means however that in unpredictable cases the optimization fails and the efficiency drops from real-time to non-real-time This is unacceptable The solution is third signal representation see Synthesizer.State.Signal Already got tired It consists of no actual data but it is function that generates elements Its type is Maybe or short StateT Maybe Given state of type it produces Nothing when the list terminates or Just the next element and the updated state This can be easily converted from and to lists while preserving laziness We convert to lists by List.unfoldr and from lists using viewL Actually this signal representation is very close to the list representation used in the streams package The main differences are Firstly we do not use list storage that is fused away when only used temporarily Thus we do not need fusion rule that could be skipped by the compiler Secondly we have no notion of Skip since operations like filter are uncommon in signal processing If we write our signal processing in terms of these virtual signals and then convert the result to regular lists or chunky sequences then only one data structure will be built and GHC does it best to generate efficient inner loops We cannot use these virtual signals for sharing and feedback because there is no data structure that stores the data If we try to do so anyway data will be recomputed Thus we still need chunky sequences or lists for sharing of interim results and for feedback Actually an expression like mix reverse would definitely benefit from interim conversion to chunky sequence but for mix cons this is overkill In order to get processes like the last one efficient we have new data type no not another one but this time it is not signal data type but signal processor type It is the result of thinking about which processes allow sharing on per-sample basis at all We come to the conclusion that these can be only causal processes i.e processes that depend only on current and past data not on data from the future So we already have good name Synthesizer.Causal.Process Causal processes are Control.Arrow however the higher level variant does no longer fit into the Arrow type class This means that there are various combinations that turn causal processes into larger causal processes It needs bit experience in pointfree coding style in order to use the arrow combinators but there is no way around it when you want to use physical dimensions GHC arrow notation does only support types of the Arrow class E.g the expression mix cons becomes Causal.mix Causal.id Causal.cons When you manage this burden you get processes that are warranted to be causal They can not only be used to make something efficient but they also allow to process data from the outside world in streaming way without unsafeInterleaveIO as required e.g in JACK plugins For historical reasons there is also Synthesizer.FusionList.Signal which is wrapper around lists used this data type to disable GHC default list optimizer rules and use my own ones The fusion is based on unfoldr and crochetL which is quite similar to the stream-fusion package The stream-fusion uses internally Skip constructor which as far as understand is better for the filter function We do not need it because the filter function is very uncommon in signal processing think FusionList can be replaced by stream-fusion functions We have now pretty big set of signal storage types that differ considerably in performance but not in the set of operations This calls for type class You find it in Synthesizer.Generic.Signal and Synthesizer.Generic.Signal2",
        "hierarchy": "",
        "module": "",
        "name": "",
        "normalized": "",
        "package": "",
        "partial": "",
        "signature": ""
      }
    }
  }
]