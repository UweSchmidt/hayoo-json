[
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-FLTK.html#",
      "description": {
        "fct-module": "Csound.Typed.Opcode.FLTK",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "module",
        "fct-source": "src/Csound-Typed-Opcode-FLTK.html",
        "fct-type": "module",
        "title": "FLTK"
      },
      "index": {
        "description": "",
        "hierarchy": "Csound Typed Opcode FLTK",
        "module": "Csound.Typed.Opcode.FLTK",
        "name": "FLTK",
        "normalized": "",
        "package": "csound-expression-opcodes",
        "partial": "FLTK",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-FLTK.html#v:flBox",
      "description": {
        "fct-descr": "\u003cp\u003eA FLTK widget that displays text inside of a box.\n\u003c/p\u003e\u003cpre\u003e ihandle  FLbox  \"label\", itype, ifont, isize, iwidth, iheight, ix, iy [, image]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/FLbox.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.FLTK",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e SE D",
        "fct-source": "src/Csound-Typed-Opcode-FLTK.html#flBox",
        "fct-type": "function",
        "title": "flBox"
      },
      "index": {
        "description": "FLTK widget that displays text inside of box ihandle FLbox label itype ifont isize iwidth iheight ix iy image csound doc http www.csounds.com manual html FLbox.html",
        "hierarchy": "Csound Typed Opcode FLTK",
        "module": "Csound.Typed.Opcode.FLTK",
        "name": "flBox",
        "normalized": "Str-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSE D",
        "package": "csound-expression-opcodes",
        "partial": "Box",
        "signature": "Str-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSE D"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-FLTK.html#v:flButBank",
      "description": {
        "fct-descr": "\u003cp\u003eA FLTK widget opcode that creates a bank of buttons.\n\u003c/p\u003e\u003cpre\u003e kout, ihandle  FLbutBank  itype, inumx, inumy, iwidth, iheight, ix, iy, \\\n           iopcode [, kp1] [, kp2] [, kp3] [, kp4] [, kp5] [....] [, kpN]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/FLbutBank.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.FLTK",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e SE a",
        "fct-source": "src/Csound-Typed-Opcode-FLTK.html#flButBank",
        "fct-type": "function",
        "title": "flButBank"
      },
      "index": {
        "description": "FLTK widget opcode that creates bank of buttons kout ihandle FLbutBank itype inumx inumy iwidth iheight ix iy iopcode kp1 kp2 kp3 kp4 kp5 kpN csound doc http www.csounds.com manual html FLbutBank.html",
        "hierarchy": "Csound Typed Opcode FLTK",
        "module": "Csound.Typed.Opcode.FLTK",
        "name": "flButBank",
        "normalized": "D-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSE a",
        "package": "csound-expression-opcodes",
        "partial": "But Bank",
        "signature": "D-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSE a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-FLTK.html#v:flButton",
      "description": {
        "fct-descr": "\u003cp\u003eA FLTK widget opcode that creates a button.\n\u003c/p\u003e\u003cpre\u003e kout, ihandle  FLbutton  \"label\", ion, ioff, itype, iwidth, iheight, ix, \\\n           iy, iopcode [, kp1] [, kp2] [, kp3] [, kp4] [, kp5] [....] [, kpN]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/FLbutton.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.FLTK",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e SE a",
        "fct-source": "src/Csound-Typed-Opcode-FLTK.html#flButton",
        "fct-type": "function",
        "title": "flButton"
      },
      "index": {
        "description": "FLTK widget opcode that creates button kout ihandle FLbutton label ion ioff itype iwidth iheight ix iy iopcode kp1 kp2 kp3 kp4 kp5 kpN csound doc http www.csounds.com manual html FLbutton.html",
        "hierarchy": "Csound Typed Opcode FLTK",
        "module": "Csound.Typed.Opcode.FLTK",
        "name": "flButton",
        "normalized": "Str-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSE a",
        "package": "csound-expression-opcodes",
        "partial": "Button",
        "signature": "Str-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSE a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-FLTK.html#v:flCloseButton",
      "description": {
        "fct-descr": "\u003cp\u003eA FLTK widget opcode that creates a button that will close the panel\n       window it is a part of.\n\u003c/p\u003e\u003cpre\u003e ihandle  FLcloseButton  \"label\", iwidth, iheight, ix, iy\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/FLcloseButton.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.FLTK",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e D -\u003e D -\u003e D -\u003e D -\u003e SE D",
        "fct-source": "src/Csound-Typed-Opcode-FLTK.html#flCloseButton",
        "fct-type": "function",
        "title": "flCloseButton"
      },
      "index": {
        "description": "FLTK widget opcode that creates button that will close the panel window it is part of ihandle FLcloseButton label iwidth iheight ix iy csound doc http www.csounds.com manual html FLcloseButton.html",
        "hierarchy": "Csound Typed Opcode FLTK",
        "module": "Csound.Typed.Opcode.FLTK",
        "name": "flCloseButton",
        "normalized": "Str-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSE D",
        "package": "csound-expression-opcodes",
        "partial": "Close Button",
        "signature": "Str-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSE D"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-FLTK.html#v:flColor",
      "description": {
        "fct-descr": "\u003cp\u003eA FLTK opcode that sets the primary colors.\n\u003c/p\u003e\u003cp\u003eSets the primary colors to RGB values given by the user.\n\u003c/p\u003e\u003cpre\u003e  FLcolor  ired, igreen, iblue [, ired2, igreen2, iblue2]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/FLcolor.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.FLTK",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-FLTK.html#flColor",
        "fct-type": "function",
        "title": "flColor"
      },
      "index": {
        "description": "FLTK opcode that sets the primary colors Sets the primary colors to RGB values given by the user FLcolor ired igreen iblue ired2 igreen2 iblue2 csound doc http www.csounds.com manual html FLcolor.html",
        "hierarchy": "Csound Typed Opcode FLTK",
        "module": "Csound.Typed.Opcode.FLTK",
        "name": "flColor",
        "normalized": "D-\u003eD-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "Color",
        "signature": "D-\u003eD-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-FLTK.html#v:flColor2",
      "description": {
        "fct-descr": "\u003cp\u003eA FLTK opcode that sets the secondary (selection) color.\n\u003c/p\u003e\u003cp\u003eFLcolor2 is the same of FLcolor except it affects the secondary (selection) color.\n\u003c/p\u003e\u003cpre\u003e  FLcolor2  ired, igreen, iblue\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/FLcolor2.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.FLTK",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-FLTK.html#flColor2",
        "fct-type": "function",
        "title": "flColor2"
      },
      "index": {
        "description": "FLTK opcode that sets the secondary selection color FLcolor2 is the same of FLcolor except it affects the secondary selection color FLcolor2 ired igreen iblue csound doc http www.csounds.com manual html FLcolor2.html",
        "hierarchy": "Csound Typed Opcode FLTK",
        "module": "Csound.Typed.Opcode.FLTK",
        "name": "flColor2",
        "normalized": "D-\u003eD-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "Color",
        "signature": "D-\u003eD-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-FLTK.html#v:flCount",
      "description": {
        "fct-descr": "\u003cp\u003eA FLTK widget opcode that creates a counter.\n\u003c/p\u003e\u003cp\u003eAllows the user to increase/decrease a value with mouse clicks on a corresponding arrow button.\n\u003c/p\u003e\u003cpre\u003e kout, ihandle  FLcount  \"label\", imin, imax, istep1, istep2, itype, \\\n           iwidth, iheight, ix, iy, iopcode [, kp1] [, kp2] [, kp3] [...] [, kpN]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/FLcount.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.FLTK",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e SE a",
        "fct-source": "src/Csound-Typed-Opcode-FLTK.html#flCount",
        "fct-type": "function",
        "title": "flCount"
      },
      "index": {
        "description": "FLTK widget opcode that creates counter Allows the user to increase decrease value with mouse clicks on corresponding arrow button kout ihandle FLcount label imin imax istep1 istep2 itype iwidth iheight ix iy iopcode kp1 kp2 kp3 kpN csound doc http www.csounds.com manual html FLcount.html",
        "hierarchy": "Csound Typed Opcode FLTK",
        "module": "Csound.Typed.Opcode.FLTK",
        "name": "flCount",
        "normalized": "Str-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSE a",
        "package": "csound-expression-opcodes",
        "partial": "Count",
        "signature": "Str-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSE a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-FLTK.html#v:flExecButton",
      "description": {
        "fct-descr": "\u003cp\u003eA FLTK widget opcode that creates a button that executes a command.\n\u003c/p\u003e\u003cp\u003eA FLTK widget opcode that creates a button that executes a command. Useful\n       for opening up HTML documentation as About text or to start a separate\n       program from an FLTK widget interface.\n\u003c/p\u003e\u003cpre\u003e ihandle  FLexecButton  \"command\", iwidth, iheight, ix, iy\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/FLexecButton.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.FLTK",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e D -\u003e D -\u003e D -\u003e D -\u003e SE D",
        "fct-source": "src/Csound-Typed-Opcode-FLTK.html#flExecButton",
        "fct-type": "function",
        "title": "flExecButton"
      },
      "index": {
        "description": "FLTK widget opcode that creates button that executes command FLTK widget opcode that creates button that executes command Useful for opening up HTML documentation as About text or to start separate program from an FLTK widget interface ihandle FLexecButton command iwidth iheight ix iy csound doc http www.csounds.com manual html FLexecButton.html",
        "hierarchy": "Csound Typed Opcode FLTK",
        "module": "Csound.Typed.Opcode.FLTK",
        "name": "flExecButton",
        "normalized": "Str-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSE D",
        "package": "csound-expression-opcodes",
        "partial": "Exec Button",
        "signature": "Str-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSE D"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-FLTK.html#v:flGetsnap",
      "description": {
        "fct-descr": "\u003cp\u003eRetrieves a previously stored FLTK snapshot.\n\u003c/p\u003e\u003cp\u003eRetrieves a previously stored snapshot (in memory), i.e. sets all valuator to the corresponding values stored in that snaphot.\n\u003c/p\u003e\u003cpre\u003e inumsnap  FLgetsnap  index [, igroup]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/FLgetsnap.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.FLTK",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e SE D",
        "fct-source": "src/Csound-Typed-Opcode-FLTK.html#flGetsnap",
        "fct-type": "function",
        "title": "flGetsnap"
      },
      "index": {
        "description": "Retrieves previously stored FLTK snapshot Retrieves previously stored snapshot in memory i.e sets all valuator to the corresponding values stored in that snaphot inumsnap FLgetsnap index igroup csound doc http www.csounds.com manual html FLgetsnap.html",
        "hierarchy": "Csound Typed Opcode FLTK",
        "module": "Csound.Typed.Opcode.FLTK",
        "name": "flGetsnap",
        "normalized": "D-\u003eSE D",
        "package": "csound-expression-opcodes",
        "partial": "Getsnap",
        "signature": "D-\u003eSE D"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-FLTK.html#v:flGroup",
      "description": {
        "fct-descr": "\u003cp\u003eA FLTK container opcode that groups child widgets.\n\u003c/p\u003e\u003cpre\u003e  FLgroup  \"label\", iwidth, iheight, ix, iy [, iborder] [, image]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/FLgroup.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.FLTK",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e D -\u003e D -\u003e D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-FLTK.html#flGroup",
        "fct-type": "function",
        "title": "flGroup"
      },
      "index": {
        "description": "FLTK container opcode that groups child widgets FLgroup label iwidth iheight ix iy iborder image csound doc http www.csounds.com manual html FLgroup.html",
        "hierarchy": "Csound Typed Opcode FLTK",
        "module": "Csound.Typed.Opcode.FLTK",
        "name": "flGroup",
        "normalized": "Str-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "Group",
        "signature": "Str-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-FLTK.html#v:flGroupEnd",
      "description": {
        "fct-descr": "\u003cp\u003eMarks the end of a group of FLTK child widgets.\n\u003c/p\u003e\u003cpre\u003e  FLgroupEnd &#160;\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/FLgroupEnd.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.FLTK",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "SE ()",
        "fct-source": "src/Csound-Typed-Opcode-FLTK.html#flGroupEnd",
        "fct-type": "function",
        "title": "flGroupEnd"
      },
      "index": {
        "description": "Marks the end of group of FLTK child widgets FLgroupEnd csound doc http www.csounds.com manual html FLgroupEnd.html",
        "hierarchy": "Csound Typed Opcode FLTK",
        "module": "Csound.Typed.Opcode.FLTK",
        "name": "flGroupEnd",
        "normalized": "SE()",
        "package": "csound-expression-opcodes",
        "partial": "Group End",
        "signature": "SE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-FLTK.html#v:flHide",
      "description": {
        "fct-descr": "\u003cp\u003eHides the target FLTK widget.\n\u003c/p\u003e\u003cp\u003eHides the target FLTK widget, making it invisible.\n\u003c/p\u003e\u003cpre\u003e  FLhide  ihandle\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/FLhide.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.FLTK",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-FLTK.html#flHide",
        "fct-type": "function",
        "title": "flHide"
      },
      "index": {
        "description": "Hides the target FLTK widget Hides the target FLTK widget making it invisible FLhide ihandle csound doc http www.csounds.com manual html FLhide.html",
        "hierarchy": "Csound Typed Opcode FLTK",
        "module": "Csound.Typed.Opcode.FLTK",
        "name": "flHide",
        "normalized": "D-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "Hide",
        "signature": "D-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-FLTK.html#v:flHvsBox",
      "description": {
        "fct-descr": "\u003cp\u003eDisplays a box with a grid useful for visualizing two-dimensional Hyper Vectorial Synthesis.\n\u003c/p\u003e\u003cp\u003eFLhvsBox displays a box with a grid useful for visualizing two-dimensional Hyper Vectorial Synthesis.\n\u003c/p\u003e\u003cpre\u003e ihandle  FLhvsBox  inumlinesX, inumlinesY, iwidth, iheight, ix, iy [, image]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/FLhvsBox.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.FLTK",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e SE D",
        "fct-source": "src/Csound-Typed-Opcode-FLTK.html#flHvsBox",
        "fct-type": "function",
        "title": "flHvsBox"
      },
      "index": {
        "description": "Displays box with grid useful for visualizing two-dimensional Hyper Vectorial Synthesis FLhvsBox displays box with grid useful for visualizing two-dimensional Hyper Vectorial Synthesis ihandle FLhvsBox inumlinesX inumlinesY iwidth iheight ix iy image csound doc http www.csounds.com manual html FLhvsBox.html",
        "hierarchy": "Csound Typed Opcode FLTK",
        "module": "Csound.Typed.Opcode.FLTK",
        "name": "flHvsBox",
        "normalized": "D-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSE D",
        "package": "csound-expression-opcodes",
        "partial": "Hvs Box",
        "signature": "D-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSE D"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-FLTK.html#v:flHvsBoxSetValue",
      "description": {
        "fct-descr": "\u003cp\u003eSets the cursor position of a previously-declared FLhvsBox widget.\n\u003c/p\u003e\u003cp\u003eFLhvsBoxSetValue sets the cursor position of a previously-declared FLhvsBox widget.\n\u003c/p\u003e\u003cpre\u003e  FLhvsBoxSetValue  kx, ky, ihandle\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/FLhvsBoxSetValue.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.FLTK",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-FLTK.html#flHvsBoxSetValue",
        "fct-type": "function",
        "title": "flHvsBoxSetValue"
      },
      "index": {
        "description": "Sets the cursor position of previously-declared FLhvsBox widget FLhvsBoxSetValue sets the cursor position of previously-declared FLhvsBox widget FLhvsBoxSetValue kx ky ihandle csound doc http www.csounds.com manual html FLhvsBoxSetValue.html",
        "hierarchy": "Csound Typed Opcode FLTK",
        "module": "Csound.Typed.Opcode.FLTK",
        "name": "flHvsBoxSetValue",
        "normalized": "Sig-\u003eSig-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "Hvs Box Set Value",
        "signature": "Sig-\u003eSig-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-FLTK.html#v:flJoy",
      "description": {
        "fct-descr": "\u003cp\u003eA FLTK opcode that acts like a joystick.\n\u003c/p\u003e\u003cp\u003eFLjoy is a squared area that allows the user to modify two output values at the same time. It acts like a joystick.\n\u003c/p\u003e\u003cpre\u003e koutx, kouty, ihandlex, ihandley  FLjoy  \"label\", iminx, imaxx, iminy, \\\n           imaxy, iexpx, iexpy, idispx, idispy, iwidth, iheight, ix, iy\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/FLjoy.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.FLTK",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e SE a",
        "fct-source": "src/Csound-Typed-Opcode-FLTK.html#flJoy",
        "fct-type": "function",
        "title": "flJoy"
      },
      "index": {
        "description": "FLTK opcode that acts like joystick FLjoy is squared area that allows the user to modify two output values at the same time It acts like joystick koutx kouty ihandlex ihandley FLjoy label iminx imaxx iminy imaxy iexpx iexpy idispx idispy iwidth iheight ix iy csound doc http www.csounds.com manual html FLjoy.html",
        "hierarchy": "Csound Typed Opcode FLTK",
        "module": "Csound.Typed.Opcode.FLTK",
        "name": "flJoy",
        "normalized": "Str-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSE a",
        "package": "csound-expression-opcodes",
        "partial": "Joy",
        "signature": "Str-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSE a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-FLTK.html#v:flKeyIn",
      "description": {
        "fct-descr": "\u003cp\u003eReports keys pressed (on alphanumeric keyboard) when an FLTK panel has focus.\n\u003c/p\u003e\u003cp\u003eFLkeyIn informs about the status of a key pressed by the user on the alphanumeric keyboard when an FLTK panel has got the focus.\n\u003c/p\u003e\u003cpre\u003e kascii  FLkeyIn  [ifn]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/FLkeyIn.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.FLTK",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "SE Sig",
        "fct-source": "src/Csound-Typed-Opcode-FLTK.html#flKeyIn",
        "fct-type": "function",
        "title": "flKeyIn"
      },
      "index": {
        "description": "Reports keys pressed on alphanumeric keyboard when an FLTK panel has focus FLkeyIn informs about the status of key pressed by the user on the alphanumeric keyboard when an FLTK panel has got the focus kascii FLkeyIn ifn csound doc http www.csounds.com manual html FLkeyIn.html",
        "hierarchy": "Csound Typed Opcode FLTK",
        "module": "Csound.Typed.Opcode.FLTK",
        "name": "flKeyIn",
        "normalized": "",
        "package": "csound-expression-opcodes",
        "partial": "Key In",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-FLTK.html#v:flKnob",
      "description": {
        "fct-descr": "\u003cp\u003eA FLTK widget opcode that creates a knob.\n\u003c/p\u003e\u003cpre\u003e kout, ihandle  FLknob  \"label\", imin, imax, iexp, itype, idisp, iwidth, \\\n           ix, iy [, icursorsize]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/FLknob.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.FLTK",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e SE a",
        "fct-source": "src/Csound-Typed-Opcode-FLTK.html#flKnob",
        "fct-type": "function",
        "title": "flKnob"
      },
      "index": {
        "description": "FLTK widget opcode that creates knob kout ihandle FLknob label imin imax iexp itype idisp iwidth ix iy icursorsize csound doc http www.csounds.com manual html FLknob.html",
        "hierarchy": "Csound Typed Opcode FLTK",
        "module": "Csound.Typed.Opcode.FLTK",
        "name": "flKnob",
        "normalized": "Str-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSE a",
        "package": "csound-expression-opcodes",
        "partial": "Knob",
        "signature": "Str-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSE a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-FLTK.html#v:flLabel",
      "description": {
        "fct-descr": "\u003cp\u003eA FLTK opcode that modifies the appearance of a text label.\n\u003c/p\u003e\u003cp\u003eModifies a set of parameters related to the text label appearence of a widget (i.e. size, font, alignment and color of corresponding text).\n\u003c/p\u003e\u003cpre\u003e  FLlabel  isize, ifont, ialign, ired, igreen, iblue\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/FLlabel.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.FLTK",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-FLTK.html#flLabel",
        "fct-type": "function",
        "title": "flLabel"
      },
      "index": {
        "description": "FLTK opcode that modifies the appearance of text label Modifies set of parameters related to the text label appearence of widget i.e size font alignment and color of corresponding text FLlabel isize ifont ialign ired igreen iblue csound doc http www.csounds.com manual html FLlabel.html",
        "hierarchy": "Csound Typed Opcode FLTK",
        "module": "Csound.Typed.Opcode.FLTK",
        "name": "flLabel",
        "normalized": "D-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "Label",
        "signature": "D-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-FLTK.html#v:flLoadsnap",
      "description": {
        "fct-descr": "\u003cp\u003eLoads all snapshots into the memory bank of the current orchestra.\n\u003c/p\u003e\u003cp\u003eFLloadsnap loads all the snapshots contained in a file into the memory bank of the current orchestra.\n\u003c/p\u003e\u003cpre\u003e  FLloadsnap  \"filename\" [, igroup]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/FLloadsnap.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.FLTK",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-FLTK.html#flLoadsnap",
        "fct-type": "function",
        "title": "flLoadsnap"
      },
      "index": {
        "description": "Loads all snapshots into the memory bank of the current orchestra FLloadsnap loads all the snapshots contained in file into the memory bank of the current orchestra FLloadsnap filename igroup csound doc http www.csounds.com manual html FLloadsnap.html",
        "hierarchy": "Csound Typed Opcode FLTK",
        "module": "Csound.Typed.Opcode.FLTK",
        "name": "flLoadsnap",
        "normalized": "Str-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "Loadsnap",
        "signature": "Str-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-FLTK.html#v:flMouse",
      "description": {
        "fct-descr": "\u003cp\u003eReturns the mouse position and the state of the three mouse buttons.\n\u003c/p\u003e\u003cp\u003eFLmouse returns the coordinates of the mouse position within an FLTK panel and the state of the three mouse buttons.\n\u003c/p\u003e\u003cpre\u003e kx, ky, kb1, kb2, kb3  FLmouse  [imode]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/FLmouse.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.FLTK",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "SE a",
        "fct-source": "src/Csound-Typed-Opcode-FLTK.html#flMouse",
        "fct-type": "function",
        "title": "flMouse"
      },
      "index": {
        "description": "Returns the mouse position and the state of the three mouse buttons FLmouse returns the coordinates of the mouse position within an FLTK panel and the state of the three mouse buttons kx ky kb1 kb2 kb3 FLmouse imode csound doc http www.csounds.com manual html FLmouse.html",
        "hierarchy": "Csound Typed Opcode FLTK",
        "module": "Csound.Typed.Opcode.FLTK",
        "name": "flMouse",
        "normalized": "",
        "package": "csound-expression-opcodes",
        "partial": "Mouse",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-FLTK.html#v:flPack",
      "description": {
        "fct-descr": "\u003cp\u003eProvides the functionality of compressing and aligning FLTK widgets.\n\u003c/p\u003e\u003cp\u003eFLpack provides the functionality of compressing and aligning widgets.\n\u003c/p\u003e\u003cpre\u003e  FLpack  iwidth, iheight, ix, iy, itype, ispace, iborder\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/FLpack.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.FLTK",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-FLTK.html#flPack",
        "fct-type": "function",
        "title": "flPack"
      },
      "index": {
        "description": "Provides the functionality of compressing and aligning FLTK widgets FLpack provides the functionality of compressing and aligning widgets FLpack iwidth iheight ix iy itype ispace iborder csound doc http www.csounds.com manual html FLpack.html",
        "hierarchy": "Csound Typed Opcode FLTK",
        "module": "Csound.Typed.Opcode.FLTK",
        "name": "flPack",
        "normalized": "D-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "Pack",
        "signature": "D-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-FLTK.html#v:flPackEnd",
      "description": {
        "fct-descr": "\u003cp\u003eMarks the end of a group of compressed or aligned FLTK widgets.\n\u003c/p\u003e\u003cpre\u003e  FLpackEnd &#160;\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/FLpackEnd.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.FLTK",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "SE ()",
        "fct-source": "src/Csound-Typed-Opcode-FLTK.html#flPackEnd",
        "fct-type": "function",
        "title": "flPackEnd"
      },
      "index": {
        "description": "Marks the end of group of compressed or aligned FLTK widgets FLpackEnd csound doc http www.csounds.com manual html FLpackEnd.html",
        "hierarchy": "Csound Typed Opcode FLTK",
        "module": "Csound.Typed.Opcode.FLTK",
        "name": "flPackEnd",
        "normalized": "SE()",
        "package": "csound-expression-opcodes",
        "partial": "Pack End",
        "signature": "SE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-FLTK.html#v:flPanel",
      "description": {
        "fct-descr": "\u003cp\u003eCreates a window that contains FLTK widgets.\n\u003c/p\u003e\u003cpre\u003e  FLpanel  \"label\", iwidth, iheight [, ix] [, iy] [, iborder] [, ikbdcapture] [, iclose]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/FLpanel.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.FLTK",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-FLTK.html#flPanel",
        "fct-type": "function",
        "title": "flPanel"
      },
      "index": {
        "description": "Creates window that contains FLTK widgets FLpanel label iwidth iheight ix iy iborder ikbdcapture iclose csound doc http www.csounds.com manual html FLpanel.html",
        "hierarchy": "Csound Typed Opcode FLTK",
        "module": "Csound.Typed.Opcode.FLTK",
        "name": "flPanel",
        "normalized": "Str-\u003eD-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "Panel",
        "signature": "Str-\u003eD-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-FLTK.html#v:flPanelEnd",
      "description": {
        "fct-descr": "\u003cp\u003eMarks the end of a group of FLTK widgets contained inside of a window (panel).\n\u003c/p\u003e\u003cpre\u003e  FLpanelEnd &#160;\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/FLpanelEnd.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.FLTK",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "SE ()",
        "fct-source": "src/Csound-Typed-Opcode-FLTK.html#flPanelEnd",
        "fct-type": "function",
        "title": "flPanelEnd"
      },
      "index": {
        "description": "Marks the end of group of FLTK widgets contained inside of window panel FLpanelEnd csound doc http www.csounds.com manual html FLpanelEnd.html",
        "hierarchy": "Csound Typed Opcode FLTK",
        "module": "Csound.Typed.Opcode.FLTK",
        "name": "flPanelEnd",
        "normalized": "SE()",
        "package": "csound-expression-opcodes",
        "partial": "Panel End",
        "signature": "SE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-FLTK.html#v:flPrintk",
      "description": {
        "fct-descr": "\u003cp\u003eA FLTK opcode that prints a k-rate value at specified intervals.\n\u003c/p\u003e\u003cp\u003eFLprintk is similar to printk but shows values of a k-rate signal in a text field instead of on the console.\n\u003c/p\u003e\u003cpre\u003e  FLprintk  itime, kval, idisp\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/FLprintk.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.FLTK",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e Sig -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-FLTK.html#flPrintk",
        "fct-type": "function",
        "title": "flPrintk"
      },
      "index": {
        "description": "FLTK opcode that prints k-rate value at specified intervals FLprintk is similar to printk but shows values of k-rate signal in text field instead of on the console FLprintk itime kval idisp csound doc http www.csounds.com manual html FLprintk.html",
        "hierarchy": "Csound Typed Opcode FLTK",
        "module": "Csound.Typed.Opcode.FLTK",
        "name": "flPrintk",
        "normalized": "D-\u003eSig-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "Printk",
        "signature": "D-\u003eSig-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-FLTK.html#v:flPrintk2",
      "description": {
        "fct-descr": "\u003cp\u003eA FLTK opcode that prints a new value every time a control-rate variable changes.\n\u003c/p\u003e\u003cp\u003eFLprintk2 is similar to FLprintk but shows a k-rate variable's value only when it changes.\n\u003c/p\u003e\u003cpre\u003e  FLprintk2  kval, idisp\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/FLprintk2.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.FLTK",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-FLTK.html#flPrintk2",
        "fct-type": "function",
        "title": "flPrintk2"
      },
      "index": {
        "description": "FLTK opcode that prints new value every time control-rate variable changes FLprintk2 is similar to FLprintk but shows k-rate variable value only when it changes FLprintk2 kval idisp csound doc http www.csounds.com manual html FLprintk2.html",
        "hierarchy": "Csound Typed Opcode FLTK",
        "module": "Csound.Typed.Opcode.FLTK",
        "name": "flPrintk2",
        "normalized": "Sig-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "Printk",
        "signature": "Sig-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-FLTK.html#v:flRoller",
      "description": {
        "fct-descr": "\u003cp\u003eA FLTK widget that creates a transversal knob.\n\u003c/p\u003e\u003cp\u003eFLroller is a sort of knob, but put transversally.\n\u003c/p\u003e\u003cpre\u003e kout, ihandle  FLroller  \"label\", imin, imax, istep, iexp, itype, idisp, \\\n           iwidth, iheight, ix, iy\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/FLroller.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.FLTK",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e SE a",
        "fct-source": "src/Csound-Typed-Opcode-FLTK.html#flRoller",
        "fct-type": "function",
        "title": "flRoller"
      },
      "index": {
        "description": "FLTK widget that creates transversal knob FLroller is sort of knob but put transversally kout ihandle FLroller label imin imax istep iexp itype idisp iwidth iheight ix iy csound doc http www.csounds.com manual html FLroller.html",
        "hierarchy": "Csound Typed Opcode FLTK",
        "module": "Csound.Typed.Opcode.FLTK",
        "name": "flRoller",
        "normalized": "Str-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSE a",
        "package": "csound-expression-opcodes",
        "partial": "Roller",
        "signature": "Str-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSE a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-FLTK.html#v:flRun",
      "description": {
        "fct-descr": "\u003cp\u003eStarts the FLTK widget thread.\n\u003c/p\u003e\u003cpre\u003e  FLrun &#160;\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/FLrun.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.FLTK",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "SE ()",
        "fct-source": "src/Csound-Typed-Opcode-FLTK.html#flRun",
        "fct-type": "function",
        "title": "flRun"
      },
      "index": {
        "description": "Starts the FLTK widget thread FLrun csound doc http www.csounds.com manual html FLrun.html",
        "hierarchy": "Csound Typed Opcode FLTK",
        "module": "Csound.Typed.Opcode.FLTK",
        "name": "flRun",
        "normalized": "SE()",
        "package": "csound-expression-opcodes",
        "partial": "Run",
        "signature": "SE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-FLTK.html#v:flSavesnap",
      "description": {
        "fct-descr": "\u003cp\u003eSaves all snapshots currently created into a file.\n\u003c/p\u003e\u003cp\u003eFLsavesnap saves all snapshots currently created (i.e. the entire memory bank) into a file.\n\u003c/p\u003e\u003cpre\u003e  FLsavesnap  \"filename\" [, igroup]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/FLsavesnap.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.FLTK",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-FLTK.html#flSavesnap",
        "fct-type": "function",
        "title": "flSavesnap"
      },
      "index": {
        "description": "Saves all snapshots currently created into file FLsavesnap saves all snapshots currently created i.e the entire memory bank into file FLsavesnap filename igroup csound doc http www.csounds.com manual html FLsavesnap.html",
        "hierarchy": "Csound Typed Opcode FLTK",
        "module": "Csound.Typed.Opcode.FLTK",
        "name": "flSavesnap",
        "normalized": "Str-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "Savesnap",
        "signature": "Str-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-FLTK.html#v:flScroll",
      "description": {
        "fct-descr": "\u003cp\u003eA FLTK opcode that adds scroll bars to an area.\n\u003c/p\u003e\u003cp\u003eFLscroll adds scroll bars to an area.\n\u003c/p\u003e\u003cpre\u003e  FLscroll  iwidth, iheight [, ix] [, iy]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/FLscroll.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.FLTK",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-FLTK.html#flScroll",
        "fct-type": "function",
        "title": "flScroll"
      },
      "index": {
        "description": "FLTK opcode that adds scroll bars to an area FLscroll adds scroll bars to an area FLscroll iwidth iheight ix iy csound doc http www.csounds.com manual html FLscroll.html",
        "hierarchy": "Csound Typed Opcode FLTK",
        "module": "Csound.Typed.Opcode.FLTK",
        "name": "flScroll",
        "normalized": "D-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "Scroll",
        "signature": "D-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-FLTK.html#v:flScrollEnd",
      "description": {
        "fct-descr": "\u003cp\u003eA FLTK opcode that marks the end of an area with scrollbars.\n\u003c/p\u003e\u003cpre\u003e  FLscrollEnd &#160;\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/FLscrollEnd.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.FLTK",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "SE ()",
        "fct-source": "src/Csound-Typed-Opcode-FLTK.html#flScrollEnd",
        "fct-type": "function",
        "title": "flScrollEnd"
      },
      "index": {
        "description": "FLTK opcode that marks the end of an area with scrollbars FLscrollEnd csound doc http www.csounds.com manual html FLscrollEnd.html",
        "hierarchy": "Csound Typed Opcode FLTK",
        "module": "Csound.Typed.Opcode.FLTK",
        "name": "flScrollEnd",
        "normalized": "SE()",
        "package": "csound-expression-opcodes",
        "partial": "Scroll End",
        "signature": "SE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-FLTK.html#v:flSetAlign",
      "description": {
        "fct-descr": "\u003cp\u003eSets the text alignment of a label of a FLTK widget.\n\u003c/p\u003e\u003cp\u003eFLsetAlign sets the text alignment of the label of the target widget.\n\u003c/p\u003e\u003cpre\u003e  FLsetAlign  ialign, ihandle\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/FLsetAlign.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.FLTK",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-FLTK.html#flSetAlign",
        "fct-type": "function",
        "title": "flSetAlign"
      },
      "index": {
        "description": "Sets the text alignment of label of FLTK widget FLsetAlign sets the text alignment of the label of the target widget FLsetAlign ialign ihandle csound doc http www.csounds.com manual html FLsetAlign.html",
        "hierarchy": "Csound Typed Opcode FLTK",
        "module": "Csound.Typed.Opcode.FLTK",
        "name": "flSetAlign",
        "normalized": "D-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "Set Align",
        "signature": "D-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-FLTK.html#v:flSetBox",
      "description": {
        "fct-descr": "\u003cp\u003eSets the appearance of a box surrounding a FLTK widget.\n\u003c/p\u003e\u003cp\u003eFLsetBox sets the appearance of a box surrounding the target widget.\n\u003c/p\u003e\u003cpre\u003e  FLsetBox  itype, ihandle\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/FLsetBox.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.FLTK",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-FLTK.html#flSetBox",
        "fct-type": "function",
        "title": "flSetBox"
      },
      "index": {
        "description": "Sets the appearance of box surrounding FLTK widget FLsetBox sets the appearance of box surrounding the target widget FLsetBox itype ihandle csound doc http www.csounds.com manual html FLsetBox.html",
        "hierarchy": "Csound Typed Opcode FLTK",
        "module": "Csound.Typed.Opcode.FLTK",
        "name": "flSetBox",
        "normalized": "D-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "Set Box",
        "signature": "D-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-FLTK.html#v:flSetColor",
      "description": {
        "fct-descr": "\u003cp\u003eSets the primary color of a FLTK widget.\n\u003c/p\u003e\u003cp\u003eFLsetColor sets the primary color of the target widget.\n\u003c/p\u003e\u003cpre\u003e  FLsetColor  ired, igreen, iblue, ihandle\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/FLsetColor.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.FLTK",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-FLTK.html#flSetColor",
        "fct-type": "function",
        "title": "flSetColor"
      },
      "index": {
        "description": "Sets the primary color of FLTK widget FLsetColor sets the primary color of the target widget FLsetColor ired igreen iblue ihandle csound doc http www.csounds.com manual html FLsetColor.html",
        "hierarchy": "Csound Typed Opcode FLTK",
        "module": "Csound.Typed.Opcode.FLTK",
        "name": "flSetColor",
        "normalized": "D-\u003eD-\u003eD-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "Set Color",
        "signature": "D-\u003eD-\u003eD-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-FLTK.html#v:flSetColor2",
      "description": {
        "fct-descr": "\u003cp\u003eSets the secondary (or selection) color of a FLTK widget.\n\u003c/p\u003e\u003cp\u003eFLsetColor2 sets the secondary (or selection) color of the target widget.\n\u003c/p\u003e\u003cpre\u003e  FLsetColor2  ired, igreen, iblue, ihandle\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/FLsetColor2.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.FLTK",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-FLTK.html#flSetColor2",
        "fct-type": "function",
        "title": "flSetColor2"
      },
      "index": {
        "description": "Sets the secondary or selection color of FLTK widget FLsetColor2 sets the secondary or selection color of the target widget FLsetColor2 ired igreen iblue ihandle csound doc http www.csounds.com manual html FLsetColor2.html",
        "hierarchy": "Csound Typed Opcode FLTK",
        "module": "Csound.Typed.Opcode.FLTK",
        "name": "flSetColor2",
        "normalized": "D-\u003eD-\u003eD-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "Set Color",
        "signature": "D-\u003eD-\u003eD-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-FLTK.html#v:flSetFont",
      "description": {
        "fct-descr": "\u003cp\u003eSets the font type of a FLTK widget.\n\u003c/p\u003e\u003cp\u003eFLsetFont sets the font type of the target widget.\n\u003c/p\u003e\u003cpre\u003e  FLsetFont  ifont, ihandle\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/FLsetFont.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.FLTK",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-FLTK.html#flSetFont",
        "fct-type": "function",
        "title": "flSetFont"
      },
      "index": {
        "description": "Sets the font type of FLTK widget FLsetFont sets the font type of the target widget FLsetFont ifont ihandle csound doc http www.csounds.com manual html FLsetFont.html",
        "hierarchy": "Csound Typed Opcode FLTK",
        "module": "Csound.Typed.Opcode.FLTK",
        "name": "flSetFont",
        "normalized": "D-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "Set Font",
        "signature": "D-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-FLTK.html#v:flSetPosition",
      "description": {
        "fct-descr": "\u003cp\u003eSets the position of a FLTK widget.\n\u003c/p\u003e\u003cp\u003eFLsetPosition sets the position of the target widget according to the ix and iy arguments.\n\u003c/p\u003e\u003cpre\u003e  FLsetPosition  ix, iy, ihandle\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/FLsetPosition.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.FLTK",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-FLTK.html#flSetPosition",
        "fct-type": "function",
        "title": "flSetPosition"
      },
      "index": {
        "description": "Sets the position of FLTK widget FLsetPosition sets the position of the target widget according to the ix and iy arguments FLsetPosition ix iy ihandle csound doc http www.csounds.com manual html FLsetPosition.html",
        "hierarchy": "Csound Typed Opcode FLTK",
        "module": "Csound.Typed.Opcode.FLTK",
        "name": "flSetPosition",
        "normalized": "D-\u003eD-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "Set Position",
        "signature": "D-\u003eD-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-FLTK.html#v:flSetSize",
      "description": {
        "fct-descr": "\u003cp\u003eResizes a FLTK widget.\n\u003c/p\u003e\u003cp\u003eFLsetSize resizes the target widget (not the size of its text) according to the iwidth and iheight arguments.\n\u003c/p\u003e\u003cpre\u003e  FLsetSize  iwidth, iheight, ihandle\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/FLsetSize.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.FLTK",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-FLTK.html#flSetSize",
        "fct-type": "function",
        "title": "flSetSize"
      },
      "index": {
        "description": "Resizes FLTK widget FLsetSize resizes the target widget not the size of its text according to the iwidth and iheight arguments FLsetSize iwidth iheight ihandle csound doc http www.csounds.com manual html FLsetSize.html",
        "hierarchy": "Csound Typed Opcode FLTK",
        "module": "Csound.Typed.Opcode.FLTK",
        "name": "flSetSize",
        "normalized": "D-\u003eD-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "Set Size",
        "signature": "D-\u003eD-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-FLTK.html#v:flSetSnapGroup",
      "description": {
        "fct-descr": "\u003cp\u003eDetermines the snapshot group for FL valuators.\n\u003c/p\u003e\u003cp\u003eFLsetSnapGroup determines the snapshot group of valuators declared after it.\n\u003c/p\u003e\u003cpre\u003e  FLsetSnapGroup  igroup\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/FLsetSnapGroup.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.FLTK",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-FLTK.html#flSetSnapGroup",
        "fct-type": "function",
        "title": "flSetSnapGroup"
      },
      "index": {
        "description": "Determines the snapshot group for FL valuators FLsetSnapGroup determines the snapshot group of valuators declared after it FLsetSnapGroup igroup csound doc http www.csounds.com manual html FLsetSnapGroup.html",
        "hierarchy": "Csound Typed Opcode FLTK",
        "module": "Csound.Typed.Opcode.FLTK",
        "name": "flSetSnapGroup",
        "normalized": "D-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "Set Snap Group",
        "signature": "D-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-FLTK.html#v:flSetText",
      "description": {
        "fct-descr": "\u003cp\u003eSets the label of a FLTK widget.\n\u003c/p\u003e\u003cp\u003eFLsetText sets the label of the target widget to the double-quoted text string provided with the itext argument.\n\u003c/p\u003e\u003cpre\u003e  FLsetText  \"itext\", ihandle\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/FLsetText.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.FLTK",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-FLTK.html#flSetText",
        "fct-type": "function",
        "title": "flSetText"
      },
      "index": {
        "description": "Sets the label of FLTK widget FLsetText sets the label of the target widget to the double-quoted text string provided with the itext argument FLsetText itext ihandle csound doc http www.csounds.com manual html FLsetText.html",
        "hierarchy": "Csound Typed Opcode FLTK",
        "module": "Csound.Typed.Opcode.FLTK",
        "name": "flSetText",
        "normalized": "Str-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "Set Text",
        "signature": "Str-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-FLTK.html#v:flSetTextColor",
      "description": {
        "fct-descr": "\u003cp\u003eSets the color of the text label of a FLTK widget.\n\u003c/p\u003e\u003cp\u003eFLsetTextColor sets the color of the text label of the target widget.\n\u003c/p\u003e\u003cpre\u003e  FLsetTextColor  ired, iblue, igreen, ihandle\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/FLsetTextColor.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.FLTK",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-FLTK.html#flSetTextColor",
        "fct-type": "function",
        "title": "flSetTextColor"
      },
      "index": {
        "description": "Sets the color of the text label of FLTK widget FLsetTextColor sets the color of the text label of the target widget FLsetTextColor ired iblue igreen ihandle csound doc http www.csounds.com manual html FLsetTextColor.html",
        "hierarchy": "Csound Typed Opcode FLTK",
        "module": "Csound.Typed.Opcode.FLTK",
        "name": "flSetTextColor",
        "normalized": "D-\u003eD-\u003eD-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "Set Text Color",
        "signature": "D-\u003eD-\u003eD-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-FLTK.html#v:flSetTextSize",
      "description": {
        "fct-descr": "\u003cp\u003eSets the size of the text label of a FLTK widget.\n\u003c/p\u003e\u003cp\u003eFLsetTextSize sets the size of the text label of the target widget.\n\u003c/p\u003e\u003cpre\u003e  FLsetTextSize  isize, ihandle\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/FLsetTextSize.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.FLTK",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-FLTK.html#flSetTextSize",
        "fct-type": "function",
        "title": "flSetTextSize"
      },
      "index": {
        "description": "Sets the size of the text label of FLTK widget FLsetTextSize sets the size of the text label of the target widget FLsetTextSize isize ihandle csound doc http www.csounds.com manual html FLsetTextSize.html",
        "hierarchy": "Csound Typed Opcode FLTK",
        "module": "Csound.Typed.Opcode.FLTK",
        "name": "flSetTextSize",
        "normalized": "D-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "Set Text Size",
        "signature": "D-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-FLTK.html#v:flSetTextType",
      "description": {
        "fct-descr": "\u003cp\u003eSets some font attributes of the text label of a FLTK widget.\n\u003c/p\u003e\u003cp\u003eFLsetTextType sets some attributes related to the fonts of the text label of the target widget.\n\u003c/p\u003e\u003cpre\u003e  FLsetTextType  itype, ihandle\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/FLsetTextType.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.FLTK",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-FLTK.html#flSetTextType",
        "fct-type": "function",
        "title": "flSetTextType"
      },
      "index": {
        "description": "Sets some font attributes of the text label of FLTK widget FLsetTextType sets some attributes related to the fonts of the text label of the target widget FLsetTextType itype ihandle csound doc http www.csounds.com manual html FLsetTextType.html",
        "hierarchy": "Csound Typed Opcode FLTK",
        "module": "Csound.Typed.Opcode.FLTK",
        "name": "flSetTextType",
        "normalized": "D-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "Set Text Type",
        "signature": "D-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-FLTK.html#v:flSetVal",
      "description": {
        "fct-descr": "\u003cp\u003eSets the value of a FLTK valuator at control-rate.\n\u003c/p\u003e\u003cp\u003eFLsetVal is almost identical to FLsetVal_i. Except it operates at k-rate and it affects the target valuator only when ktrig is set to a non-zero value.\n\u003c/p\u003e\u003cpre\u003e  FLsetVal  ktrig, kvalue, ihandle\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/FLsetVal.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.FLTK",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-FLTK.html#flSetVal",
        "fct-type": "function",
        "title": "flSetVal"
      },
      "index": {
        "description": "Sets the value of FLTK valuator at control-rate FLsetVal is almost identical to FLsetVal Except it operates at k-rate and it affects the target valuator only when ktrig is set to non-zero value FLsetVal ktrig kvalue ihandle csound doc http www.csounds.com manual html FLsetVal.html",
        "hierarchy": "Csound Typed Opcode FLTK",
        "module": "Csound.Typed.Opcode.FLTK",
        "name": "flSetVal",
        "normalized": "Sig-\u003eSig-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "Set Val",
        "signature": "Sig-\u003eSig-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-FLTK.html#v:flSetVal_i",
      "description": {
        "fct-descr": "\u003cp\u003eSets the value of a FLTK valuator to a number provided by the user.\n\u003c/p\u003e\u003cp\u003eFLsetVal_i forces the value of a valuator to a number provided by the user.\n\u003c/p\u003e\u003cpre\u003e  FLsetVal_i  ivalue, ihandle\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/FLsetVal_i.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.FLTK",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-FLTK.html#flSetVal_i",
        "fct-type": "function",
        "title": "flSetVal_i"
      },
      "index": {
        "description": "Sets the value of FLTK valuator to number provided by the user FLsetVal forces the value of valuator to number provided by the user FLsetVal ivalue ihandle csound doc http www.csounds.com manual html FLsetVal i.html",
        "hierarchy": "Csound Typed Opcode FLTK",
        "module": "Csound.Typed.Opcode.FLTK",
        "name": "flSetVal_i",
        "normalized": "D-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "Set Val",
        "signature": "D-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-FLTK.html#v:flSetsnap",
      "description": {
        "fct-descr": "\u003cp\u003eStores the current status of all FLTK valuators into a snapshot location.\n\u003c/p\u003e\u003cp\u003eFLsetsnap stores the current status of all valuators present in the orchestra into a snapshot location (in memory).\n\u003c/p\u003e\u003cpre\u003e inumsnap, inumval  FLsetsnap  index [, ifn, igroup]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/FLsetsnap.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.FLTK",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e SE a",
        "fct-source": "src/Csound-Typed-Opcode-FLTK.html#flSetsnap",
        "fct-type": "function",
        "title": "flSetsnap"
      },
      "index": {
        "description": "Stores the current status of all FLTK valuators into snapshot location FLsetsnap stores the current status of all valuators present in the orchestra into snapshot location in memory inumsnap inumval FLsetsnap index ifn igroup csound doc http www.csounds.com manual html FLsetsnap.html",
        "hierarchy": "Csound Typed Opcode FLTK",
        "module": "Csound.Typed.Opcode.FLTK",
        "name": "flSetsnap",
        "normalized": "D-\u003eSE a",
        "package": "csound-expression-opcodes",
        "partial": "Setsnap",
        "signature": "D-\u003eSE a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-FLTK.html#v:flShow",
      "description": {
        "fct-descr": "\u003cp\u003eRestores the visibility of a previously hidden FLTK widget.\n\u003c/p\u003e\u003cp\u003eFLshow restores the visibility of a previously hidden widget.\n\u003c/p\u003e\u003cpre\u003e  FLshow  ihandle\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/FLshow.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.FLTK",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-FLTK.html#flShow",
        "fct-type": "function",
        "title": "flShow"
      },
      "index": {
        "description": "Restores the visibility of previously hidden FLTK widget FLshow restores the visibility of previously hidden widget FLshow ihandle csound doc http www.csounds.com manual html FLshow.html",
        "hierarchy": "Csound Typed Opcode FLTK",
        "module": "Csound.Typed.Opcode.FLTK",
        "name": "flShow",
        "normalized": "D-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "Show",
        "signature": "D-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-FLTK.html#v:flSlidBnk",
      "description": {
        "fct-descr": "\u003cp\u003eA FLTK widget containing a bank of horizontal sliders.\n\u003c/p\u003e\u003cp\u003eFLslidBnk is a widget containing a bank of horizontal sliders.\n\u003c/p\u003e\u003cpre\u003e  FLslidBnk  \"names\", inumsliders [, ioutable] [, iwidth] [, iheight] [, ix] \\\n           [, iy] [, itypetable] [, iexptable] [, istart_index] [, iminmaxtable]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/FLslidBnk.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.FLTK",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-FLTK.html#flSlidBnk",
        "fct-type": "function",
        "title": "flSlidBnk"
      },
      "index": {
        "description": "FLTK widget containing bank of horizontal sliders FLslidBnk is widget containing bank of horizontal sliders FLslidBnk names inumsliders ioutable iwidth iheight ix iy itypetable iexptable istart index iminmaxtable csound doc http www.csounds.com manual html FLslidBnk.html",
        "hierarchy": "Csound Typed Opcode FLTK",
        "module": "Csound.Typed.Opcode.FLTK",
        "name": "flSlidBnk",
        "normalized": "Str-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "Slid Bnk",
        "signature": "Str-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-FLTK.html#v:flSlidBnk2",
      "description": {
        "fct-descr": "\u003cp\u003eA FLTK widget containing a bank of horizontal sliders.\n\u003c/p\u003e\u003cp\u003eFLslidBnk2 is a widget containing a bank of horizontal sliders.\n\u003c/p\u003e\u003cpre\u003e  FLslidBnk2  \"names\", inumsliders, ioutable, iconfigtable [,iwidth, iheight, ix, iy, istart_index] \n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/FLslidBnk2.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.FLTK",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e D -\u003e D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-FLTK.html#flSlidBnk2",
        "fct-type": "function",
        "title": "flSlidBnk2"
      },
      "index": {
        "description": "FLTK widget containing bank of horizontal sliders FLslidBnk2 is widget containing bank of horizontal sliders FLslidBnk2 names inumsliders ioutable iconfigtable iwidth iheight ix iy istart index csound doc http www.csounds.com manual html FLslidBnk2.html",
        "hierarchy": "Csound Typed Opcode FLTK",
        "module": "Csound.Typed.Opcode.FLTK",
        "name": "flSlidBnk2",
        "normalized": "Str-\u003eD-\u003eD-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "Slid Bnk",
        "signature": "Str-\u003eD-\u003eD-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-FLTK.html#v:flSlidBnk2Set",
      "description": {
        "fct-descr": "\u003cp\u003emodify the values of a slider bank.\n\u003c/p\u003e\u003cp\u003eFLslidBnk2Set modifies the values of a slider bank according to an array of values stored in a table.\n\u003c/p\u003e\u003cpre\u003e  FLslidBnk2Set  ihandle, ifn [, istartIndex, istartSlid, inumSlid]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/FLslidBnk2Set.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.FLTK",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e Tab -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-FLTK.html#flSlidBnk2Set",
        "fct-type": "function",
        "title": "flSlidBnk2Set"
      },
      "index": {
        "description": "modify the values of slider bank FLslidBnk2Set modifies the values of slider bank according to an array of values stored in table FLslidBnk2Set ihandle ifn istartIndex istartSlid inumSlid csound doc http www.csounds.com manual html FLslidBnk2Set.html",
        "hierarchy": "Csound Typed Opcode FLTK",
        "module": "Csound.Typed.Opcode.FLTK",
        "name": "flSlidBnk2Set",
        "normalized": "D-\u003eTab-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "Slid Bnk Set",
        "signature": "D-\u003eTab-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-FLTK.html#v:flSlidBnk2Setk",
      "description": {
        "fct-descr": "\u003cp\u003emodify the values of a slider bank.\n\u003c/p\u003e\u003cp\u003eFLslidBnk2Setk modifies the values of a slider bank according to an array of values stored in a table.\n\u003c/p\u003e\u003cpre\u003e  FLslidBnk2Setk   ktrig, ihandle, ifn [, istartIndex, istartSlid, inumSlid]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/FLslidBnk2Setk.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.FLTK",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e D -\u003e Tab -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-FLTK.html#flSlidBnk2Setk",
        "fct-type": "function",
        "title": "flSlidBnk2Setk"
      },
      "index": {
        "description": "modify the values of slider bank FLslidBnk2Setk modifies the values of slider bank according to an array of values stored in table FLslidBnk2Setk ktrig ihandle ifn istartIndex istartSlid inumSlid csound doc http www.csounds.com manual html FLslidBnk2Setk.html",
        "hierarchy": "Csound Typed Opcode FLTK",
        "module": "Csound.Typed.Opcode.FLTK",
        "name": "flSlidBnk2Setk",
        "normalized": "Sig-\u003eD-\u003eTab-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "Slid Bnk Setk",
        "signature": "Sig-\u003eD-\u003eTab-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-FLTK.html#v:flSlidBnkGetHandle",
      "description": {
        "fct-descr": "\u003cp\u003egets the handle of last slider bank created.\n\u003c/p\u003e\u003cp\u003eFLslidBnkGetHandle gets the handle of last slider bank created.\n\u003c/p\u003e\u003cpre\u003e ihandle  FLslidBnkGetHandle &#160;\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/FLslidBnkGetHandle.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.FLTK",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "SE D",
        "fct-source": "src/Csound-Typed-Opcode-FLTK.html#flSlidBnkGetHandle",
        "fct-type": "function",
        "title": "flSlidBnkGetHandle"
      },
      "index": {
        "description": "gets the handle of last slider bank created FLslidBnkGetHandle gets the handle of last slider bank created ihandle FLslidBnkGetHandle csound doc http www.csounds.com manual html FLslidBnkGetHandle.html",
        "hierarchy": "Csound Typed Opcode FLTK",
        "module": "Csound.Typed.Opcode.FLTK",
        "name": "flSlidBnkGetHandle",
        "normalized": "",
        "package": "csound-expression-opcodes",
        "partial": "Slid Bnk Get Handle",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-FLTK.html#v:flSlidBnkSet",
      "description": {
        "fct-descr": "\u003cp\u003emodify the values of a slider bank.\n\u003c/p\u003e\u003cp\u003eFLslidBnkSet modifies the values of a slider bank according to an array of values stored in a table.\n\u003c/p\u003e\u003cpre\u003e  FLslidBnkSet  ihandle, ifn [, istartIndex, istartSlid, inumSlid]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/FLslidBnkSet.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.FLTK",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e Tab -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-FLTK.html#flSlidBnkSet",
        "fct-type": "function",
        "title": "flSlidBnkSet"
      },
      "index": {
        "description": "modify the values of slider bank FLslidBnkSet modifies the values of slider bank according to an array of values stored in table FLslidBnkSet ihandle ifn istartIndex istartSlid inumSlid csound doc http www.csounds.com manual html FLslidBnkSet.html",
        "hierarchy": "Csound Typed Opcode FLTK",
        "module": "Csound.Typed.Opcode.FLTK",
        "name": "flSlidBnkSet",
        "normalized": "D-\u003eTab-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "Slid Bnk Set",
        "signature": "D-\u003eTab-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-FLTK.html#v:flSlidBnkSetk",
      "description": {
        "fct-descr": "\u003cp\u003emodify the values of a slider bank.\n\u003c/p\u003e\u003cp\u003eFLslidBnkSetk modifies the values of a slider bank according to an array of values stored in a table.\n\u003c/p\u003e\u003cpre\u003e  FLslidBnkSetk   ktrig, ihandle, ifn [, istartIndex, istartSlid, inumSlid]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/FLslidBnkSetk.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.FLTK",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e D -\u003e Tab -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-FLTK.html#flSlidBnkSetk",
        "fct-type": "function",
        "title": "flSlidBnkSetk"
      },
      "index": {
        "description": "modify the values of slider bank FLslidBnkSetk modifies the values of slider bank according to an array of values stored in table FLslidBnkSetk ktrig ihandle ifn istartIndex istartSlid inumSlid csound doc http www.csounds.com manual html FLslidBnkSetk.html",
        "hierarchy": "Csound Typed Opcode FLTK",
        "module": "Csound.Typed.Opcode.FLTK",
        "name": "flSlidBnkSetk",
        "normalized": "Sig-\u003eD-\u003eTab-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "Slid Bnk Setk",
        "signature": "Sig-\u003eD-\u003eTab-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-FLTK.html#v:flSlider",
      "description": {
        "fct-descr": "\u003cp\u003ePuts a slider into the corresponding FLTK container.\n\u003c/p\u003e\u003cp\u003eFLslider puts a slider into the corresponding container.\n\u003c/p\u003e\u003cpre\u003e kout, ihandle  FLslider  \"label\", imin, imax, iexp, itype, idisp, iwidth, \\\n           iheight, ix, iy\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/FLslider.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.FLTK",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e SE a",
        "fct-source": "src/Csound-Typed-Opcode-FLTK.html#flSlider",
        "fct-type": "function",
        "title": "flSlider"
      },
      "index": {
        "description": "Puts slider into the corresponding FLTK container FLslider puts slider into the corresponding container kout ihandle FLslider label imin imax iexp itype idisp iwidth iheight ix iy csound doc http www.csounds.com manual html FLslider.html",
        "hierarchy": "Csound Typed Opcode FLTK",
        "module": "Csound.Typed.Opcode.FLTK",
        "name": "flSlider",
        "normalized": "Str-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSE a",
        "package": "csound-expression-opcodes",
        "partial": "Slider",
        "signature": "Str-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSE a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-FLTK.html#v:flTabs",
      "description": {
        "fct-descr": "\u003cp\u003eCreates a tabbed FLTK interface.\n\u003c/p\u003e\u003cp\u003eFLtabs is a &#226;&#128;&#156;file card tabs&#226;&#128;&#157; interface that is useful to display several areas containing widgets in the same windows, alternatively. It must be used together with FLgroup, another container that groups child widge\u003c/p\u003e\u003cpre\u003e  FLtabs  iwidth, iheight, ix, iy\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/FLtabs.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.FLTK",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-FLTK.html#flTabs",
        "fct-type": "function",
        "title": "flTabs"
      },
      "index": {
        "description": "Creates tabbed FLTK interface FLtabs is file card tabs interface that is useful to display several areas containing widgets in the same windows alternatively It must be used together with FLgroup another container that groups child widge FLtabs iwidth iheight ix iy csound doc http www.csounds.com manual html FLtabs.html",
        "hierarchy": "Csound Typed Opcode FLTK",
        "module": "Csound.Typed.Opcode.FLTK",
        "name": "flTabs",
        "normalized": "D-\u003eD-\u003eD-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "Tabs",
        "signature": "D-\u003eD-\u003eD-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-FLTK.html#v:flTabsEnd",
      "description": {
        "fct-descr": "\u003cp\u003eMarks the end of a tabbed FLTK interface.\n\u003c/p\u003e\u003cpre\u003e  FLtabsEnd &#160;\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/FLtabsEnd.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.FLTK",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "SE ()",
        "fct-source": "src/Csound-Typed-Opcode-FLTK.html#flTabsEnd",
        "fct-type": "function",
        "title": "flTabsEnd"
      },
      "index": {
        "description": "Marks the end of tabbed FLTK interface FLtabsEnd csound doc http www.csounds.com manual html FLtabsEnd.html",
        "hierarchy": "Csound Typed Opcode FLTK",
        "module": "Csound.Typed.Opcode.FLTK",
        "name": "flTabsEnd",
        "normalized": "SE()",
        "package": "csound-expression-opcodes",
        "partial": "Tabs End",
        "signature": "SE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-FLTK.html#v:flText",
      "description": {
        "fct-descr": "\u003cp\u003eA FLTK widget opcode that creates a textbox.\n\u003c/p\u003e\u003cp\u003eFLtext allows the user to modify a parameter value by directly typing it into a text field.\n\u003c/p\u003e\u003cpre\u003e kout, ihandle  FLtext  \"label\", imin, imax, istep, itype, iwidth, \\\n           iheight, ix, iy\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/FLtext.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.FLTK",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e SE a",
        "fct-source": "src/Csound-Typed-Opcode-FLTK.html#flText",
        "fct-type": "function",
        "title": "flText"
      },
      "index": {
        "description": "FLTK widget opcode that creates textbox FLtext allows the user to modify parameter value by directly typing it into text field kout ihandle FLtext label imin imax istep itype iwidth iheight ix iy csound doc http www.csounds.com manual html FLtext.html",
        "hierarchy": "Csound Typed Opcode FLTK",
        "module": "Csound.Typed.Opcode.FLTK",
        "name": "flText",
        "normalized": "Str-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSE a",
        "package": "csound-expression-opcodes",
        "partial": "Text",
        "signature": "Str-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSE a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-FLTK.html#v:flUpdate",
      "description": {
        "fct-descr": "\u003cp\u003eSame as the FLrun opcode.\n\u003c/p\u003e\u003cpre\u003e  FLupdate &#160;\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/FLupdate.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.FLTK",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "SE ()",
        "fct-source": "src/Csound-Typed-Opcode-FLTK.html#flUpdate",
        "fct-type": "function",
        "title": "flUpdate"
      },
      "index": {
        "description": "Same as the FLrun opcode FLupdate csound doc http www.csounds.com manual html FLupdate.html",
        "hierarchy": "Csound Typed Opcode FLTK",
        "module": "Csound.Typed.Opcode.FLTK",
        "name": "flUpdate",
        "normalized": "SE()",
        "package": "csound-expression-opcodes",
        "partial": "Update",
        "signature": "SE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-FLTK.html#v:flValue",
      "description": {
        "fct-descr": "\u003cp\u003eShows the current value of a FLTK valuator.\n\u003c/p\u003e\u003cp\u003eFLvalue shows current the value of a valuator in a text field.\n\u003c/p\u003e\u003cpre\u003e ihandle  FLvalue  \"label\", iwidth, iheight, ix, iy\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/FLvalue.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.FLTK",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e D -\u003e D -\u003e D -\u003e D -\u003e SE D",
        "fct-source": "src/Csound-Typed-Opcode-FLTK.html#flValue",
        "fct-type": "function",
        "title": "flValue"
      },
      "index": {
        "description": "Shows the current value of FLTK valuator FLvalue shows current the value of valuator in text field ihandle FLvalue label iwidth iheight ix iy csound doc http www.csounds.com manual html FLvalue.html",
        "hierarchy": "Csound Typed Opcode FLTK",
        "module": "Csound.Typed.Opcode.FLTK",
        "name": "flValue",
        "normalized": "Str-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSE D",
        "package": "csound-expression-opcodes",
        "partial": "Value",
        "signature": "Str-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSE D"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-FLTK.html#v:flVkeybd",
      "description": {
        "fct-descr": "\u003cp\u003eAn FLTK widget opcode that creates a virtual keyboard widget.\n\u003c/p\u003e\u003cp\u003eAn FLTK widget opcode that creates a virtual keyboard widget. This must\n       be used in conjunction with the virtual midi keyboard driver for this to\n       operate correctly.  The purpose of this opcode is for making demo versions\n       of MIDI orchestras with the virtual keyboard embedded within the main\n       window.\n\u003c/p\u003e\u003cpre\u003e  FLvkeybd  \"keyboard.map\", iwidth, iheight, ix, iy\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/FLvkeybd.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.FLTK",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e D -\u003e D -\u003e D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-FLTK.html#flVkeybd",
        "fct-type": "function",
        "title": "flVkeybd"
      },
      "index": {
        "description": "An FLTK widget opcode that creates virtual keyboard widget An FLTK widget opcode that creates virtual keyboard widget This must be used in conjunction with the virtual midi keyboard driver for this to operate correctly The purpose of this opcode is for making demo versions of MIDI orchestras with the virtual keyboard embedded within the main window FLvkeybd keyboard.map iwidth iheight ix iy csound doc http www.csounds.com manual html FLvkeybd.html",
        "hierarchy": "Csound Typed Opcode FLTK",
        "module": "Csound.Typed.Opcode.FLTK",
        "name": "flVkeybd",
        "normalized": "Str-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "Vkeybd",
        "signature": "Str-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-FLTK.html#v:flVslidBnk",
      "description": {
        "fct-descr": "\u003cp\u003eA FLTK widget containing a bank of vertical sliders.\n\u003c/p\u003e\u003cp\u003eFLvslidBnk is a widget containing a bank of vertical sliders.\n\u003c/p\u003e\u003cpre\u003e  FLvslidBnk  \"names\", inumsliders [, ioutable] [, iwidth] [, iheight] [, ix] \\\n           [, iy] [, itypetable] [, iexptable] [, istart_index] [, iminmaxtable]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/FLvslidBnk.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.FLTK",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-FLTK.html#flVslidBnk",
        "fct-type": "function",
        "title": "flVslidBnk"
      },
      "index": {
        "description": "FLTK widget containing bank of vertical sliders FLvslidBnk is widget containing bank of vertical sliders FLvslidBnk names inumsliders ioutable iwidth iheight ix iy itypetable iexptable istart index iminmaxtable csound doc http www.csounds.com manual html FLvslidBnk.html",
        "hierarchy": "Csound Typed Opcode FLTK",
        "module": "Csound.Typed.Opcode.FLTK",
        "name": "flVslidBnk",
        "normalized": "Str-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "Vslid Bnk",
        "signature": "Str-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-FLTK.html#v:flVslidBnk2",
      "description": {
        "fct-descr": "\u003cp\u003eA FLTK widget containing a bank of vertical sliders.\n\u003c/p\u003e\u003cp\u003eFLvslidBnk2 is a widget containing a bank of vertical sliders.\n\u003c/p\u003e\u003cpre\u003e  FLvslidBnk2  \"names\", inumsliders, ioutable, iconfigtable [,iwidth, iheight, ix, iy, istart_index]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/FLvslidBnk2.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.FLTK",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e D -\u003e D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-FLTK.html#flVslidBnk2",
        "fct-type": "function",
        "title": "flVslidBnk2"
      },
      "index": {
        "description": "FLTK widget containing bank of vertical sliders FLvslidBnk2 is widget containing bank of vertical sliders FLvslidBnk2 names inumsliders ioutable iconfigtable iwidth iheight ix iy istart index csound doc http www.csounds.com manual html FLvslidBnk2.html",
        "hierarchy": "Csound Typed Opcode FLTK",
        "module": "Csound.Typed.Opcode.FLTK",
        "name": "flVslidBnk2",
        "normalized": "Str-\u003eD-\u003eD-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "Vslid Bnk",
        "signature": "Str-\u003eD-\u003eD-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-FLTK.html#v:flXyin",
      "description": {
        "fct-descr": "\u003cp\u003eSenses the mouse cursor position in a user-defined area inside an FLpanel.\n\u003c/p\u003e\u003cp\u003eSimilar to xyin, sense the mouse cursor position in a user-defined area inside an FLpanel.\n\u003c/p\u003e\u003cpre\u003e koutx, kouty, kinside   FLxyin  ioutx_min, ioutx_max, iouty_min, iouty_max, \\\n           iwindx_min, iwindx_max, iwindy_min, iwindy_max [, iexpx, iexpy, ioutx, iouty]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/FLxyin.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.FLTK",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e SE a",
        "fct-source": "src/Csound-Typed-Opcode-FLTK.html#flXyin",
        "fct-type": "function",
        "title": "flXyin"
      },
      "index": {
        "description": "Senses the mouse cursor position in user-defined area inside an FLpanel Similar to xyin sense the mouse cursor position in user-defined area inside an FLpanel koutx kouty kinside FLxyin ioutx min ioutx max iouty min iouty max iwindx min iwindx max iwindy min iwindy max iexpx iexpy ioutx iouty csound doc http www.csounds.com manual html FLxyin.html",
        "hierarchy": "Csound Typed Opcode FLTK",
        "module": "Csound.Typed.Opcode.FLTK",
        "name": "flXyin",
        "normalized": "D-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSE a",
        "package": "csound-expression-opcodes",
        "partial": "Xyin",
        "signature": "D-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSE a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-FLTK.html#v:vphaseseg",
      "description": {
        "fct-descr": "\u003cp\u003eAllows one-dimensional HVS (Hyper-Vectorial Synthesis).\n\u003c/p\u003e\u003cp\u003evphaseseg allows one-dimensional HVS (Hyper-Vectorial Synthesis).\n\u003c/p\u003e\u003cpre\u003e  vphaseseg  kphase, ioutab, ielems, itab1,idist1,itab2 \\\n           [,idist2,itab3, ... ,idistN-1,itabN]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vphaseseg.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.FLTK",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e D -\u003e D -\u003e [D] -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-FLTK.html#vphaseseg",
        "fct-type": "function",
        "title": "vphaseseg"
      },
      "index": {
        "description": "Allows one-dimensional HVS Hyper-Vectorial Synthesis vphaseseg allows one-dimensional HVS Hyper-Vectorial Synthesis vphaseseg kphase ioutab ielems itab1 idist1 itab2 idist2 itab3 idistN-1 itabN csound doc http www.csounds.com manual html vphaseseg.html",
        "hierarchy": "Csound Typed Opcode FLTK",
        "module": "Csound.Typed.Opcode.FLTK",
        "name": "vphaseseg",
        "normalized": "Sig-\u003eD-\u003eD-\u003e[D]-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eD-\u003eD-\u003e[D]-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-ImageProcessingOpcodes.html#",
      "description": {
        "fct-module": "Csound.Typed.Opcode.ImageProcessingOpcodes",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "module",
        "fct-source": "src/Csound-Typed-Opcode-ImageProcessingOpcodes.html",
        "fct-type": "module",
        "title": "ImageProcessingOpcodes"
      },
      "index": {
        "description": "",
        "hierarchy": "Csound Typed Opcode ImageProcessingOpcodes",
        "module": "Csound.Typed.Opcode.ImageProcessingOpcodes",
        "name": "ImageProcessingOpcodes",
        "normalized": "",
        "package": "csound-expression-opcodes",
        "partial": "Image Processing Opcodes",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-ImageProcessingOpcodes.html#v:imagecreate",
      "description": {
        "fct-descr": "\u003cp\u003eCreate an empty image of a given size.\n\u003c/p\u003e\u003cp\u003eCreate an empty image of a given size. Individual pixel values can then be set with. imagegetpixel.\n\u003c/p\u003e\u003cpre\u003e iimagenum  imagecreate  iwidth, iheight\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/imagecreate.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.ImageProcessingOpcodes",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e SE D",
        "fct-source": "src/Csound-Typed-Opcode-ImageProcessingOpcodes.html#imagecreate",
        "fct-type": "function",
        "title": "imagecreate"
      },
      "index": {
        "description": "Create an empty image of given size Create an empty image of given size Individual pixel values can then be set with imagegetpixel iimagenum imagecreate iwidth iheight csound doc http www.csounds.com manual html imagecreate.html",
        "hierarchy": "Csound Typed Opcode ImageProcessingOpcodes",
        "module": "Csound.Typed.Opcode.ImageProcessingOpcodes",
        "name": "imagecreate",
        "normalized": "D-\u003eD-\u003eSE D",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eSE D"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-ImageProcessingOpcodes.html#v:imagefree",
      "description": {
        "fct-descr": "\u003cp\u003eFrees memory allocated for a previously loaded or created image.\n\u003c/p\u003e\u003cpre\u003e  imagefree  iimagenum\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/imagefree.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.ImageProcessingOpcodes",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-ImageProcessingOpcodes.html#imagefree",
        "fct-type": "function",
        "title": "imagefree"
      },
      "index": {
        "description": "Frees memory allocated for previously loaded or created image imagefree iimagenum csound doc http www.csounds.com manual html imagefree.html",
        "hierarchy": "Csound Typed Opcode ImageProcessingOpcodes",
        "module": "Csound.Typed.Opcode.ImageProcessingOpcodes",
        "name": "imagefree",
        "normalized": "D-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-ImageProcessingOpcodes.html#v:imagegetpixel",
      "description": {
        "fct-descr": "\u003cp\u003eReturn the RGB pixel values of a previously opened or created image.\n\u003c/p\u003e\u003cp\u003eReturn the RGB pixel values of a previously opened or created image. An image can be loaded with imageload. An empty image can be created with imagecreate.\n\u003c/p\u003e\u003cpre\u003e ared, agreen, ablue  imagegetpixel  iimagenum, ax, ay\n kred, kgreen, kblue  imagegetpixel  iimagenum, kx, ky\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/imagegetpixel.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.ImageProcessingOpcodes",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e Sig -\u003e Sig -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-ImageProcessingOpcodes.html#imagegetpixel",
        "fct-type": "function",
        "title": "imagegetpixel"
      },
      "index": {
        "description": "Return the RGB pixel values of previously opened or created image Return the RGB pixel values of previously opened or created image An image can be loaded with imageload An empty image can be created with imagecreate ared agreen ablue imagegetpixel iimagenum ax ay kred kgreen kblue imagegetpixel iimagenum kx ky csound doc http www.csounds.com manual html imagegetpixel.html",
        "hierarchy": "Csound Typed Opcode ImageProcessingOpcodes",
        "module": "Csound.Typed.Opcode.ImageProcessingOpcodes",
        "name": "imagegetpixel",
        "normalized": "D-\u003eSig-\u003eSig-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eSig-\u003eSig-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-ImageProcessingOpcodes.html#v:imageload",
      "description": {
        "fct-descr": "\u003cp\u003eLoad an image.\n\u003c/p\u003e\u003cp\u003eLoad an image and return a reference to it. Individual pixel values can then be accessed with imagegetpixel.\n\u003c/p\u003e\u003cpre\u003e iimagenum  imageload  filename\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/imageload.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.ImageProcessingOpcodes",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Spec -\u003e SE D",
        "fct-source": "src/Csound-Typed-Opcode-ImageProcessingOpcodes.html#imageload",
        "fct-type": "function",
        "title": "imageload"
      },
      "index": {
        "description": "Load an image Load an image and return reference to it Individual pixel values can then be accessed with imagegetpixel iimagenum imageload filename csound doc http www.csounds.com manual html imageload.html",
        "hierarchy": "Csound Typed Opcode ImageProcessingOpcodes",
        "module": "Csound.Typed.Opcode.ImageProcessingOpcodes",
        "name": "imageload",
        "normalized": "Spec-\u003eSE D",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Spec-\u003eSE D"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-ImageProcessingOpcodes.html#v:imagesave",
      "description": {
        "fct-descr": "\u003cp\u003eSave a previously created image.\n\u003c/p\u003e\u003cp\u003eSave a previously created image. An empty image can be created with imagecreate and its pixel RGB values can be set with imagesetpixel. The image will be saved in PNG format.\n\u003c/p\u003e\u003cpre\u003e  imagesave  iimagenum, filename\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/imagesave.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.ImageProcessingOpcodes",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e Spec -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-ImageProcessingOpcodes.html#imagesave",
        "fct-type": "function",
        "title": "imagesave"
      },
      "index": {
        "description": "Save previously created image Save previously created image An empty image can be created with imagecreate and its pixel RGB values can be set with imagesetpixel The image will be saved in PNG format imagesave iimagenum filename csound doc http www.csounds.com manual html imagesave.html",
        "hierarchy": "Csound Typed Opcode ImageProcessingOpcodes",
        "module": "Csound.Typed.Opcode.ImageProcessingOpcodes",
        "name": "imagesave",
        "normalized": "D-\u003eSpec-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eSpec-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-ImageProcessingOpcodes.html#v:imagesetpixel",
      "description": {
        "fct-descr": "\u003cp\u003eSet the RGB value of a pixel inside a previously opened or created image.\n\u003c/p\u003e\u003cp\u003eSet the RGB value of a pixel inside a previously opened or created image. An image can be loaded with imageload. An empty image can be created with imagecreate and saved with imagesave.\n\u003c/p\u003e\u003cpre\u003e  imagesetpixel  iimagenum, ax, ay, ared, agreen, ablue\n  imagesetpixel  iimagenum, kx, ky, kred, kgreen, kblue\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/imagesetpixel.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.ImageProcessingOpcodes",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-ImageProcessingOpcodes.html#imagesetpixel",
        "fct-type": "function",
        "title": "imagesetpixel"
      },
      "index": {
        "description": "Set the RGB value of pixel inside previously opened or created image Set the RGB value of pixel inside previously opened or created image An image can be loaded with imageload An empty image can be created with imagecreate and saved with imagesave imagesetpixel iimagenum ax ay ared agreen ablue imagesetpixel iimagenum kx ky kred kgreen kblue csound doc http www.csounds.com manual html imagesetpixel.html",
        "hierarchy": "Csound Typed Opcode ImageProcessingOpcodes",
        "module": "Csound.Typed.Opcode.ImageProcessingOpcodes",
        "name": "imagesetpixel",
        "normalized": "D-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-ImageProcessingOpcodes.html#v:imagesize",
      "description": {
        "fct-descr": "\u003cp\u003eReturn the width and height of a previously opened or created image.\n\u003c/p\u003e\u003cp\u003eReturn the width and height of a previously opened or created image. An image can be loaded with imageload. An empty image can be created with imagecreate.\n\u003c/p\u003e\u003cpre\u003e iwidth, iheight  imagesize  iimagenum\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/imagesize.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.ImageProcessingOpcodes",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-ImageProcessingOpcodes.html#imagesize",
        "fct-type": "function",
        "title": "imagesize"
      },
      "index": {
        "description": "Return the width and height of previously opened or created image Return the width and height of previously opened or created image An image can be loaded with imageload An empty image can be created with imagecreate iwidth iheight imagesize iimagenum csound doc http www.csounds.com manual html imagesize.html",
        "hierarchy": "Csound Typed Opcode ImageProcessingOpcodes",
        "module": "Csound.Typed.Opcode.ImageProcessingOpcodes",
        "name": "imagesize",
        "normalized": "D-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#",
      "description": {
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "module",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html",
        "fct-type": "module",
        "title": "InstrumentControl"
      },
      "index": {
        "description": "",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "InstrumentControl",
        "normalized": "",
        "package": "csound-expression-opcodes",
        "partial": "Instrument Control",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#v:active",
      "description": {
        "fct-descr": "\u003cp\u003eReturns the number of active instances of an instrument.\n\u003c/p\u003e\u003cpre\u003e ir  active  insnum [,iopt]\n ir  active  Sinsname [,iopt]\n kres  active  kinsnum [,iopt]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/active.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html#active",
        "fct-type": "function",
        "title": "active"
      },
      "index": {
        "description": "Returns the number of active instances of an instrument ir active insnum iopt ir active Sinsname iopt kres active kinsnum iopt csound doc http www.csounds.com manual html active.html",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "active",
        "normalized": "D-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#v:button",
      "description": {
        "fct-descr": "\u003cp\u003eSense on-screen controls.\n\u003c/p\u003e\u003cp\u003eSense on-screen controls. Requires Winsound or TCL/TK.\n\u003c/p\u003e\u003cpre\u003e kres  button  knum\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/button.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html#button",
        "fct-type": "function",
        "title": "button"
      },
      "index": {
        "description": "Sense on-screen controls Sense on-screen controls Requires Winsound or TCL TK kres button knum csound doc http www.csounds.com manual html button.html",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "button",
        "normalized": "Sig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#v:changed",
      "description": {
        "fct-descr": "\u003cp\u003ek-rate signal change detector.\n\u003c/p\u003e\u003cp\u003eThis opcode outputs a trigger signal that informs when any one of its k-rate arguments has changed. Useful with valuator widgets or MIDI controllers.\n\u003c/p\u003e\u003cpre\u003e ktrig  changed  kvar1 [, kvar2,..., kvarN]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/changed.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "[Sig] -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html#changed",
        "fct-type": "function",
        "title": "changed"
      },
      "index": {
        "description": "k-rate signal change detector This opcode outputs trigger signal that informs when any one of its k-rate arguments has changed Useful with valuator widgets or MIDI controllers ktrig changed kvar1 kvar2 kvarN csound doc http www.csounds.com manual html changed.html",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "changed",
        "normalized": "[Sig]-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "[Sig]-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#v:checkbox",
      "description": {
        "fct-descr": "\u003cp\u003eSense on-screen controls.\n\u003c/p\u003e\u003cp\u003eSense on-screen controls. Requires Winsound or TCL/TK.\n\u003c/p\u003e\u003cpre\u003e kres  checkbox  knum\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/checkbox.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html#checkbox",
        "fct-type": "function",
        "title": "checkbox"
      },
      "index": {
        "description": "Sense on-screen controls Sense on-screen controls Requires Winsound or TCL TK kres checkbox knum csound doc http www.csounds.com manual html checkbox.html",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "checkbox",
        "normalized": "Sig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#v:clockoff",
      "description": {
        "fct-descr": "\u003cp\u003eStops one of a number of internal clocks.\n\u003c/p\u003e\u003cpre\u003e  clockoff  inum\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/clockoff.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html#clockoff",
        "fct-type": "function",
        "title": "clockoff"
      },
      "index": {
        "description": "Stops one of number of internal clocks clockoff inum csound doc http www.csounds.com manual html clockoff.html",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "clockoff",
        "normalized": "D-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#v:clockon",
      "description": {
        "fct-descr": "\u003cp\u003eStarts one of a number of internal clocks.\n\u003c/p\u003e\u003cpre\u003e  clockon  inum\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/clockon.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html#clockon",
        "fct-type": "function",
        "title": "clockon"
      },
      "index": {
        "description": "Starts one of number of internal clocks clockon inum csound doc http www.csounds.com manual html clockon.html",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "clockon",
        "normalized": "D-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#v:control",
      "description": {
        "fct-descr": "\u003cp\u003eConfigurable slider controls for realtime user input.\n\u003c/p\u003e\u003cp\u003eConfigurable slider controls for realtime user input. Requires Winsound or TCL/TK. control reads a slider's value.\n\u003c/p\u003e\u003cpre\u003e kres  control  knum\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/control.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html#control",
        "fct-type": "function",
        "title": "control"
      },
      "index": {
        "description": "Configurable slider controls for realtime user input Configurable slider controls for realtime user input Requires Winsound or TCL TK control reads slider value kres control knum csound doc http www.csounds.com manual html control.html",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "control",
        "normalized": "Sig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#v:cpuprc",
      "description": {
        "fct-descr": "\u003cp\u003eControl allocation of cpu resources on a per-instrument basis, to optimize realtime output.\n\u003c/p\u003e\u003cpre\u003e  cpuprc  insnum, ipercent\n  cpuprc  Sinsname, ipercent\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/cpuprc.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html#cpuprc",
        "fct-type": "function",
        "title": "cpuprc"
      },
      "index": {
        "description": "Control allocation of cpu resources on per-instrument basis to optimize realtime output cpuprc insnum ipercent cpuprc Sinsname ipercent csound doc http www.csounds.com manual html cpuprc.html",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "cpuprc",
        "normalized": "D-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#v:date",
      "description": {
        "fct-descr": "\u003cp\u003eReturns the number seconds since a base date.\n\u003c/p\u003e\u003cp\u003eReturns the number seconds since a base date, using the\n       operating system's clock.  The base is 1 January 1970 for Csound\n       using doubles, and 1 January 2010 for versions using floats.\n\u003c/p\u003e\u003cpre\u003e ir  date &#160;\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/date.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html#date",
        "fct-type": "function",
        "title": "date"
      },
      "index": {
        "description": "Returns the number seconds since base date Returns the number seconds since base date using the operating system clock The base is January for Csound using doubles and January for versions using floats ir date csound doc http www.csounds.com manual html date.html",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "date",
        "normalized": "",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#v:dates",
      "description": {
        "fct-descr": "\u003cp\u003eReturns as a string the date and time specified.\n\u003c/p\u003e\u003cpre\u003e Sir  dates  [ itime]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/dates.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html#dates",
        "fct-type": "function",
        "title": "dates"
      },
      "index": {
        "description": "Returns as string the date and time specified Sir dates itime csound doc http www.csounds.com manual html dates.html",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "dates",
        "normalized": "",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#v:event",
      "description": {
        "fct-descr": "\u003cp\u003eGenerates a score event from an instrument.\n\u003c/p\u003e\u003cpre\u003e  event  \"scorechar\", kinsnum, kdelay, kdur, [, kp4] [, kp5] [, ...]\n  event  \"scorechar\", \"insname\", kdelay, kdur, [, kp4] [, kp5] [, ...]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/event.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e Sig -\u003e Sig -\u003e Sig -\u003e [Sig] -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html#event",
        "fct-type": "function",
        "title": "event"
      },
      "index": {
        "description": "Generates score event from an instrument event scorechar kinsnum kdelay kdur kp4 kp5 event scorechar insname kdelay kdur kp4 kp5 csound doc http www.csounds.com manual html event.html",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "event",
        "normalized": "Str-\u003eSig-\u003eSig-\u003eSig-\u003e[Sig]-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eSig-\u003eSig-\u003eSig-\u003e[Sig]-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#v:event_i",
      "description": {
        "fct-descr": "\u003cp\u003eGenerates a score event from an instrument.\n\u003c/p\u003e\u003cpre\u003e  event_i  \"scorechar\", iinsnum, idelay, idur, [, ip4] [, ip5] [, ...]\n  event_i  \"scorechar\", \"insname\", idelay, idur, [, ip4] [, ip5] [, ...]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/event_i.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e D -\u003e D -\u003e D -\u003e [D] -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html#event_i",
        "fct-type": "function",
        "title": "event_i"
      },
      "index": {
        "description": "Generates score event from an instrument event scorechar iinsnum idelay idur ip4 ip5 event scorechar insname idelay idur ip4 ip5 csound doc http www.csounds.com manual html event i.html",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "event_i",
        "normalized": "Str-\u003eD-\u003eD-\u003eD-\u003e[D]-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eD-\u003eD-\u003eD-\u003e[D]-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#v:exitnow",
      "description": {
        "fct-descr": "\u003cp\u003eExit Csound as fast as possible, with no cleaning up.\n\u003c/p\u003e\u003cp\u003eIn Csound4 calls an exit function to leave Csound as fast as\n     possible. On Csound5 exits back to the driving code.\n\u003c/p\u003e\u003cpre\u003e  exitnow &#160;\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/exitnow.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "SE ()",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html#exitnow",
        "fct-type": "function",
        "title": "exitnow"
      },
      "index": {
        "description": "Exit Csound as fast as possible with no cleaning up In Csound4 calls an exit function to leave Csound as fast as possible On Csound5 exits back to the driving code exitnow csound doc http www.csounds.com manual html exitnow.html",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "exitnow",
        "normalized": "SE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "SE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#v:follow",
      "description": {
        "fct-descr": "\u003cp\u003eEnvelope follower unit generator.\n\u003c/p\u003e\u003cpre\u003e ares  follow  asig, idt\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/follow.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html#follow",
        "fct-type": "function",
        "title": "follow"
      },
      "index": {
        "description": "Envelope follower unit generator ares follow asig idt csound doc http www.csounds.com manual html follow.html",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "follow",
        "normalized": "Sig-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#v:follow2",
      "description": {
        "fct-descr": "\u003cp\u003eAnother controllable envelope extractor.\n\u003c/p\u003e\u003cp\u003eA controllable envelope extractor using the algorithm attributed to Jean-Marc Jot.\n\u003c/p\u003e\u003cpre\u003e ares  follow2  asig, katt, krel\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/follow2.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html#follow2",
        "fct-type": "function",
        "title": "follow2"
      },
      "index": {
        "description": "Another controllable envelope extractor controllable envelope extractor using the algorithm attributed to Jean-Marc Jot ares follow2 asig katt krel csound doc http www.csounds.com manual html follow2.html",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "follow2",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#v:getcfg",
      "description": {
        "fct-descr": "\u003cp\u003eReturn Csound settings.\n\u003c/p\u003e\u003cp\u003eReturn various configuration settings in Svalue as a string at init time.\n\u003c/p\u003e\u003cpre\u003e Svalue  getcfg  iopt\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/getcfg.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e Str",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html#getcfg",
        "fct-type": "function",
        "title": "getcfg"
      },
      "index": {
        "description": "Return Csound settings Return various configuration settings in Svalue as string at init time Svalue getcfg iopt csound doc http www.csounds.com manual html getcfg.html",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "getcfg",
        "normalized": "D-\u003eStr",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eStr"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#v:ihold",
      "description": {
        "fct-descr": "\u003cp\u003eCreates a held note.\n\u003c/p\u003e\u003cp\u003eCauses a finite-duration note to become a &#226;&#128;&#156;held&#226;&#128;&#157; n\u003c/p\u003e\u003cpre\u003e  ihold &#160;\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/ihold.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "SE ()",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html#ihold",
        "fct-type": "function",
        "title": "ihold"
      },
      "index": {
        "description": "Creates held note Causes finite-duration note to become held ihold csound doc http www.csounds.com manual html ihold.html",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "ihold",
        "normalized": "SE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "SE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#v:jacktransport",
      "description": {
        "fct-descr": "\u003cp\u003eStart/stop jack_transport and can optionally relocate the playback head.\n\u003c/p\u003e\u003cpre\u003e  jacktransport  icommand [, ilocation]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/jacktransport.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html#jacktransport",
        "fct-type": "function",
        "title": "jacktransport"
      },
      "index": {
        "description": "Start stop jack transport and can optionally relocate the playback head jacktransport icommand ilocation csound doc http www.csounds.com manual html jacktransport.html",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "jacktransport",
        "normalized": "D-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#v:joystick",
      "description": {
        "fct-descr": "\u003cp\u003eReads data from a joystick controller.\n\u003c/p\u003e\u003cp\u003eReads data from a Linux joystick controller\n\u003c/p\u003e\u003cpre\u003e kres  joystick  kdevice ktab\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/joystick.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html#joystick",
        "fct-type": "function",
        "title": "joystick"
      },
      "index": {
        "description": "Reads data from joystick controller Reads data from Linux joystick controller kres joystick kdevice ktab csound doc http www.csounds.com manual html joystick.html",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "joystick",
        "normalized": "Sig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#v:maxalloc",
      "description": {
        "fct-descr": "\u003cp\u003eLimits the number of allocations of an instrument.\n\u003c/p\u003e\u003cpre\u003e  maxalloc  insnum, icount\n  maxalloc  Sinsname, icount\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/maxalloc.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html#maxalloc",
        "fct-type": "function",
        "title": "maxalloc"
      },
      "index": {
        "description": "Limits the number of allocations of an instrument maxalloc insnum icount maxalloc Sinsname icount csound doc http www.csounds.com manual html maxalloc.html",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "maxalloc",
        "normalized": "D-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#v:metro",
      "description": {
        "fct-descr": "\u003cp\u003eTrigger Metronome\n\u003c/p\u003e\u003cp\u003eGenerate a metronomic signal to be used in any circumstance an isochronous trigger is needed.\n\u003c/p\u003e\u003cpre\u003e ktrig   metro   kfreq [, initphase]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/metro.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html#metro",
        "fct-type": "function",
        "title": "metro"
      },
      "index": {
        "description": "Trigger Metronome Generate metronomic signal to be used in any circumstance an isochronous trigger is needed ktrig metro kfreq initphase csound doc http www.csounds.com manual html metro.html",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "metro",
        "normalized": "Sig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#v:miditempo",
      "description": {
        "fct-descr": "\u003cp\u003eReturns the current tempo at k-rate, of either the MIDI file (if available) or the score\n\u003c/p\u003e\u003cpre\u003e ksig   miditempo &#160;\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/miditempo.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html#miditempo",
        "fct-type": "function",
        "title": "miditempo"
      },
      "index": {
        "description": "Returns the current tempo at k-rate of either the MIDI file if available or the score ksig miditempo csound doc http www.csounds.com manual html miditempo.html",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "miditempo",
        "normalized": "",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#v:mute",
      "description": {
        "fct-descr": "\u003cp\u003eMutes/unmutes new instances of a given instrument.\n\u003c/p\u003e\u003cpre\u003e  mute  insnum [, iswitch]\n  mute  \"insname\" [, iswitch]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/mute.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html#mute",
        "fct-type": "function",
        "title": "mute"
      },
      "index": {
        "description": "Mutes unmutes new instances of given instrument mute insnum iswitch mute insname iswitch csound doc http www.csounds.com manual html mute.html",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "mute",
        "normalized": "D-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#v:p5gconnect",
      "description": {
        "fct-descr": "\u003cp\u003eReads data from a P5 Glove controller.\n\u003c/p\u003e\u003cp\u003eOpens and at control-rate polls a P5 Glove controller.\n\u003c/p\u003e\u003cpre\u003e  p5gconnect &#160;\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/p5gconnect.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "SE ()",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html#p5gconnect",
        "fct-type": "function",
        "title": "p5gconnect"
      },
      "index": {
        "description": "Reads data from P5 Glove controller Opens and at control-rate polls P5 Glove controller p5gconnect csound doc http www.csounds.com manual html p5gconnect.html",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "p5gconnect",
        "normalized": "SE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "SE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#v:p5gdata",
      "description": {
        "fct-descr": "\u003cp\u003eReads data fields from an external P5 Glove.\n\u003c/p\u003e\u003cp\u003eReads data fields from a P5 Glove controller.\n\u003c/p\u003e\u003cpre\u003e kres  p5gdata  kcontrol\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/p5gdata.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html#p5gdata",
        "fct-type": "function",
        "title": "p5gdata"
      },
      "index": {
        "description": "Reads data fields from an external P5 Glove Reads data fields from P5 Glove controller kres p5gdata kcontrol csound doc http www.csounds.com manual html p5gdata.html",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "p5gdata",
        "normalized": "Sig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#v:pcount",
      "description": {
        "fct-descr": "\u003cp\u003eReturns the number of pfields belonging to a note event.\n\u003c/p\u003e\u003cp\u003epcount returns the number of pfields belonging to a note event.\n\u003c/p\u003e\u003cpre\u003e icount  pcount &#160;\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/pcount.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html#pcount",
        "fct-type": "function",
        "title": "pcount"
      },
      "index": {
        "description": "Returns the number of pfields belonging to note event pcount returns the number of pfields belonging to note event icount pcount csound doc http www.csounds.com manual html pcount.html",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "pcount",
        "normalized": "",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#v:peak",
      "description": {
        "fct-descr": "\u003cp\u003eMaintains the output equal to the highest absolute value received.\n\u003c/p\u003e\u003cp\u003eThese opcodes maintain the output k-rate variable as the peak absolute level so far received.\n\u003c/p\u003e\u003cpre\u003e kres  peak  asig\n kres  peak  ksig\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/peak.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html#peak",
        "fct-type": "function",
        "title": "peak"
      },
      "index": {
        "description": "Maintains the output equal to the highest absolute value received These opcodes maintain the output k-rate variable as the peak absolute level so far received kres peak asig kres peak ksig csound doc http www.csounds.com manual html peak.html",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "peak",
        "normalized": "Sig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#v:pindex",
      "description": {
        "fct-descr": "\u003cp\u003eReturns the value of a specified pfield.\n\u003c/p\u003e\u003cp\u003epindex returns the value of a specified pfield.\n\u003c/p\u003e\u003cpre\u003e ivalue  pindex  ipfieldIndex\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/pindex.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html#pindex",
        "fct-type": "function",
        "title": "pindex"
      },
      "index": {
        "description": "Returns the value of specified pfield pindex returns the value of specified pfield ivalue pindex ipfieldIndex csound doc http www.csounds.com manual html pindex.html",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "pindex",
        "normalized": "D-\u003eD",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#v:pitch",
      "description": {
        "fct-descr": "\u003cp\u003eTracks the pitch of a signal.\n\u003c/p\u003e\u003cp\u003eUsing the same techniques as spectrum and specptrk, pitch tracks the pitch of the signal in octave point decimal form, and amplitude in dB.\n\u003c/p\u003e\u003cpre\u003e koct, kamp  pitch  asig, iupdte, ilo, ihi, idbthresh [, ifrqs] [, iconf] \\\n           [, istrt] [, iocts] [, iq] [, inptls] [, irolloff] [, iskip]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/pitch.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e D -\u003e D -\u003e D -\u003e D -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html#pitch",
        "fct-type": "function",
        "title": "pitch"
      },
      "index": {
        "description": "Tracks the pitch of signal Using the same techniques as spectrum and specptrk pitch tracks the pitch of the signal in octave point decimal form and amplitude in dB koct kamp pitch asig iupdte ilo ihi idbthresh ifrqs iconf istrt iocts iq inptls irolloff iskip csound doc http www.csounds.com manual html pitch.html",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "pitch",
        "normalized": "Sig-\u003eD-\u003eD-\u003eD-\u003eD-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eD-\u003eD-\u003eD-\u003eD-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#v:pitchamdf",
      "description": {
        "fct-descr": "\u003cp\u003eFollows the pitch of a signal based on the AMDF method.\n\u003c/p\u003e\u003cp\u003eFollows the pitch of a signal based on the AMDF method (Average Magnitude Difference Function). Outputs pitch and amplitude tracking signals. The method is quite fast and should run in realtime. This technique usually works best for monophonic signals.\n\u003c/p\u003e\u003cpre\u003e kcps, krms  pitchamdf  asig, imincps, imaxcps [, icps] [, imedi] \\\n           [, idowns] [, iexcps] [, irmsmedi]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/pitchamdf.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e D -\u003e D -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html#pitchamdf",
        "fct-type": "function",
        "title": "pitchamdf"
      },
      "index": {
        "description": "Follows the pitch of signal based on the AMDF method Follows the pitch of signal based on the AMDF method Average Magnitude Difference Function Outputs pitch and amplitude tracking signals The method is quite fast and should run in realtime This technique usually works best for monophonic signals kcps krms pitchamdf asig imincps imaxcps icps imedi idowns iexcps irmsmedi csound doc http www.csounds.com manual html pitchamdf.html",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "pitchamdf",
        "normalized": "Sig-\u003eD-\u003eD-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eD-\u003eD-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#v:plltrack",
      "description": {
        "fct-descr": "\u003cp\u003eTracks the pitch of a signal.\n\u003c/p\u003e\u003cp\u003eplltrack, a pitch tracker based on a phase-locked loop algorithm, described in Zolzer, U, Sankarababu, S.V. and Moller, S, \u003ca\u003ePLL-based Pitch Detection and Tracking for Audio Signals. Proc. of IIH-MSP 2012\u003c/a\u003e.\n\u003c/p\u003e\u003cpre\u003e acps, alock  plltrack  asig, kd [, kloopf, kloopq, klf, khf, kthresh]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/plltrack.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html#plltrack",
        "fct-type": "function",
        "title": "plltrack"
      },
      "index": {
        "description": "Tracks the pitch of signal plltrack pitch tracker based on phase-locked loop algorithm described in Zolzer Sankarababu S.V and Moller PLL-based Pitch Detection and Tracking for Audio Signals Proc of IIH-MSP acps alock plltrack asig kd kloopf kloopq klf khf kthresh csound doc http www.csounds.com manual html plltrack.html",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "plltrack",
        "normalized": "Sig-\u003eSig-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#v:pop",
      "description": {
        "fct-descr": "\u003cp\u003ePops values from the global stack.\n\u003c/p\u003e\u003cpre\u003e xval1, [xval2, ... , xval31]  pop &#160; ival1, [ival2, ... , ival31]  pop &#160;\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/pop.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "a",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html#pop",
        "fct-type": "function",
        "title": "pop"
      },
      "index": {
        "description": "Pops values from the global stack xval1 xval2 xval31 pop ival1 ival2 ival31 pop csound doc http www.csounds.com manual html pop.html",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "pop",
        "normalized": "",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#v:pop_f",
      "description": {
        "fct-descr": "\u003cp\u003ePops an f-sig frame from the global stack.\n\u003c/p\u003e\u003cpre\u003e fsig  pop_f &#160;\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/pop_f.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Spec",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html#pop_f",
        "fct-type": "function",
        "title": "pop_f"
      },
      "index": {
        "description": "Pops an f-sig frame from the global stack fsig pop csound doc http www.csounds.com manual html pop f.html",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "pop_f",
        "normalized": "",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#v:prealloc",
      "description": {
        "fct-descr": "\u003cp\u003eCreates space for instruments but does not run them.\n\u003c/p\u003e\u003cpre\u003e  prealloc  insnum, icount\n  prealloc  \"insname\", icount\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/prealloc.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html#prealloc",
        "fct-type": "function",
        "title": "prealloc"
      },
      "index": {
        "description": "Creates space for instruments but does not run them prealloc insnum icount prealloc insname icount csound doc http www.csounds.com manual html prealloc.html",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "prealloc",
        "normalized": "D-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#v:ptrack",
      "description": {
        "fct-descr": "\u003cp\u003eTracks the pitch of a signal.\n\u003c/p\u003e\u003cp\u003eptrack takes an input signal, splits it into ihopsize blocks and using a STFT method, extracts an estimated pitch for its fundamental frequency as well as estimating the total amplitude of the signal in dB, relative to full-scale (0dB). The method implies an analysis window size of 2*ihopsize samples (overlaping by 1/2 window), which has to be a power-of-two, between 128 and 8192 (hopsizes between 64 and 4096). Smaller windows will give better time precision, but worse frequency accuracy (esp. in low fundamentals).This opcode is based on an original algorithm by M. Puckette.\n\u003c/p\u003e\u003cpre\u003e kcps, kamp  ptrack  asig, ihopsize[,ipeaks]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/ptrack.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e D -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html#ptrack",
        "fct-type": "function",
        "title": "ptrack"
      },
      "index": {
        "description": "Tracks the pitch of signal ptrack takes an input signal splits it into ihopsize blocks and using STFT method extracts an estimated pitch for its fundamental frequency as well as estimating the total amplitude of the signal in dB relative to full-scale dB The method implies an analysis window size of ihopsize samples overlaping by window which has to be power-of-two between and hopsizes between and Smaller windows will give better time precision but worse frequency accuracy esp in low fundamentals This opcode is based on an original algorithm by Puckette kcps kamp ptrack asig ihopsize ipeaks csound doc http www.csounds.com manual html ptrack.html",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "ptrack",
        "normalized": "Sig-\u003eD-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eD-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#v:push",
      "description": {
        "fct-descr": "\u003cp\u003ePushes a value into the global stack.\n\u003c/p\u003e\u003cpre\u003e  push   xval1, [xval2, ... , xval31]\n  push   ival1, [ival2, ... , ival31]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/push.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "[Sig] -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html#push",
        "fct-type": "function",
        "title": "push"
      },
      "index": {
        "description": "Pushes value into the global stack push xval1 xval2 xval31 push ival1 ival2 ival31 csound doc http www.csounds.com manual html push.html",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "push",
        "normalized": "[Sig]-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "[Sig]-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#v:push_f",
      "description": {
        "fct-descr": "\u003cp\u003ePushes an f-sig frame into the global stack.\n\u003c/p\u003e\u003cpre\u003e  push_f   fsig\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/push_f.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Spec -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html#push_f",
        "fct-type": "function",
        "title": "push_f"
      },
      "index": {
        "description": "Pushes an f-sig frame into the global stack push fsig csound doc http www.csounds.com manual html push f.html",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "push_f",
        "normalized": "Spec-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Spec-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#v:readclock",
      "description": {
        "fct-descr": "\u003cp\u003eReads the value of an internal clock.\n\u003c/p\u003e\u003cpre\u003e ir  readclock  inum\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/readclock.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html#readclock",
        "fct-type": "function",
        "title": "readclock"
      },
      "index": {
        "description": "Reads the value of an internal clock ir readclock inum csound doc http www.csounds.com manual html readclock.html",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "readclock",
        "normalized": "D-\u003eD",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#v:readscore",
      "description": {
        "fct-descr": "\u003cp\u003eRead, preprocess and schedule a score from an input string.\n\u003c/p\u003e\u003cp\u003eReadscore will issue one or more score events. \n \t  It can handle strings in the same conditions as\n \t  the standard score, including preprocessing (carry, sort, ramp, etc). \n Multi-line strings are accepted, using {{  }} to enclose the string.\n\u003c/p\u003e\u003cpre\u003e  readscore  Sin \n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/readscore.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html#readscore",
        "fct-type": "function",
        "title": "readscore"
      },
      "index": {
        "description": "Read preprocess and schedule score from an input string Readscore will issue one or more score events It can handle strings in the same conditions as the standard score including preprocessing carry sort ramp etc Multi-line strings are accepted using to enclose the string readscore Sin csound doc http www.csounds.com manual html readscore.html",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "readscore",
        "normalized": "Str-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#v:remove",
      "description": {
        "fct-descr": "\u003cp\u003eRemoves the definition of an instrument.\n\u003c/p\u003e\u003cp\u003eRemoves the definition of an instrument as long as it is not in use.\n\u003c/p\u003e\u003cpre\u003e  remove  insnum\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/remove.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html#remove",
        "fct-type": "function",
        "title": "remove"
      },
      "index": {
        "description": "Removes the definition of an instrument Removes the definition of an instrument as long as it is not in use remove insnum csound doc http www.csounds.com manual html remove.html",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "remove",
        "normalized": "D-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#v:rewindscore",
      "description": {
        "fct-descr": "\u003cp\u003eRewinds the playback position of the current score performance.\n\u003c/p\u003e\u003cp\u003eRewinds the playback position of the current score performance..\n\u003c/p\u003e\u003cpre\u003e   rewindscore &#160;\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/rewindscore.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "SE ()",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html#rewindscore",
        "fct-type": "function",
        "title": "rewindscore"
      },
      "index": {
        "description": "Rewinds the playback position of the current score performance Rewinds the playback position of the current score performance rewindscore csound doc http www.csounds.com manual html rewindscore.html",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "rewindscore",
        "normalized": "SE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "SE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#v:rms",
      "description": {
        "fct-descr": "\u003cp\u003eDetermines the root-mean-square amplitude of an audio signal.\n\u003c/p\u003e\u003cp\u003eDetermines the root-mean-square amplitude of an audio signal. It low-pass filters the actual value, to average in the manner of a VU meter.\n\u003c/p\u003e\u003cpre\u003e kres  rms  asig [, ihp] [, iskip]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/rms.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html#rms",
        "fct-type": "function",
        "title": "rms"
      },
      "index": {
        "description": "Determines the root-mean-square amplitude of an audio signal Determines the root-mean-square amplitude of an audio signal It low-pass filters the actual value to average in the manner of VU meter kres rms asig ihp iskip csound doc http www.csounds.com manual html rms.html",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "rms",
        "normalized": "Sig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#v:rtclock",
      "description": {
        "fct-descr": "\u003cp\u003eRead the real time clock from the operating system.\n\u003c/p\u003e\u003cp\u003eRead the real-time clock from the operating system.\n\u003c/p\u003e\u003cpre\u003e ires  rtclock &#160; kres  rtclock &#160;\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/rtclock.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html#rtclock",
        "fct-type": "function",
        "title": "rtclock"
      },
      "index": {
        "description": "Read the real time clock from the operating system Read the real-time clock from the operating system ires rtclock kres rtclock csound doc http www.csounds.com manual html rtclock.html",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "rtclock",
        "normalized": "",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#v:schedkwhen",
      "description": {
        "fct-descr": "\u003cp\u003eAdds a new score event generated by a k-rate trigger.\n\u003c/p\u003e\u003cpre\u003e  schedkwhen  ktrigger, kmintim, kmaxnum, kinsnum, kwhen, kdur \\\n           [, ip4] [, ip5] [...]\n  schedkwhen  ktrigger, kmintim, kmaxnum, \"insname\", kwhen, kdur \\\n           [, ip4] [, ip5] [...]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/schedkwhen.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html#schedkwhen",
        "fct-type": "function",
        "title": "schedkwhen"
      },
      "index": {
        "description": "Adds new score event generated by k-rate trigger schedkwhen ktrigger kmintim kmaxnum kinsnum kwhen kdur ip4 ip5 schedkwhen ktrigger kmintim kmaxnum insname kwhen kdur ip4 ip5 csound doc http www.csounds.com manual html schedkwhen.html",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "schedkwhen",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#v:schedkwhennamed",
      "description": {
        "fct-descr": "\u003cp\u003eSimilar to schedkwhen but uses a named instrument at init-time.\n\u003c/p\u003e\u003cpre\u003e  schedkwhennamed  ktrigger, kmintim, kmaxnum, \"name\", kwhen, kdur \\\n           [, ip4] [, ip5] [...]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/schedkwhennamed.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Str -\u003e Sig -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html#schedkwhennamed",
        "fct-type": "function",
        "title": "schedkwhennamed"
      },
      "index": {
        "description": "Similar to schedkwhen but uses named instrument at init-time schedkwhennamed ktrigger kmintim kmaxnum name kwhen kdur ip4 ip5 csound doc http www.csounds.com manual html schedkwhennamed.html",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "schedkwhennamed",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eStr-\u003eSig-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eStr-\u003eSig-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#v:schedule",
      "description": {
        "fct-descr": "\u003cp\u003eAdds a new score event.\n\u003c/p\u003e\u003cpre\u003e  schedule  insnum, iwhen, idur [, ip4] [, ip5] [...]\n  schedule  \"insname\", iwhen, idur [, ip4] [, ip5] [...]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/schedule.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html#schedule",
        "fct-type": "function",
        "title": "schedule"
      },
      "index": {
        "description": "Adds new score event schedule insnum iwhen idur ip4 ip5 schedule insname iwhen idur ip4 ip5 csound doc http www.csounds.com manual html schedule.html",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "schedule",
        "normalized": "D-\u003eD-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#v:schedwhen",
      "description": {
        "fct-descr": "\u003cp\u003eAdds a new score event.\n\u003c/p\u003e\u003cpre\u003e  schedwhen  ktrigger, kinsnum, kwhen, kdur [, ip4] [, ip5] [...]\n  schedwhen  ktrigger, \"insname\", kwhen, kdur [, ip4] [, ip5] [...]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/schedwhen.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html#schedwhen",
        "fct-type": "function",
        "title": "schedwhen"
      },
      "index": {
        "description": "Adds new score event schedwhen ktrigger kinsnum kwhen kdur ip4 ip5 schedwhen ktrigger insname kwhen kdur ip4 ip5 csound doc http www.csounds.com manual html schedwhen.html",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "schedwhen",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#v:scoreline",
      "description": {
        "fct-descr": "\u003cp\u003eIssues one or more score line events from an instrument.\n\u003c/p\u003e\u003cp\u003eScoreline will issue one or more score events, if ktrig is 1 every k-period. \n \t  It can handle strings in the same conditions as\n \t  the standard score. Multi-line strings are accepted, using {{  }} to enclose the string.\n\u003c/p\u003e\u003cpre\u003e  scoreline  Sin, ktrig\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/scoreline.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html#scoreline",
        "fct-type": "function",
        "title": "scoreline"
      },
      "index": {
        "description": "Issues one or more score line events from an instrument Scoreline will issue one or more score events if ktrig is every k-period It can handle strings in the same conditions as the standard score Multi-line strings are accepted using to enclose the string scoreline Sin ktrig csound doc http www.csounds.com manual html scoreline.html",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "scoreline",
        "normalized": "Str-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#v:scoreline_i",
      "description": {
        "fct-descr": "\u003cp\u003eIssues one or more score line events from an instrument at i-time.\n\u003c/p\u003e\u003cp\u003escoreline_i will issue score events at i-time.  It can handle strings in the same conditions as the standard score. Multi-line strings are accepted, using {{  }} to enclose the string.\n\u003c/p\u003e\u003cpre\u003e  scoreline_i  Sin\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/scoreline_i.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html#scoreline_i",
        "fct-type": "function",
        "title": "scoreline_i"
      },
      "index": {
        "description": "Issues one or more score line events from an instrument at i-time scoreline will issue score events at i-time It can handle strings in the same conditions as the standard score Multi-line strings are accepted using to enclose the string scoreline Sin csound doc http www.csounds.com manual html scoreline i.html",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "scoreline_i",
        "normalized": "Str-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#v:sensekey",
      "description": {
        "fct-descr": "\u003cp\u003eReturns the ASCII code of a key that has been pressed.\n\u003c/p\u003e\u003cp\u003eReturns the ASCII code of a key that has been pressed, or -1 if no key has been pressed.\n\u003c/p\u003e\u003cpre\u003e kres[, kkeydown]  sensekey &#160;\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/sensekey.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "a",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html#sensekey",
        "fct-type": "function",
        "title": "sensekey"
      },
      "index": {
        "description": "Returns the ASCII code of key that has been pressed Returns the ASCII code of key that has been pressed or if no key has been pressed kres kkeydown sensekey csound doc http www.csounds.com manual html sensekey.html",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "sensekey",
        "normalized": "",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#v:seqtime",
      "description": {
        "fct-descr": "\u003cp\u003eGenerates a trigger signal according to the values stored in a table.\n\u003c/p\u003e\u003cpre\u003e ktrig_out  seqtime  ktime_unit, kstart, kloop, kinitndx, kfn_times\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/seqtime.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Tab -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html#seqtime",
        "fct-type": "function",
        "title": "seqtime"
      },
      "index": {
        "description": "Generates trigger signal according to the values stored in table ktrig out seqtime ktime unit kstart kloop kinitndx kfn times csound doc http www.csounds.com manual html seqtime.html",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "seqtime",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eTab-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eTab-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#v:seqtime2",
      "description": {
        "fct-descr": "\u003cp\u003eGenerates a trigger signal according to the values stored in a table.\n\u003c/p\u003e\u003cpre\u003e ktrig_out  seqtime2  ktrig_in, ktime_unit, kstart, kloop, kinitndx, kfn_times\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/seqtime2.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Tab -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html#seqtime2",
        "fct-type": "function",
        "title": "seqtime2"
      },
      "index": {
        "description": "Generates trigger signal according to the values stored in table ktrig out seqtime2 ktrig in ktime unit kstart kloop kinitndx kfn times csound doc http www.csounds.com manual html seqtime2.html",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "seqtime2",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eTab-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eTab-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#v:setctrl",
      "description": {
        "fct-descr": "\u003cp\u003eConfigurable slider controls for realtime user input.\n\u003c/p\u003e\u003cp\u003eConfigurable slider controls for realtime user input. Requires Winsound or TCL/TK. setctrl sets a slider to a specific value, or sets a minimum or maximum range.\n\u003c/p\u003e\u003cpre\u003e  setctrl  inum, ival, itype\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/setctrl.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html#setctrl",
        "fct-type": "function",
        "title": "setctrl"
      },
      "index": {
        "description": "Configurable slider controls for realtime user input Configurable slider controls for realtime user input Requires Winsound or TCL TK setctrl sets slider to specific value or sets minimum or maximum range setctrl inum ival itype csound doc http www.csounds.com manual html setctrl.html",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "setctrl",
        "normalized": "D-\u003eD-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#v:splitrig",
      "description": {
        "fct-descr": "\u003cp\u003eSplit a trigger signal\n\u003c/p\u003e\u003cp\u003esplitrig splits a trigger signal (i.e. a timed sequence of control-rate impulses) into several channels following a structure designed by the user.\n\u003c/p\u003e\u003cpre\u003e  splitrig  ktrig, kndx, imaxtics, ifn, kout1 [,kout2,...,koutN]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/splitrig.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e D -\u003e Tab -\u003e [Sig] -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html#splitrig",
        "fct-type": "function",
        "title": "splitrig"
      },
      "index": {
        "description": "Split trigger signal splitrig splits trigger signal i.e timed sequence of control-rate impulses into several channels following structure designed by the user splitrig ktrig kndx imaxtics ifn kout1 kout2 koutN csound doc http www.csounds.com manual html splitrig.html",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "splitrig",
        "normalized": "Sig-\u003eSig-\u003eD-\u003eTab-\u003e[Sig]-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eD-\u003eTab-\u003e[Sig]-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#v:stack",
      "description": {
        "fct-descr": "\u003cp\u003eInitializes the stack.\n\u003c/p\u003e\u003cp\u003eInitializes and sets the size of the global stack.\n\u003c/p\u003e\u003cpre\u003e  stack   iStackSize\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/stack.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html#stack",
        "fct-type": "function",
        "title": "stack"
      },
      "index": {
        "description": "Initializes the stack Initializes and sets the size of the global stack stack iStackSize csound doc http www.csounds.com manual html stack.html",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "stack",
        "normalized": "D-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#v:subinstr",
      "description": {
        "fct-descr": "\u003cp\u003eCreates and runs a numbered instrument instance.\n\u003c/p\u003e\u003cp\u003eCreates an instance of another instrument and is used as if it were an opcode.\n\u003c/p\u003e\u003cpre\u003e a1, [...] [, a8]  subinstr  instrnum [, p4] [, p5] [...]\n a1, [...] [, a8]  subinstr  \"insname\" [, p4] [, p5] [...]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/subinstr.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e [D] -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html#subinstr",
        "fct-type": "function",
        "title": "subinstr"
      },
      "index": {
        "description": "Creates and runs numbered instrument instance Creates an instance of another instrument and is used as if it were an opcode a1 a8 subinstr instrnum p4 p5 a1 a8 subinstr insname p4 p5 csound doc http www.csounds.com manual html subinstr.html",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "subinstr",
        "normalized": "D-\u003e[D]-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003e[D]-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#v:subinstrinit",
      "description": {
        "fct-descr": "\u003cp\u003eCreates and runs a numbered instrument instance at init-time.\n\u003c/p\u003e\u003cp\u003eSame as subinstr, but init-time only and has no output arguments.\n\u003c/p\u003e\u003cpre\u003e  subinstrinit  instrnum [, p4] [, p5] [...]\n  subinstrinit  \"insname\" [, p4] [, p5] [...]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/subinstrinit.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e [D] -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html#subinstrinit",
        "fct-type": "function",
        "title": "subinstrinit"
      },
      "index": {
        "description": "Creates and runs numbered instrument instance at init-time Same as subinstr but init-time only and has no output arguments subinstrinit instrnum p4 p5 subinstrinit insname p4 p5 csound doc http www.csounds.com manual html subinstrinit.html",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "subinstrinit",
        "normalized": "D-\u003e[D]-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003e[D]-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#v:tempest",
      "description": {
        "fct-descr": "\u003cp\u003eEstimate the tempo of beat patterns in a control signal.\n\u003c/p\u003e\u003cpre\u003e ktemp  tempest  kin, iprd, imindur, imemdur, ihp, ithresh, ihtim, ixfdbak, \\\n           istartempo, ifn [, idisprd] [, itweek]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/tempest.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e Tab -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html#tempest",
        "fct-type": "function",
        "title": "tempest"
      },
      "index": {
        "description": "Estimate the tempo of beat patterns in control signal ktemp tempest kin iprd imindur imemdur ihp ithresh ihtim ixfdbak istartempo ifn idisprd itweek csound doc http www.csounds.com manual html tempest.html",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "tempest",
        "normalized": "Sig-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eTab-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eTab-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#v:tempo",
      "description": {
        "fct-descr": "\u003cp\u003eApply tempo control to an uninterpreted score.\n\u003c/p\u003e\u003cpre\u003e  tempo  ktempo, istartempo\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/tempo.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html#tempo",
        "fct-type": "function",
        "title": "tempo"
      },
      "index": {
        "description": "Apply tempo control to an uninterpreted score tempo ktempo istartempo csound doc http www.csounds.com manual html tempo.html",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "tempo",
        "normalized": "Sig-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#v:tempoval",
      "description": {
        "fct-descr": "\u003cp\u003eReads the current value of the tempo.\n\u003c/p\u003e\u003cpre\u003e kres  tempoval &#160;\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/tempoval.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html#tempoval",
        "fct-type": "function",
        "title": "tempoval"
      },
      "index": {
        "description": "Reads the current value of the tempo kres tempoval csound doc http www.csounds.com manual html tempoval.html",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "tempoval",
        "normalized": "",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#v:timedseq",
      "description": {
        "fct-descr": "\u003cp\u003eTime Variant Sequencer\n\u003c/p\u003e\u003cp\u003eAn event-sequencer in which time can be controlled by a\n     time-pointer. Sequence data are stored into a table.\n\u003c/p\u003e\u003cpre\u003e ktrig   timedseq   ktimpnt, ifn, kp1 [,kp2, kp3, ...,kpN]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/timedseq.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Tab -\u003e [Sig] -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html#timedseq",
        "fct-type": "function",
        "title": "timedseq"
      },
      "index": {
        "description": "Time Variant Sequencer An event-sequencer in which time can be controlled by time-pointer Sequence data are stored into table ktrig timedseq ktimpnt ifn kp1 kp2 kp3 kpN csound doc http www.csounds.com manual html timedseq.html",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "timedseq",
        "normalized": "Sig-\u003eTab-\u003e[Sig]-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eTab-\u003e[Sig]-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#v:timeinstk",
      "description": {
        "fct-descr": "\u003cp\u003eRead absolute time in k-rate cycles.\n\u003c/p\u003e\u003cp\u003eRead absolute time, in k-rate cycles, since the start of an\n     \tinstance of an instrument. Called at both i-time as well as\n     \tk-time.\n\u003c/p\u003e\u003cpre\u003e kres  timeinstk &#160;\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/timeinstk.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html#timeinstk",
        "fct-type": "function",
        "title": "timeinstk"
      },
      "index": {
        "description": "Read absolute time in k-rate cycles Read absolute time in k-rate cycles since the start of an instance of an instrument Called at both i-time as well as k-time kres timeinstk csound doc http www.csounds.com manual html timeinstk.html",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "timeinstk",
        "normalized": "",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#v:timeinsts",
      "description": {
        "fct-descr": "\u003cp\u003eRead absolute time in seconds.\n\u003c/p\u003e\u003cp\u003eRead absolute time, in seconds, since the start of an instance of an instrument.\n\u003c/p\u003e\u003cpre\u003e kres  timeinsts &#160;\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/timeinsts.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html#timeinsts",
        "fct-type": "function",
        "title": "timeinsts"
      },
      "index": {
        "description": "Read absolute time in seconds Read absolute time in seconds since the start of an instance of an instrument kres timeinsts csound doc http www.csounds.com manual html timeinsts.html",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "timeinsts",
        "normalized": "",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#v:timek",
      "description": {
        "fct-descr": "\u003cp\u003eRead absolute time in k-rate cycles.\n\u003c/p\u003e\u003cp\u003eRead absolute time, in k-rate cycles, since the start of the performance.\n\u003c/p\u003e\u003cpre\u003e ires  timek &#160; kres  timek &#160;\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/timek.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html#timek",
        "fct-type": "function",
        "title": "timek"
      },
      "index": {
        "description": "Read absolute time in k-rate cycles Read absolute time in k-rate cycles since the start of the performance ires timek kres timek csound doc http www.csounds.com manual html timek.html",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "timek",
        "normalized": "",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#v:times",
      "description": {
        "fct-descr": "\u003cp\u003eRead absolute time in seconds.\n\u003c/p\u003e\u003cp\u003eRead absolute time, in seconds, since the start of the performance.\n\u003c/p\u003e\u003cpre\u003e ires  times &#160; kres  times &#160;\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/times.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html#times",
        "fct-type": "function",
        "title": "times"
      },
      "index": {
        "description": "Read absolute time in seconds Read absolute time in seconds since the start of the performance ires times kres times csound doc http www.csounds.com manual html times.html",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "times",
        "normalized": "",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#v:trigger",
      "description": {
        "fct-descr": "\u003cp\u003eInforms when a krate signal crosses a threshold.\n\u003c/p\u003e\u003cpre\u003e kout  trigger  ksig, kthreshold, kmode\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/trigger.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html#trigger",
        "fct-type": "function",
        "title": "trigger"
      },
      "index": {
        "description": "Informs when krate signal crosses threshold kout trigger ksig kthreshold kmode csound doc http www.csounds.com manual html trigger.html",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "trigger",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#v:trigseq",
      "description": {
        "fct-descr": "\u003cp\u003eAccepts a trigger signal as input and outputs a group of values.\n\u003c/p\u003e\u003cpre\u003e  trigseq  ktrig_in, kstart, kloop, kinitndx, kfn_values, kout1 [, kout2] [...]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/trigseq.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Tab -\u003e [Sig] -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html#trigseq",
        "fct-type": "function",
        "title": "trigseq"
      },
      "index": {
        "description": "Accepts trigger signal as input and outputs group of values trigseq ktrig in kstart kloop kinitndx kfn values kout1 kout2 csound doc http www.csounds.com manual html trigseq.html",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "trigseq",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eTab-\u003e[Sig]-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eTab-\u003e[Sig]-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#v:turnoff",
      "description": {
        "fct-descr": "\u003cp\u003eEnables an instrument to turn itself off.\n\u003c/p\u003e\u003cpre\u003e  turnoff &#160;\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/turnoff.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "SE ()",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html#turnoff",
        "fct-type": "function",
        "title": "turnoff"
      },
      "index": {
        "description": "Enables an instrument to turn itself off turnoff csound doc http www.csounds.com manual html turnoff.html",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "turnoff",
        "normalized": "SE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "SE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#v:turnoff2",
      "description": {
        "fct-descr": "\u003cp\u003eTurn off instance(s) of other instruments at performance time.\n\u003c/p\u003e\u003cpre\u003e  turnoff2  kinsno, kmode, krelease\n         \n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/turnoff2.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html#turnoff2",
        "fct-type": "function",
        "title": "turnoff2"
      },
      "index": {
        "description": "Turn off instance of other instruments at performance time turnoff2 kinsno kmode krelease csound doc http www.csounds.com manual html turnoff2.html",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "turnoff2",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#v:turnon",
      "description": {
        "fct-descr": "\u003cp\u003eActivate an instrument for an indefinite time.\n\u003c/p\u003e\u003cpre\u003e  turnon  insnum [, itime]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/turnon.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html#turnon",
        "fct-type": "function",
        "title": "turnon"
      },
      "index": {
        "description": "Activate an instrument for an indefinite time turnon insnum itime csound doc http www.csounds.com manual html turnon.html",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "turnon",
        "normalized": "D-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#v:wiiconnect",
      "description": {
        "fct-descr": "\u003cp\u003eReads data from a number of external Nintendo Wiimote controllers.\n\u003c/p\u003e\u003cp\u003eOpens and at control-rate polls up to four external Nintendo Wiimote controllers.\n\u003c/p\u003e\u003cpre\u003e ires  wiiconnect  [itimeout, imaxnum]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/wiiconnect.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html#wiiconnect",
        "fct-type": "function",
        "title": "wiiconnect"
      },
      "index": {
        "description": "Reads data from number of external Nintendo Wiimote controllers Opens and at control-rate polls up to four external Nintendo Wiimote controllers ires wiiconnect itimeout imaxnum csound doc http www.csounds.com manual html wiiconnect.html",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "wiiconnect",
        "normalized": "",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#v:wiidata",
      "description": {
        "fct-descr": "\u003cp\u003eReads data fields from a number of external Nintendo Wiimote controllers.\n\u003c/p\u003e\u003cp\u003eReads data fields from upto four external Nintendo Wiimote controllers.\n\u003c/p\u003e\u003cpre\u003e kres  wiidata  kcontrol[, knum]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/wiidata.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html#wiidata",
        "fct-type": "function",
        "title": "wiidata"
      },
      "index": {
        "description": "Reads data fields from number of external Nintendo Wiimote controllers Reads data fields from upto four external Nintendo Wiimote controllers kres wiidata kcontrol knum csound doc http www.csounds.com manual html wiidata.html",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "wiidata",
        "normalized": "Sig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#v:wiirange",
      "description": {
        "fct-descr": "\u003cp\u003eSets scaling and range limits for certain Wiimote fields.\n\u003c/p\u003e\u003cpre\u003e   wiirange  icontrol, iminimum, imaximum[, inum]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/wiirange.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html#wiirange",
        "fct-type": "function",
        "title": "wiirange"
      },
      "index": {
        "description": "Sets scaling and range limits for certain Wiimote fields wiirange icontrol iminimum imaximum inum csound doc http www.csounds.com manual html wiirange.html",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "wiirange",
        "normalized": "D-\u003eD-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#v:wiisend",
      "description": {
        "fct-descr": "\u003cp\u003eSends data to one of a number of external Nintendo Wiimote controllers.\n\u003c/p\u003e\u003cpre\u003e kres  wiisend  kcontrol, kvalue[, knum]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/wiisend.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html#wiisend",
        "fct-type": "function",
        "title": "wiisend"
      },
      "index": {
        "description": "Sends data to one of number of external Nintendo Wiimote controllers kres wiisend kcontrol kvalue knum csound doc http www.csounds.com manual html wiisend.html",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "wiisend",
        "normalized": "Sig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-InstrumentControl.html#v:xyin",
      "description": {
        "fct-descr": "\u003cp\u003eSense the cursor position in an output window\n\u003c/p\u003e\u003cp\u003eSense the cursor position in an output window. When xyin is called the position of the mouse within the output window is used to reply to the request.  This simple mechanism does mean that only one xyin can be used accurately at once.  The position of the mouse is reported in the output window.\n\u003c/p\u003e\u003cpre\u003e kx, ky  xyin  iprd, ixmin, ixmax, iymin, iymax [, ixinit] [, iyinit]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/xyin.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.InstrumentControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-InstrumentControl.html#xyin",
        "fct-type": "function",
        "title": "xyin"
      },
      "index": {
        "description": "Sense the cursor position in an output window Sense the cursor position in an output window When xyin is called the position of the mouse within the output window is used to reply to the request This simple mechanism does mean that only one xyin can be used accurately at once The position of the mouse is reported in the output window kx ky xyin iprd ixmin ixmax iymin iymax ixinit iyinit csound doc http www.csounds.com manual html xyin.html",
        "hierarchy": "Csound Typed Opcode InstrumentControl",
        "module": "Csound.Typed.Opcode.InstrumentControl",
        "name": "xyin",
        "normalized": "D-\u003eD-\u003eD-\u003eD-\u003eD-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eD-\u003eD-\u003eD-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-JackoOpcodes.html#",
      "description": {
        "fct-module": "Csound.Typed.Opcode.JackoOpcodes",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "module",
        "fct-source": "src/Csound-Typed-Opcode-JackoOpcodes.html",
        "fct-type": "module",
        "title": "JackoOpcodes"
      },
      "index": {
        "description": "",
        "hierarchy": "Csound Typed Opcode JackoOpcodes",
        "module": "Csound.Typed.Opcode.JackoOpcodes",
        "name": "JackoOpcodes",
        "normalized": "",
        "package": "csound-expression-opcodes",
        "partial": "Jacko Opcodes",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-JackoOpcodes.html#v:jackoAudioIn",
      "description": {
        "fct-descr": "\u003cp\u003eReceives an audio signal from a Jack port.\n\u003c/p\u003e\u003cp\u003eReceives an audio signal from a Jack audio input port \n       inside this instance of Csound, which in turn has \n       received the signal from its connected external Jack \n       audio output port.\n\u003c/p\u003e\u003cpre\u003e asignal  JackoAudioIn ScsoundPortName\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/JackoAudioIn.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.JackoOpcodes",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e SE Sig",
        "fct-source": "src/Csound-Typed-Opcode-JackoOpcodes.html#jackoAudioIn",
        "fct-type": "function",
        "title": "jackoAudioIn"
      },
      "index": {
        "description": "Receives an audio signal from Jack port Receives an audio signal from Jack audio input port inside this instance of Csound which in turn has received the signal from its connected external Jack audio output port asignal JackoAudioIn ScsoundPortName csound doc http www.csounds.com manual html JackoAudioIn.html",
        "hierarchy": "Csound Typed Opcode JackoOpcodes",
        "module": "Csound.Typed.Opcode.JackoOpcodes",
        "name": "jackoAudioIn",
        "normalized": "Str-\u003eSE Sig",
        "package": "csound-expression-opcodes",
        "partial": "Audio In",
        "signature": "Str-\u003eSE Sig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-JackoOpcodes.html#v:jackoAudioInConnect",
      "description": {
        "fct-descr": "\u003cp\u003eCreates an audio connection from a Jack port to Csound.\n\u003c/p\u003e\u003cp\u003eIn the orchestra header, creates an audio connection \n       from an external Jack audio output port to a \n       Jack audio input port inside this instance of Csound.\n\u003c/p\u003e\u003cpre\u003e  JackoAudioInConnect SexternalPortName, ScsoundPortName\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/JackoAudioInConnect.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.JackoOpcodes",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e Str -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-JackoOpcodes.html#jackoAudioInConnect",
        "fct-type": "function",
        "title": "jackoAudioInConnect"
      },
      "index": {
        "description": "Creates an audio connection from Jack port to Csound In the orchestra header creates an audio connection from an external Jack audio output port to Jack audio input port inside this instance of Csound JackoAudioInConnect SexternalPortName ScsoundPortName csound doc http www.csounds.com manual html JackoAudioInConnect.html",
        "hierarchy": "Csound Typed Opcode JackoOpcodes",
        "module": "Csound.Typed.Opcode.JackoOpcodes",
        "name": "jackoAudioInConnect",
        "normalized": "Str-\u003eStr-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "Audio In Connect",
        "signature": "Str-\u003eStr-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-JackoOpcodes.html#v:jackoAudioOut",
      "description": {
        "fct-descr": "\u003cp\u003eSends an audio signal to a Jack port.\n\u003c/p\u003e\u003cp\u003eSends an audio signal to an internal Jack audio \n       output port, and in turn to its connected external \n       Jack audio input port.\n\u003c/p\u003e\u003cpre\u003e  JackoAudioOut  ScsoundPortName, asignal\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/JackoAudioOut.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.JackoOpcodes",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-JackoOpcodes.html#jackoAudioOut",
        "fct-type": "function",
        "title": "jackoAudioOut"
      },
      "index": {
        "description": "Sends an audio signal to Jack port Sends an audio signal to an internal Jack audio output port and in turn to its connected external Jack audio input port JackoAudioOut ScsoundPortName asignal csound doc http www.csounds.com manual html JackoAudioOut.html",
        "hierarchy": "Csound Typed Opcode JackoOpcodes",
        "module": "Csound.Typed.Opcode.JackoOpcodes",
        "name": "jackoAudioOut",
        "normalized": "Str-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "Audio Out",
        "signature": "Str-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-JackoOpcodes.html#v:jackoAudioOutConnect",
      "description": {
        "fct-descr": "\u003cp\u003eCreates an audio connection from Csound to a Jack port.\n\u003c/p\u003e\u003cp\u003eIn the orchestra header, creates an audio connection \n       from a Jack audio output port inside this instance \n       of Csound to an external Jack audio input port.\n\u003c/p\u003e\u003cpre\u003e  JackoAudioOutConnect ScsoundPortName, SexternalPortName\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/JackoAudioOutConnect.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.JackoOpcodes",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e Str -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-JackoOpcodes.html#jackoAudioOutConnect",
        "fct-type": "function",
        "title": "jackoAudioOutConnect"
      },
      "index": {
        "description": "Creates an audio connection from Csound to Jack port In the orchestra header creates an audio connection from Jack audio output port inside this instance of Csound to an external Jack audio input port JackoAudioOutConnect ScsoundPortName SexternalPortName csound doc http www.csounds.com manual html JackoAudioOutConnect.html",
        "hierarchy": "Csound Typed Opcode JackoOpcodes",
        "module": "Csound.Typed.Opcode.JackoOpcodes",
        "name": "jackoAudioOutConnect",
        "normalized": "Str-\u003eStr-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "Audio Out Connect",
        "signature": "Str-\u003eStr-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-JackoOpcodes.html#v:jackoFreewheel",
      "description": {
        "fct-descr": "\u003cp\u003eTurns Jack's freewheeling mode on or off.\n\u003c/p\u003e\u003cpre\u003e  JackoFreewheel [ienabled]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/JackoFreewheel.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.JackoOpcodes",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "SE ()",
        "fct-source": "src/Csound-Typed-Opcode-JackoOpcodes.html#jackoFreewheel",
        "fct-type": "function",
        "title": "jackoFreewheel"
      },
      "index": {
        "description": "Turns Jack freewheeling mode on or off JackoFreewheel ienabled csound doc http www.csounds.com manual html JackoFreewheel.html",
        "hierarchy": "Csound Typed Opcode JackoOpcodes",
        "module": "Csound.Typed.Opcode.JackoOpcodes",
        "name": "jackoFreewheel",
        "normalized": "SE()",
        "package": "csound-expression-opcodes",
        "partial": "Freewheel",
        "signature": "SE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-JackoOpcodes.html#v:jackoInfo",
      "description": {
        "fct-descr": "\u003cp\u003ePrints information about the Jack system.\n\u003c/p\u003e\u003cp\u003ePrints the Jack daemon and client names, the\n       sampling rate and frames per period, \n       and all active Jack port names, \n       types, states, and connections.\n\u003c/p\u003e\u003cpre\u003e  JackoInfo &#160;\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/JackoInfo.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.JackoOpcodes",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "SE ()",
        "fct-source": "src/Csound-Typed-Opcode-JackoOpcodes.html#jackoInfo",
        "fct-type": "function",
        "title": "jackoInfo"
      },
      "index": {
        "description": "Prints information about the Jack system Prints the Jack daemon and client names the sampling rate and frames per period and all active Jack port names types states and connections JackoInfo csound doc http www.csounds.com manual html JackoInfo.html",
        "hierarchy": "Csound Typed Opcode JackoOpcodes",
        "module": "Csound.Typed.Opcode.JackoOpcodes",
        "name": "jackoInfo",
        "normalized": "SE()",
        "package": "csound-expression-opcodes",
        "partial": "Info",
        "signature": "SE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-JackoOpcodes.html#v:jackoInit",
      "description": {
        "fct-descr": "\u003cp\u003eInitializes Csound as a Jack client.\n\u003c/p\u003e\u003cp\u003eInitializes this instance of Csound as a Jack client.\n\u003c/p\u003e\u003cpre\u003e  JackoInit SclientName, ServerName\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/JackoInit.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.JackoOpcodes",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e Str -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-JackoOpcodes.html#jackoInit",
        "fct-type": "function",
        "title": "jackoInit"
      },
      "index": {
        "description": "Initializes Csound as Jack client Initializes this instance of Csound as Jack client JackoInit SclientName ServerName csound doc http www.csounds.com manual html JackoInit.html",
        "hierarchy": "Csound Typed Opcode JackoOpcodes",
        "module": "Csound.Typed.Opcode.JackoOpcodes",
        "name": "jackoInit",
        "normalized": "Str-\u003eStr-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "Init",
        "signature": "Str-\u003eStr-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-JackoOpcodes.html#v:jackoMidiInConnect",
      "description": {
        "fct-descr": "\u003cp\u003eCreates a MIDI  connection from a Jack port to Csound.\n\u003c/p\u003e\u003cp\u003eIn the orchestra header, creates a MIDI connection \n       from an external Jack MIDI output port to this instance of Csound.\n\u003c/p\u003e\u003cpre\u003e  JackoMidiInConnect SexternalPortName, ScsoundPortName\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/JackoMidiInConnect.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.JackoOpcodes",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e Str -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-JackoOpcodes.html#jackoMidiInConnect",
        "fct-type": "function",
        "title": "jackoMidiInConnect"
      },
      "index": {
        "description": "Creates MIDI connection from Jack port to Csound In the orchestra header creates MIDI connection from an external Jack MIDI output port to this instance of Csound JackoMidiInConnect SexternalPortName ScsoundPortName csound doc http www.csounds.com manual html JackoMidiInConnect.html",
        "hierarchy": "Csound Typed Opcode JackoOpcodes",
        "module": "Csound.Typed.Opcode.JackoOpcodes",
        "name": "jackoMidiInConnect",
        "normalized": "Str-\u003eStr-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "Midi In Connect",
        "signature": "Str-\u003eStr-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-JackoOpcodes.html#v:jackoMidiOut",
      "description": {
        "fct-descr": "\u003cp\u003eSends a MIDI channel message to a Jack port.\n\u003c/p\u003e\u003cp\u003eSends a MIDI channel message to a Jack MIDI output port\n       inside this instance of Csound, and in turn to its \n       connected external Jack MIDI input port.\n\u003c/p\u003e\u003cpre\u003e  JackoMidiOut  ScsoundPortName, kstatus, kchannel, kdata1[, kdata2]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/JackoMidiOut.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.JackoOpcodes",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e Sig -\u003e Sig -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-JackoOpcodes.html#jackoMidiOut",
        "fct-type": "function",
        "title": "jackoMidiOut"
      },
      "index": {
        "description": "Sends MIDI channel message to Jack port Sends MIDI channel message to Jack MIDI output port inside this instance of Csound and in turn to its connected external Jack MIDI input port JackoMidiOut ScsoundPortName kstatus kchannel kdata1 kdata2 csound doc http www.csounds.com manual html JackoMidiOut.html",
        "hierarchy": "Csound Typed Opcode JackoOpcodes",
        "module": "Csound.Typed.Opcode.JackoOpcodes",
        "name": "jackoMidiOut",
        "normalized": "Str-\u003eSig-\u003eSig-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "Midi Out",
        "signature": "Str-\u003eSig-\u003eSig-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-JackoOpcodes.html#v:jackoMidiOutConnect",
      "description": {
        "fct-descr": "\u003cp\u003eCreates a MIDI connection from Csound to a Jack port.\n\u003c/p\u003e\u003cp\u003eIn the orchestra header, creates a connection \n       from a Jack MIDI output port inside this instance \n       of Csound to an external Jack MIDI input port.\n\u003c/p\u003e\u003cpre\u003e  JackoMidiOutConnect ScsoundPortName, SexternalPortName\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/JackoMidiOutConnect.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.JackoOpcodes",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e Str -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-JackoOpcodes.html#jackoMidiOutConnect",
        "fct-type": "function",
        "title": "jackoMidiOutConnect"
      },
      "index": {
        "description": "Creates MIDI connection from Csound to Jack port In the orchestra header creates connection from Jack MIDI output port inside this instance of Csound to an external Jack MIDI input port JackoMidiOutConnect ScsoundPortName SexternalPortName csound doc http www.csounds.com manual html JackoMidiOutConnect.html",
        "hierarchy": "Csound Typed Opcode JackoOpcodes",
        "module": "Csound.Typed.Opcode.JackoOpcodes",
        "name": "jackoMidiOutConnect",
        "normalized": "Str-\u003eStr-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "Midi Out Connect",
        "signature": "Str-\u003eStr-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-JackoOpcodes.html#v:jackoNoteOut",
      "description": {
        "fct-descr": "\u003cp\u003eSends a MIDI channel message to a Jack port.\n\u003c/p\u003e\u003cp\u003eSends a MIDI channel message to a Jack MIDI output port\n       inside this instance of Csound, and in turn to its \n       connected external Jack MIDI input port.\n\u003c/p\u003e\u003cpre\u003e  JackoNoteOut  ScsoundPortName, kstatus, kchannel, kdata1[, kdata2]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/JackoNoteOut.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.JackoOpcodes",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e Sig -\u003e Sig -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-JackoOpcodes.html#jackoNoteOut",
        "fct-type": "function",
        "title": "jackoNoteOut"
      },
      "index": {
        "description": "Sends MIDI channel message to Jack port Sends MIDI channel message to Jack MIDI output port inside this instance of Csound and in turn to its connected external Jack MIDI input port JackoNoteOut ScsoundPortName kstatus kchannel kdata1 kdata2 csound doc http www.csounds.com manual html JackoNoteOut.html",
        "hierarchy": "Csound Typed Opcode JackoOpcodes",
        "module": "Csound.Typed.Opcode.JackoOpcodes",
        "name": "jackoNoteOut",
        "normalized": "Str-\u003eSig-\u003eSig-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "Note Out",
        "signature": "Str-\u003eSig-\u003eSig-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-JackoOpcodes.html#v:jackoOn",
      "description": {
        "fct-descr": "\u003cp\u003eEnables or disables all Jack ports.\n\u003c/p\u003e\u003cp\u003eIn the orchestra header, after all Jack connections have been created, enables\n       or disables all Jack input and output opcodes \n       inside this instance of Csound to read or write data.\n\u003c/p\u003e\u003cpre\u003e  JackoOn [iactive] \n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/JackoOn.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.JackoOpcodes",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "SE ()",
        "fct-source": "src/Csound-Typed-Opcode-JackoOpcodes.html#jackoOn",
        "fct-type": "function",
        "title": "jackoOn"
      },
      "index": {
        "description": "Enables or disables all Jack ports In the orchestra header after all Jack connections have been created enables or disables all Jack input and output opcodes inside this instance of Csound to read or write data JackoOn iactive csound doc http www.csounds.com manual html JackoOn.html",
        "hierarchy": "Csound Typed Opcode JackoOpcodes",
        "module": "Csound.Typed.Opcode.JackoOpcodes",
        "name": "jackoOn",
        "normalized": "SE()",
        "package": "csound-expression-opcodes",
        "partial": "On",
        "signature": "SE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-JackoOpcodes.html#v:jackoTransport",
      "description": {
        "fct-descr": "\u003cp\u003eControl the Jack transport.\n\u003c/p\u003e\u003cp\u003eStarts, stops, or repositions the Jack transport.\n       This is useful, e.g., for starting an external sequencer\n       playing to send MIDI messages to Csound.\n\u003c/p\u003e\u003cpre\u003e  JackoTransport  kcommand, [kposition]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/JackoTransport.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.JackoOpcodes",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-JackoOpcodes.html#jackoTransport",
        "fct-type": "function",
        "title": "jackoTransport"
      },
      "index": {
        "description": "Control the Jack transport Starts stops or repositions the Jack transport This is useful e.g for starting an external sequencer playing to send MIDI messages to Csound JackoTransport kcommand kposition csound doc http www.csounds.com manual html JackoTransport.html",
        "hierarchy": "Csound Typed Opcode JackoOpcodes",
        "module": "Csound.Typed.Opcode.JackoOpcodes",
        "name": "jackoTransport",
        "normalized": "Sig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "Transport",
        "signature": "Sig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-MathematicalOperations.html#",
      "description": {
        "fct-module": "Csound.Typed.Opcode.MathematicalOperations",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "module",
        "fct-source": "src/Csound-Typed-Opcode-MathematicalOperations.html",
        "fct-type": "module",
        "title": "MathematicalOperations"
      },
      "index": {
        "description": "",
        "hierarchy": "Csound Typed Opcode MathematicalOperations",
        "module": "Csound.Typed.Opcode.MathematicalOperations",
        "name": "MathematicalOperations",
        "normalized": "",
        "package": "csound-expression-opcodes",
        "partial": "Mathematical Operations",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-MathematicalOperations.html#v:ampdb",
      "description": {
        "fct-descr": "\u003cp\u003eReturns the amplitude equivalent of the decibel value x.\n\u003c/p\u003e\u003cp\u003eReturns the amplitude equivalent of the decibel value x. Thus:\n\u003c/p\u003e\u003cpre\u003e  ampdb (x)  (no rate restriction)\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/ampdb.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.MathematicalOperations",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "a -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-MathematicalOperations.html#ampdb",
        "fct-type": "function",
        "title": "ampdb"
      },
      "index": {
        "description": "Returns the amplitude equivalent of the decibel value Returns the amplitude equivalent of the decibel value Thus ampdb no rate restriction csound doc http www.csounds.com manual html ampdb.html",
        "hierarchy": "Csound Typed Opcode MathematicalOperations",
        "module": "Csound.Typed.Opcode.MathematicalOperations",
        "name": "ampdb",
        "normalized": "a-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "a-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-MathematicalOperations.html#v:ampdbfs",
      "description": {
        "fct-descr": "\u003cp\u003eReturns the amplitude equivalent (in 16-bit signed integer scale) of the full scale decibel (dB FS) value x.\n\u003c/p\u003e\u003cp\u003eReturns the amplitude equivalent of the full scale decibel (dB FS) value x. The logarithmic full scale decibel values will be converted to linear 16-bit signed integer values from &#226;&#136;&#146;32,768 to +32,767\u003c/p\u003e\u003cpre\u003e  ampdbfs (x)  (no rate restriction)\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/ampdbfs.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.MathematicalOperations",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "a -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-MathematicalOperations.html#ampdbfs",
        "fct-type": "function",
        "title": "ampdbfs"
      },
      "index": {
        "description": "Returns the amplitude equivalent in bit signed integer scale of the full scale decibel dB FS value Returns the amplitude equivalent of the full scale decibel dB FS value The logarithmic full scale decibel values will be converted to linear bit signed integer values from to ampdbfs no rate restriction csound doc http www.csounds.com manual html ampdbfs.html",
        "hierarchy": "Csound Typed Opcode MathematicalOperations",
        "module": "Csound.Typed.Opcode.MathematicalOperations",
        "name": "ampdbfs",
        "normalized": "a-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "a-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-MathematicalOperations.html#v:birnd",
      "description": {
        "fct-descr": "\u003cp\u003eReturns a random number in a bi-polar range.\n\u003c/p\u003e\u003cpre\u003e  birnd (x) (init- or control-rate only)\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/birnd.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.MathematicalOperations",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "a -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-MathematicalOperations.html#birnd",
        "fct-type": "function",
        "title": "birnd"
      },
      "index": {
        "description": "Returns random number in bi-polar range birnd init or control-rate only csound doc http www.csounds.com manual html birnd.html",
        "hierarchy": "Csound Typed Opcode MathematicalOperations",
        "module": "Csound.Typed.Opcode.MathematicalOperations",
        "name": "birnd",
        "normalized": "a-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "a-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-MathematicalOperations.html#v:clear",
      "description": {
        "fct-descr": "\u003cp\u003eZeroes a list of audio signals.\n\u003c/p\u003e\u003cp\u003eclear zeroes a list of audio signals.\n\u003c/p\u003e\u003cpre\u003e  clear  avar1 [, avar2] [, avar3] [...]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/clear.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.MathematicalOperations",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "[Sig] -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-MathematicalOperations.html#clear",
        "fct-type": "function",
        "title": "clear"
      },
      "index": {
        "description": "Zeroes list of audio signals clear zeroes list of audio signals clear avar1 avar2 avar3 csound doc http www.csounds.com manual html clear.html",
        "hierarchy": "Csound Typed Opcode MathematicalOperations",
        "module": "Csound.Typed.Opcode.MathematicalOperations",
        "name": "clear",
        "normalized": "[Sig]-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "[Sig]-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-MathematicalOperations.html#v:dbamp",
      "description": {
        "fct-descr": "\u003cp\u003eReturns the decibel equivalent of the raw amplitude x.\n\u003c/p\u003e\u003cpre\u003e  dbamp (x)  (init-rate or control-rate args only)\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/dbamp.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.MathematicalOperations",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "a -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-MathematicalOperations.html#dbamp",
        "fct-type": "function",
        "title": "dbamp"
      },
      "index": {
        "description": "Returns the decibel equivalent of the raw amplitude dbamp init-rate or control-rate args only csound doc http www.csounds.com manual html dbamp.html",
        "hierarchy": "Csound Typed Opcode MathematicalOperations",
        "module": "Csound.Typed.Opcode.MathematicalOperations",
        "name": "dbamp",
        "normalized": "a-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "a-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-MathematicalOperations.html#v:dbfsamp",
      "description": {
        "fct-descr": "\u003cp\u003eReturns the decibel equivalent of the raw amplitude x, relative to full scale amplitude.\n\u003c/p\u003e\u003cp\u003eReturns the decibel equivalent of the raw amplitude x, relative to full scale amplitude. Full scale is assumed to be 16 bit. New is Csound version 4.10.\n\u003c/p\u003e\u003cpre\u003e  dbfsamp (x)  (init-rate or control-rate args only)\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/dbfsamp.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.MathematicalOperations",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "a -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-MathematicalOperations.html#dbfsamp",
        "fct-type": "function",
        "title": "dbfsamp"
      },
      "index": {
        "description": "Returns the decibel equivalent of the raw amplitude relative to full scale amplitude Returns the decibel equivalent of the raw amplitude relative to full scale amplitude Full scale is assumed to be bit New is Csound version dbfsamp init-rate or control-rate args only csound doc http www.csounds.com manual html dbfsamp.html",
        "hierarchy": "Csound Typed Opcode MathematicalOperations",
        "module": "Csound.Typed.Opcode.MathematicalOperations",
        "name": "dbfsamp",
        "normalized": "a-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "a-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-MathematicalOperations.html#v:divz",
      "description": {
        "fct-descr": "\u003cp\u003eSafely divides two numbers.\n\u003c/p\u003e\u003cpre\u003e ares  divz  xa, xb, ksubst\n ires  divz  ia, ib, isubst\n kres  divz  ka, kb, ksubst\n ... divz (ka, kb, ksubst)... (no rate restriction)\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/divz.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.MathematicalOperations",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "a -\u003e a -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-MathematicalOperations.html#divz",
        "fct-type": "function",
        "title": "divz"
      },
      "index": {
        "description": "Safely divides two numbers ares divz xa xb ksubst ires divz ia ib isubst kres divz ka kb ksubst divz ka kb ksubst no rate restriction csound doc http www.csounds.com manual html divz.html",
        "hierarchy": "Csound Typed Opcode MathematicalOperations",
        "module": "Csound.Typed.Opcode.MathematicalOperations",
        "name": "divz",
        "normalized": "a-\u003ea-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "a-\u003ea-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-MathematicalOperations.html#v:mac",
      "description": {
        "fct-descr": "\u003cp\u003eMultiplies and accumulates a- and k-rate signals.\n\u003c/p\u003e\u003cpre\u003e ares  mac  ksig1, asig1 [, ksig2] [, asig2] [, ksig3] [, asig3] [...]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/mac.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.MathematicalOperations",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "[Sig] -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-MathematicalOperations.html#mac",
        "fct-type": "function",
        "title": "mac"
      },
      "index": {
        "description": "Multiplies and accumulates and k-rate signals ares mac ksig1 asig1 ksig2 asig2 ksig3 asig3 csound doc http www.csounds.com manual html mac.html",
        "hierarchy": "Csound Typed Opcode MathematicalOperations",
        "module": "Csound.Typed.Opcode.MathematicalOperations",
        "name": "mac",
        "normalized": "[Sig]-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "[Sig]-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-MathematicalOperations.html#v:maca",
      "description": {
        "fct-descr": "\u003cp\u003eMultiply and accumulate a-rate signals only.\n\u003c/p\u003e\u003cpre\u003e ares  maca  asig1 , asig2 [, asig3] [, asig4] [, asig5] [...]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/maca.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.MathematicalOperations",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "[Sig] -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-MathematicalOperations.html#maca",
        "fct-type": "function",
        "title": "maca"
      },
      "index": {
        "description": "Multiply and accumulate a-rate signals only ares maca asig1 asig2 asig3 asig4 asig5 csound doc http www.csounds.com manual html maca.html",
        "hierarchy": "Csound Typed Opcode MathematicalOperations",
        "module": "Csound.Typed.Opcode.MathematicalOperations",
        "name": "maca",
        "normalized": "[Sig]-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "[Sig]-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-MathematicalOperations.html#v:polynomial",
      "description": {
        "fct-descr": "\u003cp\u003eEfficiently evaluates a polynomial of arbitrary order.\n\u003c/p\u003e\u003cp\u003eThe polynomial opcode calculates a polynomial with a single a-rate input variable.  The polynomial is a sum of any number of terms in the form kn*x^n where kn is the nth coefficient of the expression.  These coefficients are k-rate values.\n\u003c/p\u003e\u003cpre\u003e aout  polynomial  ain, k0 [, k1 [, k2 [...]]]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/polynomial.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.MathematicalOperations",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e [Sig] -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-MathematicalOperations.html#polynomial",
        "fct-type": "function",
        "title": "polynomial"
      },
      "index": {
        "description": "Efficiently evaluates polynomial of arbitrary order The polynomial opcode calculates polynomial with single a-rate input variable The polynomial is sum of any number of terms in the form kn where kn is the nth coefficient of the expression These coefficients are k-rate values aout polynomial ain k0 k1 k2 csound doc http www.csounds.com manual html polynomial.html",
        "hierarchy": "Csound Typed Opcode MathematicalOperations",
        "module": "Csound.Typed.Opcode.MathematicalOperations",
        "name": "polynomial",
        "normalized": "Sig-\u003e[Sig]-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003e[Sig]-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-MathematicalOperations.html#v:pow",
      "description": {
        "fct-descr": "\u003cp\u003eComputes one argument to the power of another argument.\n\u003c/p\u003e\u003cp\u003eComputes xarg to the power of kpow (or ipow) and scales the result by inorm.\n\u003c/p\u003e\u003cpre\u003e ares  pow  aarg, kpow [, inorm]\n ires  pow  iarg, ipow [, inorm]\n kres  pow  karg, kpow [, inorm]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/pow.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.MathematicalOperations",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-MathematicalOperations.html#pow",
        "fct-type": "function",
        "title": "pow"
      },
      "index": {
        "description": "Computes one argument to the power of another argument Computes xarg to the power of kpow or ipow and scales the result by inorm ares pow aarg kpow inorm ires pow iarg ipow inorm kres pow karg kpow inorm csound doc http www.csounds.com manual html pow.html",
        "hierarchy": "Csound Typed Opcode MathematicalOperations",
        "module": "Csound.Typed.Opcode.MathematicalOperations",
        "name": "pow",
        "normalized": "Sig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-MathematicalOperations.html#v:product-39-",
      "description": {
        "fct-descr": "\u003cp\u003eMultiplies any number of a-rate signals.\n\u003c/p\u003e\u003cpre\u003e ares  product  asig1, asig2 [, asig3] [...]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/product.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.MathematicalOperations",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "[Sig] -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-MathematicalOperations.html#product%27",
        "fct-type": "function",
        "title": "product'"
      },
      "index": {
        "description": "Multiplies any number of a-rate signals ares product asig1 asig2 asig3 csound doc http www.csounds.com manual html product.html",
        "hierarchy": "Csound Typed Opcode MathematicalOperations",
        "module": "Csound.Typed.Opcode.MathematicalOperations",
        "name": "product'",
        "normalized": "[Sig]-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "[Sig]-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-MathematicalOperations.html#v:rnd",
      "description": {
        "fct-descr": "\u003cp\u003eReturns a random number in a unipolar range at the rate given by the input argument.\n\u003c/p\u003e\u003cpre\u003e  rnd (x) (init- or control-rate only)\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/rnd.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.MathematicalOperations",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "a -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-MathematicalOperations.html#rnd",
        "fct-type": "function",
        "title": "rnd"
      },
      "index": {
        "description": "Returns random number in unipolar range at the rate given by the input argument rnd init or control-rate only csound doc http www.csounds.com manual html rnd.html",
        "hierarchy": "Csound Typed Opcode MathematicalOperations",
        "module": "Csound.Typed.Opcode.MathematicalOperations",
        "name": "rnd",
        "normalized": "a-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "a-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-MathematicalOperations.html#v:sum-39-",
      "description": {
        "fct-descr": "\u003cp\u003eSums any number of a-rate signals.\n\u003c/p\u003e\u003cpre\u003e ares  sum  asig1 [, asig2] [, asig3] [...]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/sum.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.MathematicalOperations",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "[Sig] -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-MathematicalOperations.html#sum%27",
        "fct-type": "function",
        "title": "sum'"
      },
      "index": {
        "description": "Sums any number of a-rate signals ares sum asig1 asig2 asig3 csound doc http www.csounds.com manual html sum.html",
        "hierarchy": "Csound Typed Opcode MathematicalOperations",
        "module": "Csound.Typed.Opcode.MathematicalOperations",
        "name": "sum'",
        "normalized": "[Sig]-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "[Sig]-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-MathematicalOperations.html#v:taninv2",
      "description": {
        "fct-descr": "\u003cp\u003eReturns an arctangent.\n\u003c/p\u003e\u003cp\u003eReturns the arctangent of iy\u003cem\u003eix, ky\u003c/em\u003ekx, or ay/ax.\n\u003c/p\u003e\u003cpre\u003e ares  taninv2  ay, ax\n ires  taninv2  iy, ix\n kres  taninv2  ky, kx\n ... taninv2 (ky, kx)... (no rate restriction)\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/taninv2.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.MathematicalOperations",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "a -\u003e a -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-MathematicalOperations.html#taninv2",
        "fct-type": "function",
        "title": "taninv2"
      },
      "index": {
        "description": "Returns an arctangent Returns the arctangent of iy ix ky kx or ay ax ares taninv2 ay ax ires taninv2 iy ix kres taninv2 ky kx taninv2 ky kx no rate restriction csound doc http www.csounds.com manual html taninv2.html",
        "hierarchy": "Csound Typed Opcode MathematicalOperations",
        "module": "Csound.Typed.Opcode.MathematicalOperations",
        "name": "taninv2",
        "normalized": "a-\u003ea-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "a-\u003ea-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-MathematicalOperations.html#v:vincr",
      "description": {
        "fct-descr": "\u003cp\u003eAccumulates audio signals.\n\u003c/p\u003e\u003cp\u003evincr increments one audio variable with another signal, i.e. it accumulates output.\n\u003c/p\u003e\u003cpre\u003e  vincr  accum, aincr\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vincr.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.MathematicalOperations",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-MathematicalOperations.html#vincr",
        "fct-type": "function",
        "title": "vincr"
      },
      "index": {
        "description": "Accumulates audio signals vincr increments one audio variable with another signal i.e it accumulates output vincr accum aincr csound doc http www.csounds.com manual html vincr.html",
        "hierarchy": "Csound Typed Opcode MathematicalOperations",
        "module": "Csound.Typed.Opcode.MathematicalOperations",
        "name": "vincr",
        "normalized": "Sig-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Miscellaneous.html#",
      "description": {
        "fct-module": "Csound.Typed.Opcode.Miscellaneous",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "module",
        "fct-source": "src/Csound-Typed-Opcode-Miscellaneous.html",
        "fct-type": "module",
        "title": "Miscellaneous"
      },
      "index": {
        "description": "",
        "hierarchy": "Csound Typed Opcode Miscellaneous",
        "module": "Csound.Typed.Opcode.Miscellaneous",
        "name": "Miscellaneous",
        "normalized": "",
        "package": "csound-expression-opcodes",
        "partial": "Miscellaneous",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Miscellaneous.html#v:fareylen",
      "description": {
        "fct-descr": "\u003cp\u003ereturns the length of a Farey Sequence.\n\u003c/p\u003e\u003cp\u003eThis opcode can be used in conjunction with GENfarey.\n It calculates the length of Farey Sequence Fn. Its length is given by:\n |Fn| = 1 + SUM over n phi(m) \n where phi(m) is Euler's totient function, which gives the number of integers &#226;&#137;&#164; m that are coprime to m\u003c/p\u003e\u003cpre\u003e kfl  fareylen  kfn\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/fareylen.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Miscellaneous",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Tab -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-Miscellaneous.html#fareylen",
        "fct-type": "function",
        "title": "fareylen"
      },
      "index": {
        "description": "returns the length of Farey Sequence This opcode can be used in conjunction with GENfarey It calculates the length of Farey Sequence Fn Its length is given by Fn SUM over phi where phi is Euler totient function which gives the number of integers that are coprime to kfl fareylen kfn csound doc http www.csounds.com manual html fareylen.html",
        "hierarchy": "Csound Typed Opcode Miscellaneous",
        "module": "Csound.Typed.Opcode.Miscellaneous",
        "name": "fareylen",
        "normalized": "Tab-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Tab-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Miscellaneous.html#v:fareyleni",
      "description": {
        "fct-descr": "\u003cp\u003ereturns the length of a Farey Sequence.\n\u003c/p\u003e\u003cp\u003eThis opcode can be used in conjunction with GENfarey.\n It calculates the length of Farey Sequence Fn. Its length is given by:\n |Fn| = 1 + SUM over n phi(m) \n where phi(m) is Euler's totient function, which gives the number of integers &#226;&#137;&#164; m that are coprime to m\u003c/p\u003e\u003cpre\u003e ifl  fareyleni  ifn\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/fareyleni.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Miscellaneous",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Tab -\u003e D",
        "fct-source": "src/Csound-Typed-Opcode-Miscellaneous.html#fareyleni",
        "fct-type": "function",
        "title": "fareyleni"
      },
      "index": {
        "description": "returns the length of Farey Sequence This opcode can be used in conjunction with GENfarey It calculates the length of Farey Sequence Fn Its length is given by Fn SUM over phi where phi is Euler totient function which gives the number of integers that are coprime to ifl fareyleni ifn csound doc http www.csounds.com manual html fareyleni.html",
        "hierarchy": "Csound Typed Opcode Miscellaneous",
        "module": "Csound.Typed.Opcode.Miscellaneous",
        "name": "fareyleni",
        "normalized": "Tab-\u003eD",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Tab-\u003eD"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Miscellaneous.html#v:modmatrix",
      "description": {
        "fct-descr": "\u003cp\u003eModulation matrix opcode with optimizations for sparse matrices.\n\u003c/p\u003e\u003cp\u003eThe opcode can be used to let a large number of k-rate modulator\n       variables modulate a large number of k-rate parameter variables,\n       with arbitrary scaling of each modulator-to-parameter\n       connection.  Csound ftables are used to hold both the input\n       (parameter)  variables, the modulator variables, and the scaling\n       coefficients. Output variables are written to another Csound ftable.\n\u003c/p\u003e\u003cpre\u003e  modmatrix  iresfn, isrcmodfn, isrcparmfn, imodscale, inum_mod, \\\\\n     inum_parm, kupdate\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/modmatrix.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Miscellaneous",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Tab -\u003e Tab -\u003e Tab -\u003e D -\u003e D -\u003e D -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-Miscellaneous.html#modmatrix",
        "fct-type": "function",
        "title": "modmatrix"
      },
      "index": {
        "description": "Modulation matrix opcode with optimizations for sparse matrices The opcode can be used to let large number of k-rate modulator variables modulate large number of k-rate parameter variables with arbitrary scaling of each modulator-to-parameter connection Csound ftables are used to hold both the input parameter variables the modulator variables and the scaling coefficients Output variables are written to another Csound ftable modmatrix iresfn isrcmodfn isrcparmfn imodscale inum mod inum parm kupdate csound doc http www.csounds.com manual html modmatrix.html",
        "hierarchy": "Csound Typed Opcode Miscellaneous",
        "module": "Csound.Typed.Opcode.Miscellaneous",
        "name": "modmatrix",
        "normalized": "Tab-\u003eTab-\u003eTab-\u003eD-\u003eD-\u003eD-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Tab-\u003eTab-\u003eTab-\u003eD-\u003eD-\u003eD-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Miscellaneous.html#v:pwd",
      "description": {
        "fct-descr": "\u003cp\u003eAsks the underlying operating system for the current directory\n       name as a string.\n\u003c/p\u003e\u003cp\u003epwd call the operating system to determine\n       the current directory (folder).  pwd runs\n       at i-time only.\n\u003c/p\u003e\u003cpre\u003e Sres  pwd &#160;\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/pwd.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Miscellaneous",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str",
        "fct-source": "src/Csound-Typed-Opcode-Miscellaneous.html#pwd",
        "fct-type": "function",
        "title": "pwd"
      },
      "index": {
        "description": "Asks the underlying operating system for the current directory name as string pwd call the operating system to determine the current directory folder pwd runs at i-time only Sres pwd csound doc http www.csounds.com manual html pwd.html",
        "hierarchy": "Csound Typed Opcode Miscellaneous",
        "module": "Csound.Typed.Opcode.Miscellaneous",
        "name": "pwd",
        "normalized": "",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Miscellaneous.html#v:system",
      "description": {
        "fct-descr": "\u003cp\u003eCall an external program via the system call\n\u003c/p\u003e\u003cp\u003esystem and system_i call\n     any external command understood by the operating system, similarly\n     to the C function     system(). system_i runs\n     at i-time only, while \n       system runs both at initialization and\n       performance time.\n\u003c/p\u003e\u003cpre\u003e kres  system  ktrig, Scmd, [knowait]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/system.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Miscellaneous",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Str -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-Miscellaneous.html#system",
        "fct-type": "function",
        "title": "system"
      },
      "index": {
        "description": "Call an external program via the system call system and system call any external command understood by the operating system similarly to the function system system runs at i-time only while system runs both at initialization and performance time kres system ktrig Scmd knowait csound doc http www.csounds.com manual html system.html",
        "hierarchy": "Csound Typed Opcode Miscellaneous",
        "module": "Csound.Typed.Opcode.Miscellaneous",
        "name": "system",
        "normalized": "Sig-\u003eStr-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eStr-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Miscellaneous.html#v:system_i",
      "description": {
        "fct-descr": "\u003cp\u003eCall an external program via the system call\n\u003c/p\u003e\u003cp\u003esystem and system_i call\n     any external command understood by the operating system, similarly\n     to the C function     system(). system_i runs\n     at i-time only, while \n       system runs both at initialization and\n       performance time.\n\u003c/p\u003e\u003cpre\u003e ires  system_i  itrig, Scmd, [inowait]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/system.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Miscellaneous",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e Str -\u003e D",
        "fct-source": "src/Csound-Typed-Opcode-Miscellaneous.html#system_i",
        "fct-type": "function",
        "title": "system_i"
      },
      "index": {
        "description": "Call an external program via the system call system and system call any external command understood by the operating system similarly to the function system system runs at i-time only while system runs both at initialization and performance time ires system itrig Scmd inowait csound doc http www.csounds.com manual html system.html",
        "hierarchy": "Csound Typed Opcode Miscellaneous",
        "module": "Csound.Typed.Opcode.Miscellaneous",
        "name": "system_i",
        "normalized": "D-\u003eStr-\u003eD",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eStr-\u003eD"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Miscellaneous.html#v:tableshuffle",
      "description": {
        "fct-descr": "\u003cp\u003eshuffles the content of a function table so that each element of the source\n       table is put into a different random position.\n\u003c/p\u003e\u003cp\u003eThis opcode can be used in order to shuffle the content of\n       function tables into a random order but without loosing any of\n       the elements. Imagine shuffling a deck of cards. Each element of\n       the table is copied to a different random position. If that\n       position was already chosen before then the next free position\n       is chosen. The length of the table remains the same.\n\u003c/p\u003e\u003cpre\u003e  tableshuffle  ktablenum\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/tableshuffle.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Miscellaneous",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-Miscellaneous.html#tableshuffle",
        "fct-type": "function",
        "title": "tableshuffle"
      },
      "index": {
        "description": "shuffles the content of function table so that each element of the source table is put into different random position This opcode can be used in order to shuffle the content of function tables into random order but without loosing any of the elements Imagine shuffling deck of cards Each element of the table is copied to different random position If that position was already chosen before then the next free position is chosen The length of the table remains the same tableshuffle ktablenum csound doc http www.csounds.com manual html tableshuffle.html",
        "hierarchy": "Csound Typed Opcode Miscellaneous",
        "module": "Csound.Typed.Opcode.Miscellaneous",
        "name": "tableshuffle",
        "normalized": "Sig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Miscellaneous.html#v:tableshufflei",
      "description": {
        "fct-descr": "\u003cp\u003eshuffles the content of a function table so that each element of the source\n       table is put into a different random position.\n\u003c/p\u003e\u003cp\u003eThis opcode can be used in order to shuffle the content of\n       function tables into a random order but without loosing any of\n       the elements. Imagine shuffling a deck of cards. Each element of\n       the table is copied to a different random position. If that\n       position was already chosen before then the next free position\n       is chosen. The length of the table remains the same.\n\u003c/p\u003e\u003cpre\u003e  tableshufflei  itablenum\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/tableshuffle.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Miscellaneous",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-Miscellaneous.html#tableshufflei",
        "fct-type": "function",
        "title": "tableshufflei"
      },
      "index": {
        "description": "shuffles the content of function table so that each element of the source table is put into different random position This opcode can be used in order to shuffle the content of function tables into random order but without loosing any of the elements Imagine shuffling deck of cards Each element of the table is copied to different random position If that position was already chosen before then the next free position is chosen The length of the table remains the same tableshufflei itablenum csound doc http www.csounds.com manual html tableshuffle.html",
        "hierarchy": "Csound Typed Opcode Miscellaneous",
        "module": "Csound.Typed.Opcode.Miscellaneous",
        "name": "tableshufflei",
        "normalized": "D-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-MixerOpcodes.html#",
      "description": {
        "fct-module": "Csound.Typed.Opcode.MixerOpcodes",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "module",
        "fct-source": "src/Csound-Typed-Opcode-MixerOpcodes.html",
        "fct-type": "module",
        "title": "MixerOpcodes"
      },
      "index": {
        "description": "",
        "hierarchy": "Csound Typed Opcode MixerOpcodes",
        "module": "Csound.Typed.Opcode.MixerOpcodes",
        "name": "MixerOpcodes",
        "normalized": "",
        "package": "csound-expression-opcodes",
        "partial": "Mixer Opcodes",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-MixerOpcodes.html#v:mixerClear",
      "description": {
        "fct-descr": "\u003cp\u003eResets all channels of a buss to 0.\n\u003c/p\u003e\u003cpre\u003e  MixerClear &#160;\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/MixerClear.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.MixerOpcodes",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "SE ()",
        "fct-source": "src/Csound-Typed-Opcode-MixerOpcodes.html#mixerClear",
        "fct-type": "function",
        "title": "mixerClear"
      },
      "index": {
        "description": "Resets all channels of buss to MixerClear csound doc http www.csounds.com manual html MixerClear.html",
        "hierarchy": "Csound Typed Opcode MixerOpcodes",
        "module": "Csound.Typed.Opcode.MixerOpcodes",
        "name": "mixerClear",
        "normalized": "SE()",
        "package": "csound-expression-opcodes",
        "partial": "Clear",
        "signature": "SE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-MixerOpcodes.html#v:mixerGetLevel",
      "description": {
        "fct-descr": "\u003cp\u003eGets the level of a send to a buss.\n\u003c/p\u003e\u003cp\u003eGets the level at which signals from the send are being added to the buss. The actual sending of the signal to the buss \n is performed by the MixerSend opcode.\n\u003c/p\u003e\u003cpre\u003e kgain  MixerGetLevel  isend, ibuss\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/MixerGetLevel.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.MixerOpcodes",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e SE Sig",
        "fct-source": "src/Csound-Typed-Opcode-MixerOpcodes.html#mixerGetLevel",
        "fct-type": "function",
        "title": "mixerGetLevel"
      },
      "index": {
        "description": "Gets the level of send to buss Gets the level at which signals from the send are being added to the buss The actual sending of the signal to the buss is performed by the MixerSend opcode kgain MixerGetLevel isend ibuss csound doc http www.csounds.com manual html MixerGetLevel.html",
        "hierarchy": "Csound Typed Opcode MixerOpcodes",
        "module": "Csound.Typed.Opcode.MixerOpcodes",
        "name": "mixerGetLevel",
        "normalized": "D-\u003eD-\u003eSE Sig",
        "package": "csound-expression-opcodes",
        "partial": "Get Level",
        "signature": "D-\u003eD-\u003eSE Sig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-MixerOpcodes.html#v:mixerReceive",
      "description": {
        "fct-descr": "\u003cp\u003eReceives an arate signal from a channel of a buss.\n\u003c/p\u003e\u003cp\u003eReceives an arate signal that has been mixed onto a channel of a buss.\n\u003c/p\u003e\u003cpre\u003e asignal  MixerReceive  ibuss, ichannel\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/MixerReceive.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.MixerOpcodes",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e SE Sig",
        "fct-source": "src/Csound-Typed-Opcode-MixerOpcodes.html#mixerReceive",
        "fct-type": "function",
        "title": "mixerReceive"
      },
      "index": {
        "description": "Receives an arate signal from channel of buss Receives an arate signal that has been mixed onto channel of buss asignal MixerReceive ibuss ichannel csound doc http www.csounds.com manual html MixerReceive.html",
        "hierarchy": "Csound Typed Opcode MixerOpcodes",
        "module": "Csound.Typed.Opcode.MixerOpcodes",
        "name": "mixerReceive",
        "normalized": "D-\u003eD-\u003eSE Sig",
        "package": "csound-expression-opcodes",
        "partial": "Receive",
        "signature": "D-\u003eD-\u003eSE Sig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-MixerOpcodes.html#v:mixerSend",
      "description": {
        "fct-descr": "\u003cp\u003eMixes an arate signal into a channel of a buss.\n\u003c/p\u003e\u003cpre\u003e  MixerSend  asignal, isend, ibuss, ichannel\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/MixerSend.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.MixerOpcodes",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e D -\u003e D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-MixerOpcodes.html#mixerSend",
        "fct-type": "function",
        "title": "mixerSend"
      },
      "index": {
        "description": "Mixes an arate signal into channel of buss MixerSend asignal isend ibuss ichannel csound doc http www.csounds.com manual html MixerSend.html",
        "hierarchy": "Csound Typed Opcode MixerOpcodes",
        "module": "Csound.Typed.Opcode.MixerOpcodes",
        "name": "mixerSend",
        "normalized": "Sig-\u003eD-\u003eD-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "Send",
        "signature": "Sig-\u003eD-\u003eD-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-MixerOpcodes.html#v:mixerSetLevel",
      "description": {
        "fct-descr": "\u003cp\u003eSets the level of a send to a buss.\n\u003c/p\u003e\u003cp\u003eSets the level at which signals from the send are added to the buss. The actual sending of the signal to the buss \n is performed by the MixerSend opcode.\n\u003c/p\u003e\u003cpre\u003e  MixerSetLevel  isend, ibuss, kgain\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/MixerSetLevel.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.MixerOpcodes",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-MixerOpcodes.html#mixerSetLevel",
        "fct-type": "function",
        "title": "mixerSetLevel"
      },
      "index": {
        "description": "Sets the level of send to buss Sets the level at which signals from the send are added to the buss The actual sending of the signal to the buss is performed by the MixerSend opcode MixerSetLevel isend ibuss kgain csound doc http www.csounds.com manual html MixerSetLevel.html",
        "hierarchy": "Csound Typed Opcode MixerOpcodes",
        "module": "Csound.Typed.Opcode.MixerOpcodes",
        "name": "mixerSetLevel",
        "normalized": "D-\u003eD-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "Set Level",
        "signature": "D-\u003eD-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-MixerOpcodes.html#v:mixerSetLevel_i",
      "description": {
        "fct-descr": "\u003cp\u003eSets the level of a send to a buss.\n\u003c/p\u003e\u003cp\u003eSets the level at which signals from the send are added to the buss. This opcode, because all parameters are irate, may \n       be used in the orchestra header. The actual sending of the signal to the buss \n       is performed by the MixerSend opcode.\n\u003c/p\u003e\u003cpre\u003e  MixerSetLevel_i  isend, ibuss, igain\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/MixerSetLevel_i.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.MixerOpcodes",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-MixerOpcodes.html#mixerSetLevel_i",
        "fct-type": "function",
        "title": "mixerSetLevel_i"
      },
      "index": {
        "description": "Sets the level of send to buss Sets the level at which signals from the send are added to the buss This opcode because all parameters are irate may be used in the orchestra header The actual sending of the signal to the buss is performed by the MixerSend opcode MixerSetLevel isend ibuss igain csound doc http www.csounds.com manual html MixerSetLevel i.html",
        "hierarchy": "Csound Typed Opcode MixerOpcodes",
        "module": "Csound.Typed.Opcode.MixerOpcodes",
        "name": "mixerSetLevel_i",
        "normalized": "D-\u003eD-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "Set Level",
        "signature": "D-\u003eD-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Network.html#",
      "description": {
        "fct-module": "Csound.Typed.Opcode.Network",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "module",
        "fct-source": "src/Csound-Typed-Opcode-Network.html",
        "fct-type": "module",
        "title": "Network"
      },
      "index": {
        "description": "",
        "hierarchy": "Csound Typed Opcode Network",
        "module": "Csound.Typed.Opcode.Network",
        "name": "Network",
        "normalized": "",
        "package": "csound-expression-opcodes",
        "partial": "Network",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Network.html#v:remoteport",
      "description": {
        "fct-descr": "\u003cp\u003eDefines the port for use with the remote system.\n\u003c/p\u003e\u003cp\u003eDefines the port for use with the insremot, \n       midremot, insglobal\n       and midglobal opcodes.\n\u003c/p\u003e\u003cpre\u003e  remoteport  iportnum\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/remoteport.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Network",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-Network.html#remoteport",
        "fct-type": "function",
        "title": "remoteport"
      },
      "index": {
        "description": "Defines the port for use with the remote system Defines the port for use with the insremot midremot insglobal and midglobal opcodes remoteport iportnum csound doc http www.csounds.com manual html remoteport.html",
        "hierarchy": "Csound Typed Opcode Network",
        "module": "Csound.Typed.Opcode.Network",
        "name": "remoteport",
        "normalized": "D-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Network.html#v:sockrecv",
      "description": {
        "fct-descr": "\u003cp\u003eReceives data from other processes using the low-level UDP or TCP protocols\n\u003c/p\u003e\u003cp\u003eReceives directly using the UDP (sockrecv and\n       sockrecvs) or TCP (strecv)\n       protocol onto a network. The data is not subject to any encoding or special\n       routing. The sockrecvs opcode receives a stereo signal\n       interleaved.\n\u003c/p\u003e\u003cpre\u003e asig  sockrecv  iport, ilength\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/sockrecv.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Network",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-Network.html#sockrecv",
        "fct-type": "function",
        "title": "sockrecv"
      },
      "index": {
        "description": "Receives data from other processes using the low-level UDP or TCP protocols Receives directly using the UDP sockrecv and sockrecvs or TCP strecv protocol onto network The data is not subject to any encoding or special routing The sockrecvs opcode receives stereo signal interleaved asig sockrecv iport ilength csound doc http www.csounds.com manual html sockrecv.html",
        "hierarchy": "Csound Typed Opcode Network",
        "module": "Csound.Typed.Opcode.Network",
        "name": "sockrecv",
        "normalized": "D-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Network.html#v:sockrecvs",
      "description": {
        "fct-descr": "\u003cp\u003eReceives data from other processes using the low-level UDP or TCP protocols\n\u003c/p\u003e\u003cp\u003eReceives directly using the UDP (sockrecv and\n       sockrecvs) or TCP (strecv)\n       protocol onto a network. The data is not subject to any encoding or special\n       routing. The sockrecvs opcode receives a stereo signal\n       interleaved.\n\u003c/p\u003e\u003cpre\u003e asigl, asigr  sockrecvs  iport, ilength\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/sockrecv.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Network",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-Network.html#sockrecvs",
        "fct-type": "function",
        "title": "sockrecvs"
      },
      "index": {
        "description": "Receives data from other processes using the low-level UDP or TCP protocols Receives directly using the UDP sockrecv and sockrecvs or TCP strecv protocol onto network The data is not subject to any encoding or special routing The sockrecvs opcode receives stereo signal interleaved asigl asigr sockrecvs iport ilength csound doc http www.csounds.com manual html sockrecv.html",
        "hierarchy": "Csound Typed Opcode Network",
        "module": "Csound.Typed.Opcode.Network",
        "name": "sockrecvs",
        "normalized": "D-\u003eD-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Network.html#v:socksend",
      "description": {
        "fct-descr": "\u003cp\u003eSends data to other processes using the low-level UDP or TCP protocols\n\u003c/p\u003e\u003cp\u003eTransmits data directly using the UDP (socksend and\n       socksends) or TCP (stsend)\n       protocol onto a network. The data is not subject to any encoding or special\n       routing. The socksends opcode send a stereo signal interleaved.\n\u003c/p\u003e\u003cpre\u003e  socksend  asig, Sipaddr, iport, ilength\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/socksend.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Network",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Str -\u003e D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-Network.html#socksend",
        "fct-type": "function",
        "title": "socksend"
      },
      "index": {
        "description": "Sends data to other processes using the low-level UDP or TCP protocols Transmits data directly using the UDP socksend and socksends or TCP stsend protocol onto network The data is not subject to any encoding or special routing The socksends opcode send stereo signal interleaved socksend asig Sipaddr iport ilength csound doc http www.csounds.com manual html socksend.html",
        "hierarchy": "Csound Typed Opcode Network",
        "module": "Csound.Typed.Opcode.Network",
        "name": "socksend",
        "normalized": "Sig-\u003eStr-\u003eD-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eStr-\u003eD-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Network.html#v:socksends",
      "description": {
        "fct-descr": "\u003cp\u003eSends data to other processes using the low-level UDP or TCP protocols\n\u003c/p\u003e\u003cp\u003eTransmits data directly using the UDP (socksend and\n       socksends) or TCP (stsend)\n       protocol onto a network. The data is not subject to any encoding or special\n       routing. The socksends opcode send a stereo signal interleaved.\n\u003c/p\u003e\u003cpre\u003e  socksends  asigl, asigr, Sipaddr, iport,\n         ilength\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/socksend.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Network",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Str -\u003e D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-Network.html#socksends",
        "fct-type": "function",
        "title": "socksends"
      },
      "index": {
        "description": "Sends data to other processes using the low-level UDP or TCP protocols Transmits data directly using the UDP socksend and socksends or TCP stsend protocol onto network The data is not subject to any encoding or special routing The socksends opcode send stereo signal interleaved socksends asigl asigr Sipaddr iport ilength csound doc http www.csounds.com manual html socksend.html",
        "hierarchy": "Csound Typed Opcode Network",
        "module": "Csound.Typed.Opcode.Network",
        "name": "socksends",
        "normalized": "Sig-\u003eSig-\u003eStr-\u003eD-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eStr-\u003eD-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Network.html#v:strecv",
      "description": {
        "fct-descr": "\u003cp\u003eReceives data from other processes using the low-level UDP or TCP protocols\n\u003c/p\u003e\u003cp\u003eReceives directly using the UDP (sockrecv and\n       sockrecvs) or TCP (strecv)\n       protocol onto a network. The data is not subject to any encoding or special\n       routing. The sockrecvs opcode receives a stereo signal\n       interleaved.\n\u003c/p\u003e\u003cpre\u003e asig  strecv  Sipaddr, iport\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/sockrecv.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Network",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-Network.html#strecv",
        "fct-type": "function",
        "title": "strecv"
      },
      "index": {
        "description": "Receives data from other processes using the low-level UDP or TCP protocols Receives directly using the UDP sockrecv and sockrecvs or TCP strecv protocol onto network The data is not subject to any encoding or special routing The sockrecvs opcode receives stereo signal interleaved asig strecv Sipaddr iport csound doc http www.csounds.com manual html sockrecv.html",
        "hierarchy": "Csound Typed Opcode Network",
        "module": "Csound.Typed.Opcode.Network",
        "name": "strecv",
        "normalized": "Str-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Network.html#v:stsend",
      "description": {
        "fct-descr": "\u003cp\u003eSends data to other processes using the low-level UDP or TCP protocols\n\u003c/p\u003e\u003cp\u003eTransmits data directly using the UDP (socksend and\n       socksends) or TCP (stsend)\n       protocol onto a network. The data is not subject to any encoding or special\n       routing. The socksends opcode send a stereo signal interleaved.\n\u003c/p\u003e\u003cpre\u003e  stsend  asig, Sipaddr, iport\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/socksend.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Network",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Str -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-Network.html#stsend",
        "fct-type": "function",
        "title": "stsend"
      },
      "index": {
        "description": "Sends data to other processes using the low-level UDP or TCP protocols Transmits data directly using the UDP socksend and socksends or TCP stsend protocol onto network The data is not subject to any encoding or special routing The socksends opcode send stereo signal interleaved stsend asig Sipaddr iport csound doc http www.csounds.com manual html socksend.html",
        "hierarchy": "Csound Typed Opcode Network",
        "module": "Csound.Typed.Opcode.Network",
        "name": "stsend",
        "normalized": "Sig-\u003eStr-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eStr-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-OSC.html#",
      "description": {
        "fct-module": "Csound.Typed.Opcode.OSC",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "module",
        "fct-source": "src/Csound-Typed-Opcode-OSC.html",
        "fct-type": "module",
        "title": "OSC"
      },
      "index": {
        "description": "",
        "hierarchy": "Csound Typed Opcode OSC",
        "module": "Csound.Typed.Opcode.OSC",
        "name": "OSC",
        "normalized": "",
        "package": "csound-expression-opcodes",
        "partial": "OSC",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-OSC.html#v:oscInit",
      "description": {
        "fct-descr": "\u003cp\u003eStart a listening process for OSC messages to a particular port.\n\u003c/p\u003e\u003cp\u003eStarts a listening process, which can be used by OSClisten.\n\u003c/p\u003e\u003cpre\u003e ihandle  OSCinit  iport\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/OSCinit.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.OSC",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e SE D",
        "fct-source": "src/Csound-Typed-Opcode-OSC.html#oscInit",
        "fct-type": "function",
        "title": "oscInit"
      },
      "index": {
        "description": "Start listening process for OSC messages to particular port Starts listening process which can be used by OSClisten ihandle OSCinit iport csound doc http www.csounds.com manual html OSCinit.html",
        "hierarchy": "Csound Typed Opcode OSC",
        "module": "Csound.Typed.Opcode.OSC",
        "name": "oscInit",
        "normalized": "D-\u003eSE D",
        "package": "csound-expression-opcodes",
        "partial": "Init",
        "signature": "D-\u003eSE D"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-OSC.html#v:oscListen",
      "description": {
        "fct-descr": "\u003cp\u003eListen for OSC messages to a particular path.\n\u003c/p\u003e\u003cp\u003eOn each k-cycle looks to see if an OSC message has been send to\n       a given path of a given type.\n\u003c/p\u003e\u003cpre\u003e kans  OSClisten  ihandle, idest, itype [, xdata1, xdata2, ...]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/OSClisten.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.OSC",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e D -\u003e [Sig] -\u003e SE Sig",
        "fct-source": "src/Csound-Typed-Opcode-OSC.html#oscListen",
        "fct-type": "function",
        "title": "oscListen"
      },
      "index": {
        "description": "Listen for OSC messages to particular path On each k-cycle looks to see if an OSC message has been send to given path of given type kans OSClisten ihandle idest itype xdata1 xdata2 csound doc http www.csounds.com manual html OSClisten.html",
        "hierarchy": "Csound Typed Opcode OSC",
        "module": "Csound.Typed.Opcode.OSC",
        "name": "oscListen",
        "normalized": "D-\u003eD-\u003eD-\u003e[Sig]-\u003eSE Sig",
        "package": "csound-expression-opcodes",
        "partial": "Listen",
        "signature": "D-\u003eD-\u003eD-\u003e[Sig]-\u003eSE Sig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-OSC.html#v:oscSend",
      "description": {
        "fct-descr": "\u003cp\u003eSends data to other processes using the OSC protocol\n\u003c/p\u003e\u003cp\u003eUses the OSC protocol to send message to other OSC listening processes.\n\u003c/p\u003e\u003cpre\u003e  OSCsend  kwhen, ihost, iport, idestination, itype [, kdata1, kdata2, ...]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/OSCsend.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.OSC",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e D -\u003e D -\u003e D -\u003e D -\u003e [Sig] -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-OSC.html#oscSend",
        "fct-type": "function",
        "title": "oscSend"
      },
      "index": {
        "description": "Sends data to other processes using the OSC protocol Uses the OSC protocol to send message to other OSC listening processes OSCsend kwhen ihost iport idestination itype kdata1 kdata2 csound doc http www.csounds.com manual html OSCsend.html",
        "hierarchy": "Csound Typed Opcode OSC",
        "module": "Csound.Typed.Opcode.OSC",
        "name": "oscSend",
        "normalized": "Sig-\u003eD-\u003eD-\u003eD-\u003eD-\u003e[Sig]-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "Send",
        "signature": "Sig-\u003eD-\u003eD-\u003eD-\u003eD-\u003e[Sig]-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-PitchConverters.html#",
      "description": {
        "fct-module": "Csound.Typed.Opcode.PitchConverters",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "module",
        "fct-source": "src/Csound-Typed-Opcode-PitchConverters.html",
        "fct-type": "module",
        "title": "PitchConverters"
      },
      "index": {
        "description": "",
        "hierarchy": "Csound Typed Opcode PitchConverters",
        "module": "Csound.Typed.Opcode.PitchConverters",
        "name": "PitchConverters",
        "normalized": "",
        "package": "csound-expression-opcodes",
        "partial": "Pitch Converters",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-PitchConverters.html#v:cent",
      "description": {
        "fct-descr": "\u003cp\u003eCalculates a factor to raise/lower a frequency by a given amount of cents.\n\u003c/p\u003e\u003cpre\u003e  cent (x) \n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/cent.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.PitchConverters",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "a -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-PitchConverters.html#cent",
        "fct-type": "function",
        "title": "cent"
      },
      "index": {
        "description": "Calculates factor to raise lower frequency by given amount of cents cent csound doc http www.csounds.com manual html cent.html",
        "hierarchy": "Csound Typed Opcode PitchConverters",
        "module": "Csound.Typed.Opcode.PitchConverters",
        "name": "cent",
        "normalized": "a-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "a-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-PitchConverters.html#v:cps2pch",
      "description": {
        "fct-descr": "\u003cp\u003eConverts a pitch-class value into cycles-per-second (Hz) for equal divisions of the octave.\n\u003c/p\u003e\u003cpre\u003e icps  cps2pch  ipch, iequal\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/cps2pch.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.PitchConverters",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e D",
        "fct-source": "src/Csound-Typed-Opcode-PitchConverters.html#cps2pch",
        "fct-type": "function",
        "title": "cps2pch"
      },
      "index": {
        "description": "Converts pitch-class value into cycles-per-second Hz for equal divisions of the octave icps cps2pch ipch iequal csound doc http www.csounds.com manual html cps2pch.html",
        "hierarchy": "Csound Typed Opcode PitchConverters",
        "module": "Csound.Typed.Opcode.PitchConverters",
        "name": "cps2pch",
        "normalized": "D-\u003eD-\u003eD",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eD"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-PitchConverters.html#v:cpsmidinn",
      "description": {
        "fct-descr": "\u003cp\u003eConverts a Midi note number value to cycles-per-second.\n\u003c/p\u003e\u003cpre\u003e  cpsmidinn  (MidiNoteNumber)  (init- or control-rate args only)\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/cpsmidinn.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.PitchConverters",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "a -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-PitchConverters.html#cpsmidinn",
        "fct-type": "function",
        "title": "cpsmidinn"
      },
      "index": {
        "description": "Converts Midi note number value to cycles-per-second cpsmidinn MidiNoteNumber init or control-rate args only csound doc http www.csounds.com manual html cpsmidinn.html",
        "hierarchy": "Csound Typed Opcode PitchConverters",
        "module": "Csound.Typed.Opcode.PitchConverters",
        "name": "cpsmidinn",
        "normalized": "a-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "a-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-PitchConverters.html#v:cpsoct",
      "description": {
        "fct-descr": "\u003cp\u003eConverts an octave-point-decimal value to cycles-per-second.\n\u003c/p\u003e\u003cpre\u003e  cpsoct  (oct)  (no rate restriction)\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/cpsoct.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.PitchConverters",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "a -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-PitchConverters.html#cpsoct",
        "fct-type": "function",
        "title": "cpsoct"
      },
      "index": {
        "description": "Converts an octave-point-decimal value to cycles-per-second cpsoct oct no rate restriction csound doc http www.csounds.com manual html cpsoct.html",
        "hierarchy": "Csound Typed Opcode PitchConverters",
        "module": "Csound.Typed.Opcode.PitchConverters",
        "name": "cpsoct",
        "normalized": "a-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "a-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-PitchConverters.html#v:cpspch",
      "description": {
        "fct-descr": "\u003cp\u003eConverts a pitch-class value to cycles-per-second.\n\u003c/p\u003e\u003cpre\u003e  cpspch  (pch)  (init- or control-rate args only)\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/cpspch.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.PitchConverters",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "a -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-PitchConverters.html#cpspch",
        "fct-type": "function",
        "title": "cpspch"
      },
      "index": {
        "description": "Converts pitch-class value to cycles-per-second cpspch pch init or control-rate args only csound doc http www.csounds.com manual html cpspch.html",
        "hierarchy": "Csound Typed Opcode PitchConverters",
        "module": "Csound.Typed.Opcode.PitchConverters",
        "name": "cpspch",
        "normalized": "a-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "a-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-PitchConverters.html#v:cpstun",
      "description": {
        "fct-descr": "\u003cp\u003eReturns micro-tuning values at k-rate.\n\u003c/p\u003e\u003cpre\u003e kcps  cpstun  ktrig, kindex, kfn\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/cpstun.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.PitchConverters",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Tab -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-PitchConverters.html#cpstun",
        "fct-type": "function",
        "title": "cpstun"
      },
      "index": {
        "description": "Returns micro-tuning values at k-rate kcps cpstun ktrig kindex kfn csound doc http www.csounds.com manual html cpstun.html",
        "hierarchy": "Csound Typed Opcode PitchConverters",
        "module": "Csound.Typed.Opcode.PitchConverters",
        "name": "cpstun",
        "normalized": "Sig-\u003eSig-\u003eTab-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eTab-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-PitchConverters.html#v:cpstuni",
      "description": {
        "fct-descr": "\u003cp\u003eReturns micro-tuning values at init-rate.\n\u003c/p\u003e\u003cpre\u003e icps  cpstuni  index, ifn\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/cpstuni.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.PitchConverters",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e Tab -\u003e D",
        "fct-source": "src/Csound-Typed-Opcode-PitchConverters.html#cpstuni",
        "fct-type": "function",
        "title": "cpstuni"
      },
      "index": {
        "description": "Returns micro-tuning values at init-rate icps cpstuni index ifn csound doc http www.csounds.com manual html cpstuni.html",
        "hierarchy": "Csound Typed Opcode PitchConverters",
        "module": "Csound.Typed.Opcode.PitchConverters",
        "name": "cpstuni",
        "normalized": "D-\u003eTab-\u003eD",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eTab-\u003eD"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-PitchConverters.html#v:cpsxpch",
      "description": {
        "fct-descr": "\u003cp\u003eConverts a pitch-class value into cycles-per-second (Hz) for equal divisions of any interval.\n\u003c/p\u003e\u003cp\u003eConverts a pitch-class value into cycles-per-second (Hz) for equal divisions of any interval. There is a restriction of no more than 100 equal divisions.\n\u003c/p\u003e\u003cpre\u003e icps  cpsxpch  ipch, iequal, irepeat, ibase\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/cpsxpch.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.PitchConverters",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e D -\u003e D -\u003e D",
        "fct-source": "src/Csound-Typed-Opcode-PitchConverters.html#cpsxpch",
        "fct-type": "function",
        "title": "cpsxpch"
      },
      "index": {
        "description": "Converts pitch-class value into cycles-per-second Hz for equal divisions of any interval Converts pitch-class value into cycles-per-second Hz for equal divisions of any interval There is restriction of no more than equal divisions icps cpsxpch ipch iequal irepeat ibase csound doc http www.csounds.com manual html cpsxpch.html",
        "hierarchy": "Csound Typed Opcode PitchConverters",
        "module": "Csound.Typed.Opcode.PitchConverters",
        "name": "cpsxpch",
        "normalized": "D-\u003eD-\u003eD-\u003eD-\u003eD",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eD-\u003eD-\u003eD"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-PitchConverters.html#v:octave",
      "description": {
        "fct-descr": "\u003cp\u003eCalculates a factor to raise/lower a frequency by a given amount of octaves.\n\u003c/p\u003e\u003cpre\u003e  octave (x)\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/octave.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.PitchConverters",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "a -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-PitchConverters.html#octave",
        "fct-type": "function",
        "title": "octave"
      },
      "index": {
        "description": "Calculates factor to raise lower frequency by given amount of octaves octave csound doc http www.csounds.com manual html octave.html",
        "hierarchy": "Csound Typed Opcode PitchConverters",
        "module": "Csound.Typed.Opcode.PitchConverters",
        "name": "octave",
        "normalized": "a-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "a-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-PitchConverters.html#v:octcps",
      "description": {
        "fct-descr": "\u003cp\u003eConverts a cycles-per-second value to octave-point-decimal.\n\u003c/p\u003e\u003cpre\u003e  octcps  (cps)  (init- or control-rate args only)\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/octcps.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.PitchConverters",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "a -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-PitchConverters.html#octcps",
        "fct-type": "function",
        "title": "octcps"
      },
      "index": {
        "description": "Converts cycles-per-second value to octave-point-decimal octcps cps init or control-rate args only csound doc http www.csounds.com manual html octcps.html",
        "hierarchy": "Csound Typed Opcode PitchConverters",
        "module": "Csound.Typed.Opcode.PitchConverters",
        "name": "octcps",
        "normalized": "a-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "a-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-PitchConverters.html#v:octmidinn",
      "description": {
        "fct-descr": "\u003cp\u003eConverts a Midi note number value to octave-point-decimal.\n\u003c/p\u003e\u003cpre\u003e  octmidinn  (MidiNoteNumber)  (init- or control-rate args only)\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/octmidinn.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.PitchConverters",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "a -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-PitchConverters.html#octmidinn",
        "fct-type": "function",
        "title": "octmidinn"
      },
      "index": {
        "description": "Converts Midi note number value to octave-point-decimal octmidinn MidiNoteNumber init or control-rate args only csound doc http www.csounds.com manual html octmidinn.html",
        "hierarchy": "Csound Typed Opcode PitchConverters",
        "module": "Csound.Typed.Opcode.PitchConverters",
        "name": "octmidinn",
        "normalized": "a-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "a-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-PitchConverters.html#v:octpch",
      "description": {
        "fct-descr": "\u003cp\u003eConverts a pitch-class value to octave-point-decimal.\n\u003c/p\u003e\u003cpre\u003e  octpch  (pch)  (init- or control-rate args only)\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/octpch.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.PitchConverters",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "a -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-PitchConverters.html#octpch",
        "fct-type": "function",
        "title": "octpch"
      },
      "index": {
        "description": "Converts pitch-class value to octave-point-decimal octpch pch init or control-rate args only csound doc http www.csounds.com manual html octpch.html",
        "hierarchy": "Csound Typed Opcode PitchConverters",
        "module": "Csound.Typed.Opcode.PitchConverters",
        "name": "octpch",
        "normalized": "a-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "a-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-PitchConverters.html#v:pchmidinn",
      "description": {
        "fct-descr": "\u003cp\u003eConverts a Midi note number value to octave point pitch-class units.\n\u003c/p\u003e\u003cpre\u003e  pchmidinn  (MidiNoteNumber)  (init- or control-rate args only)\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/pchmidinn.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.PitchConverters",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "a -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-PitchConverters.html#pchmidinn",
        "fct-type": "function",
        "title": "pchmidinn"
      },
      "index": {
        "description": "Converts Midi note number value to octave point pitch-class units pchmidinn MidiNoteNumber init or control-rate args only csound doc http www.csounds.com manual html pchmidinn.html",
        "hierarchy": "Csound Typed Opcode PitchConverters",
        "module": "Csound.Typed.Opcode.PitchConverters",
        "name": "pchmidinn",
        "normalized": "a-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "a-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-PitchConverters.html#v:pchoct",
      "description": {
        "fct-descr": "\u003cp\u003eConverts an octave-point-decimal value to pitch-class.\n\u003c/p\u003e\u003cpre\u003e  pchoct  (oct)  (init- or control-rate args only)\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/pchoct.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.PitchConverters",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "a -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-PitchConverters.html#pchoct",
        "fct-type": "function",
        "title": "pchoct"
      },
      "index": {
        "description": "Converts an octave-point-decimal value to pitch-class pchoct oct init or control-rate args only csound doc http www.csounds.com manual html pchoct.html",
        "hierarchy": "Csound Typed Opcode PitchConverters",
        "module": "Csound.Typed.Opcode.PitchConverters",
        "name": "pchoct",
        "normalized": "a-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "a-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-PitchConverters.html#v:semitone",
      "description": {
        "fct-descr": "\u003cp\u003eCalculates a factor to raise/lower a frequency by a given amount of semitones.\n\u003c/p\u003e\u003cpre\u003e  semitone (x)\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/semitone.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.PitchConverters",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "a -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-PitchConverters.html#semitone",
        "fct-type": "function",
        "title": "semitone"
      },
      "index": {
        "description": "Calculates factor to raise lower frequency by given amount of semitones semitone csound doc http www.csounds.com manual html semitone.html",
        "hierarchy": "Csound Typed Opcode PitchConverters",
        "module": "Csound.Typed.Opcode.PitchConverters",
        "name": "semitone",
        "normalized": "a-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "a-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-PluginHosting.html#",
      "description": {
        "fct-module": "Csound.Typed.Opcode.PluginHosting",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "module",
        "fct-source": "src/Csound-Typed-Opcode-PluginHosting.html",
        "fct-type": "module",
        "title": "PluginHosting"
      },
      "index": {
        "description": "",
        "hierarchy": "Csound Typed Opcode PluginHosting",
        "module": "Csound.Typed.Opcode.PluginHosting",
        "name": "PluginHosting",
        "normalized": "",
        "package": "csound-expression-opcodes",
        "partial": "Plugin Hosting",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-PluginHosting.html#v:dssiactivate",
      "description": {
        "fct-descr": "\u003cp\u003eActivates or deactivates a DSSI or LADSPA plugin.\n\u003c/p\u003e\u003cp\u003edssiactivate is used to activate or deactivate a DSSI or LADSPA plugin. It calles the plugin's activate() and deactivate() functions if they are provided.\n\u003c/p\u003e\u003cpre\u003e  dssiactivate  ihandle, ktoggle \n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/dssiactivate.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.PluginHosting",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-PluginHosting.html#dssiactivate",
        "fct-type": "function",
        "title": "dssiactivate"
      },
      "index": {
        "description": "Activates or deactivates DSSI or LADSPA plugin dssiactivate is used to activate or deactivate DSSI or LADSPA plugin It calles the plugin activate and deactivate functions if they are provided dssiactivate ihandle ktoggle csound doc http www.csounds.com manual html dssiactivate.html",
        "hierarchy": "Csound Typed Opcode PluginHosting",
        "module": "Csound.Typed.Opcode.PluginHosting",
        "name": "dssiactivate",
        "normalized": "D-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-PluginHosting.html#v:dssiaudio",
      "description": {
        "fct-descr": "\u003cp\u003eProcesses audio using a LADSPA or DSSI plugin.\n\u003c/p\u003e\u003cp\u003edssiaudio generates audio by processing an input signal through a LADSPA plugin.\n\u003c/p\u003e\u003cpre\u003e [aout1, aout2, ..., aout9]  dssiaudio  ihandle, [ain1, ain2, ..., ain9]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/dssiaudio.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.PluginHosting",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e [Sig] -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-PluginHosting.html#dssiaudio",
        "fct-type": "function",
        "title": "dssiaudio"
      },
      "index": {
        "description": "Processes audio using LADSPA or DSSI plugin dssiaudio generates audio by processing an input signal through LADSPA plugin aout1 aout2 aout9 dssiaudio ihandle ain1 ain2 ain9 csound doc http www.csounds.com manual html dssiaudio.html",
        "hierarchy": "Csound Typed Opcode PluginHosting",
        "module": "Csound.Typed.Opcode.PluginHosting",
        "name": "dssiaudio",
        "normalized": "D-\u003e[Sig]-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003e[Sig]-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-PluginHosting.html#v:dssictls",
      "description": {
        "fct-descr": "\u003cp\u003eSend control information to a LADSPA or DSSI plugin.\n\u003c/p\u003e\u003cp\u003edssictls sends control values to a plugin's control port\n\u003c/p\u003e\u003cpre\u003e  dssictls  ihandle, iport, kvalue, ktrigger \n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/dssictls.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.PluginHosting",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e Sig -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-PluginHosting.html#dssictls",
        "fct-type": "function",
        "title": "dssictls"
      },
      "index": {
        "description": "Send control information to LADSPA or DSSI plugin dssictls sends control values to plugin control port dssictls ihandle iport kvalue ktrigger csound doc http www.csounds.com manual html dssictls.html",
        "hierarchy": "Csound Typed Opcode PluginHosting",
        "module": "Csound.Typed.Opcode.PluginHosting",
        "name": "dssictls",
        "normalized": "D-\u003eD-\u003eSig-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eSig-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-PluginHosting.html#v:dssiinit",
      "description": {
        "fct-descr": "\u003cp\u003eLoads a DSSI or LADSPA plugin.\n\u003c/p\u003e\u003cp\u003edssiinit is used to load a DSSI or LADSPA plugin into memory for use with\n       the other dssi4cs opcodes. Both LADSPA effects and DSSI instruments can be used.\n\u003c/p\u003e\u003cpre\u003e ihandle  dssiinit  ilibraryname, iplugindex [, iverbose] \n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/dssiinit.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.PluginHosting",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e SE D",
        "fct-source": "src/Csound-Typed-Opcode-PluginHosting.html#dssiinit",
        "fct-type": "function",
        "title": "dssiinit"
      },
      "index": {
        "description": "Loads DSSI or LADSPA plugin dssiinit is used to load DSSI or LADSPA plugin into memory for use with the other dssi4cs opcodes Both LADSPA effects and DSSI instruments can be used ihandle dssiinit ilibraryname iplugindex iverbose csound doc http www.csounds.com manual html dssiinit.html",
        "hierarchy": "Csound Typed Opcode PluginHosting",
        "module": "Csound.Typed.Opcode.PluginHosting",
        "name": "dssiinit",
        "normalized": "D-\u003eD-\u003eSE D",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eSE D"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-PluginHosting.html#v:dssilist",
      "description": {
        "fct-descr": "\u003cp\u003eLists all available DSSI and LADSPA plugins.\n\u003c/p\u003e\u003cp\u003edssilist checks the variables DSSI_PATH and LADSPA_PATH and lists all plugins available in all plugin libraries there.\n\u003c/p\u003e\u003cpre\u003e  dssilist &#160;\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/dssilist.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.PluginHosting",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "SE ()",
        "fct-source": "src/Csound-Typed-Opcode-PluginHosting.html#dssilist",
        "fct-type": "function",
        "title": "dssilist"
      },
      "index": {
        "description": "Lists all available DSSI and LADSPA plugins dssilist checks the variables DSSI PATH and LADSPA PATH and lists all plugins available in all plugin libraries there dssilist csound doc http www.csounds.com manual html dssilist.html",
        "hierarchy": "Csound Typed Opcode PluginHosting",
        "module": "Csound.Typed.Opcode.PluginHosting",
        "name": "dssilist",
        "normalized": "SE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "SE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-PluginHosting.html#v:vstaudio",
      "description": {
        "fct-module": "Csound.Typed.Opcode.PluginHosting",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-PluginHosting.html#vstaudio",
        "fct-type": "function",
        "title": "vstaudio"
      },
      "index": {
        "description": "",
        "hierarchy": "Csound Typed Opcode PluginHosting",
        "module": "Csound.Typed.Opcode.PluginHosting",
        "name": "vstaudio",
        "normalized": "D-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-PluginHosting.html#v:vstaudiog",
      "description": {
        "fct-module": "Csound.Typed.Opcode.PluginHosting",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-PluginHosting.html#vstaudiog",
        "fct-type": "function",
        "title": "vstaudiog"
      },
      "index": {
        "description": "",
        "hierarchy": "Csound Typed Opcode PluginHosting",
        "module": "Csound.Typed.Opcode.PluginHosting",
        "name": "vstaudiog",
        "normalized": "D-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-PluginHosting.html#v:vstbankload",
      "description": {
        "fct-descr": "\u003cp\u003eLoads parameter banks to a VST plugin.\n\u003c/p\u003e\u003cp\u003evstbankload is used for loading parameter\n       banks to a VST plugin.\n\u003c/p\u003e\u003cpre\u003e  vstbankload  instance, ipath\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vstbankload.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.PluginHosting",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-PluginHosting.html#vstbankload",
        "fct-type": "function",
        "title": "vstbankload"
      },
      "index": {
        "description": "Loads parameter banks to VST plugin vstbankload is used for loading parameter banks to VST plugin vstbankload instance ipath csound doc http www.csounds.com manual html vstbankload.html",
        "hierarchy": "Csound Typed Opcode PluginHosting",
        "module": "Csound.Typed.Opcode.PluginHosting",
        "name": "vstbankload",
        "normalized": "D-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-PluginHosting.html#v:vstedit",
      "description": {
        "fct-descr": "\u003cp\u003eOpens the GUI editor window for a VST plugin.\n\u003c/p\u003e\u003cp\u003evstedit opens the custom GUI editor window for a VST\n       plugin. Note that not all VST plugins have custom GUI editors. It may\n       be necessary to use the --displays command-line option to ensure that\n       Csound handles events from the editor window and displays it properly.\n\u003c/p\u003e\u003cpre\u003e  vstedit  instance\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vstedit.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.PluginHosting",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-PluginHosting.html#vstedit",
        "fct-type": "function",
        "title": "vstedit"
      },
      "index": {
        "description": "Opens the GUI editor window for VST plugin vstedit opens the custom GUI editor window for VST plugin Note that not all VST plugins have custom GUI editors It may be necessary to use the displays command-line option to ensure that Csound handles events from the editor window and displays it properly vstedit instance csound doc http www.csounds.com manual html vstedit.html",
        "hierarchy": "Csound Typed Opcode PluginHosting",
        "module": "Csound.Typed.Opcode.PluginHosting",
        "name": "vstedit",
        "normalized": "D-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-PluginHosting.html#v:vstinfo",
      "description": {
        "fct-descr": "\u003cp\u003eDisplays the parameters and the programs of a VST plugin.\n\u003c/p\u003e\u003cp\u003evstinfo displays the parameters and the programs of a\n       VST plugin.\n\u003c/p\u003e\u003cpre\u003e  vstinfo  instance\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vstinfo.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.PluginHosting",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-PluginHosting.html#vstinfo",
        "fct-type": "function",
        "title": "vstinfo"
      },
      "index": {
        "description": "Displays the parameters and the programs of VST plugin vstinfo displays the parameters and the programs of VST plugin vstinfo instance csound doc http www.csounds.com manual html vstinfo.html",
        "hierarchy": "Csound Typed Opcode PluginHosting",
        "module": "Csound.Typed.Opcode.PluginHosting",
        "name": "vstinfo",
        "normalized": "D-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-PluginHosting.html#v:vstinit",
      "description": {
        "fct-descr": "\u003cp\u003eLoad a VST plugin into memory for use with the other vst4cs opcodes.\n\u003c/p\u003e\u003cp\u003evstinit is used to load a VST plugin into memory for use with\n       the other vst4cs opcodes. Both VST effects and instruments\n       (synthesizers) can be used.\n\u003c/p\u003e\u003cpre\u003e instance  vstinit  ilibrarypath [,iverbose]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vstinit.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.PluginHosting",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e SE D",
        "fct-source": "src/Csound-Typed-Opcode-PluginHosting.html#vstinit",
        "fct-type": "function",
        "title": "vstinit"
      },
      "index": {
        "description": "Load VST plugin into memory for use with the other vst4cs opcodes vstinit is used to load VST plugin into memory for use with the other vst4cs opcodes Both VST effects and instruments synthesizers can be used instance vstinit ilibrarypath iverbose csound doc http www.csounds.com manual html vstinit.html",
        "hierarchy": "Csound Typed Opcode PluginHosting",
        "module": "Csound.Typed.Opcode.PluginHosting",
        "name": "vstinit",
        "normalized": "D-\u003eSE D",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eSE D"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-PluginHosting.html#v:vstmidiout",
      "description": {
        "fct-descr": "\u003cp\u003eSends MIDI information to a VST plugin.\n\u003c/p\u003e\u003cp\u003evstmidiout is used for sending MIDI information to a VST plugin.\n\u003c/p\u003e\u003cpre\u003e  vstmidiout  instance, kstatus, kchan, kdata1, kdata2\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vstmidiout.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.PluginHosting",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-PluginHosting.html#vstmidiout",
        "fct-type": "function",
        "title": "vstmidiout"
      },
      "index": {
        "description": "Sends MIDI information to VST plugin vstmidiout is used for sending MIDI information to VST plugin vstmidiout instance kstatus kchan kdata1 kdata2 csound doc http www.csounds.com manual html vstmidiout.html",
        "hierarchy": "Csound Typed Opcode PluginHosting",
        "module": "Csound.Typed.Opcode.PluginHosting",
        "name": "vstmidiout",
        "normalized": "D-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-PluginHosting.html#v:vstnote",
      "description": {
        "fct-descr": "\u003cp\u003eSends a MIDI note with definite duration to a VST plugin.\n\u003c/p\u003e\u003cp\u003evstnote sends a MIDI note with definite duration to a VST plugin.\n\u003c/p\u003e\u003cpre\u003e  vstnote  instance, kchan, knote, kveloc, kdur\n         \n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vstnote.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.PluginHosting",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-PluginHosting.html#vstnote",
        "fct-type": "function",
        "title": "vstnote"
      },
      "index": {
        "description": "Sends MIDI note with definite duration to VST plugin vstnote sends MIDI note with definite duration to VST plugin vstnote instance kchan knote kveloc kdur csound doc http www.csounds.com manual html vstnote.html",
        "hierarchy": "Csound Typed Opcode PluginHosting",
        "module": "Csound.Typed.Opcode.PluginHosting",
        "name": "vstnote",
        "normalized": "D-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-PluginHosting.html#v:vstparamget",
      "description": {
        "fct-module": "Csound.Typed.Opcode.PluginHosting",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-PluginHosting.html#vstparamget",
        "fct-type": "function",
        "title": "vstparamget"
      },
      "index": {
        "description": "",
        "hierarchy": "Csound Typed Opcode PluginHosting",
        "module": "Csound.Typed.Opcode.PluginHosting",
        "name": "vstparamget",
        "normalized": "D-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-PluginHosting.html#v:vstparamset",
      "description": {
        "fct-module": "Csound.Typed.Opcode.PluginHosting",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e Sig -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-PluginHosting.html#vstparamset",
        "fct-type": "function",
        "title": "vstparamset"
      },
      "index": {
        "description": "",
        "hierarchy": "Csound Typed Opcode PluginHosting",
        "module": "Csound.Typed.Opcode.PluginHosting",
        "name": "vstparamset",
        "normalized": "D-\u003eSig-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eSig-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-PluginHosting.html#v:vstprogset",
      "description": {
        "fct-descr": "\u003cp\u003eLoads parameter banks to a VST plugin.\n\u003c/p\u003e\u003cp\u003evstprogset sets one of the programs in an\n       .fxb bank.\n\u003c/p\u003e\u003cpre\u003e  vstprogset  instance, kprogram\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vstprogset.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.PluginHosting",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-PluginHosting.html#vstprogset",
        "fct-type": "function",
        "title": "vstprogset"
      },
      "index": {
        "description": "Loads parameter banks to VST plugin vstprogset sets one of the programs in an fxb bank vstprogset instance kprogram csound doc http www.csounds.com manual html vstprogset.html",
        "hierarchy": "Csound Typed Opcode PluginHosting",
        "module": "Csound.Typed.Opcode.PluginHosting",
        "name": "vstprogset",
        "normalized": "D-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-RealtimeMIDI.html#",
      "description": {
        "fct-module": "Csound.Typed.Opcode.RealtimeMIDI",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "module",
        "fct-source": "src/Csound-Typed-Opcode-RealtimeMIDI.html",
        "fct-type": "module",
        "title": "RealtimeMIDI"
      },
      "index": {
        "description": "",
        "hierarchy": "Csound Typed Opcode RealtimeMIDI",
        "module": "Csound.Typed.Opcode.RealtimeMIDI",
        "name": "RealtimeMIDI",
        "normalized": "",
        "package": "csound-expression-opcodes",
        "partial": "Realtime MIDI",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-RealtimeMIDI.html#v:aftouch",
      "description": {
        "fct-descr": "\u003cp\u003eGet the current after-touch value for this channel.\n\u003c/p\u003e\u003cpre\u003e kaft  aftouch  [imin] [, imax]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/aftouch.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.RealtimeMIDI",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig",
        "fct-source": "src/Csound-Typed-Opcode-RealtimeMIDI.html#aftouch",
        "fct-type": "function",
        "title": "aftouch"
      },
      "index": {
        "description": "Get the current after-touch value for this channel kaft aftouch imin imax csound doc http www.csounds.com manual html aftouch.html",
        "hierarchy": "Csound Typed Opcode RealtimeMIDI",
        "module": "Csound.Typed.Opcode.RealtimeMIDI",
        "name": "aftouch",
        "normalized": "",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-RealtimeMIDI.html#v:ampmidi",
      "description": {
        "fct-descr": "\u003cp\u003eGet the velocity of the current MIDI event.\n\u003c/p\u003e\u003cpre\u003e iamp  ampmidi  iscal [, ifn]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/ampmidi.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.RealtimeMIDI",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Msg -\u003e D -\u003e D",
        "fct-source": "src/Csound-Typed-Opcode-RealtimeMIDI.html#ampmidi",
        "fct-type": "function",
        "title": "ampmidi"
      },
      "index": {
        "description": "Get the velocity of the current MIDI event iamp ampmidi iscal ifn csound doc http www.csounds.com manual html ampmidi.html",
        "hierarchy": "Csound Typed Opcode RealtimeMIDI",
        "module": "Csound.Typed.Opcode.RealtimeMIDI",
        "name": "ampmidi",
        "normalized": "Msg-\u003eD-\u003eD",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Msg-\u003eD-\u003eD"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-RealtimeMIDI.html#v:ampmidid",
      "description": {
        "fct-descr": "\u003cp\u003eMusically map MIDI velocity to peak amplitude within a specified dynamic range in decibels.\n\u003c/p\u003e\u003cpre\u003e iamplitude  ampmidid  ivelocity, idecibels\n kamplitude  ampmidid  kvelocity, idecibels\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/ampmidid.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.RealtimeMIDI",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Msg -\u003e D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-RealtimeMIDI.html#ampmidid",
        "fct-type": "function",
        "title": "ampmidid"
      },
      "index": {
        "description": "Musically map MIDI velocity to peak amplitude within specified dynamic range in decibels iamplitude ampmidid ivelocity idecibels kamplitude ampmidid kvelocity idecibels csound doc http www.csounds.com manual html ampmidid.html",
        "hierarchy": "Csound Typed Opcode RealtimeMIDI",
        "module": "Csound.Typed.Opcode.RealtimeMIDI",
        "name": "ampmidid",
        "normalized": "Msg-\u003eD-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Msg-\u003eD-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-RealtimeMIDI.html#v:chanctrl",
      "description": {
        "fct-descr": "\u003cp\u003eGet the current value of a MIDI channel controller.\n\u003c/p\u003e\u003cp\u003eGet the current value of a controller and optionally map it onto specified range.\n\u003c/p\u003e\u003cpre\u003e ival  chanctrl  ichnl, ictlno [, ilow] [, ihigh]\n kval  chanctrl  ichnl, ictlno [, ilow] [, ihigh]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/chanctrl.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.RealtimeMIDI",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-RealtimeMIDI.html#chanctrl",
        "fct-type": "function",
        "title": "chanctrl"
      },
      "index": {
        "description": "Get the current value of MIDI channel controller Get the current value of controller and optionally map it onto specified range ival chanctrl ichnl ictlno ilow ihigh kval chanctrl ichnl ictlno ilow ihigh csound doc http www.csounds.com manual html chanctrl.html",
        "hierarchy": "Csound Typed Opcode RealtimeMIDI",
        "module": "Csound.Typed.Opcode.RealtimeMIDI",
        "name": "chanctrl",
        "normalized": "D-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-RealtimeMIDI.html#v:cpsmidi",
      "description": {
        "fct-descr": "\u003cp\u003eGet the note number of the current MIDI event, expressed in cycles-per-second.\n\u003c/p\u003e\u003cpre\u003e icps  cpsmidi &#160;\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/cpsmidi.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.RealtimeMIDI",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Msg -\u003e D",
        "fct-source": "src/Csound-Typed-Opcode-RealtimeMIDI.html#cpsmidi",
        "fct-type": "function",
        "title": "cpsmidi"
      },
      "index": {
        "description": "Get the note number of the current MIDI event expressed in cycles-per-second icps cpsmidi csound doc http www.csounds.com manual html cpsmidi.html",
        "hierarchy": "Csound Typed Opcode RealtimeMIDI",
        "module": "Csound.Typed.Opcode.RealtimeMIDI",
        "name": "cpsmidi",
        "normalized": "Msg-\u003eD",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Msg-\u003eD"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-RealtimeMIDI.html#v:cpsmidib",
      "description": {
        "fct-descr": "\u003cp\u003eGet the note number of the current MIDI event and modify it by the current pitch-bend value, express it in cycles-per-second.\n\u003c/p\u003e\u003cpre\u003e icps  cpsmidib  [irange]\n kcps  cpsmidib  [irange]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/cpsmidib.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.RealtimeMIDI",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Msg -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-RealtimeMIDI.html#cpsmidib",
        "fct-type": "function",
        "title": "cpsmidib"
      },
      "index": {
        "description": "Get the note number of the current MIDI event and modify it by the current pitch-bend value express it in cycles-per-second icps cpsmidib irange kcps cpsmidib irange csound doc http www.csounds.com manual html cpsmidib.html",
        "hierarchy": "Csound Typed Opcode RealtimeMIDI",
        "module": "Csound.Typed.Opcode.RealtimeMIDI",
        "name": "cpsmidib",
        "normalized": "Msg-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Msg-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-RealtimeMIDI.html#v:cpstmid",
      "description": {
        "fct-descr": "\u003cp\u003eGet a MIDI note number (allows customized micro-tuning scales).\n\u003c/p\u003e\u003cp\u003eThis unit is similar to cpsmidi, but allows fully customized micro-tuning scales.\n\u003c/p\u003e\u003cpre\u003e icps  cpstmid  ifn\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/cpstmid.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.RealtimeMIDI",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Msg -\u003e Tab -\u003e D",
        "fct-source": "src/Csound-Typed-Opcode-RealtimeMIDI.html#cpstmid",
        "fct-type": "function",
        "title": "cpstmid"
      },
      "index": {
        "description": "Get MIDI note number allows customized micro-tuning scales This unit is similar to cpsmidi but allows fully customized micro-tuning scales icps cpstmid ifn csound doc http www.csounds.com manual html cpstmid.html",
        "hierarchy": "Csound Typed Opcode RealtimeMIDI",
        "module": "Csound.Typed.Opcode.RealtimeMIDI",
        "name": "cpstmid",
        "normalized": "Msg-\u003eTab-\u003eD",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Msg-\u003eTab-\u003eD"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-RealtimeMIDI.html#v:ctrl14",
      "description": {
        "fct-descr": "\u003cp\u003eAllows a floating-point 14-bit MIDI signal scaled with a minimum and a maximum range.\n\u003c/p\u003e\u003cpre\u003e idest  ctrl14  ichan, ictlno1, ictlno2, imin, imax [, ifn]\n kdest  ctrl14  ichan, ictlno1, ictlno2, kmin, kmax [, ifn]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/ctrl14.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.RealtimeMIDI",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-RealtimeMIDI.html#ctrl14",
        "fct-type": "function",
        "title": "ctrl14"
      },
      "index": {
        "description": "Allows floating-point bit MIDI signal scaled with minimum and maximum range idest ctrl14 ichan ictlno1 ictlno2 imin imax ifn kdest ctrl14 ichan ictlno1 ictlno2 kmin kmax ifn csound doc http www.csounds.com manual html ctrl14.html",
        "hierarchy": "Csound Typed Opcode RealtimeMIDI",
        "module": "Csound.Typed.Opcode.RealtimeMIDI",
        "name": "ctrl14",
        "normalized": "D-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-RealtimeMIDI.html#v:ctrl21",
      "description": {
        "fct-descr": "\u003cp\u003eAllows a floating-point 21-bit MIDI signal scaled with a minimum and a maximum range.\n\u003c/p\u003e\u003cpre\u003e idest  ctrl21  ichan, ictlno1, ictlno2, ictlno3, imin, imax [, ifn]\n kdest  ctrl21  ichan, ictlno1, ictlno2, ictlno3, kmin, kmax [, ifn]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/ctrl21.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.RealtimeMIDI",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-RealtimeMIDI.html#ctrl21",
        "fct-type": "function",
        "title": "ctrl21"
      },
      "index": {
        "description": "Allows floating-point bit MIDI signal scaled with minimum and maximum range idest ctrl21 ichan ictlno1 ictlno2 ictlno3 imin imax ifn kdest ctrl21 ichan ictlno1 ictlno2 ictlno3 kmin kmax ifn csound doc http www.csounds.com manual html ctrl21.html",
        "hierarchy": "Csound Typed Opcode RealtimeMIDI",
        "module": "Csound.Typed.Opcode.RealtimeMIDI",
        "name": "ctrl21",
        "normalized": "D-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-RealtimeMIDI.html#v:ctrl7",
      "description": {
        "fct-descr": "\u003cp\u003eAllows a floating-point 7-bit MIDI signal scaled with a minimum and a maximum range.\n\u003c/p\u003e\u003cpre\u003e idest  ctrl7  ichan, ictlno, imin, imax [, ifn]\n kdest  ctrl7  ichan, ictlno, kmin, kmax [, ifn]\n adest  ctrl7  ichan, ictlno, kmin, kmax [, ifn] [, icutoff]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/ctrl7.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.RealtimeMIDI",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-RealtimeMIDI.html#ctrl7",
        "fct-type": "function",
        "title": "ctrl7"
      },
      "index": {
        "description": "Allows floating-point bit MIDI signal scaled with minimum and maximum range idest ctrl7 ichan ictlno imin imax ifn kdest ctrl7 ichan ictlno kmin kmax ifn adest ctrl7 ichan ictlno kmin kmax ifn icutoff csound doc http www.csounds.com manual html ctrl7.html",
        "hierarchy": "Csound Typed Opcode RealtimeMIDI",
        "module": "Csound.Typed.Opcode.RealtimeMIDI",
        "name": "ctrl7",
        "normalized": "D-\u003eD-\u003eD-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eD-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-RealtimeMIDI.html#v:ctrlinit",
      "description": {
        "fct-descr": "\u003cp\u003eSets the initial values for a set of MIDI controllers.\n\u003c/p\u003e\u003cpre\u003e  ctrlinit  ichnl, ictlno1, ival1 [, ictlno2] [, ival2] [, ictlno3] \\\n           [, ival3] [,...ival32]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/ctrlinit.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.RealtimeMIDI",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "[D] -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-RealtimeMIDI.html#ctrlinit",
        "fct-type": "function",
        "title": "ctrlinit"
      },
      "index": {
        "description": "Sets the initial values for set of MIDI controllers ctrlinit ichnl ictlno1 ival1 ictlno2 ival2 ictlno3 ival3 ival32 csound doc http www.csounds.com manual html ctrlinit.html",
        "hierarchy": "Csound Typed Opcode RealtimeMIDI",
        "module": "Csound.Typed.Opcode.RealtimeMIDI",
        "name": "ctrlinit",
        "normalized": "[D]-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "[D]-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-RealtimeMIDI.html#v:initc14",
      "description": {
        "fct-descr": "\u003cp\u003eInitializes the controllers used to create a 14-bit MIDI value.\n\u003c/p\u003e\u003cpre\u003e  initc14  ichan, ictlno1, ictlno2, ivalue\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/initc14.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.RealtimeMIDI",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-RealtimeMIDI.html#initc14",
        "fct-type": "function",
        "title": "initc14"
      },
      "index": {
        "description": "Initializes the controllers used to create bit MIDI value initc14 ichan ictlno1 ictlno2 ivalue csound doc http www.csounds.com manual html initc14.html",
        "hierarchy": "Csound Typed Opcode RealtimeMIDI",
        "module": "Csound.Typed.Opcode.RealtimeMIDI",
        "name": "initc14",
        "normalized": "D-\u003eD-\u003eD-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eD-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-RealtimeMIDI.html#v:initc21",
      "description": {
        "fct-descr": "\u003cp\u003eInitializes the controllers used to create a 21-bit MIDI value.\n\u003c/p\u003e\u003cpre\u003e  initc21  ichan, ictlno1, ictlno2, ictlno3, ivalue\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/initc21.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.RealtimeMIDI",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-RealtimeMIDI.html#initc21",
        "fct-type": "function",
        "title": "initc21"
      },
      "index": {
        "description": "Initializes the controllers used to create bit MIDI value initc21 ichan ictlno1 ictlno2 ictlno3 ivalue csound doc http www.csounds.com manual html initc21.html",
        "hierarchy": "Csound Typed Opcode RealtimeMIDI",
        "module": "Csound.Typed.Opcode.RealtimeMIDI",
        "name": "initc21",
        "normalized": "D-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-RealtimeMIDI.html#v:initc7",
      "description": {
        "fct-descr": "\u003cp\u003eInitializes the controller used to create a 7-bit MIDI value.\n\u003c/p\u003e\u003cp\u003eInitializes MIDI controller ictlno with ivalue\n\u003c/p\u003e\u003cpre\u003e  initc7  ichan, ictlno, ivalue\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/initc7.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.RealtimeMIDI",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-RealtimeMIDI.html#initc7",
        "fct-type": "function",
        "title": "initc7"
      },
      "index": {
        "description": "Initializes the controller used to create bit MIDI value Initializes MIDI controller ictlno with ivalue initc7 ichan ictlno ivalue csound doc http www.csounds.com manual html initc7.html",
        "hierarchy": "Csound Typed Opcode RealtimeMIDI",
        "module": "Csound.Typed.Opcode.RealtimeMIDI",
        "name": "initc7",
        "normalized": "D-\u003eD-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-RealtimeMIDI.html#v:massign",
      "description": {
        "fct-descr": "\u003cp\u003eAssigns a MIDI channel number to a Csound instrument.\n\u003c/p\u003e\u003cpre\u003e  massign  ichnl, insnum[, ireset]\n  massign  ichnl, \"insname\"[, ireset]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/massign.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.RealtimeMIDI",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-RealtimeMIDI.html#massign",
        "fct-type": "function",
        "title": "massign"
      },
      "index": {
        "description": "Assigns MIDI channel number to Csound instrument massign ichnl insnum ireset massign ichnl insname ireset csound doc http www.csounds.com manual html massign.html",
        "hierarchy": "Csound Typed Opcode RealtimeMIDI",
        "module": "Csound.Typed.Opcode.RealtimeMIDI",
        "name": "massign",
        "normalized": "D-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-RealtimeMIDI.html#v:mclock",
      "description": {
        "fct-descr": "\u003cp\u003eSends a MIDI CLOCK message.\n\u003c/p\u003e\u003cpre\u003e  mclock  ifreq\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/mclock.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.RealtimeMIDI",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-RealtimeMIDI.html#mclock",
        "fct-type": "function",
        "title": "mclock"
      },
      "index": {
        "description": "Sends MIDI CLOCK message mclock ifreq csound doc http www.csounds.com manual html mclock.html",
        "hierarchy": "Csound Typed Opcode RealtimeMIDI",
        "module": "Csound.Typed.Opcode.RealtimeMIDI",
        "name": "mclock",
        "normalized": "D-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-RealtimeMIDI.html#v:midic14",
      "description": {
        "fct-descr": "\u003cp\u003eAllows a floating-point 14-bit MIDI signal scaled with a minimum and a maximum range.\n\u003c/p\u003e\u003cpre\u003e idest  midic14  ictlno1, ictlno2, imin, imax [, ifn]\n kdest  midic14  ictlno1, ictlno2, kmin, kmax [, ifn]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/midic14.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.RealtimeMIDI",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-RealtimeMIDI.html#midic14",
        "fct-type": "function",
        "title": "midic14"
      },
      "index": {
        "description": "Allows floating-point bit MIDI signal scaled with minimum and maximum range idest midic14 ictlno1 ictlno2 imin imax ifn kdest midic14 ictlno1 ictlno2 kmin kmax ifn csound doc http www.csounds.com manual html midic14.html",
        "hierarchy": "Csound Typed Opcode RealtimeMIDI",
        "module": "Csound.Typed.Opcode.RealtimeMIDI",
        "name": "midic14",
        "normalized": "D-\u003eD-\u003eD-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eD-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-RealtimeMIDI.html#v:midic21",
      "description": {
        "fct-descr": "\u003cp\u003eAllows a floating-point 21-bit MIDI signal scaled with a minimum and a maximum range.\n\u003c/p\u003e\u003cpre\u003e idest  midic21  ictlno1, ictlno2, ictlno3, imin, imax [, ifn]\n kdest  midic21  ictlno1, ictlno2, ictlno3, kmin, kmax [, ifn]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/midic21.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.RealtimeMIDI",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-RealtimeMIDI.html#midic21",
        "fct-type": "function",
        "title": "midic21"
      },
      "index": {
        "description": "Allows floating-point bit MIDI signal scaled with minimum and maximum range idest midic21 ictlno1 ictlno2 ictlno3 imin imax ifn kdest midic21 ictlno1 ictlno2 ictlno3 kmin kmax ifn csound doc http www.csounds.com manual html midic21.html",
        "hierarchy": "Csound Typed Opcode RealtimeMIDI",
        "module": "Csound.Typed.Opcode.RealtimeMIDI",
        "name": "midic21",
        "normalized": "D-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-RealtimeMIDI.html#v:midic7",
      "description": {
        "fct-descr": "\u003cp\u003eAllows a floating-point 7-bit MIDI signal scaled with a minimum and a maximum range.\n\u003c/p\u003e\u003cpre\u003e idest  midic7  ictlno, imin, imax [, ifn]\n kdest  midic7  ictlno, kmin, kmax [, ifn]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/midic7.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.RealtimeMIDI",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-RealtimeMIDI.html#midic7",
        "fct-type": "function",
        "title": "midic7"
      },
      "index": {
        "description": "Allows floating-point bit MIDI signal scaled with minimum and maximum range idest midic7 ictlno imin imax ifn kdest midic7 ictlno kmin kmax ifn csound doc http www.csounds.com manual html midic7.html",
        "hierarchy": "Csound Typed Opcode RealtimeMIDI",
        "module": "Csound.Typed.Opcode.RealtimeMIDI",
        "name": "midic7",
        "normalized": "D-\u003eD-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-RealtimeMIDI.html#v:midichannelaftertouch",
      "description": {
        "fct-descr": "\u003cp\u003eGets a MIDI channel's aftertouch value.\n\u003c/p\u003e\u003cp\u003emidichannelaftertouch is designed to simplify writing instruments that can be used interchangeably for either score or MIDI input, and to make it easier to adapt instruments originally written for score input to work with MIDI input.\n\u003c/p\u003e\u003cpre\u003e  midichannelaftertouch  xchannelaftertouch [, ilow] [, ihigh]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/midichannelaftertouch.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.RealtimeMIDI",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-RealtimeMIDI.html#midichannelaftertouch",
        "fct-type": "function",
        "title": "midichannelaftertouch"
      },
      "index": {
        "description": "Gets MIDI channel aftertouch value midichannelaftertouch is designed to simplify writing instruments that can be used interchangeably for either score or MIDI input and to make it easier to adapt instruments originally written for score input to work with MIDI input midichannelaftertouch xchannelaftertouch ilow ihigh csound doc http www.csounds.com manual html midichannelaftertouch.html",
        "hierarchy": "Csound Typed Opcode RealtimeMIDI",
        "module": "Csound.Typed.Opcode.RealtimeMIDI",
        "name": "midichannelaftertouch",
        "normalized": "Sig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-RealtimeMIDI.html#v:midichn",
      "description": {
        "fct-descr": "\u003cp\u003eReturns the MIDI channel number from which the note was activated.\n\u003c/p\u003e\u003cp\u003emidichn returns the MIDI channel number (1 - 16) from which the note was activated. In the case of score notes, it returns 0.\n\u003c/p\u003e\u003cpre\u003e ichn  midichn &#160;\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/midichn.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.RealtimeMIDI",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D",
        "fct-source": "src/Csound-Typed-Opcode-RealtimeMIDI.html#midichn",
        "fct-type": "function",
        "title": "midichn"
      },
      "index": {
        "description": "Returns the MIDI channel number from which the note was activated midichn returns the MIDI channel number from which the note was activated In the case of score notes it returns ichn midichn csound doc http www.csounds.com manual html midichn.html",
        "hierarchy": "Csound Typed Opcode RealtimeMIDI",
        "module": "Csound.Typed.Opcode.RealtimeMIDI",
        "name": "midichn",
        "normalized": "",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-RealtimeMIDI.html#v:midicontrolchange",
      "description": {
        "fct-descr": "\u003cp\u003eGets a MIDI control change value.\n\u003c/p\u003e\u003cp\u003emidicontrolchange is designed to simplify writing instruments that can be used interchangeably for either score or MIDI input, and to make it easier to adapt instruments originally written for score input to work with MIDI input.\n\u003c/p\u003e\u003cpre\u003e  midicontrolchange  xcontroller, xcontrollervalue [, ilow] [, ihigh]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/midicontrolchange.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.RealtimeMIDI",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-RealtimeMIDI.html#midicontrolchange",
        "fct-type": "function",
        "title": "midicontrolchange"
      },
      "index": {
        "description": "Gets MIDI control change value midicontrolchange is designed to simplify writing instruments that can be used interchangeably for either score or MIDI input and to make it easier to adapt instruments originally written for score input to work with MIDI input midicontrolchange xcontroller xcontrollervalue ilow ihigh csound doc http www.csounds.com manual html midicontrolchange.html",
        "hierarchy": "Csound Typed Opcode RealtimeMIDI",
        "module": "Csound.Typed.Opcode.RealtimeMIDI",
        "name": "midicontrolchange",
        "normalized": "Sig-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-RealtimeMIDI.html#v:midictrl",
      "description": {
        "fct-descr": "\u003cp\u003eGet the current value (0-127) of a specified MIDI controller.\n\u003c/p\u003e\u003cpre\u003e ival  midictrl  inum [, imin] [, imax]\n kval  midictrl  inum [, imin] [, imax]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/midictrl.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.RealtimeMIDI",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-RealtimeMIDI.html#midictrl",
        "fct-type": "function",
        "title": "midictrl"
      },
      "index": {
        "description": "Get the current value of specified MIDI controller ival midictrl inum imin imax kval midictrl inum imin imax csound doc http www.csounds.com manual html midictrl.html",
        "hierarchy": "Csound Typed Opcode RealtimeMIDI",
        "module": "Csound.Typed.Opcode.RealtimeMIDI",
        "name": "midictrl",
        "normalized": "D-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-RealtimeMIDI.html#v:mididefault",
      "description": {
        "fct-descr": "\u003cp\u003eChanges values, depending on MIDI activation.\n\u003c/p\u003e\u003cp\u003emididefault is designed to simplify writing instruments that can be used interchangeably for either score or MIDI input, and to make it easier to adapt instruments originally written for score input to work with MIDI input.\n\u003c/p\u003e\u003cpre\u003e  mididefault  xdefault, xvalue\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/mididefault.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.RealtimeMIDI",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-RealtimeMIDI.html#mididefault",
        "fct-type": "function",
        "title": "mididefault"
      },
      "index": {
        "description": "Changes values depending on MIDI activation mididefault is designed to simplify writing instruments that can be used interchangeably for either score or MIDI input and to make it easier to adapt instruments originally written for score input to work with MIDI input mididefault xdefault xvalue csound doc http www.csounds.com manual html mididefault.html",
        "hierarchy": "Csound Typed Opcode RealtimeMIDI",
        "module": "Csound.Typed.Opcode.RealtimeMIDI",
        "name": "mididefault",
        "normalized": "Sig-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-RealtimeMIDI.html#v:midiin",
      "description": {
        "fct-descr": "\u003cp\u003eReturns a generic MIDI message received by the MIDI IN port.\n\u003c/p\u003e\u003cp\u003eReturns a generic MIDI message received by the MIDI IN port\n\u003c/p\u003e\u003cpre\u003e kstatus, kchan, kdata1, kdata2  midiin &#160;\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/midiin.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.RealtimeMIDI",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "a",
        "fct-source": "src/Csound-Typed-Opcode-RealtimeMIDI.html#midiin",
        "fct-type": "function",
        "title": "midiin"
      },
      "index": {
        "description": "Returns generic MIDI message received by the MIDI IN port Returns generic MIDI message received by the MIDI IN port kstatus kchan kdata1 kdata2 midiin csound doc http www.csounds.com manual html midiin.html",
        "hierarchy": "Csound Typed Opcode RealtimeMIDI",
        "module": "Csound.Typed.Opcode.RealtimeMIDI",
        "name": "midiin",
        "normalized": "",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-RealtimeMIDI.html#v:midinoteoff",
      "description": {
        "fct-descr": "\u003cp\u003eGets a MIDI noteoff value.\n\u003c/p\u003e\u003cp\u003emidinoteoff is designed to simplify writing instruments that can be used interchangeably for either score or MIDI input, and to make it easier to adapt instruments originally written for score input to work with MIDI input.\n\u003c/p\u003e\u003cpre\u003e  midinoteoff  xkey, xvelocity\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/midinoteoff.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.RealtimeMIDI",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-RealtimeMIDI.html#midinoteoff",
        "fct-type": "function",
        "title": "midinoteoff"
      },
      "index": {
        "description": "Gets MIDI noteoff value midinoteoff is designed to simplify writing instruments that can be used interchangeably for either score or MIDI input and to make it easier to adapt instruments originally written for score input to work with MIDI input midinoteoff xkey xvelocity csound doc http www.csounds.com manual html midinoteoff.html",
        "hierarchy": "Csound Typed Opcode RealtimeMIDI",
        "module": "Csound.Typed.Opcode.RealtimeMIDI",
        "name": "midinoteoff",
        "normalized": "Sig-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-RealtimeMIDI.html#v:midinoteoncps",
      "description": {
        "fct-descr": "\u003cp\u003eGets a MIDI note number as a cycles-per-second frequency.\n\u003c/p\u003e\u003cp\u003emidinoteoncps is designed to simplify writing instruments that can be used interchangeably for either score or MIDI input, and to make it easier to adapt instruments originally written for score input to work with MIDI input.\n\u003c/p\u003e\u003cpre\u003e  midinoteoncps  xcps, xvelocity\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/midinoteoncps.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.RealtimeMIDI",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-RealtimeMIDI.html#midinoteoncps",
        "fct-type": "function",
        "title": "midinoteoncps"
      },
      "index": {
        "description": "Gets MIDI note number as cycles-per-second frequency midinoteoncps is designed to simplify writing instruments that can be used interchangeably for either score or MIDI input and to make it easier to adapt instruments originally written for score input to work with MIDI input midinoteoncps xcps xvelocity csound doc http www.csounds.com manual html midinoteoncps.html",
        "hierarchy": "Csound Typed Opcode RealtimeMIDI",
        "module": "Csound.Typed.Opcode.RealtimeMIDI",
        "name": "midinoteoncps",
        "normalized": "Sig-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-RealtimeMIDI.html#v:midinoteonkey",
      "description": {
        "fct-descr": "\u003cp\u003eGets a MIDI note number value.\n\u003c/p\u003e\u003cp\u003emidinoteonkey is designed to simplify writing instruments that can be used interchangeably for either score or MIDI input, and to make it easier to adapt instruments originally written for score input to work with MIDI input.\n\u003c/p\u003e\u003cpre\u003e  midinoteonkey  xkey, xvelocity\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/midinoteonkey.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.RealtimeMIDI",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-RealtimeMIDI.html#midinoteonkey",
        "fct-type": "function",
        "title": "midinoteonkey"
      },
      "index": {
        "description": "Gets MIDI note number value midinoteonkey is designed to simplify writing instruments that can be used interchangeably for either score or MIDI input and to make it easier to adapt instruments originally written for score input to work with MIDI input midinoteonkey xkey xvelocity csound doc http www.csounds.com manual html midinoteonkey.html",
        "hierarchy": "Csound Typed Opcode RealtimeMIDI",
        "module": "Csound.Typed.Opcode.RealtimeMIDI",
        "name": "midinoteonkey",
        "normalized": "Sig-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-RealtimeMIDI.html#v:midinoteonoct",
      "description": {
        "fct-descr": "\u003cp\u003eGets a MIDI note number value as octave-point-decimal value.\n\u003c/p\u003e\u003cp\u003emidinoteonoct is designed to simplify writing instruments that can be used interchangeably for either score or MIDI input, and to make it easier to adapt instruments originally written for score input to work with MIDI input.\n\u003c/p\u003e\u003cpre\u003e  midinoteonoct  xoct, xvelocity\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/midinoteonoct.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.RealtimeMIDI",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-RealtimeMIDI.html#midinoteonoct",
        "fct-type": "function",
        "title": "midinoteonoct"
      },
      "index": {
        "description": "Gets MIDI note number value as octave-point-decimal value midinoteonoct is designed to simplify writing instruments that can be used interchangeably for either score or MIDI input and to make it easier to adapt instruments originally written for score input to work with MIDI input midinoteonoct xoct xvelocity csound doc http www.csounds.com manual html midinoteonoct.html",
        "hierarchy": "Csound Typed Opcode RealtimeMIDI",
        "module": "Csound.Typed.Opcode.RealtimeMIDI",
        "name": "midinoteonoct",
        "normalized": "Sig-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-RealtimeMIDI.html#v:midinoteonpch",
      "description": {
        "fct-descr": "\u003cp\u003eGets a MIDI note number as a pitch-class value.\n\u003c/p\u003e\u003cp\u003emidinoteonpch is designed to simplify writing instruments that can be used interchangeably for either score or MIDI input, and to make it easier to adapt instruments originally written for score input to work with MIDI input.\n\u003c/p\u003e\u003cpre\u003e  midinoteonpch  xpch, xvelocity\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/midinoteonpch.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.RealtimeMIDI",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-RealtimeMIDI.html#midinoteonpch",
        "fct-type": "function",
        "title": "midinoteonpch"
      },
      "index": {
        "description": "Gets MIDI note number as pitch-class value midinoteonpch is designed to simplify writing instruments that can be used interchangeably for either score or MIDI input and to make it easier to adapt instruments originally written for score input to work with MIDI input midinoteonpch xpch xvelocity csound doc http www.csounds.com manual html midinoteonpch.html",
        "hierarchy": "Csound Typed Opcode RealtimeMIDI",
        "module": "Csound.Typed.Opcode.RealtimeMIDI",
        "name": "midinoteonpch",
        "normalized": "Sig-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-RealtimeMIDI.html#v:midion",
      "description": {
        "fct-descr": "\u003cp\u003eGenerates MIDI note messages at k-rate.\n\u003c/p\u003e\u003cpre\u003e  midion  kchn, knum, kvel\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/midion.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.RealtimeMIDI",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-RealtimeMIDI.html#midion",
        "fct-type": "function",
        "title": "midion"
      },
      "index": {
        "description": "Generates MIDI note messages at k-rate midion kchn knum kvel csound doc http www.csounds.com manual html midion.html",
        "hierarchy": "Csound Typed Opcode RealtimeMIDI",
        "module": "Csound.Typed.Opcode.RealtimeMIDI",
        "name": "midion",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-RealtimeMIDI.html#v:midion2",
      "description": {
        "fct-descr": "\u003cp\u003eSends noteon and noteoff messages to the MIDI OUT port.\n\u003c/p\u003e\u003cp\u003eSends noteon and noteoff messages to the MIDI OUT port when triggered by a value different than zero.\n\u003c/p\u003e\u003cpre\u003e  midion2  kchn, knum, kvel, ktrig\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/midion2.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.RealtimeMIDI",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-RealtimeMIDI.html#midion2",
        "fct-type": "function",
        "title": "midion2"
      },
      "index": {
        "description": "Sends noteon and noteoff messages to the MIDI OUT port Sends noteon and noteoff messages to the MIDI OUT port when triggered by value different than zero midion2 kchn knum kvel ktrig csound doc http www.csounds.com manual html midion2.html",
        "hierarchy": "Csound Typed Opcode RealtimeMIDI",
        "module": "Csound.Typed.Opcode.RealtimeMIDI",
        "name": "midion2",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-RealtimeMIDI.html#v:midiout",
      "description": {
        "fct-descr": "\u003cp\u003eSends a generic MIDI message to the MIDI OUT port.\n\u003c/p\u003e\u003cpre\u003e  midiout  kstatus, kchan, kdata1, kdata2\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/midiout.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.RealtimeMIDI",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-RealtimeMIDI.html#midiout",
        "fct-type": "function",
        "title": "midiout"
      },
      "index": {
        "description": "Sends generic MIDI message to the MIDI OUT port midiout kstatus kchan kdata1 kdata2 csound doc http www.csounds.com manual html midiout.html",
        "hierarchy": "Csound Typed Opcode RealtimeMIDI",
        "module": "Csound.Typed.Opcode.RealtimeMIDI",
        "name": "midiout",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-RealtimeMIDI.html#v:midipitchbend",
      "description": {
        "fct-descr": "\u003cp\u003eGets a MIDI pitchbend value.\n\u003c/p\u003e\u003cp\u003emidipitchbend is designed to simplify writing instruments that can be used interchangeably for either score or MIDI input, and to make it easier to adapt instruments originally written for score input to work with MIDI input.\n\u003c/p\u003e\u003cpre\u003e  midipitchbend  xpitchbend [, ilow] [, ihigh]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/midipitchbend.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.RealtimeMIDI",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-RealtimeMIDI.html#midipitchbend",
        "fct-type": "function",
        "title": "midipitchbend"
      },
      "index": {
        "description": "Gets MIDI pitchbend value midipitchbend is designed to simplify writing instruments that can be used interchangeably for either score or MIDI input and to make it easier to adapt instruments originally written for score input to work with MIDI input midipitchbend xpitchbend ilow ihigh csound doc http www.csounds.com manual html midipitchbend.html",
        "hierarchy": "Csound Typed Opcode RealtimeMIDI",
        "module": "Csound.Typed.Opcode.RealtimeMIDI",
        "name": "midipitchbend",
        "normalized": "Sig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-RealtimeMIDI.html#v:midipolyaftertouch",
      "description": {
        "fct-descr": "\u003cp\u003eGets a MIDI polyphonic aftertouch value.\n\u003c/p\u003e\u003cp\u003emidipolyaftertouch is designed to simplify writing instruments that can be used interchangeably for either score or MIDI input, and to make it easier to adapt instruments originally written for score input to work with MIDI input.\n\u003c/p\u003e\u003cpre\u003e  midipolyaftertouch  xpolyaftertouch, xcontrollervalue [, ilow] [, ihigh]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/midipolyaftertouch.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.RealtimeMIDI",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-RealtimeMIDI.html#midipolyaftertouch",
        "fct-type": "function",
        "title": "midipolyaftertouch"
      },
      "index": {
        "description": "Gets MIDI polyphonic aftertouch value midipolyaftertouch is designed to simplify writing instruments that can be used interchangeably for either score or MIDI input and to make it easier to adapt instruments originally written for score input to work with MIDI input midipolyaftertouch xpolyaftertouch xcontrollervalue ilow ihigh csound doc http www.csounds.com manual html midipolyaftertouch.html",
        "hierarchy": "Csound Typed Opcode RealtimeMIDI",
        "module": "Csound.Typed.Opcode.RealtimeMIDI",
        "name": "midipolyaftertouch",
        "normalized": "Sig-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-RealtimeMIDI.html#v:midiprogramchange",
      "description": {
        "fct-descr": "\u003cp\u003eGets a MIDI program change value.\n\u003c/p\u003e\u003cp\u003emidiprogramchange is designed to simplify writing instruments that can be used interchangeably for either score or MIDI input, and to make it easier to adapt instruments originally written for score input to work with MIDI input.\n\u003c/p\u003e\u003cpre\u003e  midiprogramchange  xprogram\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/midiprogramchange.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.RealtimeMIDI",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-RealtimeMIDI.html#midiprogramchange",
        "fct-type": "function",
        "title": "midiprogramchange"
      },
      "index": {
        "description": "Gets MIDI program change value midiprogramchange is designed to simplify writing instruments that can be used interchangeably for either score or MIDI input and to make it easier to adapt instruments originally written for score input to work with MIDI input midiprogramchange xprogram csound doc http www.csounds.com manual html midiprogramchange.html",
        "hierarchy": "Csound Typed Opcode RealtimeMIDI",
        "module": "Csound.Typed.Opcode.RealtimeMIDI",
        "name": "midiprogramchange",
        "normalized": "Sig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-RealtimeMIDI.html#v:moscil",
      "description": {
        "fct-descr": "\u003cp\u003eSends a stream of the MIDI notes.\n\u003c/p\u003e\u003cpre\u003e  moscil  kchn, knum, kvel, kdur, kpause\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/moscil.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.RealtimeMIDI",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-RealtimeMIDI.html#moscil",
        "fct-type": "function",
        "title": "moscil"
      },
      "index": {
        "description": "Sends stream of the MIDI notes moscil kchn knum kvel kdur kpause csound doc http www.csounds.com manual html moscil.html",
        "hierarchy": "Csound Typed Opcode RealtimeMIDI",
        "module": "Csound.Typed.Opcode.RealtimeMIDI",
        "name": "moscil",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-RealtimeMIDI.html#v:mrtmsg",
      "description": {
        "fct-descr": "\u003cp\u003eSend system real-time messages to the MIDI OUT port.\n\u003c/p\u003e\u003cpre\u003e  mrtmsg  imsgtype\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/mrtmsg.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.RealtimeMIDI",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-RealtimeMIDI.html#mrtmsg",
        "fct-type": "function",
        "title": "mrtmsg"
      },
      "index": {
        "description": "Send system real-time messages to the MIDI OUT port mrtmsg imsgtype csound doc http www.csounds.com manual html mrtmsg.html",
        "hierarchy": "Csound Typed Opcode RealtimeMIDI",
        "module": "Csound.Typed.Opcode.RealtimeMIDI",
        "name": "mrtmsg",
        "normalized": "D-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-RealtimeMIDI.html#v:noteoff",
      "description": {
        "fct-descr": "\u003cp\u003eSend a noteoff message to the MIDI OUT port.\n\u003c/p\u003e\u003cpre\u003e  noteoff  ichn, inum, ivel\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/noteoff.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.RealtimeMIDI",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-RealtimeMIDI.html#noteoff",
        "fct-type": "function",
        "title": "noteoff"
      },
      "index": {
        "description": "Send noteoff message to the MIDI OUT port noteoff ichn inum ivel csound doc http www.csounds.com manual html noteoff.html",
        "hierarchy": "Csound Typed Opcode RealtimeMIDI",
        "module": "Csound.Typed.Opcode.RealtimeMIDI",
        "name": "noteoff",
        "normalized": "D-\u003eD-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-RealtimeMIDI.html#v:noteon",
      "description": {
        "fct-descr": "\u003cp\u003eSend a noteon message to the MIDI OUT port.\n\u003c/p\u003e\u003cpre\u003e  noteon  ichn, inum, ivel\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/noteon.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.RealtimeMIDI",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-RealtimeMIDI.html#noteon",
        "fct-type": "function",
        "title": "noteon"
      },
      "index": {
        "description": "Send noteon message to the MIDI OUT port noteon ichn inum ivel csound doc http www.csounds.com manual html noteon.html",
        "hierarchy": "Csound Typed Opcode RealtimeMIDI",
        "module": "Csound.Typed.Opcode.RealtimeMIDI",
        "name": "noteon",
        "normalized": "D-\u003eD-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-RealtimeMIDI.html#v:noteondur",
      "description": {
        "fct-descr": "\u003cp\u003eSends a noteon and a noteoff MIDI message both with the same channel, number and velocity.\n\u003c/p\u003e\u003cpre\u003e  noteondur  ichn, inum, ivel, idur\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/noteondur.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.RealtimeMIDI",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-RealtimeMIDI.html#noteondur",
        "fct-type": "function",
        "title": "noteondur"
      },
      "index": {
        "description": "Sends noteon and noteoff MIDI message both with the same channel number and velocity noteondur ichn inum ivel idur csound doc http www.csounds.com manual html noteondur.html",
        "hierarchy": "Csound Typed Opcode RealtimeMIDI",
        "module": "Csound.Typed.Opcode.RealtimeMIDI",
        "name": "noteondur",
        "normalized": "D-\u003eD-\u003eD-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eD-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-RealtimeMIDI.html#v:noteondur2",
      "description": {
        "fct-descr": "\u003cp\u003eSends a noteon and a noteoff MIDI message both with the same channel, number and velocity.\n\u003c/p\u003e\u003cpre\u003e  noteondur2  ichn, inum, ivel, idur\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/noteondur2.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.RealtimeMIDI",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-RealtimeMIDI.html#noteondur2",
        "fct-type": "function",
        "title": "noteondur2"
      },
      "index": {
        "description": "Sends noteon and noteoff MIDI message both with the same channel number and velocity noteondur2 ichn inum ivel idur csound doc http www.csounds.com manual html noteondur2.html",
        "hierarchy": "Csound Typed Opcode RealtimeMIDI",
        "module": "Csound.Typed.Opcode.RealtimeMIDI",
        "name": "noteondur2",
        "normalized": "D-\u003eD-\u003eD-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eD-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-RealtimeMIDI.html#v:notnum",
      "description": {
        "fct-descr": "\u003cp\u003eGet a note number from a MIDI event.\n\u003c/p\u003e\u003cpre\u003e ival  notnum &#160;\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/notnum.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.RealtimeMIDI",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Msg -\u003e D",
        "fct-source": "src/Csound-Typed-Opcode-RealtimeMIDI.html#notnum",
        "fct-type": "function",
        "title": "notnum"
      },
      "index": {
        "description": "Get note number from MIDI event ival notnum csound doc http www.csounds.com manual html notnum.html",
        "hierarchy": "Csound Typed Opcode RealtimeMIDI",
        "module": "Csound.Typed.Opcode.RealtimeMIDI",
        "name": "notnum",
        "normalized": "Msg-\u003eD",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Msg-\u003eD"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-RealtimeMIDI.html#v:nrpn",
      "description": {
        "fct-descr": "\u003cp\u003eSends a Non-Registered Parameter Number to the MIDI OUT port.\n\u003c/p\u003e\u003cp\u003eSends a NPRN (Non-Registered Parameter Number) message to the MIDI OUT port each time one of the input arguments changes.\n\u003c/p\u003e\u003cpre\u003e  nrpn  kchan, kparmnum, kparmvalue\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/nrpn.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.RealtimeMIDI",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-RealtimeMIDI.html#nrpn",
        "fct-type": "function",
        "title": "nrpn"
      },
      "index": {
        "description": "Sends Non-Registered Parameter Number to the MIDI OUT port Sends NPRN Non-Registered Parameter Number message to the MIDI OUT port each time one of the input arguments changes nrpn kchan kparmnum kparmvalue csound doc http www.csounds.com manual html nrpn.html",
        "hierarchy": "Csound Typed Opcode RealtimeMIDI",
        "module": "Csound.Typed.Opcode.RealtimeMIDI",
        "name": "nrpn",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-RealtimeMIDI.html#v:octmidi",
      "description": {
        "fct-descr": "\u003cp\u003eGet the note number, in octave-point-decimal units, of the current MIDI event.\n\u003c/p\u003e\u003cpre\u003e ioct  octmidi &#160;\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/octmidi.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.RealtimeMIDI",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Msg -\u003e D",
        "fct-source": "src/Csound-Typed-Opcode-RealtimeMIDI.html#octmidi",
        "fct-type": "function",
        "title": "octmidi"
      },
      "index": {
        "description": "Get the note number in octave-point-decimal units of the current MIDI event ioct octmidi csound doc http www.csounds.com manual html octmidi.html",
        "hierarchy": "Csound Typed Opcode RealtimeMIDI",
        "module": "Csound.Typed.Opcode.RealtimeMIDI",
        "name": "octmidi",
        "normalized": "Msg-\u003eD",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Msg-\u003eD"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-RealtimeMIDI.html#v:octmidib",
      "description": {
        "fct-descr": "\u003cp\u003eGet the note number of the current MIDI event and modify it by the current pitch-bend value, express it in octave-point-decimal.\n\u003c/p\u003e\u003cpre\u003e ioct  octmidib  [irange]\n koct  octmidib  [irange]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/octmidib.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.RealtimeMIDI",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Msg -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-RealtimeMIDI.html#octmidib",
        "fct-type": "function",
        "title": "octmidib"
      },
      "index": {
        "description": "Get the note number of the current MIDI event and modify it by the current pitch-bend value express it in octave-point-decimal ioct octmidib irange koct octmidib irange csound doc http www.csounds.com manual html octmidib.html",
        "hierarchy": "Csound Typed Opcode RealtimeMIDI",
        "module": "Csound.Typed.Opcode.RealtimeMIDI",
        "name": "octmidib",
        "normalized": "Msg-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Msg-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-RealtimeMIDI.html#v:outiat",
      "description": {
        "fct-descr": "\u003cp\u003eSends MIDI aftertouch messages at i-rate.\n\u003c/p\u003e\u003cpre\u003e  outiat  ichn, ivalue, imin, imax\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/outiat.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.RealtimeMIDI",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-RealtimeMIDI.html#outiat",
        "fct-type": "function",
        "title": "outiat"
      },
      "index": {
        "description": "Sends MIDI aftertouch messages at i-rate outiat ichn ivalue imin imax csound doc http www.csounds.com manual html outiat.html",
        "hierarchy": "Csound Typed Opcode RealtimeMIDI",
        "module": "Csound.Typed.Opcode.RealtimeMIDI",
        "name": "outiat",
        "normalized": "D-\u003eD-\u003eD-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eD-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-RealtimeMIDI.html#v:outic",
      "description": {
        "fct-descr": "\u003cp\u003eSends MIDI controller output at i-rate.\n\u003c/p\u003e\u003cpre\u003e  outic  ichn, inum, ivalue, imin, imax\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/outic.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.RealtimeMIDI",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-RealtimeMIDI.html#outic",
        "fct-type": "function",
        "title": "outic"
      },
      "index": {
        "description": "Sends MIDI controller output at i-rate outic ichn inum ivalue imin imax csound doc http www.csounds.com manual html outic.html",
        "hierarchy": "Csound Typed Opcode RealtimeMIDI",
        "module": "Csound.Typed.Opcode.RealtimeMIDI",
        "name": "outic",
        "normalized": "D-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-RealtimeMIDI.html#v:outic14",
      "description": {
        "fct-descr": "\u003cp\u003eSends 14-bit MIDI controller output at i-rate.\n\u003c/p\u003e\u003cpre\u003e  outic14  ichn, imsb, ilsb, ivalue, imin, imax\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/outic14.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.RealtimeMIDI",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-RealtimeMIDI.html#outic14",
        "fct-type": "function",
        "title": "outic14"
      },
      "index": {
        "description": "Sends bit MIDI controller output at i-rate outic14 ichn imsb ilsb ivalue imin imax csound doc http www.csounds.com manual html outic14.html",
        "hierarchy": "Csound Typed Opcode RealtimeMIDI",
        "module": "Csound.Typed.Opcode.RealtimeMIDI",
        "name": "outic14",
        "normalized": "D-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-RealtimeMIDI.html#v:outipat",
      "description": {
        "fct-descr": "\u003cp\u003eSends polyphonic MIDI aftertouch messages at i-rate.\n\u003c/p\u003e\u003cpre\u003e  outipat  ichn, inotenum, ivalue, imin, imax\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/outipat.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.RealtimeMIDI",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-RealtimeMIDI.html#outipat",
        "fct-type": "function",
        "title": "outipat"
      },
      "index": {
        "description": "Sends polyphonic MIDI aftertouch messages at i-rate outipat ichn inotenum ivalue imin imax csound doc http www.csounds.com manual html outipat.html",
        "hierarchy": "Csound Typed Opcode RealtimeMIDI",
        "module": "Csound.Typed.Opcode.RealtimeMIDI",
        "name": "outipat",
        "normalized": "D-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-RealtimeMIDI.html#v:outipb",
      "description": {
        "fct-descr": "\u003cp\u003eSends MIDI pitch-bend messages at i-rate.\n\u003c/p\u003e\u003cpre\u003e  outipb  ichn, ivalue, imin, imax\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/outipb.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.RealtimeMIDI",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-RealtimeMIDI.html#outipb",
        "fct-type": "function",
        "title": "outipb"
      },
      "index": {
        "description": "Sends MIDI pitch-bend messages at i-rate outipb ichn ivalue imin imax csound doc http www.csounds.com manual html outipb.html",
        "hierarchy": "Csound Typed Opcode RealtimeMIDI",
        "module": "Csound.Typed.Opcode.RealtimeMIDI",
        "name": "outipb",
        "normalized": "D-\u003eD-\u003eD-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eD-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-RealtimeMIDI.html#v:outipc",
      "description": {
        "fct-descr": "\u003cp\u003eSends MIDI program change messages at i-rate\n\u003c/p\u003e\u003cpre\u003e  outipc  ichn, iprog, imin, imax\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/outipc.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.RealtimeMIDI",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-RealtimeMIDI.html#outipc",
        "fct-type": "function",
        "title": "outipc"
      },
      "index": {
        "description": "Sends MIDI program change messages at i-rate outipc ichn iprog imin imax csound doc http www.csounds.com manual html outipc.html",
        "hierarchy": "Csound Typed Opcode RealtimeMIDI",
        "module": "Csound.Typed.Opcode.RealtimeMIDI",
        "name": "outipc",
        "normalized": "D-\u003eD-\u003eD-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eD-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-RealtimeMIDI.html#v:outkat",
      "description": {
        "fct-descr": "\u003cp\u003eSends MIDI aftertouch messages at k-rate.\n\u003c/p\u003e\u003cpre\u003e  outkat  kchn, kvalue, kmin, kmax\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/outkat.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.RealtimeMIDI",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-RealtimeMIDI.html#outkat",
        "fct-type": "function",
        "title": "outkat"
      },
      "index": {
        "description": "Sends MIDI aftertouch messages at k-rate outkat kchn kvalue kmin kmax csound doc http www.csounds.com manual html outkat.html",
        "hierarchy": "Csound Typed Opcode RealtimeMIDI",
        "module": "Csound.Typed.Opcode.RealtimeMIDI",
        "name": "outkat",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-RealtimeMIDI.html#v:outkc",
      "description": {
        "fct-descr": "\u003cp\u003eSends MIDI controller messages at k-rate.\n\u003c/p\u003e\u003cpre\u003e  outkc  kchn, knum, kvalue, kmin, kmax\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/outkc.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.RealtimeMIDI",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-RealtimeMIDI.html#outkc",
        "fct-type": "function",
        "title": "outkc"
      },
      "index": {
        "description": "Sends MIDI controller messages at k-rate outkc kchn knum kvalue kmin kmax csound doc http www.csounds.com manual html outkc.html",
        "hierarchy": "Csound Typed Opcode RealtimeMIDI",
        "module": "Csound.Typed.Opcode.RealtimeMIDI",
        "name": "outkc",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-RealtimeMIDI.html#v:outkc14",
      "description": {
        "fct-descr": "\u003cp\u003eSends 14-bit MIDI controller output at k-rate.\n\u003c/p\u003e\u003cpre\u003e  outkc14  kchn, kmsb, klsb, kvalue, kmin, kmax\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/outkc14.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.RealtimeMIDI",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-RealtimeMIDI.html#outkc14",
        "fct-type": "function",
        "title": "outkc14"
      },
      "index": {
        "description": "Sends bit MIDI controller output at k-rate outkc14 kchn kmsb klsb kvalue kmin kmax csound doc http www.csounds.com manual html outkc14.html",
        "hierarchy": "Csound Typed Opcode RealtimeMIDI",
        "module": "Csound.Typed.Opcode.RealtimeMIDI",
        "name": "outkc14",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-RealtimeMIDI.html#v:outkpat",
      "description": {
        "fct-descr": "\u003cp\u003eSends polyphonic MIDI aftertouch messages at k-rate.\n\u003c/p\u003e\u003cpre\u003e  outkpat  kchn, knotenum, kvalue, kmin, kmax\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/outkpat.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.RealtimeMIDI",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-RealtimeMIDI.html#outkpat",
        "fct-type": "function",
        "title": "outkpat"
      },
      "index": {
        "description": "Sends polyphonic MIDI aftertouch messages at k-rate outkpat kchn knotenum kvalue kmin kmax csound doc http www.csounds.com manual html outkpat.html",
        "hierarchy": "Csound Typed Opcode RealtimeMIDI",
        "module": "Csound.Typed.Opcode.RealtimeMIDI",
        "name": "outkpat",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-RealtimeMIDI.html#v:outkpb",
      "description": {
        "fct-descr": "\u003cp\u003eSends MIDI pitch-bend messages at k-rate.\n\u003c/p\u003e\u003cpre\u003e  outkpb  kchn, kvalue, kmin, kmax\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/outkpb.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.RealtimeMIDI",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-RealtimeMIDI.html#outkpb",
        "fct-type": "function",
        "title": "outkpb"
      },
      "index": {
        "description": "Sends MIDI pitch-bend messages at k-rate outkpb kchn kvalue kmin kmax csound doc http www.csounds.com manual html outkpb.html",
        "hierarchy": "Csound Typed Opcode RealtimeMIDI",
        "module": "Csound.Typed.Opcode.RealtimeMIDI",
        "name": "outkpb",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-RealtimeMIDI.html#v:outkpc",
      "description": {
        "fct-descr": "\u003cp\u003eSends MIDI program change messages at k-rate.\n\u003c/p\u003e\u003cpre\u003e  outkpc  kchn, kprog, kmin, kmax\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/outkpc.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.RealtimeMIDI",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-RealtimeMIDI.html#outkpc",
        "fct-type": "function",
        "title": "outkpc"
      },
      "index": {
        "description": "Sends MIDI program change messages at k-rate outkpc kchn kprog kmin kmax csound doc http www.csounds.com manual html outkpc.html",
        "hierarchy": "Csound Typed Opcode RealtimeMIDI",
        "module": "Csound.Typed.Opcode.RealtimeMIDI",
        "name": "outkpc",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-RealtimeMIDI.html#v:pchbend",
      "description": {
        "fct-descr": "\u003cp\u003eGet the current pitch-bend value for this channel.\n\u003c/p\u003e\u003cpre\u003e ibend  pchbend  [imin] [, imax]\n kbend  pchbend  [imin] [, imax]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/pchbend.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.RealtimeMIDI",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Msg -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-RealtimeMIDI.html#pchbend",
        "fct-type": "function",
        "title": "pchbend"
      },
      "index": {
        "description": "Get the current pitch-bend value for this channel ibend pchbend imin imax kbend pchbend imin imax csound doc http www.csounds.com manual html pchbend.html",
        "hierarchy": "Csound Typed Opcode RealtimeMIDI",
        "module": "Csound.Typed.Opcode.RealtimeMIDI",
        "name": "pchbend",
        "normalized": "Msg-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Msg-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-RealtimeMIDI.html#v:pchmidi",
      "description": {
        "fct-descr": "\u003cp\u003eGet the note number of the current MIDI event, expressed in pitch-class units.\n\u003c/p\u003e\u003cpre\u003e ipch  pchmidi &#160;\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/pchmidi.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.RealtimeMIDI",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Msg -\u003e D",
        "fct-source": "src/Csound-Typed-Opcode-RealtimeMIDI.html#pchmidi",
        "fct-type": "function",
        "title": "pchmidi"
      },
      "index": {
        "description": "Get the note number of the current MIDI event expressed in pitch-class units ipch pchmidi csound doc http www.csounds.com manual html pchmidi.html",
        "hierarchy": "Csound Typed Opcode RealtimeMIDI",
        "module": "Csound.Typed.Opcode.RealtimeMIDI",
        "name": "pchmidi",
        "normalized": "Msg-\u003eD",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Msg-\u003eD"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-RealtimeMIDI.html#v:pchmidib",
      "description": {
        "fct-descr": "\u003cp\u003eGet the note number of the current MIDI event and modify it by the current pitch-bend value, express it in pitch-class units.\n\u003c/p\u003e\u003cpre\u003e ipch  pchmidib  [irange]\n kpch  pchmidib  [irange]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/pchmidib.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.RealtimeMIDI",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Msg -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-RealtimeMIDI.html#pchmidib",
        "fct-type": "function",
        "title": "pchmidib"
      },
      "index": {
        "description": "Get the note number of the current MIDI event and modify it by the current pitch-bend value express it in pitch-class units ipch pchmidib irange kpch pchmidib irange csound doc http www.csounds.com manual html pchmidib.html",
        "hierarchy": "Csound Typed Opcode RealtimeMIDI",
        "module": "Csound.Typed.Opcode.RealtimeMIDI",
        "name": "pchmidib",
        "normalized": "Msg-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Msg-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-RealtimeMIDI.html#v:pgmassign",
      "description": {
        "fct-descr": "\u003cp\u003eAssigns an instrument number to a specified MIDI program.\n\u003c/p\u003e\u003cp\u003eAssigns an instrument number to a specified (or all) MIDI program(s).\n\u003c/p\u003e\u003cpre\u003e  pgmassign  ipgm, inst[, ichn]\n  pgmassign  ipgm, \"insname\"[, ichn]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/pgmassign.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.RealtimeMIDI",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-RealtimeMIDI.html#pgmassign",
        "fct-type": "function",
        "title": "pgmassign"
      },
      "index": {
        "description": "Assigns an instrument number to specified MIDI program Assigns an instrument number to specified or all MIDI program pgmassign ipgm inst ichn pgmassign ipgm insname ichn csound doc http www.csounds.com manual html pgmassign.html",
        "hierarchy": "Csound Typed Opcode RealtimeMIDI",
        "module": "Csound.Typed.Opcode.RealtimeMIDI",
        "name": "pgmassign",
        "normalized": "D-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-RealtimeMIDI.html#v:polyaft",
      "description": {
        "fct-descr": "\u003cp\u003eReturns the polyphonic after-touch pressure of the selected note number.\n\u003c/p\u003e\u003cp\u003epolyaft returns the polyphonic pressure of the selected note number, optionally mapped to an user-specified range.\n\u003c/p\u003e\u003cpre\u003e ires  polyaft  inote [, ilow] [, ihigh]\n kres  polyaft  inote [, ilow] [, ihigh]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/polyaft.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.RealtimeMIDI",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-RealtimeMIDI.html#polyaft",
        "fct-type": "function",
        "title": "polyaft"
      },
      "index": {
        "description": "Returns the polyphonic after-touch pressure of the selected note number polyaft returns the polyphonic pressure of the selected note number optionally mapped to an user-specified range ires polyaft inote ilow ihigh kres polyaft inote ilow ihigh csound doc http www.csounds.com manual html polyaft.html",
        "hierarchy": "Csound Typed Opcode RealtimeMIDI",
        "module": "Csound.Typed.Opcode.RealtimeMIDI",
        "name": "polyaft",
        "normalized": "D-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-RealtimeMIDI.html#v:release",
      "description": {
        "fct-descr": "\u003cp\u003eIndicates whether a note is in its &#226;&#128;&#156;release&#226;&#128;&#157; sta\u003c/p\u003e\u003cp\u003eProvides a way of knowing when a note off message for the current note is received. Only a noteoff message with the same MIDI note number as the one which triggered the note will be reported by release.\n\u003c/p\u003e\u003cpre\u003e kflag  release &#160;\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/release.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.RealtimeMIDI",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig",
        "fct-source": "src/Csound-Typed-Opcode-RealtimeMIDI.html#release",
        "fct-type": "function",
        "title": "release"
      },
      "index": {
        "description": "Indicates whether note is in its release sta Provides way of knowing when note off message for the current note is received Only noteoff message with the same MIDI note number as the one which triggered the note will be reported by release kflag release csound doc http www.csounds.com manual html release.html",
        "hierarchy": "Csound Typed Opcode RealtimeMIDI",
        "module": "Csound.Typed.Opcode.RealtimeMIDI",
        "name": "release",
        "normalized": "",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-RealtimeMIDI.html#v:veloc",
      "description": {
        "fct-descr": "\u003cp\u003eGet the velocity from a MIDI event.\n\u003c/p\u003e\u003cpre\u003e ival  veloc  [ilow] [, ihigh]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/veloc.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.RealtimeMIDI",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D",
        "fct-source": "src/Csound-Typed-Opcode-RealtimeMIDI.html#veloc",
        "fct-type": "function",
        "title": "veloc"
      },
      "index": {
        "description": "Get the velocity from MIDI event ival veloc ilow ihigh csound doc http www.csounds.com manual html veloc.html",
        "hierarchy": "Csound Typed Opcode RealtimeMIDI",
        "module": "Csound.Typed.Opcode.RealtimeMIDI",
        "name": "veloc",
        "normalized": "",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-RealtimeMIDI.html#v:xtratim",
      "description": {
        "fct-descr": "\u003cp\u003eExtend the duration of real-time generated events.\n\u003c/p\u003e\u003cp\u003eExtend the duration of real-time generated events and handle their extra life (Usually for usage along with release instead of linenr, linsegr, etc).\n\u003c/p\u003e\u003cpre\u003e  xtratim  iextradur\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/xtratim.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.RealtimeMIDI",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-RealtimeMIDI.html#xtratim",
        "fct-type": "function",
        "title": "xtratim"
      },
      "index": {
        "description": "Extend the duration of real-time generated events Extend the duration of real-time generated events and handle their extra life Usually for usage along with release instead of linenr linsegr etc xtratim iextradur csound doc http www.csounds.com manual html xtratim.html",
        "hierarchy": "Csound Typed Opcode RealtimeMIDI",
        "module": "Csound.Typed.Opcode.RealtimeMIDI",
        "name": "xtratim",
        "normalized": "D-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-RemoteOpcodes.html#",
      "description": {
        "fct-module": "Csound.Typed.Opcode.RemoteOpcodes",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "module",
        "fct-source": "src/Csound-Typed-Opcode-RemoteOpcodes.html",
        "fct-type": "module",
        "title": "RemoteOpcodes"
      },
      "index": {
        "description": "",
        "hierarchy": "Csound Typed Opcode RemoteOpcodes",
        "module": "Csound.Typed.Opcode.RemoteOpcodes",
        "name": "RemoteOpcodes",
        "normalized": "",
        "package": "csound-expression-opcodes",
        "partial": "Remote Opcodes",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-RemoteOpcodes.html#v:insglobal",
      "description": {
        "fct-descr": "\u003cp\u003eAn opcode which can be used to implement a remote\n       orchestra. This opcode will send note events from a source\n       machine to many destinations.\n\u003c/p\u003e\u003cp\u003eWith the insremot and\n       insglobal opcodes you are able to perform\n       instruments on remote machines and control them from a master\n       machine. The remote opcodes are implemented using the\n       master/client model. All the machines involved contain the same\n       orchestra but only the master machine contains the information\n       of the score. During the performance the master machine sends\n       the note events to the clients. The\n       insglobal opcode sends the events to all\n       the machines involved in the remote concert. These machines are\n       determined by the insremot\n       definitions made above the insglobal\n       command. To send events to only one machine use insremot.\n\u003c/p\u003e\u003cpre\u003e  insglobal  isource, instrnum [,instrnum...] \n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/insglobal.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.RemoteOpcodes",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-RemoteOpcodes.html#insglobal",
        "fct-type": "function",
        "title": "insglobal"
      },
      "index": {
        "description": "An opcode which can be used to implement remote orchestra This opcode will send note events from source machine to many destinations With the insremot and insglobal opcodes you are able to perform instruments on remote machines and control them from master machine The remote opcodes are implemented using the master client model All the machines involved contain the same orchestra but only the master machine contains the information of the score During the performance the master machine sends the note events to the clients The insglobal opcode sends the events to all the machines involved in the remote concert These machines are determined by the insremot definitions made above the insglobal command To send events to only one machine use insremot insglobal isource instrnum instrnum csound doc http www.csounds.com manual html insglobal.html",
        "hierarchy": "Csound Typed Opcode RemoteOpcodes",
        "module": "Csound.Typed.Opcode.RemoteOpcodes",
        "name": "insglobal",
        "normalized": "D-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-RemoteOpcodes.html#v:insremot",
      "description": {
        "fct-descr": "\u003cp\u003eAn opcode which can be used to implement a remote\n       orchestra. This opcode will send note events from a source\n       machine to one destination.\n\u003c/p\u003e\u003cp\u003eWith the insremot and insglobal\n       opcodes you are able to perform instruments on remote machines\n       and control them from a master machine. The remote opcodes are\n       implemented using the master/client model. All the machines\n       involved contain the same orchestra but only the master machine\n       contains the information of the score. During the performance\n       the master machine sends the note events to the clients. The\n       insremot opcode will send events from a\n       source machine to one destination if you want to send events to\n       many destinations (broadcast) use the insglobal\n       opcode instead. These two opcodes can be used in combination.\n\u003c/p\u003e\u003cpre\u003e  insremot  idestination, isource, instrnum [,instrnum...] \n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/insremot.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.RemoteOpcodes",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-RemoteOpcodes.html#insremot",
        "fct-type": "function",
        "title": "insremot"
      },
      "index": {
        "description": "An opcode which can be used to implement remote orchestra This opcode will send note events from source machine to one destination With the insremot and insglobal opcodes you are able to perform instruments on remote machines and control them from master machine The remote opcodes are implemented using the master client model All the machines involved contain the same orchestra but only the master machine contains the information of the score During the performance the master machine sends the note events to the clients The insremot opcode will send events from source machine to one destination if you want to send events to many destinations broadcast use the insglobal opcode instead These two opcodes can be used in combination insremot idestination isource instrnum instrnum csound doc http www.csounds.com manual html insremot.html",
        "hierarchy": "Csound Typed Opcode RemoteOpcodes",
        "module": "Csound.Typed.Opcode.RemoteOpcodes",
        "name": "insremot",
        "normalized": "D-\u003eD-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-RemoteOpcodes.html#v:midglobal",
      "description": {
        "fct-descr": "\u003cp\u003eAn opcode which can be used to implement a remote midi orchestra. This opcode will broadcast the midi events to all the machines involved in the remote concert.\n\u003c/p\u003e\u003cp\u003eWith the midremot and midglobal opcodes you are able to perform instruments on remote machines and control them from a master machine. The remote opcodes are implemented using the master/client model. All the machines involved contain the same orchestra but only the master machine contains the information of the midi score. During the performance the master machine sends the midi events to the clients. The midglobal opcode sends the events to all the machines involved in the remote concert. These machines are determined by the midremot definitions made above the midglobal command. To send events to only one machine use midremot.\n\u003c/p\u003e\u003cpre\u003e  midglobal  isource, instrnum [,instrnum...] \n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/midglobal.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.RemoteOpcodes",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-RemoteOpcodes.html#midglobal",
        "fct-type": "function",
        "title": "midglobal"
      },
      "index": {
        "description": "An opcode which can be used to implement remote midi orchestra This opcode will broadcast the midi events to all the machines involved in the remote concert With the midremot and midglobal opcodes you are able to perform instruments on remote machines and control them from master machine The remote opcodes are implemented using the master client model All the machines involved contain the same orchestra but only the master machine contains the information of the midi score During the performance the master machine sends the midi events to the clients The midglobal opcode sends the events to all the machines involved in the remote concert These machines are determined by the midremot definitions made above the midglobal command To send events to only one machine use midremot midglobal isource instrnum instrnum csound doc http www.csounds.com manual html midglobal.html",
        "hierarchy": "Csound Typed Opcode RemoteOpcodes",
        "module": "Csound.Typed.Opcode.RemoteOpcodes",
        "name": "midglobal",
        "normalized": "D-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-RemoteOpcodes.html#v:midremot",
      "description": {
        "fct-descr": "\u003cp\u003eAn opcode which can be used to implement a remote midi orchestra. This opcode will send midi events from a source machine to one destination.\n\u003c/p\u003e\u003cp\u003eWith the midremot and midglobal opcodes you are able to perform instruments on remote machines and control them from a master machine. The remote opcodes are implemented using the master/client model. All the machines involved contain the same orchestra but only the master machine contains the information of the midi score. During the performance the master machine sends the midi events to the clients. The midremot opcode will send events from a source machine to one destination if you want to send events to many destinations (broadcast) use the midglobal opcode instead. These two opcodes can be used in combination.\n\u003c/p\u003e\u003cpre\u003e  midremot  idestination, isource, instrnum [,instrnum...] \n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/midremot.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.RemoteOpcodes",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-RemoteOpcodes.html#midremot",
        "fct-type": "function",
        "title": "midremot"
      },
      "index": {
        "description": "An opcode which can be used to implement remote midi orchestra This opcode will send midi events from source machine to one destination With the midremot and midglobal opcodes you are able to perform instruments on remote machines and control them from master machine The remote opcodes are implemented using the master client model All the machines involved contain the same orchestra but only the master machine contains the information of the midi score During the performance the master machine sends the midi events to the clients The midremot opcode will send events from source machine to one destination if you want to send events to many destinations broadcast use the midglobal opcode instead These two opcodes can be used in combination midremot idestination isource instrnum instrnum csound doc http www.csounds.com manual html midremot.html",
        "hierarchy": "Csound Typed Opcode RemoteOpcodes",
        "module": "Csound.Typed.Opcode.RemoteOpcodes",
        "name": "midremot",
        "normalized": "D-\u003eD-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SerialIO.html#",
      "description": {
        "fct-module": "Csound.Typed.Opcode.SerialIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "module",
        "fct-source": "src/Csound-Typed-Opcode-SerialIO.html",
        "fct-type": "module",
        "title": "SerialIO"
      },
      "index": {
        "description": "",
        "hierarchy": "Csound Typed Opcode SerialIO",
        "module": "Csound.Typed.Opcode.SerialIO",
        "name": "SerialIO",
        "normalized": "",
        "package": "csound-expression-opcodes",
        "partial": "Serial IO",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SerialIO.html#v:serialBegin",
      "description": {
        "fct-descr": "\u003cp\u003eOpen a serial port.\n\u003c/p\u003e\u003cp\u003eOpen a serial port for arduino.\n\u003c/p\u003e\u003cpre\u003e iPort  serialBegin  SPortName [, ibaudRate]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/serialBegin.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SerialIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e SE D",
        "fct-source": "src/Csound-Typed-Opcode-SerialIO.html#serialBegin",
        "fct-type": "function",
        "title": "serialBegin"
      },
      "index": {
        "description": "Open serial port Open serial port for arduino iPort serialBegin SPortName ibaudRate csound doc http www.csounds.com manual html serialBegin.html",
        "hierarchy": "Csound Typed Opcode SerialIO",
        "module": "Csound.Typed.Opcode.SerialIO",
        "name": "serialBegin",
        "normalized": "Str-\u003eSE D",
        "package": "csound-expression-opcodes",
        "partial": "Begin",
        "signature": "Str-\u003eSE D"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SerialIO.html#v:serialEnd",
      "description": {
        "fct-descr": "\u003cp\u003eClose a serial port.\n\u003c/p\u003e\u003cp\u003eClose a serial port for arduino.\n\u003c/p\u003e\u003cpre\u003e   serialEnd  iPort\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/serialEnd.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SerialIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SerialIO.html#serialEnd",
        "fct-type": "function",
        "title": "serialEnd"
      },
      "index": {
        "description": "Close serial port Close serial port for arduino serialEnd iPort csound doc http www.csounds.com manual html serialEnd.html",
        "hierarchy": "Csound Typed Opcode SerialIO",
        "module": "Csound.Typed.Opcode.SerialIO",
        "name": "serialEnd",
        "normalized": "D-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "End",
        "signature": "D-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SerialIO.html#v:serialFlush",
      "description": {
        "fct-descr": "\u003cp\u003eFlush data from a serial port.\n\u003c/p\u003e\u003cp\u003eFlush to the screen any bytes (up to 32k) in the input buffer.  \n Note that these bytes will be cleared from the buffer.\n use this opcode mainly for debugging messages.\n If you want to mix debugging and other communication \n messages over the same port, you will need to manually\n parse the data with the serialRead opcode.\n\u003c/p\u003e\u003cpre\u003e   serialFlush  iPort\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/serialFlush.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SerialIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SerialIO.html#serialFlush",
        "fct-type": "function",
        "title": "serialFlush"
      },
      "index": {
        "description": "Flush data from serial port Flush to the screen any bytes up to in the input buffer Note that these bytes will be cleared from the buffer use this opcode mainly for debugging messages If you want to mix debugging and other communication messages over the same port you will need to manually parse the data with the serialRead opcode serialFlush iPort csound doc http www.csounds.com manual html serialFlush.html",
        "hierarchy": "Csound Typed Opcode SerialIO",
        "module": "Csound.Typed.Opcode.SerialIO",
        "name": "serialFlush",
        "normalized": "D-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "Flush",
        "signature": "D-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SerialIO.html#v:serialPrint",
      "description": {
        "fct-descr": "\u003cp\u003ePrint data from a serial port.\n\u003c/p\u003e\u003cp\u003ePrint to the screen any bytes (up to 32k) in the input buffer.  \n Note that these bytes will be cleared from the buffer.\n use this opcode mainly for debugging messages.\n If you want to mix debugging and other communication \n messages over the same port, you will need to manually\n parse the data with the serialRead opcode.\n\u003c/p\u003e\u003cpre\u003e   serialPrint  iPort\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/serialPrint.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SerialIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SerialIO.html#serialPrint",
        "fct-type": "function",
        "title": "serialPrint"
      },
      "index": {
        "description": "Print data from serial port Print to the screen any bytes up to in the input buffer Note that these bytes will be cleared from the buffer use this opcode mainly for debugging messages If you want to mix debugging and other communication messages over the same port you will need to manually parse the data with the serialRead opcode serialPrint iPort csound doc http www.csounds.com manual html serialPrint.html",
        "hierarchy": "Csound Typed Opcode SerialIO",
        "module": "Csound.Typed.Opcode.SerialIO",
        "name": "serialPrint",
        "normalized": "D-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "Print",
        "signature": "D-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SerialIO.html#v:serialRead",
      "description": {
        "fct-descr": "\u003cp\u003eRead data from a serial port.\n\u003c/p\u003e\u003cp\u003eRead data from a serial port for arduino.\n\u003c/p\u003e\u003cpre\u003e kByte  serialRead  iPort\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/serialRead.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SerialIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SerialIO.html#serialRead",
        "fct-type": "function",
        "title": "serialRead"
      },
      "index": {
        "description": "Read data from serial port Read data from serial port for arduino kByte serialRead iPort csound doc http www.csounds.com manual html serialRead.html",
        "hierarchy": "Csound Typed Opcode SerialIO",
        "module": "Csound.Typed.Opcode.SerialIO",
        "name": "serialRead",
        "normalized": "D-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "Read",
        "signature": "D-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SerialIO.html#v:serialWrite",
      "description": {
        "fct-descr": "\u003cp\u003eWrite data to a serial port.\n\u003c/p\u003e\u003cp\u003eWrite data to a serial port for arduino.\n\u003c/p\u003e\u003cpre\u003e   serialWrite  iPort, iByte\n   serialWrite  iPort, kByte\n   serialWrite  iPort, SBytes\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/serialWrite.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SerialIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SerialIO.html#serialWrite",
        "fct-type": "function",
        "title": "serialWrite"
      },
      "index": {
        "description": "Write data to serial port Write data to serial port for arduino serialWrite iPort iByte serialWrite iPort kByte serialWrite iPort SBytes csound doc http www.csounds.com manual html serialWrite.html",
        "hierarchy": "Csound Typed Opcode SerialIO",
        "module": "Csound.Typed.Opcode.SerialIO",
        "name": "serialWrite",
        "normalized": "D-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "Write",
        "signature": "D-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SerialIO.html#v:serialWrite_i",
      "description": {
        "fct-descr": "\u003cp\u003eWrite data to a serial port.\n\u003c/p\u003e\u003cp\u003eWrite data to a serial port for arduino.\n\u003c/p\u003e\u003cpre\u003e   serialWrite_i  iPort, iByte\n   serialWrite_i  iPort, SBytes\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/serialWrite_i.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SerialIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SerialIO.html#serialWrite_i",
        "fct-type": "function",
        "title": "serialWrite_i"
      },
      "index": {
        "description": "Write data to serial port Write data to serial port for arduino serialWrite iPort iByte serialWrite iPort SBytes csound doc http www.csounds.com manual html serialWrite i.html",
        "hierarchy": "Csound Typed Opcode SerialIO",
        "module": "Csound.Typed.Opcode.SerialIO",
        "name": "serialWrite_i",
        "normalized": "D-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "Write",
        "signature": "D-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalFlowGraphOpcodes.html#",
      "description": {
        "fct-module": "Csound.Typed.Opcode.SignalFlowGraphOpcodes",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "module",
        "fct-source": "src/Csound-Typed-Opcode-SignalFlowGraphOpcodes.html",
        "fct-type": "module",
        "title": "SignalFlowGraphOpcodes"
      },
      "index": {
        "description": "",
        "hierarchy": "Csound Typed Opcode SignalFlowGraphOpcodes",
        "module": "Csound.Typed.Opcode.SignalFlowGraphOpcodes",
        "name": "SignalFlowGraphOpcodes",
        "normalized": "",
        "package": "csound-expression-opcodes",
        "partial": "Signal Flow Graph Opcodes",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalFlowGraphOpcodes.html#v:ftgenonce",
      "description": {
        "fct-descr": "\u003cp\u003eGenerate a function table from within an instrument definition, without duplication of data.\n\u003c/p\u003e\u003cp\u003eEnables the creation of function tables entirely inside \n       instrument definitions, without any duplication of data.\n\u003c/p\u003e\u003cpre\u003e ifno  ftgenonce  ip1, ip2dummy, isize, igen, iarga, iargb, ...\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/ftgenonce.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalFlowGraphOpcodes",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e [D] -\u003e Tab",
        "fct-source": "src/Csound-Typed-Opcode-SignalFlowGraphOpcodes.html#ftgenonce",
        "fct-type": "function",
        "title": "ftgenonce"
      },
      "index": {
        "description": "Generate function table from within an instrument definition without duplication of data Enables the creation of function tables entirely inside instrument definitions without any duplication of data ifno ftgenonce ip1 ip2dummy isize igen iarga iargb csound doc http www.csounds.com manual html ftgenonce.html",
        "hierarchy": "Csound Typed Opcode SignalFlowGraphOpcodes",
        "module": "Csound.Typed.Opcode.SignalFlowGraphOpcodes",
        "name": "ftgenonce",
        "normalized": "D-\u003eD-\u003eD-\u003eD-\u003eD-\u003e[D]-\u003eTab",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eD-\u003eD-\u003eD-\u003e[D]-\u003eTab"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalFlowGraphOpcodes.html#v:inleta",
      "description": {
        "fct-descr": "\u003cp\u003eReceives an arate signal into an instrument through a named port.\n\u003c/p\u003e\u003cpre\u003e asignal  inleta Sname\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/inleta.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalFlowGraphOpcodes",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalFlowGraphOpcodes.html#inleta",
        "fct-type": "function",
        "title": "inleta"
      },
      "index": {
        "description": "Receives an arate signal into an instrument through named port asignal inleta Sname csound doc http www.csounds.com manual html inleta.html",
        "hierarchy": "Csound Typed Opcode SignalFlowGraphOpcodes",
        "module": "Csound.Typed.Opcode.SignalFlowGraphOpcodes",
        "name": "inleta",
        "normalized": "Str-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalFlowGraphOpcodes.html#v:inletf",
      "description": {
        "fct-descr": "\u003cp\u003eReceives an frate signal (fsig) into an instrument from a named port.\n\u003c/p\u003e\u003cpre\u003e fsignal  inletf Sname\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/inletf.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalFlowGraphOpcodes",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e Spec",
        "fct-source": "src/Csound-Typed-Opcode-SignalFlowGraphOpcodes.html#inletf",
        "fct-type": "function",
        "title": "inletf"
      },
      "index": {
        "description": "Receives an frate signal fsig into an instrument from named port fsignal inletf Sname csound doc http www.csounds.com manual html inletf.html",
        "hierarchy": "Csound Typed Opcode SignalFlowGraphOpcodes",
        "module": "Csound.Typed.Opcode.SignalFlowGraphOpcodes",
        "name": "inletf",
        "normalized": "Str-\u003eSpec",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eSpec"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalFlowGraphOpcodes.html#v:inletk",
      "description": {
        "fct-descr": "\u003cp\u003eReceives a krate signal into an instrument from a named port.\n\u003c/p\u003e\u003cpre\u003e ksignal  inletk Sname\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/inletk.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalFlowGraphOpcodes",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalFlowGraphOpcodes.html#inletk",
        "fct-type": "function",
        "title": "inletk"
      },
      "index": {
        "description": "Receives krate signal into an instrument from named port ksignal inletk Sname csound doc http www.csounds.com manual html inletk.html",
        "hierarchy": "Csound Typed Opcode SignalFlowGraphOpcodes",
        "module": "Csound.Typed.Opcode.SignalFlowGraphOpcodes",
        "name": "inletk",
        "normalized": "Str-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalFlowGraphOpcodes.html#v:inletkid",
      "description": {
        "fct-descr": "\u003cp\u003eReceives a krate signal into an instrument from a named port.\n\u003c/p\u003e\u003cpre\u003e ksignal  inletkid Sname, SinstanceID\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/inletkid.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalFlowGraphOpcodes",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e Str -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalFlowGraphOpcodes.html#inletkid",
        "fct-type": "function",
        "title": "inletkid"
      },
      "index": {
        "description": "Receives krate signal into an instrument from named port ksignal inletkid Sname SinstanceID csound doc http www.csounds.com manual html inletkid.html",
        "hierarchy": "Csound Typed Opcode SignalFlowGraphOpcodes",
        "module": "Csound.Typed.Opcode.SignalFlowGraphOpcodes",
        "name": "inletkid",
        "normalized": "Str-\u003eStr-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eStr-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalFlowGraphOpcodes.html#v:outleta",
      "description": {
        "fct-descr": "\u003cp\u003eSends an arate signal out from an instrument to a named port.\n\u003c/p\u003e\u003cpre\u003e  outleta Sname, asignal\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/outleta.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalFlowGraphOpcodes",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalFlowGraphOpcodes.html#outleta",
        "fct-type": "function",
        "title": "outleta"
      },
      "index": {
        "description": "Sends an arate signal out from an instrument to named port outleta Sname asignal csound doc http www.csounds.com manual html outleta.html",
        "hierarchy": "Csound Typed Opcode SignalFlowGraphOpcodes",
        "module": "Csound.Typed.Opcode.SignalFlowGraphOpcodes",
        "name": "outleta",
        "normalized": "Str-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalFlowGraphOpcodes.html#v:outletf",
      "description": {
        "fct-descr": "\u003cp\u003eSends a frate signal (fsig) out from an instrument to a named port.\n\u003c/p\u003e\u003cpre\u003e  outletf Sname, fsignal\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/outletf.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalFlowGraphOpcodes",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e Spec -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalFlowGraphOpcodes.html#outletf",
        "fct-type": "function",
        "title": "outletf"
      },
      "index": {
        "description": "Sends frate signal fsig out from an instrument to named port outletf Sname fsignal csound doc http www.csounds.com manual html outletf.html",
        "hierarchy": "Csound Typed Opcode SignalFlowGraphOpcodes",
        "module": "Csound.Typed.Opcode.SignalFlowGraphOpcodes",
        "name": "outletf",
        "normalized": "Str-\u003eSpec-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eSpec-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalFlowGraphOpcodes.html#v:outletk",
      "description": {
        "fct-descr": "\u003cp\u003eSends a krate signal out from an instrument to a named port.\n\u003c/p\u003e\u003cpre\u003e  outletk Sname, ksignal\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/outletk.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalFlowGraphOpcodes",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalFlowGraphOpcodes.html#outletk",
        "fct-type": "function",
        "title": "outletk"
      },
      "index": {
        "description": "Sends krate signal out from an instrument to named port outletk Sname ksignal csound doc http www.csounds.com manual html outletk.html",
        "hierarchy": "Csound Typed Opcode SignalFlowGraphOpcodes",
        "module": "Csound.Typed.Opcode.SignalFlowGraphOpcodes",
        "name": "outletk",
        "normalized": "Str-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalFlowGraphOpcodes.html#v:outletkid",
      "description": {
        "fct-descr": "\u003cp\u003eSends a krate signal out from an instrument to a named port.\n\u003c/p\u003e\u003cpre\u003e  outletkid Sname, SinstanceID, ksignal\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/outletkid.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalFlowGraphOpcodes",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e Str -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalFlowGraphOpcodes.html#outletkid",
        "fct-type": "function",
        "title": "outletkid"
      },
      "index": {
        "description": "Sends krate signal out from an instrument to named port outletkid Sname SinstanceID ksignal csound doc http www.csounds.com manual html outletkid.html",
        "hierarchy": "Csound Typed Opcode SignalFlowGraphOpcodes",
        "module": "Csound.Typed.Opcode.SignalFlowGraphOpcodes",
        "name": "outletkid",
        "normalized": "Str-\u003eStr-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eStr-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#",
      "description": {
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "module",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html",
        "fct-type": "module",
        "title": "SignalGenerators"
      },
      "index": {
        "description": "",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "SignalGenerators",
        "normalized": "",
        "package": "csound-expression-opcodes",
        "partial": "Signal Generators",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:adsr",
      "description": {
        "fct-descr": "\u003cp\u003eCalculates the classical ADSR envelope using linear segments.\n\u003c/p\u003e\u003cpre\u003e ares  adsr  iatt, idec, islev, irel [, idel]\n kres  adsr  iatt, idec, islev, irel [, idel]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/adsr.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#adsr",
        "fct-type": "function",
        "title": "adsr"
      },
      "index": {
        "description": "Calculates the classical ADSR envelope using linear segments ares adsr iatt idec islev irel idel kres adsr iatt idec islev irel idel csound doc http www.csounds.com manual html adsr.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "adsr",
        "normalized": "D-\u003eD-\u003eD-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eD-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:adsyn",
      "description": {
        "fct-descr": "\u003cp\u003eOutput is an additive set of individually controlled sinusoids, using an oscillator bank.\n\u003c/p\u003e\u003cpre\u003e ares  adsyn  kamod, kfmod, ksmod, ifilcod\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/adsyn.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Str -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#adsyn",
        "fct-type": "function",
        "title": "adsyn"
      },
      "index": {
        "description": "Output is an additive set of individually controlled sinusoids using an oscillator bank ares adsyn kamod kfmod ksmod ifilcod csound doc http www.csounds.com manual html adsyn.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "adsyn",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eStr-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eStr-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:adsynt",
      "description": {
        "fct-descr": "\u003cp\u003ePerforms additive synthesis with an arbitrary number of partials, not necessarily harmonic.\n\u003c/p\u003e\u003cpre\u003e ares  adsynt  kamp, kcps, iwfn, ifreqfn, iampfn, icnt [, iphs]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/adsynt.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Tab -\u003e Tab -\u003e Tab -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#adsynt",
        "fct-type": "function",
        "title": "adsynt"
      },
      "index": {
        "description": "Performs additive synthesis with an arbitrary number of partials not necessarily harmonic ares adsynt kamp kcps iwfn ifreqfn iampfn icnt iphs csound doc http www.csounds.com manual html adsynt.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "adsynt",
        "normalized": "Sig-\u003eSig-\u003eTab-\u003eTab-\u003eTab-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eTab-\u003eTab-\u003eTab-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:adsynt2",
      "description": {
        "fct-descr": "\u003cp\u003ePerforms additive synthesis with an arbitrary number of partials -not necessarily harmonic- with interpolation.\n\u003c/p\u003e\u003cp\u003ePerforms additive synthesis with an arbitrary number of partials, not necessarily harmonic. (see adsynt for detailed manual)\n\u003c/p\u003e\u003cpre\u003e ar  adsynt2  kamp, kcps, iwfn, ifreqfn, iampfn, icnt [, iphs]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/adsynt2.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Tab -\u003e Tab -\u003e Tab -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#adsynt2",
        "fct-type": "function",
        "title": "adsynt2"
      },
      "index": {
        "description": "Performs additive synthesis with an arbitrary number of partials not necessarily harmonic with interpolation Performs additive synthesis with an arbitrary number of partials not necessarily harmonic see adsynt for detailed manual ar adsynt2 kamp kcps iwfn ifreqfn iampfn icnt iphs csound doc http www.csounds.com manual html adsynt2.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "adsynt2",
        "normalized": "Sig-\u003eSig-\u003eTab-\u003eTab-\u003eTab-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eTab-\u003eTab-\u003eTab-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:bamboo",
      "description": {
        "fct-descr": "\u003cp\u003eSemi-physical model of a bamboo sound.\n\u003c/p\u003e\u003cp\u003ebamboo is a semi-physical model of a bamboo sound. It is one of the PhISEM percussion opcodes. PhISEM (Physically Informed Stochastic Event Modeling) is an algorithmic approach for simulating collisions of multiple independent sound producing objects.\n\u003c/p\u003e\u003cpre\u003e ares  bamboo  kamp, idettack [, inum] [, idamp] [, imaxshake] [, ifreq] \\\n           [, ifreq1] [, ifreq2]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/bamboo.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#bamboo",
        "fct-type": "function",
        "title": "bamboo"
      },
      "index": {
        "description": "Semi-physical model of bamboo sound bamboo is semi-physical model of bamboo sound It is one of the PhISEM percussion opcodes PhISEM Physically Informed Stochastic Event Modeling is an algorithmic approach for simulating collisions of multiple independent sound producing objects ares bamboo kamp idettack inum idamp imaxshake ifreq ifreq1 ifreq2 csound doc http www.csounds.com manual html bamboo.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "bamboo",
        "normalized": "Sig-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:barmodel",
      "description": {
        "fct-descr": "\u003cp\u003eCreates a tone similar to a struck metal bar.\n\u003c/p\u003e\u003cp\u003eAudio output is a tone similar to a struck metal bar, using a\n     physical model developed from solving the partial differential\n     equation.  There are controls over the boundary conditions as\n     well as the bar characteristics.\n\u003c/p\u003e\u003cpre\u003e ares  barmodel  kbcL, kbcR, iK, ib, kscan, iT30, ipos, ivel, iwid\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/barmodel.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e D -\u003e D -\u003e Sig -\u003e D -\u003e D -\u003e D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#barmodel",
        "fct-type": "function",
        "title": "barmodel"
      },
      "index": {
        "description": "Creates tone similar to struck metal bar Audio output is tone similar to struck metal bar using physical model developed from solving the partial differential equation There are controls over the boundary conditions as well as the bar characteristics ares barmodel kbcL kbcR iK ib kscan iT30 ipos ivel iwid csound doc http www.csounds.com manual html barmodel.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "barmodel",
        "normalized": "Sig-\u003eSig-\u003eD-\u003eD-\u003eSig-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eD-\u003eD-\u003eSig-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:bbcutm",
      "description": {
        "fct-descr": "\u003cp\u003eGenerates breakbeat-style cut-ups of a mono audio stream.\n\u003c/p\u003e\u003cp\u003eThe BreakBeat Cutter automatically generates cut-ups of a source audio stream in the style of drum and bass/jungle breakbeat manipulations.  There are two versions, for mono (bbcutm) or stereo (bbcuts) sources.  Whilst originally based on breakbeat cutting, the opcode can be applied to any type of source audio.\n\u003c/p\u003e\u003cpre\u003e a1  bbcutm  asource, ibps, isubdiv, ibarlength, iphrasebars, inumrepeats \\\n           [, istutterspeed] [, istutterchance] [, ienvchoice ]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/bbcutm.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#bbcutm",
        "fct-type": "function",
        "title": "bbcutm"
      },
      "index": {
        "description": "Generates breakbeat-style cut-ups of mono audio stream The BreakBeat Cutter automatically generates cut-ups of source audio stream in the style of drum and bass jungle breakbeat manipulations There are two versions for mono bbcutm or stereo bbcuts sources Whilst originally based on breakbeat cutting the opcode can be applied to any type of source audio a1 bbcutm asource ibps isubdiv ibarlength iphrasebars inumrepeats istutterspeed istutterchance ienvchoice csound doc http www.csounds.com manual html bbcutm.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "bbcutm",
        "normalized": "Sig-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:bbcuts",
      "description": {
        "fct-descr": "\u003cp\u003eGenerates breakbeat-style cut-ups of a stereo audio stream.\n\u003c/p\u003e\u003cp\u003eThe BreakBeat Cutter automatically generates cut-ups of a source audio stream in the style of drum and bass/jungle breakbeat manipulations.  There are two versions, for mono (bbcutm) or stereo (bbcuts) sources.  Whilst originally based on breakbeat cutting, the opcode can be applied to any type of source audio.\n\u003c/p\u003e\u003cpre\u003e a1,a2  bbcuts  asource1, asource2, ibps, isubdiv, ibarlength, iphrasebars, \\\n           inumrepeats [, istutterspeed] [, istutterchance] [, ienvchoice]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/bbcuts.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#bbcuts",
        "fct-type": "function",
        "title": "bbcuts"
      },
      "index": {
        "description": "Generates breakbeat-style cut-ups of stereo audio stream The BreakBeat Cutter automatically generates cut-ups of source audio stream in the style of drum and bass jungle breakbeat manipulations There are two versions for mono bbcutm or stereo bbcuts sources Whilst originally based on breakbeat cutting the opcode can be applied to any type of source audio a1 a2 bbcuts asource1 asource2 ibps isubdiv ibarlength iphrasebars inumrepeats istutterspeed istutterchance ienvchoice csound doc http www.csounds.com manual html bbcuts.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "bbcuts",
        "normalized": "Sig-\u003eSig-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:betarand",
      "description": {
        "fct-descr": "\u003cp\u003eBeta distribution random number generator (positive values only).\n\u003c/p\u003e\u003cp\u003eBeta distribution random number generator (positive values only). This is an x-class noise generator.\n\u003c/p\u003e\u003cpre\u003e ares  betarand  krange, kalpha, kbeta\n ires  betarand  krange, kalpha, kbeta\n kres  betarand  krange, kalpha, kbeta\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/betarand.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "a -\u003e a -\u003e a -\u003e SE a",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#betarand",
        "fct-type": "function",
        "title": "betarand"
      },
      "index": {
        "description": "Beta distribution random number generator positive values only Beta distribution random number generator positive values only This is an x-class noise generator ares betarand krange kalpha kbeta ires betarand krange kalpha kbeta kres betarand krange kalpha kbeta csound doc http www.csounds.com manual html betarand.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "betarand",
        "normalized": "a-\u003ea-\u003ea-\u003eSE a",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "a-\u003ea-\u003ea-\u003eSE a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:bexprnd",
      "description": {
        "fct-descr": "\u003cp\u003eExponential distribution random number generator.\n\u003c/p\u003e\u003cp\u003eExponential distribution random number generator. This is an x-class noise generator.\n\u003c/p\u003e\u003cpre\u003e ares  bexprnd  krange\n ires  bexprnd  krange\n kres  bexprnd  krange\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/bexprnd.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "a -\u003e SE a",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#bexprnd",
        "fct-type": "function",
        "title": "bexprnd"
      },
      "index": {
        "description": "Exponential distribution random number generator Exponential distribution random number generator This is an x-class noise generator ares bexprnd krange ires bexprnd krange kres bexprnd krange csound doc http www.csounds.com manual html bexprnd.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "bexprnd",
        "normalized": "a-\u003eSE a",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "a-\u003eSE a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:buzz",
      "description": {
        "fct-descr": "\u003cp\u003eOutput is a set of harmonically related sine partials.\n\u003c/p\u003e\u003cpre\u003e ares  buzz  xamp, xcps, knh, ifn [, iphs]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/buzz.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Tab -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#buzz",
        "fct-type": "function",
        "title": "buzz"
      },
      "index": {
        "description": "Output is set of harmonically related sine partials ares buzz xamp xcps knh ifn iphs csound doc http www.csounds.com manual html buzz.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "buzz",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eTab-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eTab-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:cabasa",
      "description": {
        "fct-descr": "\u003cp\u003eSemi-physical model of a cabasa sound.\n\u003c/p\u003e\u003cp\u003ecabasa is a semi-physical model of a cabasa sound. It is one of the PhISEM percussion opcodes. PhISEM (Physically Informed Stochastic Event Modeling) is an algorithmic approach for simulating collisions of multiple independent sound producing objects.\n\u003c/p\u003e\u003cpre\u003e ares  cabasa  iamp, idettack [, inum] [, idamp] [, imaxshake]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/cabasa.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#cabasa",
        "fct-type": "function",
        "title": "cabasa"
      },
      "index": {
        "description": "Semi-physical model of cabasa sound cabasa is semi-physical model of cabasa sound It is one of the PhISEM percussion opcodes PhISEM Physically Informed Stochastic Event Modeling is an algorithmic approach for simulating collisions of multiple independent sound producing objects ares cabasa iamp idettack inum idamp imaxshake csound doc http www.csounds.com manual html cabasa.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "cabasa",
        "normalized": "D-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:cauchy",
      "description": {
        "fct-descr": "\u003cp\u003eCauchy distribution random number generator.\n\u003c/p\u003e\u003cp\u003eCauchy distribution random number generator. This is an x-class noise generator.\n\u003c/p\u003e\u003cpre\u003e ares  cauchy  kalpha\n ires  cauchy  kalpha\n kres  cauchy  kalpha\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/cauchy.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "a -\u003e SE a",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#cauchy",
        "fct-type": "function",
        "title": "cauchy"
      },
      "index": {
        "description": "Cauchy distribution random number generator Cauchy distribution random number generator This is an x-class noise generator ares cauchy kalpha ires cauchy kalpha kres cauchy kalpha csound doc http www.csounds.com manual html cauchy.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "cauchy",
        "normalized": "a-\u003eSE a",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "a-\u003eSE a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:cauchyi",
      "description": {
        "fct-descr": "\u003cp\u003eCauchy distribution random number generator with\n       interpolation.\n\u003c/p\u003e\u003cp\u003eCauchy distribution random number generator with controlled\n       interpolation between values. This is an x-class noise\n       generator.\n\u003c/p\u003e\u003cpre\u003e ares  cauchyi  klambda, xamp, xcps\n ires  cauchyi  klambda, xamp, xcps\n kres  cauchyi  klambda, xamp, xcps\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/cauchyi.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "a -\u003e a -\u003e a -\u003e SE a",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#cauchyi",
        "fct-type": "function",
        "title": "cauchyi"
      },
      "index": {
        "description": "Cauchy distribution random number generator with interpolation Cauchy distribution random number generator with controlled interpolation between values This is an x-class noise generator ares cauchyi klambda xamp xcps ires cauchyi klambda xamp xcps kres cauchyi klambda xamp xcps csound doc http www.csounds.com manual html cauchyi.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "cauchyi",
        "normalized": "a-\u003ea-\u003ea-\u003eSE a",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "a-\u003ea-\u003ea-\u003eSE a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:chuap",
      "description": {
        "fct-descr": "\u003cp\u003eSimulates Chua's oscillator, an LRC oscillator with an active resistor, proved capable of bifurcation and chaotic attractors, with k-rate control of circuit elements.\n\u003c/p\u003e\u003cpre\u003e aI3, aV2, aV1  chuap  kL, kR0, kC1, kG, kGa, kGb, kE, kC2, iI3, iV2, iV1, ktime_step\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/chuap.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e D -\u003e D -\u003e D -\u003e Sig -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#chuap",
        "fct-type": "function",
        "title": "chuap"
      },
      "index": {
        "description": "Simulates Chua oscillator an LRC oscillator with an active resistor proved capable of bifurcation and chaotic attractors with k-rate control of circuit elements aI3 aV2 aV1 chuap kL kR0 kC1 kG kGa kGb kE kC2 iI3 iV2 iV1 ktime step csound doc http www.csounds.com manual html chuap.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "chuap",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eD-\u003eD-\u003eD-\u003eSig-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eD-\u003eD-\u003eD-\u003eSig-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:cosseg",
      "description": {
        "fct-descr": "\u003cp\u003eTrace a series of line segments between specified points with\n       cosine interpolation.\n\u003c/p\u003e\u003cpre\u003e ares  cosseg  ia, idur1, ib [, idur2] [, ic] [...]\n kres  cosseg  ia, idur1, ib [, idur2] [, ic] [...]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/cosseg.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "[D] -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#cosseg",
        "fct-type": "function",
        "title": "cosseg"
      },
      "index": {
        "description": "Trace series of line segments between specified points with cosine interpolation ares cosseg ia idur1 ib idur2 ic kres cosseg ia idur1 ib idur2 ic csound doc http www.csounds.com manual html cosseg.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "cosseg",
        "normalized": "[D]-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "[D]-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:cossegb",
      "description": {
        "fct-descr": "\u003cp\u003eTrace a series of line segments between specified absolute points with\n       cosine interpolation.\n\u003c/p\u003e\u003cpre\u003e ares  cossegb  ia, itim1, ib [, itim2] [, ic] [...]\n kres  cossegb  ia, itim1, ib [, itim2] [, ic] [...]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/cossegb.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "[D] -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#cossegb",
        "fct-type": "function",
        "title": "cossegb"
      },
      "index": {
        "description": "Trace series of line segments between specified absolute points with cosine interpolation ares cossegb ia itim1 ib itim2 ic kres cossegb ia itim1 ib itim2 ic csound doc http www.csounds.com manual html cossegb.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "cossegb",
        "normalized": "[D]-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "[D]-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:cossegr",
      "description": {
        "fct-descr": "\u003cp\u003eTrace a series of line segments between specified points with\n       cosine interpolation, including a release segment.\n\u003c/p\u003e\u003cpre\u003e ares  cossegr  ia, idur1, ib [, idur2] [, ic] [...], irel, iz\n kres  cossegr  ia, idur1, ib [, idur2] [, ic] [...], irel, iz\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/cossegr.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "[D] -\u003e D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#cossegr",
        "fct-type": "function",
        "title": "cossegr"
      },
      "index": {
        "description": "Trace series of line segments between specified points with cosine interpolation including release segment ares cossegr ia idur1 ib idur2 ic irel iz kres cossegr ia idur1 ib idur2 ic irel iz csound doc http www.csounds.com manual html cossegr.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "cossegr",
        "normalized": "[D]-\u003eD-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "[D]-\u003eD-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:crossfm",
      "description": {
        "fct-descr": "\u003cp\u003eTwo mutually frequency and/or phase modulated oscillators.\n\u003c/p\u003e\u003cp\u003eTwo oscillators, mutually frequency and/or phase modulated by each other.\n\u003c/p\u003e\u003cpre\u003e a1, a2  crossfm  xfrq1, xfrq2, xndx1, xndx2, kcps, ifn1, ifn2 [, iphs1] [, iphs2]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/crossfm.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Tab -\u003e Tab -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#crossfm",
        "fct-type": "function",
        "title": "crossfm"
      },
      "index": {
        "description": "Two mutually frequency and or phase modulated oscillators Two oscillators mutually frequency and or phase modulated by each other a1 a2 crossfm xfrq1 xfrq2 xndx1 xndx2 kcps ifn1 ifn2 iphs1 iphs2 csound doc http www.csounds.com manual html crossfm.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "crossfm",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eTab-\u003eTab-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eTab-\u003eTab-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:crossfmi",
      "description": {
        "fct-descr": "\u003cp\u003eTwo mutually frequency and/or phase modulated oscillators.\n\u003c/p\u003e\u003cp\u003eTwo oscillators, mutually frequency and/or phase modulated by each other.\n\u003c/p\u003e\u003cpre\u003e a1, a2  crossfmi  xfrq1, xfrq2, xndx1, xndx2, kcps, ifn1, ifn2 [, iphs1] [, iphs2]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/crossfm.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Tab -\u003e Tab -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#crossfmi",
        "fct-type": "function",
        "title": "crossfmi"
      },
      "index": {
        "description": "Two mutually frequency and or phase modulated oscillators Two oscillators mutually frequency and or phase modulated by each other a1 a2 crossfmi xfrq1 xfrq2 xndx1 xndx2 kcps ifn1 ifn2 iphs1 iphs2 csound doc http www.csounds.com manual html crossfm.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "crossfmi",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eTab-\u003eTab-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eTab-\u003eTab-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:crossfmpm",
      "description": {
        "fct-descr": "\u003cp\u003eTwo mutually frequency and/or phase modulated oscillators.\n\u003c/p\u003e\u003cp\u003eTwo oscillators, mutually frequency and/or phase modulated by each other.\n\u003c/p\u003e\u003cpre\u003e a1, a2  crossfmpm  xfrq1, xfrq2, xndx1, xndx2, kcps, ifn1, ifn2 [, iphs1] [, iphs2]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/crossfm.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Tab -\u003e Tab -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#crossfmpm",
        "fct-type": "function",
        "title": "crossfmpm"
      },
      "index": {
        "description": "Two mutually frequency and or phase modulated oscillators Two oscillators mutually frequency and or phase modulated by each other a1 a2 crossfmpm xfrq1 xfrq2 xndx1 xndx2 kcps ifn1 ifn2 iphs1 iphs2 csound doc http www.csounds.com manual html crossfm.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "crossfmpm",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eTab-\u003eTab-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eTab-\u003eTab-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:crossfmpmi",
      "description": {
        "fct-descr": "\u003cp\u003eTwo mutually frequency and/or phase modulated oscillators.\n\u003c/p\u003e\u003cp\u003eTwo oscillators, mutually frequency and/or phase modulated by each other.\n\u003c/p\u003e\u003cpre\u003e a1, a2  crossfmpmi  xfrq1, xfrq2, xndx1, xndx2, kcps, ifn1, ifn2 [, iphs1] [, iphs2]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/crossfm.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Tab -\u003e Tab -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#crossfmpmi",
        "fct-type": "function",
        "title": "crossfmpmi"
      },
      "index": {
        "description": "Two mutually frequency and or phase modulated oscillators Two oscillators mutually frequency and or phase modulated by each other a1 a2 crossfmpmi xfrq1 xfrq2 xndx1 xndx2 kcps ifn1 ifn2 iphs1 iphs2 csound doc http www.csounds.com manual html crossfm.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "crossfmpmi",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eTab-\u003eTab-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eTab-\u003eTab-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:crosspm",
      "description": {
        "fct-descr": "\u003cp\u003eTwo mutually frequency and/or phase modulated oscillators.\n\u003c/p\u003e\u003cp\u003eTwo oscillators, mutually frequency and/or phase modulated by each other.\n\u003c/p\u003e\u003cpre\u003e a1, a2  crosspm  xfrq1, xfrq2, xndx1, xndx2, kcps, ifn1, ifn2 [, iphs1] [, iphs2]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/crossfm.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Tab -\u003e Tab -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#crosspm",
        "fct-type": "function",
        "title": "crosspm"
      },
      "index": {
        "description": "Two mutually frequency and or phase modulated oscillators Two oscillators mutually frequency and or phase modulated by each other a1 a2 crosspm xfrq1 xfrq2 xndx1 xndx2 kcps ifn1 ifn2 iphs1 iphs2 csound doc http www.csounds.com manual html crossfm.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "crosspm",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eTab-\u003eTab-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eTab-\u003eTab-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:crosspmi",
      "description": {
        "fct-descr": "\u003cp\u003eTwo mutually frequency and/or phase modulated oscillators.\n\u003c/p\u003e\u003cp\u003eTwo oscillators, mutually frequency and/or phase modulated by each other.\n\u003c/p\u003e\u003cpre\u003e a1, a2  crosspmi  xfrq1, xfrq2, xndx1, xndx2, kcps, ifn1, ifn2 [, iphs1] [, iphs2]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/crossfm.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Tab -\u003e Tab -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#crosspmi",
        "fct-type": "function",
        "title": "crosspmi"
      },
      "index": {
        "description": "Two mutually frequency and or phase modulated oscillators Two oscillators mutually frequency and or phase modulated by each other a1 a2 crosspmi xfrq1 xfrq2 xndx1 xndx2 kcps ifn1 ifn2 iphs1 iphs2 csound doc http www.csounds.com manual html crossfm.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "crosspmi",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eTab-\u003eTab-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eTab-\u003eTab-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:crunch",
      "description": {
        "fct-descr": "\u003cp\u003eSemi-physical model of a crunch sound.\n\u003c/p\u003e\u003cp\u003ecrunch is a semi-physical model of a crunch sound. It is one of the PhISEM percussion opcodes. PhISEM (Physically Informed Stochastic Event Modeling) is an algorithmic approach for simulating collisions of multiple independent sound producing objects.\n\u003c/p\u003e\u003cpre\u003e ares  crunch  iamp, idettack [, inum] [, idamp] [, imaxshake]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/crunch.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#crunch",
        "fct-type": "function",
        "title": "crunch"
      },
      "index": {
        "description": "Semi-physical model of crunch sound crunch is semi-physical model of crunch sound It is one of the PhISEM percussion opcodes PhISEM Physically Informed Stochastic Event Modeling is an algorithmic approach for simulating collisions of multiple independent sound producing objects ares crunch iamp idettack inum idamp imaxshake csound doc http www.csounds.com manual html crunch.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "crunch",
        "normalized": "D-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:cuserrnd",
      "description": {
        "fct-descr": "\u003cp\u003eContinuous USER-defined-distribution RaNDom generator.\n\u003c/p\u003e\u003cpre\u003e aout  cuserrnd  kmin, kmax, ktableNum\n iout  cuserrnd  imin, imax, itableNum\n kout  cuserrnd  kmin, kmax, ktableNum\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/cuserrnd.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "a -\u003e a -\u003e a -\u003e SE a",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#cuserrnd",
        "fct-type": "function",
        "title": "cuserrnd"
      },
      "index": {
        "description": "Continuous USER-defined-distribution RaNDom generator aout cuserrnd kmin kmax ktableNum iout cuserrnd imin imax itableNum kout cuserrnd kmin kmax ktableNum csound doc http www.csounds.com manual html cuserrnd.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "cuserrnd",
        "normalized": "a-\u003ea-\u003ea-\u003eSE a",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "a-\u003ea-\u003ea-\u003eSE a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:diskgrain",
      "description": {
        "fct-descr": "\u003cp\u003eSynchronous granular synthesis, using a soundfile as source.\n\u003c/p\u003e\u003cp\u003ediskgrain implements synchronous granular synthesis. The source sound for the grains is obtained by reading a soundfile containing the samples of the source waveform.\n\u003c/p\u003e\u003cpre\u003e asig  diskgrain  Sfname, kamp, kfreq, kpitch, kgrsize, kprate, \\\n           ifun, iolaps [,imaxgrsize , ioffset]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/diskgrain.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#diskgrain",
        "fct-type": "function",
        "title": "diskgrain"
      },
      "index": {
        "description": "Synchronous granular synthesis using soundfile as source diskgrain implements synchronous granular synthesis The source sound for the grains is obtained by reading soundfile containing the samples of the source waveform asig diskgrain Sfname kamp kfreq kpitch kgrsize kprate ifun iolaps imaxgrsize ioffset csound doc http www.csounds.com manual html diskgrain.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "diskgrain",
        "normalized": "Str-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eD-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eD-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:dripwater",
      "description": {
        "fct-descr": "\u003cp\u003eSemi-physical model of a water drop.\n\u003c/p\u003e\u003cp\u003edripwater is a semi-physical model of a water drop. It is one of the PhISEM percussion opcodes. PhISEM (Physically Informed Stochastic Event Modeling) is an algorithmic approach for simulating collisions of multiple independent sound producing objects.\n\u003c/p\u003e\u003cpre\u003e ares  dripwater  kamp, idettack [, inum] [, idamp] [, imaxshake] [, ifreq] \\\n           [, ifreq1] [, ifreq2]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/dripwater.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#dripwater",
        "fct-type": "function",
        "title": "dripwater"
      },
      "index": {
        "description": "Semi-physical model of water drop dripwater is semi-physical model of water drop It is one of the PhISEM percussion opcodes PhISEM Physically Informed Stochastic Event Modeling is an algorithmic approach for simulating collisions of multiple independent sound producing objects ares dripwater kamp idettack inum idamp imaxshake ifreq ifreq1 ifreq2 csound doc http www.csounds.com manual html dripwater.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "dripwater",
        "normalized": "Sig-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:duserrnd",
      "description": {
        "fct-descr": "\u003cp\u003eDiscrete USER-defined-distribution RaNDom generator.\n\u003c/p\u003e\u003cpre\u003e aout  duserrnd  ktableNum\n iout  duserrnd  itableNum\n kout  duserrnd  ktableNum\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/duserrnd.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "a -\u003e SE a",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#duserrnd",
        "fct-type": "function",
        "title": "duserrnd"
      },
      "index": {
        "description": "Discrete USER-defined-distribution RaNDom generator aout duserrnd ktableNum iout duserrnd itableNum kout duserrnd ktableNum csound doc http www.csounds.com manual html duserrnd.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "duserrnd",
        "normalized": "a-\u003eSE a",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "a-\u003eSE a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:dust",
      "description": {
        "fct-descr": "\u003cp\u003eRandom impulses.\n\u003c/p\u003e\u003cp\u003eGenerates random impulses from 0 to 1.\n\u003c/p\u003e\u003cpre\u003e ares  dust  kamp, kdensity\n kres  dust  kamp, kdensity\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/dust.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e SE Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#dust",
        "fct-type": "function",
        "title": "dust"
      },
      "index": {
        "description": "Random impulses Generates random impulses from to ares dust kamp kdensity kres dust kamp kdensity csound doc http www.csounds.com manual html dust.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "dust",
        "normalized": "Sig-\u003eSig-\u003eSE Sig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSE Sig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:dust2",
      "description": {
        "fct-descr": "\u003cp\u003eRandom impulses.\n\u003c/p\u003e\u003cp\u003eGenerates random impulses from -1 to 1.\n\u003c/p\u003e\u003cpre\u003e ares  dust2  kamp, kdensity\n kres  dust2  kamp, kdensity\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/dust2.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e SE Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#dust2",
        "fct-type": "function",
        "title": "dust2"
      },
      "index": {
        "description": "Random impulses Generates random impulses from to ares dust2 kamp kdensity kres dust2 kamp kdensity csound doc http www.csounds.com manual html dust2.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "dust2",
        "normalized": "Sig-\u003eSig-\u003eSE Sig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSE Sig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:envlpx",
      "description": {
        "fct-descr": "\u003cp\u003eApplies an envelope consisting of 3 segments.\n\u003c/p\u003e\u003cp\u003eenvlpx -- apply an envelope consisting of 3 segments:\n\u003c/p\u003e\u003cpre\u003e ares  envlpx  xamp, irise, idur, idec, ifn, iatss, iatdec [, ixmod]\n kres  envlpx  kamp, irise, idur, idec, ifn, iatss, iatdec [, ixmod]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/envlpx.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e D -\u003e D -\u003e D -\u003e Tab -\u003e D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#envlpx",
        "fct-type": "function",
        "title": "envlpx"
      },
      "index": {
        "description": "Applies an envelope consisting of segments envlpx apply an envelope consisting of segments ares envlpx xamp irise idur idec ifn iatss iatdec ixmod kres envlpx kamp irise idur idec ifn iatss iatdec ixmod csound doc http www.csounds.com manual html envlpx.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "envlpx",
        "normalized": "Sig-\u003eD-\u003eD-\u003eD-\u003eTab-\u003eD-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eD-\u003eD-\u003eD-\u003eTab-\u003eD-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:envlpxr",
      "description": {
        "fct-descr": "\u003cp\u003eThe envlpx opcode with a final release segment.\n\u003c/p\u003e\u003cp\u003eenvlpxr is the same as envlpx except that the final segment is entered only on sensing a MIDI note release. The note is then extended by the decay time.\n\u003c/p\u003e\u003cpre\u003e ares  envlpxr  xamp, irise, idec, ifn, iatss, iatdec [, ixmod] [,irind]\n kres  envlpxr  kamp, irise, idec, ifn, iatss, iatdec [, ixmod] [,irind]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/envlpxr.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e D -\u003e D -\u003e Tab -\u003e D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#envlpxr",
        "fct-type": "function",
        "title": "envlpxr"
      },
      "index": {
        "description": "The envlpx opcode with final release segment envlpxr is the same as envlpx except that the final segment is entered only on sensing MIDI note release The note is then extended by the decay time ares envlpxr xamp irise idec ifn iatss iatdec ixmod irind kres envlpxr kamp irise idec ifn iatss iatdec ixmod irind csound doc http www.csounds.com manual html envlpxr.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "envlpxr",
        "normalized": "Sig-\u003eD-\u003eD-\u003eTab-\u003eD-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eD-\u003eD-\u003eTab-\u003eD-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:expcurve",
      "description": {
        "fct-descr": "\u003cp\u003eThis opcode implements a formula for generating a normalised exponential curve in range 0 - 1. It is based on the Max / MSP work of Eric Singer (c) 1994.\n\u003c/p\u003e\u003cp\u003eGenerates an exponential curve in range 0 to 1 of arbitrary steepness.\n       Steepness index equal to or lower than 1.0 will result in Not-a-Number\n       errors and cause unstable behavior.\n\u003c/p\u003e\u003cpre\u003e kout  expcurve  kindex, ksteepness\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/expcurve.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#expcurve",
        "fct-type": "function",
        "title": "expcurve"
      },
      "index": {
        "description": "This opcode implements formula for generating normalised exponential curve in range It is based on the Max MSP work of Eric Singer Generates an exponential curve in range to of arbitrary steepness Steepness index equal to or lower than will result in Not-a-Number errors and cause unstable behavior kout expcurve kindex ksteepness csound doc http www.csounds.com manual html expcurve.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "expcurve",
        "normalized": "Sig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:expon",
      "description": {
        "fct-descr": "\u003cp\u003eTrace an exponential curve between specified points.\n\u003c/p\u003e\u003cpre\u003e ares  expon  ia, idur, ib\n kres  expon  ia, idur, ib\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/expon.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#expon",
        "fct-type": "function",
        "title": "expon"
      },
      "index": {
        "description": "Trace an exponential curve between specified points ares expon ia idur ib kres expon ia idur ib csound doc http www.csounds.com manual html expon.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "expon",
        "normalized": "D-\u003eD-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:exprand",
      "description": {
        "fct-descr": "\u003cp\u003eExponential distribution random number generator (positive values only).\n\u003c/p\u003e\u003cp\u003eExponential distribution random number generator (positive values only). This is an x-class noise generator.\n\u003c/p\u003e\u003cpre\u003e ares  exprand  klambda\n ires  exprand  klambda\n kres  exprand  klambda\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/exprand.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "a -\u003e SE a",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#exprand",
        "fct-type": "function",
        "title": "exprand"
      },
      "index": {
        "description": "Exponential distribution random number generator positive values only Exponential distribution random number generator positive values only This is an x-class noise generator ares exprand klambda ires exprand klambda kres exprand klambda csound doc http www.csounds.com manual html exprand.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "exprand",
        "normalized": "a-\u003eSE a",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "a-\u003eSE a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:exprandi",
      "description": {
        "fct-descr": "\u003cp\u003eExponential distribution random number generator with\n       interpolation (positive values only).\n\u003c/p\u003e\u003cp\u003eExponential distribution random number generator with controlled\n       interpolation between values (positive values only). This is an\n       x-class noise generator.\n\u003c/p\u003e\u003cpre\u003e ares  exprandi  klambda, xamp, xcps\n ires  exprandi  klambda, xamp, xcps\n kres  exprandi  klambda, xamp, xcps\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/exprandi.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "a -\u003e a -\u003e a -\u003e SE a",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#exprandi",
        "fct-type": "function",
        "title": "exprandi"
      },
      "index": {
        "description": "Exponential distribution random number generator with interpolation positive values only Exponential distribution random number generator with controlled interpolation between values positive values only This is an x-class noise generator ares exprandi klambda xamp xcps ires exprandi klambda xamp xcps kres exprandi klambda xamp xcps csound doc http www.csounds.com manual html exprandi.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "exprandi",
        "normalized": "a-\u003ea-\u003ea-\u003eSE a",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "a-\u003ea-\u003ea-\u003eSE a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:expseg",
      "description": {
        "fct-descr": "\u003cp\u003eTrace a series of exponential segments between specified points.\n\u003c/p\u003e\u003cpre\u003e ares  expseg  ia, idur1, ib [, idur2] [, ic] [...]\n kres  expseg  ia, idur1, ib [, idur2] [, ic] [...]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/expseg.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "[D] -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#expseg",
        "fct-type": "function",
        "title": "expseg"
      },
      "index": {
        "description": "Trace series of exponential segments between specified points ares expseg ia idur1 ib idur2 ic kres expseg ia idur1 ib idur2 ic csound doc http www.csounds.com manual html expseg.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "expseg",
        "normalized": "[D]-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "[D]-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:expsega",
      "description": {
        "fct-descr": "\u003cp\u003eAn exponential segment generator operating at a-rate.\n\u003c/p\u003e\u003cp\u003eAn exponential segment generator operating at a-rate. This unit is almost identical to expseg, but more precise when defining segments with very short durations (i.e., in a percussive attack phase) at audio rate.\n\u003c/p\u003e\u003cpre\u003e ares  expsega  ia, idur1, ib [, idur2] [, ic] [...]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/expsega.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "[D] -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#expsega",
        "fct-type": "function",
        "title": "expsega"
      },
      "index": {
        "description": "An exponential segment generator operating at a-rate An exponential segment generator operating at a-rate This unit is almost identical to expseg but more precise when defining segments with very short durations i.e in percussive attack phase at audio rate ares expsega ia idur1 ib idur2 ic csound doc http www.csounds.com manual html expsega.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "expsega",
        "normalized": "[D]-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "[D]-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:expsegb",
      "description": {
        "fct-descr": "\u003cp\u003eTrace a series of exponential segments between specified\n       absolute points.\n\u003c/p\u003e\u003cpre\u003e ares  expsegb  ia, itim1, ib [, itim2] [, ic] [...]\n kres  expsegb  ia, itim1, ib [, itim2] [, ic] [...]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/expsegb.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "[D] -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#expsegb",
        "fct-type": "function",
        "title": "expsegb"
      },
      "index": {
        "description": "Trace series of exponential segments between specified absolute points ares expsegb ia itim1 ib itim2 ic kres expsegb ia itim1 ib itim2 ic csound doc http www.csounds.com manual html expsegb.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "expsegb",
        "normalized": "[D]-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "[D]-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:expsegba",
      "description": {
        "fct-descr": "\u003cp\u003eAn exponential segment generator operating at a-rate with\n       absolute times.\n\u003c/p\u003e\u003cp\u003eAn exponential segment generator operating at a-rate. This unit\n       is almost identical to expsegb, but\n       more precise when defining segments with very short durations\n       (i.e., in a percussive attack phase) at audio rate.\n\u003c/p\u003e\u003cpre\u003e ares  expsegba  ia, itim1, ib [, itim2] [, ic] [...]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/expsegba.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#expsegba",
        "fct-type": "function",
        "title": "expsegba"
      },
      "index": {
        "description": "An exponential segment generator operating at a-rate with absolute times An exponential segment generator operating at a-rate This unit is almost identical to expsegb but more precise when defining segments with very short durations i.e in percussive attack phase at audio rate ares expsegba ia itim1 ib itim2 ic csound doc http www.csounds.com manual html expsegba.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "expsegba",
        "normalized": "D-\u003eD-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:expsegr",
      "description": {
        "fct-descr": "\u003cp\u003eTrace a series of exponential segments between specified points including a release segment.\n\u003c/p\u003e\u003cpre\u003e ares  expsegr  ia, idur1, ib [, idur2] [, ic] [...], irel, iz\n kres  expsegr  ia, idur1, ib [, idur2] [, ic] [...], irel, iz\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/expsegr.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "[D] -\u003e D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#expsegr",
        "fct-type": "function",
        "title": "expsegr"
      },
      "index": {
        "description": "Trace series of exponential segments between specified points including release segment ares expsegr ia idur1 ib idur2 ic irel iz kres expsegr ia idur1 ib idur2 ic irel iz csound doc http www.csounds.com manual html expsegr.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "expsegr",
        "normalized": "[D]-\u003eD-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "[D]-\u003eD-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:flooper",
      "description": {
        "fct-descr": "\u003cp\u003eFunction-table-based crossfading looper.\n\u003c/p\u003e\u003cp\u003eThis opcode reads audio from a function table and plays it back in a loop with user-defined\n    start time, duration and crossfade time. It also allows the pitch of the loop to be controlled,\n    including reversed playback. It accepts non-power-of-two tables, such as deferred-allocation\n    GEN01 tables.\n\u003c/p\u003e\u003cpre\u003e asig  flooper  kamp, kpitch, istart, idur, ifad, ifn\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/flooper.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e D -\u003e D -\u003e D -\u003e Tab -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#flooper",
        "fct-type": "function",
        "title": "flooper"
      },
      "index": {
        "description": "Function-table-based crossfading looper This opcode reads audio from function table and plays it back in loop with user-defined start time duration and crossfade time It also allows the pitch of the loop to be controlled including reversed playback It accepts non-power-of-two tables such as deferred-allocation GEN01 tables asig flooper kamp kpitch istart idur ifad ifn csound doc http www.csounds.com manual html flooper.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "flooper",
        "normalized": "Sig-\u003eSig-\u003eD-\u003eD-\u003eD-\u003eTab-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eD-\u003eD-\u003eD-\u003eTab-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:flooper2",
      "description": {
        "fct-descr": "\u003cp\u003eFunction-table-based crossfading looper.\n\u003c/p\u003e\u003cp\u003eThis opcode implements a crossfading looper with variable loop parameters and three\n   looping modes, optionally using a table for its crossfade shape. It accepts \n   non-power-of-two tables for its source sounds, such as deferred-allocation\n    GEN01 tables.\n\u003c/p\u003e\u003cpre\u003e asig  flooper2  kamp, kpitch, kloopstart, kloopend, kcrossfade, ifn \\\n           [, istart, imode, ifenv, iskip]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/flooper2.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Tab -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#flooper2",
        "fct-type": "function",
        "title": "flooper2"
      },
      "index": {
        "description": "Function-table-based crossfading looper This opcode implements crossfading looper with variable loop parameters and three looping modes optionally using table for its crossfade shape It accepts non-power-of-two tables for its source sounds such as deferred-allocation GEN01 tables asig flooper2 kamp kpitch kloopstart kloopend kcrossfade ifn istart imode ifenv iskip csound doc http www.csounds.com manual html flooper2.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "flooper2",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eTab-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eTab-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:fluidAllOut",
      "description": {
        "fct-descr": "\u003cp\u003eCollects all audio from all Fluidsynth engines in a performance\n\u003c/p\u003e\u003cpre\u003e aleft, aright  fluidAllOut &#160;\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/fluidAllOut.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "a",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#fluidAllOut",
        "fct-type": "function",
        "title": "fluidAllOut"
      },
      "index": {
        "description": "Collects all audio from all Fluidsynth engines in performance aleft aright fluidAllOut csound doc http www.csounds.com manual html fluidAllOut.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "fluidAllOut",
        "normalized": "",
        "package": "csound-expression-opcodes",
        "partial": "All Out",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:fluidCCi",
      "description": {
        "fct-descr": "\u003cp\u003eSends a MIDI controller data message to fluid.\n\u003c/p\u003e\u003cp\u003eSends a MIDI controller data (MIDI controller number and value to use)\n     message to a fluid engine by number on the user specified MIDI channel number.\n\u003c/p\u003e\u003cpre\u003e  fluidCCi  iEngineNumber, iChannelNumber, iControllerNumber, iValue\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/fluidCCi.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#fluidCCi",
        "fct-type": "function",
        "title": "fluidCCi"
      },
      "index": {
        "description": "Sends MIDI controller data message to fluid Sends MIDI controller data MIDI controller number and value to use message to fluid engine by number on the user specified MIDI channel number fluidCCi iEngineNumber iChannelNumber iControllerNumber iValue csound doc http www.csounds.com manual html fluidCCi.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "fluidCCi",
        "normalized": "D-\u003eD-\u003eD-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "CCi",
        "signature": "D-\u003eD-\u003eD-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:fluidCCk",
      "description": {
        "fct-descr": "\u003cp\u003eSends a MIDI controller data message to fluid.\n\u003c/p\u003e\u003cp\u003eSends a MIDI controller data (MIDI controller number and value to use)\n     message to a fluid engine by number on the user specified MIDI channel number.\n\u003c/p\u003e\u003cpre\u003e  fluidCCk  iEngineNumber, iChannelNumber, iControllerNumber, kValue\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/fluidCCk.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e D -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#fluidCCk",
        "fct-type": "function",
        "title": "fluidCCk"
      },
      "index": {
        "description": "Sends MIDI controller data message to fluid Sends MIDI controller data MIDI controller number and value to use message to fluid engine by number on the user specified MIDI channel number fluidCCk iEngineNumber iChannelNumber iControllerNumber kValue csound doc http www.csounds.com manual html fluidCCk.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "fluidCCk",
        "normalized": "D-\u003eD-\u003eD-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "CCk",
        "signature": "D-\u003eD-\u003eD-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:fluidControl",
      "description": {
        "fct-descr": "\u003cp\u003eSends MIDI note on, note off, and other messages to a SoundFont preset.\n\u003c/p\u003e\u003cp\u003eThe fluid opcodes provide a simple\n     Csound opcode wrapper around Peter Hanappe's Fluidsynth SoundFont2\n     synthesizer. This implementation accepts any MIDI note on, note\n     off, controller, pitch bend, or program change message at\n     k-rate. Maximum polyphony is 4096 simultaneously sounding\n     voices. Any number of SoundFonts may be loaded and played\n     simultaneously.\n\u003c/p\u003e\u003cpre\u003e  fluidControl  ienginenum, kstatus, kchannel, kdata1, kdata2\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/fluidControl.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#fluidControl",
        "fct-type": "function",
        "title": "fluidControl"
      },
      "index": {
        "description": "Sends MIDI note on note off and other messages to SoundFont preset The fluid opcodes provide simple Csound opcode wrapper around Peter Hanappe Fluidsynth SoundFont2 synthesizer This implementation accepts any MIDI note on note off controller pitch bend or program change message at k-rate Maximum polyphony is simultaneously sounding voices Any number of SoundFonts may be loaded and played simultaneously fluidControl ienginenum kstatus kchannel kdata1 kdata2 csound doc http www.csounds.com manual html fluidControl.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "fluidControl",
        "normalized": "D-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "Control",
        "signature": "D-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:fluidEngine",
      "description": {
        "fct-descr": "\u003cp\u003eInstantiates a fluidsynth engine.\n\u003c/p\u003e\u003cp\u003eInstantiates a fluidsynth engine, and returns ienginenum to identify the\n     engine. ienginenum is passed to other other opcodes for loading \n     and playing SoundFonts and gathering the generated sound.\n\u003c/p\u003e\u003cpre\u003e ienginenum  fluidEngine  [iReverbEnabled] [, iChorusEnabled] [,iNumChannels] [, iPolyphony] \n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/fluidEngine.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#fluidEngine",
        "fct-type": "function",
        "title": "fluidEngine"
      },
      "index": {
        "description": "Instantiates fluidsynth engine Instantiates fluidsynth engine and returns ienginenum to identify the engine ienginenum is passed to other other opcodes for loading and playing SoundFonts and gathering the generated sound ienginenum fluidEngine iReverbEnabled iChorusEnabled iNumChannels iPolyphony csound doc http www.csounds.com manual html fluidEngine.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "fluidEngine",
        "normalized": "",
        "package": "csound-expression-opcodes",
        "partial": "Engine",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:fluidLoad",
      "description": {
        "fct-descr": "\u003cp\u003eLoads a SoundFont into a fluidEngine, optionally listing SoundFont contents.\n\u003c/p\u003e\u003cp\u003eLoads a SoundFont into an instance of a fluidEngine, optionally\n     listing banks and presets for SoundFont.\n\u003c/p\u003e\u003cpre\u003e isfnum  fluidLoad  soundfont, ienginenum[, ilistpresets]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/fluidLoad.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e Tab",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#fluidLoad",
        "fct-type": "function",
        "title": "fluidLoad"
      },
      "index": {
        "description": "Loads SoundFont into fluidEngine optionally listing SoundFont contents Loads SoundFont into an instance of fluidEngine optionally listing banks and presets for SoundFont isfnum fluidLoad soundfont ienginenum ilistpresets csound doc http www.csounds.com manual html fluidLoad.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "fluidLoad",
        "normalized": "D-\u003eD-\u003eTab",
        "package": "csound-expression-opcodes",
        "partial": "Load",
        "signature": "D-\u003eD-\u003eTab"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:fluidNote",
      "description": {
        "fct-descr": "\u003cp\u003ePlays a note on a channel in a fluidSynth engine.\n\u003c/p\u003e\u003cp\u003ePlays a note at imidikey pitch and imidivel velocity\n     on ichannelnum channel of number ienginenum fluidEngine.\n\u003c/p\u003e\u003cpre\u003e  fluidNote  ienginenum, ichannelnum, imidikey, imidivel\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/fluidNote.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#fluidNote",
        "fct-type": "function",
        "title": "fluidNote"
      },
      "index": {
        "description": "Plays note on channel in fluidSynth engine Plays note at imidikey pitch and imidivel velocity on ichannelnum channel of number ienginenum fluidEngine fluidNote ienginenum ichannelnum imidikey imidivel csound doc http www.csounds.com manual html fluidNote.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "fluidNote",
        "normalized": "D-\u003eD-\u003eD-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "Note",
        "signature": "D-\u003eD-\u003eD-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:fluidOut",
      "description": {
        "fct-descr": "\u003cp\u003eOutputs sound from a given fluidEngine\n\u003c/p\u003e\u003cp\u003eOutputs the sound from a fluidEngine.\n\u003c/p\u003e\u003cpre\u003e aleft, aright  fluidOut  ienginenum\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/fluidOut.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#fluidOut",
        "fct-type": "function",
        "title": "fluidOut"
      },
      "index": {
        "description": "Outputs sound from given fluidEngine Outputs the sound from fluidEngine aleft aright fluidOut ienginenum csound doc http www.csounds.com manual html fluidOut.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "fluidOut",
        "normalized": "D-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "Out",
        "signature": "D-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:fluidProgramSelect",
      "description": {
        "fct-descr": "\u003cp\u003eAssigns a preset from a SoundFont to a channel on a fluidEngine.\n\u003c/p\u003e\u003cpre\u003e  fluidProgramSelect  ienginenum, ichannelnum, isfnum, ibanknum, ipresetnum\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/fluidProgramSelect.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e Tab -\u003e D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#fluidProgramSelect",
        "fct-type": "function",
        "title": "fluidProgramSelect"
      },
      "index": {
        "description": "Assigns preset from SoundFont to channel on fluidEngine fluidProgramSelect ienginenum ichannelnum isfnum ibanknum ipresetnum csound doc http www.csounds.com manual html fluidProgramSelect.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "fluidProgramSelect",
        "normalized": "D-\u003eD-\u003eTab-\u003eD-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "Program Select",
        "signature": "D-\u003eD-\u003eTab-\u003eD-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:fluidSetInterpMethod",
      "description": {
        "fct-descr": "\u003cp\u003eSet interpolation method for channel in Fluid Engine\n\u003c/p\u003e\u003cp\u003eSet interpolation method for channel in Fluid Engine.  Lower \n     order interpolation methods will render faster at lower fidelity while \n     higher order interpolation methods will render slower at higher fidelity.\n     Default interpolation for a channel is 4th order interpolation.\n\u003c/p\u003e\u003cpre\u003e  fluidSetInterpMethod  ienginenum, ichannelnum, iInterpMethod\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/fluidSetInterpMethod.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#fluidSetInterpMethod",
        "fct-type": "function",
        "title": "fluidSetInterpMethod"
      },
      "index": {
        "description": "Set interpolation method for channel in Fluid Engine Set interpolation method for channel in Fluid Engine Lower order interpolation methods will render faster at lower fidelity while higher order interpolation methods will render slower at higher fidelity Default interpolation for channel is th order interpolation fluidSetInterpMethod ienginenum ichannelnum iInterpMethod csound doc http www.csounds.com manual html fluidSetInterpMethod.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "fluidSetInterpMethod",
        "normalized": "D-\u003eD-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "Set Interp Method",
        "signature": "D-\u003eD-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:fmb3",
      "description": {
        "fct-descr": "\u003cp\u003eUses FM synthesis to create a Hammond B3 organ sound.\n\u003c/p\u003e\u003cp\u003eUses FM synthesis to create a Hammond B3 organ sound. It comes from a family of FM sounds, all using 4 basic oscillators and various architectures, as used in the TX81Z synthesizer.\n\u003c/p\u003e\u003cpre\u003e ares  fmb3  kamp, kfreq, kc1, kc2, kvdepth, kvrate[, ifn1, ifn2, ifn3, \\\n           ifn4, ivfn]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/fmb3.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#fmb3",
        "fct-type": "function",
        "title": "fmb3"
      },
      "index": {
        "description": "Uses FM synthesis to create Hammond B3 organ sound Uses FM synthesis to create Hammond B3 organ sound It comes from family of FM sounds all using basic oscillators and various architectures as used in the TX81Z synthesizer ares fmb3 kamp kfreq kc1 kc2 kvdepth kvrate ifn1 ifn2 ifn3 ifn4 ivfn csound doc http www.csounds.com manual html fmb3.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "fmb3",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:fmbell",
      "description": {
        "fct-descr": "\u003cp\u003eUses FM synthesis to create a tublar bell sound.\n\u003c/p\u003e\u003cp\u003eUses FM synthesis to create a tublar bell sound. It comes from a family of FM sounds, all using 4 basic oscillators and various architectures, as used in the TX81Z synthesizer.\n\u003c/p\u003e\u003cpre\u003e ares  fmbell  kamp, kfreq, kc1, kc2, kvdepth, kvrate[, ifn1, ifn2, ifn3, \\\n           ifn4, ivfn, isus]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/fmbell.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#fmbell",
        "fct-type": "function",
        "title": "fmbell"
      },
      "index": {
        "description": "Uses FM synthesis to create tublar bell sound Uses FM synthesis to create tublar bell sound It comes from family of FM sounds all using basic oscillators and various architectures as used in the TX81Z synthesizer ares fmbell kamp kfreq kc1 kc2 kvdepth kvrate ifn1 ifn2 ifn3 ifn4 ivfn isus csound doc http www.csounds.com manual html fmbell.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "fmbell",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:fmmetal",
      "description": {
        "fct-descr": "\u003cp\u003eUses FM synthesis to create a &#226;&#128;&#156;Heavy Metal&#226;&#128;&#157; sou\u003c/p\u003e\u003cp\u003eUses FM synthesis to create a &#226;&#128;&#156;Heavy Metal&#226;&#128;&#157; sound. It comes from a family of FM sounds, all using 4 basic oscillators and various architectures, as used in the TX81Z synthesiz\u003c/p\u003e\u003cpre\u003e ares  fmmetal  kamp, kfreq, kc1, kc2, kvdepth, kvrate, ifn1, ifn2, ifn3, \\\n           ifn4, ivfn\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/fmmetal.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Tab -\u003e Tab -\u003e Tab -\u003e Tab -\u003e Tab -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#fmmetal",
        "fct-type": "function",
        "title": "fmmetal"
      },
      "index": {
        "description": "Uses FM synthesis to create Heavy Metal sou Uses FM synthesis to create Heavy Metal sound It comes from family of FM sounds all using basic oscillators and various architectures as used in the TX81Z synthesiz ares fmmetal kamp kfreq kc1 kc2 kvdepth kvrate ifn1 ifn2 ifn3 ifn4 ivfn csound doc http www.csounds.com manual html fmmetal.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "fmmetal",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eTab-\u003eTab-\u003eTab-\u003eTab-\u003eTab-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eTab-\u003eTab-\u003eTab-\u003eTab-\u003eTab-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:fmpercfl",
      "description": {
        "fct-descr": "\u003cp\u003eUses FM synthesis to create a percussive flute sound.\n\u003c/p\u003e\u003cp\u003eUses FM synthesis to create a percussive flute sound. It comes from a family of FM sounds, all using 4 basic oscillators and various architectures, as used in the TX81Z synthesizer.\n\u003c/p\u003e\u003cpre\u003e ares  fmpercfl  kamp, kfreq, kc1, kc2, kvdepth, kvrate[, ifn1, ifn2, \\\n           ifn3, ifn4, ivfn]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/fmpercfl.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#fmpercfl",
        "fct-type": "function",
        "title": "fmpercfl"
      },
      "index": {
        "description": "Uses FM synthesis to create percussive flute sound Uses FM synthesis to create percussive flute sound It comes from family of FM sounds all using basic oscillators and various architectures as used in the TX81Z synthesizer ares fmpercfl kamp kfreq kc1 kc2 kvdepth kvrate ifn1 ifn2 ifn3 ifn4 ivfn csound doc http www.csounds.com manual html fmpercfl.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "fmpercfl",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:fmrhode",
      "description": {
        "fct-descr": "\u003cp\u003eUses FM synthesis to create a Fender Rhodes electric piano sound.\n\u003c/p\u003e\u003cp\u003eUses FM synthesis to create a Fender Rhodes electric piano sound. It comes from a family of FM sounds, all using 4 basic oscillators and various architectures, as used in the TX81Z synthesizer.\n\u003c/p\u003e\u003cpre\u003e ares  fmrhode  kamp, kfreq, kc1, kc2, kvdepth, kvrate, ifn1, ifn2, \\\n           ifn3, ifn4, ivfn\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/fmrhode.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Tab -\u003e Tab -\u003e Tab -\u003e Tab -\u003e Tab -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#fmrhode",
        "fct-type": "function",
        "title": "fmrhode"
      },
      "index": {
        "description": "Uses FM synthesis to create Fender Rhodes electric piano sound Uses FM synthesis to create Fender Rhodes electric piano sound It comes from family of FM sounds all using basic oscillators and various architectures as used in the TX81Z synthesizer ares fmrhode kamp kfreq kc1 kc2 kvdepth kvrate ifn1 ifn2 ifn3 ifn4 ivfn csound doc http www.csounds.com manual html fmrhode.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "fmrhode",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eTab-\u003eTab-\u003eTab-\u003eTab-\u003eTab-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eTab-\u003eTab-\u003eTab-\u003eTab-\u003eTab-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:fmvoice",
      "description": {
        "fct-descr": "\u003cp\u003eFM Singing Voice Synthesis\n\u003c/p\u003e\u003cpre\u003e ares  fmvoice  kamp, kfreq, kvowel, ktilt, kvibamt, kvibrate[, ifn1, \\\n           ifn2, ifn3, ifn4, ivibfn]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/fmvoice.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#fmvoice",
        "fct-type": "function",
        "title": "fmvoice"
      },
      "index": {
        "description": "FM Singing Voice Synthesis ares fmvoice kamp kfreq kvowel ktilt kvibamt kvibrate ifn1 ifn2 ifn3 ifn4 ivibfn csound doc http www.csounds.com manual html fmvoice.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "fmvoice",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:fmwurlie",
      "description": {
        "fct-descr": "\u003cp\u003eUses FM synthesis to create a Wurlitzer electric piano sound.\n\u003c/p\u003e\u003cp\u003eUses FM synthesis to create a Wurlitzer electric piano sound. It comes from a family of FM sounds, all using 4 basic oscillators and various architectures, as used in the TX81Z synthesizer.\n\u003c/p\u003e\u003cpre\u003e ares  fmwurlie  kamp, kfreq, kc1, kc2, kvdepth, kvrate, ifn1, ifn2, ifn3, \\\n           ifn4, ivfn\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/fmwurlie.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Tab -\u003e Tab -\u003e Tab -\u003e Tab -\u003e Tab -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#fmwurlie",
        "fct-type": "function",
        "title": "fmwurlie"
      },
      "index": {
        "description": "Uses FM synthesis to create Wurlitzer electric piano sound Uses FM synthesis to create Wurlitzer electric piano sound It comes from family of FM sounds all using basic oscillators and various architectures as used in the TX81Z synthesizer ares fmwurlie kamp kfreq kc1 kc2 kvdepth kvrate ifn1 ifn2 ifn3 ifn4 ivfn csound doc http www.csounds.com manual html fmwurlie.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "fmwurlie",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eTab-\u003eTab-\u003eTab-\u003eTab-\u003eTab-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eTab-\u003eTab-\u003eTab-\u003eTab-\u003eTab-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:fof",
      "description": {
        "fct-descr": "\u003cp\u003eProduces sinusoid bursts useful for formant and granular synthesis.\n\u003c/p\u003e\u003cp\u003eAudio output is a succession of sinusoid bursts initiated at frequency xfund with a spectral peak at xform. For xfund above 25 Hz these bursts produce a speech-like formant with spectral characteristics determined by the k-input parameters. For lower fundamentals this generator provides a special form of granular synthesis.\n\u003c/p\u003e\u003cpre\u003e ares  fof  xamp, xfund, xform, koct, kband, kris, kdur, kdec, iolaps, \\\n           ifna, ifnb, itotdur [, iphs] [, ifmode] [, iskip]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/fof.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e D -\u003e Tab -\u003e Tab -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#fof",
        "fct-type": "function",
        "title": "fof"
      },
      "index": {
        "description": "Produces sinusoid bursts useful for formant and granular synthesis Audio output is succession of sinusoid bursts initiated at frequency xfund with spectral peak at xform For xfund above Hz these bursts produce speech-like formant with spectral characteristics determined by the k-input parameters For lower fundamentals this generator provides special form of granular synthesis ares fof xamp xfund xform koct kband kris kdur kdec iolaps ifna ifnb itotdur iphs ifmode iskip csound doc http www.csounds.com manual html fof.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "fof",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eD-\u003eTab-\u003eTab-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eD-\u003eTab-\u003eTab-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:fof2",
      "description": {
        "fct-descr": "\u003cp\u003eProduces sinusoid bursts including k-rate incremental indexing with each successive burst.\n\u003c/p\u003e\u003cp\u003eAudio output is a succession of sinusoid bursts initiated at frequency xfund with a spectral peak at xform. For xfund above 25 Hz these bursts produce a speech-like formant with spectral characteristics determined by the k-input parameters. For lower fundamentals this generator provides a special form of granular synthesis.\n\u003c/p\u003e\u003cpre\u003e ares  fof2  xamp, xfund, xform, koct, kband, kris, kdur, kdec, iolaps, \\\n           ifna, ifnb, itotdur, kphs, kgliss [, iskip]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/fof2.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e D -\u003e Tab -\u003e Tab -\u003e D -\u003e Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#fof2",
        "fct-type": "function",
        "title": "fof2"
      },
      "index": {
        "description": "Produces sinusoid bursts including k-rate incremental indexing with each successive burst Audio output is succession of sinusoid bursts initiated at frequency xfund with spectral peak at xform For xfund above Hz these bursts produce speech-like formant with spectral characteristics determined by the k-input parameters For lower fundamentals this generator provides special form of granular synthesis ares fof2 xamp xfund xform koct kband kris kdur kdec iolaps ifna ifnb itotdur kphs kgliss iskip csound doc http www.csounds.com manual html fof2.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "fof2",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eD-\u003eTab-\u003eTab-\u003eD-\u003eSig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eD-\u003eTab-\u003eTab-\u003eD-\u003eSig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:fog",
      "description": {
        "fct-descr": "\u003cp\u003eAudio output is a succession of grains derived from data in a stored function table\n\u003c/p\u003e\u003cp\u003eAudio output is a succession of grains derived from data in a stored function table ifna. The local envelope of these grains and their timing is based on the model of fof synthesis and permits detailed control of the granular synthesis.\n\u003c/p\u003e\u003cpre\u003e ares  fog  xamp, xdens, xtrans, aspd, koct, kband, kris, kdur, kdec, \\\n           iolaps, ifna, ifnb, itotdur [, iphs] [, itmode] [, iskip]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/fog.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e D -\u003e Tab -\u003e Tab -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#fog",
        "fct-type": "function",
        "title": "fog"
      },
      "index": {
        "description": "Audio output is succession of grains derived from data in stored function table Audio output is succession of grains derived from data in stored function table ifna The local envelope of these grains and their timing is based on the model of fof synthesis and permits detailed control of the granular synthesis ares fog xamp xdens xtrans aspd koct kband kris kdur kdec iolaps ifna ifnb itotdur iphs itmode iskip csound doc http www.csounds.com manual html fog.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "fog",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eD-\u003eTab-\u003eTab-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eD-\u003eTab-\u003eTab-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:foscil",
      "description": {
        "fct-descr": "\u003cp\u003eA basic frequency modulated oscillator.\n\u003c/p\u003e\u003cpre\u003e ares  foscil  xamp, kcps, xcar, xmod, kndx, ifn [, iphs]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/foscil.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Tab -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#foscil",
        "fct-type": "function",
        "title": "foscil"
      },
      "index": {
        "description": "basic frequency modulated oscillator ares foscil xamp kcps xcar xmod kndx ifn iphs csound doc http www.csounds.com manual html foscil.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "foscil",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eTab-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eTab-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:foscili",
      "description": {
        "fct-descr": "\u003cp\u003eBasic frequency modulated oscillator with linear interpolation.\n\u003c/p\u003e\u003cpre\u003e ares  foscili  xamp, kcps, xcar, xmod, kndx, ifn [, iphs]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/foscili.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Tab -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#foscili",
        "fct-type": "function",
        "title": "foscili"
      },
      "index": {
        "description": "Basic frequency modulated oscillator with linear interpolation ares foscili xamp kcps xcar xmod kndx ifn iphs csound doc http www.csounds.com manual html foscili.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "foscili",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eTab-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eTab-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:fractalnoise",
      "description": {
        "fct-descr": "\u003cp\u003eA fractal noise generator.\n\u003c/p\u003e\u003cp\u003eA fractal noise generator implemented as a white noise filtered\n       by a cascade of 15 first-order filters.\n\u003c/p\u003e\u003cpre\u003e ares  fractalnoise  kamp, kbeta\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/fractalnoise.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e SE Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#fractalnoise",
        "fct-type": "function",
        "title": "fractalnoise"
      },
      "index": {
        "description": "fractal noise generator fractal noise generator implemented as white noise filtered by cascade of first-order filters ares fractalnoise kamp kbeta csound doc http www.csounds.com manual html fractalnoise.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "fractalnoise",
        "normalized": "Sig-\u003eSig-\u003eSE Sig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSE Sig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:gainslider",
      "description": {
        "fct-descr": "\u003cp\u003eAn implementation of a logarithmic gain curve which is similar to the gainslider~ object from Cycling 74 Max / MSP.\n\u003c/p\u003e\u003cp\u003eThis opcode is intended for use to multiply by an audio signal to give a console mixer like feel. There is no bounds in the\n       source code so you can for example give higher than 127 values for extra amplitude but possibly clipped audio.\n\u003c/p\u003e\u003cpre\u003e kout  gainslider  kindex\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/gainslider.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#gainslider",
        "fct-type": "function",
        "title": "gainslider"
      },
      "index": {
        "description": "An implementation of logarithmic gain curve which is similar to the gainslider object from Cycling Max MSP This opcode is intended for use to multiply by an audio signal to give console mixer like feel There is no bounds in the source code so you can for example give higher than values for extra amplitude but possibly clipped audio kout gainslider kindex csound doc http www.csounds.com manual html gainslider.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "gainslider",
        "normalized": "Sig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:gauss",
      "description": {
        "fct-descr": "\u003cp\u003eGaussian distribution random number generator.\n\u003c/p\u003e\u003cp\u003eGaussian distribution random number generator. This is an x-class noise generator.\n\u003c/p\u003e\u003cpre\u003e ares  gauss  krange\n ires  gauss  krange\n kres  gauss  krange\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/gauss.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e SE Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#gauss",
        "fct-type": "function",
        "title": "gauss"
      },
      "index": {
        "description": "Gaussian distribution random number generator Gaussian distribution random number generator This is an x-class noise generator ares gauss krange ires gauss krange kres gauss krange csound doc http www.csounds.com manual html gauss.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "gauss",
        "normalized": "Sig-\u003eSE Sig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSE Sig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:gaussi",
      "description": {
        "fct-descr": "\u003cp\u003eGaussian distribution random number generator with\n       interpolation.\n\u003c/p\u003e\u003cp\u003eGaussian distribution random number generator with controlled\n       interpolation between values. This is an\n       x-class noise generator.\n\u003c/p\u003e\u003cpre\u003e ares  gaussi  krange, xamp, xcps\n ires  gaussi  krange, xamp, xcps\n kres  gaussi  krange, xamp, xcps\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/gaussi.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "a -\u003e a -\u003e a -\u003e SE a",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#gaussi",
        "fct-type": "function",
        "title": "gaussi"
      },
      "index": {
        "description": "Gaussian distribution random number generator with interpolation Gaussian distribution random number generator with controlled interpolation between values This is an x-class noise generator ares gaussi krange xamp xcps ires gaussi krange xamp xcps kres gaussi krange xamp xcps csound doc http www.csounds.com manual html gaussi.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "gaussi",
        "normalized": "a-\u003ea-\u003ea-\u003eSE a",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "a-\u003ea-\u003ea-\u003eSE a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:gausstrig",
      "description": {
        "fct-descr": "\u003cp\u003eRandom impulses around a certain frequency.\n\u003c/p\u003e\u003cp\u003eGenerates random impulses around a certain frequency.\n\u003c/p\u003e\u003cpre\u003e ares  gausstrig  kamp, kcps, kdev [, imode]\n kres  gausstrig  kamp, kcps, kdev [, imode]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/gausstrig.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e SE Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#gausstrig",
        "fct-type": "function",
        "title": "gausstrig"
      },
      "index": {
        "description": "Random impulses around certain frequency Generates random impulses around certain frequency ares gausstrig kamp kcps kdev imode kres gausstrig kamp kcps kdev imode csound doc http www.csounds.com manual html gausstrig.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "gausstrig",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSE Sig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSE Sig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:gbuzz",
      "description": {
        "fct-descr": "\u003cp\u003eOutput is a set of harmonically related cosine partials.\n\u003c/p\u003e\u003cpre\u003e ares  gbuzz  xamp, xcps, knh, klh, kmul, ifn [, iphs]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/gbuzz.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Tab -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#gbuzz",
        "fct-type": "function",
        "title": "gbuzz"
      },
      "index": {
        "description": "Output is set of harmonically related cosine partials ares gbuzz xamp xcps knh klh kmul ifn iphs csound doc http www.csounds.com manual html gbuzz.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "gbuzz",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eTab-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eTab-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:gendy",
      "description": {
        "fct-descr": "\u003cp\u003eDynamic stochastic approach to waveform synthesis conceived by Iannis Xenakis.\n\u003c/p\u003e\u003cp\u003eImplementation of the G&#195;&#169;n&#195;&#169;ration Dynamique Stochastiqu       (GENDYN), a dynamic stochastic approach to waveform synthesis conceived\n       by Iannis Xenakis.\n\u003c/p\u003e\u003cpre\u003e ares  gendy  kamp, kampdist, kdurdist, kadpar, kddpar, kminfreq, kmaxfreq, \\\n                kampscl, kdurscl [, initcps] [, knum]\n kres  gendy  kamp, kampdist, kdurdist, kadpar, kddpar, kminfreq, kmaxfreq, \\\n                kampscl, kdurscl [, initcps] [, knum]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/gendy.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#gendy",
        "fct-type": "function",
        "title": "gendy"
      },
      "index": {
        "description": "Dynamic stochastic approach to waveform synthesis conceived by Iannis Xenakis Implementation of the ration Dynamique Stochastiqu GENDYN dynamic stochastic approach to waveform synthesis conceived by Iannis Xenakis ares gendy kamp kampdist kdurdist kadpar kddpar kminfreq kmaxfreq kampscl kdurscl initcps knum kres gendy kamp kampdist kdurdist kadpar kddpar kminfreq kmaxfreq kampscl kdurscl initcps knum csound doc http www.csounds.com manual html gendy.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "gendy",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:gendyc",
      "description": {
        "fct-descr": "\u003cp\u003eDynamic stochastic approach to waveform synthesis using cubic interpolation.\n\u003c/p\u003e\u003cp\u003eImplementation with cubic interpolation of the\n       G&#195;&#169;n&#195;&#169;ration Dynamique Stochastique (GENDYN)       a dynamic stochastic approach to waveform synthesis conceived by\n       Iannis Xenakis.\n\u003c/p\u003e\u003cpre\u003e ares  gendyc  kamp, kampdist, kdurdist, kadpar, kddpar, kminfreq, kmaxfreq, \\\n                 kampscl, kdurscl [, initcps] [, knum]\n kres  gendyc  kamp, kampdist, kdurdist, kadpar, kddpar, kminfreq, kmaxfreq, \\\n                 kampscl, kdurscl [, initcps] [, knum]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/gendyc.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#gendyc",
        "fct-type": "function",
        "title": "gendyc"
      },
      "index": {
        "description": "Dynamic stochastic approach to waveform synthesis using cubic interpolation Implementation with cubic interpolation of the ration Dynamique Stochastique GENDYN dynamic stochastic approach to waveform synthesis conceived by Iannis Xenakis ares gendyc kamp kampdist kdurdist kadpar kddpar kminfreq kmaxfreq kampscl kdurscl initcps knum kres gendyc kamp kampdist kdurdist kadpar kddpar kminfreq kmaxfreq kampscl kdurscl initcps knum csound doc http www.csounds.com manual html gendyc.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "gendyc",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:gendyx",
      "description": {
        "fct-descr": "\u003cp\u003eVariation of the dynamic stochastic approach to waveform\n       synthesis conceived by Iannis Xenakis.\n\u003c/p\u003e\u003cp\u003egendyx (gendy eXtended) is an implementation\n       of the G&#195;&#169;n&#195;&#169;ration Dynamique Stochastiqu       (GENDYN), a dynamic stochastic approach to waveform synthesis\n       conceived by Iannis Xenakis, using curves instead of segments.\n\u003c/p\u003e\u003cpre\u003e ares  gendyx  kamp, kampdist, kdurdist, kadpar, kddpar, kminfreq, kmaxfreq, \\\n                 kampscl, kdurscl, kcurveup, kcurvedown [, initcps] [, knum]\n kres  gendyx  kamp, kampdist, kdurdist, kadpar, kddpar, kminfreq, kmaxfreq, \\\n                 kampscl, kdurscl, kcurveup, kcurvedown [, initcps] [, knum]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/gendyx.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#gendyx",
        "fct-type": "function",
        "title": "gendyx"
      },
      "index": {
        "description": "Variation of the dynamic stochastic approach to waveform synthesis conceived by Iannis Xenakis gendyx gendy eXtended is an implementation of the ration Dynamique Stochastiqu GENDYN dynamic stochastic approach to waveform synthesis conceived by Iannis Xenakis using curves instead of segments ares gendyx kamp kampdist kdurdist kadpar kddpar kminfreq kmaxfreq kampscl kdurscl kcurveup kcurvedown initcps knum kres gendyx kamp kampdist kdurdist kadpar kddpar kminfreq kmaxfreq kampscl kdurscl kcurveup kcurvedown initcps knum csound doc http www.csounds.com manual html gendyx.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "gendyx",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:gogobel",
      "description": {
        "fct-descr": "\u003cp\u003eAudio output is a tone related to the striking of a cow bell or similar.\n\u003c/p\u003e\u003cp\u003eAudio output is a tone related to the striking of a cow bell or similar. The method is a physical model developed from Perry Cook, but re-coded for Csound.\n\u003c/p\u003e\u003cpre\u003e ares  gogobel  kamp, kfreq, ihrd, ipos, imp, kvibf, kvamp, ivfn\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/gogobel.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e D -\u003e D -\u003e D -\u003e Sig -\u003e Sig -\u003e Tab -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#gogobel",
        "fct-type": "function",
        "title": "gogobel"
      },
      "index": {
        "description": "Audio output is tone related to the striking of cow bell or similar Audio output is tone related to the striking of cow bell or similar The method is physical model developed from Perry Cook but re-coded for Csound ares gogobel kamp kfreq ihrd ipos imp kvibf kvamp ivfn csound doc http www.csounds.com manual html gogobel.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "gogobel",
        "normalized": "Sig-\u003eSig-\u003eD-\u003eD-\u003eD-\u003eSig-\u003eSig-\u003eTab-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eD-\u003eD-\u003eD-\u003eSig-\u003eSig-\u003eTab-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:grain",
      "description": {
        "fct-descr": "\u003cp\u003eGenerates granular synthesis textures.\n\u003c/p\u003e\u003cpre\u003e ares  grain  xamp, xpitch, xdens, kampoff, kpitchoff, kgdur, igfn, \\\n           iwfn, imgdur [, igrnd]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/grain.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Tab -\u003e Tab -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#grain",
        "fct-type": "function",
        "title": "grain"
      },
      "index": {
        "description": "Generates granular synthesis textures ares grain xamp xpitch xdens kampoff kpitchoff kgdur igfn iwfn imgdur igrnd csound doc http www.csounds.com manual html grain.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "grain",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eTab-\u003eTab-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eTab-\u003eTab-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:grain2",
      "description": {
        "fct-descr": "\u003cp\u003eEasy-to-use granular synthesis texture generator.\n\u003c/p\u003e\u003cp\u003eGenerate granular synthesis textures. grain2 is simpler to use, but grain3 offers more control.\n\u003c/p\u003e\u003cpre\u003e ares  grain2  kcps, kfmd, kgdur, iovrlp, kfn, iwfn [, irpow] \\\n           [, iseed] [, imode]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/grain2.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e D -\u003e Tab -\u003e Tab -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#grain2",
        "fct-type": "function",
        "title": "grain2"
      },
      "index": {
        "description": "Easy-to-use granular synthesis texture generator Generate granular synthesis textures grain2 is simpler to use but grain3 offers more control ares grain2 kcps kfmd kgdur iovrlp kfn iwfn irpow iseed imode csound doc http www.csounds.com manual html grain2.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "grain2",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eD-\u003eTab-\u003eTab-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eD-\u003eTab-\u003eTab-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:grain3",
      "description": {
        "fct-descr": "\u003cp\u003eGenerate granular synthesis textures with more user control.\n\u003c/p\u003e\u003cp\u003eGenerate granular synthesis textures. grain2 is simpler to use but grain3 offers more control.\n\u003c/p\u003e\u003cpre\u003e ares  grain3  kcps, kphs, kfmd, kpmd, kgdur, kdens, imaxovr, kfn, iwfn, \\\n           kfrpow, kprpow [, iseed] [, imode]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/grain3.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e D -\u003e Tab -\u003e Tab -\u003e Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#grain3",
        "fct-type": "function",
        "title": "grain3"
      },
      "index": {
        "description": "Generate granular synthesis textures with more user control Generate granular synthesis textures grain2 is simpler to use but grain3 offers more control ares grain3 kcps kphs kfmd kpmd kgdur kdens imaxovr kfn iwfn kfrpow kprpow iseed imode csound doc http www.csounds.com manual html grain3.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "grain3",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eD-\u003eTab-\u003eTab-\u003eSig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eD-\u003eTab-\u003eTab-\u003eSig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:granule",
      "description": {
        "fct-descr": "\u003cp\u003eA more complex granular synthesis texture generator.\n\u003c/p\u003e\u003cp\u003eThe granule unit generator is more complex than grain, but does add new possibilities.\n\u003c/p\u003e\u003cpre\u003e ares  granule  xamp, ivoice, iratio, imode, ithd, ifn, ipshift, igskip, \\\n           igskip_os, ilength, kgap, igap_os, kgsize, igsize_os, iatt, idec \\\n           [, iseed] [, ipitch1] [, ipitch2] [, ipitch3] [, ipitch4] [, ifnenv]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/granule.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e D -\u003e D -\u003e D -\u003e D -\u003e Tab -\u003e D -\u003e D -\u003e D -\u003e D -\u003e Sig -\u003e D -\u003e Sig -\u003e D -\u003e D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#granule",
        "fct-type": "function",
        "title": "granule"
      },
      "index": {
        "description": "more complex granular synthesis texture generator The granule unit generator is more complex than grain but does add new possibilities ares granule xamp ivoice iratio imode ithd ifn ipshift igskip igskip os ilength kgap igap os kgsize igsize os iatt idec iseed ipitch1 ipitch2 ipitch3 ipitch4 ifnenv csound doc http www.csounds.com manual html granule.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "granule",
        "normalized": "Sig-\u003eD-\u003eD-\u003eD-\u003eD-\u003eTab-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSig-\u003eD-\u003eSig-\u003eD-\u003eD-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eD-\u003eD-\u003eD-\u003eD-\u003eTab-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSig-\u003eD-\u003eSig-\u003eD-\u003eD-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:guiro",
      "description": {
        "fct-descr": "\u003cp\u003eSemi-physical model of a guiro sound.\n\u003c/p\u003e\u003cp\u003eguiro is a semi-physical model of a guiro sound. It is one of the PhISEM percussion opcodes. PhISEM (Physically Informed Stochastic Event Modeling) is an algorithmic approach for simulating collisions of multiple independent sound producing objects.\n\u003c/p\u003e\u003cpre\u003e ares  guiro  kamp, idettack [, inum] [, idamp] [, imaxshake] [, ifreq] [, ifreq1]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/guiro.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#guiro",
        "fct-type": "function",
        "title": "guiro"
      },
      "index": {
        "description": "Semi-physical model of guiro sound guiro is semi-physical model of guiro sound It is one of the PhISEM percussion opcodes PhISEM Physically Informed Stochastic Event Modeling is an algorithmic approach for simulating collisions of multiple independent sound producing objects ares guiro kamp idettack inum idamp imaxshake ifreq ifreq1 csound doc http www.csounds.com manual html guiro.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "guiro",
        "normalized": "Sig-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:hsboscil",
      "description": {
        "fct-descr": "\u003cp\u003eAn oscillator which takes tonality and brightness as arguments.\n\u003c/p\u003e\u003cp\u003eAn oscillator which takes tonality and brightness as arguments, relative to a base frequency.\n\u003c/p\u003e\u003cpre\u003e ares  hsboscil  kamp, ktone, kbrite, ibasfreq, iwfn, ioctfn \\\n                    [, ioctcnt] [, iphs]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/hsboscil.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e D -\u003e Tab -\u003e Tab -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#hsboscil",
        "fct-type": "function",
        "title": "hsboscil"
      },
      "index": {
        "description": "An oscillator which takes tonality and brightness as arguments An oscillator which takes tonality and brightness as arguments relative to base frequency ares hsboscil kamp ktone kbrite ibasfreq iwfn ioctfn ioctcnt iphs csound doc http www.csounds.com manual html hsboscil.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "hsboscil",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eD-\u003eTab-\u003eTab-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eD-\u003eTab-\u003eTab-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:hvs1",
      "description": {
        "fct-descr": "\u003cp\u003eAllows one-dimensional Hyper Vectorial Synthesis (HVS) controlled by externally-updated k-variables.\n\u003c/p\u003e\u003cp\u003ehvs1 allows one-dimensional Hyper Vectorial Synthesis (HVS) controlled by externally-updated k-variables.\n\u003c/p\u003e\u003cpre\u003e  hvs1  kx, inumParms, inumPointsX, iOutTab, iPositionsTab, iSnapTab [, iConfigTab]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/hvs1.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#hvs1",
        "fct-type": "function",
        "title": "hvs1"
      },
      "index": {
        "description": "Allows one-dimensional Hyper Vectorial Synthesis HVS controlled by externally-updated k-variables hvs1 allows one-dimensional Hyper Vectorial Synthesis HVS controlled by externally-updated k-variables hvs1 kx inumParms inumPointsX iOutTab iPositionsTab iSnapTab iConfigTab csound doc http www.csounds.com manual html hvs1.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "hvs1",
        "normalized": "Sig-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:hvs2",
      "description": {
        "fct-descr": "\u003cp\u003eAllows two-dimensional Hyper Vectorial Synthesis (HVS) controlled by externally-updated k-variables.\n\u003c/p\u003e\u003cp\u003ehvs2 allows two-dimensional Hyper Vectorial Synthesis (HVS) controlled by externally-updated k-variables.\n\u003c/p\u003e\u003cpre\u003e  hvs2  kx, ky, inumParms, inumPointsX, inumPointsY, iOutTab, iPositionsTab, iSnapTab [, iConfigTab]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/hvs2.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#hvs2",
        "fct-type": "function",
        "title": "hvs2"
      },
      "index": {
        "description": "Allows two-dimensional Hyper Vectorial Synthesis HVS controlled by externally-updated k-variables hvs2 allows two-dimensional Hyper Vectorial Synthesis HVS controlled by externally-updated k-variables hvs2 kx ky inumParms inumPointsX inumPointsY iOutTab iPositionsTab iSnapTab iConfigTab csound doc http www.csounds.com manual html hvs2.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "hvs2",
        "normalized": "Sig-\u003eSig-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:hvs3",
      "description": {
        "fct-descr": "\u003cp\u003eAllows three-dimensional Hyper Vectorial Synthesis (HVS) controlled by externally-updated k-variables.\n\u003c/p\u003e\u003cp\u003ehvs3 allows three-dimensional Hyper Vectorial Synthesis (HVS) controlled by externally-updated k-variables.\n\u003c/p\u003e\u003cpre\u003e  hvs3  kx, ky, kz, inumParms, inumPointsX, inumPointsY, inumPointsZ, iOutTab, iPositionsTab, iSnapTab [, iConfigTab]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/hvs3.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#hvs3",
        "fct-type": "function",
        "title": "hvs3"
      },
      "index": {
        "description": "Allows three-dimensional Hyper Vectorial Synthesis HVS controlled by externally-updated k-variables hvs3 allows three-dimensional Hyper Vectorial Synthesis HVS controlled by externally-updated k-variables hvs3 kx ky kz inumParms inumPointsX inumPointsY inumPointsZ iOutTab iPositionsTab iSnapTab iConfigTab csound doc http www.csounds.com manual html hvs3.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "hvs3",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:jitter",
      "description": {
        "fct-descr": "\u003cp\u003eGenerates a segmented line whose segments are randomly generated.\n\u003c/p\u003e\u003cpre\u003e kout  jitter  kamp, kcpsMin, kcpsMax\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/jitter.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e SE Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#jitter",
        "fct-type": "function",
        "title": "jitter"
      },
      "index": {
        "description": "Generates segmented line whose segments are randomly generated kout jitter kamp kcpsMin kcpsMax csound doc http www.csounds.com manual html jitter.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "jitter",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSE Sig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSE Sig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:jitter2",
      "description": {
        "fct-descr": "\u003cp\u003eGenerates a segmented line with user-controllable random segments.\n\u003c/p\u003e\u003cpre\u003e kout  jitter2  ktotamp, kamp1, kcps1, kamp2, kcps2, kamp3, kcps3\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/jitter2.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e SE Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#jitter2",
        "fct-type": "function",
        "title": "jitter2"
      },
      "index": {
        "description": "Generates segmented line with user-controllable random segments kout jitter2 ktotamp kamp1 kcps1 kamp2 kcps2 kamp3 kcps3 csound doc http www.csounds.com manual html jitter2.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "jitter2",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSE Sig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSE Sig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:jspline",
      "description": {
        "fct-descr": "\u003cp\u003eA jitter-spline generator.\n\u003c/p\u003e\u003cpre\u003e ares  jspline  xamp, kcpsMin, kcpsMax\n kres  jspline  kamp, kcpsMin, kcpsMax\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/jspline.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#jspline",
        "fct-type": "function",
        "title": "jspline"
      },
      "index": {
        "description": "jitter-spline generator ares jspline xamp kcpsMin kcpsMax kres jspline kamp kcpsMin kcpsMax csound doc http www.csounds.com manual html jspline.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "jspline",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:lfo",
      "description": {
        "fct-descr": "\u003cp\u003eA low frequency oscillator of various shapes.\n\u003c/p\u003e\u003cpre\u003e kres  lfo  kamp, kcps [, itype]\n ares  lfo  kamp, kcps [, itype]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/lfo.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#lfo",
        "fct-type": "function",
        "title": "lfo"
      },
      "index": {
        "description": "low frequency oscillator of various shapes kres lfo kamp kcps itype ares lfo kamp kcps itype csound doc http www.csounds.com manual html lfo.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "lfo",
        "normalized": "Sig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:line",
      "description": {
        "fct-descr": "\u003cp\u003eTrace a straight line between specified points.\n\u003c/p\u003e\u003cpre\u003e ares  line  ia, idur, ib\n kres  line  ia, idur, ib\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/line.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#line",
        "fct-type": "function",
        "title": "line"
      },
      "index": {
        "description": "Trace straight line between specified points ares line ia idur ib kres line ia idur ib csound doc http www.csounds.com manual html line.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "line",
        "normalized": "D-\u003eD-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:linen",
      "description": {
        "fct-descr": "\u003cp\u003eApplies a straight line rise and decay pattern to an input amp signal.\n\u003c/p\u003e\u003cp\u003elinen -- apply a straight line rise and decay pattern to an input amp signal.\n\u003c/p\u003e\u003cpre\u003e ares  linen  xamp, irise, idur, idec\n kres  linen  kamp, irise, idur, idec\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/linen.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e D -\u003e D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#linen",
        "fct-type": "function",
        "title": "linen"
      },
      "index": {
        "description": "Applies straight line rise and decay pattern to an input amp signal linen apply straight line rise and decay pattern to an input amp signal ares linen xamp irise idur idec kres linen kamp irise idur idec csound doc http www.csounds.com manual html linen.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "linen",
        "normalized": "Sig-\u003eD-\u003eD-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eD-\u003eD-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:linenr",
      "description": {
        "fct-descr": "\u003cp\u003eThe linen opcode extended with a final release segment.\n\u003c/p\u003e\u003cp\u003elinenr -- same as linen except that the final segment is entered only on sensing a MIDI note release. The note is then extended by the decay time.\n\u003c/p\u003e\u003cpre\u003e ares  linenr  xamp, irise, idec, iatdec\n kres  linenr  kamp, irise, idec, iatdec\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/linenr.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e D -\u003e D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#linenr",
        "fct-type": "function",
        "title": "linenr"
      },
      "index": {
        "description": "The linen opcode extended with final release segment linenr same as linen except that the final segment is entered only on sensing MIDI note release The note is then extended by the decay time ares linenr xamp irise idec iatdec kres linenr kamp irise idec iatdec csound doc http www.csounds.com manual html linenr.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "linenr",
        "normalized": "Sig-\u003eD-\u003eD-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eD-\u003eD-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:linrand",
      "description": {
        "fct-descr": "\u003cp\u003eLinear distribution random number generator (positive values only).\n\u003c/p\u003e\u003cp\u003eLinear distribution random number generator (positive values only). This is an x-class noise generator.\n\u003c/p\u003e\u003cpre\u003e ares  linrand  krange\n ires  linrand  krange\n kres  linrand  krange\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/linrand.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "a -\u003e SE a",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#linrand",
        "fct-type": "function",
        "title": "linrand"
      },
      "index": {
        "description": "Linear distribution random number generator positive values only Linear distribution random number generator positive values only This is an x-class noise generator ares linrand krange ires linrand krange kres linrand krange csound doc http www.csounds.com manual html linrand.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "linrand",
        "normalized": "a-\u003eSE a",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "a-\u003eSE a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:linseg",
      "description": {
        "fct-descr": "\u003cp\u003eTrace a series of line segments between specified points.\n\u003c/p\u003e\u003cpre\u003e ares  linseg  ia, idur1, ib [, idur2] [, ic] [...]\n kres  linseg  ia, idur1, ib [, idur2] [, ic] [...]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/linseg.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "[D] -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#linseg",
        "fct-type": "function",
        "title": "linseg"
      },
      "index": {
        "description": "Trace series of line segments between specified points ares linseg ia idur1 ib idur2 ic kres linseg ia idur1 ib idur2 ic csound doc http www.csounds.com manual html linseg.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "linseg",
        "normalized": "[D]-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "[D]-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:linsegb",
      "description": {
        "fct-descr": "\u003cp\u003eTrace a series of line segments between specified absolute points.\n\u003c/p\u003e\u003cpre\u003e ares  linsegb  ia, itim1, ib [, itim2] [, ic] [...]\n kres  linsegb  ia, itim1, ib [, itim2] [, ic] [...]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/linsegb.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "[D] -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#linsegb",
        "fct-type": "function",
        "title": "linsegb"
      },
      "index": {
        "description": "Trace series of line segments between specified absolute points ares linsegb ia itim1 ib itim2 ic kres linsegb ia itim1 ib itim2 ic csound doc http www.csounds.com manual html linsegb.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "linsegb",
        "normalized": "[D]-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "[D]-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:linsegr",
      "description": {
        "fct-descr": "\u003cp\u003eTrace a series of line segments between specified points including a release segment.\n\u003c/p\u003e\u003cpre\u003e ares  linsegr  ia, idur1, ib [, idur2] [, ic] [...], irel, iz\n kres  linsegr  ia, idur1, ib [, idur2] [, ic] [...], irel, iz\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/linsegr.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "[D] -\u003e D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#linsegr",
        "fct-type": "function",
        "title": "linsegr"
      },
      "index": {
        "description": "Trace series of line segments between specified points including release segment ares linsegr ia idur1 ib idur2 ic irel iz kres linsegr ia idur1 ib idur2 ic irel iz csound doc http www.csounds.com manual html linsegr.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "linsegr",
        "normalized": "[D]-\u003eD-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "[D]-\u003eD-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:logcurve",
      "description": {
        "fct-descr": "\u003cp\u003eThis opcode implements a formula for generating a normalised logarithmic curve in range 0 - 1. It is based on the Max / MSP work of Eric Singer (c) 1994.\n\u003c/p\u003e\u003cp\u003eGenerates a logarithmic curve in range 0 to 1 of arbitrary steepness.\n       Steepness index equal to or lower than 1.0 will result in Not-a-Number\n       errors and cause unstable behavior.\n\u003c/p\u003e\u003cpre\u003e kout  logcurve  kindex, ksteepness\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/logcurve.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#logcurve",
        "fct-type": "function",
        "title": "logcurve"
      },
      "index": {
        "description": "This opcode implements formula for generating normalised logarithmic curve in range It is based on the Max MSP work of Eric Singer Generates logarithmic curve in range to of arbitrary steepness Steepness index equal to or lower than will result in Not-a-Number errors and cause unstable behavior kout logcurve kindex ksteepness csound doc http www.csounds.com manual html logcurve.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "logcurve",
        "normalized": "Sig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:loopseg",
      "description": {
        "fct-descr": "\u003cp\u003eGenerate control signal consisting of linear segments delimited by two or more specified points.\n\u003c/p\u003e\u003cp\u003eGenerate control signal consisting of linear segments delimited by two or more specified points. The entire envelope is looped at kfreq rate. Each parameter can be varied at k-rate.\n\u003c/p\u003e\u003cpre\u003e ksig  loopseg  kfreq, ktrig, iphase, ktime0, kvalue0 [, ktime1] [, kvalue1] \\\n           [, ktime2] [, kvalue2] [...]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/loopseg.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e D -\u003e [Sig] -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#loopseg",
        "fct-type": "function",
        "title": "loopseg"
      },
      "index": {
        "description": "Generate control signal consisting of linear segments delimited by two or more specified points Generate control signal consisting of linear segments delimited by two or more specified points The entire envelope is looped at kfreq rate Each parameter can be varied at k-rate ksig loopseg kfreq ktrig iphase ktime0 kvalue0 ktime1 kvalue1 ktime2 kvalue2 csound doc http www.csounds.com manual html loopseg.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "loopseg",
        "normalized": "Sig-\u003eSig-\u003eD-\u003e[Sig]-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eD-\u003e[Sig]-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:loopsegp",
      "description": {
        "fct-descr": "\u003cp\u003eControl signals based on linear segments.\n\u003c/p\u003e\u003cp\u003eGenerate control signal consisiting of linear segments delimited\n     by two or more specified points. The entire envelope can be looped\n     at time-variant rate. Each segment coordinate can also be varied\n     at k-rate.\n\u003c/p\u003e\u003cpre\u003e ksig  loopsegp   kphase, kvalue0, kdur0, kvalue1 \\\n           [, kdur1, ... , kdurN-1, kvalueN]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/loopsegp.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e [Sig] -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#loopsegp",
        "fct-type": "function",
        "title": "loopsegp"
      },
      "index": {
        "description": "Control signals based on linear segments Generate control signal consisiting of linear segments delimited by two or more specified points The entire envelope can be looped at time-variant rate Each segment coordinate can also be varied at k-rate ksig loopsegp kphase kvalue0 kdur0 kvalue1 kdur1 kdurN-1 kvalueN csound doc http www.csounds.com manual html loopsegp.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "loopsegp",
        "normalized": "Sig-\u003e[Sig]-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003e[Sig]-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:looptseg",
      "description": {
        "fct-descr": "\u003cp\u003eGenerate control signal consisting of exponential or linear segments delimited by two or more specified points.\n\u003c/p\u003e\u003cp\u003eGenerate control signal consisting of controllable exponential segments or linear segments delimited by two or more specified points. The entire envelope is looped at kfreq rate. Each parameter can be varied at k-rate.\n\u003c/p\u003e\u003cpre\u003e ksig  looptseg  kfreq, ktrig, ktime0, kvalue0, ktype0, [, ktime1] [, kvalue1] [,ktype1] \\\n           [, ktime2] [, kvalue2] [,ktype2] [...][, ktimeN] [, kvalueN]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/looptseg.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e [Sig] -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#looptseg",
        "fct-type": "function",
        "title": "looptseg"
      },
      "index": {
        "description": "Generate control signal consisting of exponential or linear segments delimited by two or more specified points Generate control signal consisting of controllable exponential segments or linear segments delimited by two or more specified points The entire envelope is looped at kfreq rate Each parameter can be varied at k-rate ksig looptseg kfreq ktrig ktime0 kvalue0 ktype0 ktime1 kvalue1 ktype1 ktime2 kvalue2 ktype2 ktimeN kvalueN csound doc http www.csounds.com manual html looptseg.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "looptseg",
        "normalized": "Sig-\u003eSig-\u003e[Sig]-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003e[Sig]-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:loopxseg",
      "description": {
        "fct-descr": "\u003cp\u003eGenerate control signal consisting of exponential segments delimited by two or more specified points.\n\u003c/p\u003e\u003cp\u003eGenerate control signal consisting of exponential segments delimited by two or more specified points. The entire envelope is looped at kfreq rate. Each parameter can be varied at k-rate.\n\u003c/p\u003e\u003cpre\u003e ksig  loopxseg  kfreq, ktrig, iphase, ktime0, kvalue0 [, ktime1] [, kvalue1] \\\n           [, ktime2] [, kvalue2] [...]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/loopxseg.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e D -\u003e [Sig] -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#loopxseg",
        "fct-type": "function",
        "title": "loopxseg"
      },
      "index": {
        "description": "Generate control signal consisting of exponential segments delimited by two or more specified points Generate control signal consisting of exponential segments delimited by two or more specified points The entire envelope is looped at kfreq rate Each parameter can be varied at k-rate ksig loopxseg kfreq ktrig iphase ktime0 kvalue0 ktime1 kvalue1 ktime2 kvalue2 csound doc http www.csounds.com manual html loopxseg.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "loopxseg",
        "normalized": "Sig-\u003eSig-\u003eD-\u003e[Sig]-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eD-\u003e[Sig]-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:lorenz",
      "description": {
        "fct-descr": "\u003cp\u003eImplements the Lorenz system of equations.\n\u003c/p\u003e\u003cp\u003eImplements the Lorenz system of equations.  The Lorenz system is a chaotic-dynamic system which was originally used to simulate the motion of a particle in convection currents and simplified weather systems. Small differences in initial conditions rapidly lead to diverging values. This is sometimes expressed as the butterfly effect. If a butterfly flaps its wings in Australia, it will have an effect on the weather in Alaska. This system is one of the milestones in the development of chaos theory. It is useful as a chaotic audio source or as a low frequency modulation source.\n\u003c/p\u003e\u003cpre\u003e ax, ay, az  lorenz  ksv, krv, kbv, kh, ix, iy, iz, iskip [, iskipinit]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/lorenz.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e D -\u003e D -\u003e D -\u003e D -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#lorenz",
        "fct-type": "function",
        "title": "lorenz"
      },
      "index": {
        "description": "Implements the Lorenz system of equations Implements the Lorenz system of equations The Lorenz system is chaotic-dynamic system which was originally used to simulate the motion of particle in convection currents and simplified weather systems Small differences in initial conditions rapidly lead to diverging values This is sometimes expressed as the butterfly effect If butterfly flaps its wings in Australia it will have an effect on the weather in Alaska This system is one of the milestones in the development of chaos theory It is useful as chaotic audio source or as low frequency modulation source ax ay az lorenz ksv krv kbv kh ix iy iz iskip iskipinit csound doc http www.csounds.com manual html lorenz.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "lorenz",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eD-\u003eD-\u003eD-\u003eD-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eD-\u003eD-\u003eD-\u003eD-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:loscil",
      "description": {
        "fct-descr": "\u003cp\u003eRead sampled sound from a table.\n\u003c/p\u003e\u003cp\u003eRead sampled sound (mono or stereo) from a table, with optional sustain and release looping.\n\u003c/p\u003e\u003cpre\u003e ar1 [,ar2]  loscil  xamp, kcps, ifn [, ibas] [, imod1] [, ibeg1] [, iend1] \\\n           [, imod2] [, ibeg2] [, iend2]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/loscil.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Tab -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#loscil",
        "fct-type": "function",
        "title": "loscil"
      },
      "index": {
        "description": "Read sampled sound from table Read sampled sound mono or stereo from table with optional sustain and release looping ar1 ar2 loscil xamp kcps ifn ibas imod1 ibeg1 iend1 imod2 ibeg2 iend2 csound doc http www.csounds.com manual html loscil.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "loscil",
        "normalized": "Sig-\u003eSig-\u003eTab-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eTab-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:loscil3",
      "description": {
        "fct-descr": "\u003cp\u003eRead sampled sound from a table using cubic interpolation.\n\u003c/p\u003e\u003cp\u003eRead sampled sound (mono or stereo) from a table, with optional sustain and release looping, using cubic interpolation.\n\u003c/p\u003e\u003cpre\u003e ar1 [,ar2]  loscil3  xamp, kcps, ifn [, ibas] [, imod1] [, ibeg1] [, iend1] \\\n           [, imod2] [, ibeg2] [, iend2]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/loscil3.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Tab -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#loscil3",
        "fct-type": "function",
        "title": "loscil3"
      },
      "index": {
        "description": "Read sampled sound from table using cubic interpolation Read sampled sound mono or stereo from table with optional sustain and release looping using cubic interpolation ar1 ar2 loscil3 xamp kcps ifn ibas imod1 ibeg1 iend1 imod2 ibeg2 iend2 csound doc http www.csounds.com manual html loscil3.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "loscil3",
        "normalized": "Sig-\u003eSig-\u003eTab-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eTab-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:loscilx",
      "description": {
        "fct-descr": "\u003cp\u003eLoop oscillator.\n\u003c/p\u003e\u003cp\u003eThis file is currently a stub, but the syntax should be correct.\n\u003c/p\u003e\u003cpre\u003e ar1 [, ar2, ar3, ar4, ar5, ar6, ar7, ar8, ar9, ar10, ar11, ar12, ar13, ar14, \\\n           ar15, ar16]  loscilx  xamp, kcps, ifn \\\n           [, iwsize, ibas, istrt, imod1, ibeg1, iend1]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/loscilx.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Tab -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#loscilx",
        "fct-type": "function",
        "title": "loscilx"
      },
      "index": {
        "description": "Loop oscillator This file is currently stub but the syntax should be correct ar1 ar2 ar3 ar4 ar5 ar6 ar7 ar8 ar9 ar10 ar11 ar12 ar13 ar14 ar15 ar16 loscilx xamp kcps ifn iwsize ibas istrt imod1 ibeg1 iend1 csound doc http www.csounds.com manual html loscilx.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "loscilx",
        "normalized": "Sig-\u003eSig-\u003eTab-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eTab-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:lphasor",
      "description": {
        "fct-descr": "\u003cp\u003eGenerates a table index for sample playback\n\u003c/p\u003e\u003cp\u003eThis opcode can be used to generate table index for sample playback (e.g. tablexkt).\n\u003c/p\u003e\u003cpre\u003e ares  lphasor  xtrns [, ilps] [, ilpe] [, imode] [, istrt] [, istor]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/lphasor.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#lphasor",
        "fct-type": "function",
        "title": "lphasor"
      },
      "index": {
        "description": "Generates table index for sample playback This opcode can be used to generate table index for sample playback e.g tablexkt ares lphasor xtrns ilps ilpe imode istrt istor csound doc http www.csounds.com manual html lphasor.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "lphasor",
        "normalized": "Sig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:lposcil",
      "description": {
        "fct-descr": "\u003cp\u003eRead sampled sound from a table with looping and high precision.\n\u003c/p\u003e\u003cp\u003eRead sampled sound (mono or stereo) from a table, with looping, and high precision.\n\u003c/p\u003e\u003cpre\u003e ares  lposcil  kamp, kfreqratio, kloop, kend, ifn [, iphs]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/lposcil.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Tab -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#lposcil",
        "fct-type": "function",
        "title": "lposcil"
      },
      "index": {
        "description": "Read sampled sound from table with looping and high precision Read sampled sound mono or stereo from table with looping and high precision ares lposcil kamp kfreqratio kloop kend ifn iphs csound doc http www.csounds.com manual html lposcil.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "lposcil",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eTab-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eTab-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:lposcil3",
      "description": {
        "fct-descr": "\u003cp\u003eRead sampled sound from a table with high precision and cubic interpolation.\n\u003c/p\u003e\u003cp\u003eRead sampled sound (mono or stereo) from a table, with looping, and high precision. lposcil3 uses cubic interpolation.\n\u003c/p\u003e\u003cpre\u003e ares  lposcil3  kamp, kfreqratio, kloop, kend, ifn [, iphs]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/lposcil3.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Tab -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#lposcil3",
        "fct-type": "function",
        "title": "lposcil3"
      },
      "index": {
        "description": "Read sampled sound from table with high precision and cubic interpolation Read sampled sound mono or stereo from table with looping and high precision lposcil3 uses cubic interpolation ares lposcil3 kamp kfreqratio kloop kend ifn iphs csound doc http www.csounds.com manual html lposcil3.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "lposcil3",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eTab-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eTab-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:lposcila",
      "description": {
        "fct-descr": "\u003cp\u003eRead sampled sound from a table with looping and high precision.\n\u003c/p\u003e\u003cp\u003elposcila reads sampled sound from a table with looping and high precision.\n\u003c/p\u003e\u003cpre\u003e ar  lposcila  aamp, kfreqratio, kloop, kend, ift [,iphs] \n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/lposcila.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#lposcila",
        "fct-type": "function",
        "title": "lposcila"
      },
      "index": {
        "description": "Read sampled sound from table with looping and high precision lposcila reads sampled sound from table with looping and high precision ar lposcila aamp kfreqratio kloop kend ift iphs csound doc http www.csounds.com manual html lposcila.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "lposcila",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:lposcilsa",
      "description": {
        "fct-descr": "\u003cp\u003eRead stereo sampled sound from a table with looping and high precision.\n\u003c/p\u003e\u003cp\u003elposcilsa reads stereo sampled sound from a table with looping and high precision.\n\u003c/p\u003e\u003cpre\u003e ar1, ar2  lposcilsa  aamp, kfreqratio, kloop, kend, ift [,iphs] \n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/lposcilsa.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e D -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#lposcilsa",
        "fct-type": "function",
        "title": "lposcilsa"
      },
      "index": {
        "description": "Read stereo sampled sound from table with looping and high precision lposcilsa reads stereo sampled sound from table with looping and high precision ar1 ar2 lposcilsa aamp kfreqratio kloop kend ift iphs csound doc http www.csounds.com manual html lposcilsa.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "lposcilsa",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eD-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eD-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:lposcilsa2",
      "description": {
        "fct-descr": "\u003cp\u003eRead stereo sampled sound from a table with looping and high precision.\n\u003c/p\u003e\u003cp\u003elposcilsa2 reads stereo sampled sound from a table with looping and high precision.\n\u003c/p\u003e\u003cpre\u003e ar1, ar2  lposcilsa2  aamp, kfreqratio, kloop, kend, ift [,iphs] \n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/lposcilsa2.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e D -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#lposcilsa2",
        "fct-type": "function",
        "title": "lposcilsa2"
      },
      "index": {
        "description": "Read stereo sampled sound from table with looping and high precision lposcilsa2 reads stereo sampled sound from table with looping and high precision ar1 ar2 lposcilsa2 aamp kfreqratio kloop kend ift iphs csound doc http www.csounds.com manual html lposcilsa2.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "lposcilsa2",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eD-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eD-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:lpshold",
      "description": {
        "fct-descr": "\u003cp\u003eGenerate control signal consisting of held segments.\n\u003c/p\u003e\u003cp\u003eGenerate control signal consisting of held segments delimited by two or more specified points. The entire envelope is looped at kfreq rate. Each parameter can be varied at k-rate.\n\u003c/p\u003e\u003cpre\u003e ksig  lpshold  kfreq, ktrig, iphase, ktime0, kvalue0  [, ktime1] [, kvalue1] [, ktime2] [, kvalue2] [...]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/lpshold.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e D -\u003e [Sig] -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#lpshold",
        "fct-type": "function",
        "title": "lpshold"
      },
      "index": {
        "description": "Generate control signal consisting of held segments Generate control signal consisting of held segments delimited by two or more specified points The entire envelope is looped at kfreq rate Each parameter can be varied at k-rate ksig lpshold kfreq ktrig iphase ktime0 kvalue0 ktime1 kvalue1 ktime2 kvalue2 csound doc http www.csounds.com manual html lpshold.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "lpshold",
        "normalized": "Sig-\u003eSig-\u003eD-\u003e[Sig]-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eD-\u003e[Sig]-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:lpsholdp",
      "description": {
        "fct-descr": "\u003cp\u003eControl signals based on held segments.\n\u003c/p\u003e\u003cp\u003eGenerate control signal consisiting of held segments delimited\n     by two or more specified points. The entire envelope can be looped\n     at time-variant rate. Each segment coordinate can also be varied\n     at k-rate.\n\u003c/p\u003e\u003cpre\u003e ksig  lpsholdp   kphase, ktrig, ktime0, kvalue0  [, ktime1] [, kvalue1] \\\n           [, ktime2] [, kvalue2] [...]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/lpsholdp.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e [Sig] -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#lpsholdp",
        "fct-type": "function",
        "title": "lpsholdp"
      },
      "index": {
        "description": "Control signals based on held segments Generate control signal consisiting of held segments delimited by two or more specified points The entire envelope can be looped at time-variant rate Each segment coordinate can also be varied at k-rate ksig lpsholdp kphase ktrig ktime0 kvalue0 ktime1 kvalue1 ktime2 kvalue2 csound doc http www.csounds.com manual html lpsholdp.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "lpsholdp",
        "normalized": "Sig-\u003eSig-\u003e[Sig]-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003e[Sig]-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:madsr",
      "description": {
        "fct-descr": "\u003cp\u003eCalculates the classical ADSR envelope using the linsegr mechanism.\n\u003c/p\u003e\u003cpre\u003e ares  madsr  iatt, idec, islev, irel [, idel] [, ireltim]\n kres  madsr  iatt, idec, islev, irel [, idel] [, ireltim]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/madsr.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#madsr",
        "fct-type": "function",
        "title": "madsr"
      },
      "index": {
        "description": "Calculates the classical ADSR envelope using the linsegr mechanism ares madsr iatt idec islev irel idel ireltim kres madsr iatt idec islev irel idel ireltim csound doc http www.csounds.com manual html madsr.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "madsr",
        "normalized": "D-\u003eD-\u003eD-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eD-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:mandel",
      "description": {
        "fct-descr": "\u003cp\u003eMandelbrot set\n\u003c/p\u003e\u003cp\u003eReturns the number of iterations corresponding to a given point of complex plane by applying the Mandelbrot set formula.\n\u003c/p\u003e\u003cpre\u003e kiter, koutrig  mandel   ktrig, kx, ky, kmaxIter\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/mandel.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#mandel",
        "fct-type": "function",
        "title": "mandel"
      },
      "index": {
        "description": "Mandelbrot set Returns the number of iterations corresponding to given point of complex plane by applying the Mandelbrot set formula kiter koutrig mandel ktrig kx ky kmaxIter csound doc http www.csounds.com manual html mandel.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "mandel",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:mandol",
      "description": {
        "fct-descr": "\u003cp\u003eAn emulation of a mandolin.\n\u003c/p\u003e\u003cpre\u003e ares  mandol  kamp, kfreq, kpluck, kdetune, kgain, ksize, ifn [, iminfreq]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/mandol.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Tab -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#mandol",
        "fct-type": "function",
        "title": "mandol"
      },
      "index": {
        "description": "An emulation of mandolin ares mandol kamp kfreq kpluck kdetune kgain ksize ifn iminfreq csound doc http www.csounds.com manual html mandol.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "mandol",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eTab-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eTab-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:marimba",
      "description": {
        "fct-descr": "\u003cp\u003ePhysical model related to the striking of a wooden block.\n\u003c/p\u003e\u003cp\u003eAudio output is a tone related to the striking of a wooden block as found in a marimba. The method is a physical model developed from Perry Cook but re-coded for Csound.\n\u003c/p\u003e\u003cpre\u003e ares  marimba  kamp, kfreq, ihrd, ipos, imp, kvibf, kvamp, ivibfn, idec \\\n           [, idoubles] [, itriples]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/marimba.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e D -\u003e D -\u003e D -\u003e Sig -\u003e Sig -\u003e Tab -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#marimba",
        "fct-type": "function",
        "title": "marimba"
      },
      "index": {
        "description": "Physical model related to the striking of wooden block Audio output is tone related to the striking of wooden block as found in marimba The method is physical model developed from Perry Cook but re-coded for Csound ares marimba kamp kfreq ihrd ipos imp kvibf kvamp ivibfn idec idoubles itriples csound doc http www.csounds.com manual html marimba.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "marimba",
        "normalized": "Sig-\u003eSig-\u003eD-\u003eD-\u003eD-\u003eSig-\u003eSig-\u003eTab-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eD-\u003eD-\u003eD-\u003eSig-\u003eSig-\u003eTab-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:moog",
      "description": {
        "fct-descr": "\u003cp\u003eAn emulation of a mini-Moog synthesizer.\n\u003c/p\u003e\u003cpre\u003e ares  moog  kamp, kfreq, kfiltq, kfiltrate, kvibf, kvamp, iafn, iwfn, ivfn\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/moog.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Tab -\u003e Tab -\u003e Tab -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#moog",
        "fct-type": "function",
        "title": "moog"
      },
      "index": {
        "description": "An emulation of mini-Moog synthesizer ares moog kamp kfreq kfiltq kfiltrate kvibf kvamp iafn iwfn ivfn csound doc http www.csounds.com manual html moog.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "moog",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eTab-\u003eTab-\u003eTab-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eTab-\u003eTab-\u003eTab-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:mpulse",
      "description": {
        "fct-descr": "\u003cp\u003eGenerates a set of impulses.\n\u003c/p\u003e\u003cp\u003eGenerates a set of impulses of amplitude kamp separated by kintvl seconds (or samples if kintvl is negative).  The first impulse is generated after a delay of ioffset seconds.\n\u003c/p\u003e\u003cpre\u003e ares  mpulse  kamp, kintvl [, ioffset]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/mpulse.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#mpulse",
        "fct-type": "function",
        "title": "mpulse"
      },
      "index": {
        "description": "Generates set of impulses Generates set of impulses of amplitude kamp separated by kintvl seconds or samples if kintvl is negative The first impulse is generated after delay of ioffset seconds ares mpulse kamp kintvl ioffset csound doc http www.csounds.com manual html mpulse.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "mpulse",
        "normalized": "Sig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:mxadsr",
      "description": {
        "fct-descr": "\u003cp\u003eCalculates the classical ADSR envelope using the expsegr mechanism.\n\u003c/p\u003e\u003cpre\u003e ares  mxadsr  iatt, idec, islev, irel [, idel] [, ireltim]\n kres  mxadsr  iatt, idec, islev, irel [, idel] [, ireltim]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/mxadsr.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#mxadsr",
        "fct-type": "function",
        "title": "mxadsr"
      },
      "index": {
        "description": "Calculates the classical ADSR envelope using the expsegr mechanism ares mxadsr iatt idec islev irel idel ireltim kres mxadsr iatt idec islev irel idel ireltim csound doc http www.csounds.com manual html mxadsr.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "mxadsr",
        "normalized": "D-\u003eD-\u003eD-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eD-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:noise",
      "description": {
        "fct-descr": "\u003cp\u003eA white noise generator with an IIR lowpass filter.\n\u003c/p\u003e\u003cpre\u003e ares  noise  xamp, kbeta\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/noise.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e SE Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#noise",
        "fct-type": "function",
        "title": "noise"
      },
      "index": {
        "description": "white noise generator with an IIR lowpass filter ares noise xamp kbeta csound doc http www.csounds.com manual html noise.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "noise",
        "normalized": "Sig-\u003eSig-\u003eSE Sig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSE Sig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:oscbnk",
      "description": {
        "fct-descr": "\u003cp\u003eMixes the output of any number of oscillators.\n\u003c/p\u003e\u003cp\u003eThis unit generator mixes the output of any number of oscillators. The frequency, phase, and amplitude of each oscillator can be modulated by two LFOs (all oscillators have a separate set of LFOs, with different phase and frequency); additionally, the output of each oscillator can be filtered through an optional parametric equalizer (also controlled by the LFOs).  This opcode is most useful for rendering ensemble (strings, choir, etc.) instruments.\n\u003c/p\u003e\u003cpre\u003e ares  oscbnk   kcps, kamd, kfmd, kpmd, iovrlap, iseed, kl1minf, kl1maxf, \\\n           kl2minf, kl2maxf, ilfomode, keqminf, keqmaxf, keqminl, keqmaxl, \\\n           keqminq, keqmaxq, ieqmode, kfn [, il1fn] [, il2fn] [, ieqffn]   \\\n           [, ieqlfn] [, ieqqfn] [, itabl] [, ioutfn]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/oscbnk.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e D -\u003e D -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e D -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e D -\u003e Tab -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#oscbnk",
        "fct-type": "function",
        "title": "oscbnk"
      },
      "index": {
        "description": "Mixes the output of any number of oscillators This unit generator mixes the output of any number of oscillators The frequency phase and amplitude of each oscillator can be modulated by two LFOs all oscillators have separate set of LFOs with different phase and frequency additionally the output of each oscillator can be filtered through an optional parametric equalizer also controlled by the LFOs This opcode is most useful for rendering ensemble strings choir etc instruments ares oscbnk kcps kamd kfmd kpmd iovrlap iseed kl1minf kl1maxf kl2minf kl2maxf ilfomode keqminf keqmaxf keqminl keqmaxl keqminq keqmaxq ieqmode kfn il1fn il2fn ieqffn ieqlfn ieqqfn itabl ioutfn csound doc http www.csounds.com manual html oscbnk.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "oscbnk",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eD-\u003eD-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eD-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eD-\u003eTab-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eD-\u003eD-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eD-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eD-\u003eTab-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:oscil",
      "description": {
        "fct-descr": "\u003cp\u003eA simple oscillator.\n\u003c/p\u003e\u003cp\u003eoscil reads table ifn sequentially and repeatedly at a frequency xcps. The amplitude is scaled by xamp.\n\u003c/p\u003e\u003cpre\u003e ares  oscil  xamp, xcps [, ifn, iphs]\n kres  oscil  kamp, kcps [, ifn, iphs]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/oscil.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Tab -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#oscil",
        "fct-type": "function",
        "title": "oscil"
      },
      "index": {
        "description": "simple oscillator oscil reads table ifn sequentially and repeatedly at frequency xcps The amplitude is scaled by xamp ares oscil xamp xcps ifn iphs kres oscil kamp kcps ifn iphs csound doc http www.csounds.com manual html oscil.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "oscil",
        "normalized": "Sig-\u003eSig-\u003eTab-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eTab-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:oscil1",
      "description": {
        "fct-descr": "\u003cp\u003eAccesses table values by incremental sampling.\n\u003c/p\u003e\u003cpre\u003e kres  oscil1  idel, kamp, idur [, ifn]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/oscil1.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e Sig -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#oscil1",
        "fct-type": "function",
        "title": "oscil1"
      },
      "index": {
        "description": "Accesses table values by incremental sampling kres oscil1 idel kamp idur ifn csound doc http www.csounds.com manual html oscil1.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "oscil1",
        "normalized": "D-\u003eSig-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eSig-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:oscil1i",
      "description": {
        "fct-descr": "\u003cp\u003eAccesses table values by incremental sampling with linear interpolation.\n\u003c/p\u003e\u003cpre\u003e kres  oscil1i  idel, kamp, idur [, ifn]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/oscil1i.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e Sig -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#oscil1i",
        "fct-type": "function",
        "title": "oscil1i"
      },
      "index": {
        "description": "Accesses table values by incremental sampling with linear interpolation kres oscil1i idel kamp idur ifn csound doc http www.csounds.com manual html oscil1i.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "oscil1i",
        "normalized": "D-\u003eSig-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eSig-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:oscil3",
      "description": {
        "fct-descr": "\u003cp\u003eA simple oscillator with cubic interpolation.\n\u003c/p\u003e\u003cp\u003eoscil3 reads table ifn sequentially and repeatedly at a frequency xcps. The amplitude is scaled by xamp. Cubic interpolation is applied for table look up from internal phase values.\n\u003c/p\u003e\u003cpre\u003e ares  oscil3  xamp, xcps [, ifn, iphs]\n kres  oscil3  kamp, kcps [, ifn, iphs]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/oscil3.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Tab -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#oscil3",
        "fct-type": "function",
        "title": "oscil3"
      },
      "index": {
        "description": "simple oscillator with cubic interpolation oscil3 reads table ifn sequentially and repeatedly at frequency xcps The amplitude is scaled by xamp Cubic interpolation is applied for table look up from internal phase values ares oscil3 xamp xcps ifn iphs kres oscil3 kamp kcps ifn iphs csound doc http www.csounds.com manual html oscil3.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "oscil3",
        "normalized": "Sig-\u003eSig-\u003eTab-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eTab-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:oscili",
      "description": {
        "fct-descr": "\u003cp\u003eA simple oscillator with linear interpolation.\n\u003c/p\u003e\u003cp\u003eoscili reads table ifn sequentially and repeatedly at a frequency xcps. The amplitude is scaled by xamp. Linear interpolation is applied for table look up from internal phase values.\n\u003c/p\u003e\u003cpre\u003e ares  oscili  xamp, xcps, ifn [, iphs]\n kres  oscili  kamp, kcps, ifn [, iphs]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/oscili.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Tab -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#oscili",
        "fct-type": "function",
        "title": "oscili"
      },
      "index": {
        "description": "simple oscillator with linear interpolation oscili reads table ifn sequentially and repeatedly at frequency xcps The amplitude is scaled by xamp Linear interpolation is applied for table look up from internal phase values ares oscili xamp xcps ifn iphs kres oscili kamp kcps ifn iphs csound doc http www.csounds.com manual html oscili.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "oscili",
        "normalized": "Sig-\u003eSig-\u003eTab-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eTab-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:oscilikt",
      "description": {
        "fct-descr": "\u003cp\u003eA linearly interpolated oscillator that allows changing the table number at k-rate.\n\u003c/p\u003e\u003cp\u003eoscilikt is very similar to oscili, but allows changing the table number at k-rate. It is slightly slower than oscili (especially with high control rate), although also more accurate as it uses a 31-bit phase accumulator, as opposed to the 24-bit one used by oscili.\n\u003c/p\u003e\u003cpre\u003e ares  oscilikt  xamp, xcps, kfn [, iphs] [, istor]\n kres  oscilikt  kamp, kcps, kfn [, iphs] [, istor]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/oscilikt.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Tab -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#oscilikt",
        "fct-type": "function",
        "title": "oscilikt"
      },
      "index": {
        "description": "linearly interpolated oscillator that allows changing the table number at k-rate oscilikt is very similar to oscili but allows changing the table number at k-rate It is slightly slower than oscili especially with high control rate although also more accurate as it uses bit phase accumulator as opposed to the bit one used by oscili ares oscilikt xamp xcps kfn iphs istor kres oscilikt kamp kcps kfn iphs istor csound doc http www.csounds.com manual html oscilikt.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "oscilikt",
        "normalized": "Sig-\u003eSig-\u003eTab-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eTab-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:osciliktp",
      "description": {
        "fct-descr": "\u003cp\u003eA linearly interpolated oscillator that allows allows phase modulation.\n\u003c/p\u003e\u003cp\u003eosciliktp allows phase modulation (which is actually implemented as k-rate frequency modulation, by differentiating phase input). The disadvantage is that there is no amplitude control, and frequency can be varied only at the control-rate. This opcode can be faster or slower than oscilikt, depending on the control-rate.\n\u003c/p\u003e\u003cpre\u003e ares  osciliktp  kcps, kfn, kphs [, istor]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/osciliktp.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Tab -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#osciliktp",
        "fct-type": "function",
        "title": "osciliktp"
      },
      "index": {
        "description": "linearly interpolated oscillator that allows allows phase modulation osciliktp allows phase modulation which is actually implemented as k-rate frequency modulation by differentiating phase input The disadvantage is that there is no amplitude control and frequency can be varied only at the control-rate This opcode can be faster or slower than oscilikt depending on the control-rate ares osciliktp kcps kfn kphs istor csound doc http www.csounds.com manual html osciliktp.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "osciliktp",
        "normalized": "Sig-\u003eTab-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eTab-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:oscilikts",
      "description": {
        "fct-descr": "\u003cp\u003eA linearly interpolated oscillator with sync status that allows changing the table number at k-rate.\n\u003c/p\u003e\u003cp\u003eoscilikts is the same as oscilikt. Except it has a sync input that can be used to re-initialize the oscillator to a k-rate phase value. It is slower than oscilikt and osciliktp.\n\u003c/p\u003e\u003cpre\u003e ares  oscilikts  xamp, xcps, kfn, async, kphs [, istor]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/oscilikts.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Tab -\u003e Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#oscilikts",
        "fct-type": "function",
        "title": "oscilikts"
      },
      "index": {
        "description": "linearly interpolated oscillator with sync status that allows changing the table number at k-rate oscilikts is the same as oscilikt Except it has sync input that can be used to re-initialize the oscillator to k-rate phase value It is slower than oscilikt and osciliktp ares oscilikts xamp xcps kfn async kphs istor csound doc http www.csounds.com manual html oscilikts.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "oscilikts",
        "normalized": "Sig-\u003eSig-\u003eTab-\u003eSig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eTab-\u003eSig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:osciln",
      "description": {
        "fct-descr": "\u003cp\u003eAccesses table values at a user-defined frequency.\n\u003c/p\u003e\u003cp\u003eAccesses table values at a user-defined frequency. This opcode can also be written as oscilx.\n\u003c/p\u003e\u003cpre\u003e ares  osciln  kamp, ifrq, ifn, itimes\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/osciln.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e D -\u003e Tab -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#osciln",
        "fct-type": "function",
        "title": "osciln"
      },
      "index": {
        "description": "Accesses table values at user-defined frequency Accesses table values at user-defined frequency This opcode can also be written as oscilx ares osciln kamp ifrq ifn itimes csound doc http www.csounds.com manual html osciln.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "osciln",
        "normalized": "Sig-\u003eD-\u003eTab-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eD-\u003eTab-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:oscils",
      "description": {
        "fct-descr": "\u003cp\u003eA simple, fast sine oscillator\n\u003c/p\u003e\u003cp\u003eSimple, fast sine oscillator, that uses only one multiply, and two add operations to generate one sample of output, and does not require a function table.\n\u003c/p\u003e\u003cpre\u003e ares  oscils  iamp, icps, iphs [, iflg]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/oscils.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#oscils",
        "fct-type": "function",
        "title": "oscils"
      },
      "index": {
        "description": "simple fast sine oscillator Simple fast sine oscillator that uses only one multiply and two add operations to generate one sample of output and does not require function table ares oscils iamp icps iphs iflg csound doc http www.csounds.com manual html oscils.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "oscils",
        "normalized": "D-\u003eD-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:partikkel",
      "description": {
        "fct-descr": "\u003cp\u003eGranular synthesizer with \u003ca\u003eper grain\u003c/a\u003e control\n       over many of its parameters.  Has a sync input to\n       sychronize its internal grain scheduler clock to an external\n       clock source.\n\u003c/p\u003e\u003cp\u003epartikkel was conceived after reading Curtis Roads' book\n       \u003ca\u003eMicrosound\u003c/a\u003e, and the goal was to create an opcode that was\n       capable of all time-domain varieties of granular synthesis\n       described in this book. The idea being that most of the\n       techniques only differ in parameter values, and by having a\n       single opcode that can do all varieties of granular synthesis\n       makes it possible to interpolate between techniques. Granular synthesis is sometimes dubbed particle\n       synthesis, and it was thought apt to name the opcode partikkel\n       to distinguish it from other granular opcodes.\n\u003c/p\u003e\u003cpre\u003e a1 [, a2, a3, a4, a5, a6, a7, a8]  partikkel  agrainfreq, \\\n                   kdistribution, idisttab, async, kenv2amt, ienv2tab, ienv_attack, \\\n                   ienv_decay, ksustain_amount, ka_d_ratio, kduration, kamp, igainmasks, \\\n                   kwavfreq, ksweepshape, iwavfreqstarttab, iwavfreqendtab, awavfm, \\\n                   ifmamptab, kfmenv, icosine, ktraincps, knumpartials, kchroma, \\\n                   ichannelmasks, krandommask, kwaveform1, kwaveform2, kwaveform3, \\\n                   kwaveform4, iwaveamptab, asamplepos1, asamplepos2, asamplepos3, \\\n                   asamplepos4, kwavekey1, kwavekey2, kwavekey3, kwavekey4, imax_grains \\\n                   [, iopcode_id]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/partikkel.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e D -\u003e Sig -\u003e Sig -\u003e D -\u003e D -\u003e D -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e D -\u003e Sig -\u003e Sig -\u003e D -\u003e D -\u003e Sig -\u003e D -\u003e Sig -\u003e D -\u003e Sig -\u003e Sig -\u003e Sig -\u003e D -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e D -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e D -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#partikkel",
        "fct-type": "function",
        "title": "partikkel"
      },
      "index": {
        "description": "Granular synthesizer with per grain control over many of its parameters Has sync input to sychronize its internal grain scheduler clock to an external clock source partikkel was conceived after reading Curtis Roads book Microsound and the goal was to create an opcode that was capable of all time-domain varieties of granular synthesis described in this book The idea being that most of the techniques only differ in parameter values and by having single opcode that can do all varieties of granular synthesis makes it possible to interpolate between techniques Granular synthesis is sometimes dubbed particle synthesis and it was thought apt to name the opcode partikkel to distinguish it from other granular opcodes a1 a2 a3 a4 a5 a6 a7 a8 partikkel agrainfreq kdistribution idisttab async kenv2amt ienv2tab ienv attack ienv decay ksustain amount ka ratio kduration kamp igainmasks kwavfreq ksweepshape iwavfreqstarttab iwavfreqendtab awavfm ifmamptab kfmenv icosine ktraincps knumpartials kchroma ichannelmasks krandommask kwaveform1 kwaveform2 kwaveform3 kwaveform4 iwaveamptab asamplepos1 asamplepos2 asamplepos3 asamplepos4 kwavekey1 kwavekey2 kwavekey3 kwavekey4 imax grains iopcode id csound doc http www.csounds.com manual html partikkel.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "partikkel",
        "normalized": "Sig-\u003eSig-\u003eD-\u003eSig-\u003eSig-\u003eD-\u003eD-\u003eD-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eD-\u003eSig-\u003eSig-\u003eD-\u003eD-\u003eSig-\u003eD-\u003eSig-\u003eD-\u003eSig-\u003eSig-\u003eSig-\u003eD-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eD-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eD-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eD-\u003eSig-\u003eSig-\u003eD-\u003eD-\u003eD-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eD-\u003eSig-\u003eSig-\u003eD-\u003eD-\u003eSig-\u003eD-\u003eSig-\u003eD-\u003eSig-\u003eSig-\u003eSig-\u003eD-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eD-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eD-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:partikkelsync",
      "description": {
        "fct-descr": "\u003cp\u003eOutputs partikkel's grain\n       scheduler clock pulse and phase to synchronize several instances of the partikkel\n       opcode to the same clock source.\n\u003c/p\u003e\u003cp\u003epartikkelsync is an opcode for outputting partikkel's grain scheduler clock pulse and phase. partikkelsync's output can be used to synchronize other instances of the partikkel opcode to the same clock.\n\u003c/p\u003e\u003cpre\u003e async [,aphase]  partikkelsync  iopcode_id\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/partikkelsync.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#partikkelsync",
        "fct-type": "function",
        "title": "partikkelsync"
      },
      "index": {
        "description": "Outputs partikkel grain scheduler clock pulse and phase to synchronize several instances of the partikkel opcode to the same clock source partikkelsync is an opcode for outputting partikkel grain scheduler clock pulse and phase partikkelsync output can be used to synchronize other instances of the partikkel opcode to the same clock async aphase partikkelsync iopcode id csound doc http www.csounds.com manual html partikkelsync.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "partikkelsync",
        "normalized": "D-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:pcauchy",
      "description": {
        "fct-descr": "\u003cp\u003eCauchy distribution random number generator (positive values only).\n\u003c/p\u003e\u003cp\u003eCauchy distribution random number generator (positive values only). This is an x-class noise generator.\n\u003c/p\u003e\u003cpre\u003e ares  pcauchy  kalpha\n ires  pcauchy  kalpha\n kres  pcauchy  kalpha\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/pcauchy.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "a -\u003e SE a",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#pcauchy",
        "fct-type": "function",
        "title": "pcauchy"
      },
      "index": {
        "description": "Cauchy distribution random number generator positive values only Cauchy distribution random number generator positive values only This is an x-class noise generator ares pcauchy kalpha ires pcauchy kalpha kres pcauchy kalpha csound doc http www.csounds.com manual html pcauchy.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "pcauchy",
        "normalized": "a-\u003eSE a",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "a-\u003eSE a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:phasor",
      "description": {
        "fct-descr": "\u003cp\u003eProduce a normalized moving phase value.\n\u003c/p\u003e\u003cpre\u003e ares  phasor  xcps [, iphs]\n kres  phasor  kcps [, iphs]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/phasor.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#phasor",
        "fct-type": "function",
        "title": "phasor"
      },
      "index": {
        "description": "Produce normalized moving phase value ares phasor xcps iphs kres phasor kcps iphs csound doc http www.csounds.com manual html phasor.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "phasor",
        "normalized": "Sig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:phasorbnk",
      "description": {
        "fct-descr": "\u003cp\u003eProduce an arbitrary number of normalized moving phase values.\n\u003c/p\u003e\u003cp\u003eProduce an arbitrary number of normalized moving phase values, accessable by an index.\n\u003c/p\u003e\u003cpre\u003e ares  phasorbnk  xcps, kndx, icnt [, iphs]\n kres  phasorbnk  kcps, kndx, icnt [, iphs]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/phasorbnk.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#phasorbnk",
        "fct-type": "function",
        "title": "phasorbnk"
      },
      "index": {
        "description": "Produce an arbitrary number of normalized moving phase values Produce an arbitrary number of normalized moving phase values accessable by an index ares phasorbnk xcps kndx icnt iphs kres phasorbnk kcps kndx icnt iphs csound doc http www.csounds.com manual html phasorbnk.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "phasorbnk",
        "normalized": "Sig-\u003eSig-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:pinkish",
      "description": {
        "fct-descr": "\u003cp\u003eGenerates approximate pink noise.\n\u003c/p\u003e\u003cp\u003eGenerates approximate pink noise (-3dB/oct response) by one of two different methods:\n\u003c/p\u003e\u003cpre\u003e ares  pinkish  xin [, imethod] [, inumbands] [, iseed] [, iskip]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/pinkish.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e SE Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#pinkish",
        "fct-type": "function",
        "title": "pinkish"
      },
      "index": {
        "description": "Generates approximate pink noise Generates approximate pink noise dB oct response by one of two different methods ares pinkish xin imethod inumbands iseed iskip csound doc http www.csounds.com manual html pinkish.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "pinkish",
        "normalized": "Sig-\u003eSE Sig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSE Sig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:planet",
      "description": {
        "fct-descr": "\u003cp\u003eSimulates a planet orbiting in a binary star system.\n\u003c/p\u003e\u003cp\u003eplanet simulates a planet orbiting in a binary star system. The outputs are the x, y and z coordinates of the orbiting planet. It is possible for the planet to achieve escape velocity by a close encounter with a star. This makes this system somewhat unstable.\n\u003c/p\u003e\u003cpre\u003e ax, ay, az  planet  kmass1, kmass2, ksep, ix, iy, iz, ivx, ivy, ivz, idelta \\\n           [, ifriction] [, iskip]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/planet.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#planet",
        "fct-type": "function",
        "title": "planet"
      },
      "index": {
        "description": "Simulates planet orbiting in binary star system planet simulates planet orbiting in binary star system The outputs are the and coordinates of the orbiting planet It is possible for the planet to achieve escape velocity by close encounter with star This makes this system somewhat unstable ax ay az planet kmass1 kmass2 ksep ix iy iz ivx ivy ivz idelta ifriction iskip csound doc http www.csounds.com manual html planet.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "planet",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:pluck",
      "description": {
        "fct-descr": "\u003cp\u003eProduces a naturally decaying plucked string or drum sound.\n\u003c/p\u003e\u003cp\u003eAudio output is a naturally decaying plucked string or drum sound based on the Karplus-Strong algorithms.\n\u003c/p\u003e\u003cpre\u003e ares  pluck  kamp, kcps, icps, ifn, imeth [, iparm1] [, iparm2]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/pluck.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e D -\u003e Tab -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#pluck",
        "fct-type": "function",
        "title": "pluck"
      },
      "index": {
        "description": "Produces naturally decaying plucked string or drum sound Audio output is naturally decaying plucked string or drum sound based on the Karplus-Strong algorithms ares pluck kamp kcps icps ifn imeth iparm1 iparm2 csound doc http www.csounds.com manual html pluck.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "pluck",
        "normalized": "Sig-\u003eSig-\u003eD-\u003eTab-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eD-\u003eTab-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:poisson",
      "description": {
        "fct-descr": "\u003cp\u003ePoisson distribution random number generator (positive values only).\n\u003c/p\u003e\u003cp\u003ePoisson distribution random number generator (positive values only). This is an x-class noise generator.\n\u003c/p\u003e\u003cpre\u003e ares  poisson  klambda\n ires  poisson  klambda\n kres  poisson  klambda\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/poisson.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "a -\u003e SE a",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#poisson",
        "fct-type": "function",
        "title": "poisson"
      },
      "index": {
        "description": "Poisson distribution random number generator positive values only Poisson distribution random number generator positive values only This is an x-class noise generator ares poisson klambda ires poisson klambda kres poisson klambda csound doc http www.csounds.com manual html poisson.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "poisson",
        "normalized": "a-\u003eSE a",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "a-\u003eSE a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:poscil",
      "description": {
        "fct-descr": "\u003cp\u003eHigh precision oscillator.\n\u003c/p\u003e\u003cpre\u003e ares  poscil  aamp, acps [, ifn, iphs]\n ares  poscil  aamp, kcps [, ifn, iphs]\n ares  poscil  kamp, acps [, ifn, iphs]\n ares  poscil  kamp, kcps [, ifn, iphs]\n ires  poscil  kamp, kcps [, ifn, iphs]\n kres  poscil  kamp, kcps [, ifn, iphs]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/poscil.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Tab -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#poscil",
        "fct-type": "function",
        "title": "poscil"
      },
      "index": {
        "description": "High precision oscillator ares poscil aamp acps ifn iphs ares poscil aamp kcps ifn iphs ares poscil kamp acps ifn iphs ares poscil kamp kcps ifn iphs ires poscil kamp kcps ifn iphs kres poscil kamp kcps ifn iphs csound doc http www.csounds.com manual html poscil.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "poscil",
        "normalized": "Sig-\u003eSig-\u003eTab-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eTab-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:poscil3",
      "description": {
        "fct-descr": "\u003cp\u003eHigh precision oscillator with cubic interpolation.\n\u003c/p\u003e\u003cpre\u003e ares  poscil3  aamp, acps [, ifn, iphs]\n ares  poscil3  aamp, kcps [, ifn, iphs]\n ares  poscil3  kamp, acps [, ifn, iphs]\n ares  poscil3  kamp, kcps [, ifn, iphs]\n ires  poscil3  kamp, kcps [, ifn, iphs]\n kres  poscil3  kamp, kcps [, ifn, iphs]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/poscil3.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Tab -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#poscil3",
        "fct-type": "function",
        "title": "poscil3"
      },
      "index": {
        "description": "High precision oscillator with cubic interpolation ares poscil3 aamp acps ifn iphs ares poscil3 aamp kcps ifn iphs ares poscil3 kamp acps ifn iphs ares poscil3 kamp kcps ifn iphs ires poscil3 kamp kcps ifn iphs kres poscil3 kamp kcps ifn iphs csound doc http www.csounds.com manual html poscil3.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "poscil3",
        "normalized": "Sig-\u003eSig-\u003eTab-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eTab-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:prepiano",
      "description": {
        "fct-descr": "\u003cp\u003eCreates a tone similar to a piano string prepared in a Cageian fashion.\n\u003c/p\u003e\u003cp\u003eAudio output is a tone similar to a piano string, prepared with\n     a number of rubbers and rattles. The method uses a\n     physical model developed from solving the partial differential\n     equation.\n\u003c/p\u003e\u003cpre\u003e ares  prepiano  ifreq, iNS, iD, iK, \\\n         iT30,iB, kbcl, kbcr, imass, ifreq, iinit, ipos, ivel, isfreq, \\\n         isspread[, irattles, irubbers]\n al,ar  prepiano  ifreq, iNS, iD, iK, \\\n         iT30,iB, kbcl, kbcr, imass, ifreq, iinit, ipos, ivel, isfreq, \\\n         isspread[, irattles, irubbers]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/prepiano.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e Sig -\u003e Sig -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#prepiano",
        "fct-type": "function",
        "title": "prepiano"
      },
      "index": {
        "description": "Creates tone similar to piano string prepared in Cageian fashion Audio output is tone similar to piano string prepared with number of rubbers and rattles The method uses physical model developed from solving the partial differential equation ares prepiano ifreq iNS iD iK iT30 iB kbcl kbcr imass ifreq iinit ipos ivel isfreq isspread irattles irubbers al ar prepiano ifreq iNS iD iK iT30 iB kbcl kbcr imass ifreq iinit ipos ivel isfreq isspread irattles irubbers csound doc http www.csounds.com manual html prepiano.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "prepiano",
        "normalized": "D-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSig-\u003eSig-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSig-\u003eSig-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:ptable",
      "description": {
        "fct-descr": "\u003cp\u003eAccesses table values by direct indexing.\n\u003c/p\u003e\u003cpre\u003e ares  ptable  andx, ifn [, ixmode] [, ixoff] [, iwrap]\n ires  ptable  indx, ifn [, ixmode] [, ixoff] [, iwrap]\n kres  ptable  kndx, ifn [, ixmode] [, ixoff] [, iwrap]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/ptable.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Tab -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#ptable",
        "fct-type": "function",
        "title": "ptable"
      },
      "index": {
        "description": "Accesses table values by direct indexing ares ptable andx ifn ixmode ixoff iwrap ires ptable indx ifn ixmode ixoff iwrap kres ptable kndx ifn ixmode ixoff iwrap csound doc http www.csounds.com manual html ptable.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "ptable",
        "normalized": "Sig-\u003eTab-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eTab-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:ptable3",
      "description": {
        "fct-descr": "\u003cp\u003eAccesses table values by direct indexing with cubic interpolation.\n\u003c/p\u003e\u003cpre\u003e ares  ptable3  andx, ifn [, ixmode] [, ixoff] [, iwrap]\n ires  ptable3  indx, ifn [, ixmode] [, ixoff] [, iwrap]\n kres  ptable3  kndx, ifn [, ixmode] [, ixoff] [, iwrap]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/ptable3.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Tab -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#ptable3",
        "fct-type": "function",
        "title": "ptable3"
      },
      "index": {
        "description": "Accesses table values by direct indexing with cubic interpolation ares ptable3 andx ifn ixmode ixoff iwrap ires ptable3 indx ifn ixmode ixoff iwrap kres ptable3 kndx ifn ixmode ixoff iwrap csound doc http www.csounds.com manual html ptable3.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "ptable3",
        "normalized": "Sig-\u003eTab-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eTab-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:ptablei",
      "description": {
        "fct-descr": "\u003cp\u003eAccesses table values by direct indexing with linear interpolation.\n\u003c/p\u003e\u003cpre\u003e ares  ptablei  andx, ifn [, ixmode] [, ixoff] [, iwrap]\n ires  ptablei  indx, ifn [, ixmode] [, ixoff] [, iwrap]\n kres  ptablei  kndx, ifn [, ixmode] [, ixoff] [, iwrap]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/ptablei.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Tab -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#ptablei",
        "fct-type": "function",
        "title": "ptablei"
      },
      "index": {
        "description": "Accesses table values by direct indexing with linear interpolation ares ptablei andx ifn ixmode ixoff iwrap ires ptablei indx ifn ixmode ixoff iwrap kres ptablei kndx ifn ixmode ixoff iwrap csound doc http www.csounds.com manual html ptablei.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "ptablei",
        "normalized": "Sig-\u003eTab-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eTab-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:rand",
      "description": {
        "fct-descr": "\u003cp\u003eGenerates a controlled random number series.\n\u003c/p\u003e\u003cp\u003eOutput is a controlled random number series between -amp and +amp\n\u003c/p\u003e\u003cpre\u003e ares  rand  xamp [, iseed] [, isel] [, ioffset]\n kres  rand  xamp [, iseed] [, isel] [, ioffset]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/rand.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e SE Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#rand",
        "fct-type": "function",
        "title": "rand"
      },
      "index": {
        "description": "Generates controlled random number series Output is controlled random number series between amp and amp ares rand xamp iseed isel ioffset kres rand xamp iseed isel ioffset csound doc http www.csounds.com manual html rand.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "rand",
        "normalized": "Sig-\u003eSE Sig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSE Sig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:randh",
      "description": {
        "fct-descr": "\u003cp\u003eGenerates random numbers and holds them for a period of time.\n\u003c/p\u003e\u003cpre\u003e ares  randh  xamp, xcps [, iseed] [, isize] [, ioffset]\n kres  randh  kamp, kcps [, iseed] [, isize] [, ioffset]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/randh.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e SE Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#randh",
        "fct-type": "function",
        "title": "randh"
      },
      "index": {
        "description": "Generates random numbers and holds them for period of time ares randh xamp xcps iseed isize ioffset kres randh kamp kcps iseed isize ioffset csound doc http www.csounds.com manual html randh.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "randh",
        "normalized": "Sig-\u003eSig-\u003eSE Sig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSE Sig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:randi",
      "description": {
        "fct-descr": "\u003cp\u003eGenerates a controlled random number series with interpolation between each new number.\n\u003c/p\u003e\u003cpre\u003e ares  randi  xamp, xcps [, iseed] [, isize] [, ioffset]\n kres  randi  kamp, kcps [, iseed] [, isize] [, ioffset]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/randi.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e SE Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#randi",
        "fct-type": "function",
        "title": "randi"
      },
      "index": {
        "description": "Generates controlled random number series with interpolation between each new number ares randi xamp xcps iseed isize ioffset kres randi kamp kcps iseed isize ioffset csound doc http www.csounds.com manual html randi.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "randi",
        "normalized": "Sig-\u003eSig-\u003eSE Sig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSE Sig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:random",
      "description": {
        "fct-descr": "\u003cp\u003eGenerates a controlled pseudo-random number series between min and max values.\n\u003c/p\u003e\u003cp\u003eGenerates is a controlled pseudo-random number series between min and max values.\n\u003c/p\u003e\u003cpre\u003e ares  random  kmin, kmax\n ires  random  imin, imax\n kres  random  kmin, kmax\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/random.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "a -\u003e a -\u003e SE a",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#random",
        "fct-type": "function",
        "title": "random"
      },
      "index": {
        "description": "Generates controlled pseudo-random number series between min and max values Generates is controlled pseudo-random number series between min and max values ares random kmin kmax ires random imin imax kres random kmin kmax csound doc http www.csounds.com manual html random.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "random",
        "normalized": "a-\u003ea-\u003eSE a",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "a-\u003ea-\u003eSE a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:randomh",
      "description": {
        "fct-descr": "\u003cp\u003eGenerates random numbers with a user-defined limit and holds them for a period of time.\n\u003c/p\u003e\u003cpre\u003e ares  randomh  kmin, kmax, xcps [,imode] [,ifirstval]\n kres  randomh  kmin, kmax, kcps [,imode] [,ifirstval]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/randomh.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e SE Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#randomh",
        "fct-type": "function",
        "title": "randomh"
      },
      "index": {
        "description": "Generates random numbers with user-defined limit and holds them for period of time ares randomh kmin kmax xcps imode ifirstval kres randomh kmin kmax kcps imode ifirstval csound doc http www.csounds.com manual html randomh.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "randomh",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSE Sig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSE Sig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:randomi",
      "description": {
        "fct-descr": "\u003cp\u003eGenerates a user-controlled random number series with interpolation between each new number.\n\u003c/p\u003e\u003cpre\u003e ares  randomi  kmin, kmax, xcps [,imode] [,ifirstval]\n kres  randomi  kmin, kmax, kcps [,imode] [,ifirstval]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/randomi.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e SE Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#randomi",
        "fct-type": "function",
        "title": "randomi"
      },
      "index": {
        "description": "Generates user-controlled random number series with interpolation between each new number ares randomi kmin kmax xcps imode ifirstval kres randomi kmin kmax kcps imode ifirstval csound doc http www.csounds.com manual html randomi.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "randomi",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSE Sig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSE Sig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:repluck",
      "description": {
        "fct-descr": "\u003cp\u003ePhysical model of the plucked string.\n\u003c/p\u003e\u003cp\u003erepluck is an implementation of the physical model of the plucked string. A user can control the pluck point, the pickup point, the filter, and an additional audio signal, axcite. axcite is used to excite the \u003ccode\u003estring\u003c/code\u003e. Based on the Karplus-Strong algorithm.\n\u003c/p\u003e\u003cpre\u003e ares  repluck  iplk, kamp, icps, kpick, krefl, axcite\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/repluck.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e Sig -\u003e D -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#repluck",
        "fct-type": "function",
        "title": "repluck"
      },
      "index": {
        "description": "Physical model of the plucked string repluck is an implementation of the physical model of the plucked string user can control the pluck point the pickup point the filter and an additional audio signal axcite axcite is used to excite the string Based on the Karplus-Strong algorithm ares repluck iplk kamp icps kpick krefl axcite csound doc http www.csounds.com manual html repluck.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "repluck",
        "normalized": "D-\u003eSig-\u003eD-\u003eSig-\u003eSig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eSig-\u003eD-\u003eSig-\u003eSig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:rnd31",
      "description": {
        "fct-descr": "\u003cp\u003e31-bit bipolar random opcodes with controllable distribution.\n\u003c/p\u003e\u003cp\u003e31-bit bipolar random opcodes with controllable distribution. These units are portable, i.e. using the same seed value will generate the same random sequence on all systems. The distribution of generated random numbers can be varied at k-rate.\n\u003c/p\u003e\u003cpre\u003e ax  rnd31  kscl, krpow [, iseed]\n ix  rnd31  iscl, irpow [, iseed]\n kx  rnd31  kscl, krpow [, iseed]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/rnd31.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "a -\u003e a -\u003e SE a",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#rnd31",
        "fct-type": "function",
        "title": "rnd31"
      },
      "index": {
        "description": "bit bipolar random opcodes with controllable distribution bit bipolar random opcodes with controllable distribution These units are portable i.e using the same seed value will generate the same random sequence on all systems The distribution of generated random numbers can be varied at k-rate ax rnd31 kscl krpow iseed ix rnd31 iscl irpow iseed kx rnd31 kscl krpow iseed csound doc http www.csounds.com manual html rnd31.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "rnd31",
        "normalized": "a-\u003ea-\u003eSE a",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "a-\u003ea-\u003eSE a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:rspline",
      "description": {
        "fct-descr": "\u003cp\u003eGenerate random spline curves.\n\u003c/p\u003e\u003cpre\u003e ares  rspline  xrangeMin, xrangeMax, kcpsMin, kcpsMax\n kres  rspline  krangeMin, krangeMax, kcpsMin, kcpsMax\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/rspline.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#rspline",
        "fct-type": "function",
        "title": "rspline"
      },
      "index": {
        "description": "Generate random spline curves ares rspline xrangeMin xrangeMax kcpsMin kcpsMax kres rspline krangeMin krangeMax kcpsMin kcpsMax csound doc http www.csounds.com manual html rspline.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "rspline",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:sandpaper",
      "description": {
        "fct-descr": "\u003cp\u003eSemi-physical model of a sandpaper sound.\n\u003c/p\u003e\u003cp\u003esandpaper is a semi-physical model of a sandpaper sound. It is one of the PhISEM percussion opcodes. PhISEM (Physically Informed Stochastic Event Modeling) is an algorithmic approach for simulating collisions of multiple independent sound producing objects.\n\u003c/p\u003e\u003cpre\u003e ares  sandpaper  iamp, idettack [, inum] [, idamp] [, imaxshake]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/sandpaper.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#sandpaper",
        "fct-type": "function",
        "title": "sandpaper"
      },
      "index": {
        "description": "Semi-physical model of sandpaper sound sandpaper is semi-physical model of sandpaper sound It is one of the PhISEM percussion opcodes PhISEM Physically Informed Stochastic Event Modeling is an algorithmic approach for simulating collisions of multiple independent sound producing objects ares sandpaper iamp idettack inum idamp imaxshake csound doc http www.csounds.com manual html sandpaper.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "sandpaper",
        "normalized": "D-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:scale",
      "description": {
        "fct-descr": "\u003cp\u003eArbitrary signal scaling.\n\u003c/p\u003e\u003cp\u003eScales incoming value to user-definable range. Similar to scale object found in popular dataflow languages.\n\u003c/p\u003e\u003cpre\u003e kscl  scale  kinput, kmax, kmin\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/scale.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#scale",
        "fct-type": "function",
        "title": "scale"
      },
      "index": {
        "description": "Arbitrary signal scaling Scales incoming value to user-definable range Similar to scale object found in popular dataflow languages kscl scale kinput kmax kmin csound doc http www.csounds.com manual html scale.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "scale",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:scanhammer",
      "description": {
        "fct-descr": "\u003cp\u003eCopies from one table to another with a gain control.\n\u003c/p\u003e\u003cp\u003eThis is is a variant of tablecopy, copying from one table to another, starting at ipos, and with a gain control. The number of points copied is determined by the length of the source. Other points are not changed. This opcode can be used to &#226;&#128;&#156;hit&#226;&#128;&#157; a string in the scanned synthesis co\u003c/p\u003e\u003cpre\u003e  scanhammer  isrc, idst, ipos, imult\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/scanhammer.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#scanhammer",
        "fct-type": "function",
        "title": "scanhammer"
      },
      "index": {
        "description": "Copies from one table to another with gain control This is is variant of tablecopy copying from one table to another starting at ipos and with gain control The number of points copied is determined by the length of the source Other points are not changed This opcode can be used to hit string in the scanned synthesis co scanhammer isrc idst ipos imult csound doc http www.csounds.com manual html scanhammer.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "scanhammer",
        "normalized": "D-\u003eD-\u003eD-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eD-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:scans",
      "description": {
        "fct-descr": "\u003cp\u003eGenerate audio output using scanned synthesis.\n\u003c/p\u003e\u003cpre\u003e ares  scans  kamp, kfreq, ifn, id [, iorder]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/scans.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Tab -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#scans",
        "fct-type": "function",
        "title": "scans"
      },
      "index": {
        "description": "Generate audio output using scanned synthesis ares scans kamp kfreq ifn id iorder csound doc http www.csounds.com manual html scans.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "scans",
        "normalized": "Sig-\u003eSig-\u003eTab-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eTab-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:scantable",
      "description": {
        "fct-descr": "\u003cp\u003eA simpler scanned synthesis implementation.\n\u003c/p\u003e\u003cp\u003eA simpler scanned synthesis implementation. This is an implementation of a circular string scanned using external tables. This opcode will allow direct modification and reading of values with the table opcodes.\n\u003c/p\u003e\u003cpre\u003e aout  scantable  kamp, kpch, ipos, imass, istiff, idamp, ivel\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/scantable.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#scantable",
        "fct-type": "function",
        "title": "scantable"
      },
      "index": {
        "description": "simpler scanned synthesis implementation simpler scanned synthesis implementation This is an implementation of circular string scanned using external tables This opcode will allow direct modification and reading of values with the table opcodes aout scantable kamp kpch ipos imass istiff idamp ivel csound doc http www.csounds.com manual html scantable.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "scantable",
        "normalized": "Sig-\u003eSig-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:scanu",
      "description": {
        "fct-descr": "\u003cp\u003eCompute the waveform and the wavetable for use in scanned synthesis.\n\u003c/p\u003e\u003cpre\u003e  scanu  init, irate, ifnvel, ifnmass, ifnstif, ifncentr, ifndamp, kmass, \\\n           kstif, kcentr, kdamp, ileft, iright, kpos, kstrngth, ain, idisp, id\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/scanu.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e Tab -\u003e Tab -\u003e Tab -\u003e Tab -\u003e Tab -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e D -\u003e D -\u003e Sig -\u003e Sig -\u003e Sig -\u003e D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#scanu",
        "fct-type": "function",
        "title": "scanu"
      },
      "index": {
        "description": "Compute the waveform and the wavetable for use in scanned synthesis scanu init irate ifnvel ifnmass ifnstif ifncentr ifndamp kmass kstif kcentr kdamp ileft iright kpos kstrngth ain idisp id csound doc http www.csounds.com manual html scanu.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "scanu",
        "normalized": "D-\u003eD-\u003eTab-\u003eTab-\u003eTab-\u003eTab-\u003eTab-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eD-\u003eD-\u003eSig-\u003eSig-\u003eSig-\u003eD-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eTab-\u003eTab-\u003eTab-\u003eTab-\u003eTab-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eD-\u003eD-\u003eSig-\u003eSig-\u003eSig-\u003eD-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:seed",
      "description": {
        "fct-descr": "\u003cp\u003eSets the global seed value.\n\u003c/p\u003e\u003cp\u003eSets the global seed value for all x-class noise generators, as well as other opcodes that use a random call, such as grain.\n\u003c/p\u003e\u003cpre\u003e  seed  ival\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/seed.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#seed",
        "fct-type": "function",
        "title": "seed"
      },
      "index": {
        "description": "Sets the global seed value Sets the global seed value for all x-class noise generators as well as other opcodes that use random call such as grain seed ival csound doc http www.csounds.com manual html seed.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "seed",
        "normalized": "D-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:sekere",
      "description": {
        "fct-descr": "\u003cp\u003eSemi-physical model of a sekere sound.\n\u003c/p\u003e\u003cp\u003esekere is a semi-physical model of a sekere sound. It is one of the PhISEM percussion opcodes. PhISEM (Physically Informed Stochastic Event Modeling) is an algorithmic approach for simulating collisions of multiple independent sound producing objects.\n\u003c/p\u003e\u003cpre\u003e ares  sekere  iamp, idettack [, inum] [, idamp] [, imaxshake]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/sekere.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#sekere",
        "fct-type": "function",
        "title": "sekere"
      },
      "index": {
        "description": "Semi-physical model of sekere sound sekere is semi-physical model of sekere sound It is one of the PhISEM percussion opcodes PhISEM Physically Informed Stochastic Event Modeling is an algorithmic approach for simulating collisions of multiple independent sound producing objects ares sekere iamp idettack inum idamp imaxshake csound doc http www.csounds.com manual html sekere.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "sekere",
        "normalized": "D-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:sfilist",
      "description": {
        "fct-descr": "\u003cp\u003ePrints a list of all instruments of a previously loaded SoundFont2 (SF2) file.\n\u003c/p\u003e\u003cp\u003ePrints a list of all instruments of a previously loaded SoundFont2 (SF2) sample file. These opcodes allow management the sample-structure of SF2 files. In order to understand the usage of these opcodes, the user must have some knowledge of the SF2 format, so a brief description of this format can be found in the SoundFont2 File Format Appendix.\n\u003c/p\u003e\u003cpre\u003e  sfilist  ifilhandle\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/sfilist.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#sfilist",
        "fct-type": "function",
        "title": "sfilist"
      },
      "index": {
        "description": "Prints list of all instruments of previously loaded SoundFont2 SF2 file Prints list of all instruments of previously loaded SoundFont2 SF2 sample file These opcodes allow management the sample-structure of SF2 files In order to understand the usage of these opcodes the user must have some knowledge of the SF2 format so brief description of this format can be found in the SoundFont2 File Format Appendix sfilist ifilhandle csound doc http www.csounds.com manual html sfilist.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "sfilist",
        "normalized": "Str-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:sfinstr",
      "description": {
        "fct-descr": "\u003cp\u003ePlays a SoundFont2 (SF2) sample instrument, generating a stereo sound.\n\u003c/p\u003e\u003cp\u003ePlays a SoundFont2 (SF2) sample instrument, generating a stereo sound. These opcodes allow management the sample-structure of SF2 files. In order to understand the usage of these opcodes, the user must have some knowledge of the SF2 format, so a brief description of this format can be found in the SoundFont2 File Format Appendix.\n\u003c/p\u003e\u003cpre\u003e ar1, ar2  sfinstr  ivel, inotenum, xamp, xfreq, instrnum, ifilhandle \\\n           [, iflag] [, ioffset]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/sfinstr.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e Sig -\u003e Sig -\u003e D -\u003e Str -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#sfinstr",
        "fct-type": "function",
        "title": "sfinstr"
      },
      "index": {
        "description": "Plays SoundFont2 SF2 sample instrument generating stereo sound Plays SoundFont2 SF2 sample instrument generating stereo sound These opcodes allow management the sample-structure of SF2 files In order to understand the usage of these opcodes the user must have some knowledge of the SF2 format so brief description of this format can be found in the SoundFont2 File Format Appendix ar1 ar2 sfinstr ivel inotenum xamp xfreq instrnum ifilhandle iflag ioffset csound doc http www.csounds.com manual html sfinstr.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "sfinstr",
        "normalized": "D-\u003eD-\u003eSig-\u003eSig-\u003eD-\u003eStr-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eSig-\u003eSig-\u003eD-\u003eStr-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:sfinstr3",
      "description": {
        "fct-descr": "\u003cp\u003ePlays a SoundFont2 (SF2) sample instrument, generating a stereo sound with cubic interpolation.\n\u003c/p\u003e\u003cp\u003ePlays a SoundFont2 (SF2) sample instrument, generating a stereo sound with cubic interpolation. These opcodes allow management the sample-structure of SF2 files. In order to understand the usage of these opcodes, the user must have some knowledge of the SF2 format, so a brief description of this format can be found in the SoundFont2 File Format Appendix.\n\u003c/p\u003e\u003cpre\u003e ar1, ar2  sfinstr3  ivel, inotenum, xamp, xfreq, instrnum, ifilhandle \\\n           [, iflag] [, ioffset]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/sfinstr3.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e Sig -\u003e Sig -\u003e D -\u003e Str -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#sfinstr3",
        "fct-type": "function",
        "title": "sfinstr3"
      },
      "index": {
        "description": "Plays SoundFont2 SF2 sample instrument generating stereo sound with cubic interpolation Plays SoundFont2 SF2 sample instrument generating stereo sound with cubic interpolation These opcodes allow management the sample-structure of SF2 files In order to understand the usage of these opcodes the user must have some knowledge of the SF2 format so brief description of this format can be found in the SoundFont2 File Format Appendix ar1 ar2 sfinstr3 ivel inotenum xamp xfreq instrnum ifilhandle iflag ioffset csound doc http www.csounds.com manual html sfinstr3.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "sfinstr3",
        "normalized": "D-\u003eD-\u003eSig-\u003eSig-\u003eD-\u003eStr-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eSig-\u003eSig-\u003eD-\u003eStr-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:sfinstr3m",
      "description": {
        "fct-descr": "\u003cp\u003ePlays a SoundFont2 (SF2) sample instrument, generating a mono sound with cubic interpolation.\n\u003c/p\u003e\u003cp\u003ePlays a SoundFont2 (SF2) sample instrument, generating a mono sound with cubic interpolation. These opcodes allow management the sample-structure of SF2 files. In order to understand the usage of these opcodes, the user must have some knowledge of the SF2 format, so a brief description of this format can be found in the SoundFont2 File Format Appendix.\n\u003c/p\u003e\u003cpre\u003e ares  sfinstr3m  ivel, inotenum, xamp, xfreq, instrnum, ifilhandle \\\n           [, iflag] [, ioffset]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/sfinstr3m.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e Sig -\u003e Sig -\u003e D -\u003e Str -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#sfinstr3m",
        "fct-type": "function",
        "title": "sfinstr3m"
      },
      "index": {
        "description": "Plays SoundFont2 SF2 sample instrument generating mono sound with cubic interpolation Plays SoundFont2 SF2 sample instrument generating mono sound with cubic interpolation These opcodes allow management the sample-structure of SF2 files In order to understand the usage of these opcodes the user must have some knowledge of the SF2 format so brief description of this format can be found in the SoundFont2 File Format Appendix ares sfinstr3m ivel inotenum xamp xfreq instrnum ifilhandle iflag ioffset csound doc http www.csounds.com manual html sfinstr3m.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "sfinstr3m",
        "normalized": "D-\u003eD-\u003eSig-\u003eSig-\u003eD-\u003eStr-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eSig-\u003eSig-\u003eD-\u003eStr-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:sfinstrm",
      "description": {
        "fct-descr": "\u003cp\u003ePlays a SoundFont2 (SF2) sample instrument, generating a mono sound.\n\u003c/p\u003e\u003cp\u003ePlays a SoundFont2 (SF2) sample instrument, generating a mono sound. These opcodes allow management the sample-structure of SF2 files. In order to understand the usage of these opcodes, the user must have some knowledge of the SF2 format, so a brief description of this format can be found in the SoundFont2 File Format Appendix.\n\u003c/p\u003e\u003cpre\u003e ares  sfinstrm  ivel, inotenum, xamp, xfreq, instrnum, ifilhandle \\\n           [, iflag] [, ioffset]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/sfinstrm.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e Sig -\u003e Sig -\u003e D -\u003e Str -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#sfinstrm",
        "fct-type": "function",
        "title": "sfinstrm"
      },
      "index": {
        "description": "Plays SoundFont2 SF2 sample instrument generating mono sound Plays SoundFont2 SF2 sample instrument generating mono sound These opcodes allow management the sample-structure of SF2 files In order to understand the usage of these opcodes the user must have some knowledge of the SF2 format so brief description of this format can be found in the SoundFont2 File Format Appendix ares sfinstrm ivel inotenum xamp xfreq instrnum ifilhandle iflag ioffset csound doc http www.csounds.com manual html sfinstrm.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "sfinstrm",
        "normalized": "D-\u003eD-\u003eSig-\u003eSig-\u003eD-\u003eStr-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eSig-\u003eSig-\u003eD-\u003eStr-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:sfload",
      "description": {
        "fct-descr": "\u003cp\u003eLoads an entire SoundFont2 (SF2) sample file into memory.\n\u003c/p\u003e\u003cp\u003eLoads an entire SoundFont2 (SF2) sample file into memory. These opcodes allow management the sample-structure of SF2 files. In order to understand the usage of these opcodes, the user must have some knowledge of the SF2 format, so a brief description of this format can be found in the SoundFont2 File Format Appendix.\n\u003c/p\u003e\u003cpre\u003e ir  sfload  \"filename\"\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/sfload.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e D",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#sfload",
        "fct-type": "function",
        "title": "sfload"
      },
      "index": {
        "description": "Loads an entire SoundFont2 SF2 sample file into memory Loads an entire SoundFont2 SF2 sample file into memory These opcodes allow management the sample-structure of SF2 files In order to understand the usage of these opcodes the user must have some knowledge of the SF2 format so brief description of this format can be found in the SoundFont2 File Format Appendix ir sfload filename csound doc http www.csounds.com manual html sfload.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "sfload",
        "normalized": "Str-\u003eD",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eD"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:sflooper",
      "description": {
        "fct-descr": "\u003cp\u003ePlays a SoundFont2 (SF2) sample preset, generating a stereo sound, with user-defined\n       time-varying crossfade looping.\n\u003c/p\u003e\u003cp\u003ePlays a SoundFont2 (SF2) sample preset, generating a stereo sound, similarly to sfplay. Unlike that opcode, though,\n \t  it ignores the looping points set in the SF2 file and substitutes them for a user-defined crossfade loop. It is\n \t  a cross between sfplay and\n       flooper2.\n\u003c/p\u003e\u003cpre\u003e ar1, ar2  sflooper  ivel, inotenum, kamp, kpitch, ipreindex, kloopstart, kloopend, kcrossfade \\\n           [, istart, imode, ifenv, iskip] \n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/sflooper.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e Sig -\u003e Sig -\u003e D -\u003e Sig -\u003e Sig -\u003e Sig -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#sflooper",
        "fct-type": "function",
        "title": "sflooper"
      },
      "index": {
        "description": "Plays SoundFont2 SF2 sample preset generating stereo sound with user-defined time-varying crossfade looping Plays SoundFont2 SF2 sample preset generating stereo sound similarly to sfplay Unlike that opcode though it ignores the looping points set in the SF2 file and substitutes them for user-defined crossfade loop It is cross between sfplay and flooper2 ar1 ar2 sflooper ivel inotenum kamp kpitch ipreindex kloopstart kloopend kcrossfade istart imode ifenv iskip csound doc http www.csounds.com manual html sflooper.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "sflooper",
        "normalized": "D-\u003eD-\u003eSig-\u003eSig-\u003eD-\u003eSig-\u003eSig-\u003eSig-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eSig-\u003eSig-\u003eD-\u003eSig-\u003eSig-\u003eSig-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:sfpassign",
      "description": {
        "fct-descr": "\u003cp\u003eAssigns all presets of a SoundFont2 (SF2) sample file to a sequence of progressive index numbers.\n\u003c/p\u003e\u003cp\u003eAssigns all presets of a previously loaded SoundFont2 (SF2)\n       sample file to a sequence of progressive index numbers. These\n       opcodes allow management the sample-structure of SF2 files. In\n       order to understand the usage of these opcodes, the user must\n       have some knowledge of the SF2 format, so a brief description of\n       this format can be found in\n       the SoundFont2 File Format\n       Appendix.\n\u003c/p\u003e\u003cpre\u003e  sfpassign  istartindex, ifilhandle[, imsgs]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/sfpassign.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e Str -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#sfpassign",
        "fct-type": "function",
        "title": "sfpassign"
      },
      "index": {
        "description": "Assigns all presets of SoundFont2 SF2 sample file to sequence of progressive index numbers Assigns all presets of previously loaded SoundFont2 SF2 sample file to sequence of progressive index numbers These opcodes allow management the sample-structure of SF2 files In order to understand the usage of these opcodes the user must have some knowledge of the SF2 format so brief description of this format can be found in the SoundFont2 File Format Appendix sfpassign istartindex ifilhandle imsgs csound doc http www.csounds.com manual html sfpassign.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "sfpassign",
        "normalized": "D-\u003eStr-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eStr-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:sfplay",
      "description": {
        "fct-descr": "\u003cp\u003ePlays a SoundFont2 (SF2) sample preset, generating a stereo sound.\n\u003c/p\u003e\u003cp\u003ePlays a SoundFont2 (SF2) sample preset, generating a stereo sound. These opcodes allow management the sample-structure of SF2 files. In order to understand the usage of these opcodes, the user must have some knowledge of the SF2 format, so a brief description of this format can be found in the SoundFont2 File Format Appendix.\n\u003c/p\u003e\u003cpre\u003e ar1, ar2  sfplay  ivel, inotenum, xamp, xfreq, ipreindex [, iflag] [, ioffset] [, ienv]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/sfplay.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e Sig -\u003e Sig -\u003e D -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#sfplay",
        "fct-type": "function",
        "title": "sfplay"
      },
      "index": {
        "description": "Plays SoundFont2 SF2 sample preset generating stereo sound Plays SoundFont2 SF2 sample preset generating stereo sound These opcodes allow management the sample-structure of SF2 files In order to understand the usage of these opcodes the user must have some knowledge of the SF2 format so brief description of this format can be found in the SoundFont2 File Format Appendix ar1 ar2 sfplay ivel inotenum xamp xfreq ipreindex iflag ioffset ienv csound doc http www.csounds.com manual html sfplay.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "sfplay",
        "normalized": "D-\u003eD-\u003eSig-\u003eSig-\u003eD-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eSig-\u003eSig-\u003eD-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:sfplay3",
      "description": {
        "fct-descr": "\u003cp\u003ePlays a SoundFont2 (SF2) sample preset, generating a stereo sound with cubic interpolation.\n\u003c/p\u003e\u003cp\u003ePlays a SoundFont2 (SF2) sample preset, generating a stereo sound with cubic interpolation. These opcodes allow management the sample-structure of SF2 files. In order to understand the usage of these opcodes, the user must have some knowledge of the SF2 format, so a brief description of this format can be found in the SoundFont2 File Format Appendix.\n\u003c/p\u003e\u003cpre\u003e ar1, ar2  sfplay3  ivel, inotenum, xamp, xfreq, ipreindex [, iflag] [, ioffset] [, ienv]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/sfplay3.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e Sig -\u003e Sig -\u003e D -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#sfplay3",
        "fct-type": "function",
        "title": "sfplay3"
      },
      "index": {
        "description": "Plays SoundFont2 SF2 sample preset generating stereo sound with cubic interpolation Plays SoundFont2 SF2 sample preset generating stereo sound with cubic interpolation These opcodes allow management the sample-structure of SF2 files In order to understand the usage of these opcodes the user must have some knowledge of the SF2 format so brief description of this format can be found in the SoundFont2 File Format Appendix ar1 ar2 sfplay3 ivel inotenum xamp xfreq ipreindex iflag ioffset ienv csound doc http www.csounds.com manual html sfplay3.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "sfplay3",
        "normalized": "D-\u003eD-\u003eSig-\u003eSig-\u003eD-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eSig-\u003eSig-\u003eD-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:sfplay3m",
      "description": {
        "fct-descr": "\u003cp\u003ePlays a SoundFont2 (SF2) sample preset, generating a mono sound with cubic interpolation.\n\u003c/p\u003e\u003cp\u003ePlays a SoundFont2 (SF2) sample preset, generating a mono sound with cubic interpolation. These opcodes allow management the sample-structure of SF2 files. In order to understand the usage of these opcodes, the user must have some knowledge of the SF2 format, so a brief description of this format can be found in the SoundFont2 File Format Appendix.\n\u003c/p\u003e\u003cpre\u003e ares  sfplay3m  ivel, inotenum, xamp, xfreq, ipreindex [, iflag] [, ioffset] [, ienv]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/sfplay3m.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e Sig -\u003e Sig -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#sfplay3m",
        "fct-type": "function",
        "title": "sfplay3m"
      },
      "index": {
        "description": "Plays SoundFont2 SF2 sample preset generating mono sound with cubic interpolation Plays SoundFont2 SF2 sample preset generating mono sound with cubic interpolation These opcodes allow management the sample-structure of SF2 files In order to understand the usage of these opcodes the user must have some knowledge of the SF2 format so brief description of this format can be found in the SoundFont2 File Format Appendix ares sfplay3m ivel inotenum xamp xfreq ipreindex iflag ioffset ienv csound doc http www.csounds.com manual html sfplay3m.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "sfplay3m",
        "normalized": "D-\u003eD-\u003eSig-\u003eSig-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eSig-\u003eSig-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:sfplaym",
      "description": {
        "fct-descr": "\u003cp\u003ePlays a SoundFont2 (SF2) sample preset, generating a mono sound.\n\u003c/p\u003e\u003cp\u003ePlays a SoundFont2 (SF2) sample preset, generating a mono sound. These opcodes allow management the sample-structure of SF2 files. In order to understand the usage of these opcodes, the user must have some knowledge of the SF2 format, so a brief description of this format can be found in the SoundFont2 File Format Appendix.\n\u003c/p\u003e\u003cpre\u003e ares  sfplaym  ivel, inotenum, xamp, xfreq, ipreindex [, iflag] [, ioffset] [, ienv]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/sfplaym.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e Sig -\u003e Sig -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#sfplaym",
        "fct-type": "function",
        "title": "sfplaym"
      },
      "index": {
        "description": "Plays SoundFont2 SF2 sample preset generating mono sound Plays SoundFont2 SF2 sample preset generating mono sound These opcodes allow management the sample-structure of SF2 files In order to understand the usage of these opcodes the user must have some knowledge of the SF2 format so brief description of this format can be found in the SoundFont2 File Format Appendix ares sfplaym ivel inotenum xamp xfreq ipreindex iflag ioffset ienv csound doc http www.csounds.com manual html sfplaym.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "sfplaym",
        "normalized": "D-\u003eD-\u003eSig-\u003eSig-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eSig-\u003eSig-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:sfplist",
      "description": {
        "fct-descr": "\u003cp\u003ePrints a list of all presets of a SoundFont2 (SF2) sample file.\n\u003c/p\u003e\u003cp\u003ePrints a list of all presets of a previously loaded SoundFont2 (SF2) sample file. These opcodes allow management the sample-structure of SF2 files. In order to understand the usage of these opcodes, the user must have some knowledge of the SF2 format, so a brief description of this format can be found in the SoundFont2 File Format Appendix.\n\u003c/p\u003e\u003cpre\u003e  sfplist  ifilhandle\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/sfplist.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#sfplist",
        "fct-type": "function",
        "title": "sfplist"
      },
      "index": {
        "description": "Prints list of all presets of SoundFont2 SF2 sample file Prints list of all presets of previously loaded SoundFont2 SF2 sample file These opcodes allow management the sample-structure of SF2 files In order to understand the usage of these opcodes the user must have some knowledge of the SF2 format so brief description of this format can be found in the SoundFont2 File Format Appendix sfplist ifilhandle csound doc http www.csounds.com manual html sfplist.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "sfplist",
        "normalized": "Str-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:sfpreset",
      "description": {
        "fct-descr": "\u003cp\u003eAssigns an existing preset of a SoundFont2 (SF2) sample file to an index number.\n\u003c/p\u003e\u003cp\u003eAssigns an existing preset of a previously loaded SoundFont2 (SF2) sample file to an index number. These opcodes allow management the sample-structure of SF2 files. In order to understand the usage of these opcodes, the user must have some knowledge of the SF2 format, so a brief description of this format can be found in the SoundFont2 File Format Appendix.\n\u003c/p\u003e\u003cpre\u003e ir  sfpreset  iprog, ibank, ifilhandle, ipreindex\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/sfpreset.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e Str -\u003e D -\u003e D",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#sfpreset",
        "fct-type": "function",
        "title": "sfpreset"
      },
      "index": {
        "description": "Assigns an existing preset of SoundFont2 SF2 sample file to an index number Assigns an existing preset of previously loaded SoundFont2 SF2 sample file to an index number These opcodes allow management the sample-structure of SF2 files In order to understand the usage of these opcodes the user must have some knowledge of the SF2 format so brief description of this format can be found in the SoundFont2 File Format Appendix ir sfpreset iprog ibank ifilhandle ipreindex csound doc http www.csounds.com manual html sfpreset.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "sfpreset",
        "normalized": "D-\u003eD-\u003eStr-\u003eD-\u003eD",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eStr-\u003eD-\u003eD"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:shaker",
      "description": {
        "fct-descr": "\u003cp\u003eSounds like the shaking of a maraca or similar gourd instrument.\n\u003c/p\u003e\u003cp\u003eAudio output is a tone related to the shaking of a maraca or similar gourd instrument. The method is a physically inspired model developed from Perry Cook, but re-coded for Csound.\n\u003c/p\u003e\u003cpre\u003e ares  shaker  kamp, kfreq, kbeans, kdamp, ktimes [, idecay]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/shaker.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#shaker",
        "fct-type": "function",
        "title": "shaker"
      },
      "index": {
        "description": "Sounds like the shaking of maraca or similar gourd instrument Audio output is tone related to the shaking of maraca or similar gourd instrument The method is physically inspired model developed from Perry Cook but re-coded for Csound ares shaker kamp kfreq kbeans kdamp ktimes idecay csound doc http www.csounds.com manual html shaker.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "shaker",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:sleighbells",
      "description": {
        "fct-descr": "\u003cp\u003eSemi-physical model of a sleighbell sound.\n\u003c/p\u003e\u003cp\u003esleighbells is a semi-physical model of a sleighbell sound. It is one of the PhISEM percussion opcodes. PhISEM (Physically Informed Stochastic Event Modeling) is an algorithmic approach for simulating collisions of multiple independent sound producing objects.\n\u003c/p\u003e\u003cpre\u003e ares  sleighbells  kamp, idettack [, inum] [, idamp] [, imaxshake] [, ifreq] \\\n           [, ifreq1] [, ifreq2]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/sleighbells.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#sleighbells",
        "fct-type": "function",
        "title": "sleighbells"
      },
      "index": {
        "description": "Semi-physical model of sleighbell sound sleighbells is semi-physical model of sleighbell sound It is one of the PhISEM percussion opcodes PhISEM Physically Informed Stochastic Event Modeling is an algorithmic approach for simulating collisions of multiple independent sound producing objects ares sleighbells kamp idettack inum idamp imaxshake ifreq ifreq1 ifreq2 csound doc http www.csounds.com manual html sleighbells.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "sleighbells",
        "normalized": "Sig-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:sndloop",
      "description": {
        "fct-descr": "\u003cp\u003eA sound looper with pitch control.\n\u003c/p\u003e\u003cp\u003eThis opcode records input audio and plays it back in a loop with user-defined\n    duration and crossfade time. It also allows the pitch of the loop to be controlled,\n    including reversed playback.\n\u003c/p\u003e\u003cpre\u003e asig, krec  sndloop  ain, kpitch, ktrig, idur, ifad\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/sndloop.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e D -\u003e D -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#sndloop",
        "fct-type": "function",
        "title": "sndloop"
      },
      "index": {
        "description": "sound looper with pitch control This opcode records input audio and plays it back in loop with user-defined duration and crossfade time It also allows the pitch of the loop to be controlled including reversed playback asig krec sndloop ain kpitch ktrig idur ifad csound doc http www.csounds.com manual html sndloop.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "sndloop",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eD-\u003eD-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eD-\u003eD-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:sndwarp",
      "description": {
        "fct-descr": "\u003cp\u003eReads a mono sound sample from a table and applies time-stretching and/or pitch modification.\n\u003c/p\u003e\u003cp\u003esndwarp reads sound samples from a table and applies time-stretching and/or pitch modification. Time and frequency modification are independent from one another. For example, a sound can be stretched in time while raising the pitch!\n\u003c/p\u003e\u003cpre\u003e ares [, ac]  sndwarp  xamp, xtimewarp, xresample, ifn1, ibeg, iwsize, \\\n           irandw, ioverlap, ifn2, itimemode\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/sndwarp.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Tab -\u003e D -\u003e D -\u003e D -\u003e D -\u003e Tab -\u003e D -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#sndwarp",
        "fct-type": "function",
        "title": "sndwarp"
      },
      "index": {
        "description": "Reads mono sound sample from table and applies time-stretching and or pitch modification sndwarp reads sound samples from table and applies time-stretching and or pitch modification Time and frequency modification are independent from one another For example sound can be stretched in time while raising the pitch ares ac sndwarp xamp xtimewarp xresample ifn1 ibeg iwsize irandw ioverlap ifn2 itimemode csound doc http www.csounds.com manual html sndwarp.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "sndwarp",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eTab-\u003eD-\u003eD-\u003eD-\u003eD-\u003eTab-\u003eD-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eTab-\u003eD-\u003eD-\u003eD-\u003eD-\u003eTab-\u003eD-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:sndwarpst",
      "description": {
        "fct-descr": "\u003cp\u003eReads a stereo sound sample from a table and applies time-stretching and/or pitch modification.\n\u003c/p\u003e\u003cp\u003esndwarpst reads stereo sound samples from a table and applies time-stretching and/or pitch modification. Time and frequency modification are independent from one another. For example, a sound can be stretched in time while raising the pitch!\n\u003c/p\u003e\u003cpre\u003e ar1, ar2 [,ac1] [, ac2]  sndwarpst  xamp, xtimewarp, xresample, ifn1, \\\n           ibeg, iwsize, irandw, ioverlap, ifn2, itimemode\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/sndwarpst.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Tab -\u003e D -\u003e D -\u003e D -\u003e D -\u003e Tab -\u003e D -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#sndwarpst",
        "fct-type": "function",
        "title": "sndwarpst"
      },
      "index": {
        "description": "Reads stereo sound sample from table and applies time-stretching and or pitch modification sndwarpst reads stereo sound samples from table and applies time-stretching and or pitch modification Time and frequency modification are independent from one another For example sound can be stretched in time while raising the pitch ar1 ar2 ac1 ac2 sndwarpst xamp xtimewarp xresample ifn1 ibeg iwsize irandw ioverlap ifn2 itimemode csound doc http www.csounds.com manual html sndwarpst.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "sndwarpst",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eTab-\u003eD-\u003eD-\u003eD-\u003eD-\u003eTab-\u003eD-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eTab-\u003eD-\u003eD-\u003eD-\u003eD-\u003eTab-\u003eD-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:stix",
      "description": {
        "fct-descr": "\u003cp\u003eSemi-physical model of a stick sound.\n\u003c/p\u003e\u003cp\u003estix is a semi-physical model of a stick sound. It is one of the PhISEM percussion opcodes. PhISEM (Physically Informed Stochastic Event Modeling) is an algorithmic approach for simulating collisions of multiple independent sound producing objects.\n\u003c/p\u003e\u003cpre\u003e ares  stix  iamp, idettack [, inum] [, idamp] [, imaxshake]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/stix.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#stix",
        "fct-type": "function",
        "title": "stix"
      },
      "index": {
        "description": "Semi-physical model of stick sound stix is semi-physical model of stick sound It is one of the PhISEM percussion opcodes PhISEM Physically Informed Stochastic Event Modeling is an algorithmic approach for simulating collisions of multiple independent sound producing objects ares stix iamp idettack inum idamp imaxshake csound doc http www.csounds.com manual html stix.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "stix",
        "normalized": "D-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:stkBandedWG",
      "description": {
        "fct-descr": "\u003cp\u003eSTKBandedWG uses banded waveguide techniques to model a variety of sounds.\n\u003c/p\u003e\u003cp\u003eThis opcode uses banded waveguide techniques to model a variety of sounds, including bowed bars, glasses, and bowls.\n\u003c/p\u003e\u003cpre\u003e asignal  STKBandedWG  ifrequency, iamplitude, [kpress, kv1[, kmot, kv2[, klfo, kv3[, klfodepth, kv4[, kvel, kv5[, kstrk, kv6[, kinstr, kv7]]]]]]]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/STKBandedWG.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#stkBandedWG",
        "fct-type": "function",
        "title": "stkBandedWG"
      },
      "index": {
        "description": "STKBandedWG uses banded waveguide techniques to model variety of sounds This opcode uses banded waveguide techniques to model variety of sounds including bowed bars glasses and bowls asignal STKBandedWG ifrequency iamplitude kpress kv1 kmot kv2 klfo kv3 klfodepth kv4 kvel kv5 kstrk kv6 kinstr kv7 csound doc http www.csounds.com manual html STKBandedWG.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "stkBandedWG",
        "normalized": "D-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "Banded WG",
        "signature": "D-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:stkBeeThree",
      "description": {
        "fct-descr": "\u003cp\u003eSTK Hammond-oid organ-like FM synthesis instrument.\n\u003c/p\u003e\u003cpre\u003e asignal  STKBeeThree  ifrequency, iamplitude, [kop4, kv1[, kop3, kv2[, klfo, kv3[, klfodepth, kv4[, kadsr, kv5]]]]]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/STKBeeThree.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#stkBeeThree",
        "fct-type": "function",
        "title": "stkBeeThree"
      },
      "index": {
        "description": "STK Hammond-oid organ-like FM synthesis instrument asignal STKBeeThree ifrequency iamplitude kop4 kv1 kop3 kv2 klfo kv3 klfodepth kv4 kadsr kv5 csound doc http www.csounds.com manual html STKBeeThree.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "stkBeeThree",
        "normalized": "D-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "Bee Three",
        "signature": "D-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:stkBlowBotl",
      "description": {
        "fct-descr": "\u003cp\u003eSTKBlowBotl uses a helmholtz resonator (biquad filter) with a polynomial jet excitation.\n\u003c/p\u003e\u003cp\u003eThis opcode implements a helmholtz resonator (biquad filter) with a polynomial jet excitation (a la Cook).\n\u003c/p\u003e\u003cpre\u003e asignal  STKBlowBotl  ifrequency, iamplitude, [knoise, kv1[, klfo, kv2[, klfodepth, kv3[, kvol, kv4]]]]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/STKBlowBotl.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#stkBlowBotl",
        "fct-type": "function",
        "title": "stkBlowBotl"
      },
      "index": {
        "description": "STKBlowBotl uses helmholtz resonator biquad filter with polynomial jet excitation This opcode implements helmholtz resonator biquad filter with polynomial jet excitation la Cook asignal STKBlowBotl ifrequency iamplitude knoise kv1 klfo kv2 klfodepth kv3 kvol kv4 csound doc http www.csounds.com manual html STKBlowBotl.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "stkBlowBotl",
        "normalized": "D-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "Blow Botl",
        "signature": "D-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:stkBlowHole",
      "description": {
        "fct-descr": "\u003cp\u003eSTK clarinet physical model with one register hole and one tonehole.\n\u003c/p\u003e\u003cp\u003eThis opcode is based on the clarinet model, with the addition of a two-port register hole and a three-port dynamic tonehole implementation.\n\u003c/p\u003e\u003cpre\u003e asignal  STKBlowHole  ifrequency, iamplitude, [kreed, kv1[, knoise, kv2[, khole, kv3[, kreg, kv4[, kbreath, kv5]]]]]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/STKBlowHole.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#stkBlowHole",
        "fct-type": "function",
        "title": "stkBlowHole"
      },
      "index": {
        "description": "STK clarinet physical model with one register hole and one tonehole This opcode is based on the clarinet model with the addition of two-port register hole and three-port dynamic tonehole implementation asignal STKBlowHole ifrequency iamplitude kreed kv1 knoise kv2 khole kv3 kreg kv4 kbreath kv5 csound doc http www.csounds.com manual html STKBlowHole.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "stkBlowHole",
        "normalized": "D-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "Blow Hole",
        "signature": "D-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:stkBowed",
      "description": {
        "fct-descr": "\u003cp\u003eSTKBowed is a bowed string instrument.\n\u003c/p\u003e\u003cp\u003eSTKBowed is a bowed string instrument, using a waveguide model.\n\u003c/p\u003e\u003cpre\u003e asignal  STKBowed  ifrequency, iamplitude, [kpress, kv1[, kpos, kv2[, klfo, kv3[, klfodepth, kv4[, kvol, kv5]]]]]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/STKBowed.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#stkBowed",
        "fct-type": "function",
        "title": "stkBowed"
      },
      "index": {
        "description": "STKBowed is bowed string instrument STKBowed is bowed string instrument using waveguide model asignal STKBowed ifrequency iamplitude kpress kv1 kpos kv2 klfo kv3 klfodepth kv4 kvol kv5 csound doc http www.csounds.com manual html STKBowed.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "stkBowed",
        "normalized": "D-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "Bowed",
        "signature": "D-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:stkBrass",
      "description": {
        "fct-descr": "\u003cp\u003eSTKBrass is a simple brass instrument.\n\u003c/p\u003e\u003cp\u003eSTKBrass uses a simple brass instrument waveguide model, a la Cook.\n\u003c/p\u003e\u003cpre\u003e asignal  STKBrass  ifrequency, iamplitude, [klip, kv1[, kslide, kv2[, klfo, kv3[, klfodepth, kv4[, kvol, kv5]]]]]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/STKBrass.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#stkBrass",
        "fct-type": "function",
        "title": "stkBrass"
      },
      "index": {
        "description": "STKBrass is simple brass instrument STKBrass uses simple brass instrument waveguide model la Cook asignal STKBrass ifrequency iamplitude klip kv1 kslide kv2 klfo kv3 klfodepth kv4 kvol kv5 csound doc http www.csounds.com manual html STKBrass.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "stkBrass",
        "normalized": "D-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "Brass",
        "signature": "D-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:stkClarinet",
      "description": {
        "fct-descr": "\u003cp\u003eSTKClarinet uses a simple clarinet physical model.\n\u003c/p\u003e\u003cpre\u003e asignal  STKClarinet  ifrequency, iamplitude, [kstiff, kv1[, knoise, kv2[, klfo, kv3[, klfodepth, kv4[, kbreath, kv5]]]]]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/STKClarinet.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#stkClarinet",
        "fct-type": "function",
        "title": "stkClarinet"
      },
      "index": {
        "description": "STKClarinet uses simple clarinet physical model asignal STKClarinet ifrequency iamplitude kstiff kv1 knoise kv2 klfo kv3 klfodepth kv4 kbreath kv5 csound doc http www.csounds.com manual html STKClarinet.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "stkClarinet",
        "normalized": "D-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "Clarinet",
        "signature": "D-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:stkDrummer",
      "description": {
        "fct-descr": "\u003cp\u003eSTKDrummer is a drum sampling synthesizer.\n\u003c/p\u003e\u003cp\u003eSTKDrummer is a drum sampling synthesizer using raw waves and one-pole filters,\n       The drum rawwave files are sampled at 22050 Hz, but will be appropriately interpolated for other sample rates.\n\u003c/p\u003e\u003cpre\u003e asignal  STKDrummer  ifrequency, iamplitude\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/STKDrummer.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#stkDrummer",
        "fct-type": "function",
        "title": "stkDrummer"
      },
      "index": {
        "description": "STKDrummer is drum sampling synthesizer STKDrummer is drum sampling synthesizer using raw waves and one-pole filters The drum rawwave files are sampled at Hz but will be appropriately interpolated for other sample rates asignal STKDrummer ifrequency iamplitude csound doc http www.csounds.com manual html STKDrummer.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "stkDrummer",
        "normalized": "D-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "Drummer",
        "signature": "D-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:stkFMVoices",
      "description": {
        "fct-descr": "\u003cp\u003eSTKFMVoices is a singing FM synthesis instrument.\n\u003c/p\u003e\u003cp\u003eSTKFMVoices is a singing FM synthesis instrument. It has 3 carriers and a common modulator, also referred to as algorithm 6 of the TX81Z.\n\u003c/p\u003e\u003cpre\u003e asignal  STKFMVoices  ifrequency, iamplitude, [kvowel, kv1[, kspec, kv2[, klfo, kv3[, klfodepth, kv4[, kadsr, kv5]]]]]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/STKFMVoices.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#stkFMVoices",
        "fct-type": "function",
        "title": "stkFMVoices"
      },
      "index": {
        "description": "STKFMVoices is singing FM synthesis instrument STKFMVoices is singing FM synthesis instrument It has carriers and common modulator also referred to as algorithm of the TX81Z asignal STKFMVoices ifrequency iamplitude kvowel kv1 kspec kv2 klfo kv3 klfodepth kv4 kadsr kv5 csound doc http www.csounds.com manual html STKFMVoices.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "stkFMVoices",
        "normalized": "D-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "FMVoices",
        "signature": "D-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:stkFlute",
      "description": {
        "fct-descr": "\u003cp\u003eSTKFlute uses a simple flute physical model.\n\u003c/p\u003e\u003cp\u003eSTKFlute uses a simple flute physical model. The jet model uses a polynomial, a la Cook.\n\u003c/p\u003e\u003cpre\u003e asignal  STKFlute  ifrequency, iamplitude, [kjet, kv1[, knoise, kv2[, klfo, kv3[, klfodepth, kv4[, kbreath, kv5]]]]]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/STKFlute.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#stkFlute",
        "fct-type": "function",
        "title": "stkFlute"
      },
      "index": {
        "description": "STKFlute uses simple flute physical model STKFlute uses simple flute physical model The jet model uses polynomial la Cook asignal STKFlute ifrequency iamplitude kjet kv1 knoise kv2 klfo kv3 klfodepth kv4 kbreath kv5 csound doc http www.csounds.com manual html STKFlute.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "stkFlute",
        "normalized": "D-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "Flute",
        "signature": "D-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:stkHevyMetl",
      "description": {
        "fct-descr": "\u003cp\u003eSTKHevyMetl produces metal sounds.\n\u003c/p\u003e\u003cp\u003eSTKHevyMetl produces metal sounds, using FM synthesis.\n       It uses 3 cascade operators with feedback modulation, also referred to as algorithm 3 of the TX81Z.\n\u003c/p\u003e\u003cpre\u003e asignal  STKHevyMetl  ifrequency, iamplitude, [kmod, kv1[, kcross, kv2[, klfo, kv3[, klfodepth, kv4[, kadsr, kv5]]]]]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/STKHevyMetl.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#stkHevyMetl",
        "fct-type": "function",
        "title": "stkHevyMetl"
      },
      "index": {
        "description": "STKHevyMetl produces metal sounds STKHevyMetl produces metal sounds using FM synthesis It uses cascade operators with feedback modulation also referred to as algorithm of the TX81Z asignal STKHevyMetl ifrequency iamplitude kmod kv1 kcross kv2 klfo kv3 klfodepth kv4 kadsr kv5 csound doc http www.csounds.com manual html STKHevyMetl.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "stkHevyMetl",
        "normalized": "D-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "Hevy Metl",
        "signature": "D-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:stkMandolin",
      "description": {
        "fct-descr": "\u003cp\u003eSTKMandolin produces mamdolin-like sounds.\n\u003c/p\u003e\u003cp\u003eSTKMandolin produces mamdolin-like sounds, using \u003ca\u003ecommuted synthesis\u003c/a\u003e techniques to model a mandolin instrument.\n\u003c/p\u003e\u003cpre\u003e asignal  STKMandolin  ifrequency, iamplitude, [kbody, kv1[, kpos, kv2[, ksus, kv3[, kdetune, kv4[, kmic, kv5]]]]]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/STKMandolin.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#stkMandolin",
        "fct-type": "function",
        "title": "stkMandolin"
      },
      "index": {
        "description": "STKMandolin produces mamdolin-like sounds STKMandolin produces mamdolin-like sounds using commuted synthesis techniques to model mandolin instrument asignal STKMandolin ifrequency iamplitude kbody kv1 kpos kv2 ksus kv3 kdetune kv4 kmic kv5 csound doc http www.csounds.com manual html STKMandolin.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "stkMandolin",
        "normalized": "D-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "Mandolin",
        "signature": "D-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:stkModalBar",
      "description": {
        "fct-descr": "\u003cp\u003eSTKModalBar is a resonant bar instrument.\n\u003c/p\u003e\u003cp\u003eThis opcode is a resonant bar instrument.It has a number of different struck bar instruments.\n\u003c/p\u003e\u003cpre\u003e asignal  STKModalBar  ifrequency, iamplitude, [khard, kv1[, kpos, kv2[, klfo, kv3[, klfodepth, kv4[, kmix, kv5[, kvol, kv6[, kinstr, kv7]]]]]]]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/STKModalBar.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#stkModalBar",
        "fct-type": "function",
        "title": "stkModalBar"
      },
      "index": {
        "description": "STKModalBar is resonant bar instrument This opcode is resonant bar instrument.It has number of different struck bar instruments asignal STKModalBar ifrequency iamplitude khard kv1 kpos kv2 klfo kv3 klfodepth kv4 kmix kv5 kvol kv6 kinstr kv7 csound doc http www.csounds.com manual html STKModalBar.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "stkModalBar",
        "normalized": "D-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "Modal Bar",
        "signature": "D-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:stkMoog",
      "description": {
        "fct-descr": "\u003cp\u003eSTKMoog produces moog-like swept filter sounds.\n\u003c/p\u003e\u003cp\u003eSTKMoog produces moog-like swept filter sounds, using one attack wave, one looped wave, and an ADSR envelope and adds two sweepable formant filters.\n\u003c/p\u003e\u003cpre\u003e asignal  STKMoog  ifrequency, iamplitude, [kq, kv1[, krate, kv2[, klfo, kv3[, klfodepth, kv4[, kvol, kv5]]]]]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/STKMoog.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#stkMoog",
        "fct-type": "function",
        "title": "stkMoog"
      },
      "index": {
        "description": "STKMoog produces moog-like swept filter sounds STKMoog produces moog-like swept filter sounds using one attack wave one looped wave and an ADSR envelope and adds two sweepable formant filters asignal STKMoog ifrequency iamplitude kq kv1 krate kv2 klfo kv3 klfodepth kv4 kvol kv5 csound doc http www.csounds.com manual html STKMoog.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "stkMoog",
        "normalized": "D-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "Moog",
        "signature": "D-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:stkPercFlut",
      "description": {
        "fct-descr": "\u003cp\u003eSTKPercFlut is a percussive flute FM synthesis instrument.\n\u003c/p\u003e\u003cp\u003eSTKPercFlut is a percussive flute FM synthesis instrument. The instrument uses an algorithm like the algorithm 4 of the TX81Z.\n\u003c/p\u003e\u003cpre\u003e asignal  STKPercFlut  ifrequency, iamplitude, [kmod, kv1[, kcross, kv2[, klfo, kv3[, klfodepth, kv4[, kadsr, kv5]]]]]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/STKPercFlut.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#stkPercFlut",
        "fct-type": "function",
        "title": "stkPercFlut"
      },
      "index": {
        "description": "STKPercFlut is percussive flute FM synthesis instrument STKPercFlut is percussive flute FM synthesis instrument The instrument uses an algorithm like the algorithm of the TX81Z asignal STKPercFlut ifrequency iamplitude kmod kv1 kcross kv2 klfo kv3 klfodepth kv4 kadsr kv5 csound doc http www.csounds.com manual html STKPercFlut.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "stkPercFlut",
        "normalized": "D-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "Perc Flut",
        "signature": "D-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:stkPlucked",
      "description": {
        "fct-descr": "\u003cp\u003eSTKPlucked uses a plucked string physical model.\n\u003c/p\u003e\u003cp\u003eSTKPlucked uses a plucked string physical model based on the Karplus-Strong algorithm.\n\u003c/p\u003e\u003cpre\u003e asignal  STKPlucked  ifrequency, iamplitude\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/STKPlucked.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#stkPlucked",
        "fct-type": "function",
        "title": "stkPlucked"
      },
      "index": {
        "description": "STKPlucked uses plucked string physical model STKPlucked uses plucked string physical model based on the Karplus-Strong algorithm asignal STKPlucked ifrequency iamplitude csound doc http www.csounds.com manual html STKPlucked.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "stkPlucked",
        "normalized": "D-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "Plucked",
        "signature": "D-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:stkResonate",
      "description": {
        "fct-descr": "\u003cp\u003eSTKResonate is a noise driven formant filter.\n\u003c/p\u003e\u003cp\u003eSTKResonate is a noise driven formant filter. This instrument contains a noise source, which excites a biquad resonance filter, with volume controlled by an ADSR.\n\u003c/p\u003e\u003cpre\u003e asignal  STKResonate  ifrequency, iamplitude, [kfreq, kv1[, kpole, kv2[, knotch, kv3[, kzero, kv4[, kenv, kv5]]]]]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/STKResonate.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#stkResonate",
        "fct-type": "function",
        "title": "stkResonate"
      },
      "index": {
        "description": "STKResonate is noise driven formant filter STKResonate is noise driven formant filter This instrument contains noise source which excites biquad resonance filter with volume controlled by an ADSR asignal STKResonate ifrequency iamplitude kfreq kv1 kpole kv2 knotch kv3 kzero kv4 kenv kv5 csound doc http www.csounds.com manual html STKResonate.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "stkResonate",
        "normalized": "D-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "Resonate",
        "signature": "D-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:stkRhodey",
      "description": {
        "fct-descr": "\u003cp\u003eSTK Fender Rhodes-like electric piano FM synthesis instrument.\n\u003c/p\u003e\u003cpre\u003e asignal  STKRhodey  ifrequency, iamplitude, [kmod, kv1[, kcross, kv2[, klfo, kv3[, klfodepth, kv4[, kadsr, kv5]]]]]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/STKRhodey.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#stkRhodey",
        "fct-type": "function",
        "title": "stkRhodey"
      },
      "index": {
        "description": "STK Fender Rhodes-like electric piano FM synthesis instrument asignal STKRhodey ifrequency iamplitude kmod kv1 kcross kv2 klfo kv3 klfodepth kv4 kadsr kv5 csound doc http www.csounds.com manual html STKRhodey.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "stkRhodey",
        "normalized": "D-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "Rhodey",
        "signature": "D-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:stkSaxofony",
      "description": {
        "fct-descr": "\u003cp\u003eSTKSaxofony is a faux conical bore reed instrument.\n\u003c/p\u003e\u003cp\u003eSTKSaxofony is a faux conical bore reed instrument.\n       This opcode uses a \u003ca\u003ehybrid\u003c/a\u003e digital waveguide instrument that can generate a variety of wind-like sounds. It has also been referred to as the \u003ca\u003eblowed string\u003c/a\u003e model. \n       The waveguide section is essentially that of a string, with one rigid and one lossy termination. The non-linear function is a reed table. \n       The string can be \u003ca\u003eblown\u003c/a\u003e at any point between the terminations, though just as with strings, it is impossible to excite the system at either end. \n       If the excitation is placed at the string mid-point, the sound is that of a clarinet. At points closer to the \u003ca\u003ebridge\u003c/a\u003e, the sound is closer to that of a saxophone.\n\u003c/p\u003e\u003cpre\u003e asignal  STKSaxofony  ifrequency, iamplitude, [kstiff, kv1[, kapert, kv2[, kblow, kv3[, knoise, kv4[, klfo, kv5[, klfodepth, kv6[, kbreath, kv7]]]]]]]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/STKSaxofony.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#stkSaxofony",
        "fct-type": "function",
        "title": "stkSaxofony"
      },
      "index": {
        "description": "STKSaxofony is faux conical bore reed instrument STKSaxofony is faux conical bore reed instrument This opcode uses hybrid digital waveguide instrument that can generate variety of wind-like sounds It has also been referred to as the blowed string model The waveguide section is essentially that of string with one rigid and one lossy termination The non-linear function is reed table The string can be blown at any point between the terminations though just as with strings it is impossible to excite the system at either end If the excitation is placed at the string mid-point the sound is that of clarinet At points closer to the bridge the sound is closer to that of saxophone asignal STKSaxofony ifrequency iamplitude kstiff kv1 kapert kv2 kblow kv3 knoise kv4 klfo kv5 klfodepth kv6 kbreath kv7 csound doc http www.csounds.com manual html STKSaxofony.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "stkSaxofony",
        "normalized": "D-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "Saxofony",
        "signature": "D-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:stkShakers",
      "description": {
        "fct-descr": "\u003cp\u003eSTKShakers is an instrument that simulates environmental sounds or collisions of multiple independent sound producing objects.\n\u003c/p\u003e\u003cp\u003eSTKShakers are a set of PhISEM and PhOLIES instruments: \n       PhISEM (Physically Informed Stochastic Event Modeling) is an algorithmic approach for simulating collisions of multiple independent sound producing objects. \n       It can simulate a Maraca, Sekere, Cabasa, Bamboo Wind Chimes, Water Drops, Tambourine, Sleighbells, and a Guiro. On http:\u003cem/\u003esoundlab.cs.princeton.edu\u003cem\u003eresearch\u003c/em\u003econtrollers\u003cem\u003eshakers\u003c/em\u003e\n PhOLIES (Physically-Oriented Library of Imitated Environmental Sounds) there is a similar approach for the synthesis of environmental sounds. \n It simulates of breaking sticks, crunchy snow (or not), a wrench, sandpaper, and more..\n\u003c/p\u003e\u003cpre\u003e asignal  STKShakers  ifrequency, iamplitude, [kenerg, kv1[, kdecay, kv2[, kshake, kv3[, knum, kv4[, kres, kv5[, kinstr, kv6]]]]]]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/STKShakers.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#stkShakers",
        "fct-type": "function",
        "title": "stkShakers"
      },
      "index": {
        "description": "STKShakers is an instrument that simulates environmental sounds or collisions of multiple independent sound producing objects STKShakers are set of PhISEM and PhOLIES instruments PhISEM Physically Informed Stochastic Event Modeling is an algorithmic approach for simulating collisions of multiple independent sound producing objects It can simulate Maraca Sekere Cabasa Bamboo Wind Chimes Water Drops Tambourine Sleighbells and Guiro On http soundlab.cs.princeton.edu research controllers shakers PhOLIES Physically-Oriented Library of Imitated Environmental Sounds there is similar approach for the synthesis of environmental sounds It simulates of breaking sticks crunchy snow or not wrench sandpaper and more asignal STKShakers ifrequency iamplitude kenerg kv1 kdecay kv2 kshake kv3 knum kv4 kres kv5 kinstr kv6 csound doc http www.csounds.com manual html STKShakers.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "stkShakers",
        "normalized": "D-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "Shakers",
        "signature": "D-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:stkSimple",
      "description": {
        "fct-descr": "\u003cp\u003eSTKSimple is a wavetable/noise instrument.\n\u003c/p\u003e\u003cp\u003eSTKSimple is a wavetable/noise instrument.\n       It combines a looped wave, a noise source, a biquad resonance filter, a one-pole filter, and an ADSR envelope to create some interesting sounds.\n\u003c/p\u003e\u003cpre\u003e asignal  STKSimple  ifrequency, iamplitude, [kpos, kv1[, kcross, kv2[, kenv, kv3[, kgain, kv4]]]]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/STKSimple.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#stkSimple",
        "fct-type": "function",
        "title": "stkSimple"
      },
      "index": {
        "description": "STKSimple is wavetable noise instrument STKSimple is wavetable noise instrument It combines looped wave noise source biquad resonance filter one-pole filter and an ADSR envelope to create some interesting sounds asignal STKSimple ifrequency iamplitude kpos kv1 kcross kv2 kenv kv3 kgain kv4 csound doc http www.csounds.com manual html STKSimple.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "stkSimple",
        "normalized": "D-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "Simple",
        "signature": "D-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:stkSitar",
      "description": {
        "fct-descr": "\u003cp\u003eSTKSitar uses a plucked string physical model.\n\u003c/p\u003e\u003cp\u003eSTKSitar uses a plucked string physical model based on the Karplus-Strong algorithm.\n\u003c/p\u003e\u003cpre\u003e asignal  STKSitar  ifrequency, iamplitude\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/STKSitar.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#stkSitar",
        "fct-type": "function",
        "title": "stkSitar"
      },
      "index": {
        "description": "STKSitar uses plucked string physical model STKSitar uses plucked string physical model based on the Karplus-Strong algorithm asignal STKSitar ifrequency iamplitude csound doc http www.csounds.com manual html STKSitar.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "stkSitar",
        "normalized": "D-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "Sitar",
        "signature": "D-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:stkStifKarp",
      "description": {
        "fct-descr": "\u003cp\u003eSTKStifKarp is a plucked stiff string instrument.\n\u003c/p\u003e\u003cp\u003eSTKStifKarp is a plucked stiff string instrument. \n       It a simple plucked string algorithm (Karplus Strong) with enhancements, including string stiffness and pluck position controls. The stiffness is modeled with allpass filters.\n\u003c/p\u003e\u003cpre\u003e asignal  STKStifKarp  ifrequency, iamplitude, [kpos, kv1[, ksus, kv2[, kstretch, kv3]]]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/STKStifKarp.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#stkStifKarp",
        "fct-type": "function",
        "title": "stkStifKarp"
      },
      "index": {
        "description": "STKStifKarp is plucked stiff string instrument STKStifKarp is plucked stiff string instrument It simple plucked string algorithm Karplus Strong with enhancements including string stiffness and pluck position controls The stiffness is modeled with allpass filters asignal STKStifKarp ifrequency iamplitude kpos kv1 ksus kv2 kstretch kv3 csound doc http www.csounds.com manual html STKStifKarp.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "stkStifKarp",
        "normalized": "D-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "Stif Karp",
        "signature": "D-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:stkTubeBell",
      "description": {
        "fct-descr": "\u003cp\u003eSTKTubeBell is a  tubular bell (orchestral chime) FM synthesis instrument.\n\u003c/p\u003e\u003cp\u003eSTKTubeBell is a tubular bell (orchestral chime) FM synthesis instrument. \n       It uses two simple FM Pairs summed together, also referred to as algorithm 5 of the TX81Z.\n\u003c/p\u003e\u003cpre\u003e asignal  STKTubeBell  ifrequency, iamplitude, [kmod, kv1[, kcross, kv2[, klfo, kv3[, klfodepth, kv4[, kadsr, kv5]]]]]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/STKTubeBell.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#stkTubeBell",
        "fct-type": "function",
        "title": "stkTubeBell"
      },
      "index": {
        "description": "STKTubeBell is tubular bell orchestral chime FM synthesis instrument STKTubeBell is tubular bell orchestral chime FM synthesis instrument It uses two simple FM Pairs summed together also referred to as algorithm of the TX81Z asignal STKTubeBell ifrequency iamplitude kmod kv1 kcross kv2 klfo kv3 klfodepth kv4 kadsr kv5 csound doc http www.csounds.com manual html STKTubeBell.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "stkTubeBell",
        "normalized": "D-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "Tube Bell",
        "signature": "D-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:stkVoicForm",
      "description": {
        "fct-descr": "\u003cp\u003eSTKVoicForm is a  four formant synthesis instrument.\n\u003c/p\u003e\u003cp\u003eSTKVoicForm is a four formant synthesis instrument. \n This instrument contains an excitation singing wavetable (looping wave with random and periodic vibrato, smoothing on frequency, etc.), excitation noise, and four sweepable complex resonances. \n Measured formant data is included, and enough data is there to support either parallel or cascade synthesis. In the floating point case cascade synthesis is the most natural so that's what you'll find here.\n\u003c/p\u003e\u003cpre\u003e asignal  STKVoicForm  ifrequency, iamplitude, [kmix, kv1[, ksel, kv2[, klfo, kv3[, klfodepth, kv4[, kloud, kv5]]]]]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/STKVoicForm.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#stkVoicForm",
        "fct-type": "function",
        "title": "stkVoicForm"
      },
      "index": {
        "description": "STKVoicForm is four formant synthesis instrument STKVoicForm is four formant synthesis instrument This instrument contains an excitation singing wavetable looping wave with random and periodic vibrato smoothing on frequency etc excitation noise and four sweepable complex resonances Measured formant data is included and enough data is there to support either parallel or cascade synthesis In the floating point case cascade synthesis is the most natural so that what you ll find here asignal STKVoicForm ifrequency iamplitude kmix kv1 ksel kv2 klfo kv3 klfodepth kv4 kloud kv5 csound doc http www.csounds.com manual html STKVoicForm.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "stkVoicForm",
        "normalized": "D-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "Voic Form",
        "signature": "D-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:stkWhistle",
      "description": {
        "fct-descr": "\u003cp\u003eSTKWhistle produces whistle sounds.\n\u003c/p\u003e\u003cp\u003eSTKWhistle produces (police) whistle sounds. It uses a hybrid physical/spectral model of a police whistle (a la Cook).\n\u003c/p\u003e\u003cpre\u003e asignal  STKWhistle  ifrequency, iamplitude, [kmod, kv1[, knoise, kv2[, kfipfreq, kv3[, kfipgain, kv4[, kvol, kv5]]]]]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/STKWhistle.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#stkWhistle",
        "fct-type": "function",
        "title": "stkWhistle"
      },
      "index": {
        "description": "STKWhistle produces whistle sounds STKWhistle produces police whistle sounds It uses hybrid physical spectral model of police whistle la Cook asignal STKWhistle ifrequency iamplitude kmod kv1 knoise kv2 kfipfreq kv3 kfipgain kv4 kvol kv5 csound doc http www.csounds.com manual html STKWhistle.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "stkWhistle",
        "normalized": "D-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "Whistle",
        "signature": "D-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:stkWurley",
      "description": {
        "fct-descr": "\u003cp\u003eSTKWurley simulates a Wurlitzer electric piano FM synthesis instrument.\n\u003c/p\u003e\u003cp\u003eSTKWurley simulates a Wurlitzer electric piano FM synthesis instrument. \n       It uses two simple FM Pairs summed together, also referred to as algorithm 5 of the TX81Z.\n\u003c/p\u003e\u003cpre\u003e asignal  STKWurley  ifrequency, iamplitude, [kmod, kv1[, kcross, kv2[, klfo, kv3[, klfodepth, kv4[, kadsr, kv5]]]]]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/STKWurley.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#stkWurley",
        "fct-type": "function",
        "title": "stkWurley"
      },
      "index": {
        "description": "STKWurley simulates Wurlitzer electric piano FM synthesis instrument STKWurley simulates Wurlitzer electric piano FM synthesis instrument It uses two simple FM Pairs summed together also referred to as algorithm of the TX81Z asignal STKWurley ifrequency iamplitude kmod kv1 kcross kv2 klfo kv3 klfodepth kv4 kadsr kv5 csound doc http www.csounds.com manual html STKWurley.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "stkWurley",
        "normalized": "D-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "Wurley",
        "signature": "D-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:streson",
      "description": {
        "fct-descr": "\u003cp\u003eA string resonator with variable fundamental frequency.\n\u003c/p\u003e\u003cp\u003eAn audio signal is modified by a string resonator with variable fundamental frequency.\n\u003c/p\u003e\u003cpre\u003e ares  streson  asig, kfr, ifdbgain\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/streson.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#streson",
        "fct-type": "function",
        "title": "streson"
      },
      "index": {
        "description": "string resonator with variable fundamental frequency An audio signal is modified by string resonator with variable fundamental frequency ares streson asig kfr ifdbgain csound doc http www.csounds.com manual html streson.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "streson",
        "normalized": "Sig-\u003eSig-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:syncgrain",
      "description": {
        "fct-descr": "\u003cp\u003eSynchronous granular synthesis.\n\u003c/p\u003e\u003cp\u003esyncgrain implements synchronous granular synthesis. The source sound for the\n grains is obtained by reading a function table containing the samples of the source waveform. \n For sampled-sound sources, GEN01 is used.\n syncgrain will accept deferred allocation tables.\n\u003c/p\u003e\u003cpre\u003e asig  syncgrain  kamp, kfreq, kpitch, kgrsize, kprate, ifun1, \\\n           ifun2, iolaps\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/syncgrain.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e D -\u003e D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#syncgrain",
        "fct-type": "function",
        "title": "syncgrain"
      },
      "index": {
        "description": "Synchronous granular synthesis syncgrain implements synchronous granular synthesis The source sound for the grains is obtained by reading function table containing the samples of the source waveform For sampled-sound sources GEN01 is used syncgrain will accept deferred allocation tables asig syncgrain kamp kfreq kpitch kgrsize kprate ifun1 ifun2 iolaps csound doc http www.csounds.com manual html syncgrain.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "syncgrain",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eD-\u003eD-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eD-\u003eD-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:syncloop",
      "description": {
        "fct-descr": "\u003cp\u003eSynchronous granular synthesis.\n\u003c/p\u003e\u003cp\u003esyncloop is a variation on syncgrain,\n which implements synchronous granular synthesis. \n syncloop adds loop start and end points and an optional start position. Loop start\n and end control grain start positions, so the actual grains can go beyond the loop\n points (if the loop points are not at the extremes of the table), enabling\n seamless crossfading. For more information on the granular synthesis process,\n check the syncgrain manual page.\n\u003c/p\u003e\u003cpre\u003e asig  syncloop  kamp, kfreq, kpitch, kgrsize, kprate, klstart, \\\n           klend, ifun1, ifun2, iolaps[,istart, iskip]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/syncloop.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e D -\u003e D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#syncloop",
        "fct-type": "function",
        "title": "syncloop"
      },
      "index": {
        "description": "Synchronous granular synthesis syncloop is variation on syncgrain which implements synchronous granular synthesis syncloop adds loop start and end points and an optional start position Loop start and end control grain start positions so the actual grains can go beyond the loop points if the loop points are not at the extremes of the table enabling seamless crossfading For more information on the granular synthesis process check the syncgrain manual page asig syncloop kamp kfreq kpitch kgrsize kprate klstart klend ifun1 ifun2 iolaps istart iskip csound doc http www.csounds.com manual html syncloop.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "syncloop",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eD-\u003eD-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eD-\u003eD-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:syncphasor",
      "description": {
        "fct-descr": "\u003cp\u003eProduces a normalized moving phase value with sync input and output.\n\u003c/p\u003e\u003cp\u003eProduces a moving phase value between zero and one and an extra impulse output (\u003ca\u003esync out\u003c/a\u003e) whenever its phase value crosses or is reset to zero. The phase can be reset at any time by an impulse on the \u003ca\u003esync in\u003c/a\u003e parameter.\n\u003c/p\u003e\u003cpre\u003e aphase, asyncout  syncphasor  xcps, asyncin, [, iphs]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/syncphasor.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#syncphasor",
        "fct-type": "function",
        "title": "syncphasor"
      },
      "index": {
        "description": "Produces normalized moving phase value with sync input and output Produces moving phase value between zero and one and an extra impulse output sync out whenever its phase value crosses or is reset to zero The phase can be reset at any time by an impulse on the sync in parameter aphase asyncout syncphasor xcps asyncin iphs csound doc http www.csounds.com manual html syncphasor.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "syncphasor",
        "normalized": "Sig-\u003eSig-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:tab",
      "description": {
        "fct-descr": "\u003cp\u003eFast table opcodes.\n\u003c/p\u003e\u003cp\u003eFast table opcodes. Faster than\n     table and\n     tablew because don't\n     allow wrap-around and limit and don't check index validity. Have\n     been implemented in order to provide fast access to\n     arrays. Support non-power of two tables (can be generated by any\n     GEN function by giving a negative length value).\n\u003c/p\u003e\u003cpre\u003e kr  tab  kndx, ifn[, ixmode]\n ar  tab  xndx, ifn[, ixmode]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/tab.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Tab -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#tab",
        "fct-type": "function",
        "title": "tab"
      },
      "index": {
        "description": "Fast table opcodes Fast table opcodes Faster than table and tablew because don allow wrap-around and limit and don check index validity Have been implemented in order to provide fast access to arrays Support non-power of two tables can be generated by any GEN function by giving negative length value kr tab kndx ifn ixmode ar tab xndx ifn ixmode csound doc http www.csounds.com manual html tab.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "tab",
        "normalized": "Sig-\u003eTab-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eTab-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:tab_i",
      "description": {
        "fct-descr": "\u003cp\u003eFast table opcodes.\n\u003c/p\u003e\u003cp\u003eFast table opcodes. Faster than\n     table and\n     tablew because don't\n     allow wrap-around and limit and don't check index validity. Have\n     been implemented in order to provide fast access to\n     arrays. Support non-power of two tables (can be generated by any\n     GEN function by giving a negative length value).\n\u003c/p\u003e\u003cpre\u003e ir  tab_i  indx, ifn[, ixmode]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/tab.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e Tab -\u003e D",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#tab_i",
        "fct-type": "function",
        "title": "tab_i"
      },
      "index": {
        "description": "Fast table opcodes Fast table opcodes Faster than table and tablew because don allow wrap-around and limit and don check index validity Have been implemented in order to provide fast access to arrays Support non-power of two tables can be generated by any GEN function by giving negative length value ir tab indx ifn ixmode csound doc http www.csounds.com manual html tab.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "tab_i",
        "normalized": "D-\u003eTab-\u003eD",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eTab-\u003eD"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:table",
      "description": {
        "fct-descr": "\u003cp\u003eAccesses table values by direct indexing.\n\u003c/p\u003e\u003cpre\u003e ares  table  andx, ifn [, ixmode] [, ixoff] [, iwrap]\n ires  table  indx, ifn [, ixmode] [, ixoff] [, iwrap]\n kres  table  kndx, ifn [, ixmode] [, ixoff] [, iwrap]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/table.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "a -\u003e Tab -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#table",
        "fct-type": "function",
        "title": "table"
      },
      "index": {
        "description": "Accesses table values by direct indexing ares table andx ifn ixmode ixoff iwrap ires table indx ifn ixmode ixoff iwrap kres table kndx ifn ixmode ixoff iwrap csound doc http www.csounds.com manual html table.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "table",
        "normalized": "a-\u003eTab-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "a-\u003eTab-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:table3",
      "description": {
        "fct-descr": "\u003cp\u003eAccesses table values by direct indexing with cubic interpolation.\n\u003c/p\u003e\u003cpre\u003e ares  table3  andx, ifn [, ixmode] [, ixoff] [, iwrap]\n ires  table3  indx, ifn [, ixmode] [, ixoff] [, iwrap]\n kres  table3  kndx, ifn [, ixmode] [, ixoff] [, iwrap]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/table3.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "a -\u003e Tab -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#table3",
        "fct-type": "function",
        "title": "table3"
      },
      "index": {
        "description": "Accesses table values by direct indexing with cubic interpolation ares table3 andx ifn ixmode ixoff iwrap ires table3 indx ifn ixmode ixoff iwrap kres table3 kndx ifn ixmode ixoff iwrap csound doc http www.csounds.com manual html table3.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "table3",
        "normalized": "a-\u003eTab-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "a-\u003eTab-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:tablei",
      "description": {
        "fct-descr": "\u003cp\u003eAccesses table values by direct indexing with linear interpolation.\n\u003c/p\u003e\u003cpre\u003e ares  tablei  andx, ifn [, ixmode] [, ixoff] [, iwrap]\n ires  tablei  indx, ifn [, ixmode] [, ixoff] [, iwrap]\n kres  tablei  kndx, ifn [, ixmode] [, ixoff] [, iwrap]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/tablei.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "a -\u003e Tab -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#tablei",
        "fct-type": "function",
        "title": "tablei"
      },
      "index": {
        "description": "Accesses table values by direct indexing with linear interpolation ares tablei andx ifn ixmode ixoff iwrap ires tablei indx ifn ixmode ixoff iwrap kres tablei kndx ifn ixmode ixoff iwrap csound doc http www.csounds.com manual html tablei.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "tablei",
        "normalized": "a-\u003eTab-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "a-\u003eTab-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:tabw",
      "description": {
        "fct-descr": "\u003cp\u003eFast table opcodes.\n\u003c/p\u003e\u003cp\u003eFast table opcodes. Faster than\n     table and\n     tablew because don't\n     allow wrap-around and limit and don't check index validity. Have\n     been implemented in order to provide fast access to\n     arrays. Support non-power of two tables (can be generated by any\n     GEN function by giving a negative length value).\n\u003c/p\u003e\u003cpre\u003e  tabw  ksig, kndx, ifn [,ixmode]\n  tabw  asig, andx, ifn [,ixmode]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/tab.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Tab -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#tabw",
        "fct-type": "function",
        "title": "tabw"
      },
      "index": {
        "description": "Fast table opcodes Fast table opcodes Faster than table and tablew because don allow wrap-around and limit and don check index validity Have been implemented in order to provide fast access to arrays Support non-power of two tables can be generated by any GEN function by giving negative length value tabw ksig kndx ifn ixmode tabw asig andx ifn ixmode csound doc http www.csounds.com manual html tab.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "tabw",
        "normalized": "Sig-\u003eSig-\u003eTab-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eTab-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:tabw_i",
      "description": {
        "fct-descr": "\u003cp\u003eFast table opcodes.\n\u003c/p\u003e\u003cp\u003eFast table opcodes. Faster than\n     table and\n     tablew because don't\n     allow wrap-around and limit and don't check index validity. Have\n     been implemented in order to provide fast access to\n     arrays. Support non-power of two tables (can be generated by any\n     GEN function by giving a negative length value).\n\u003c/p\u003e\u003cpre\u003e  tabw_i  isig, indx, ifn [,ixmode]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/tab.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e Tab -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#tabw_i",
        "fct-type": "function",
        "title": "tabw_i"
      },
      "index": {
        "description": "Fast table opcodes Fast table opcodes Faster than table and tablew because don allow wrap-around and limit and don check index validity Have been implemented in order to provide fast access to arrays Support non-power of two tables can be generated by any GEN function by giving negative length value tabw isig indx ifn ixmode csound doc http www.csounds.com manual html tab.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "tabw_i",
        "normalized": "D-\u003eD-\u003eTab-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eTab-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:tambourine",
      "description": {
        "fct-descr": "\u003cp\u003eSemi-physical model of a tambourine sound.\n\u003c/p\u003e\u003cp\u003etambourine is a semi-physical model of a tambourine sound. It is one of the PhISEM percussion opcodes. PhISEM (Physically Informed Stochastic Event Modeling) is an algorithmic approach for simulating collisions of multiple independent sound producing objects.\n\u003c/p\u003e\u003cpre\u003e ares  tambourine  kamp, idettack [, inum] [, idamp] [, imaxshake] [, ifreq] \\\n           [, ifreq1] [, ifreq2]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/tambourine.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#tambourine",
        "fct-type": "function",
        "title": "tambourine"
      },
      "index": {
        "description": "Semi-physical model of tambourine sound tambourine is semi-physical model of tambourine sound It is one of the PhISEM percussion opcodes PhISEM Physically Informed Stochastic Event Modeling is an algorithmic approach for simulating collisions of multiple independent sound producing objects ares tambourine kamp idettack inum idamp imaxshake ifreq ifreq1 ifreq2 csound doc http www.csounds.com manual html tambourine.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "tambourine",
        "normalized": "Sig-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:trandom",
      "description": {
        "fct-descr": "\u003cp\u003eGenerates a controlled pseudo-random number series between min and max values according to a trigger.\n\u003c/p\u003e\u003cp\u003eGenerates a controlled pseudo-random number series between min and max values at k-rate whenever the trigger parameter is different to 0.\n\u003c/p\u003e\u003cpre\u003e kout  trandom  ktrig, kmin, kmax\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/trandom.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e SE Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#trandom",
        "fct-type": "function",
        "title": "trandom"
      },
      "index": {
        "description": "Generates controlled pseudo-random number series between min and max values according to trigger Generates controlled pseudo-random number series between min and max values at k-rate whenever the trigger parameter is different to kout trandom ktrig kmin kmax csound doc http www.csounds.com manual html trandom.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "trandom",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSE Sig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSE Sig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:transeg",
      "description": {
        "fct-descr": "\u003cp\u003eConstructs a user-definable envelope.\n\u003c/p\u003e\u003cpre\u003e ares  transeg  ia, idur, itype, ib [, idur2] [, itype] [, ic] ...\n kres  transeg  ia, idur, itype, ib [, idur2] [, itype] [, ic] ...\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/transeg.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "[D] -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#transeg",
        "fct-type": "function",
        "title": "transeg"
      },
      "index": {
        "description": "Constructs user-definable envelope ares transeg ia idur itype ib idur2 itype ic kres transeg ia idur itype ib idur2 itype ic csound doc http www.csounds.com manual html transeg.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "transeg",
        "normalized": "[D]-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "[D]-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:transegb",
      "description": {
        "fct-descr": "\u003cp\u003eConstructs a user-definable envelope in absolute time.\n\u003c/p\u003e\u003cpre\u003e ares  transegb  ia, itim, itype, ib [, itim2] [, itype] [, ic] ...\n kres  transegb  ia, itim, itype, ib [, itim2] [, itype] [, ic] ...\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/transegb.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "[D] -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#transegb",
        "fct-type": "function",
        "title": "transegb"
      },
      "index": {
        "description": "Constructs user-definable envelope in absolute time ares transegb ia itim itype ib itim2 itype ic kres transegb ia itim itype ib itim2 itype ic csound doc http www.csounds.com manual html transegb.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "transegb",
        "normalized": "[D]-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "[D]-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:transegr",
      "description": {
        "fct-descr": "\u003cp\u003eConstructs a user-definable envelope with extended release segment.\n\u003c/p\u003e\u003cp\u003eConstructs a user-definable envelope. It is the same\n       as transeg,\n       with an extended release segment.\n\u003c/p\u003e\u003cpre\u003e ares  transegr  ia, idur, itype, ib [, idur2] [, itype] [, ic] ...\n kres  transegr  ia, idur, itype, ib [, idur2] [, itype] [, ic] ...\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/transegr.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "[D] -\u003e D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#transegr",
        "fct-type": "function",
        "title": "transegr"
      },
      "index": {
        "description": "Constructs user-definable envelope with extended release segment Constructs user-definable envelope It is the same as transeg with an extended release segment ares transegr ia idur itype ib idur2 itype ic kres transegr ia idur itype ib idur2 itype ic csound doc http www.csounds.com manual html transegr.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "transegr",
        "normalized": "[D]-\u003eD-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "[D]-\u003eD-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:trirand",
      "description": {
        "fct-descr": "\u003cp\u003eTriangular distribution random number generator\n\u003c/p\u003e\u003cp\u003eTriangular distribution random number generator. This is an x-class noise generator.\n\u003c/p\u003e\u003cpre\u003e ares  trirand  krange\n ires  trirand  krange\n kres  trirand  krange\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/trirand.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "a -\u003e SE a",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#trirand",
        "fct-type": "function",
        "title": "trirand"
      },
      "index": {
        "description": "Triangular distribution random number generator Triangular distribution random number generator This is an x-class noise generator ares trirand krange ires trirand krange kres trirand krange csound doc http www.csounds.com manual html trirand.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "trirand",
        "normalized": "a-\u003eSE a",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "a-\u003eSE a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:unirand",
      "description": {
        "fct-descr": "\u003cp\u003eUniform distribution random number generator (positive values only).\n\u003c/p\u003e\u003cp\u003eUniform distribution random number generator (positive values only). This is an x-class noise generator.\n\u003c/p\u003e\u003cpre\u003e ares  unirand  krange\n ires  unirand  krange\n kres  unirand  krange\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/unirand.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "a -\u003e SE a",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#unirand",
        "fct-type": "function",
        "title": "unirand"
      },
      "index": {
        "description": "Uniform distribution random number generator positive values only Uniform distribution random number generator positive values only This is an x-class noise generator ares unirand krange ires unirand krange kres unirand krange csound doc http www.csounds.com manual html unirand.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "unirand",
        "normalized": "a-\u003eSE a",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "a-\u003eSE a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:urandom",
      "description": {
        "fct-descr": "\u003cp\u003etruly random opcodes with controllable range.\n\u003c/p\u003e\u003cp\u003etruly random opcodes with controllable range. These\n       units are for Linux only and use \u003cem\u003edev\u003c/em\u003eurandom to construct\n       Csound random values\n\u003c/p\u003e\u003cpre\u003e ax  urandom  [imin, imax]\n ix  urandom  [imin, imax]\n kx  urandom  [imin, imax]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/urandom.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "SE a",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#urandom",
        "fct-type": "function",
        "title": "urandom"
      },
      "index": {
        "description": "truly random opcodes with controllable range truly random opcodes with controllable range These units are for Linux only and use dev urandom to construct Csound random values ax urandom imin imax ix urandom imin imax kx urandom imin imax csound doc http www.csounds.com manual html urandom.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "urandom",
        "normalized": "",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:urd",
      "description": {
        "fct-descr": "\u003cp\u003eA discrete user-defined-distribution random generator that can be used as a function.\n\u003c/p\u003e\u003cpre\u003e aout =  urd (ktableNum)\n iout =  urd (itableNum)\n kout =  urd (ktableNum)\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/urd.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "a -\u003e SE a",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#urd",
        "fct-type": "function",
        "title": "urd"
      },
      "index": {
        "description": "discrete user-defined-distribution random generator that can be used as function aout urd ktableNum iout urd itableNum kout urd ktableNum csound doc http www.csounds.com manual html urd.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "urd",
        "normalized": "a-\u003eSE a",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "a-\u003eSE a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:vco",
      "description": {
        "fct-descr": "\u003cp\u003eImplementation of a band limited, analog modeled oscillator.\n\u003c/p\u003e\u003cp\u003eImplementation of a band limited, analog modeled oscillator, based on integration of band limited impulses. vco can be used to simulate a variety of analog wave forms.\n\u003c/p\u003e\u003cpre\u003e ares  vco  xamp, xcps, iwave, kpw [, ifn] [, imaxd] [, ileak] [, inyx] \\\n           [, iphs] [, iskip]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vco.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e D -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#vco",
        "fct-type": "function",
        "title": "vco"
      },
      "index": {
        "description": "Implementation of band limited analog modeled oscillator Implementation of band limited analog modeled oscillator based on integration of band limited impulses vco can be used to simulate variety of analog wave forms ares vco xamp xcps iwave kpw ifn imaxd ileak inyx iphs iskip csound doc http www.csounds.com manual html vco.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "vco",
        "normalized": "Sig-\u003eSig-\u003eD-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eD-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:vco2",
      "description": {
        "fct-descr": "\u003cp\u003eImplementation of a band-limited oscillator using pre-calculated tables.\n\u003c/p\u003e\u003cp\u003evco2 is similar to vco. But the implementation uses pre-calculated tables of band-limited waveforms (see also GEN30) rather than integrating impulses. This opcode can be faster than vco (especially if a low control-rate is used) and also allows better sound quality. Additionally, there are more waveforms and oscillator phase can be modulated at k-rate. The disadvantage is increased memory usage. For more details about vco2 tables, see also vco2init and vco2ft.\n\u003c/p\u003e\u003cpre\u003e ares  vco2  kamp, kcps [, imode] [, kpw] [, kphs] [, inyx]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vco2.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#vco2",
        "fct-type": "function",
        "title": "vco2"
      },
      "index": {
        "description": "Implementation of band-limited oscillator using pre-calculated tables vco2 is similar to vco But the implementation uses pre-calculated tables of band-limited waveforms see also GEN30 rather than integrating impulses This opcode can be faster than vco especially if low control-rate is used and also allows better sound quality Additionally there are more waveforms and oscillator phase can be modulated at k-rate The disadvantage is increased memory usage For more details about vco2 tables see also vco2init and vco2ft ares vco2 kamp kcps imode kpw kphs inyx csound doc http www.csounds.com manual html vco2.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "vco2",
        "normalized": "Sig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:vco2ft",
      "description": {
        "fct-descr": "\u003cp\u003eReturns a table number at k-time for a given oscillator frequency and wavform.\n\u003c/p\u003e\u003cp\u003evco2ft returns the function table number to be used for generating the specified waveform at a given frequency. This function table number can be used by any Csound opcode that generates a signal by reading function tables (like oscilikt). The tables must be calculated by vco2init before vco2ft is called and shared as Csound ftables (ibasfn).\n\u003c/p\u003e\u003cpre\u003e kfn  vco2ft  kcps, iwave [, inyx]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vco2ft.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e D -\u003e Tab",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#vco2ft",
        "fct-type": "function",
        "title": "vco2ft"
      },
      "index": {
        "description": "Returns table number at k-time for given oscillator frequency and wavform vco2ft returns the function table number to be used for generating the specified waveform at given frequency This function table number can be used by any Csound opcode that generates signal by reading function tables like oscilikt The tables must be calculated by vco2init before vco2ft is called and shared as Csound ftables ibasfn kfn vco2ft kcps iwave inyx csound doc http www.csounds.com manual html vco2ft.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "vco2ft",
        "normalized": "Sig-\u003eD-\u003eTab",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eD-\u003eTab"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:vco2ift",
      "description": {
        "fct-descr": "\u003cp\u003eReturns a table number at i-time for a given oscillator frequency and wavform.\n\u003c/p\u003e\u003cp\u003evco2ift is the same as vco2ft, but works at i-time. It is suitable for use with opcodes that expect an i-rate table number (for example, oscili).\n\u003c/p\u003e\u003cpre\u003e ifn  vco2ift  icps, iwave [, inyx]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vco2ift.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e Tab",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#vco2ift",
        "fct-type": "function",
        "title": "vco2ift"
      },
      "index": {
        "description": "Returns table number at i-time for given oscillator frequency and wavform vco2ift is the same as vco2ft but works at i-time It is suitable for use with opcodes that expect an i-rate table number for example oscili ifn vco2ift icps iwave inyx csound doc http www.csounds.com manual html vco2ift.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "vco2ift",
        "normalized": "D-\u003eD-\u003eTab",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eTab"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:vco2init",
      "description": {
        "fct-descr": "\u003cp\u003eCalculates tables for use by vco2 opcode.\n\u003c/p\u003e\u003cp\u003evco2init calculates tables for use by vco2 opcode. Optionally, it is also possible to access these tables as standard Csound function tables. In this case, vco2ft can be used to find the correct table number for a given oscillator frequency.\n\u003c/p\u003e\u003cpre\u003e ifn  vco2init  iwave [, ibasfn] [, ipmul] [, iminsiz] [, imaxsiz] [, isrcft]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vco2init.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e SE Tab",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#vco2init",
        "fct-type": "function",
        "title": "vco2init"
      },
      "index": {
        "description": "Calculates tables for use by vco2 opcode vco2init calculates tables for use by vco2 opcode Optionally it is also possible to access these tables as standard Csound function tables In this case vco2ft can be used to find the correct table number for given oscillator frequency ifn vco2init iwave ibasfn ipmul iminsiz imaxsiz isrcft csound doc http www.csounds.com manual html vco2init.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "vco2init",
        "normalized": "D-\u003eSE Tab",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eSE Tab"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:vibes",
      "description": {
        "fct-descr": "\u003cp\u003ePhysical model related to the striking of a metal block.\n\u003c/p\u003e\u003cp\u003eAudio output is a tone related to the striking of a metal block as found in a vibraphone. The method is a physical model developed from Perry Cook, but re-coded for Csound.\n\u003c/p\u003e\u003cpre\u003e ares  vibes  kamp, kfreq, ihrd, ipos, imp, kvibf, kvamp, ivibfn, idec\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vibes.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e D -\u003e D -\u003e D -\u003e Sig -\u003e Sig -\u003e Tab -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#vibes",
        "fct-type": "function",
        "title": "vibes"
      },
      "index": {
        "description": "Physical model related to the striking of metal block Audio output is tone related to the striking of metal block as found in vibraphone The method is physical model developed from Perry Cook but re-coded for Csound ares vibes kamp kfreq ihrd ipos imp kvibf kvamp ivibfn idec csound doc http www.csounds.com manual html vibes.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "vibes",
        "normalized": "Sig-\u003eSig-\u003eD-\u003eD-\u003eD-\u003eSig-\u003eSig-\u003eTab-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eD-\u003eD-\u003eD-\u003eSig-\u003eSig-\u003eTab-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:vibr",
      "description": {
        "fct-descr": "\u003cp\u003eEasier-to-use user-controllable vibrato.\n\u003c/p\u003e\u003cpre\u003e kout  vibr  kAverageAmp, kAverageFreq, ifn\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vibr.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Tab -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#vibr",
        "fct-type": "function",
        "title": "vibr"
      },
      "index": {
        "description": "Easier-to-use user-controllable vibrato kout vibr kAverageAmp kAverageFreq ifn csound doc http www.csounds.com manual html vibr.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "vibr",
        "normalized": "Sig-\u003eSig-\u003eTab-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eTab-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:vibrato",
      "description": {
        "fct-descr": "\u003cp\u003eGenerates a natural-sounding user-controllable vibrato.\n\u003c/p\u003e\u003cpre\u003e kout  vibrato  kAverageAmp, kAverageFreq, kRandAmountAmp, kRandAmountFreq, kAmpMinRate, kAmpMaxRate, kcpsMinRate, kcpsMaxRate, ifn [, iphs\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vibrato.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Tab -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#vibrato",
        "fct-type": "function",
        "title": "vibrato"
      },
      "index": {
        "description": "Generates natural-sounding user-controllable vibrato kout vibrato kAverageAmp kAverageFreq kRandAmountAmp kRandAmountFreq kAmpMinRate kAmpMaxRate kcpsMinRate kcpsMaxRate ifn iphs csound doc http www.csounds.com manual html vibrato.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "vibrato",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eTab-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eTab-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:voice",
      "description": {
        "fct-descr": "\u003cp\u003eAn emulation of a human voice.\n\u003c/p\u003e\u003cpre\u003e ares  voice  kamp, kfreq, kphoneme, kform, kvibf, kvamp, ifn, ivfn\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/voice.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Tab -\u003e Tab -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#voice",
        "fct-type": "function",
        "title": "voice"
      },
      "index": {
        "description": "An emulation of human voice ares voice kamp kfreq kphoneme kform kvibf kvamp ifn ivfn csound doc http www.csounds.com manual html voice.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "voice",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eTab-\u003eTab-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eTab-\u003eTab-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:vosim",
      "description": {
        "fct-descr": "\u003cp\u003eSimple vocal simulation based on glottal pulses with formant characteristics.\n\u003c/p\u003e\u003cp\u003eThis opcode produces a simple vocal simulation based on glottal pulses with formant characteristics.\n Output is a series of sound events, where each event is composed of a burst of squared sine pulses followed by silence.\n The VOSIM (VOcal SIMulation) synthesis method was developed by Kaegi and Tempelaars in the 1970's.\n\u003c/p\u003e\u003cpre\u003e ar  vosim  kamp, kFund, kForm, kDecay, kPulseCount, kPulseFactor, ifn [, iskip]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vosim.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Tab -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#vosim",
        "fct-type": "function",
        "title": "vosim"
      },
      "index": {
        "description": "Simple vocal simulation based on glottal pulses with formant characteristics This opcode produces simple vocal simulation based on glottal pulses with formant characteristics Output is series of sound events where each event is composed of burst of squared sine pulses followed by silence The VOSIM VOcal SIMulation synthesis method was developed by Kaegi and Tempelaars in the ar vosim kamp kFund kForm kDecay kPulseCount kPulseFactor ifn iskip csound doc http www.csounds.com manual html vosim.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "vosim",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eTab-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eTab-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:waveset",
      "description": {
        "fct-descr": "\u003cp\u003eA simple time stretch by repeating cycles.\n\u003c/p\u003e\u003cpre\u003e ares  waveset  ain, krep [, ilen]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/waveset.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#waveset",
        "fct-type": "function",
        "title": "waveset"
      },
      "index": {
        "description": "simple time stretch by repeating cycles ares waveset ain krep ilen csound doc http www.csounds.com manual html waveset.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "waveset",
        "normalized": "Sig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:weibull",
      "description": {
        "fct-descr": "\u003cp\u003eWeibull distribution random number generator (positive values only).\n\u003c/p\u003e\u003cp\u003eWeibull distribution random number generator (positive values only). This is an x-class noise generator\n\u003c/p\u003e\u003cpre\u003e ares  weibull  ksigma, ktau\n ires  weibull  ksigma, ktau\n kres  weibull  ksigma, ktau\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/weibull.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "a -\u003e a -\u003e SE a",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#weibull",
        "fct-type": "function",
        "title": "weibull"
      },
      "index": {
        "description": "Weibull distribution random number generator positive values only Weibull distribution random number generator positive values only This is an x-class noise generator ares weibull ksigma ktau ires weibull ksigma ktau kres weibull ksigma ktau csound doc http www.csounds.com manual html weibull.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "weibull",
        "normalized": "a-\u003ea-\u003eSE a",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "a-\u003ea-\u003eSE a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:wgbow",
      "description": {
        "fct-descr": "\u003cp\u003eCreates a tone similar to a bowed string.\n\u003c/p\u003e\u003cp\u003eAudio output is a tone similar to a bowed string, using a physical model developed from Perry Cook, but re-coded for Csound.\n\u003c/p\u003e\u003cpre\u003e ares  wgbow  kamp, kfreq, kpres, krat, kvibf, kvamp, ifn [, iminfreq]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/wgbow.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Tab -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#wgbow",
        "fct-type": "function",
        "title": "wgbow"
      },
      "index": {
        "description": "Creates tone similar to bowed string Audio output is tone similar to bowed string using physical model developed from Perry Cook but re-coded for Csound ares wgbow kamp kfreq kpres krat kvibf kvamp ifn iminfreq csound doc http www.csounds.com manual html wgbow.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "wgbow",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eTab-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eTab-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:wgbowedbar",
      "description": {
        "fct-descr": "\u003cp\u003eA physical model of a bowed bar.\n\u003c/p\u003e\u003cp\u003eA physical model of a bowed bar, belonging to the Perry Cook family of waveguide instruments.\n\u003c/p\u003e\u003cpre\u003e ares  wgbowedbar  kamp, kfreq, kpos, kbowpres, kgain [, iconst] [, itvel] \\\n           [, ibowpos] [, ilow]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/wgbowedbar.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#wgbowedbar",
        "fct-type": "function",
        "title": "wgbowedbar"
      },
      "index": {
        "description": "physical model of bowed bar physical model of bowed bar belonging to the Perry Cook family of waveguide instruments ares wgbowedbar kamp kfreq kpos kbowpres kgain iconst itvel ibowpos ilow csound doc http www.csounds.com manual html wgbowedbar.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "wgbowedbar",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:wgbrass",
      "description": {
        "fct-descr": "\u003cp\u003eCreates a tone related to a brass instrument.\n\u003c/p\u003e\u003cp\u003eAudio output is a tone related to a brass instrument, using a physical model developed from Perry Cook, but re-coded for Csound.\n\u003c/p\u003e\u003cpre\u003e ares  wgbrass  kamp, kfreq, ktens, iatt, kvibf, kvamp, ifn [, iminfreq]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/wgbrass.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e D -\u003e Sig -\u003e Sig -\u003e Tab -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#wgbrass",
        "fct-type": "function",
        "title": "wgbrass"
      },
      "index": {
        "description": "Creates tone related to brass instrument Audio output is tone related to brass instrument using physical model developed from Perry Cook but re-coded for Csound ares wgbrass kamp kfreq ktens iatt kvibf kvamp ifn iminfreq csound doc http www.csounds.com manual html wgbrass.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "wgbrass",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eD-\u003eSig-\u003eSig-\u003eTab-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eD-\u003eSig-\u003eSig-\u003eTab-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:wgclar",
      "description": {
        "fct-descr": "\u003cp\u003eCreates a tone similar to a clarinet.\n\u003c/p\u003e\u003cp\u003eAudio output is a tone similar to a clarinet, using a physical model developed from Perry Cook, but re-coded for Csound.\n\u003c/p\u003e\u003cpre\u003e ares  wgclar  kamp, kfreq, kstiff, iatt, idetk, kngain, kvibf, kvamp, ifn \\\n           [, iminfreq]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/wgclar.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e D -\u003e D -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Tab -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#wgclar",
        "fct-type": "function",
        "title": "wgclar"
      },
      "index": {
        "description": "Creates tone similar to clarinet Audio output is tone similar to clarinet using physical model developed from Perry Cook but re-coded for Csound ares wgclar kamp kfreq kstiff iatt idetk kngain kvibf kvamp ifn iminfreq csound doc http www.csounds.com manual html wgclar.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "wgclar",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eD-\u003eD-\u003eSig-\u003eSig-\u003eSig-\u003eTab-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eD-\u003eD-\u003eSig-\u003eSig-\u003eSig-\u003eTab-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:wgflute",
      "description": {
        "fct-descr": "\u003cp\u003eCreates a tone similar to a flute.\n\u003c/p\u003e\u003cp\u003eAudio output is a tone similar to a flute, using a physical model developed from Perry Cook, but re-coded for Csound.\n\u003c/p\u003e\u003cpre\u003e ares  wgflute  kamp, kfreq, kjet, iatt, idetk, kngain, kvibf, kvamp, ifn \\\n           [, iminfreq] [, ijetrf] [, iendrf]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/wgflute.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e D -\u003e D -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Tab -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#wgflute",
        "fct-type": "function",
        "title": "wgflute"
      },
      "index": {
        "description": "Creates tone similar to flute Audio output is tone similar to flute using physical model developed from Perry Cook but re-coded for Csound ares wgflute kamp kfreq kjet iatt idetk kngain kvibf kvamp ifn iminfreq ijetrf iendrf csound doc http www.csounds.com manual html wgflute.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "wgflute",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eD-\u003eD-\u003eSig-\u003eSig-\u003eSig-\u003eTab-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eD-\u003eD-\u003eSig-\u003eSig-\u003eSig-\u003eTab-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:wgpluck",
      "description": {
        "fct-descr": "\u003cp\u003eA high fidelity simulation of a plucked string.\n\u003c/p\u003e\u003cp\u003eA high fidelity simulation of a plucked string, using interpolating delay-lines.\n\u003c/p\u003e\u003cpre\u003e ares  wgpluck  icps, iamp, kpick, iplk, idamp, ifilt, axcite\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/wgpluck.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e Sig -\u003e D -\u003e D -\u003e D -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#wgpluck",
        "fct-type": "function",
        "title": "wgpluck"
      },
      "index": {
        "description": "high fidelity simulation of plucked string high fidelity simulation of plucked string using interpolating delay-lines ares wgpluck icps iamp kpick iplk idamp ifilt axcite csound doc http www.csounds.com manual html wgpluck.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "wgpluck",
        "normalized": "D-\u003eD-\u003eSig-\u003eD-\u003eD-\u003eD-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eSig-\u003eD-\u003eD-\u003eD-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:wgpluck2",
      "description": {
        "fct-descr": "\u003cp\u003ePhysical model of the plucked string.\n\u003c/p\u003e\u003cp\u003ewgpluck2 is an implementation of the physical model of the plucked string, with control over the pluck point, the pickup point and the filter. Based on the Karplus-Strong algorithm.\n\u003c/p\u003e\u003cpre\u003e ares  wgpluck2  iplk, kamp, icps, kpick, krefl\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/wgpluck2.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e Sig -\u003e D -\u003e Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#wgpluck2",
        "fct-type": "function",
        "title": "wgpluck2"
      },
      "index": {
        "description": "Physical model of the plucked string wgpluck2 is an implementation of the physical model of the plucked string with control over the pluck point the pickup point and the filter Based on the Karplus-Strong algorithm ares wgpluck2 iplk kamp icps kpick krefl csound doc http www.csounds.com manual html wgpluck2.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "wgpluck2",
        "normalized": "D-\u003eSig-\u003eD-\u003eSig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eSig-\u003eD-\u003eSig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:wterrain",
      "description": {
        "fct-descr": "\u003cp\u003eA simple wave-terrain synthesis opcode.\n\u003c/p\u003e\u003cpre\u003e aout  wterrain  kamp, kpch, k_xcenter, k_ycenter, k_xradius, k_yradius, \\\n           itabx, itaby\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/wterrain.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#wterrain",
        "fct-type": "function",
        "title": "wterrain"
      },
      "index": {
        "description": "simple wave-terrain synthesis opcode aout wterrain kamp kpch xcenter ycenter xradius yradius itabx itaby csound doc http www.csounds.com manual html wterrain.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "wterrain",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eD-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eD-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:xadsr",
      "description": {
        "fct-descr": "\u003cp\u003eCalculates the classical ADSR envelope.\n\u003c/p\u003e\u003cp\u003eCalculates the classical ADSR envelope\n\u003c/p\u003e\u003cpre\u003e ares  xadsr  iatt, idec, islev, irel [, idel]\n kres  xadsr  iatt, idec, islev, irel [, idel]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/xadsr.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#xadsr",
        "fct-type": "function",
        "title": "xadsr"
      },
      "index": {
        "description": "Calculates the classical ADSR envelope Calculates the classical ADSR envelope ares xadsr iatt idec islev irel idel kres xadsr iatt idec islev irel idel csound doc http www.csounds.com manual html xadsr.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "xadsr",
        "normalized": "D-\u003eD-\u003eD-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eD-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:xscanmap",
      "description": {
        "fct-descr": "\u003cp\u003eAllows the position and velocity of a node in a scanned process to be read.\n\u003c/p\u003e\u003cpre\u003e kpos, kvel  xscanmap  iscan, kamp, kvamp [, iwhich]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/xscanmap.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e Sig -\u003e Sig -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#xscanmap",
        "fct-type": "function",
        "title": "xscanmap"
      },
      "index": {
        "description": "Allows the position and velocity of node in scanned process to be read kpos kvel xscanmap iscan kamp kvamp iwhich csound doc http www.csounds.com manual html xscanmap.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "xscanmap",
        "normalized": "D-\u003eSig-\u003eSig-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eSig-\u003eSig-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:xscans",
      "description": {
        "fct-descr": "\u003cp\u003eFast scanned synthesis waveform and the wavetable generator.\n\u003c/p\u003e\u003cp\u003eExperimental version of scans.  Allows much larger matrices and is faster and smaller but removes some (unused?) flexibility.  If liked, it will replace the older opcode as it is syntax compatible but extended.\n\u003c/p\u003e\u003cpre\u003e ares  xscans  kamp, kfreq, ifntraj, id [, iorder]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/xscans.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Tab -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#xscans",
        "fct-type": "function",
        "title": "xscans"
      },
      "index": {
        "description": "Fast scanned synthesis waveform and the wavetable generator Experimental version of scans Allows much larger matrices and is faster and smaller but removes some unused flexibility If liked it will replace the older opcode as it is syntax compatible but extended ares xscans kamp kfreq ifntraj id iorder csound doc http www.csounds.com manual html xscans.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "xscans",
        "normalized": "Sig-\u003eSig-\u003eTab-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eTab-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:xscansmap",
      "description": {
        "fct-descr": "\u003cp\u003eAllows the position and velocity of a node in a scanned process to be read.\n\u003c/p\u003e\u003cpre\u003e  xscansmap  kpos, kvel, iscan, kamp, kvamp [, iwhich]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/xscansmap.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e D -\u003e Sig -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#xscansmap",
        "fct-type": "function",
        "title": "xscansmap"
      },
      "index": {
        "description": "Allows the position and velocity of node in scanned process to be read xscansmap kpos kvel iscan kamp kvamp iwhich csound doc http www.csounds.com manual html xscansmap.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "xscansmap",
        "normalized": "Sig-\u003eSig-\u003eD-\u003eSig-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eD-\u003eSig-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalGenerators.html#v:xscanu",
      "description": {
        "fct-descr": "\u003cp\u003eCompute the waveform and the wavetable for use in scanned synthesis.\n\u003c/p\u003e\u003cp\u003eExperimental version of scanu. Allows much larger matrices and is faster and smaller but removes some (unused?) flexibility.  If liked, it will replace the older opcode as it is syntax compatible but extended.\n\u003c/p\u003e\u003cpre\u003e  xscanu  init, irate, ifnvel, ifnmass, ifnstif, ifncentr, ifndamp, kmass, \\\n           kstif, kcentr, kdamp, ileft, iright, kpos, kstrngth, ain, idisp, id\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/xscanu.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalGenerators",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e Tab -\u003e Tab -\u003e Tab -\u003e Tab -\u003e Tab -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e D -\u003e D -\u003e Sig -\u003e Sig -\u003e Sig -\u003e D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalGenerators.html#xscanu",
        "fct-type": "function",
        "title": "xscanu"
      },
      "index": {
        "description": "Compute the waveform and the wavetable for use in scanned synthesis Experimental version of scanu Allows much larger matrices and is faster and smaller but removes some unused flexibility If liked it will replace the older opcode as it is syntax compatible but extended xscanu init irate ifnvel ifnmass ifnstif ifncentr ifndamp kmass kstif kcentr kdamp ileft iright kpos kstrngth ain idisp id csound doc http www.csounds.com manual html xscanu.html",
        "hierarchy": "Csound Typed Opcode SignalGenerators",
        "module": "Csound.Typed.Opcode.SignalGenerators",
        "name": "xscanu",
        "normalized": "D-\u003eD-\u003eTab-\u003eTab-\u003eTab-\u003eTab-\u003eTab-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eD-\u003eD-\u003eSig-\u003eSig-\u003eSig-\u003eD-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eTab-\u003eTab-\u003eTab-\u003eTab-\u003eTab-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eD-\u003eD-\u003eSig-\u003eSig-\u003eSig-\u003eD-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#",
      "description": {
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "module",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html",
        "fct-type": "module",
        "title": "SignalIO"
      },
      "index": {
        "description": "",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "SignalIO",
        "normalized": "",
        "package": "csound-expression-opcodes",
        "partial": "Signal IO",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:chani",
      "description": {
        "fct-descr": "\u003cp\u003eReads data from the software bus\n\u003c/p\u003e\u003cp\u003eReads data from a channel of the inward software bus.\n\u003c/p\u003e\u003cpre\u003e kval  chani  kchan\n aval  chani  kchan\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/chani.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e SE Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#chani",
        "fct-type": "function",
        "title": "chani"
      },
      "index": {
        "description": "Reads data from the software bus Reads data from channel of the inward software bus kval chani kchan aval chani kchan csound doc http www.csounds.com manual html chani.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "chani",
        "normalized": "Sig-\u003eSE Sig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSE Sig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:chano",
      "description": {
        "fct-descr": "\u003cp\u003eSend data to the outwards software bus\n\u003c/p\u003e\u003cp\u003eSend data to a channel of the outward software bus.\n\u003c/p\u003e\u003cpre\u003e  chano  kval, kchan\n  chano  aval, kchan\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/chano.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#chano",
        "fct-type": "function",
        "title": "chano"
      },
      "index": {
        "description": "Send data to the outwards software bus Send data to channel of the outward software bus chano kval kchan chano aval kchan csound doc http www.csounds.com manual html chano.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "chano",
        "normalized": "Sig-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:chn_S",
      "description": {
        "fct-descr": "\u003cp\u003eDeclare a channel of the named software bus.\n\u003c/p\u003e\u003cp\u003eDeclare a channel of the named software bus, with setting optional\n       parameters in the case of a control channel. If the channel does not\n       exist yet, it is created, with an inital value of zero or empty string.\n       Otherwise, the type (control, audio, or string) of the existing channel\n       must match the declaration, or an init error occurs. The input/output\n       mode of an existing channel is updated so that it becomes the bitwise\n       OR of the previous and the newly specified value.\n\u003c/p\u003e\u003cpre\u003e   chn_S  Sname, imode\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/chn.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#chn_S",
        "fct-type": "function",
        "title": "chn_S"
      },
      "index": {
        "description": "Declare channel of the named software bus Declare channel of the named software bus with setting optional parameters in the case of control channel If the channel does not exist yet it is created with an inital value of zero or empty string Otherwise the type control audio or string of the existing channel must match the declaration or an init error occurs The input output mode of an existing channel is updated so that it becomes the bitwise OR of the previous and the newly specified value chn Sname imode csound doc http www.csounds.com manual html chn.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "chn_S",
        "normalized": "Str-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:chn_a",
      "description": {
        "fct-descr": "\u003cp\u003eDeclare a channel of the named software bus.\n\u003c/p\u003e\u003cp\u003eDeclare a channel of the named software bus, with setting optional\n       parameters in the case of a control channel. If the channel does not\n       exist yet, it is created, with an inital value of zero or empty string.\n       Otherwise, the type (control, audio, or string) of the existing channel\n       must match the declaration, or an init error occurs. The input/output\n       mode of an existing channel is updated so that it becomes the bitwise\n       OR of the previous and the newly specified value.\n\u003c/p\u003e\u003cpre\u003e   chn_a  Sname, imode\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/chn.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#chn_a",
        "fct-type": "function",
        "title": "chn_a"
      },
      "index": {
        "description": "Declare channel of the named software bus Declare channel of the named software bus with setting optional parameters in the case of control channel If the channel does not exist yet it is created with an inital value of zero or empty string Otherwise the type control audio or string of the existing channel must match the declaration or an init error occurs The input output mode of an existing channel is updated so that it becomes the bitwise OR of the previous and the newly specified value chn Sname imode csound doc http www.csounds.com manual html chn.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "chn_a",
        "normalized": "Str-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:chn_k",
      "description": {
        "fct-descr": "\u003cp\u003eDeclare a channel of the named software bus.\n\u003c/p\u003e\u003cp\u003eDeclare a channel of the named software bus, with setting optional\n       parameters in the case of a control channel. If the channel does not\n       exist yet, it is created, with an inital value of zero or empty string.\n       Otherwise, the type (control, audio, or string) of the existing channel\n       must match the declaration, or an init error occurs. The input/output\n       mode of an existing channel is updated so that it becomes the bitwise\n       OR of the previous and the newly specified value.\n\u003c/p\u003e\u003cpre\u003e   chn_k  Sname, imode[, itype, idflt, imin, ima, ix, iy, iwidth, iheight, Sattributes]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/chn.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#chn_k",
        "fct-type": "function",
        "title": "chn_k"
      },
      "index": {
        "description": "Declare channel of the named software bus Declare channel of the named software bus with setting optional parameters in the case of control channel If the channel does not exist yet it is created with an inital value of zero or empty string Otherwise the type control audio or string of the existing channel must match the declaration or an init error occurs The input output mode of an existing channel is updated so that it becomes the bitwise OR of the previous and the newly specified value chn Sname imode itype idflt imin ima ix iy iwidth iheight Sattributes csound doc http www.csounds.com manual html chn.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "chn_k",
        "normalized": "Str-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:chnclear",
      "description": {
        "fct-descr": "\u003cp\u003eClears an audio output channel of the named software bus.\n\u003c/p\u003e\u003cp\u003eClears an audio channel of the named software bus to zero.\n       Implies declaring the channel with imode=2 (see also\n       chn_a).\n\u003c/p\u003e\u003cpre\u003e  chnclear  Sname\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/chnclear.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#chnclear",
        "fct-type": "function",
        "title": "chnclear"
      },
      "index": {
        "description": "Clears an audio output channel of the named software bus Clears an audio channel of the named software bus to zero Implies declaring the channel with imode see also chn chnclear Sname csound doc http www.csounds.com manual html chnclear.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "chnclear",
        "normalized": "Str-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:chnexport",
      "description": {
        "fct-descr": "\u003cp\u003eExport a global variable as a channel of the bus.\n\u003c/p\u003e\u003cp\u003eExport a global variable as a channel of the bus; the channel\n       should not already exist, otherwise an init error occurs.\n       This opcode is normally called from the orchestra header, and allows\n       the host application to read or write orchestra variables directly,\n       without having to use\n       chnget or\n       chnset to copy data.\n\u003c/p\u003e\u003cpre\u003e gival  chnexport  Sname, imode[, itype, idflt, imin, imax]\n gkval  chnexport  Sname, imode[, itype, idflt, imin, imax]\n gaval  chnexport  Sname, imode\n gSval  chnexport  Sname, imode\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/chnexport.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e D -\u003e Str",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#chnexport",
        "fct-type": "function",
        "title": "chnexport"
      },
      "index": {
        "description": "Export global variable as channel of the bus Export global variable as channel of the bus the channel should not already exist otherwise an init error occurs This opcode is normally called from the orchestra header and allows the host application to read or write orchestra variables directly without having to use chnget or chnset to copy data gival chnexport Sname imode itype idflt imin imax gkval chnexport Sname imode itype idflt imin imax gaval chnexport Sname imode gSval chnexport Sname imode csound doc http www.csounds.com manual html chnexport.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "chnexport",
        "normalized": "Str-\u003eD-\u003eStr",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eD-\u003eStr"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:chnget",
      "description": {
        "fct-descr": "\u003cp\u003eReads data from the software bus.\n\u003c/p\u003e\u003cp\u003eReads data from a channel of the inward named software bus.\n       Implies declaring the channel with imode=1 (see also\n       chn_k, chn_a, and chn_S).\n\u003c/p\u003e\u003cpre\u003e ival  chnget  Sname\n kval  chnget  Sname\n aval  chnget  Sname\n Sval  chnget  Sname\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/chnget.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e SE Str",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#chnget",
        "fct-type": "function",
        "title": "chnget"
      },
      "index": {
        "description": "Reads data from the software bus Reads data from channel of the inward named software bus Implies declaring the channel with imode see also chn chn and chn ival chnget Sname kval chnget Sname aval chnget Sname Sval chnget Sname csound doc http www.csounds.com manual html chnget.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "chnget",
        "normalized": "Str-\u003eSE Str",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eSE Str"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:chnmix",
      "description": {
        "fct-descr": "\u003cp\u003eWrites audio data to the named software bus, mixing to the previous\n       output.\n\u003c/p\u003e\u003cp\u003eAdds an audio signal to a channel of the named software bus.\n       Implies declaring the channel with imode=2 (see also\n       chn_a).\n\u003c/p\u003e\u003cpre\u003e  chnmix  aval, Sname\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/chnmix.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Str -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#chnmix",
        "fct-type": "function",
        "title": "chnmix"
      },
      "index": {
        "description": "Writes audio data to the named software bus mixing to the previous output Adds an audio signal to channel of the named software bus Implies declaring the channel with imode see also chn chnmix aval Sname csound doc http www.csounds.com manual html chnmix.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "chnmix",
        "normalized": "Sig-\u003eStr-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eStr-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:chnparams",
      "description": {
        "fct-descr": "\u003cp\u003eQuery parameters of a channel.\n\u003c/p\u003e\u003cp\u003eQuery parameters of a channel (if it does not exist, all\n       returned values are zero).\n\u003c/p\u003e\u003cpre\u003e itype, imode, ictltype, idflt, imin, imax  chnparams &#160;\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/chnparams.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "a",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#chnparams",
        "fct-type": "function",
        "title": "chnparams"
      },
      "index": {
        "description": "Query parameters of channel Query parameters of channel if it does not exist all returned values are zero itype imode ictltype idflt imin imax chnparams csound doc http www.csounds.com manual html chnparams.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "chnparams",
        "normalized": "",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:chnrecv",
      "description": {
        "fct-descr": "\u003cp\u003eRecieves data from the software bus.\n\u003c/p\u003e\u003cp\u003eReceives data from a channel of the inward named software bus.\n       Implies declaring the channel with imode=1 (see also chn_k, chn_a,\n       and chn_S).\n       Note that \n       chnsend\u003cem\u003echnrecv (which in Csound6 work identically to invalue\u003c/em\u003eoutvalue) \n       are usually used for the callback-based communication between Csound and \n       an external host. Use the chnset/chnget opcodes for sending and receiving \n       data inside Csound.\n\u003c/p\u003e\u003cpre\u003e ival  chnrecv  Sname\n kval  chnrecv  Sname\n aval  chnrecv  Sname\n Sval  chnrecv  Sname\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/chnrecv.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e SE Str",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#chnrecv",
        "fct-type": "function",
        "title": "chnrecv"
      },
      "index": {
        "description": "Recieves data from the software bus Receives data from channel of the inward named software bus Implies declaring the channel with imode see also chn chn and chn Note that chnsend chnrecv which in Csound6 work identically to invalue outvalue are usually used for the callback-based communication between Csound and an external host Use the chnset chnget opcodes for sending and receiving data inside Csound ival chnrecv Sname kval chnrecv Sname aval chnrecv Sname Sval chnrecv Sname csound doc http www.csounds.com manual html chnrecv.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "chnrecv",
        "normalized": "Str-\u003eSE Str",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eSE Str"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:chnsend",
      "description": {
        "fct-descr": "\u003cp\u003eSends data via the named software bus.\n\u003c/p\u003e\u003cp\u003eSend to a channel of the named software bus. Implies declaring the\n       channel with imode=2 (see also chn_k, chn_a, and chn_S). Note that \n       chnsend\u003cem\u003echnrecv (which in Csound6 work identically to invalue\u003c/em\u003eoutvalue) \n       are usually used for the callback-based communication between Csound and \n       an external host. Use the chnset/chnget opcodes for sending and receiving \n       data inside Csound.\n\u003c/p\u003e\u003cpre\u003e  chnsend  ival, Sname\n  chnsend  kval, Sname\n  chnsend  aval, Sname\n  chnsend  Sval, Sname\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/chnsend.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e Str -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#chnsend",
        "fct-type": "function",
        "title": "chnsend"
      },
      "index": {
        "description": "Sends data via the named software bus Send to channel of the named software bus Implies declaring the channel with imode see also chn chn and chn Note that chnsend chnrecv which in Csound6 work identically to invalue outvalue are usually used for the callback-based communication between Csound and an external host Use the chnset chnget opcodes for sending and receiving data inside Csound chnsend ival Sname chnsend kval Sname chnsend aval Sname chnsend Sval Sname csound doc http www.csounds.com manual html chnsend.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "chnsend",
        "normalized": "D-\u003eStr-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eStr-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:chnset",
      "description": {
        "fct-descr": "\u003cp\u003eWrites data to the named software bus.\n\u003c/p\u003e\u003cp\u003eWrite to a channel of the named software bus. Implies declaring the\n       channel with imod=2 (see also\n       chn_k, chn_a, and chn_S).\n\u003c/p\u003e\u003cpre\u003e  chnset  ival, Sname\n  chnset  kval, Sname\n  chnset  aval, Sname\n  chnset  Sval, Sname\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/chnset.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e Str -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#chnset",
        "fct-type": "function",
        "title": "chnset"
      },
      "index": {
        "description": "Writes data to the named software bus Write to channel of the named software bus Implies declaring the channel with imod see also chn chn and chn chnset ival Sname chnset kval Sname chnset aval Sname chnset Sval Sname csound doc http www.csounds.com manual html chnset.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "chnset",
        "normalized": "D-\u003eStr-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eStr-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:diskin",
      "description": {
        "fct-descr": "\u003cp\u003eDeprecated. Reads audio data from an external device or stream and can alter its pitch.\n\u003c/p\u003e\u003cpre\u003e ar1 [, ar2 [, ar3 [, ... arN]]]  diskin  ifilcod, kpitch [, iskiptim] \\\n           [, iwraparound] [, iformat] [, iskipinit]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/diskin.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e Sig -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#diskin",
        "fct-type": "function",
        "title": "diskin"
      },
      "index": {
        "description": "Deprecated Reads audio data from an external device or stream and can alter its pitch ar1 ar2 ar3 arN diskin ifilcod kpitch iskiptim iwraparound iformat iskipinit csound doc http www.csounds.com manual html diskin.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "diskin",
        "normalized": "Str-\u003eSig-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eSig-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:diskin2",
      "description": {
        "fct-descr": "\u003cp\u003eReads audio data from a file, and can alter its pitch using one of several\n       available interpolation types, as well as convert the sample rate to match\n       the orchestra sr setting.\n\u003c/p\u003e\u003cp\u003eReads audio data from a file, and can alter its pitch using\n \tone of several available interpolation types, as well as\n \tconvert the sample rate to match the orchestra sr\n \tsetting. diskin2 can also read\n \tmultichannel files with any number of channels in the range 1\n \tto 24 in versions before 5.14, and 40 after.  .\n \tdiskin2 allows more control and higher\n \tsound quality than diskin, but there is\n \talso the disadvantage of higher CPU usage.\n\u003c/p\u003e\u003cpre\u003e a1[, a2[, ... aN]]  diskin2  ifilcod, kpitch[, iskiptim \\\n           [, iwrap[, iformat [, iwsize[, ibufsize[, iskipinit]]]]]]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/diskin2.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e Sig -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#diskin2",
        "fct-type": "function",
        "title": "diskin2"
      },
      "index": {
        "description": "Reads audio data from file and can alter its pitch using one of several available interpolation types as well as convert the sample rate to match the orchestra sr setting Reads audio data from file and can alter its pitch using one of several available interpolation types as well as convert the sample rate to match the orchestra sr setting diskin2 can also read multichannel files with any number of channels in the range to in versions before and after diskin2 allows more control and higher sound quality than diskin but there is also the disadvantage of higher CPU usage a1 a2 aN diskin2 ifilcod kpitch iskiptim iwrap iformat iwsize ibufsize iskipinit csound doc http www.csounds.com manual html diskin2.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "diskin2",
        "normalized": "Str-\u003eSig-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eSig-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:dispfft",
      "description": {
        "fct-descr": "\u003cp\u003eDisplays the Fourier Transform of an audio or control signal.\n\u003c/p\u003e\u003cp\u003eThese units will print orchestra init-values, or produce graphic display of orchestra control signals and audio signals. Uses X11 windows if enabled, else (or if -g flag is set) displays are approximated in ASCII characters.\n\u003c/p\u003e\u003cpre\u003e  dispfft  xsig, iprd, iwsiz [, iwtyp] [, idbout] [, iwtflg]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/dispfft.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#dispfft",
        "fct-type": "function",
        "title": "dispfft"
      },
      "index": {
        "description": "Displays the Fourier Transform of an audio or control signal These units will print orchestra init-values or produce graphic display of orchestra control signals and audio signals Uses X11 windows if enabled else or if flag is set displays are approximated in ASCII characters dispfft xsig iprd iwsiz iwtyp idbout iwtflg csound doc http www.csounds.com manual html dispfft.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "dispfft",
        "normalized": "Sig-\u003eD-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eD-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:display",
      "description": {
        "fct-descr": "\u003cp\u003eDisplays the audio or control signals as an amplitude vs. time graph.\n\u003c/p\u003e\u003cp\u003eThese units will print orchestra init-values, or produce graphic display of orchestra control signals and audio signals. Uses X11 windows if enabled, else (or if -g flag is set) displays are approximated in ASCII characters.\n\u003c/p\u003e\u003cpre\u003e  display  xsig, iprd [, inprds] [, iwtflg]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/display.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#display",
        "fct-type": "function",
        "title": "display"
      },
      "index": {
        "description": "Displays the audio or control signals as an amplitude vs time graph These units will print orchestra init-values or produce graphic display of orchestra control signals and audio signals Uses X11 windows if enabled else or if flag is set displays are approximated in ASCII characters display xsig iprd inprds iwtflg csound doc http www.csounds.com manual html display.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "display",
        "normalized": "Sig-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:dumpk",
      "description": {
        "fct-descr": "\u003cp\u003ePeriodically writes an orchestra control-signal value to an external file.\n\u003c/p\u003e\u003cp\u003ePeriodically writes an orchestra control-signal value to a named external file in a specific format.\n\u003c/p\u003e\u003cpre\u003e  dumpk   ksig, ifilname, iformat, iprd\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/dumpk.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Str -\u003e D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#dumpk",
        "fct-type": "function",
        "title": "dumpk"
      },
      "index": {
        "description": "Periodically writes an orchestra control-signal value to an external file Periodically writes an orchestra control-signal value to named external file in specific format dumpk ksig ifilname iformat iprd csound doc http www.csounds.com manual html dumpk.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "dumpk",
        "normalized": "Sig-\u003eStr-\u003eD-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eStr-\u003eD-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:dumpk2",
      "description": {
        "fct-descr": "\u003cp\u003ePeriodically writes two orchestra control-signal values to an external file.\n\u003c/p\u003e\u003cp\u003ePeriodically writes two orchestra control-signal values to a named external file in a specific format.\n\u003c/p\u003e\u003cpre\u003e  dumpk2  ksig1, ksig2, ifilname, iformat, iprd\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/dumpk2.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Str -\u003e D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#dumpk2",
        "fct-type": "function",
        "title": "dumpk2"
      },
      "index": {
        "description": "Periodically writes two orchestra control-signal values to an external file Periodically writes two orchestra control-signal values to named external file in specific format dumpk2 ksig1 ksig2 ifilname iformat iprd csound doc http www.csounds.com manual html dumpk2.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "dumpk2",
        "normalized": "Sig-\u003eSig-\u003eStr-\u003eD-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eStr-\u003eD-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:dumpk3",
      "description": {
        "fct-descr": "\u003cp\u003ePeriodically writes three orchestra control-signal values to an external file.\n\u003c/p\u003e\u003cp\u003ePeriodically writes three orchestra control-signal values to a named external file in a specific format.\n\u003c/p\u003e\u003cpre\u003e  dumpk3  ksig1, ksig2, ksig3, ifilname, iformat, iprd\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/dumpk3.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Str -\u003e D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#dumpk3",
        "fct-type": "function",
        "title": "dumpk3"
      },
      "index": {
        "description": "Periodically writes three orchestra control-signal values to an external file Periodically writes three orchestra control-signal values to named external file in specific format dumpk3 ksig1 ksig2 ksig3 ifilname iformat iprd csound doc http www.csounds.com manual html dumpk3.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "dumpk3",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eStr-\u003eD-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eStr-\u003eD-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:dumpk4",
      "description": {
        "fct-descr": "\u003cp\u003ePeriodically writes four orchestra control-signal values to an external file.\n\u003c/p\u003e\u003cp\u003ePeriodically writes four orchestra control-signal values to a named external file in a specific format.\n\u003c/p\u003e\u003cpre\u003e  dumpk4  ksig1, ksig2, ksig3, ksig4, ifilname, iformat, iprd\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/dumpk4.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Str -\u003e D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#dumpk4",
        "fct-type": "function",
        "title": "dumpk4"
      },
      "index": {
        "description": "Periodically writes four orchestra control-signal values to an external file Periodically writes four orchestra control-signal values to named external file in specific format dumpk4 ksig1 ksig2 ksig3 ksig4 ifilname iformat iprd csound doc http www.csounds.com manual html dumpk4.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "dumpk4",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eStr-\u003eD-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eStr-\u003eD-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:ficlose",
      "description": {
        "fct-descr": "\u003cp\u003eCloses a previously opened file.\n\u003c/p\u003e\u003cp\u003eficlose can be used to close a file which was opened with fiopen.\n\u003c/p\u003e\u003cpre\u003e  ficlose  ihandle\n  ficlose  Sfilename\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/ficlose.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#ficlose",
        "fct-type": "function",
        "title": "ficlose"
      },
      "index": {
        "description": "Closes previously opened file ficlose can be used to close file which was opened with fiopen ficlose ihandle ficlose Sfilename csound doc http www.csounds.com manual html ficlose.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "ficlose",
        "normalized": "D-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:filebit",
      "description": {
        "fct-descr": "\u003cp\u003eReturns the number of bits in each sample in a sound file.\n\u003c/p\u003e\u003cpre\u003e ir  filebit  ifilcod [, iallowraw]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/filebit.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e D",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#filebit",
        "fct-type": "function",
        "title": "filebit"
      },
      "index": {
        "description": "Returns the number of bits in each sample in sound file ir filebit ifilcod iallowraw csound doc http www.csounds.com manual html filebit.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "filebit",
        "normalized": "Str-\u003eD",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eD"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:filelen",
      "description": {
        "fct-descr": "\u003cp\u003eReturns the length of a sound file.\n\u003c/p\u003e\u003cpre\u003e ir  filelen  ifilcod, [iallowraw]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/filelen.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e D",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#filelen",
        "fct-type": "function",
        "title": "filelen"
      },
      "index": {
        "description": "Returns the length of sound file ir filelen ifilcod iallowraw csound doc http www.csounds.com manual html filelen.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "filelen",
        "normalized": "Str-\u003eD",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eD"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:filenchnls",
      "description": {
        "fct-descr": "\u003cp\u003eReturns the number of channels in a sound file.\n\u003c/p\u003e\u003cpre\u003e ir  filenchnls  ifilcod [, iallowraw]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/filenchnls.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e D",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#filenchnls",
        "fct-type": "function",
        "title": "filenchnls"
      },
      "index": {
        "description": "Returns the number of channels in sound file ir filenchnls ifilcod iallowraw csound doc http www.csounds.com manual html filenchnls.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "filenchnls",
        "normalized": "Str-\u003eD",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eD"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:filepeak",
      "description": {
        "fct-descr": "\u003cp\u003eReturns the peak absolute value of a sound file.\n\u003c/p\u003e\u003cpre\u003e ir  filepeak  ifilcod [, ichnl]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/filepeak.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e D",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#filepeak",
        "fct-type": "function",
        "title": "filepeak"
      },
      "index": {
        "description": "Returns the peak absolute value of sound file ir filepeak ifilcod ichnl csound doc http www.csounds.com manual html filepeak.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "filepeak",
        "normalized": "Str-\u003eD",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eD"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:filesr",
      "description": {
        "fct-descr": "\u003cp\u003eReturns the sample rate of a sound file.\n\u003c/p\u003e\u003cpre\u003e ir  filesr  ifilcod [, iallowraw]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/filesr.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e D",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#filesr",
        "fct-type": "function",
        "title": "filesr"
      },
      "index": {
        "description": "Returns the sample rate of sound file ir filesr ifilcod iallowraw csound doc http www.csounds.com manual html filesr.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "filesr",
        "normalized": "Str-\u003eD",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eD"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:filevalid",
      "description": {
        "fct-descr": "\u003cp\u003eChecks that a file can be used.\n\u003c/p\u003e\u003cp\u003eReturns 1 if the sound file is valid, or 0 if not.\n\u003c/p\u003e\u003cpre\u003e ir  filevalid  ifilcod\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/filevalid.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e D",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#filevalid",
        "fct-type": "function",
        "title": "filevalid"
      },
      "index": {
        "description": "Checks that file can be used Returns if the sound file is valid or if not ir filevalid ifilcod csound doc http www.csounds.com manual html filevalid.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "filevalid",
        "normalized": "Str-\u003eD",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eD"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:fin",
      "description": {
        "fct-descr": "\u003cp\u003eRead signals from a file at a-rate.\n\u003c/p\u003e\u003cpre\u003e  fin  ifilename, iskipframes, iformat, ain1 [, ain2] [, ain3] [,...]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/fin.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e D -\u003e D -\u003e [Sig] -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#fin",
        "fct-type": "function",
        "title": "fin"
      },
      "index": {
        "description": "Read signals from file at a-rate fin ifilename iskipframes iformat ain1 ain2 ain3 csound doc http www.csounds.com manual html fin.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "fin",
        "normalized": "Str-\u003eD-\u003eD-\u003e[Sig]-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eD-\u003eD-\u003e[Sig]-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:fini",
      "description": {
        "fct-descr": "\u003cp\u003eRead signals from a file at i-rate.\n\u003c/p\u003e\u003cpre\u003e  fini  ifilename, iskipframes, iformat, in1 [, in2] [, in3] [, ...]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/fini.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e D -\u003e D -\u003e [D] -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#fini",
        "fct-type": "function",
        "title": "fini"
      },
      "index": {
        "description": "Read signals from file at i-rate fini ifilename iskipframes iformat in1 in2 in3 csound doc http www.csounds.com manual html fini.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "fini",
        "normalized": "Str-\u003eD-\u003eD-\u003e[D]-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eD-\u003eD-\u003e[D]-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:fink",
      "description": {
        "fct-descr": "\u003cp\u003eRead signals from a file at k-rate.\n\u003c/p\u003e\u003cpre\u003e  fink  ifilename, iskipframes, iformat, kin1 [, kin2] [, kin3] [,...]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/fink.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e D -\u003e D -\u003e [Sig] -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#fink",
        "fct-type": "function",
        "title": "fink"
      },
      "index": {
        "description": "Read signals from file at k-rate fink ifilename iskipframes iformat kin1 kin2 kin3 csound doc http www.csounds.com manual html fink.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "fink",
        "normalized": "Str-\u003eD-\u003eD-\u003e[Sig]-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eD-\u003eD-\u003e[Sig]-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:fiopen",
      "description": {
        "fct-descr": "\u003cp\u003eOpens a file in a specific mode.\n\u003c/p\u003e\u003cp\u003efiopen can be used to open a file in one of the specified modes.\n\u003c/p\u003e\u003cpre\u003e ihandle  fiopen  ifilename, imode\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/fiopen.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e D -\u003e SE D",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#fiopen",
        "fct-type": "function",
        "title": "fiopen"
      },
      "index": {
        "description": "Opens file in specific mode fiopen can be used to open file in one of the specified modes ihandle fiopen ifilename imode csound doc http www.csounds.com manual html fiopen.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "fiopen",
        "normalized": "Str-\u003eD-\u003eSE D",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eD-\u003eSE D"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:flashtxt",
      "description": {
        "fct-descr": "\u003cp\u003eAllows text to be displayed from instruments like sliders\n\u003c/p\u003e\u003cp\u003eAllows text to be displayed from instruments like sliders etc. (only on Unix and Windows at present)\n\u003c/p\u003e\u003cpre\u003e  flashtxt   iwhich, String\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/flashtxt.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e Str -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#flashtxt",
        "fct-type": "function",
        "title": "flashtxt"
      },
      "index": {
        "description": "Allows text to be displayed from instruments like sliders Allows text to be displayed from instruments like sliders etc only on Unix and Windows at present flashtxt iwhich String csound doc http www.csounds.com manual html flashtxt.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "flashtxt",
        "normalized": "D-\u003eStr-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eStr-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:fout",
      "description": {
        "fct-descr": "\u003cp\u003eOutputs a-rate signals to an arbitrary number of channels.\n\u003c/p\u003e\u003cp\u003efout outputs N a-rate signals to a specified file of N channels.\n\u003c/p\u003e\u003cpre\u003e  fout  ifilename, iformat, aout1 [, aout2, aout3,...,aoutN]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/fout.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e D -\u003e [Sig] -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#fout",
        "fct-type": "function",
        "title": "fout"
      },
      "index": {
        "description": "Outputs a-rate signals to an arbitrary number of channels fout outputs a-rate signals to specified file of channels fout ifilename iformat aout1 aout2 aout3 aoutN csound doc http www.csounds.com manual html fout.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "fout",
        "normalized": "Str-\u003eD-\u003e[Sig]-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eD-\u003e[Sig]-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:fouti",
      "description": {
        "fct-descr": "\u003cp\u003eOutputs i-rate signals of an arbitrary number of channels to a specified file.\n\u003c/p\u003e\u003cp\u003efouti output N i-rate signals to a specified file of N channels.\n\u003c/p\u003e\u003cpre\u003e  fouti  ihandle, iformat, iflag, iout1 [, iout2, iout3,....,ioutN]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/fouti.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e D -\u003e D -\u003e [D] -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#fouti",
        "fct-type": "function",
        "title": "fouti"
      },
      "index": {
        "description": "Outputs i-rate signals of an arbitrary number of channels to specified file fouti output i-rate signals to specified file of channels fouti ihandle iformat iflag iout1 iout2 iout3 ioutN csound doc http www.csounds.com manual html fouti.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "fouti",
        "normalized": "Str-\u003eD-\u003eD-\u003e[D]-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eD-\u003eD-\u003e[D]-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:foutir",
      "description": {
        "fct-descr": "\u003cp\u003eOutputs i-rate signals from an arbitrary number of channels to a specified file.\n\u003c/p\u003e\u003cp\u003efoutir output N i-rate signals to a specified file of N channels.\n\u003c/p\u003e\u003cpre\u003e  foutir  ihandle, iformat, iflag, iout1 [, iout2, iout3,....,ioutN]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/foutir.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e D -\u003e D -\u003e [D] -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#foutir",
        "fct-type": "function",
        "title": "foutir"
      },
      "index": {
        "description": "Outputs i-rate signals from an arbitrary number of channels to specified file foutir output i-rate signals to specified file of channels foutir ihandle iformat iflag iout1 iout2 iout3 ioutN csound doc http www.csounds.com manual html foutir.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "foutir",
        "normalized": "Str-\u003eD-\u003eD-\u003e[D]-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eD-\u003eD-\u003e[D]-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:foutk",
      "description": {
        "fct-descr": "\u003cp\u003eOutputs k-rate signals of an arbitrary number of channels to a specified file, in raw (headerless) format.\n\u003c/p\u003e\u003cp\u003efoutk outputs N k-rate signals to a specified file of N channels.\n\u003c/p\u003e\u003cpre\u003e  foutk  ifilename, iformat, kout1 [, kout2, kout3,....,koutN]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/foutk.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e D -\u003e [Sig] -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#foutk",
        "fct-type": "function",
        "title": "foutk"
      },
      "index": {
        "description": "Outputs k-rate signals of an arbitrary number of channels to specified file in raw headerless format foutk outputs k-rate signals to specified file of channels foutk ifilename iformat kout1 kout2 kout3 koutN csound doc http www.csounds.com manual html foutk.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "foutk",
        "normalized": "Str-\u003eD-\u003e[Sig]-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eD-\u003e[Sig]-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:fprintks",
      "description": {
        "fct-descr": "\u003cp\u003eSimilar to printks but prints to a file.\n\u003c/p\u003e\u003cpre\u003e  fprintks  \"filename\", \"string\", [, kval1] [, kval2] [...]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/fprintks.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e Str -\u003e [Sig] -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#fprintks",
        "fct-type": "function",
        "title": "fprintks"
      },
      "index": {
        "description": "Similar to printks but prints to file fprintks filename string kval1 kval2 csound doc http www.csounds.com manual html fprintks.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "fprintks",
        "normalized": "Str-\u003eStr-\u003e[Sig]-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eStr-\u003e[Sig]-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:fprints",
      "description": {
        "fct-descr": "\u003cp\u003eSimilar to prints but prints to a file.\n\u003c/p\u003e\u003cpre\u003e  fprints  \"filename\", \"string\" [, ival1] [, ival2] [...]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/fprints.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e Str -\u003e [D] -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#fprints",
        "fct-type": "function",
        "title": "fprints"
      },
      "index": {
        "description": "Similar to prints but prints to file fprints filename string ival1 ival2 csound doc http www.csounds.com manual html fprints.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "fprints",
        "normalized": "Str-\u003eStr-\u003e[D]-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eStr-\u003e[D]-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:in-39-",
      "description": {
        "fct-descr": "\u003cp\u003eReads mono audio data from an external device or stream.\n\u003c/p\u003e\u003cpre\u003e ar1  in &#160;\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/in.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#in%27",
        "fct-type": "function",
        "title": "in'"
      },
      "index": {
        "description": "Reads mono audio data from an external device or stream ar1 in csound doc http www.csounds.com manual html in.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "in'",
        "normalized": "",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:in32",
      "description": {
        "fct-descr": "\u003cp\u003eReads a 32-channel audio signal from an external device or stream.\n\u003c/p\u003e\u003cpre\u003e ar1, ar2, ar3, ar4, ar5, ar6, ar7, ar8, ar9, ar10, ar11, ar12, ar13, ar14, \\\n           ar15, ar16, ar17, ar18, ar19, ar20, ar21, ar22, ar23, ar24, ar25, ar26, \\\n           ar27, ar28, ar29, ar30, ar31, ar32  in32 &#160;\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/in32.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "a",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#in32",
        "fct-type": "function",
        "title": "in32"
      },
      "index": {
        "description": "Reads channel audio signal from an external device or stream ar1 ar2 ar3 ar4 ar5 ar6 ar7 ar8 ar9 ar10 ar11 ar12 ar13 ar14 ar15 ar16 ar17 ar18 ar19 ar20 ar21 ar22 ar23 ar24 ar25 ar26 ar27 ar28 ar29 ar30 ar31 ar32 in32 csound doc http www.csounds.com manual html in32.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "in32",
        "normalized": "",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:inch",
      "description": {
        "fct-descr": "\u003cp\u003eReads from numbered channels in an external audio signal or stream.\n\u003c/p\u003e\u003cpre\u003e ain1[, ...]  inch  kchan1[,...]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/inch.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "[Sig] -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#inch",
        "fct-type": "function",
        "title": "inch"
      },
      "index": {
        "description": "Reads from numbered channels in an external audio signal or stream ain1 inch kchan1 csound doc http www.csounds.com manual html inch.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "inch",
        "normalized": "[Sig]-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "[Sig]-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:inh",
      "description": {
        "fct-descr": "\u003cp\u003eReads six-channel audio data from an external device or stream.\n\u003c/p\u003e\u003cpre\u003e ar1, ar2, ar3, ar4, ar5, ar6  inh &#160;\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/inh.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "a",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#inh",
        "fct-type": "function",
        "title": "inh"
      },
      "index": {
        "description": "Reads six-channel audio data from an external device or stream ar1 ar2 ar3 ar4 ar5 ar6 inh csound doc http www.csounds.com manual html inh.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "inh",
        "normalized": "",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:ino",
      "description": {
        "fct-descr": "\u003cp\u003eReads eight-channel audio data from an external device or stream.\n\u003c/p\u003e\u003cpre\u003e ar1, ar2, ar3, ar4, ar5, ar6, ar7, ar8  ino &#160;\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/ino.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "a",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#ino",
        "fct-type": "function",
        "title": "ino"
      },
      "index": {
        "description": "Reads eight-channel audio data from an external device or stream ar1 ar2 ar3 ar4 ar5 ar6 ar7 ar8 ino csound doc http www.csounds.com manual html ino.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "ino",
        "normalized": "",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:inq",
      "description": {
        "fct-descr": "\u003cp\u003eReads quad audio data from an external device or stream.\n\u003c/p\u003e\u003cpre\u003e ar1, ar2,  ar3, a4  inq &#160;\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/inq.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "a",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#inq",
        "fct-type": "function",
        "title": "inq"
      },
      "index": {
        "description": "Reads quad audio data from an external device or stream ar1 ar2 ar3 a4 inq csound doc http www.csounds.com manual html inq.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "inq",
        "normalized": "",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:inrg",
      "description": {
        "fct-descr": "\u003cp\u003eAllow input from a range of adjacent audio channels from the audio input device\n\u003c/p\u003e\u003cp\u003einrg reads audio from a range of adjacent audio channels from the audio input device.\n\u003c/p\u003e\u003cpre\u003e  inrg  kstart, ain1 [,ain2, ain3, ..., ainN]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/inrg.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e [Sig] -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#inrg",
        "fct-type": "function",
        "title": "inrg"
      },
      "index": {
        "description": "Allow input from range of adjacent audio channels from the audio input device inrg reads audio from range of adjacent audio channels from the audio input device inrg kstart ain1 ain2 ain3 ainN csound doc http www.csounds.com manual html inrg.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "inrg",
        "normalized": "Sig-\u003e[Sig]-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003e[Sig]-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:ins",
      "description": {
        "fct-descr": "\u003cp\u003eReads stereo audio data from an external device or stream.\n\u003c/p\u003e\u003cpre\u003e ar1, ar2  ins &#160;\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/ins.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "a",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#ins",
        "fct-type": "function",
        "title": "ins"
      },
      "index": {
        "description": "Reads stereo audio data from an external device or stream ar1 ar2 ins csound doc http www.csounds.com manual html ins.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "ins",
        "normalized": "",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:invalue",
      "description": {
        "fct-descr": "\u003cp\u003eReads a k-rate signal from a user-defined channel.\n\u003c/p\u003e\u003cp\u003eReads a k-rate signal or string from a user-defined channel.\n\u003c/p\u003e\u003cpre\u003e kvalue  invalue  \"channel name\"\n Sname  invalue  \"channel name\"\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/invalue.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e Str",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#invalue",
        "fct-type": "function",
        "title": "invalue"
      },
      "index": {
        "description": "Reads k-rate signal from user-defined channel Reads k-rate signal or string from user-defined channel kvalue invalue channel name Sname invalue channel name csound doc http www.csounds.com manual html invalue.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "invalue",
        "normalized": "Str-\u003eStr",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eStr"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:inx",
      "description": {
        "fct-descr": "\u003cp\u003eReads a 16-channel audio signal from an external device or stream.\n\u003c/p\u003e\u003cpre\u003e ar1, ar2, ar3, ar4, ar5, ar6, ar7, ar8, ar9, ar10, ar11, ar12, \\\n           ar13, ar14, ar15, ar16  inx &#160;\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/inx.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "a",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#inx",
        "fct-type": "function",
        "title": "inx"
      },
      "index": {
        "description": "Reads channel audio signal from an external device or stream ar1 ar2 ar3 ar4 ar5 ar6 ar7 ar8 ar9 ar10 ar11 ar12 ar13 ar14 ar15 ar16 inx csound doc http www.csounds.com manual html inx.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "inx",
        "normalized": "",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:inz",
      "description": {
        "fct-descr": "\u003cp\u003eReads multi-channel audio samples into a ZAK array from an external device or stream.\n\u003c/p\u003e\u003cpre\u003e  inz  ksig1\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/inz.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#inz",
        "fct-type": "function",
        "title": "inz"
      },
      "index": {
        "description": "Reads multi-channel audio samples into ZAK array from an external device or stream inz ksig1 csound doc http www.csounds.com manual html inz.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "inz",
        "normalized": "Sig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:mdelay",
      "description": {
        "fct-descr": "\u003cp\u003eA MIDI delay opcode.\n\u003c/p\u003e\u003cpre\u003e  mdelay  kstatus, kchan, kd1, kd2, kdelay\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/mdelay.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#mdelay",
        "fct-type": "function",
        "title": "mdelay"
      },
      "index": {
        "description": "MIDI delay opcode mdelay kstatus kchan kd1 kd2 kdelay csound doc http www.csounds.com manual html mdelay.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "mdelay",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:monitor",
      "description": {
        "fct-descr": "\u003cp\u003eReturns the audio spout frame.\n\u003c/p\u003e\u003cp\u003eReturns the audio spout frame (if active), otherwise it returns zero.\n\u003c/p\u003e\u003cpre\u003e aout1 [,aout2 ... aoutX]  monitor &#160;\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/monitor.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "a",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#monitor",
        "fct-type": "function",
        "title": "monitor"
      },
      "index": {
        "description": "Returns the audio spout frame Returns the audio spout frame if active otherwise it returns zero aout1 aout2 aoutX monitor csound doc http www.csounds.com manual html monitor.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "monitor",
        "normalized": "",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:mp3in",
      "description": {
        "fct-descr": "\u003cp\u003eReads stereo audio data from an external MP3 file.\n\u003c/p\u003e\u003cpre\u003e ar1, ar2  mp3in  ifilcod[, iskptim, iformat, iskipinit, ibufsize]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/mp3in.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#mp3in",
        "fct-type": "function",
        "title": "mp3in"
      },
      "index": {
        "description": "Reads stereo audio data from an external MP3 file ar1 ar2 mp3in ifilcod iskptim iformat iskipinit ibufsize csound doc http www.csounds.com manual html mp3in.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "mp3in",
        "normalized": "Str-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:mp3len",
      "description": {
        "fct-descr": "\u003cp\u003eReturns the length of an MP3 sound file.\n\u003c/p\u003e\u003cpre\u003e ir  mp3len  ifilcod\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/mp3len.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e D",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#mp3len",
        "fct-type": "function",
        "title": "mp3len"
      },
      "index": {
        "description": "Returns the length of an MP3 sound file ir mp3len ifilcod csound doc http www.csounds.com manual html mp3len.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "mp3len",
        "normalized": "Str-\u003eD",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eD"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:out",
      "description": {
        "fct-descr": "\u003cp\u003eWrites mono audio data to an external device or stream.\n\u003c/p\u003e\u003cpre\u003e  out  asig\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/out.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#out",
        "fct-type": "function",
        "title": "out"
      },
      "index": {
        "description": "Writes mono audio data to an external device or stream out asig csound doc http www.csounds.com manual html out.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "out",
        "normalized": "Sig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:out32",
      "description": {
        "fct-descr": "\u003cp\u003eWrites 32-channel audio data to an external device or stream.\n\u003c/p\u003e\u003cpre\u003e  out32  asig1, asig2, asig3, asig4, asig5, asig6, asig7, asig8, asig10, \\\n           asig11, asig12, asig13, asig14, asig15, asig16, asig17, asig18, \\\n           asig19, asig20, asig21, asig22, asig23, asig24, asig25, asig26, \\\n           asig27, asig28, asig29, asig30, asig31, asig32\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/out32.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#out32",
        "fct-type": "function",
        "title": "out32"
      },
      "index": {
        "description": "Writes channel audio data to an external device or stream out32 asig1 asig2 asig3 asig4 asig5 asig6 asig7 asig8 asig10 asig11 asig12 asig13 asig14 asig15 asig16 asig17 asig18 asig19 asig20 asig21 asig22 asig23 asig24 asig25 asig26 asig27 asig28 asig29 asig30 asig31 asig32 csound doc http www.csounds.com manual html out32.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "out32",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:outc",
      "description": {
        "fct-descr": "\u003cp\u003eWrites audio data with an arbitrary number of channels to an external device or stream.\n\u003c/p\u003e\u003cpre\u003e  outc  asig1 [, asig2] [...]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/outc.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "[Sig] -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#outc",
        "fct-type": "function",
        "title": "outc"
      },
      "index": {
        "description": "Writes audio data with an arbitrary number of channels to an external device or stream outc asig1 asig2 csound doc http www.csounds.com manual html outc.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "outc",
        "normalized": "[Sig]-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "[Sig]-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:outch",
      "description": {
        "fct-descr": "\u003cp\u003eWrites multi-channel audio data, with user-controllable channels, to an external device or stream.\n\u003c/p\u003e\u003cpre\u003e  outch  kchan1, asig1 [, kchan2] [, asig2] [...]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/outch.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e [Sig] -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#outch",
        "fct-type": "function",
        "title": "outch"
      },
      "index": {
        "description": "Writes multi-channel audio data with user-controllable channels to an external device or stream outch kchan1 asig1 kchan2 asig2 csound doc http www.csounds.com manual html outch.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "outch",
        "normalized": "Sig-\u003e[Sig]-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003e[Sig]-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:outh",
      "description": {
        "fct-descr": "\u003cp\u003eWrites 6-channel audio data to an external device or stream.\n\u003c/p\u003e\u003cpre\u003e  outh  asig1, asig2, asig3, asig4, asig5, asig6\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/outh.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#outh",
        "fct-type": "function",
        "title": "outh"
      },
      "index": {
        "description": "Writes channel audio data to an external device or stream outh asig1 asig2 asig3 asig4 asig5 asig6 csound doc http www.csounds.com manual html outh.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "outh",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:outo",
      "description": {
        "fct-descr": "\u003cp\u003eWrites 8-channel audio data to an external device or stream.\n\u003c/p\u003e\u003cpre\u003e  outo  asig1, asig2, asig3, asig4, asig5, asig6, asig7, asig8\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/outo.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#outo",
        "fct-type": "function",
        "title": "outo"
      },
      "index": {
        "description": "Writes channel audio data to an external device or stream outo asig1 asig2 asig3 asig4 asig5 asig6 asig7 asig8 csound doc http www.csounds.com manual html outo.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "outo",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:outq",
      "description": {
        "fct-descr": "\u003cp\u003eWrites 4-channel audio data to an external device or stream.\n\u003c/p\u003e\u003cpre\u003e  outq  asig1, asig2, asig3, asig4\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/outq.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#outq",
        "fct-type": "function",
        "title": "outq"
      },
      "index": {
        "description": "Writes channel audio data to an external device or stream outq asig1 asig2 asig3 asig4 csound doc http www.csounds.com manual html outq.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "outq",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:outq1",
      "description": {
        "fct-descr": "\u003cp\u003eWrites samples to quad channel 1 of an external device or stream.\n\u003c/p\u003e\u003cpre\u003e  outq1  asig\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/outq1.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#outq1",
        "fct-type": "function",
        "title": "outq1"
      },
      "index": {
        "description": "Writes samples to quad channel of an external device or stream outq1 asig csound doc http www.csounds.com manual html outq1.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "outq1",
        "normalized": "Sig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:outq2",
      "description": {
        "fct-descr": "\u003cp\u003eWrites samples to quad channel 2 of an external device or stream.\n\u003c/p\u003e\u003cpre\u003e  outq2  asig\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/outq2.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#outq2",
        "fct-type": "function",
        "title": "outq2"
      },
      "index": {
        "description": "Writes samples to quad channel of an external device or stream outq2 asig csound doc http www.csounds.com manual html outq2.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "outq2",
        "normalized": "Sig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:outq3",
      "description": {
        "fct-descr": "\u003cp\u003eWrites samples to quad channel 3 of an external device or stream.\n\u003c/p\u003e\u003cpre\u003e  outq3  asig\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/outq3.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#outq3",
        "fct-type": "function",
        "title": "outq3"
      },
      "index": {
        "description": "Writes samples to quad channel of an external device or stream outq3 asig csound doc http www.csounds.com manual html outq3.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "outq3",
        "normalized": "Sig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:outq4",
      "description": {
        "fct-descr": "\u003cp\u003eWrites samples to quad channel 4 of an external device or stream.\n\u003c/p\u003e\u003cpre\u003e  outq4  asig\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/outq4.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#outq4",
        "fct-type": "function",
        "title": "outq4"
      },
      "index": {
        "description": "Writes samples to quad channel of an external device or stream outq4 asig csound doc http www.csounds.com manual html outq4.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "outq4",
        "normalized": "Sig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:outrg",
      "description": {
        "fct-descr": "\u003cp\u003eAllow output to a range of adjacent audio channels on the audio output device\n\u003c/p\u003e\u003cp\u003eoutrg outputs audio to a range of adjacent audio channels on the audio output device.\n\u003c/p\u003e\u003cpre\u003e  outrg  kstart, aout1 [,aout2, aout3, ..., aoutN]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/outrg.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e [Sig] -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#outrg",
        "fct-type": "function",
        "title": "outrg"
      },
      "index": {
        "description": "Allow output to range of adjacent audio channels on the audio output device outrg outputs audio to range of adjacent audio channels on the audio output device outrg kstart aout1 aout2 aout3 aoutN csound doc http www.csounds.com manual html outrg.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "outrg",
        "normalized": "Sig-\u003e[Sig]-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003e[Sig]-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:outs",
      "description": {
        "fct-descr": "\u003cp\u003eWrites stereo audio data to an external device or stream.\n\u003c/p\u003e\u003cpre\u003e  outs  asig1, asig2\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/outs.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#outs",
        "fct-type": "function",
        "title": "outs"
      },
      "index": {
        "description": "Writes stereo audio data to an external device or stream outs asig1 asig2 csound doc http www.csounds.com manual html outs.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "outs",
        "normalized": "Sig-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:outs1",
      "description": {
        "fct-descr": "\u003cp\u003eWrites samples to stereo channel 1 of an external device or stream.\n\u003c/p\u003e\u003cpre\u003e  outs1  asig\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/outs1.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#outs1",
        "fct-type": "function",
        "title": "outs1"
      },
      "index": {
        "description": "Writes samples to stereo channel of an external device or stream outs1 asig csound doc http www.csounds.com manual html outs1.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "outs1",
        "normalized": "Sig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:outs2",
      "description": {
        "fct-descr": "\u003cp\u003eWrites samples to stereo channel 2 of an external device or stream.\n\u003c/p\u003e\u003cpre\u003e  outs2  asig\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/outs2.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#outs2",
        "fct-type": "function",
        "title": "outs2"
      },
      "index": {
        "description": "Writes samples to stereo channel of an external device or stream outs2 asig csound doc http www.csounds.com manual html outs2.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "outs2",
        "normalized": "Sig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:outvalue",
      "description": {
        "fct-descr": "\u003cp\u003eSends a k-rate signal or string to a user-defined channel.\n\u003c/p\u003e\u003cpre\u003e  outvalue  \"channel name\", kvalue\n  outvalue  \"channel name\", \"string\"\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/outvalue.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#outvalue",
        "fct-type": "function",
        "title": "outvalue"
      },
      "index": {
        "description": "Sends k-rate signal or string to user-defined channel outvalue channel name kvalue outvalue channel name string csound doc http www.csounds.com manual html outvalue.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "outvalue",
        "normalized": "Str-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:outx",
      "description": {
        "fct-descr": "\u003cp\u003eWrites 16-channel audio data to an external device or stream.\n\u003c/p\u003e\u003cpre\u003e  outx  asig1, asig2, asig3, asig4, asig5, asig6, asig7, asig8, \\\n           asig9, asig10, asig11, asig12, asig13, asig14, asig15, asig16\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/outx.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#outx",
        "fct-type": "function",
        "title": "outx"
      },
      "index": {
        "description": "Writes channel audio data to an external device or stream outx asig1 asig2 asig3 asig4 asig5 asig6 asig7 asig8 asig9 asig10 asig11 asig12 asig13 asig14 asig15 asig16 csound doc http www.csounds.com manual html outx.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "outx",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:outz",
      "description": {
        "fct-descr": "\u003cp\u003eWrites multi-channel audio data from a ZAK array to an external device or stream.\n\u003c/p\u003e\u003cpre\u003e  outz  ksig1\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/outz.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#outz",
        "fct-type": "function",
        "title": "outz"
      },
      "index": {
        "description": "Writes multi-channel audio data from ZAK array to an external device or stream outz ksig1 csound doc http www.csounds.com manual html outz.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "outz",
        "normalized": "Sig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:print-39-",
      "description": {
        "fct-descr": "\u003cp\u003eDisplays the values init (i-rate) variables.\n\u003c/p\u003e\u003cp\u003eThese units will print orchestra init-values.\n\u003c/p\u003e\u003cpre\u003e  print  iarg [, iarg1] [, iarg2] [...]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/print.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "[D] -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#print%27",
        "fct-type": "function",
        "title": "print'"
      },
      "index": {
        "description": "Displays the values init i-rate variables These units will print orchestra init-values print iarg iarg1 iarg2 csound doc http www.csounds.com manual html print.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "print'",
        "normalized": "[D]-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "[D]-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:printf",
      "description": {
        "fct-descr": "\u003cp\u003eprintf-style formatted output\n\u003c/p\u003e\u003cp\u003eprintf and printf_i write\n     formatted output, similarly to the C function\n     printf(). printf_i runs at i-time only, while\n     printf runs both at initialization and\n     performance time.\n\u003c/p\u003e\u003cpre\u003e  printf  Sfmt, ktrig, [xarg1[, xarg2[, ... ]]]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/printf.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e Sig -\u003e [Sig] -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#printf",
        "fct-type": "function",
        "title": "printf"
      },
      "index": {
        "description": "printf-style formatted output printf and printf write formatted output similarly to the function printf printf runs at i-time only while printf runs both at initialization and performance time printf Sfmt ktrig xarg1 xarg2 csound doc http www.csounds.com manual html printf.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "printf",
        "normalized": "Str-\u003eSig-\u003e[Sig]-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eSig-\u003e[Sig]-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:printf_i",
      "description": {
        "fct-descr": "\u003cp\u003eprintf-style formatted output\n\u003c/p\u003e\u003cp\u003eprintf and printf_i write\n     formatted output, similarly to the C function\n     printf(). printf_i runs at i-time only, while\n     printf runs both at initialization and\n     performance time.\n\u003c/p\u003e\u003cpre\u003e  printf_i  Sfmt, itrig, [iarg1[, iarg2[, ... ]]]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/printf.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e D -\u003e [D] -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#printf_i",
        "fct-type": "function",
        "title": "printf_i"
      },
      "index": {
        "description": "printf-style formatted output printf and printf write formatted output similarly to the function printf printf runs at i-time only while printf runs both at initialization and performance time printf Sfmt itrig iarg1 iarg2 csound doc http www.csounds.com manual html printf.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "printf_i",
        "normalized": "Str-\u003eD-\u003e[D]-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eD-\u003e[D]-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:printk",
      "description": {
        "fct-descr": "\u003cp\u003ePrints one k-rate value at specified intervals.\n\u003c/p\u003e\u003cpre\u003e  printk  itime, kval [, ispace]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/printk.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#printk",
        "fct-type": "function",
        "title": "printk"
      },
      "index": {
        "description": "Prints one k-rate value at specified intervals printk itime kval ispace csound doc http www.csounds.com manual html printk.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "printk",
        "normalized": "D-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:printk2",
      "description": {
        "fct-descr": "\u003cp\u003ePrints a new value every time a control variable changes.\n\u003c/p\u003e\u003cpre\u003e  printk2  kvar [, inumspaces]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/printk2.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#printk2",
        "fct-type": "function",
        "title": "printk2"
      },
      "index": {
        "description": "Prints new value every time control variable changes printk2 kvar inumspaces csound doc http www.csounds.com manual html printk2.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "printk2",
        "normalized": "Sig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:printks",
      "description": {
        "fct-descr": "\u003cp\u003ePrints at k-rate using a printf() style syntax.\n\u003c/p\u003e\u003cpre\u003e  printks  \"string\", itime [, kval1] [, kval2] [...]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/printks.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e D -\u003e [Sig] -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#printks",
        "fct-type": "function",
        "title": "printks"
      },
      "index": {
        "description": "Prints at k-rate using printf style syntax printks string itime kval1 kval2 csound doc http www.csounds.com manual html printks.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "printks",
        "normalized": "Str-\u003eD-\u003e[Sig]-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eD-\u003e[Sig]-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:prints",
      "description": {
        "fct-descr": "\u003cp\u003ePrints at init-time using a printf() style syntax.\n\u003c/p\u003e\u003cpre\u003e  prints  \"string\" [, kval1] [, kval2] [...]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/prints.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e [Sig] -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#prints",
        "fct-type": "function",
        "title": "prints"
      },
      "index": {
        "description": "Prints at init-time using printf style syntax prints string kval1 kval2 csound doc http www.csounds.com manual html prints.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "prints",
        "normalized": "Str-\u003e[Sig]-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003e[Sig]-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:readk",
      "description": {
        "fct-descr": "\u003cp\u003ePeriodically reads an orchestra control-signal value from an external file.\n\u003c/p\u003e\u003cp\u003ePeriodically reads an orchestra control-signal value from a named external file in a specific format.\n\u003c/p\u003e\u003cpre\u003e kres  readk  ifilname, iformat, iprd\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/readk.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#readk",
        "fct-type": "function",
        "title": "readk"
      },
      "index": {
        "description": "Periodically reads an orchestra control-signal value from an external file Periodically reads an orchestra control-signal value from named external file in specific format kres readk ifilname iformat iprd csound doc http www.csounds.com manual html readk.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "readk",
        "normalized": "Str-\u003eD-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eD-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:readk2",
      "description": {
        "fct-descr": "\u003cp\u003ePeriodically reads two orchestra control-signal values from an external file.\n\u003c/p\u003e\u003cpre\u003e kr1, kr2  readk2  ifilname, iformat, iprd\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/readk2.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e D -\u003e D -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#readk2",
        "fct-type": "function",
        "title": "readk2"
      },
      "index": {
        "description": "Periodically reads two orchestra control-signal values from an external file kr1 kr2 readk2 ifilname iformat iprd csound doc http www.csounds.com manual html readk2.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "readk2",
        "normalized": "Str-\u003eD-\u003eD-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eD-\u003eD-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:readk3",
      "description": {
        "fct-descr": "\u003cp\u003ePeriodically reads three orchestra control-signal values from an external file.\n\u003c/p\u003e\u003cpre\u003e kr1, kr2, kr3  readk3  ifilname, iformat, iprd\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/readk3.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e D -\u003e D -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#readk3",
        "fct-type": "function",
        "title": "readk3"
      },
      "index": {
        "description": "Periodically reads three orchestra control-signal values from an external file kr1 kr2 kr3 readk3 ifilname iformat iprd csound doc http www.csounds.com manual html readk3.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "readk3",
        "normalized": "Str-\u003eD-\u003eD-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eD-\u003eD-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:readk4",
      "description": {
        "fct-descr": "\u003cp\u003ePeriodically reads four orchestra control-signal values from an external file.\n\u003c/p\u003e\u003cpre\u003e kr1, kr2, kr3, kr4  readk4  ifilname, iformat, iprd\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/readk4.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e D -\u003e D -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#readk4",
        "fct-type": "function",
        "title": "readk4"
      },
      "index": {
        "description": "Periodically reads four orchestra control-signal values from an external file kr1 kr2 kr3 kr4 readk4 ifilname iformat iprd csound doc http www.csounds.com manual html readk4.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "readk4",
        "normalized": "Str-\u003eD-\u003eD-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eD-\u003eD-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:setksmps",
      "description": {
        "fct-descr": "\u003cp\u003eSets the local ksmps value in an instrument or user-defined opcode block\n\u003c/p\u003e\u003cp\u003eSets the local ksmps value in an instrument or user-defined opcode block.\n\u003c/p\u003e\u003cpre\u003e  setksmps  iksmps\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/setksmps.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#setksmps",
        "fct-type": "function",
        "title": "setksmps"
      },
      "index": {
        "description": "Sets the local ksmps value in an instrument or user-defined opcode block Sets the local ksmps value in an instrument or user-defined opcode block setksmps iksmps csound doc http www.csounds.com manual html setksmps.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "setksmps",
        "normalized": "D-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:soundin",
      "description": {
        "fct-descr": "\u003cp\u003eReads audio data from an external device or stream.\n\u003c/p\u003e\u003cp\u003eReads audio data from an external device or stream.  Up to 24\n       channels may be read before v5.14, extended to 40 in later versions.\n\u003c/p\u003e\u003cpre\u003e ar1[, ar2[, ar3[, ... a24]]]  soundin  ifilcod [, iskptim] [, iformat] \\\n           [, iskipinit] [, ibufsize]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/soundin.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#soundin",
        "fct-type": "function",
        "title": "soundin"
      },
      "index": {
        "description": "Reads audio data from an external device or stream Reads audio data from an external device or stream Up to channels may be read before v5.14 extended to in later versions ar1 ar2 ar3 a24 soundin ifilcod iskptim iformat iskipinit ibufsize csound doc http www.csounds.com manual html soundin.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "soundin",
        "normalized": "Str-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:soundout",
      "description": {
        "fct-descr": "\u003cp\u003eDeprecated. Writes audio output to a disk file.\n\u003c/p\u003e\u003cp\u003eThe usage of soundout is discouraged. Please use  fout instead.\n\u003c/p\u003e\u003cpre\u003e  soundout   asig1, ifilcod [, iformat]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/soundout.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Str -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#soundout",
        "fct-type": "function",
        "title": "soundout"
      },
      "index": {
        "description": "Deprecated Writes audio output to disk file The usage of soundout is discouraged Please use fout instead soundout asig1 ifilcod iformat csound doc http www.csounds.com manual html soundout.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "soundout",
        "normalized": "Sig-\u003eStr-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eStr-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:soundouts",
      "description": {
        "fct-descr": "\u003cp\u003eDeprecated. Writes audio output to a disk file.\n\u003c/p\u003e\u003cp\u003eThe usage of soundouts is discouraged. Please use  fout instead.\n\u003c/p\u003e\u003cpre\u003e  soundouts   asigl, asigr, ifilcod [, iformat]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/soundouts.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Str -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#soundouts",
        "fct-type": "function",
        "title": "soundouts"
      },
      "index": {
        "description": "Deprecated Writes audio output to disk file The usage of soundouts is discouraged Please use fout instead soundouts asigl asigr ifilcod iformat csound doc http www.csounds.com manual html soundouts.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "soundouts",
        "normalized": "Sig-\u003eSig-\u003eStr-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eStr-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:xin",
      "description": {
        "fct-descr": "\u003cp\u003ePasses variables to a user-defined opcode block,\n\u003c/p\u003e\u003cp\u003eThe xin and xout opcodes copy variables to and from the opcode definition, allowing communication with the calling instrument.\n\u003c/p\u003e\u003cpre\u003e xinarg1 [, xinarg2] ... [xinargN]  xin &#160;\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/xin.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "a",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#xin",
        "fct-type": "function",
        "title": "xin"
      },
      "index": {
        "description": "Passes variables to user-defined opcode block The xin and xout opcodes copy variables to and from the opcode definition allowing communication with the calling instrument xinarg1 xinarg2 xinargN xin csound doc http www.csounds.com manual html xin.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "xin",
        "normalized": "",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalIO.html#v:xout",
      "description": {
        "fct-descr": "\u003cp\u003eRetrieves variables from a user-defined opcode block,\n\u003c/p\u003e\u003cp\u003eThe xin and xout opcodes copy variables to and from the opcode definition, allowing communication with the calling instrument.\n\u003c/p\u003e\u003cpre\u003e  xout  xoutarg1 [, xoutarg2] ... [, xoutargN]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/xout.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalIO",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "[Sig] -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalIO.html#xout",
        "fct-type": "function",
        "title": "xout"
      },
      "index": {
        "description": "Retrieves variables from user-defined opcode block The xin and xout opcodes copy variables to and from the opcode definition allowing communication with the calling instrument xout xoutarg1 xoutarg2 xoutargN csound doc http www.csounds.com manual html xout.html",
        "hierarchy": "Csound Typed Opcode SignalIO",
        "module": "Csound.Typed.Opcode.SignalIO",
        "name": "xout",
        "normalized": "[Sig]-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "[Sig]-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#",
      "description": {
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "module",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html",
        "fct-type": "module",
        "title": "SignalModifiers"
      },
      "index": {
        "description": "",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "SignalModifiers",
        "normalized": "",
        "package": "csound-expression-opcodes",
        "partial": "Signal Modifiers",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:alpass",
      "description": {
        "fct-descr": "\u003cp\u003eReverberates an input signal with a flat frequency response.\n\u003c/p\u003e\u003cpre\u003e ares  alpass  asig, krvt, ilpt [, iskip] [, insmps]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/alpass.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#alpass",
        "fct-type": "function",
        "title": "alpass"
      },
      "index": {
        "description": "Reverberates an input signal with flat frequency response ares alpass asig krvt ilpt iskip insmps csound doc http www.csounds.com manual html alpass.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "alpass",
        "normalized": "Sig-\u003eSig-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:areson",
      "description": {
        "fct-descr": "\u003cp\u003eA notch filter whose transfer functions are the complements of the reson opcode.\n\u003c/p\u003e\u003cpre\u003e ares  areson  asig, kcf, kbw [, iscl] [, iskip]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/areson.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#areson",
        "fct-type": "function",
        "title": "areson"
      },
      "index": {
        "description": "notch filter whose transfer functions are the complements of the reson opcode ares areson asig kcf kbw iscl iskip csound doc http www.csounds.com manual html areson.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "areson",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:aresonk",
      "description": {
        "fct-descr": "\u003cp\u003eA notch filter whose transfer functions are the complements of the reson opcode.\n\u003c/p\u003e\u003cpre\u003e kres  aresonk  ksig, kcf, kbw [, iscl] [, iskip]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/aresonk.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#aresonk",
        "fct-type": "function",
        "title": "aresonk"
      },
      "index": {
        "description": "notch filter whose transfer functions are the complements of the reson opcode kres aresonk ksig kcf kbw iscl iskip csound doc http www.csounds.com manual html aresonk.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "aresonk",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:atone",
      "description": {
        "fct-descr": "\u003cp\u003eA hi-pass filter whose transfer functions are the complements of the tone opcode.\n\u003c/p\u003e\u003cpre\u003e ares  atone  asig, khp [, iskip]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/atone.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#atone",
        "fct-type": "function",
        "title": "atone"
      },
      "index": {
        "description": "hi-pass filter whose transfer functions are the complements of the tone opcode ares atone asig khp iskip csound doc http www.csounds.com manual html atone.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "atone",
        "normalized": "Sig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:atonek",
      "description": {
        "fct-descr": "\u003cp\u003eA hi-pass filter whose transfer functions are the complements of the tonek opcode.\n\u003c/p\u003e\u003cpre\u003e kres  atonek  ksig, khp [, iskip]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/atonek.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#atonek",
        "fct-type": "function",
        "title": "atonek"
      },
      "index": {
        "description": "hi-pass filter whose transfer functions are the complements of the tonek opcode kres atonek ksig khp iskip csound doc http www.csounds.com manual html atonek.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "atonek",
        "normalized": "Sig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:atonex",
      "description": {
        "fct-descr": "\u003cp\u003eEmulates a stack of filters using the atone opcode.\n\u003c/p\u003e\u003cp\u003eatonex is equivalent to a filter consisting of more layers of atone with the same arguments, serially connected. Using a stack of a larger number of filters allows a sharper cutoff. They are faster than using a larger number instances in a Csound orchestra of the old opcodes, because only one initialization and k- cycle are needed at time and the audio loop falls entirely inside the cache memory of processor.\n\u003c/p\u003e\u003cpre\u003e ares  atonex  asig, khp [, inumlayer] [, iskip]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/atonex.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#atonex",
        "fct-type": "function",
        "title": "atonex"
      },
      "index": {
        "description": "Emulates stack of filters using the atone opcode atonex is equivalent to filter consisting of more layers of atone with the same arguments serially connected Using stack of larger number of filters allows sharper cutoff They are faster than using larger number instances in Csound orchestra of the old opcodes because only one initialization and cycle are needed at time and the audio loop falls entirely inside the cache memory of processor ares atonex asig khp inumlayer iskip csound doc http www.csounds.com manual html atonex.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "atonex",
        "normalized": "Sig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:babo",
      "description": {
        "fct-descr": "\u003cp\u003eA physical model reverberator.\n\u003c/p\u003e\u003cp\u003ebabo  stands  for  ball-within-the-box.   It is a physical model reverberator based on the paper by Davide  Rocchesso \u003ca\u003eThe  Ball  within  the Box: a sound-processing metaphor\u003c/a\u003e, Computer Music Journal,  Vol  19,  N.4,  pp.45-47,  Winter 1995.\n\u003c/p\u003e\u003cpre\u003e a1, a2  babo  asig, ksrcx, ksrcy, ksrcz, irx, iry, irz [, idiff] [, ifno]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/babo.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e D -\u003e D -\u003e D -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#babo",
        "fct-type": "function",
        "title": "babo"
      },
      "index": {
        "description": "physical model reverberator babo stands for ball-within-the-box It is physical model reverberator based on the paper by Davide Rocchesso The Ball within the Box sound-processing metaphor Computer Music Journal Vol N.4 pp.45-47 Winter a1 a2 babo asig ksrcx ksrcy ksrcz irx iry irz idiff ifno csound doc http www.csounds.com manual html babo.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "babo",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eD-\u003eD-\u003eD-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eD-\u003eD-\u003eD-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:balance",
      "description": {
        "fct-descr": "\u003cp\u003eAdjust one audio signal according to the values of another.\n\u003c/p\u003e\u003cp\u003eThe rms power of asig can be interrogated, set, or adjusted to match that of a comparator signal.\n\u003c/p\u003e\u003cpre\u003e ares  balance  asig, acomp [, ihp] [, iskip]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/balance.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#balance",
        "fct-type": "function",
        "title": "balance"
      },
      "index": {
        "description": "Adjust one audio signal according to the values of another The rms power of asig can be interrogated set or adjusted to match that of comparator signal ares balance asig acomp ihp iskip csound doc http www.csounds.com manual html balance.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "balance",
        "normalized": "Sig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:bformdec",
      "description": {
        "fct-descr": "\u003cp\u003eDeprecated. Decodes an ambisonic B format signal.\n\u003c/p\u003e\u003cp\u003eDecodes an ambisonic B format signal into loudspeaker specific signals. Note that this opcode is\n       deprecated as it is inaccurate, and is replaced by the much\n       better opcode bformdec1 which replicates all\n       the important features.\n\u003c/p\u003e\u003cpre\u003e ao1, ao2  bformdec  isetup, aw, ax, ay, az [, ar, as, at, au, av \\\n           [, abk, al, am, an, ao, ap, aq]]\n ao1, ao2, ao3, ao4  bformdec  isetup, aw, ax, ay, az [, ar, as, at, \\\n           au, av [, abk, al, am, an, ao, ap, aq]]\n ao1, ao2, ao3, ao4, ao5  bformdec  isetup, aw, ax, ay, az [, ar, as, \\\n           at, au, av [, abk, al, am, an, ao, ap, aq]]\n ao1, ao2, ao3, ao4, ao5, ao6, ao7, ao8  bformdec  isetup, aw, ax, ay, az \\\n           [, ar, as, at, au, av [, abk, al, am, an, ao, ap, aq]]]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/bformdec.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#bformdec",
        "fct-type": "function",
        "title": "bformdec"
      },
      "index": {
        "description": "Deprecated Decodes an ambisonic format signal Decodes an ambisonic format signal into loudspeaker specific signals Note that this opcode is deprecated as it is inaccurate and is replaced by the much better opcode bformdec1 which replicates all the important features ao1 ao2 bformdec isetup aw ax ay az ar as at au av abk al am an ao ap aq ao1 ao2 ao3 ao4 bformdec isetup aw ax ay az ar as at au av abk al am an ao ap aq ao1 ao2 ao3 ao4 ao5 bformdec isetup aw ax ay az ar as at au av abk al am an ao ap aq ao1 ao2 ao3 ao4 ao5 ao6 ao7 ao8 bformdec isetup aw ax ay az ar as at au av abk al am an ao ap aq csound doc http www.csounds.com manual html bformdec.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "bformdec",
        "normalized": "D-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:bformdec1",
      "description": {
        "fct-descr": "\u003cp\u003eDecodes an ambisonic B format signal\n\u003c/p\u003e\u003cp\u003eDecodes an ambisonic B format signal into loudspeaker specific signals.\n\u003c/p\u003e\u003cpre\u003e ao1, ao2  bformdec1  isetup, aw, ax, ay, az [, ar, as, at, au, av \\\n           [, abk, al, am, an, ao, ap, aq]]\n ao1, ao2, ao3, ao4  bformdec1  isetup, aw, ax, ay, az [, ar, as, at, \\\n           au, av [, abk, al, am, an, ao, ap, aq]]\n ao1, ao2, ao3, ao4, ao5  bformdec1  isetup, aw, ax, ay, az [, ar, as, \\\n           at, au, av [, abk, al, am, an, ao, ap, aq]]\n ao1, ao2, ao3, ao4, ao5, ao6, ao7, ao8  bformdec1  isetup, aw, ax, ay, az \\\n           [, ar, as, at, au, av [, abk, al, am, an, ao, ap, aq]]]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/bformdec1.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#bformdec1",
        "fct-type": "function",
        "title": "bformdec1"
      },
      "index": {
        "description": "Decodes an ambisonic format signal Decodes an ambisonic format signal into loudspeaker specific signals ao1 ao2 bformdec1 isetup aw ax ay az ar as at au av abk al am an ao ap aq ao1 ao2 ao3 ao4 bformdec1 isetup aw ax ay az ar as at au av abk al am an ao ap aq ao1 ao2 ao3 ao4 ao5 bformdec1 isetup aw ax ay az ar as at au av abk al am an ao ap aq ao1 ao2 ao3 ao4 ao5 ao6 ao7 ao8 bformdec1 isetup aw ax ay az ar as at au av abk al am an ao ap aq csound doc http www.csounds.com manual html bformdec1.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "bformdec1",
        "normalized": "D-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:bformenc",
      "description": {
        "fct-descr": "\u003cp\u003eDeprecated. Codes a signal into the ambisonic B format.\n\u003c/p\u003e\u003cp\u003eCodes a signal into the ambisonic B format. Note that this opcode is\n       deprecated as it is inaccurate, and is replaced by the much\n       better\n       opcode bformenc1\n       which replicates all the important features; also note that the\n       gain arguments are not available in bformenc1.\n\u003c/p\u003e\u003cpre\u003e aw, ax, ay, az  bformenc  asig, kalpha, kbeta, kord0, kord1\n aw, ax, ay, az, ar, as, at, au, av  bformenc  asig, kalpha, kbeta, \\\n           kord0, kord1 , kord2\n aw, ax, ay, az, ar, as, at, au, av, ak, al, am, an, ao, ap, aq  bformenc  \\\n           asig, kalpha, kbeta, kord0, kord1, kord2, kord3\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/bformenc.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#bformenc",
        "fct-type": "function",
        "title": "bformenc"
      },
      "index": {
        "description": "Deprecated Codes signal into the ambisonic format Codes signal into the ambisonic format Note that this opcode is deprecated as it is inaccurate and is replaced by the much better opcode bformenc1 which replicates all the important features also note that the gain arguments are not available in bformenc1 aw ax ay az bformenc asig kalpha kbeta kord0 kord1 aw ax ay az ar as at au av bformenc asig kalpha kbeta kord0 kord1 kord2 aw ax ay az ar as at au av ak al am an ao ap aq bformenc asig kalpha kbeta kord0 kord1 kord2 kord3 csound doc http www.csounds.com manual html bformenc.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "bformenc",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:bformenc1",
      "description": {
        "fct-descr": "\u003cp\u003eCodes a signal into the ambisonic B format.\n\u003c/p\u003e\u003cp\u003eCodes a signal into the ambisonic B format\n\u003c/p\u003e\u003cpre\u003e aw, ax, ay, az  bformenc1  asig, kalpha, kbeta\n aw, ax, ay, az, ar, as, at, au, av  bformenc1  asig, kalpha, kbeta\n aw, ax, ay, az, ar, as, at, au, av, ak, al, am, an, ao, ap, aq  bformenc1  \\\n           asig, kalpha, kbeta\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/bformenc1.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#bformenc1",
        "fct-type": "function",
        "title": "bformenc1"
      },
      "index": {
        "description": "Codes signal into the ambisonic format Codes signal into the ambisonic format aw ax ay az bformenc1 asig kalpha kbeta aw ax ay az ar as at au av bformenc1 asig kalpha kbeta aw ax ay az ar as at au av ak al am an ao ap aq bformenc1 asig kalpha kbeta csound doc http www.csounds.com manual html bformenc1.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "bformenc1",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:biquad",
      "description": {
        "fct-descr": "\u003cp\u003eA sweepable general purpose biquadratic digital filter.\n\u003c/p\u003e\u003cpre\u003e ares  biquad  asig, kb0, kb1, kb2, ka0, ka1, ka2 [, iskip]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/biquad.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#biquad",
        "fct-type": "function",
        "title": "biquad"
      },
      "index": {
        "description": "sweepable general purpose biquadratic digital filter ares biquad asig kb0 kb1 kb2 ka0 ka1 ka2 iskip csound doc http www.csounds.com manual html biquad.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "biquad",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:biquada",
      "description": {
        "fct-descr": "\u003cp\u003eA sweepable general purpose biquadratic digital filter with a-rate parameters.\n\u003c/p\u003e\u003cp\u003eA sweepable general purpose biquadratic digital filter.\n\u003c/p\u003e\u003cpre\u003e ares  biquada  asig, ab0, ab1, ab2, aa0, aa1, aa2 [, iskip]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/biquada.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#biquada",
        "fct-type": "function",
        "title": "biquada"
      },
      "index": {
        "description": "sweepable general purpose biquadratic digital filter with a-rate parameters sweepable general purpose biquadratic digital filter ares biquada asig ab0 ab1 ab2 aa0 aa1 aa2 iskip csound doc http www.csounds.com manual html biquada.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "biquada",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:bqrez",
      "description": {
        "fct-descr": "\u003cp\u003eA second-order multi-mode filter.\n\u003c/p\u003e\u003cpre\u003e ares  bqrez  asig, xfco, xres [, imode] [, iskip]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/bqrez.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#bqrez",
        "fct-type": "function",
        "title": "bqrez"
      },
      "index": {
        "description": "second-order multi-mode filter ares bqrez asig xfco xres imode iskip csound doc http www.csounds.com manual html bqrez.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "bqrez",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:butbp",
      "description": {
        "fct-descr": "\u003cp\u003eSame as the butterbp opcode.\n\u003c/p\u003e\u003cpre\u003e ares  butbp  asig, kfreq, kband [, iskip]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/butbp.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#butbp",
        "fct-type": "function",
        "title": "butbp"
      },
      "index": {
        "description": "Same as the butterbp opcode ares butbp asig kfreq kband iskip csound doc http www.csounds.com manual html butbp.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "butbp",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:butbr",
      "description": {
        "fct-descr": "\u003cp\u003eSame as the butterbr opcode.\n\u003c/p\u003e\u003cpre\u003e ares  butbr  asig, kfreq, kband [, iskip]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/butbr.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#butbr",
        "fct-type": "function",
        "title": "butbr"
      },
      "index": {
        "description": "Same as the butterbr opcode ares butbr asig kfreq kband iskip csound doc http www.csounds.com manual html butbr.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "butbr",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:buthp",
      "description": {
        "fct-descr": "\u003cp\u003eSame as the butterhp opcode.\n\u003c/p\u003e\u003cpre\u003e ares  buthp  asig, kfreq [, iskip]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/buthp.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#buthp",
        "fct-type": "function",
        "title": "buthp"
      },
      "index": {
        "description": "Same as the butterhp opcode ares buthp asig kfreq iskip csound doc http www.csounds.com manual html buthp.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "buthp",
        "normalized": "Sig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:butlp",
      "description": {
        "fct-descr": "\u003cp\u003eSame as the butterlp opcode.\n\u003c/p\u003e\u003cpre\u003e ares  butlp  asig, kfreq [, iskip]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/butlp.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#butlp",
        "fct-type": "function",
        "title": "butlp"
      },
      "index": {
        "description": "Same as the butterlp opcode ares butlp asig kfreq iskip csound doc http www.csounds.com manual html butlp.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "butlp",
        "normalized": "Sig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:butterbp",
      "description": {
        "fct-descr": "\u003cp\u003eA band-pass Butterworth filter.\n\u003c/p\u003e\u003cp\u003eImplementation of a second-order band-pass Butterworth filter. This opcode can also be written as butbp.\n\u003c/p\u003e\u003cpre\u003e ares  butterbp  asig, kfreq, kband [, iskip]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/butterbp.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#butterbp",
        "fct-type": "function",
        "title": "butterbp"
      },
      "index": {
        "description": "band-pass Butterworth filter Implementation of second-order band-pass Butterworth filter This opcode can also be written as butbp ares butterbp asig kfreq kband iskip csound doc http www.csounds.com manual html butterbp.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "butterbp",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:butterbr",
      "description": {
        "fct-descr": "\u003cp\u003eA band-reject Butterworth filter.\n\u003c/p\u003e\u003cp\u003eImplementation of a second-order band-reject Butterworth filter. This opcode can also be written as butbr.\n\u003c/p\u003e\u003cpre\u003e ares  butterbr  asig, kfreq, kband [, iskip]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/butterbr.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#butterbr",
        "fct-type": "function",
        "title": "butterbr"
      },
      "index": {
        "description": "band-reject Butterworth filter Implementation of second-order band-reject Butterworth filter This opcode can also be written as butbr ares butterbr asig kfreq kband iskip csound doc http www.csounds.com manual html butterbr.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "butterbr",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:butterhp",
      "description": {
        "fct-descr": "\u003cp\u003eA high-pass Butterworth filter.\n\u003c/p\u003e\u003cp\u003eImplementation of second-order high-pass Butterworth filter. This opcode can also be written as buthp.\n\u003c/p\u003e\u003cpre\u003e ares  butterhp  asig, kfreq [, iskip]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/butterhp.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#butterhp",
        "fct-type": "function",
        "title": "butterhp"
      },
      "index": {
        "description": "high-pass Butterworth filter Implementation of second-order high-pass Butterworth filter This opcode can also be written as buthp ares butterhp asig kfreq iskip csound doc http www.csounds.com manual html butterhp.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "butterhp",
        "normalized": "Sig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:butterlp",
      "description": {
        "fct-descr": "\u003cp\u003eA low-pass Butterworth filter.\n\u003c/p\u003e\u003cp\u003eImplementation of a second-order low-pass Butterworth filter. This opcode can also be written as butlp.\n\u003c/p\u003e\u003cpre\u003e ares  butterlp  asig, kfreq [, iskip]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/butterlp.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#butterlp",
        "fct-type": "function",
        "title": "butterlp"
      },
      "index": {
        "description": "low-pass Butterworth filter Implementation of second-order low-pass Butterworth filter This opcode can also be written as butlp ares butterlp asig kfreq iskip csound doc http www.csounds.com manual html butterlp.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "butterlp",
        "normalized": "Sig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:chebyshevpoly",
      "description": {
        "fct-descr": "\u003cp\u003eEfficiently evaluates the sum of Chebyshev polynomials of arbitrary order.\n\u003c/p\u003e\u003cp\u003eThe chebyshevpoly opcode calculates the value of a polynomial expression with a single a-rate input variable that is made up of a linear combination of the first N Chebyshev polynomials of the first kind.  Each Chebyshev polynomial, Tn(x), is weighted by a k-rate coefficient, kn, so that the opcode is calculating a sum of any number of terms in the form kn*Tn(x).  Thus, the chebyshevpoly opcode allows for the waveshaping of an audio signal with a dynamic transfer function that gives precise control over the harmonic content of the output.\n\u003c/p\u003e\u003cpre\u003e aout  chebyshevpoly  ain, k0 [, k1 [, k2 [...]]]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/chebyshevpoly.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e [Sig] -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#chebyshevpoly",
        "fct-type": "function",
        "title": "chebyshevpoly"
      },
      "index": {
        "description": "Efficiently evaluates the sum of Chebyshev polynomials of arbitrary order The chebyshevpoly opcode calculates the value of polynomial expression with single a-rate input variable that is made up of linear combination of the first Chebyshev polynomials of the first kind Each Chebyshev polynomial Tn is weighted by k-rate coefficient kn so that the opcode is calculating sum of any number of terms in the form kn Tn Thus the chebyshevpoly opcode allows for the waveshaping of an audio signal with dynamic transfer function that gives precise control over the harmonic content of the output aout chebyshevpoly ain k0 k1 k2 csound doc http www.csounds.com manual html chebyshevpoly.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "chebyshevpoly",
        "normalized": "Sig-\u003e[Sig]-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003e[Sig]-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:clfilt",
      "description": {
        "fct-descr": "\u003cp\u003eImplements low-pass and high-pass filters of different styles.\n\u003c/p\u003e\u003cp\u003eImplements the classical standard analog filter types: low-pass and high-pass. They are implemented with the four classical kinds of filters: Butterworth, Chebyshev Type I, Chebyshev Type II, and Elliptical.  The number of poles may be any even number from 2 to 80.\n\u003c/p\u003e\u003cpre\u003e ares  clfilt  asig, kfreq, itype, inpol [, ikind] [, ipbr] [, isba] [, iskip]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/clfilt.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#clfilt",
        "fct-type": "function",
        "title": "clfilt"
      },
      "index": {
        "description": "Implements low-pass and high-pass filters of different styles Implements the classical standard analog filter types low-pass and high-pass They are implemented with the four classical kinds of filters Butterworth Chebyshev Type Chebyshev Type II and Elliptical The number of poles may be any even number from to ares clfilt asig kfreq itype inpol ikind ipbr isba iskip csound doc http www.csounds.com manual html clfilt.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "clfilt",
        "normalized": "Sig-\u003eSig-\u003eD-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eD-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:clip",
      "description": {
        "fct-descr": "\u003cp\u003eClips a signal to a predefined limit.\n\u003c/p\u003e\u003cp\u003eClips an a-rate signal to a predefined limit, in a &#226;&#128;&#156;soft&#226;&#128;&#157; manner, using one of three metho\u003c/p\u003e\u003cpre\u003e ares  clip  asig, imeth, ilimit [, iarg]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/clip.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#clip",
        "fct-type": "function",
        "title": "clip"
      },
      "index": {
        "description": "Clips signal to predefined limit Clips an a-rate signal to predefined limit in soft manner using one of three metho ares clip asig imeth ilimit iarg csound doc http www.csounds.com manual html clip.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "clip",
        "normalized": "Sig-\u003eD-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eD-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:comb",
      "description": {
        "fct-descr": "\u003cp\u003eReverberates an input signal with a &#226;&#128;&#156;colored&#226;&#128;&#157; frequency respon\u003c/p\u003e\u003cpre\u003e ares  comb  asig, krvt, ilpt [, iskip] [, insmps]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/comb.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#comb",
        "fct-type": "function",
        "title": "comb"
      },
      "index": {
        "description": "Reverberates an input signal with colored frequency respon ares comb asig krvt ilpt iskip insmps csound doc http www.csounds.com manual html comb.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "comb",
        "normalized": "Sig-\u003eSig-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:combinv",
      "description": {
        "fct-descr": "\u003cp\u003eReverberates an input signal with a &#226;&#128;&#156;colored&#226;&#128;&#157; frequency respon\u003c/p\u003e\u003cp\u003eReverberates an input signal with a &#226;&#128;&#156;colored       frequency response with a FIR filter.\n\u003c/p\u003e\u003cpre\u003e ares  combinv  asig, krvt, ilpt [, iskip] [, insmps]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/combinv.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#combinv",
        "fct-type": "function",
        "title": "combinv"
      },
      "index": {
        "description": "Reverberates an input signal with colored frequency respon Reverberates an input signal with colored frequency response with FIR filter ares combinv asig krvt ilpt iskip insmps csound doc http www.csounds.com manual html combinv.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "combinv",
        "normalized": "Sig-\u003eSig-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:compress",
      "description": {
        "fct-descr": "\u003cp\u003eCompress, limit, expand, duck or gate an audio signal.\n\u003c/p\u003e\u003cp\u003eThis unit functions as an audio\n     compressor, limiter, expander, or noise gate, using either\n     soft-knee or hard-knee mapping, and with dynamically variable\n     performance characteristics.  It takes two audio input signals,\n     aasig and acsig, the first of which is modified by a running\n     analysis of the second. Both signals can be the same, or the first\n     can be modified by a different controlling signal.\n\u003c/p\u003e\u003cpre\u003e ar  compress  aasig, acsig, kthresh, kloknee, khiknee, kratio, katt, krel, ilook\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/compress.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#compress",
        "fct-type": "function",
        "title": "compress"
      },
      "index": {
        "description": "Compress limit expand duck or gate an audio signal This unit functions as an audio compressor limiter expander or noise gate using either soft-knee or hard-knee mapping and with dynamically variable performance characteristics It takes two audio input signals aasig and acsig the first of which is modified by running analysis of the second Both signals can be the same or the first can be modified by different controlling signal ar compress aasig acsig kthresh kloknee khiknee kratio katt krel ilook csound doc http www.csounds.com manual html compress.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "compress",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:convolve",
      "description": {
        "fct-descr": "\u003cp\u003eConvolves a signal and an impulse response.\n\u003c/p\u003e\u003cp\u003eOutput is the convolution of signal ain and the impulse response contained in ifilcod. If more than one output signal is supplied, each will be convolved with the same impulse response. Note that it is considerably more efficient to use one instance of the operator when processing a mono input to create stereo, or quad, outputs.\n\u003c/p\u003e\u003cpre\u003e ar1 [, ar2] [, ar3] [, ar4]  convolve  ain, ifilcod [, ichannel]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/convolve.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Str -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#convolve",
        "fct-type": "function",
        "title": "convolve"
      },
      "index": {
        "description": "Convolves signal and an impulse response Output is the convolution of signal ain and the impulse response contained in ifilcod If more than one output signal is supplied each will be convolved with the same impulse response Note that it is considerably more efficient to use one instance of the operator when processing mono input to create stereo or quad outputs ar1 ar2 ar3 ar4 convolve ain ifilcod ichannel csound doc http www.csounds.com manual html convolve.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "convolve",
        "normalized": "Sig-\u003eStr-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eStr-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:cross2",
      "description": {
        "fct-descr": "\u003cp\u003eCross synthesis using FFT's.\n\u003c/p\u003e\u003cp\u003eThis is an implementation of cross synthesis using FFT's.\n\u003c/p\u003e\u003cpre\u003e ares  cross2  ain1, ain2, isize, ioverlap, iwin, kbias\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/cross2.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e D -\u003e D -\u003e D -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#cross2",
        "fct-type": "function",
        "title": "cross2"
      },
      "index": {
        "description": "Cross synthesis using FFT This is an implementation of cross synthesis using FFT ares cross2 ain1 ain2 isize ioverlap iwin kbias csound doc http www.csounds.com manual html cross2.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "cross2",
        "normalized": "Sig-\u003eSig-\u003eD-\u003eD-\u003eD-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eD-\u003eD-\u003eD-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:dam",
      "description": {
        "fct-descr": "\u003cp\u003eA dynamic compressor/expander.\n\u003c/p\u003e\u003cp\u003eThis opcode dynamically modifies a gain value applied to the input sound ain by comparing its power level to a given threshold level. The signal will be compressed/expanded with different factors regarding that it is over or under the threshold.\n\u003c/p\u003e\u003cpre\u003e ares  dam  asig, kthreshold, icomp1, icomp2, irtime, iftime\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/dam.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e D -\u003e D -\u003e D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#dam",
        "fct-type": "function",
        "title": "dam"
      },
      "index": {
        "description": "dynamic compressor expander This opcode dynamically modifies gain value applied to the input sound ain by comparing its power level to given threshold level The signal will be compressed expanded with different factors regarding that it is over or under the threshold ares dam asig kthreshold icomp1 icomp2 irtime iftime csound doc http www.csounds.com manual html dam.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "dam",
        "normalized": "Sig-\u003eSig-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:dcblock",
      "description": {
        "fct-descr": "\u003cp\u003eA DC blocking filter.\n\u003c/p\u003e\u003cp\u003eImplements the DC blocking filter\n\u003c/p\u003e\u003cpre\u003e ares  dcblock  ain [, igain]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/dcblock.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#dcblock",
        "fct-type": "function",
        "title": "dcblock"
      },
      "index": {
        "description": "DC blocking filter Implements the DC blocking filter ares dcblock ain igain csound doc http www.csounds.com manual html dcblock.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "dcblock",
        "normalized": "Sig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:dcblock2",
      "description": {
        "fct-descr": "\u003cp\u003eA DC blocking filter.\n\u003c/p\u003e\u003cp\u003eImplements a DC blocking filter with improved DC attenuation.\n\u003c/p\u003e\u003cpre\u003e ares  dcblock2  ain [, iorder] [, iskip]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/dcblock2.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#dcblock2",
        "fct-type": "function",
        "title": "dcblock2"
      },
      "index": {
        "description": "DC blocking filter Implements DC blocking filter with improved DC attenuation ares dcblock2 ain iorder iskip csound doc http www.csounds.com manual html dcblock2.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "dcblock2",
        "normalized": "Sig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:dconv",
      "description": {
        "fct-descr": "\u003cp\u003eA direct convolution opcode.\n\u003c/p\u003e\u003cpre\u003e ares  dconv  asig, isize, ifn\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/dconv.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e D -\u003e Tab -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#dconv",
        "fct-type": "function",
        "title": "dconv"
      },
      "index": {
        "description": "direct convolution opcode ares dconv asig isize ifn csound doc http www.csounds.com manual html dconv.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "dconv",
        "normalized": "Sig-\u003eD-\u003eTab-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eD-\u003eTab-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:delay",
      "description": {
        "fct-descr": "\u003cp\u003eDelays an input signal by some time interval.\n\u003c/p\u003e\u003cp\u003eA signal can be read from or written into a delay path, or it can be automatically delayed by some time interval.\n\u003c/p\u003e\u003cpre\u003e ares  delay  asig, idlt [, iskip]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/delay.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#delay",
        "fct-type": "function",
        "title": "delay"
      },
      "index": {
        "description": "Delays an input signal by some time interval signal can be read from or written into delay path or it can be automatically delayed by some time interval ares delay asig idlt iskip csound doc http www.csounds.com manual html delay.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "delay",
        "normalized": "Sig-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:delay1",
      "description": {
        "fct-descr": "\u003cp\u003eDelays an input signal by one sample.\n\u003c/p\u003e\u003cpre\u003e ares  delay1  asig [, iskip]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/delay1.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#delay1",
        "fct-type": "function",
        "title": "delay1"
      },
      "index": {
        "description": "Delays an input signal by one sample ares delay1 asig iskip csound doc http www.csounds.com manual html delay1.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "delay1",
        "normalized": "Sig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:delayk",
      "description": {
        "fct-descr": "\u003cp\u003eDelays an input signal by some time interval.\n\u003c/p\u003e\u003cp\u003ek-rate delay opcodes\n\u003c/p\u003e\u003cpre\u003e kr  delayk   ksig, idel[, imode]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/delayk.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#delayk",
        "fct-type": "function",
        "title": "delayk"
      },
      "index": {
        "description": "Delays an input signal by some time interval k-rate delay opcodes kr delayk ksig idel imode csound doc http www.csounds.com manual html delayk.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "delayk",
        "normalized": "Sig-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:delayr",
      "description": {
        "fct-descr": "\u003cp\u003eReads from an automatically established digital delay line.\n\u003c/p\u003e\u003cpre\u003e ares  delayr  idlt [, iskip]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/delayr.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e SE Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#delayr",
        "fct-type": "function",
        "title": "delayr"
      },
      "index": {
        "description": "Reads from an automatically established digital delay line ares delayr idlt iskip csound doc http www.csounds.com manual html delayr.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "delayr",
        "normalized": "D-\u003eSE Sig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eSE Sig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:delayw",
      "description": {
        "fct-descr": "\u003cp\u003eWrites the audio signal to a digital delay line.\n\u003c/p\u003e\u003cpre\u003e  delayw  asig\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/delayw.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#delayw",
        "fct-type": "function",
        "title": "delayw"
      },
      "index": {
        "description": "Writes the audio signal to digital delay line delayw asig csound doc http www.csounds.com manual html delayw.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "delayw",
        "normalized": "Sig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:deltap",
      "description": {
        "fct-descr": "\u003cp\u003eTaps a delay line at variable offset times.\n\u003c/p\u003e\u003cp\u003eTap a delay line at variable offset times.\n\u003c/p\u003e\u003cpre\u003e ares  deltap  kdlt\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/deltap.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e SE Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#deltap",
        "fct-type": "function",
        "title": "deltap"
      },
      "index": {
        "description": "Taps delay line at variable offset times Tap delay line at variable offset times ares deltap kdlt csound doc http www.csounds.com manual html deltap.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "deltap",
        "normalized": "Sig-\u003eSE Sig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSE Sig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:deltap3",
      "description": {
        "fct-descr": "\u003cp\u003eTaps a delay line at variable offset times, uses cubic interpolation.\n\u003c/p\u003e\u003cpre\u003e ares  deltap3  xdlt\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/deltap3.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e SE Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#deltap3",
        "fct-type": "function",
        "title": "deltap3"
      },
      "index": {
        "description": "Taps delay line at variable offset times uses cubic interpolation ares deltap3 xdlt csound doc http www.csounds.com manual html deltap3.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "deltap3",
        "normalized": "Sig-\u003eSE Sig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSE Sig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:deltapi",
      "description": {
        "fct-descr": "\u003cp\u003eTaps a delay line at variable offset times, uses interpolation.\n\u003c/p\u003e\u003cpre\u003e ares  deltapi  xdlt\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/deltapi.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e SE Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#deltapi",
        "fct-type": "function",
        "title": "deltapi"
      },
      "index": {
        "description": "Taps delay line at variable offset times uses interpolation ares deltapi xdlt csound doc http www.csounds.com manual html deltapi.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "deltapi",
        "normalized": "Sig-\u003eSE Sig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSE Sig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:deltapn",
      "description": {
        "fct-descr": "\u003cp\u003eTaps a delay line at variable offset times.\n\u003c/p\u003e\u003cp\u003eTap a delay line at variable offset times.\n\u003c/p\u003e\u003cpre\u003e ares  deltapn  xnumsamps\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/deltapn.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#deltapn",
        "fct-type": "function",
        "title": "deltapn"
      },
      "index": {
        "description": "Taps delay line at variable offset times Tap delay line at variable offset times ares deltapn xnumsamps csound doc http www.csounds.com manual html deltapn.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "deltapn",
        "normalized": "Sig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:deltapx",
      "description": {
        "fct-descr": "\u003cp\u003eRead from or write to a delay line with interpolation.\n\u003c/p\u003e\u003cp\u003edeltapx is similar to deltapi or deltap3. However, it allows higher quality interpolation. This opcode can read from and write to a delayr/delayw delay line with interpolation.\n\u003c/p\u003e\u003cpre\u003e aout  deltapx  adel, iwsize\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/deltapx.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e D -\u003e SE Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#deltapx",
        "fct-type": "function",
        "title": "deltapx"
      },
      "index": {
        "description": "Read from or write to delay line with interpolation deltapx is similar to deltapi or deltap3 However it allows higher quality interpolation This opcode can read from and write to delayr delayw delay line with interpolation aout deltapx adel iwsize csound doc http www.csounds.com manual html deltapx.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "deltapx",
        "normalized": "Sig-\u003eD-\u003eSE Sig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eD-\u003eSE Sig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:deltapxw",
      "description": {
        "fct-descr": "\u003cp\u003eMixes the input signal to a delay line.\n\u003c/p\u003e\u003cp\u003edeltapxw mixes the input signal to a delay line. This opcode can be mixed with reading units (deltap, deltapn, deltapi, deltap3, and deltapx) in any order; the actual delay time is the difference of the read and write time. This opcode can read from and write to a delayr/delayw delay line with interpolation.\n\u003c/p\u003e\u003cpre\u003e  deltapxw  ain, adel, iwsize\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/deltapxw.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#deltapxw",
        "fct-type": "function",
        "title": "deltapxw"
      },
      "index": {
        "description": "Mixes the input signal to delay line deltapxw mixes the input signal to delay line This opcode can be mixed with reading units deltap deltapn deltapi deltap3 and deltapx in any order the actual delay time is the difference of the read and write time This opcode can read from and write to delayr delayw delay line with interpolation deltapxw ain adel iwsize csound doc http www.csounds.com manual html deltapxw.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "deltapxw",
        "normalized": "Sig-\u003eSig-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:denorm",
      "description": {
        "fct-descr": "\u003cp\u003eMixes low level noise to a list of a-rate signals\n\u003c/p\u003e\u003cp\u003eMixes low level (~1e-20 for floats, and ~1e-56 for doubles)\n     \tnoise to a list of a-rate signals. Can be used before IIR\n     \tfilters and reverbs to avoid denormalized numbers which may\n     \totherwise result in significantly increased CPU usage.\n\u003c/p\u003e\u003cpre\u003e  denorm  a1[, a2[, a3[, ... ]]]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/denorm.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "[Sig] -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#denorm",
        "fct-type": "function",
        "title": "denorm"
      },
      "index": {
        "description": "Mixes low level noise to list of a-rate signals Mixes low level e-20 for floats and e-56 for doubles noise to list of a-rate signals Can be used before IIR filters and reverbs to avoid denormalized numbers which may otherwise result in significantly increased CPU usage denorm a1 a2 a3 csound doc http www.csounds.com manual html denorm.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "denorm",
        "normalized": "[Sig]-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "[Sig]-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:diff",
      "description": {
        "fct-descr": "\u003cp\u003eModify a signal by differentiation.\n\u003c/p\u003e\u003cpre\u003e ares  diff  asig [, iskip]\n kres  diff  ksig [, iskip]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/diff.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#diff",
        "fct-type": "function",
        "title": "diff"
      },
      "index": {
        "description": "Modify signal by differentiation ares diff asig iskip kres diff ksig iskip csound doc http www.csounds.com manual html diff.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "diff",
        "normalized": "Sig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:distort",
      "description": {
        "fct-descr": "\u003cp\u003eDistort an audio signal via waveshaping and optional clipping.\n\u003c/p\u003e\u003cpre\u003e ar  distort  asig, kdist, ifn[, ihp, istor]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/distort.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Tab -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#distort",
        "fct-type": "function",
        "title": "distort"
      },
      "index": {
        "description": "Distort an audio signal via waveshaping and optional clipping ar distort asig kdist ifn ihp istor csound doc http www.csounds.com manual html distort.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "distort",
        "normalized": "Sig-\u003eSig-\u003eTab-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eTab-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:distort1",
      "description": {
        "fct-descr": "\u003cp\u003eModified hyperbolic tangent distortion.\n\u003c/p\u003e\u003cp\u003eImplementation of modified hyperbolic tangent distortion. distort1 can be used to generate wave shaping distortion based on a modification of the tanh function.\n\u003c/p\u003e\u003cpre\u003e ares  distort1  asig, kpregain, kpostgain, kshape1, kshape2[, imode]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/distort1.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#distort1",
        "fct-type": "function",
        "title": "distort1"
      },
      "index": {
        "description": "Modified hyperbolic tangent distortion Implementation of modified hyperbolic tangent distortion distort1 can be used to generate wave shaping distortion based on modification of the tanh function ares distort1 asig kpregain kpostgain kshape1 kshape2 imode csound doc http www.csounds.com manual html distort1.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "distort1",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:doppler",
      "description": {
        "fct-descr": "\u003cp\u003eA fast and robust method for approximating sound propagation, achieving convincing Doppler shifts without having to solve equations.\n\u003c/p\u003e\u003cp\u003eA fast and robust method for approximating sound propagation, achieving convincing Doppler shifts without having to solve equations. The method computes frequency shifts based on reading an input delay line at a delay time computed from the distance between source and mic and the speed of sound. One instance of the opcode is required for each dimension of space through which the sound source moves. If the source sound moves at a constant speed from in front of the microphone, through the microphone, to behind the microphone, then the output will be frequency shifted above the source frequency at a constant frequency while the source approaches, then discontinuously will be shifted below the source frequency at a constant frequency as the source recedes from the microphone. If the source sound moves at a constant speed through a point to one side of the microphone, then the rate of change of position will not be constant, and the familiar Doppler frequency shift typical of a siren or engine approaching and receding along a road beside a listener will be heard.\n\u003c/p\u003e\u003cpre\u003e ashifted  doppler  asource, ksourceposition, kmicposition [, isoundspeed, ifiltercutoff]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/doppler.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#doppler",
        "fct-type": "function",
        "title": "doppler"
      },
      "index": {
        "description": "fast and robust method for approximating sound propagation achieving convincing Doppler shifts without having to solve equations fast and robust method for approximating sound propagation achieving convincing Doppler shifts without having to solve equations The method computes frequency shifts based on reading an input delay line at delay time computed from the distance between source and mic and the speed of sound One instance of the opcode is required for each dimension of space through which the sound source moves If the source sound moves at constant speed from in front of the microphone through the microphone to behind the microphone then the output will be frequency shifted above the source frequency at constant frequency while the source approaches then discontinuously will be shifted below the source frequency at constant frequency as the source recedes from the microphone If the source sound moves at constant speed through point to one side of the microphone then the rate of change of position will not be constant and the familiar Doppler frequency shift typical of siren or engine approaching and receding along road beside listener will be heard ashifted doppler asource ksourceposition kmicposition isoundspeed ifiltercutoff csound doc http www.csounds.com manual html doppler.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "doppler",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:downsamp",
      "description": {
        "fct-descr": "\u003cp\u003eModify a signal by down-sampling.\n\u003c/p\u003e\u003cpre\u003e kres  downsamp  asig [, iwlen]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/downsamp.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#downsamp",
        "fct-type": "function",
        "title": "downsamp"
      },
      "index": {
        "description": "Modify signal by down-sampling kres downsamp asig iwlen csound doc http www.csounds.com manual html downsamp.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "downsamp",
        "normalized": "Sig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:eqfil",
      "description": {
        "fct-descr": "\u003cp\u003eEqualizer filter\n\u003c/p\u003e\u003cp\u003eThe opcode eqfil is a 2nd order tunable equalisation filter based on Regalia and Mitra\n       design (\u003ca\u003eTunable Digital Frequency Response Equalization Filters\u003c/a\u003e, IEEE Trans.\n       on Ac., Sp. and Sig Proc., 35 (1), 1987). It provides a peak/notch filter for\n       building parametric/graphic equalisers.\n\u003c/p\u003e\u003cpre\u003e asig  eqfil  ain, kcf, kbw, kgain[, istor]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/eqfil.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#eqfil",
        "fct-type": "function",
        "title": "eqfil"
      },
      "index": {
        "description": "Equalizer filter The opcode eqfil is nd order tunable equalisation filter based on Regalia and Mitra design Tunable Digital Frequency Response Equalization Filters IEEE Trans on Ac Sp and Sig Proc It provides peak notch filter for building parametric graphic equalisers asig eqfil ain kcf kbw kgain istor csound doc http www.csounds.com manual html eqfil.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "eqfil",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:filter2",
      "description": {
        "fct-descr": "\u003cp\u003ePerforms filtering using a transposed form-II digital filter lattice with no time-varying control.\n\u003c/p\u003e\u003cp\u003eGeneral purpose custom filter with no time-varying pole control. The filter coefficients implement the following difference equation:\n\u003c/p\u003e\u003cpre\u003e ares  filter2  asig, iM, iN, ib0, ib1, ..., ibM, ia1, ia2, ..., iaN\n kres  filter2  ksig, iM, iN, ib0, ib1, ..., ibM, ia1, ia2, ..., iaN\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/filter2.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e D -\u003e D -\u003e [D] -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#filter2",
        "fct-type": "function",
        "title": "filter2"
      },
      "index": {
        "description": "Performs filtering using transposed form-II digital filter lattice with no time-varying control General purpose custom filter with no time-varying pole control The filter coefficients implement the following difference equation ares filter2 asig iM iN ib0 ib1 ibM ia1 ia2 iaN kres filter2 ksig iM iN ib0 ib1 ibM ia1 ia2 iaN csound doc http www.csounds.com manual html filter2.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "filter2",
        "normalized": "Sig-\u003eD-\u003eD-\u003e[D]-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eD-\u003eD-\u003e[D]-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:flanger",
      "description": {
        "fct-descr": "\u003cp\u003eA user controlled flanger.\n\u003c/p\u003e\u003cpre\u003e ares  flanger  asig, adel, kfeedback [, imaxd]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/flanger.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#flanger",
        "fct-type": "function",
        "title": "flanger"
      },
      "index": {
        "description": "user controlled flanger ares flanger asig adel kfeedback imaxd csound doc http www.csounds.com manual html flanger.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "flanger",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:fofilter",
      "description": {
        "fct-descr": "\u003cp\u003eFormant filter.\n\u003c/p\u003e\u003cp\u003eFofilter generates a stream of overlapping sinewave grains, when fed with \n a pulse train. Each grain is the impulse response of a combination of \n two BP filters. The grains are defined by their attack time (determining \n the skirtwidth of the formant region at -60dB) and decay time \n (-6dB bandwidth). Overlapping will occur when 1/freq \u003c decay, but, \n unlike FOF, there is no upper limit on the number of overlaps. \n The original idea for this opcode came from J McCartney's formlet class \n in SuperCollider, but this is possibly implemented differently(?).\n\u003c/p\u003e\u003cpre\u003e asig  fofilter  ain, kcf, kris, kdec[, istor]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/fofilter.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#fofilter",
        "fct-type": "function",
        "title": "fofilter"
      },
      "index": {
        "description": "Formant filter Fofilter generates stream of overlapping sinewave grains when fed with pulse train Each grain is the impulse response of combination of two BP filters The grains are defined by their attack time determining the skirtwidth of the formant region at dB and decay time dB bandwidth Overlapping will occur when freq decay but unlike FOF there is no upper limit on the number of overlaps The original idea for this opcode came from McCartney formlet class in SuperCollider but this is possibly implemented differently asig fofilter ain kcf kris kdec istor csound doc http www.csounds.com manual html fofilter.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "fofilter",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:fold",
      "description": {
        "fct-descr": "\u003cp\u003eAdds artificial foldover to an audio signal.\n\u003c/p\u003e\u003cpre\u003e ares  fold  asig, kincr\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/fold.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#fold",
        "fct-type": "function",
        "title": "fold"
      },
      "index": {
        "description": "Adds artificial foldover to an audio signal ares fold asig kincr csound doc http www.csounds.com manual html fold.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "fold",
        "normalized": "Sig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:freeverb",
      "description": {
        "fct-descr": "\u003cp\u003eOpcode version of Jezar's Freeverb\n\u003c/p\u003e\u003cp\u003efreeverb is a stereo reverb unit based on Jezar's public domain\n \t\tC++ sources, composed of eight parallel comb filters on both\n \t\tchannels, followed by four allpass units in series. The filters\n \t\ton the right channel are slightly detuned compared to the left\n \t\tchannel in order to create a stereo effect.\n\u003c/p\u003e\u003cpre\u003e aoutL, aoutR  freeverb  ainL, ainR, kRoomSize, kHFDamp[, iSRate[, iSkip]] \n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/freeverb.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#freeverb",
        "fct-type": "function",
        "title": "freeverb"
      },
      "index": {
        "description": "Opcode version of Jezar Freeverb freeverb is stereo reverb unit based on Jezar public domain sources composed of eight parallel comb filters on both channels followed by four allpass units in series The filters on the right channel are slightly detuned compared to the left channel in order to create stereo effect aoutL aoutR freeverb ainL ainR kRoomSize kHFDamp iSRate iSkip csound doc http www.csounds.com manual html freeverb.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "freeverb",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:ftconv",
      "description": {
        "fct-descr": "\u003cp\u003eLow latency multichannel convolution, using a function table as impulse\n \tresponse source.\n\u003c/p\u003e\u003cp\u003eLow latency multichannel convolution, using a function table as impulse\n \tresponse source. The algorithm is to split the impulse response to\n \tpartitions of length determined by the iplen parameter, and delay and\n \tmix partitions so that the original, full length impulse response is\n \treconstructed without gaps. The output delay (latency) is iplen samples,\n \tand does not depend on the control rate, unlike in the case of other\n \tconvolve opcodes.\n\u003c/p\u003e\u003cpre\u003e a1[, a2[, a3[, ... a8]]]  ftconv  ain, ift, iplen[, iskipsamples \\\n           [, iirlen[, iskipinit]]]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/ftconv.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e D -\u003e D -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#ftconv",
        "fct-type": "function",
        "title": "ftconv"
      },
      "index": {
        "description": "Low latency multichannel convolution using function table as impulse response source Low latency multichannel convolution using function table as impulse response source The algorithm is to split the impulse response to partitions of length determined by the iplen parameter and delay and mix partitions so that the original full length impulse response is reconstructed without gaps The output delay latency is iplen samples and does not depend on the control rate unlike in the case of other convolve opcodes a1 a2 a3 a8 ftconv ain ift iplen iskipsamples iirlen iskipinit csound doc http www.csounds.com manual html ftconv.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "ftconv",
        "normalized": "Sig-\u003eD-\u003eD-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eD-\u003eD-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:ftmorf",
      "description": {
        "fct-descr": "\u003cp\u003eMorphs between multiple ftables as specified in a list.\n\u003c/p\u003e\u003cp\u003eUses an index into a table of ftable numbers to morph between adjacent tables in the list.This morphed function is written into the table referenced by iresfn on every k-cycle.\n\u003c/p\u003e\u003cpre\u003e  ftmorf  kftndx, iftfn, iresfn\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/ftmorf.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Tab -\u003e Tab -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#ftmorf",
        "fct-type": "function",
        "title": "ftmorf"
      },
      "index": {
        "description": "Morphs between multiple ftables as specified in list Uses an index into table of ftable numbers to morph between adjacent tables in the list.This morphed function is written into the table referenced by iresfn on every k-cycle ftmorf kftndx iftfn iresfn csound doc http www.csounds.com manual html ftmorf.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "ftmorf",
        "normalized": "Sig-\u003eTab-\u003eTab-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eTab-\u003eTab-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:gain",
      "description": {
        "fct-descr": "\u003cp\u003eAdjusts the amplitude audio signal according to a root-mean-square value.\n\u003c/p\u003e\u003cpre\u003e ares  gain  asig, krms [, ihp] [, iskip]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/gain.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#gain",
        "fct-type": "function",
        "title": "gain"
      },
      "index": {
        "description": "Adjusts the amplitude audio signal according to root-mean-square value ares gain asig krms ihp iskip csound doc http www.csounds.com manual html gain.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "gain",
        "normalized": "Sig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:harmon",
      "description": {
        "fct-descr": "\u003cp\u003eAnalyze an audio input and generate harmonizing voices in synchrony.\n\u003c/p\u003e\u003cpre\u003e ares  harmon  asig, kestfrq, kmaxvar, kgenfreq1, kgenfreq2, imode, \\\n           iminfrq, iprd\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/harmon.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e D -\u003e D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#harmon",
        "fct-type": "function",
        "title": "harmon"
      },
      "index": {
        "description": "Analyze an audio input and generate harmonizing voices in synchrony ares harmon asig kestfrq kmaxvar kgenfreq1 kgenfreq2 imode iminfrq iprd csound doc http www.csounds.com manual html harmon.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "harmon",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eD-\u003eD-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eD-\u003eD-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:harmon2",
      "description": {
        "fct-descr": "\u003cp\u003eAnalyze an audio input and generate harmonizing voices in\n       synchrony with formants preserved.\n\u003c/p\u003e\u003cp\u003eGenerate harmonizing voices with formants preserved.\n\u003c/p\u003e\u003cpre\u003e ares  harmon2  asig, koct, kfrq1, kfrq2, icpsmode, ilowest[, ipolarity]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/harmon2.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#harmon2",
        "fct-type": "function",
        "title": "harmon2"
      },
      "index": {
        "description": "Analyze an audio input and generate harmonizing voices in synchrony with formants preserved Generate harmonizing voices with formants preserved ares harmon2 asig koct kfrq1 kfrq2 icpsmode ilowest ipolarity csound doc http www.csounds.com manual html harmon2.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "harmon2",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eD-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eD-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:harmon3",
      "description": {
        "fct-descr": "\u003cp\u003eAnalyze an audio input and generate harmonizing voices in\n       synchrony with formants preserved.\n\u003c/p\u003e\u003cp\u003eGenerate harmonizing voices with formants preserved.\n\u003c/p\u003e\u003cpre\u003e ares  harmon3  asig, koct, kfrq1, \\\n         kfrq2, kfrq3, icpsmode, ilowest[, ipolarity]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/harmon2.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#harmon3",
        "fct-type": "function",
        "title": "harmon3"
      },
      "index": {
        "description": "Analyze an audio input and generate harmonizing voices in synchrony with formants preserved Generate harmonizing voices with formants preserved ares harmon3 asig koct kfrq1 kfrq2 kfrq3 icpsmode ilowest ipolarity csound doc http www.csounds.com manual html harmon2.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "harmon3",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eD-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eD-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:harmon4",
      "description": {
        "fct-descr": "\u003cp\u003eAnalyze an audio input and generate harmonizing voices in\n       synchrony with formants preserved.\n\u003c/p\u003e\u003cp\u003eGenerate harmonizing voices with formants preserved.\n\u003c/p\u003e\u003cpre\u003e ares  harmon4  asig, koct, kfrq1, \\\n         kfrq2, kfrq3, kfrq4, icpsmode, ilowest[, ipolarity]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/harmon2.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#harmon4",
        "fct-type": "function",
        "title": "harmon4"
      },
      "index": {
        "description": "Analyze an audio input and generate harmonizing voices in synchrony with formants preserved Generate harmonizing voices with formants preserved ares harmon4 asig koct kfrq1 kfrq2 kfrq3 kfrq4 icpsmode ilowest ipolarity csound doc http www.csounds.com manual html harmon2.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "harmon4",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eD-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eD-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:hilbert",
      "description": {
        "fct-descr": "\u003cp\u003eA Hilbert transformer.\n\u003c/p\u003e\u003cp\u003eAn IIR implementation of a Hilbert transformer.\n\u003c/p\u003e\u003cpre\u003e ar1, ar2  hilbert  asig\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/hilbert.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#hilbert",
        "fct-type": "function",
        "title": "hilbert"
      },
      "index": {
        "description": "Hilbert transformer An IIR implementation of Hilbert transformer ar1 ar2 hilbert asig csound doc http www.csounds.com manual html hilbert.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "hilbert",
        "normalized": "Sig-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:hrtfearly",
      "description": {
        "fct-descr": "\u003cp\u003eGenerates 3D binaural audio with high-fidelity early reflections in a parametric room using a Phase Truncation algorithm.\n\u003c/p\u003e\u003cp\u003eThis opcode essentially nests the hrtfmove opcode in an image model for a user-definable shoebox-shaped room. A default room can be selected, or advanced room parameters can be used. Room surfaces can be controlled with high and low-frequency absorption coefficients and gain factors of a three-band equaliser.\n\u003c/p\u003e\u003cpre\u003e aleft, aright, irt60low, irt60high, imfp  hrtfearly  asrc, ksrcx, ksrcy, ksrcz, klstnrx, klstnry, klstnrz, \\\n           ifilel, ifiler, idefroom [,ifade, isr, iorder, ithreed, kheadrot, iroomx, iroomy, iroomz, iwallhigh, \\\n           iwalllow, iwallgain1, iwallgain2, iwallgain3, ifloorhigh, ifloorlow, ifloorgain1, ifloorgain2, \\\n           ifloorgain3, iceilinghigh, iceilinglow, iceilinggain1, iceilinggain2, iceilinggain3]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/hrtfearly.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e D -\u003e D -\u003e D -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#hrtfearly",
        "fct-type": "function",
        "title": "hrtfearly"
      },
      "index": {
        "description": "Generates binaural audio with high-fidelity early reflections in parametric room using Phase Truncation algorithm This opcode essentially nests the hrtfmove opcode in an image model for user-definable shoebox-shaped room default room can be selected or advanced room parameters can be used Room surfaces can be controlled with high and low-frequency absorption coefficients and gain factors of three-band equaliser aleft aright irt60low irt60high imfp hrtfearly asrc ksrcx ksrcy ksrcz klstnrx klstnry klstnrz ifilel ifiler idefroom ifade isr iorder ithreed kheadrot iroomx iroomy iroomz iwallhigh iwalllow iwallgain1 iwallgain2 iwallgain3 ifloorhigh ifloorlow ifloorgain1 ifloorgain2 ifloorgain3 iceilinghigh iceilinglow iceilinggain1 iceilinggain2 iceilinggain3 csound doc http www.csounds.com manual html hrtfearly.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "hrtfearly",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eD-\u003eD-\u003eD-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eD-\u003eD-\u003eD-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:hrtfmove",
      "description": {
        "fct-descr": "\u003cp\u003eGenerates dynamic 3d binaural audio for headphones using magnitude interpolation and phase truncation.\n\u003c/p\u003e\u003cp\u003eThis opcode takes a source signal and spatialises it in the 3 dimensional space around a listener\n       by convolving the source with stored head related transfer function (HRTF) based filters.\n\u003c/p\u003e\u003cpre\u003e aleft, aright  hrtfmove  asrc, kAz, kElev, ifilel, ifiler [, imode, ifade, isr]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/hrtfmove.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e D -\u003e D -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#hrtfmove",
        "fct-type": "function",
        "title": "hrtfmove"
      },
      "index": {
        "description": "Generates dynamic binaural audio for headphones using magnitude interpolation and phase truncation This opcode takes source signal and spatialises it in the dimensional space around listener by convolving the source with stored head related transfer function HRTF based filters aleft aright hrtfmove asrc kAz kElev ifilel ifiler imode ifade isr csound doc http www.csounds.com manual html hrtfmove.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "hrtfmove",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eD-\u003eD-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eD-\u003eD-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:hrtfmove2",
      "description": {
        "fct-descr": "\u003cp\u003eGenerates dynamic 3d binaural audio for headphones using a Woodworth based spherical head model\n       with improved low frequency phase accuracy.\n\u003c/p\u003e\u003cp\u003eThis opcode takes a source signal and spatialises it in the 3 dimensional space around a listener\n       using head related transfer function (HRTF) based filters.\n\u003c/p\u003e\u003cpre\u003e aleft, aright  hrtfmove2  asrc, kAz, kElev, ifilel, ifiler [,ioverlap, iradius, isr]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/hrtfmove2.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e D -\u003e D -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#hrtfmove2",
        "fct-type": "function",
        "title": "hrtfmove2"
      },
      "index": {
        "description": "Generates dynamic binaural audio for headphones using Woodworth based spherical head model with improved low frequency phase accuracy This opcode takes source signal and spatialises it in the dimensional space around listener using head related transfer function HRTF based filters aleft aright hrtfmove2 asrc kAz kElev ifilel ifiler ioverlap iradius isr csound doc http www.csounds.com manual html hrtfmove2.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "hrtfmove2",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eD-\u003eD-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eD-\u003eD-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:hrtfreverb",
      "description": {
        "fct-descr": "\u003cp\u003eA binaural, dynamic FDN based diffuse-field reverberator. The opcode works independently as an efficient, flexible reverberator.\n\u003c/p\u003e\u003cp\u003eA frequency-dependent, efficient reverberant field is created based on low and high frequency desired reverb times. The opcode is designed to work with hrtfearly, ideally using its outputs as inputs. However, hrtfreverb can be used as a standalone tool. Stability is enforced.\n\u003c/p\u003e\u003cpre\u003e aleft, aright, idel  hrtfreverb  asrc, ilowrt60, ihighrt60, ifilel, ifiler [,isr, imfp, iorder]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/hrtfreverb.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e D -\u003e D -\u003e D -\u003e D -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#hrtfreverb",
        "fct-type": "function",
        "title": "hrtfreverb"
      },
      "index": {
        "description": "binaural dynamic FDN based diffuse-field reverberator The opcode works independently as an efficient flexible reverberator frequency-dependent efficient reverberant field is created based on low and high frequency desired reverb times The opcode is designed to work with hrtfearly ideally using its outputs as inputs However hrtfreverb can be used as standalone tool Stability is enforced aleft aright idel hrtfreverb asrc ilowrt60 ihighrt60 ifilel ifiler isr imfp iorder csound doc http www.csounds.com manual html hrtfreverb.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "hrtfreverb",
        "normalized": "Sig-\u003eD-\u003eD-\u003eD-\u003eD-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eD-\u003eD-\u003eD-\u003eD-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:hrtfstat",
      "description": {
        "fct-descr": "\u003cp\u003eGenerates static 3d binaural audio for headphones using a\n       Woodworth based spherical head model with improved low frequency\n       phase accuracy.\n\u003c/p\u003e\u003cp\u003eThis opcode takes a source signal and spatialises it in the 3 dimensional space around a listener using head related transfer function (HRTF) based filters. It produces a static output (azimuth and elevation parameters are i-rate), because a static source allows much more efficient processing than hrtfmove and hrtfmove2,.\n\u003c/p\u003e\u003cpre\u003e \n           aleft, aright  hrtfstat  asrc, iAz, iElev, ifilel, ifiler [,iradius, isr]\n         \n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/hrtfstat.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e D -\u003e D -\u003e D -\u003e D -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#hrtfstat",
        "fct-type": "function",
        "title": "hrtfstat"
      },
      "index": {
        "description": "Generates static binaural audio for headphones using Woodworth based spherical head model with improved low frequency phase accuracy This opcode takes source signal and spatialises it in the dimensional space around listener using head related transfer function HRTF based filters It produces static output azimuth and elevation parameters are i-rate because static source allows much more efficient processing than hrtfmove and hrtfmove2 aleft aright hrtfstat asrc iAz iElev ifilel ifiler iradius isr csound doc http www.csounds.com manual html hrtfstat.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "hrtfstat",
        "normalized": "Sig-\u003eD-\u003eD-\u003eD-\u003eD-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eD-\u003eD-\u003eD-\u003eD-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:integ",
      "description": {
        "fct-descr": "\u003cp\u003eModify a signal by integration.\n\u003c/p\u003e\u003cpre\u003e ares  integ  asig [, iskip]\n kres  integ  ksig [, iskip]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/integ.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#integ",
        "fct-type": "function",
        "title": "integ"
      },
      "index": {
        "description": "Modify signal by integration ares integ asig iskip kres integ ksig iskip csound doc http www.csounds.com manual html integ.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "integ",
        "normalized": "Sig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:interp",
      "description": {
        "fct-descr": "\u003cp\u003eConverts a control signal to an audio signal using linear interpolation.\n\u003c/p\u003e\u003cpre\u003e ares  interp  ksig [, iskip] [, imode]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/interp.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#interp",
        "fct-type": "function",
        "title": "interp"
      },
      "index": {
        "description": "Converts control signal to an audio signal using linear interpolation ares interp ksig iskip imode csound doc http www.csounds.com manual html interp.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "interp",
        "normalized": "Sig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:limit",
      "description": {
        "fct-descr": "\u003cp\u003eSets the lower and upper limits of the value it processes.\n\u003c/p\u003e\u003cpre\u003e ares  limit  asig, klow, khigh\n ires  limit  isig, ilow, ihigh\n kres  limit  ksig, klow, khigh\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/limit.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#limit",
        "fct-type": "function",
        "title": "limit"
      },
      "index": {
        "description": "Sets the lower and upper limits of the value it processes ares limit asig klow khigh ires limit isig ilow ihigh kres limit ksig klow khigh csound doc http www.csounds.com manual html limit.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "limit",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:lineto",
      "description": {
        "fct-descr": "\u003cp\u003eGenerate glissandos starting from a control signal.\n\u003c/p\u003e\u003cpre\u003e kres  lineto  ksig, ktime\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/lineto.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#lineto",
        "fct-type": "function",
        "title": "lineto"
      },
      "index": {
        "description": "Generate glissandos starting from control signal kres lineto ksig ktime csound doc http www.csounds.com manual html lineto.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "lineto",
        "normalized": "Sig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:locsend",
      "description": {
        "fct-descr": "\u003cp\u003eDistributes the audio signals of a previous locsig opcode.\n\u003c/p\u003e\u003cp\u003elocsend depends upon the existence of a previously defined locsig. The number of output signals must match the number in the previous locsig. The output signals from locsend are derived from the values given for distance and reverb in the locsig and are ready to be sent to local or global reverb units (see example below). The reverb amount and the balance between the 2 or 4 channels are calculated in the same way as described in the Dodge book (an essential text!).\n\u003c/p\u003e\u003cpre\u003e a1, a2  locsend &#160; a1, a2,  a3, a4  locsend &#160;\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/locsend.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "a",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#locsend",
        "fct-type": "function",
        "title": "locsend"
      },
      "index": {
        "description": "Distributes the audio signals of previous locsig opcode locsend depends upon the existence of previously defined locsig The number of output signals must match the number in the previous locsig The output signals from locsend are derived from the values given for distance and reverb in the locsig and are ready to be sent to local or global reverb units see example below The reverb amount and the balance between the or channels are calculated in the same way as described in the Dodge book an essential text a1 a2 locsend a1 a2 a3 a4 locsend csound doc http www.csounds.com manual html locsend.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "locsend",
        "normalized": "",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:locsig",
      "description": {
        "fct-descr": "\u003cp\u003eTakes an input signal and distributes between 2 or 4 channels.\n\u003c/p\u003e\u003cp\u003elocsig takes an input signal and distributes it among 2 or 4 channels using values in degrees to calculate the balance between adjacent channels. It also takes arguments for distance (used to attenuate signals that are to sound as if they are some distance further than the loudspeaker itself), and for the amount the signal that will be sent to reverberators. This unit is based upon the example in the Charles Dodge/Thomas Jerse book, Computer Music, page 320.\n\u003c/p\u003e\u003cpre\u003e a1, a2  locsig  asig, kdegree, kdistance, kreverbsend\n a1, a2,  a3, a4  locsig  asig, kdegree, kdistance, kreverbsend\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/locsig.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#locsig",
        "fct-type": "function",
        "title": "locsig"
      },
      "index": {
        "description": "Takes an input signal and distributes between or channels locsig takes an input signal and distributes it among or channels using values in degrees to calculate the balance between adjacent channels It also takes arguments for distance used to attenuate signals that are to sound as if they are some distance further than the loudspeaker itself and for the amount the signal that will be sent to reverberators This unit is based upon the example in the Charles Dodge Thomas Jerse book Computer Music page a1 a2 locsig asig kdegree kdistance kreverbsend a1 a2 a3 a4 locsig asig kdegree kdistance kreverbsend csound doc http www.csounds.com manual html locsig.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "locsig",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:lowpass2",
      "description": {
        "fct-descr": "\u003cp\u003eA resonant lowpass filter.\n\u003c/p\u003e\u003cp\u003eImplementation of a resonant second-order lowpass filter.\n\u003c/p\u003e\u003cpre\u003e ares  lowpass2  asig, kcf, kq [, iskip]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/lowpass2.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#lowpass2",
        "fct-type": "function",
        "title": "lowpass2"
      },
      "index": {
        "description": "resonant lowpass filter Implementation of resonant second-order lowpass filter ares lowpass2 asig kcf kq iskip csound doc http www.csounds.com manual html lowpass2.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "lowpass2",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:lowres",
      "description": {
        "fct-descr": "\u003cp\u003eAnother resonant lowpass filter.\n\u003c/p\u003e\u003cp\u003elowres is a resonant lowpass filter.\n\u003c/p\u003e\u003cpre\u003e ares  lowres  asig, kcutoff, kresonance [, iskip]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/lowres.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#lowres",
        "fct-type": "function",
        "title": "lowres"
      },
      "index": {
        "description": "Another resonant lowpass filter lowres is resonant lowpass filter ares lowres asig kcutoff kresonance iskip csound doc http www.csounds.com manual html lowres.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "lowres",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:lowresx",
      "description": {
        "fct-descr": "\u003cp\u003eSimulates layers of serially connected resonant lowpass filters.\n\u003c/p\u003e\u003cp\u003elowresx is equivalent to more layers of lowres with the same arguments serially connected.\n\u003c/p\u003e\u003cpre\u003e ares  lowresx  asig, kcutoff, kresonance [, inumlayer] [, iskip]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/lowresx.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#lowresx",
        "fct-type": "function",
        "title": "lowresx"
      },
      "index": {
        "description": "Simulates layers of serially connected resonant lowpass filters lowresx is equivalent to more layers of lowres with the same arguments serially connected ares lowresx asig kcutoff kresonance inumlayer iskip csound doc http www.csounds.com manual html lowresx.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "lowresx",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:lpf18",
      "description": {
        "fct-descr": "\u003cp\u003eA 3-pole sweepable resonant lowpass filter.\n\u003c/p\u003e\u003cp\u003eImplementation of a 3 pole sweepable resonant lowpass filter.\n\u003c/p\u003e\u003cpre\u003e ares  lpf18  asig, kfco, kres, kdist [, iskip]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/lpf18.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#lpf18",
        "fct-type": "function",
        "title": "lpf18"
      },
      "index": {
        "description": "pole sweepable resonant lowpass filter Implementation of pole sweepable resonant lowpass filter ares lpf18 asig kfco kres kdist iskip csound doc http www.csounds.com manual html lpf18.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "lpf18",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:max-39-",
      "description": {
        "fct-descr": "\u003cp\u003eProduces a signal that is the maximum of any number of input signals.\n\u003c/p\u003e\u003cp\u003eThe max opcode takes any number of a-rate or k-rate signals as input (all of the same rate), and outputs a signal at the same rate that is the maximum of all of the inputs.  For a-rate signals, the inputs are compared one sample at a time (i.e. max does not scan an entire ksmps period of a signal for its local maximum as the max_k opcode does).\n\u003c/p\u003e\u003cpre\u003e amax  max  ain1, ain2 [, ain3] [, ain4] [...]\n kmax  max  kin1, kin2 [, kin3] [, kin4] [...]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/max.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "[Sig] -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#max%27",
        "fct-type": "function",
        "title": "max'"
      },
      "index": {
        "description": "Produces signal that is the maximum of any number of input signals The max opcode takes any number of a-rate or k-rate signals as input all of the same rate and outputs signal at the same rate that is the maximum of all of the inputs For a-rate signals the inputs are compared one sample at time i.e max does not scan an entire ksmps period of signal for its local maximum as the max opcode does amax max ain1 ain2 ain3 ain4 kmax max kin1 kin2 kin3 kin4 csound doc http www.csounds.com manual html max.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "max'",
        "normalized": "[Sig]-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "[Sig]-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:max_k",
      "description": {
        "fct-descr": "\u003cp\u003eLocal maximum (or minimum) value of an incoming asig signal\n\u003c/p\u003e\u003cp\u003emax_k outputs the local maximum (or minimum) value of  the incoming asig signal, checked in the time interval between ktrig has become true twice.\n\u003c/p\u003e\u003cpre\u003e knumkout  max_k  asig, ktrig, itype\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/max_k.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#max_k",
        "fct-type": "function",
        "title": "max_k"
      },
      "index": {
        "description": "Local maximum or minimum value of an incoming asig signal max outputs the local maximum or minimum value of the incoming asig signal checked in the time interval between ktrig has become true twice knumkout max asig ktrig itype csound doc http www.csounds.com manual html max k.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "max_k",
        "normalized": "Sig-\u003eSig-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:maxabs",
      "description": {
        "fct-descr": "\u003cp\u003eProduces a signal that is the maximum of the absolute values of any number of input signals.\n\u003c/p\u003e\u003cp\u003eThe maxabs opcode takes any number of a-rate or k-rate signals as input (all of the same rate), and outputs a signal at the same rate that is the maximum of all of the inputs.  It is identical to the max opcode except that it takes the absolute value of each input before comparing them.  Therefore, the output is always non-negative.  For a-rate signals, the inputs are compared one sample at a time (i.e. maxabs does not scan an entire ksmps period of a signal for its local maximum as the max_k opcode does).\n\u003c/p\u003e\u003cpre\u003e amax  maxabs  ain1, ain2 [, ain3] [, ain4] [...]\n kmax  maxabs  kin1, kin2 [, kin3] [, kin4] [...]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/maxabs.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "[Sig] -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#maxabs",
        "fct-type": "function",
        "title": "maxabs"
      },
      "index": {
        "description": "Produces signal that is the maximum of the absolute values of any number of input signals The maxabs opcode takes any number of a-rate or k-rate signals as input all of the same rate and outputs signal at the same rate that is the maximum of all of the inputs It is identical to the max opcode except that it takes the absolute value of each input before comparing them Therefore the output is always non-negative For a-rate signals the inputs are compared one sample at time i.e maxabs does not scan an entire ksmps period of signal for its local maximum as the max opcode does amax maxabs ain1 ain2 ain3 ain4 kmax maxabs kin1 kin2 kin3 kin4 csound doc http www.csounds.com manual html maxabs.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "maxabs",
        "normalized": "[Sig]-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "[Sig]-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:maxabsaccum",
      "description": {
        "fct-descr": "\u003cp\u003eAccumulates the maximum of the absolute values of audio signals.\n\u003c/p\u003e\u003cp\u003emaxabsaccum compares two audio-rate variables and stores the maximum of their absolute values into the first.\n\u003c/p\u003e\u003cpre\u003e  maxabsaccum  aAccumulator, aInput\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/maxabsaccum.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#maxabsaccum",
        "fct-type": "function",
        "title": "maxabsaccum"
      },
      "index": {
        "description": "Accumulates the maximum of the absolute values of audio signals maxabsaccum compares two audio-rate variables and stores the maximum of their absolute values into the first maxabsaccum aAccumulator aInput csound doc http www.csounds.com manual html maxabsaccum.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "maxabsaccum",
        "normalized": "Sig-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:maxaccum",
      "description": {
        "fct-descr": "\u003cp\u003eAccumulates the maximum value of audio signals.\n\u003c/p\u003e\u003cp\u003emaxaccum compares two audio-rate variables and stores the maximum value between them into the first.\n\u003c/p\u003e\u003cpre\u003e  maxaccum  aAccumulator, aInput\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/maxaccum.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#maxaccum",
        "fct-type": "function",
        "title": "maxaccum"
      },
      "index": {
        "description": "Accumulates the maximum value of audio signals maxaccum compares two audio-rate variables and stores the maximum value between them into the first maxaccum aAccumulator aInput csound doc http www.csounds.com manual html maxaccum.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "maxaccum",
        "normalized": "Sig-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:min-39-",
      "description": {
        "fct-descr": "\u003cp\u003eProduces a signal that is the minimum of any number of input signals.\n\u003c/p\u003e\u003cp\u003eThe min opcode takes any number of a-rate or k-rate signals as input (all of the same rate), and outputs a signal at the same rate that is the minimum of all of the inputs.  For a-rate signals, the inputs are compared one sample at a time (i.e. min does not scan an entire ksmps period of a signal for its local minimum as the max_k opcode does).\n\u003c/p\u003e\u003cpre\u003e amin  min  ain1, ain2 [, ain3] [, ain4] [...]\n kmin  min  kin1, kin2 [, kin3] [, kin4] [...]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/min.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "[Sig] -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#min%27",
        "fct-type": "function",
        "title": "min'"
      },
      "index": {
        "description": "Produces signal that is the minimum of any number of input signals The min opcode takes any number of a-rate or k-rate signals as input all of the same rate and outputs signal at the same rate that is the minimum of all of the inputs For a-rate signals the inputs are compared one sample at time i.e min does not scan an entire ksmps period of signal for its local minimum as the max opcode does amin min ain1 ain2 ain3 ain4 kmin min kin1 kin2 kin3 kin4 csound doc http www.csounds.com manual html min.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "min'",
        "normalized": "[Sig]-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "[Sig]-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:minabs",
      "description": {
        "fct-descr": "\u003cp\u003eProduces a signal that is the minimum of the absolute values of any number of input signals.\n\u003c/p\u003e\u003cp\u003eThe minabs opcode takes any number of a-rate or k-rate signals as input (all of the same rate), and outputs a signal at the same rate that is the minimum of all of the inputs.  It is identical to the min opcode except that it takes the absolute value of each input before comparing them.  Therefore, the output is always non-negative.    For a-rate signals, the inputs are compared one sample at a time (i.e. minabs does not scan an entire ksmps period of a signal for its local minimum as the max_k opcode does).\n\u003c/p\u003e\u003cpre\u003e amin  minabs  ain1, ain2 [, ain3] [, ain4] [...]\n kmin  minabs  kin1, kin2 [, kin3] [, kin4] [...]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/minabs.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "[Sig] -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#minabs",
        "fct-type": "function",
        "title": "minabs"
      },
      "index": {
        "description": "Produces signal that is the minimum of the absolute values of any number of input signals The minabs opcode takes any number of a-rate or k-rate signals as input all of the same rate and outputs signal at the same rate that is the minimum of all of the inputs It is identical to the min opcode except that it takes the absolute value of each input before comparing them Therefore the output is always non-negative For a-rate signals the inputs are compared one sample at time i.e minabs does not scan an entire ksmps period of signal for its local minimum as the max opcode does amin minabs ain1 ain2 ain3 ain4 kmin minabs kin1 kin2 kin3 kin4 csound doc http www.csounds.com manual html minabs.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "minabs",
        "normalized": "[Sig]-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "[Sig]-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:minabsaccum",
      "description": {
        "fct-descr": "\u003cp\u003eAccumulates the minimum of the absolute values of audio signals.\n\u003c/p\u003e\u003cp\u003eminabsaccum compares two audio-rate variables and stores the minimum of their absolute values into the first.\n\u003c/p\u003e\u003cpre\u003e  minabsaccum  aAccumulator, aInput\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/minabsaccum.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#minabsaccum",
        "fct-type": "function",
        "title": "minabsaccum"
      },
      "index": {
        "description": "Accumulates the minimum of the absolute values of audio signals minabsaccum compares two audio-rate variables and stores the minimum of their absolute values into the first minabsaccum aAccumulator aInput csound doc http www.csounds.com manual html minabsaccum.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "minabsaccum",
        "normalized": "Sig-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:minaccum",
      "description": {
        "fct-descr": "\u003cp\u003eAccumulates the minimum value of audio signals.\n\u003c/p\u003e\u003cp\u003eminaccum compares two audio-rate variables and stores the minimum value between them into the first.\n\u003c/p\u003e\u003cpre\u003e  minaccum  aAccumulator, aInput\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/minaccum.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#minaccum",
        "fct-type": "function",
        "title": "minaccum"
      },
      "index": {
        "description": "Accumulates the minimum value of audio signals minaccum compares two audio-rate variables and stores the minimum value between them into the first minaccum aAccumulator aInput csound doc http www.csounds.com manual html minaccum.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "minaccum",
        "normalized": "Sig-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:mirror",
      "description": {
        "fct-descr": "\u003cp\u003eReflects the signal that exceeds the low and high thresholds.\n\u003c/p\u003e\u003cpre\u003e ares  mirror  asig, klow, khigh\n ires  mirror  isig, ilow, ihigh\n kres  mirror  ksig, klow, khigh\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/mirror.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#mirror",
        "fct-type": "function",
        "title": "mirror"
      },
      "index": {
        "description": "Reflects the signal that exceeds the low and high thresholds ares mirror asig klow khigh ires mirror isig ilow ihigh kres mirror ksig klow khigh csound doc http www.csounds.com manual html mirror.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "mirror",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:mode",
      "description": {
        "fct-descr": "\u003cp\u003eA filter that simulates a mass-spring-damper system\n\u003c/p\u003e\u003cp\u003eFilters the incoming signal with the specified resonance frequency and\n       quality factor. It can also be seen as a signal generator for high quality\n       factor, with an impulse for the excitation. You can combine several modes\n       to built complex instruments such as bells or guitar tables.\n\u003c/p\u003e\u003cpre\u003e aout  mode  ain, kfreq, kQ [, iskip]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/mode.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#mode",
        "fct-type": "function",
        "title": "mode"
      },
      "index": {
        "description": "filter that simulates mass-spring-damper system Filters the incoming signal with the specified resonance frequency and quality factor It can also be seen as signal generator for high quality factor with an impulse for the excitation You can combine several modes to built complex instruments such as bells or guitar tables aout mode ain kfreq kQ iskip csound doc http www.csounds.com manual html mode.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "mode",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:moogladder",
      "description": {
        "fct-descr": "\u003cp\u003eMoog ladder lowpass filter.\n\u003c/p\u003e\u003cp\u003eMoogladder is an new digital implementation of the Moog ladder filter based on \n the work of Antti Huovilainen, described in the paper \u003ca\u003eNon-Linear Digital \n Implementation of the Moog Ladder Filter\u003c/a\u003e (Proceedings of DaFX04, Univ of Napoli). \n This implementation is probably a more accurate digital representation of \n the original analogue filter.\n\u003c/p\u003e\u003cpre\u003e asig  moogladder  ain, kcf, kres[, istor]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/moogladder.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#moogladder",
        "fct-type": "function",
        "title": "moogladder"
      },
      "index": {
        "description": "Moog ladder lowpass filter Moogladder is an new digital implementation of the Moog ladder filter based on the work of Antti Huovilainen described in the paper Non-Linear Digital Implementation of the Moog Ladder Filter Proceedings of DaFX04 Univ of Napoli This implementation is probably more accurate digital representation of the original analogue filter asig moogladder ain kcf kres istor csound doc http www.csounds.com manual html moogladder.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "moogladder",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:moogvcf",
      "description": {
        "fct-descr": "\u003cp\u003eA digital emulation of the Moog diode ladder filter configuration.\n\u003c/p\u003e\u003cpre\u003e ares  moogvcf  asig, xfco, xres [,iscale, iskip]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/moogvcf.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#moogvcf",
        "fct-type": "function",
        "title": "moogvcf"
      },
      "index": {
        "description": "digital emulation of the Moog diode ladder filter configuration ares moogvcf asig xfco xres iscale iskip csound doc http www.csounds.com manual html moogvcf.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "moogvcf",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:moogvcf2",
      "description": {
        "fct-descr": "\u003cp\u003eA digital emulation of the Moog diode ladder filter configuration.\n\u003c/p\u003e\u003cpre\u003e ares  moogvcf2  asig, xfco, xres [,iscale, iskip]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/moogvcf2.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#moogvcf2",
        "fct-type": "function",
        "title": "moogvcf2"
      },
      "index": {
        "description": "digital emulation of the Moog diode ladder filter configuration ares moogvcf2 asig xfco xres iscale iskip csound doc http www.csounds.com manual html moogvcf2.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "moogvcf2",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:multitap",
      "description": {
        "fct-descr": "\u003cp\u003eMultitap delay line implementation.\n\u003c/p\u003e\u003cpre\u003e ares  multitap  asig [, itime1, igain1] [, itime2, igain2] [...]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/multitap.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e [D] -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#multitap",
        "fct-type": "function",
        "title": "multitap"
      },
      "index": {
        "description": "Multitap delay line implementation ares multitap asig itime1 igain1 itime2 igain2 csound doc http www.csounds.com manual html multitap.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "multitap",
        "normalized": "Sig-\u003e[D]-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003e[D]-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:nestedap",
      "description": {
        "fct-descr": "\u003cp\u003eThree different nested all-pass filters.\n\u003c/p\u003e\u003cp\u003eThree different nested all-pass filters, useful for implementing reverbs.\n\u003c/p\u003e\u003cpre\u003e ares  nestedap  asig, imode, imaxdel, idel1, igain1 [, idel2] [, igain2] \\\n           [, idel3] [, igain3] [, istor]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/nestedap.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e D -\u003e D -\u003e D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#nestedap",
        "fct-type": "function",
        "title": "nestedap"
      },
      "index": {
        "description": "Three different nested all-pass filters Three different nested all-pass filters useful for implementing reverbs ares nestedap asig imode imaxdel idel1 igain1 idel2 igain2 idel3 igain3 istor csound doc http www.csounds.com manual html nestedap.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "nestedap",
        "normalized": "Sig-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:nlfilt",
      "description": {
        "fct-descr": "\u003cp\u003eA filter with a non-linear effect.\n\u003c/p\u003e\u003cp\u003eImplements the filter:\n\u003c/p\u003e\u003cpre\u003e ares  nlfilt  ain, ka, kb, kd, kC, kL\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/nlfilt.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#nlfilt",
        "fct-type": "function",
        "title": "nlfilt"
      },
      "index": {
        "description": "filter with non-linear effect Implements the filter ares nlfilt ain ka kb kd kC kL csound doc http www.csounds.com manual html nlfilt.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "nlfilt",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:nlfilt2",
      "description": {
        "fct-descr": "\u003cp\u003eA filter with a non-linear effect and blowup protection.\n\u003c/p\u003e\u003cp\u003eImplements the filter:\n\u003c/p\u003e\u003cpre\u003e ares  nlfilt2  ain, ka, kb, kd, kC, kL\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/nlfilt2.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#nlfilt2",
        "fct-type": "function",
        "title": "nlfilt2"
      },
      "index": {
        "description": "filter with non-linear effect and blowup protection Implements the filter ares nlfilt2 ain ka kb kd kC kL csound doc http www.csounds.com manual html nlfilt2.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "nlfilt2",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:nreverb",
      "description": {
        "fct-descr": "\u003cp\u003eA reverberator consisting of 6 parallel comb-lowpass filters.\n\u003c/p\u003e\u003cp\u003eThis is a reverberator consisting of 6 parallel comb-lowpass filters being fed into a series of 5 allpass filters. nreverb replaces reverb2 (version 3.48) and so both opcodes are identical.\n\u003c/p\u003e\u003cpre\u003e ares  nreverb  asig, ktime, khdif [, iskip] [,inumCombs] [, ifnCombs] \\\n           [, inumAlpas] [, ifnAlpas]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/nreverb.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#nreverb",
        "fct-type": "function",
        "title": "nreverb"
      },
      "index": {
        "description": "reverberator consisting of parallel comb-lowpass filters This is reverberator consisting of parallel comb-lowpass filters being fed into series of allpass filters nreverb replaces reverb2 version and so both opcodes are identical ares nreverb asig ktime khdif iskip inumCombs ifnCombs inumAlpas ifnAlpas csound doc http www.csounds.com manual html nreverb.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "nreverb",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:ntrpol",
      "description": {
        "fct-descr": "\u003cp\u003eCalculates the weighted mean value of two input signals.\n\u003c/p\u003e\u003cp\u003eCalculates the weighted mean value (i.e. linear interpolation) of two input signals\n\u003c/p\u003e\u003cpre\u003e ares  ntrpol  asig1, asig2, kpoint [, imin] [, imax]\n ires  ntrpol  isig1, isig2, ipoint [, imin] [, imax]\n kres  ntrpol  ksig1, ksig2, kpoint [, imin] [, imax]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/ntrpol.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#ntrpol",
        "fct-type": "function",
        "title": "ntrpol"
      },
      "index": {
        "description": "Calculates the weighted mean value of two input signals Calculates the weighted mean value i.e linear interpolation of two input signals ares ntrpol asig1 asig2 kpoint imin imax ires ntrpol isig1 isig2 ipoint imin imax kres ntrpol ksig1 ksig2 kpoint imin imax csound doc http www.csounds.com manual html ntrpol.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "ntrpol",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:pan",
      "description": {
        "fct-descr": "\u003cp\u003eDistribute an audio signal amongst four channels.\n\u003c/p\u003e\u003cp\u003eDistribute an audio signal amongst four channels with localization control.\n\u003c/p\u003e\u003cpre\u003e a1, a2, a3, a4  pan  asig, kx, ky, ifn [, imode] [, ioffset]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/pan.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Tab -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#pan",
        "fct-type": "function",
        "title": "pan"
      },
      "index": {
        "description": "Distribute an audio signal amongst four channels Distribute an audio signal amongst four channels with localization control a1 a2 a3 a4 pan asig kx ky ifn imode ioffset csound doc http www.csounds.com manual html pan.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "pan",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eTab-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eTab-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:pan2",
      "description": {
        "fct-descr": "\u003cp\u003eDistribute an audio signal across two channels.\n\u003c/p\u003e\u003cp\u003eDistribute an audio signal across two channels with a choice of methods.\n\u003c/p\u003e\u003cpre\u003e a1, a2  pan2  asig, xp [, imode]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/pan2.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#pan2",
        "fct-type": "function",
        "title": "pan2"
      },
      "index": {
        "description": "Distribute an audio signal across two channels Distribute an audio signal across two channels with choice of methods a1 a2 pan2 asig xp imode csound doc http www.csounds.com manual html pan2.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "pan2",
        "normalized": "Sig-\u003eSig-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:pareq",
      "description": {
        "fct-descr": "\u003cp\u003eImplementation of Zoelzer's parametric equalizer filters.\n\u003c/p\u003e\u003cp\u003eImplementation of Zoelzer's parametric equalizer filters, with some modifications by the author.\n\u003c/p\u003e\u003cpre\u003e ares  pareq  asig, kc, kv, kq [, imode] [, iskip]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/pareq.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#pareq",
        "fct-type": "function",
        "title": "pareq"
      },
      "index": {
        "description": "Implementation of Zoelzer parametric equalizer filters Implementation of Zoelzer parametric equalizer filters with some modifications by the author ares pareq asig kc kv kq imode iskip csound doc http www.csounds.com manual html pareq.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "pareq",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:pconvolve",
      "description": {
        "fct-descr": "\u003cp\u003eConvolution based on a uniformly partitioned overlap-save algorithm\n\u003c/p\u003e\u003cp\u003eConvolution based on a uniformly partitioned overlap-save algorithm. Compared to the convolve opcode, pconvolve has these benefits:\n\u003c/p\u003e\u003cpre\u003e ar1 [, ar2] [, ar3] [, ar4]  pconvolve  ain, ifilcod [, ipartitionsize, ichannel]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/pconvolve.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Str -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#pconvolve",
        "fct-type": "function",
        "title": "pconvolve"
      },
      "index": {
        "description": "Convolution based on uniformly partitioned overlap-save algorithm Convolution based on uniformly partitioned overlap-save algorithm Compared to the convolve opcode pconvolve has these benefits ar1 ar2 ar3 ar4 pconvolve ain ifilcod ipartitionsize ichannel csound doc http www.csounds.com manual html pconvolve.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "pconvolve",
        "normalized": "Sig-\u003eStr-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eStr-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:pdclip",
      "description": {
        "fct-descr": "\u003cp\u003ePerforms linear clipping on an audio signal or a phasor.\n\u003c/p\u003e\u003cp\u003eThe pdclip opcode allows a percentage of the input range of a signal to be clipped to fullscale. It is similar to simply multiplying the signal and limiting the range of the result, but pdclip allows you to think about how much of the signal range is being distorted instead of the scalar factor and has a offset parameter for assymetric clipping of the signal range. pdclip is also useful for remapping phasors for phase distortion synthesis.\n\u003c/p\u003e\u003cpre\u003e aout  pdclip  ain, kWidth, kCenter [, ibipolar [, ifullscale]]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/pdclip.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#pdclip",
        "fct-type": "function",
        "title": "pdclip"
      },
      "index": {
        "description": "Performs linear clipping on an audio signal or phasor The pdclip opcode allows percentage of the input range of signal to be clipped to fullscale It is similar to simply multiplying the signal and limiting the range of the result but pdclip allows you to think about how much of the signal range is being distorted instead of the scalar factor and has offset parameter for assymetric clipping of the signal range pdclip is also useful for remapping phasors for phase distortion synthesis aout pdclip ain kWidth kCenter ibipolar ifullscale csound doc http www.csounds.com manual html pdclip.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "pdclip",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:pdhalf",
      "description": {
        "fct-descr": "\u003cp\u003eDistorts a phasor for reading the two halves of a table at different rates.\n\u003c/p\u003e\u003cp\u003eThe pdhalf opcode is designed to emulate the \u003ca\u003eclassic\u003c/a\u003e phase distortion synthesis method of the Casio CZ-series of synthesizers from the mid-1980's.  This technique reads the first and second halves of a function table at different rates in order to warp the waveform.  For example, pdhalf can smoothly transform a sine wave into something approximating the shape of a saw wave.\n\u003c/p\u003e\u003cpre\u003e aout  pdhalf  ain, kShapeAmount [, ibipolar [, ifullscale]]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/pdhalf.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#pdhalf",
        "fct-type": "function",
        "title": "pdhalf"
      },
      "index": {
        "description": "Distorts phasor for reading the two halves of table at different rates The pdhalf opcode is designed to emulate the classic phase distortion synthesis method of the Casio CZ-series of synthesizers from the mid-1980 This technique reads the first and second halves of function table at different rates in order to warp the waveform For example pdhalf can smoothly transform sine wave into something approximating the shape of saw wave aout pdhalf ain kShapeAmount ibipolar ifullscale csound doc http www.csounds.com manual html pdhalf.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "pdhalf",
        "normalized": "Sig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:pdhalfy",
      "description": {
        "fct-descr": "\u003cp\u003eDistorts a phasor for reading two unequal portions of a table in equal periods.\n\u003c/p\u003e\u003cp\u003eThe pdhalfy opcode is a variation on the phase distortion synthesis method of the pdhalf opcode.  It is useful for distorting a phasor in order to read two unequal portions of a table in the same number of samples.\n\u003c/p\u003e\u003cpre\u003e aout  pdhalfy  ain, kShapeAmount [, ibipolar [, ifullscale]]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/pdhalfy.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#pdhalfy",
        "fct-type": "function",
        "title": "pdhalfy"
      },
      "index": {
        "description": "Distorts phasor for reading two unequal portions of table in equal periods The pdhalfy opcode is variation on the phase distortion synthesis method of the pdhalf opcode It is useful for distorting phasor in order to read two unequal portions of table in the same number of samples aout pdhalfy ain kShapeAmount ibipolar ifullscale csound doc http www.csounds.com manual html pdhalfy.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "pdhalfy",
        "normalized": "Sig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:phaser1",
      "description": {
        "fct-descr": "\u003cp\u003eFirst-order allpass filters arranged in a series.\n\u003c/p\u003e\u003cp\u003eAn implementation of iord number of first-order allpass filters in series.\n\u003c/p\u003e\u003cpre\u003e ares  phaser1  asig, kfreq, kord, kfeedback [, iskip]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/phaser1.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#phaser1",
        "fct-type": "function",
        "title": "phaser1"
      },
      "index": {
        "description": "First-order allpass filters arranged in series An implementation of iord number of first-order allpass filters in series ares phaser1 asig kfreq kord kfeedback iskip csound doc http www.csounds.com manual html phaser1.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "phaser1",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:phaser2",
      "description": {
        "fct-descr": "\u003cp\u003eSecond-order allpass filters arranged in a series.\n\u003c/p\u003e\u003cp\u003eAn implementation of iord number of second-order allpass filters in series.\n\u003c/p\u003e\u003cpre\u003e ares  phaser2  asig, kfreq, kq, kord, kmode, ksep, kfeedback\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/phaser2.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#phaser2",
        "fct-type": "function",
        "title": "phaser2"
      },
      "index": {
        "description": "Second-order allpass filters arranged in series An implementation of iord number of second-order allpass filters in series ares phaser2 asig kfreq kq kord kmode ksep kfeedback csound doc http www.csounds.com manual html phaser2.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "phaser2",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:platerev",
      "description": {
        "fct-descr": "\u003cp\u003eModels the reverberation of a metal plate.\n\u003c/p\u003e\u003cp\u003eModels the reverberation of a rectangular metal plate with\n       settable physical characteristics when excited by audio signal(s).\n\u003c/p\u003e\u003cpre\u003e a1[, a2, ...]  platerev  itabexcite. itabouts, kbndry, iaspect, istiff, idecay, iloss, aexcite1[, aexcite2, ...]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/platerev.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e Sig -\u003e D -\u003e D -\u003e D -\u003e D -\u003e [Sig] -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#platerev",
        "fct-type": "function",
        "title": "platerev"
      },
      "index": {
        "description": "Models the reverberation of metal plate Models the reverberation of rectangular metal plate with settable physical characteristics when excited by audio signal a1 a2 platerev itabexcite itabouts kbndry iaspect istiff idecay iloss aexcite1 aexcite2 csound doc http www.csounds.com manual html platerev.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "platerev",
        "normalized": "D-\u003eD-\u003eSig-\u003eD-\u003eD-\u003eD-\u003eD-\u003e[Sig]-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eSig-\u003eD-\u003eD-\u003eD-\u003eD-\u003e[Sig]-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:port",
      "description": {
        "fct-descr": "\u003cp\u003eApplies portamento to a step-valued control signal.\n\u003c/p\u003e\u003cpre\u003e kres  port  ksig, ihtim [, isig]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/port.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#port",
        "fct-type": "function",
        "title": "port"
      },
      "index": {
        "description": "Applies portamento to step-valued control signal kres port ksig ihtim isig csound doc http www.csounds.com manual html port.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "port",
        "normalized": "Sig-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:portk",
      "description": {
        "fct-descr": "\u003cp\u003eApplies portamento to a step-valued control signal.\n\u003c/p\u003e\u003cpre\u003e kres  portk  ksig, khtim [, isig]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/portk.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#portk",
        "fct-type": "function",
        "title": "portk"
      },
      "index": {
        "description": "Applies portamento to step-valued control signal kres portk ksig khtim isig csound doc http www.csounds.com manual html portk.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "portk",
        "normalized": "Sig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:powershape",
      "description": {
        "fct-descr": "\u003cp\u003eWaveshapes a signal by raising it to a variable exponent.\n\u003c/p\u003e\u003cp\u003eThe powershape opcode raises an input signal to a power with pre- and post-scaling of the signal so that the output will be in a predictable range.  It also processes negative inputs in a symmetrical way to positive inputs, calculating a dynamic transfer function that is useful for waveshaping.\n\u003c/p\u003e\u003cpre\u003e aout  powershape  ain, kShapeAmount [, ifullscale]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/powershape.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#powershape",
        "fct-type": "function",
        "title": "powershape"
      },
      "index": {
        "description": "Waveshapes signal by raising it to variable exponent The powershape opcode raises an input signal to power with pre and post-scaling of the signal so that the output will be in predictable range It also processes negative inputs in symmetrical way to positive inputs calculating dynamic transfer function that is useful for waveshaping aout powershape ain kShapeAmount ifullscale csound doc http www.csounds.com manual html powershape.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "powershape",
        "normalized": "Sig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:rbjeq",
      "description": {
        "fct-descr": "\u003cp\u003eParametric equalizer and filter opcode with 7 filter types, based\n       on algorithm by Robert Bristow-Johnson.\n\u003c/p\u003e\u003cp\u003eParametric equalizer and filter opcode with 7 filter types,\n     \tbased on algorithm by Robert Bristow-Johnson.\n\u003c/p\u003e\u003cpre\u003e ar  rbjeq  asig, kfco, klvl, kQ, kS[, imode]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/rbjeq.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#rbjeq",
        "fct-type": "function",
        "title": "rbjeq"
      },
      "index": {
        "description": "Parametric equalizer and filter opcode with filter types based on algorithm by Robert Bristow-Johnson Parametric equalizer and filter opcode with filter types based on algorithm by Robert Bristow-Johnson ar rbjeq asig kfco klvl kQ kS imode csound doc http www.csounds.com manual html rbjeq.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "rbjeq",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:reson",
      "description": {
        "fct-descr": "\u003cp\u003eA second-order resonant filter.\n\u003c/p\u003e\u003cpre\u003e ares  reson  asig, kcf, kbw [, iscl] [, iskip]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/reson.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#reson",
        "fct-type": "function",
        "title": "reson"
      },
      "index": {
        "description": "second-order resonant filter ares reson asig kcf kbw iscl iskip csound doc http www.csounds.com manual html reson.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "reson",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:resonk",
      "description": {
        "fct-descr": "\u003cp\u003eA second-order resonant filter.\n\u003c/p\u003e\u003cpre\u003e kres  resonk  ksig, kcf, kbw [, iscl] [, iskip]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/resonk.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#resonk",
        "fct-type": "function",
        "title": "resonk"
      },
      "index": {
        "description": "second-order resonant filter kres resonk ksig kcf kbw iscl iskip csound doc http www.csounds.com manual html resonk.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "resonk",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:resonr",
      "description": {
        "fct-descr": "\u003cp\u003eA bandpass filter with variable frequency response.\n\u003c/p\u003e\u003cp\u003eImplementations of a second-order, two-pole two-zero bandpass filter with variable frequency response.\n\u003c/p\u003e\u003cpre\u003e ares  resonr  asig, kcf, kbw [, iscl] [, iskip]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/resonr.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#resonr",
        "fct-type": "function",
        "title": "resonr"
      },
      "index": {
        "description": "bandpass filter with variable frequency response Implementations of second-order two-pole two-zero bandpass filter with variable frequency response ares resonr asig kcf kbw iscl iskip csound doc http www.csounds.com manual html resonr.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "resonr",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:resonx",
      "description": {
        "fct-descr": "\u003cp\u003eEmulates a stack of filters using the reson opcode.\n\u003c/p\u003e\u003cp\u003eresonx is equivalent to a filters consisting of more layers of reson with the same arguments, serially connected. Using a stack of a larger number of filters allows a sharper cutoff. They are faster than using a larger number instances in a Csound orchestra of the old opcodes, because only one initialization and k- cycle are needed at time and the audio loop falls entirely inside the cache memory of processor.\n\u003c/p\u003e\u003cpre\u003e ares  resonx  asig, kcf, kbw [, inumlayer] [, iscl] [, iskip]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/resonx.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#resonx",
        "fct-type": "function",
        "title": "resonx"
      },
      "index": {
        "description": "Emulates stack of filters using the reson opcode resonx is equivalent to filters consisting of more layers of reson with the same arguments serially connected Using stack of larger number of filters allows sharper cutoff They are faster than using larger number instances in Csound orchestra of the old opcodes because only one initialization and cycle are needed at time and the audio loop falls entirely inside the cache memory of processor ares resonx asig kcf kbw inumlayer iscl iskip csound doc http www.csounds.com manual html resonx.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "resonx",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:resonxk",
      "description": {
        "fct-descr": "\u003cp\u003eControl signal resonant filter stack.\n\u003c/p\u003e\u003cp\u003eresonxk is equivalent to a group of resonk filters, with the same arguments, serially connected. Using a stack of a larger number of filters allows a sharper cutoff.\n\u003c/p\u003e\u003cpre\u003e kres  resonxk  ksig, kcf, kbw[, inumlayer, iscl, istor]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/resonxk.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#resonxk",
        "fct-type": "function",
        "title": "resonxk"
      },
      "index": {
        "description": "Control signal resonant filter stack resonxk is equivalent to group of resonk filters with the same arguments serially connected Using stack of larger number of filters allows sharper cutoff kres resonxk ksig kcf kbw inumlayer iscl istor csound doc http www.csounds.com manual html resonxk.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "resonxk",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:resony",
      "description": {
        "fct-descr": "\u003cp\u003eA bank of second-order bandpass filters, connected in parallel.\n\u003c/p\u003e\u003cpre\u003e ares  resony  asig, kbf, kbw, inum, ksep [, isepmode] [, iscl] [, iskip]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/resony.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e D -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#resony",
        "fct-type": "function",
        "title": "resony"
      },
      "index": {
        "description": "bank of second-order bandpass filters connected in parallel ares resony asig kbf kbw inum ksep isepmode iscl iskip csound doc http www.csounds.com manual html resony.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "resony",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eD-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eD-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:resonz",
      "description": {
        "fct-descr": "\u003cp\u003eA bandpass filter with variable frequency response.\n\u003c/p\u003e\u003cp\u003eImplementations of a second-order, two-pole two-zero bandpass filter with variable frequency response.\n\u003c/p\u003e\u003cpre\u003e ares  resonz  asig, kcf, kbw [, iscl] [, iskip]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/resonz.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#resonz",
        "fct-type": "function",
        "title": "resonz"
      },
      "index": {
        "description": "bandpass filter with variable frequency response Implementations of second-order two-pole two-zero bandpass filter with variable frequency response ares resonz asig kcf kbw iscl iskip csound doc http www.csounds.com manual html resonz.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "resonz",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:reverb",
      "description": {
        "fct-descr": "\u003cp\u003eReverberates an input signal with a &#226;&#128;&#156;natural room&#226;&#128;&#157; frequency respon\u003c/p\u003e\u003cpre\u003e ares  reverb  asig, krvt [, iskip]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/reverb.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#reverb",
        "fct-type": "function",
        "title": "reverb"
      },
      "index": {
        "description": "Reverberates an input signal with natural room frequency respon ares reverb asig krvt iskip csound doc http www.csounds.com manual html reverb.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "reverb",
        "normalized": "Sig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:reverb2",
      "description": {
        "fct-descr": "\u003cp\u003eSame as the nreverb opcode.\n\u003c/p\u003e\u003cpre\u003e ares  reverb2  asig, ktime, khdif [, iskip] [,inumCombs] \\\n           [, ifnCombs] [, inumAlpas] [, ifnAlpas]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/reverb2.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#reverb2",
        "fct-type": "function",
        "title": "reverb2"
      },
      "index": {
        "description": "Same as the nreverb opcode ares reverb2 asig ktime khdif iskip inumCombs ifnCombs inumAlpas ifnAlpas csound doc http www.csounds.com manual html reverb2.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "reverb2",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:reverbsc",
      "description": {
        "fct-descr": "\u003cp\u003e8 delay line stereo FDN reverb, based on work by Sean Costello\n\u003c/p\u003e\u003cp\u003e8 delay line stereo FDN reverb, with feedback matrix based upon physical\n \t\tmodeling scattering junction of 8 lossless waveguides of equal characteristic\n \t\timpedance. Based on Csound orchestra version by Sean Costello.\n\u003c/p\u003e\u003cpre\u003e aoutL, aoutR  reverbsc  ainL, ainR, kfblvl, kfco[, israte[, ipitchm[, iskip]]] \n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/reverbsc.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#reverbsc",
        "fct-type": "function",
        "title": "reverbsc"
      },
      "index": {
        "description": "delay line stereo FDN reverb based on work by Sean Costello delay line stereo FDN reverb with feedback matrix based upon physical modeling scattering junction of lossless waveguides of equal characteristic impedance Based on Csound orchestra version by Sean Costello aoutL aoutR reverbsc ainL ainR kfblvl kfco israte ipitchm iskip csound doc http www.csounds.com manual html reverbsc.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "reverbsc",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:rezzy",
      "description": {
        "fct-descr": "\u003cp\u003eA resonant low-pass filter.\n\u003c/p\u003e\u003cpre\u003e ares  rezzy  asig, xfco, xres [, imode, iskip]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/rezzy.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#rezzy",
        "fct-type": "function",
        "title": "rezzy"
      },
      "index": {
        "description": "resonant low-pass filter ares rezzy asig xfco xres imode iskip csound doc http www.csounds.com manual html rezzy.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "rezzy",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:samphold",
      "description": {
        "fct-descr": "\u003cp\u003ePerforms a sample-and-hold operation on its input.\n\u003c/p\u003e\u003cpre\u003e ares  samphold  asig, agate [, ival] [, ivstor]\n kres  samphold  ksig, kgate [, ival] [, ivstor]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/samphold.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#samphold",
        "fct-type": "function",
        "title": "samphold"
      },
      "index": {
        "description": "Performs sample-and-hold operation on its input ares samphold asig agate ival ivstor kres samphold ksig kgate ival ivstor csound doc http www.csounds.com manual html samphold.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "samphold",
        "normalized": "Sig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:space",
      "description": {
        "fct-descr": "\u003cp\u003eDistributes an input signal among 4 channels using cartesian coordinates.\n\u003c/p\u003e\u003cp\u003espace takes an input signal and distributes it among 4 channels using Cartesian xy coordinates to calculate the balance of the outputs. The xy coordinates can be defined in a separate text file and accessed through a Function statement in the score using Gen28, or they can be specified using the optional kx, ky arguments. The advantages to the former are:\n\u003c/p\u003e\u003cpre\u003e a1, a2, a3, a4   space  asig, ifn, ktime, kreverbsend, kx, ky\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/space.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Tab -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#space",
        "fct-type": "function",
        "title": "space"
      },
      "index": {
        "description": "Distributes an input signal among channels using cartesian coordinates space takes an input signal and distributes it among channels using Cartesian xy coordinates to calculate the balance of the outputs The xy coordinates can be defined in separate text file and accessed through Function statement in the score using Gen28 or they can be specified using the optional kx ky arguments The advantages to the former are a1 a2 a3 a4 space asig ifn ktime kreverbsend kx ky csound doc http www.csounds.com manual html space.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "space",
        "normalized": "Sig-\u003eTab-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eTab-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:spat3d",
      "description": {
        "fct-descr": "\u003cp\u003ePositions the input sound in a 3D space and allows moving the sound at k-rate.\n\u003c/p\u003e\u003cp\u003eThis opcode positions the input sound in a 3D space, with optional simulation of room acoustics, in various output formats. spat3d allows moving the sound at k-rate (this movement is interpolated internally to eliminate \u003ca\u003ezipper noise\u003c/a\u003e if sr not equal to kr).\n\u003c/p\u003e\u003cpre\u003e aW, aX, aY, aZ  spat3d  ain, kX, kY, kZ, idist, ift, imode, imdel, iovr [, istor]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/spat3d.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#spat3d",
        "fct-type": "function",
        "title": "spat3d"
      },
      "index": {
        "description": "Positions the input sound in space and allows moving the sound at k-rate This opcode positions the input sound in space with optional simulation of room acoustics in various output formats spat3d allows moving the sound at k-rate this movement is interpolated internally to eliminate zipper noise if sr not equal to kr aW aX aY aZ spat3d ain kX kY kZ idist ift imode imdel iovr istor csound doc http www.csounds.com manual html spat3d.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "spat3d",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:spat3di",
      "description": {
        "fct-descr": "\u003cp\u003ePositions the input sound in a 3D space with the sound source position set at i-time.\n\u003c/p\u003e\u003cp\u003eThis opcode positions the input sound in a 3D space, with optional simulation of room acoustics, in various output formats. With spat3di, sound source position is set at i-time.\n\u003c/p\u003e\u003cpre\u003e aW, aX, aY, aZ  spat3di  ain, iX, iY, iZ, idist, ift, imode [, istor]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/spat3di.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#spat3di",
        "fct-type": "function",
        "title": "spat3di"
      },
      "index": {
        "description": "Positions the input sound in space with the sound source position set at i-time This opcode positions the input sound in space with optional simulation of room acoustics in various output formats With spat3di sound source position is set at i-time aW aX aY aZ spat3di ain iX iY iZ idist ift imode istor csound doc http www.csounds.com manual html spat3di.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "spat3di",
        "normalized": "Sig-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:spat3dt",
      "description": {
        "fct-descr": "\u003cp\u003eCan be used to render an impulse response for a 3D space at i-time.\n\u003c/p\u003e\u003cp\u003eThis opcode positions the input sound in a 3D space, with optional simulation of room acoustics, in various output formats. spat3dt can be used to render the impulse response at i-time, storing output in a function table, suitable for convolution.\n\u003c/p\u003e\u003cpre\u003e  spat3dt  ioutft, iX, iY, iZ, idist, ift, imode, irlen [, iftnocl]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/spat3dt.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#spat3dt",
        "fct-type": "function",
        "title": "spat3dt"
      },
      "index": {
        "description": "Can be used to render an impulse response for space at i-time This opcode positions the input sound in space with optional simulation of room acoustics in various output formats spat3dt can be used to render the impulse response at i-time storing output in function table suitable for convolution spat3dt ioutft iX iY iZ idist ift imode irlen iftnocl csound doc http www.csounds.com manual html spat3dt.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "spat3dt",
        "normalized": "D-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:spdist",
      "description": {
        "fct-descr": "\u003cp\u003eCalculates distance values from xy coordinates.\n\u003c/p\u003e\u003cp\u003espdist uses the same xy data as space, also either from a text file using Gen28 or from x and y arguments given to the unit directly. The purpose of this unit is to make available the values for distance that are calculated from the xy coordinates.\n\u003c/p\u003e\u003cpre\u003e k1  spdist  ifn, ktime, kx, ky\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/spdist.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Tab -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#spdist",
        "fct-type": "function",
        "title": "spdist"
      },
      "index": {
        "description": "Calculates distance values from xy coordinates spdist uses the same xy data as space also either from text file using Gen28 or from and arguments given to the unit directly The purpose of this unit is to make available the values for distance that are calculated from the xy coordinates k1 spdist ifn ktime kx ky csound doc http www.csounds.com manual html spdist.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "spdist",
        "normalized": "Tab-\u003eSig-\u003eSig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Tab-\u003eSig-\u003eSig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:spsend",
      "description": {
        "fct-descr": "\u003cp\u003eGenerates output signals based on a previously defined space opcode.\n\u003c/p\u003e\u003cp\u003espsend depends upon the existence of a previously defined space. The output signals from spsend are derived from the values given for xy and reverb in the space and are ready to be sent to local or global reverb units (see example below).\n\u003c/p\u003e\u003cpre\u003e a1, a2, a3, a4  spsend &#160;\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/spsend.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "a",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#spsend",
        "fct-type": "function",
        "title": "spsend"
      },
      "index": {
        "description": "Generates output signals based on previously defined space opcode spsend depends upon the existence of previously defined space The output signals from spsend are derived from the values given for xy and reverb in the space and are ready to be sent to local or global reverb units see example below a1 a2 a3 a4 spsend csound doc http www.csounds.com manual html spsend.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "spsend",
        "normalized": "",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:statevar",
      "description": {
        "fct-descr": "\u003cp\u003eState-variable filter.\n\u003c/p\u003e\u003cp\u003eStatevar is a new digital implementation of the analogue state-variable filter. \n This filter has four simultaneous outputs: high-pass, low-pass,\n band-pass and band-reject. This filter uses oversampling for sharper\n resonance (default: 3 times oversampling). It includes a\n resonance limiter that prevents the filter from getting unstable.\n\u003c/p\u003e\u003cpre\u003e ahp,alp,abp,abr  statevar  ain, kcf, kq [, iosamps, istor]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/statevar.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#statevar",
        "fct-type": "function",
        "title": "statevar"
      },
      "index": {
        "description": "State-variable filter Statevar is new digital implementation of the analogue state-variable filter This filter has four simultaneous outputs high-pass low-pass band-pass and band-reject This filter uses oversampling for sharper resonance default times oversampling It includes resonance limiter that prevents the filter from getting unstable ahp alp abp abr statevar ain kcf kq iosamps istor csound doc http www.csounds.com manual html statevar.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "statevar",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:svfilter",
      "description": {
        "fct-descr": "\u003cp\u003eA resonant second order filter, with simultaneous lowpass, highpass and bandpass outputs.\n\u003c/p\u003e\u003cp\u003eImplementation of a resonant second order filter, with simultaneous lowpass, highpass and bandpass outputs.\n\u003c/p\u003e\u003cpre\u003e alow, ahigh, aband  svfilter   asig, kcf, kq [, iscl]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/svfilter.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#svfilter",
        "fct-type": "function",
        "title": "svfilter"
      },
      "index": {
        "description": "resonant second order filter with simultaneous lowpass highpass and bandpass outputs Implementation of resonant second order filter with simultaneous lowpass highpass and bandpass outputs alow ahigh aband svfilter asig kcf kq iscl csound doc http www.csounds.com manual html svfilter.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "svfilter",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:tbvcf",
      "description": {
        "fct-descr": "\u003cp\u003eModels some of the filter characteristics of a Roland TB303 voltage-controlled filter.\n\u003c/p\u003e\u003cp\u003eThis opcode attempts to model some of the filter characteristics of a Roland TB303 voltage-controlled filter. Euler's method is used to approximate the system, rather than traditional filter methods. Cutoff frequency, Q, and distortion are all coupled. Empirical methods were used to try to unentwine,  but frequency is only approximate as a result. Future fixes for some problems with this opcode may break existing orchestras relying on this version of tbvcf.\n\u003c/p\u003e\u003cpre\u003e ares  tbvcf  asig, xfco, xres, kdist, kasym [, iskip]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/tbvcf.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#tbvcf",
        "fct-type": "function",
        "title": "tbvcf"
      },
      "index": {
        "description": "Models some of the filter characteristics of Roland TB303 voltage-controlled filter This opcode attempts to model some of the filter characteristics of Roland TB303 voltage-controlled filter Euler method is used to approximate the system rather than traditional filter methods Cutoff frequency and distortion are all coupled Empirical methods were used to try to unentwine but frequency is only approximate as result Future fixes for some problems with this opcode may break existing orchestras relying on this version of tbvcf ares tbvcf asig xfco xres kdist kasym iskip csound doc http www.csounds.com manual html tbvcf.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "tbvcf",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:tlineto",
      "description": {
        "fct-descr": "\u003cp\u003eGenerate glissandos starting from a control signal.\n\u003c/p\u003e\u003cp\u003eGenerate glissandos starting from a control signal with a trigger.\n\u003c/p\u003e\u003cpre\u003e kres  tlineto  ksig, ktime, ktrig\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/tlineto.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#tlineto",
        "fct-type": "function",
        "title": "tlineto"
      },
      "index": {
        "description": "Generate glissandos starting from control signal Generate glissandos starting from control signal with trigger kres tlineto ksig ktime ktrig csound doc http www.csounds.com manual html tlineto.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "tlineto",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:tone",
      "description": {
        "fct-descr": "\u003cp\u003eA first-order recursive low-pass filter with variable frequency response.\n\u003c/p\u003e\u003cpre\u003e ares  tone  asig, khp [, iskip]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/tone.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#tone",
        "fct-type": "function",
        "title": "tone"
      },
      "index": {
        "description": "first-order recursive low-pass filter with variable frequency response ares tone asig khp iskip csound doc http www.csounds.com manual html tone.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "tone",
        "normalized": "Sig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:tonek",
      "description": {
        "fct-descr": "\u003cp\u003eA first-order recursive low-pass filter with variable frequency response.\n\u003c/p\u003e\u003cpre\u003e kres  tonek  ksig, khp [, iskip]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/tonek.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#tonek",
        "fct-type": "function",
        "title": "tonek"
      },
      "index": {
        "description": "first-order recursive low-pass filter with variable frequency response kres tonek ksig khp iskip csound doc http www.csounds.com manual html tonek.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "tonek",
        "normalized": "Sig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:tonex",
      "description": {
        "fct-descr": "\u003cp\u003eEmulates a stack of filters using the tone opcode.\n\u003c/p\u003e\u003cp\u003etonex is equivalent to a filter consisting of more layers of tone with the same arguments, serially connected. Using a stack of a larger number of filters allows a sharper cutoff. They are faster than using a larger number instances in a Csound orchestra of the old opcodes, because only one initialization and k- cycle are needed at time and the audio loop falls entirely inside the cache memory of processor.\n\u003c/p\u003e\u003cpre\u003e ares  tonex   asig, khp [, inumlayer] [, iskip]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/tonex.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#tonex",
        "fct-type": "function",
        "title": "tonex"
      },
      "index": {
        "description": "Emulates stack of filters using the tone opcode tonex is equivalent to filter consisting of more layers of tone with the same arguments serially connected Using stack of larger number of filters allows sharper cutoff They are faster than using larger number instances in Csound orchestra of the old opcodes because only one initialization and cycle are needed at time and the audio loop falls entirely inside the cache memory of processor ares tonex asig khp inumlayer iskip csound doc http www.csounds.com manual html tonex.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "tonex",
        "normalized": "Sig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:upsamp",
      "description": {
        "fct-descr": "\u003cp\u003eModify a signal by up-sampling.\n\u003c/p\u003e\u003cpre\u003e ares  upsamp  ksig\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/upsamp.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#upsamp",
        "fct-type": "function",
        "title": "upsamp"
      },
      "index": {
        "description": "Modify signal by up-sampling ares upsamp ksig csound doc http www.csounds.com manual html upsamp.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "upsamp",
        "normalized": "Sig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:vaget",
      "description": {
        "fct-descr": "\u003cp\u003eAccess values of the current buffer of an a-rate variable by indexing.\n\u003c/p\u003e\u003cp\u003eAccess values of the current buffer of an a-rate variable by indexing.\n       Useful for doing sample-by-sample manipulation at k-rate without using\n       setksmps 1.\n\u003c/p\u003e\u003cpre\u003e kval  vaget  kndx, avar\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vaget.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#vaget",
        "fct-type": "function",
        "title": "vaget"
      },
      "index": {
        "description": "Access values of the current buffer of an a-rate variable by indexing Access values of the current buffer of an a-rate variable by indexing Useful for doing sample-by-sample manipulation at k-rate without using setksmps kval vaget kndx avar csound doc http www.csounds.com manual html vaget.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "vaget",
        "normalized": "Sig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:valpass",
      "description": {
        "fct-descr": "\u003cp\u003eVariably reverberates an input signal with a flat frequency response.\n\u003c/p\u003e\u003cpre\u003e ares  valpass  asig, krvt, xlpt, imaxlpt [, iskip] [, insmps]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/valpass.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#valpass",
        "fct-type": "function",
        "title": "valpass"
      },
      "index": {
        "description": "Variably reverberates an input signal with flat frequency response ares valpass asig krvt xlpt imaxlpt iskip insmps csound doc http www.csounds.com manual html valpass.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "valpass",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:vaset",
      "description": {
        "fct-descr": "\u003cp\u003eWrite value of into the current buffer of an a-rate variable by index.\n\u003c/p\u003e\u003cp\u003eWrite values into the current buffer of an a-rate variable at the given\n       index.  Useful for doing sample-by-sample manipulation at k-rate without\n       using setksmps 1.\n\u003c/p\u003e\u003cpre\u003e  vaset  kval, kndx, avar\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vaset.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#vaset",
        "fct-type": "function",
        "title": "vaset"
      },
      "index": {
        "description": "Write value of into the current buffer of an a-rate variable by index Write values into the current buffer of an a-rate variable at the given index Useful for doing sample-by-sample manipulation at k-rate without using setksmps vaset kval kndx avar csound doc http www.csounds.com manual html vaset.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "vaset",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:vbap",
      "description": {
        "fct-descr": "\u003cp\u003eDistributes an audio signal among many channels.\n\u003c/p\u003e\u003cp\u003eDistributes an audio signal amongmany channels, up to 64.\n\u003c/p\u003e\u003cpre\u003e ar1[, ar2...]  vbap  asig, kazim [,\n         kelev] [, kspread] [, ilayout]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vbap.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#vbap",
        "fct-type": "function",
        "title": "vbap"
      },
      "index": {
        "description": "Distributes an audio signal among many channels Distributes an audio signal amongmany channels up to ar1 ar2 vbap asig kazim kelev kspread ilayout csound doc http www.csounds.com manual html vbap.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "vbap",
        "normalized": "Sig-\u003eSig-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:vbap16",
      "description": {
        "fct-descr": "\u003cp\u003eDistributes an audio signal among 16 channels.\n\u003c/p\u003e\u003cpre\u003e ar1, ..., ar16  vbap16  asig, kazim [, kelev] [, kspread]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vbap16.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#vbap16",
        "fct-type": "function",
        "title": "vbap16"
      },
      "index": {
        "description": "Distributes an audio signal among channels ar1 ar16 vbap16 asig kazim kelev kspread csound doc http www.csounds.com manual html vbap16.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "vbap16",
        "normalized": "Sig-\u003eSig-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:vbap16move",
      "description": {
        "fct-descr": "\u003cp\u003eDistribute an audio signal among 16 channels with moving virtual sources.\n\u003c/p\u003e\u003cpre\u003e ar1, ..., ar16  vbap16move  asig, idur, ispread, ifldnum, ifld1 \\\n           [, ifld2] [...]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vbap16move.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e D -\u003e D -\u003e D -\u003e [D] -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#vbap16move",
        "fct-type": "function",
        "title": "vbap16move"
      },
      "index": {
        "description": "Distribute an audio signal among channels with moving virtual sources ar1 ar16 vbap16move asig idur ispread ifldnum ifld1 ifld2 csound doc http www.csounds.com manual html vbap16move.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "vbap16move",
        "normalized": "Sig-\u003eD-\u003eD-\u003eD-\u003e[D]-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eD-\u003eD-\u003eD-\u003e[D]-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:vbap4",
      "description": {
        "fct-descr": "\u003cp\u003eDistributes an audio signal among 4 channels.\n\u003c/p\u003e\u003cpre\u003e ar1, ar2, ar3, ar4  vbap4  asig, kazim [, kelev] [, kspread]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vbap4.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#vbap4",
        "fct-type": "function",
        "title": "vbap4"
      },
      "index": {
        "description": "Distributes an audio signal among channels ar1 ar2 ar3 ar4 vbap4 asig kazim kelev kspread csound doc http www.csounds.com manual html vbap4.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "vbap4",
        "normalized": "Sig-\u003eSig-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:vbap4move",
      "description": {
        "fct-descr": "\u003cp\u003eDistributes an audio signal among 4 channels with moving virtual sources.\n\u003c/p\u003e\u003cpre\u003e ar1, ar2, ar3, ar4  vbap4move  asig, idur, ispread, ifldnum, ifld1 \\\n           [, ifld2] [...]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vbap4move.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e D -\u003e D -\u003e D -\u003e [D] -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#vbap4move",
        "fct-type": "function",
        "title": "vbap4move"
      },
      "index": {
        "description": "Distributes an audio signal among channels with moving virtual sources ar1 ar2 ar3 ar4 vbap4move asig idur ispread ifldnum ifld1 ifld2 csound doc http www.csounds.com manual html vbap4move.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "vbap4move",
        "normalized": "Sig-\u003eD-\u003eD-\u003eD-\u003e[D]-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eD-\u003eD-\u003eD-\u003e[D]-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:vbap8",
      "description": {
        "fct-descr": "\u003cp\u003eDistributes an audio signal among 8 channels.\n\u003c/p\u003e\u003cpre\u003e ar1, ..., ar8  vbap8  asig, kazim [, kelev] [, kspread]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vbap8.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#vbap8",
        "fct-type": "function",
        "title": "vbap8"
      },
      "index": {
        "description": "Distributes an audio signal among channels ar1 ar8 vbap8 asig kazim kelev kspread csound doc http www.csounds.com manual html vbap8.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "vbap8",
        "normalized": "Sig-\u003eSig-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:vbap8move",
      "description": {
        "fct-descr": "\u003cp\u003eDistributes an audio signal among 8 channels with moving virtual sources.\n\u003c/p\u003e\u003cpre\u003e ar1, ..., ar8  vbap8move  asig, idur, ispread, ifldnum, ifld1 \\\n           [, ifld2] [...]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vbap8move.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e D -\u003e D -\u003e D -\u003e [D] -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#vbap8move",
        "fct-type": "function",
        "title": "vbap8move"
      },
      "index": {
        "description": "Distributes an audio signal among channels with moving virtual sources ar1 ar8 vbap8move asig idur ispread ifldnum ifld1 ifld2 csound doc http www.csounds.com manual html vbap8move.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "vbap8move",
        "normalized": "Sig-\u003eD-\u003eD-\u003eD-\u003e[D]-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eD-\u003eD-\u003eD-\u003e[D]-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:vbapg",
      "description": {
        "fct-descr": "\u003cp\u003eCalculates the gains for a sound location between multiple channels.\n\u003c/p\u003e\u003cp\u003eCalculates the gains for a sound location for up to 64.\n\u003c/p\u003e\u003cpre\u003e k1[, k2...]  vbapg  kazim [,kelev] [, kspread] [, ilayout]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vbapg.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#vbapg",
        "fct-type": "function",
        "title": "vbapg"
      },
      "index": {
        "description": "Calculates the gains for sound location between multiple channels Calculates the gains for sound location for up to k1 k2 vbapg kazim kelev kspread ilayout csound doc http www.csounds.com manual html vbapg.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "vbapg",
        "normalized": "Sig-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:vbaplsinit",
      "description": {
        "fct-descr": "\u003cp\u003eConfigures VBAP output according to loudspeaker parameters.\n\u003c/p\u003e\u003cpre\u003e  vbaplsinit  idim, ilsnum [, idir1] [, idir2] [...] [, idir32]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vbaplsinit.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#vbaplsinit",
        "fct-type": "function",
        "title": "vbaplsinit"
      },
      "index": {
        "description": "Configures VBAP output according to loudspeaker parameters vbaplsinit idim ilsnum idir1 idir2 idir32 csound doc http www.csounds.com manual html vbaplsinit.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "vbaplsinit",
        "normalized": "D-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:vbapmove",
      "description": {
        "fct-descr": "\u003cp\u003eDistributes an audio signal among many channels with moving virtual sources.\n\u003c/p\u003e\u003cp\u003eDistributes an audio signal among upto 64 channels with moving\n       virtual sources.\n\u003c/p\u003e\u003cpre\u003e ar1[, ar2...]  vbapmove  asig, idur, ispread, ifldnum, ifld1 \\\n           [, ifld2] [...]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vbapmove.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e D -\u003e D -\u003e D -\u003e [D] -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#vbapmove",
        "fct-type": "function",
        "title": "vbapmove"
      },
      "index": {
        "description": "Distributes an audio signal among many channels with moving virtual sources Distributes an audio signal among upto channels with moving virtual sources ar1 ar2 vbapmove asig idur ispread ifldnum ifld1 ifld2 csound doc http www.csounds.com manual html vbapmove.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "vbapmove",
        "normalized": "Sig-\u003eD-\u003eD-\u003eD-\u003e[D]-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eD-\u003eD-\u003eD-\u003e[D]-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:vbapz",
      "description": {
        "fct-descr": "\u003cp\u003eWrites a multi-channel audio signal to a ZAK array.\n\u003c/p\u003e\u003cpre\u003e  vbapz  inumchnls, istartndx, asig, kazim [, kelev] [, kspread]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vbapz.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e Sig -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#vbapz",
        "fct-type": "function",
        "title": "vbapz"
      },
      "index": {
        "description": "Writes multi-channel audio signal to ZAK array vbapz inumchnls istartndx asig kazim kelev kspread csound doc http www.csounds.com manual html vbapz.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "vbapz",
        "normalized": "D-\u003eD-\u003eSig-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eSig-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:vbapzmove",
      "description": {
        "fct-descr": "\u003cp\u003eWrites a multi-channel audio signal to a ZAK array with moving virtual sources.\n\u003c/p\u003e\u003cpre\u003e  vbapzmove  inumchnls, istartndx, asig, idur, ispread, ifldnum, ifld1, \\\n           ifld2, [...]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vbapzmove.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e D -\u003e D -\u003e D -\u003e [D] -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#vbapzmove",
        "fct-type": "function",
        "title": "vbapzmove"
      },
      "index": {
        "description": "Writes multi-channel audio signal to ZAK array with moving virtual sources vbapzmove inumchnls istartndx asig idur ispread ifldnum ifld1 ifld2 csound doc http www.csounds.com manual html vbapzmove.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "vbapzmove",
        "normalized": "Sig-\u003eD-\u003eD-\u003eD-\u003e[D]-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eD-\u003eD-\u003eD-\u003e[D]-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:vcomb",
      "description": {
        "fct-descr": "\u003cp\u003eVariably reverberates an input signal with a &#226;&#128;&#156;colored&#226;&#128;&#157; frequency respon\u003c/p\u003e\u003cpre\u003e ares  vcomb  asig, krvt, xlpt, imaxlpt [, iskip] [, insmps]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vcomb.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#vcomb",
        "fct-type": "function",
        "title": "vcomb"
      },
      "index": {
        "description": "Variably reverberates an input signal with colored frequency respon ares vcomb asig krvt xlpt imaxlpt iskip insmps csound doc http www.csounds.com manual html vcomb.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "vcomb",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:vdel_k",
      "description": {
        "fct-descr": "\u003cp\u003eDelays an input signal by some time interval.\n\u003c/p\u003e\u003cp\u003ek-rate delay opcodes\n\u003c/p\u003e\u003cpre\u003e kr  vdel_k   ksig, kdel, imdel[, imode]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/delayk.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#vdel_k",
        "fct-type": "function",
        "title": "vdel_k"
      },
      "index": {
        "description": "Delays an input signal by some time interval k-rate delay opcodes kr vdel ksig kdel imdel imode csound doc http www.csounds.com manual html delayk.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "vdel_k",
        "normalized": "Sig-\u003eSig-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:vdelay",
      "description": {
        "fct-descr": "\u003cp\u003eAn interpolating variable time delay.\n\u003c/p\u003e\u003cp\u003eThis is an interpolating variable time delay, it is not very different from the existing implementation (deltapi), it is only easier to use.\n\u003c/p\u003e\u003cpre\u003e ares  vdelay  asig, adel, imaxdel [, iskip]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vdelay.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#vdelay",
        "fct-type": "function",
        "title": "vdelay"
      },
      "index": {
        "description": "An interpolating variable time delay This is an interpolating variable time delay it is not very different from the existing implementation deltapi it is only easier to use ares vdelay asig adel imaxdel iskip csound doc http www.csounds.com manual html vdelay.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "vdelay",
        "normalized": "Sig-\u003eSig-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:vdelay3",
      "description": {
        "fct-descr": "\u003cp\u003eA variable time delay with cubic interpolation.\n\u003c/p\u003e\u003cp\u003evdelay3 is experimental. It is the same as vdelay except that it uses cubic interpolation. (New in Version 3.50.)\n\u003c/p\u003e\u003cpre\u003e ares  vdelay3  asig, adel, imaxdel [, iskip]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vdelay3.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#vdelay3",
        "fct-type": "function",
        "title": "vdelay3"
      },
      "index": {
        "description": "variable time delay with cubic interpolation vdelay3 is experimental It is the same as vdelay except that it uses cubic interpolation New in Version ares vdelay3 asig adel imaxdel iskip csound doc http www.csounds.com manual html vdelay3.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "vdelay3",
        "normalized": "Sig-\u003eSig-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:vdelayx",
      "description": {
        "fct-descr": "\u003cp\u003eA variable delay opcode with high quality interpolation.\n\u003c/p\u003e\u003cpre\u003e aout  vdelayx  ain, adl, imd, iws [, ist]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vdelayx.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#vdelayx",
        "fct-type": "function",
        "title": "vdelayx"
      },
      "index": {
        "description": "variable delay opcode with high quality interpolation aout vdelayx ain adl imd iws ist csound doc http www.csounds.com manual html vdelayx.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "vdelayx",
        "normalized": "Sig-\u003eSig-\u003eD-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eD-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:vdelayxq",
      "description": {
        "fct-descr": "\u003cp\u003eA 4-channel variable delay opcode with high quality interpolation.\n\u003c/p\u003e\u003cpre\u003e aout1, aout2, aout3, aout4  vdelayxq  ain1, ain2, ain3, ain4, adl, imd, iws [, ist]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vdelayxq.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e D -\u003e D -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#vdelayxq",
        "fct-type": "function",
        "title": "vdelayxq"
      },
      "index": {
        "description": "channel variable delay opcode with high quality interpolation aout1 aout2 aout3 aout4 vdelayxq ain1 ain2 ain3 ain4 adl imd iws ist csound doc http www.csounds.com manual html vdelayxq.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "vdelayxq",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eD-\u003eD-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eD-\u003eD-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:vdelayxs",
      "description": {
        "fct-descr": "\u003cp\u003eA stereo variable delay opcode with high quality interpolation.\n\u003c/p\u003e\u003cpre\u003e aout1, aout2  vdelayxs  ain1, ain2, adl, imd, iws [, ist]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vdelayxs.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e D -\u003e D -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#vdelayxs",
        "fct-type": "function",
        "title": "vdelayxs"
      },
      "index": {
        "description": "stereo variable delay opcode with high quality interpolation aout1 aout2 vdelayxs ain1 ain2 adl imd iws ist csound doc http www.csounds.com manual html vdelayxs.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "vdelayxs",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eD-\u003eD-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eD-\u003eD-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:vdelayxw",
      "description": {
        "fct-descr": "\u003cp\u003eVariable delay opcodes with high quality interpolation.\n\u003c/p\u003e\u003cpre\u003e aout  vdelayxw  ain, adl, imd, iws [, ist]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vdelayxw.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#vdelayxw",
        "fct-type": "function",
        "title": "vdelayxw"
      },
      "index": {
        "description": "Variable delay opcodes with high quality interpolation aout vdelayxw ain adl imd iws ist csound doc http www.csounds.com manual html vdelayxw.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "vdelayxw",
        "normalized": "Sig-\u003eSig-\u003eD-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eD-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:vdelayxwq",
      "description": {
        "fct-descr": "\u003cp\u003eVariable delay opcodes with high quality interpolation.\n\u003c/p\u003e\u003cpre\u003e aout1, aout2, aout3, aout4  vdelayxwq  ain1, ain2, ain3, ain4, adl, \\\n           imd, iws [, ist]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vdelayxwq.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e D -\u003e D -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#vdelayxwq",
        "fct-type": "function",
        "title": "vdelayxwq"
      },
      "index": {
        "description": "Variable delay opcodes with high quality interpolation aout1 aout2 aout3 aout4 vdelayxwq ain1 ain2 ain3 ain4 adl imd iws ist csound doc http www.csounds.com manual html vdelayxwq.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "vdelayxwq",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eD-\u003eD-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eD-\u003eD-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:vdelayxws",
      "description": {
        "fct-descr": "\u003cp\u003eVariable delay opcodes with high quality interpolation.\n\u003c/p\u003e\u003cpre\u003e aout1, aout2  vdelayxws  ain1, ain2, adl, imd, iws [, ist]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vdelayxws.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e D -\u003e D -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#vdelayxws",
        "fct-type": "function",
        "title": "vdelayxws"
      },
      "index": {
        "description": "Variable delay opcodes with high quality interpolation aout1 aout2 vdelayxws ain1 ain2 adl imd iws ist csound doc http www.csounds.com manual html vdelayxws.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "vdelayxws",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eD-\u003eD-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eD-\u003eD-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:vlowres",
      "description": {
        "fct-descr": "\u003cp\u003eA bank of filters in which the cutoff frequency can be separated under user control.\n\u003c/p\u003e\u003cp\u003eA bank of filters in which the cutoff frequency can be separated under user control\n\u003c/p\u003e\u003cpre\u003e ares  vlowres  asig, kfco, kres, iord, ksep\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vlowres.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e D -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#vlowres",
        "fct-type": "function",
        "title": "vlowres"
      },
      "index": {
        "description": "bank of filters in which the cutoff frequency can be separated under user control bank of filters in which the cutoff frequency can be separated under user control ares vlowres asig kfco kres iord ksep csound doc http www.csounds.com manual html vlowres.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "vlowres",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eD-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eD-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:wguide1",
      "description": {
        "fct-descr": "\u003cp\u003eA simple waveguide model consisting of one delay-line and one first-order lowpass filter.\n\u003c/p\u003e\u003cpre\u003e ares  wguide1  asig, xfreq, kcutoff, kfeedback\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/wguide1.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#wguide1",
        "fct-type": "function",
        "title": "wguide1"
      },
      "index": {
        "description": "simple waveguide model consisting of one delay-line and one first-order lowpass filter ares wguide1 asig xfreq kcutoff kfeedback csound doc http www.csounds.com manual html wguide1.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "wguide1",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:wguide2",
      "description": {
        "fct-descr": "\u003cp\u003eA model of beaten plate consisting of two parallel delay-lines and two first-order lowpass filters.\n\u003c/p\u003e\u003cpre\u003e ares  wguide2  asig, xfreq1, xfreq2, kcutoff1, kcutoff2, \\\n           kfeedback1, kfeedback2\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/wguide2.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#wguide2",
        "fct-type": "function",
        "title": "wguide2"
      },
      "index": {
        "description": "model of beaten plate consisting of two parallel delay-lines and two first-order lowpass filters ares wguide2 asig xfreq1 xfreq2 kcutoff1 kcutoff2 kfeedback1 kfeedback2 csound doc http www.csounds.com manual html wguide2.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "wguide2",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:wrap",
      "description": {
        "fct-descr": "\u003cp\u003eWraps-around the signal that exceeds the low and high thresholds.\n\u003c/p\u003e\u003cpre\u003e ares  wrap  asig, klow, khigh\n ires  wrap  isig, ilow, ihigh\n kres  wrap  ksig, klow, khigh\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/wrap.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#wrap",
        "fct-type": "function",
        "title": "wrap"
      },
      "index": {
        "description": "Wraps-around the signal that exceeds the low and high thresholds ares wrap asig klow khigh ires wrap isig ilow ihigh kres wrap ksig klow khigh csound doc http www.csounds.com manual html wrap.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "wrap",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SignalModifiers.html#v:zfilter2",
      "description": {
        "fct-descr": "\u003cp\u003ePerforms filtering using a transposed form-II digital filter lattice with radial pole-shearing and angular pole-warping.\n\u003c/p\u003e\u003cp\u003eGeneral purpose custom filter with time-varying pole control. The filter coefficients implement the following difference equation:\n\u003c/p\u003e\u003cpre\u003e ares  zfilter2  asig, kdamp, kfreq, iM, iN, ib0, ib1, ..., ibM, \\\n           ia1,ia2, ..., iaN\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/zfilter2.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SignalModifiers",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e D -\u003e D -\u003e [D] -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SignalModifiers.html#zfilter2",
        "fct-type": "function",
        "title": "zfilter2"
      },
      "index": {
        "description": "Performs filtering using transposed form-II digital filter lattice with radial pole-shearing and angular pole-warping General purpose custom filter with time-varying pole control The filter coefficients implement the following difference equation ares zfilter2 asig kdamp kfreq iM iN ib0 ib1 ibM ia1 ia2 iaN csound doc http www.csounds.com manual html zfilter2.html",
        "hierarchy": "Csound Typed Opcode SignalModifiers",
        "module": "Csound.Typed.Opcode.SignalModifiers",
        "name": "zfilter2",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eD-\u003eD-\u003e[D]-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eD-\u003eD-\u003e[D]-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#",
      "description": {
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "module",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html",
        "fct-type": "module",
        "title": "SpectralProcessing"
      },
      "index": {
        "description": "",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "SpectralProcessing",
        "normalized": "",
        "package": "csound-expression-opcodes",
        "partial": "Spectral Processing",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:atsAdd",
      "description": {
        "fct-descr": "\u003cp\u003euses the data from an ATS analysis file to perform additive synthesis.\n\u003c/p\u003e\u003cp\u003eATSadd reads from an ATS analysis file and uses the data to perform additive synthesis using an internal array of interpolating oscillators.\n\u003c/p\u003e\u003cpre\u003e ar  ATSadd  ktimepnt, kfmod, iatsfile, ifn, ipartials[, ipartialoffset, \\\n             ipartialincr, igatefn]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/ATSadd.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e D -\u003e Tab -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#atsAdd",
        "fct-type": "function",
        "title": "atsAdd"
      },
      "index": {
        "description": "uses the data from an ATS analysis file to perform additive synthesis ATSadd reads from an ATS analysis file and uses the data to perform additive synthesis using an internal array of interpolating oscillators ar ATSadd ktimepnt kfmod iatsfile ifn ipartials ipartialoffset ipartialincr igatefn csound doc http www.csounds.com manual html ATSadd.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "atsAdd",
        "normalized": "Sig-\u003eSig-\u003eD-\u003eTab-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "Add",
        "signature": "Sig-\u003eSig-\u003eD-\u003eTab-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:atsAddnz",
      "description": {
        "fct-descr": "\u003cp\u003euses the data from an ATS analysis file to perform noise resynthesis.\n\u003c/p\u003e\u003cp\u003eATSaddnz reads from an ATS analysis file and uses the data to perform additive synthesis using a modified randi function.\n\u003c/p\u003e\u003cpre\u003e ar  ATSaddnz  ktimepnt, iatsfile, ibands[, ibandoffset, ibandincr]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/ATSaddnz.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#atsAddnz",
        "fct-type": "function",
        "title": "atsAddnz"
      },
      "index": {
        "description": "uses the data from an ATS analysis file to perform noise resynthesis ATSaddnz reads from an ATS analysis file and uses the data to perform additive synthesis using modified randi function ar ATSaddnz ktimepnt iatsfile ibands ibandoffset ibandincr csound doc http www.csounds.com manual html ATSaddnz.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "atsAddnz",
        "normalized": "Sig-\u003eD-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "Addnz",
        "signature": "Sig-\u003eD-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:atsBufread",
      "description": {
        "fct-descr": "\u003cp\u003ereads data from and ATS data file and stores it in an internal data table of frequency, amplitude pairs.\n\u003c/p\u003e\u003cp\u003eATSbufread reads data from and ATS data file and stores it in an internal data table of frequency, amplitude pairs.\n\u003c/p\u003e\u003cpre\u003e  ATSbufread  ktimepnt, kfmod, iatsfile, ipartials[, ipartialoffset, \\\n               ipartialincr]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/ATSbufread.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#atsBufread",
        "fct-type": "function",
        "title": "atsBufread"
      },
      "index": {
        "description": "reads data from and ATS data file and stores it in an internal data table of frequency amplitude pairs ATSbufread reads data from and ATS data file and stores it in an internal data table of frequency amplitude pairs ATSbufread ktimepnt kfmod iatsfile ipartials ipartialoffset ipartialincr csound doc http www.csounds.com manual html ATSbufread.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "atsBufread",
        "normalized": "Sig-\u003eSig-\u003eD-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "Bufread",
        "signature": "Sig-\u003eSig-\u003eD-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:atsCross",
      "description": {
        "fct-descr": "\u003cp\u003eperform cross synthesis from ATS analysis files.\n\u003c/p\u003e\u003cp\u003eATScross uses data from an ATS analysis file and data from an ATSbufread to perform cross synthesis.\n\u003c/p\u003e\u003cpre\u003e ar  ATScross  ktimepnt, kfmod, iatsfile, ifn, kmylev, kbuflev, ipartials \\\n               [, ipartialoffset, ipartialincr]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/ATScross.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e D -\u003e Tab -\u003e Sig -\u003e Sig -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#atsCross",
        "fct-type": "function",
        "title": "atsCross"
      },
      "index": {
        "description": "perform cross synthesis from ATS analysis files ATScross uses data from an ATS analysis file and data from an ATSbufread to perform cross synthesis ar ATScross ktimepnt kfmod iatsfile ifn kmylev kbuflev ipartials ipartialoffset ipartialincr csound doc http www.csounds.com manual html ATScross.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "atsCross",
        "normalized": "Sig-\u003eSig-\u003eD-\u003eTab-\u003eSig-\u003eSig-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "Cross",
        "signature": "Sig-\u003eSig-\u003eD-\u003eTab-\u003eSig-\u003eSig-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:atsInfo",
      "description": {
        "fct-descr": "\u003cp\u003ereads data out of the header of an ATS file.\n\u003c/p\u003e\u003cp\u003eatsinfo reads data out of the header of an ATS file.\n\u003c/p\u003e\u003cpre\u003e idata  ATSinfo  iatsfile, ilocation\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/ATSinfo.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e D",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#atsInfo",
        "fct-type": "function",
        "title": "atsInfo"
      },
      "index": {
        "description": "reads data out of the header of an ATS file atsinfo reads data out of the header of an ATS file idata ATSinfo iatsfile ilocation csound doc http www.csounds.com manual html ATSinfo.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "atsInfo",
        "normalized": "D-\u003eD-\u003eD",
        "package": "csound-expression-opcodes",
        "partial": "Info",
        "signature": "D-\u003eD-\u003eD"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:atsInterpread",
      "description": {
        "fct-descr": "\u003cp\u003eallows a user to determine the frequency envelope of any ATSbufread.\n\u003c/p\u003e\u003cp\u003eATSinterpread allows a user to determine the frequency envelope of any ATSbufread.\n\u003c/p\u003e\u003cpre\u003e kamp  ATSinterpread  kfreq\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/ATSinterpread.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#atsInterpread",
        "fct-type": "function",
        "title": "atsInterpread"
      },
      "index": {
        "description": "allows user to determine the frequency envelope of any ATSbufread ATSinterpread allows user to determine the frequency envelope of any ATSbufread kamp ATSinterpread kfreq csound doc http www.csounds.com manual html ATSinterpread.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "atsInterpread",
        "normalized": "Sig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "Interpread",
        "signature": "Sig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:atsPartialtap",
      "description": {
        "fct-descr": "\u003cp\u003ereturns a frequency, amplitude pair from an ATSbufread opcode.\n\u003c/p\u003e\u003cp\u003eATSpartialtap takes a partial number and returns a frequency, amplitude pair. The frequency and amplitude data comes from an ATSbufread opcode.\n\u003c/p\u003e\u003cpre\u003e kfrq, kamp  ATSpartialtap  ipartialnum\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/ATSpartialtap.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#atsPartialtap",
        "fct-type": "function",
        "title": "atsPartialtap"
      },
      "index": {
        "description": "returns frequency amplitude pair from an ATSbufread opcode ATSpartialtap takes partial number and returns frequency amplitude pair The frequency and amplitude data comes from an ATSbufread opcode kfrq kamp ATSpartialtap ipartialnum csound doc http www.csounds.com manual html ATSpartialtap.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "atsPartialtap",
        "normalized": "D-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "Partialtap",
        "signature": "D-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:atsRead",
      "description": {
        "fct-descr": "\u003cp\u003ereads data from an ATS file.\n\u003c/p\u003e\u003cp\u003eATSread returns the amplitude (kamp) and frequency (kfreq) information of a user specified partial contained in the ATS analysis file at the time indicated by the time pointer ktimepnt.\n\u003c/p\u003e\u003cpre\u003e kfreq, kamp  ATSread  ktimepnt, iatsfile, ipartial\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/ATSread.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e D -\u003e D -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#atsRead",
        "fct-type": "function",
        "title": "atsRead"
      },
      "index": {
        "description": "reads data from an ATS file ATSread returns the amplitude kamp and frequency kfreq information of user specified partial contained in the ATS analysis file at the time indicated by the time pointer ktimepnt kfreq kamp ATSread ktimepnt iatsfile ipartial csound doc http www.csounds.com manual html ATSread.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "atsRead",
        "normalized": "Sig-\u003eD-\u003eD-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "Read",
        "signature": "Sig-\u003eD-\u003eD-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:atsReadnz",
      "description": {
        "fct-descr": "\u003cp\u003ereads data from an ATS file.\n\u003c/p\u003e\u003cp\u003eATSreadnz returns the energy (kenergy) of a user specified noise band (1-25 bands) at the time indicated by the time pointer ktimepnt.\n\u003c/p\u003e\u003cpre\u003e kenergy  ATSreadnz  ktimepnt, iatsfile, iband\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/ATSreadnz.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#atsReadnz",
        "fct-type": "function",
        "title": "atsReadnz"
      },
      "index": {
        "description": "reads data from an ATS file ATSreadnz returns the energy kenergy of user specified noise band bands at the time indicated by the time pointer ktimepnt kenergy ATSreadnz ktimepnt iatsfile iband csound doc http www.csounds.com manual html ATSreadnz.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "atsReadnz",
        "normalized": "Sig-\u003eD-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "Readnz",
        "signature": "Sig-\u003eD-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:atsSinnoi",
      "description": {
        "fct-descr": "\u003cp\u003euses the data from an ATS analysis file to perform resynthesis.\n\u003c/p\u003e\u003cp\u003eATSsinnoi reads data from an ATS data file and uses the information to synthesize sines and noise together.\n\u003c/p\u003e\u003cpre\u003e ar  ATSsinnoi  ktimepnt, ksinlev, knzlev, kfmod, iatsfile, ipartials \\\n               [, ipartialoffset, ipartialincr]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/ATSsinnoi.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e D -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#atsSinnoi",
        "fct-type": "function",
        "title": "atsSinnoi"
      },
      "index": {
        "description": "uses the data from an ATS analysis file to perform resynthesis ATSsinnoi reads data from an ATS data file and uses the information to synthesize sines and noise together ar ATSsinnoi ktimepnt ksinlev knzlev kfmod iatsfile ipartials ipartialoffset ipartialincr csound doc http www.csounds.com manual html ATSsinnoi.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "atsSinnoi",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eD-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "Sinnoi",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eSig-\u003eD-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:binit",
      "description": {
        "fct-descr": "\u003cp\u003ePVS tracks to amplitude+frequency conversion.\n\u003c/p\u003e\u003cp\u003eThe binit opcode takes an input containg a TRACKS pv streaming signal (as generated,\n   for instance by partials) and converts it into a equal-bandwidth bin-frame containing amplitude\n   and frequency pairs (PVS_AMP_FREQ), suitable for overlap-add resynthesis (such as performed by \n   pvsynth) or further PVS streaming phase vocoder signal transformations. For each frequency bin,\n   it will look for a suitable track signal to fill it; if not found, the bin will be empty (0 amplitude).\n   If more than one track fits a certain bin, the one with highest amplitude will be chosen. This\n   means that not all of the input signal is actually \u003ccode\u003ebinned\u003c/code\u003e, the operation is lossy. However, in\n   many situations this loss is not perceptually relevant.\n\u003c/p\u003e\u003cpre\u003e fsig  binit  fin, isize\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/binit.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Spec -\u003e D -\u003e Spec",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#binit",
        "fct-type": "function",
        "title": "binit"
      },
      "index": {
        "description": "PVS tracks to amplitude frequency conversion The binit opcode takes an input containg TRACKS pv streaming signal as generated for instance by partials and converts it into equal-bandwidth bin-frame containing amplitude and frequency pairs PVS AMP FREQ suitable for overlap-add resynthesis such as performed by pvsynth or further PVS streaming phase vocoder signal transformations For each frequency bin it will look for suitable track signal to fill it if not found the bin will be empty amplitude If more than one track fits certain bin the one with highest amplitude will be chosen This means that not all of the input signal is actually binned the operation is lossy However in many situations this loss is not perceptually relevant fsig binit fin isize csound doc http www.csounds.com manual html binit.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "binit",
        "normalized": "Spec-\u003eD-\u003eSpec",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Spec-\u003eD-\u003eSpec"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:ktableseg",
      "description": {
        "fct-descr": "\u003cp\u003eDeprecated.\n\u003c/p\u003e\u003cp\u003eDeprecated. Use the tableseg opcode instead.\n\u003c/p\u003e\u003cpre\u003e  ktableseg  ifn1, idur1, ifn2 [, idur2] [, ifn3] [...]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/ktableseg.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Tab -\u003e D -\u003e Tab -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#ktableseg",
        "fct-type": "function",
        "title": "ktableseg"
      },
      "index": {
        "description": "Deprecated Deprecated Use the tableseg opcode instead ktableseg ifn1 idur1 ifn2 idur2 ifn3 csound doc http www.csounds.com manual html ktableseg.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "ktableseg",
        "normalized": "Tab-\u003eD-\u003eTab-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Tab-\u003eD-\u003eTab-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:lorismorph",
      "description": {
        "fct-descr": "\u003cp\u003eMorphs two stored sets of bandwidth-enhanced partials\n     and stores a new set of partials representing the morphed\n     sound. The morph is performed by linearly interpolating the\n     parameter envelopes (frequency, amplitude, and bandwidth, or\n     noisiness) of the bandwidth-enhanced partials according to\n     control-rate frequency, amplitude, and bandwidth morphing\n     functions.\n\u003c/p\u003e\u003cp\u003elorismorph morphs two stored sets of bandwidth-enhanced\n     partials and stores a new set of partials representing the morphed\n     sound. The morph is performed by linearly interpolating the\n     parameter envelopes (frequency, amplitude, and bandwidth, or\n     noisiness) of the bandwidth-enhanced partials according to\n     control-rate frequency, amplitude, and bandwidth morphing\n     functions.\n\u003c/p\u003e\u003cpre\u003e  lorismorph  isrcidx, itgtidx, istoreidx, kfreqmorphenv, kampmorphenv, kbwmorphenv\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/lorismorph.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e D -\u003e Sig -\u003e Sig -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#lorismorph",
        "fct-type": "function",
        "title": "lorismorph"
      },
      "index": {
        "description": "Morphs two stored sets of bandwidth-enhanced partials and stores new set of partials representing the morphed sound The morph is performed by linearly interpolating the parameter envelopes frequency amplitude and bandwidth or noisiness of the bandwidth-enhanced partials according to control-rate frequency amplitude and bandwidth morphing functions lorismorph morphs two stored sets of bandwidth-enhanced partials and stores new set of partials representing the morphed sound The morph is performed by linearly interpolating the parameter envelopes frequency amplitude and bandwidth or noisiness of the bandwidth-enhanced partials according to control-rate frequency amplitude and bandwidth morphing functions lorismorph isrcidx itgtidx istoreidx kfreqmorphenv kampmorphenv kbwmorphenv csound doc http www.csounds.com manual html lorismorph.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "lorismorph",
        "normalized": "D-\u003eD-\u003eD-\u003eSig-\u003eSig-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eD-\u003eSig-\u003eSig-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:lorisplay",
      "description": {
        "fct-descr": "\u003cp\u003erenders a stored set of bandwidth-enhanced partials using the method of Bandwidth-Enhanced Additive Synthesis implemented in the Loris software, applying control-rate frequency, amplitude, and bandwidth scaling envelopes.\n\u003c/p\u003e\u003cp\u003elorisplay renders a stored set of\n     bandwidth-enhanced partials using the method of Bandwidth-Enhanced\n     Additive Synthesis implemented in the Loris software, applying\n     control-rate frequency, amplitude, and bandwidth scaling\n     envelopes.\n\u003c/p\u003e\u003cpre\u003e ar  lorisplay  ireadidx, kfreqenv, kampenv, kbwenv\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/lorisplay.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#lorisplay",
        "fct-type": "function",
        "title": "lorisplay"
      },
      "index": {
        "description": "renders stored set of bandwidth-enhanced partials using the method of Bandwidth-Enhanced Additive Synthesis implemented in the Loris software applying control-rate frequency amplitude and bandwidth scaling envelopes lorisplay renders stored set of bandwidth-enhanced partials using the method of Bandwidth-Enhanced Additive Synthesis implemented in the Loris software applying control-rate frequency amplitude and bandwidth scaling envelopes ar lorisplay ireadidx kfreqenv kampenv kbwenv csound doc http www.csounds.com manual html lorisplay.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "lorisplay",
        "normalized": "D-\u003eSig-\u003eSig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eSig-\u003eSig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:lorisread",
      "description": {
        "fct-descr": "\u003cp\u003eImports a set of bandwidth-enhanced partials from a SDIF-format\n     data file, applying control-rate frequency, amplitude, and\n     bandwidth scaling envelopes, and stores the modified partials in\n     memory.\n\u003c/p\u003e\u003cp\u003elorisread imports a set of bandwidth-enhanced partials from a SDIF-format data file, applying control-rate frequency, amplitude, and bandwidth scaling envelopes, and stores the modified partials in memory.\n\u003c/p\u003e\u003cpre\u003e  lorisread  ktimpnt, ifilcod, istoreidx, kfreqenv, kampenv, kbwenv[, ifadetime]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/lorisread.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Str -\u003e D -\u003e Sig -\u003e Sig -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#lorisread",
        "fct-type": "function",
        "title": "lorisread"
      },
      "index": {
        "description": "Imports set of bandwidth-enhanced partials from SDIF-format data file applying control-rate frequency amplitude and bandwidth scaling envelopes and stores the modified partials in memory lorisread imports set of bandwidth-enhanced partials from SDIF-format data file applying control-rate frequency amplitude and bandwidth scaling envelopes and stores the modified partials in memory lorisread ktimpnt ifilcod istoreidx kfreqenv kampenv kbwenv ifadetime csound doc http www.csounds.com manual html lorisread.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "lorisread",
        "normalized": "Sig-\u003eStr-\u003eD-\u003eSig-\u003eSig-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eStr-\u003eD-\u003eSig-\u003eSig-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:lpfreson",
      "description": {
        "fct-descr": "\u003cp\u003eResynthesises a signal from the data passed internally by a previous lpread, applying formant shifting.\n\u003c/p\u003e\u003cpre\u003e ares  lpfreson  asig, kfrqratio\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/lpfreson.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#lpfreson",
        "fct-type": "function",
        "title": "lpfreson"
      },
      "index": {
        "description": "Resynthesises signal from the data passed internally by previous lpread applying formant shifting ares lpfreson asig kfrqratio csound doc http www.csounds.com manual html lpfreson.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "lpfreson",
        "normalized": "Sig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:lpinterp",
      "description": {
        "fct-descr": "\u003cp\u003eComputes a new set of poles from the interpolation between two analysis.\n\u003c/p\u003e\u003cpre\u003e  lpinterp  islot1, islot2, kmix\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/lpinterp.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#lpinterp",
        "fct-type": "function",
        "title": "lpinterp"
      },
      "index": {
        "description": "Computes new set of poles from the interpolation between two analysis lpinterp islot1 islot2 kmix csound doc http www.csounds.com manual html lpinterp.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "lpinterp",
        "normalized": "D-\u003eD-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:lpread",
      "description": {
        "fct-descr": "\u003cp\u003eReads a control file of time-ordered information frames.\n\u003c/p\u003e\u003cpre\u003e krmsr, krmso, kerr, kcps  lpread  ktimpnt, ifilcod [, inpoles] [, ifrmrate]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/lpread.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Str -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#lpread",
        "fct-type": "function",
        "title": "lpread"
      },
      "index": {
        "description": "Reads control file of time-ordered information frames krmsr krmso kerr kcps lpread ktimpnt ifilcod inpoles ifrmrate csound doc http www.csounds.com manual html lpread.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "lpread",
        "normalized": "Sig-\u003eStr-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eStr-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:lpreson",
      "description": {
        "fct-descr": "\u003cp\u003eResynthesises a signal from the data passed internally by a previous lpread.\n\u003c/p\u003e\u003cpre\u003e ares  lpreson  asig\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/lpreson.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#lpreson",
        "fct-type": "function",
        "title": "lpreson"
      },
      "index": {
        "description": "Resynthesises signal from the data passed internally by previous lpread ares lpreson asig csound doc http www.csounds.com manual html lpreson.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "lpreson",
        "normalized": "Sig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:lpslot",
      "description": {
        "fct-descr": "\u003cp\u003eSelects the slot to be use by further lp opcodes.\n\u003c/p\u003e\u003cpre\u003e  lpslot  islot\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/lpslot.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#lpslot",
        "fct-type": "function",
        "title": "lpslot"
      },
      "index": {
        "description": "Selects the slot to be use by further lp opcodes lpslot islot csound doc http www.csounds.com manual html lpslot.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "lpslot",
        "normalized": "D-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:partials",
      "description": {
        "fct-descr": "\u003cp\u003ePartial track spectral analysis.\n\u003c/p\u003e\u003cp\u003eThe partials opcode takes two input PV streaming signals containg AMP_FREQ and AMP_PHASE signals (as generated\n   for instance by pvsifd or in the first case, by pvsanal) and performs partial track analysis,\n   as described in Lazzarini et al, \u003ca\u003eTime-stretching using the Instantaneous Frequency Distribution and Partial\n   Tracking\u003c/a\u003e, Proc.of ICMC05, Barcelona. It generates a TRACKS PV streaming signal, containing amplitude, frequency, \n   phase and track ID for each output track. This type of signal will contain a variable number of output tracks,\n   up to the total number of analysis bins contained in the inputs (fftsize/2 + 1 bins). The second input (AMP_PHASE) \n   is optional, as it can take the same signal as the first input. In this case, however, all phase information will \n   be NULL and resynthesis using phase information cannot be performed.\n\u003c/p\u003e\u003cpre\u003e ftrks  partials  ffr, fphs, kthresh, kminpts, kmaxgap, imaxtracks\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/partials.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Spec -\u003e Spec -\u003e Sig -\u003e Sig -\u003e Sig -\u003e D -\u003e Spec",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#partials",
        "fct-type": "function",
        "title": "partials"
      },
      "index": {
        "description": "Partial track spectral analysis The partials opcode takes two input PV streaming signals containg AMP FREQ and AMP PHASE signals as generated for instance by pvsifd or in the first case by pvsanal and performs partial track analysis as described in Lazzarini et al Time-stretching using the Instantaneous Frequency Distribution and Partial Tracking Proc.of ICMC05 Barcelona It generates TRACKS PV streaming signal containing amplitude frequency phase and track ID for each output track This type of signal will contain variable number of output tracks up to the total number of analysis bins contained in the inputs fftsize bins The second input AMP PHASE is optional as it can take the same signal as the first input In this case however all phase information will be NULL and resynthesis using phase information cannot be performed ftrks partials ffr fphs kthresh kminpts kmaxgap imaxtracks csound doc http www.csounds.com manual html partials.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "partials",
        "normalized": "Spec-\u003eSpec-\u003eSig-\u003eSig-\u003eSig-\u003eD-\u003eSpec",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Spec-\u003eSpec-\u003eSig-\u003eSig-\u003eSig-\u003eD-\u003eSpec"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:pvadd",
      "description": {
        "fct-descr": "\u003cp\u003eReads from a pvoc file and uses the data to perform additive synthesis.\n\u003c/p\u003e\u003cp\u003epvadd reads from a pvoc file and uses the data to perform additive synthesis using an internal array of interpolating oscillators. The user supplies the wave table (usually one period of a sine wave), and can choose which analysis bins will be used in the re-synthesis.\n\u003c/p\u003e\u003cpre\u003e ares  pvadd  ktimpnt, kfmod, ifilcod, ifn, ibins [, ibinoffset] \\\n           [, ibinincr] [, iextractmode] [, ifreqlim] [, igatefn]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/pvadd.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Str -\u003e Tab -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#pvadd",
        "fct-type": "function",
        "title": "pvadd"
      },
      "index": {
        "description": "Reads from pvoc file and uses the data to perform additive synthesis pvadd reads from pvoc file and uses the data to perform additive synthesis using an internal array of interpolating oscillators The user supplies the wave table usually one period of sine wave and can choose which analysis bins will be used in the re-synthesis ares pvadd ktimpnt kfmod ifilcod ifn ibins ibinoffset ibinincr iextractmode ifreqlim igatefn csound doc http www.csounds.com manual html pvadd.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "pvadd",
        "normalized": "Sig-\u003eSig-\u003eStr-\u003eTab-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eStr-\u003eTab-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:pvbufread",
      "description": {
        "fct-descr": "\u003cp\u003eReads from a phase vocoder analysis file and makes the retrieved data available.\n\u003c/p\u003e\u003cp\u003epvbufread reads from a pvoc file and makes the retrieved data available to any following pvinterp and pvcross units that appear in an instrument before a subsequent pvbufread (just as lpread and lpreson work together). The data is passed internally and the unit has no output of its own.\n\u003c/p\u003e\u003cpre\u003e  pvbufread  ktimpnt, ifile\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/pvbufread.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Str -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#pvbufread",
        "fct-type": "function",
        "title": "pvbufread"
      },
      "index": {
        "description": "Reads from phase vocoder analysis file and makes the retrieved data available pvbufread reads from pvoc file and makes the retrieved data available to any following pvinterp and pvcross units that appear in an instrument before subsequent pvbufread just as lpread and lpreson work together The data is passed internally and the unit has no output of its own pvbufread ktimpnt ifile csound doc http www.csounds.com manual html pvbufread.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "pvbufread",
        "normalized": "Sig-\u003eStr-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eStr-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:pvcross",
      "description": {
        "fct-descr": "\u003cp\u003eApplies the amplitudes from one phase vocoder analysis file to the data from a second file.\n\u003c/p\u003e\u003cp\u003epvcross applies the amplitudes from one phase vocoder analysis file to the data from a second file and then performs the resynthesis. The data is passed, as described above, from a previously called pvbufread unit. The two k-rate amplitude arguments are used to scale the amplitudes of each files separately before they are added together and used in the resynthesis (see below for further explanation). The frequencies of the first file are not used at all in this process. This unit simply allows for cross-synthesis through the application of the amplitudes of the spectra of one signal to the frequencies of a second signal. Unlike pvinterp, pvcross does allow for the use of the ispecwp as in pvoc and vpvoc.\n\u003c/p\u003e\u003cpre\u003e ares  pvcross  ktimpnt, kfmod, ifile, kampscale1, kampscale2 [, ispecwp]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/pvcross.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Str -\u003e Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#pvcross",
        "fct-type": "function",
        "title": "pvcross"
      },
      "index": {
        "description": "Applies the amplitudes from one phase vocoder analysis file to the data from second file pvcross applies the amplitudes from one phase vocoder analysis file to the data from second file and then performs the resynthesis The data is passed as described above from previously called pvbufread unit The two k-rate amplitude arguments are used to scale the amplitudes of each files separately before they are added together and used in the resynthesis see below for further explanation The frequencies of the first file are not used at all in this process This unit simply allows for cross-synthesis through the application of the amplitudes of the spectra of one signal to the frequencies of second signal Unlike pvinterp pvcross does allow for the use of the ispecwp as in pvoc and vpvoc ares pvcross ktimpnt kfmod ifile kampscale1 kampscale2 ispecwp csound doc http www.csounds.com manual html pvcross.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "pvcross",
        "normalized": "Sig-\u003eSig-\u003eStr-\u003eSig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eStr-\u003eSig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:pvinterp",
      "description": {
        "fct-descr": "\u003cp\u003eInterpolates between the amplitudes and frequencies of two phase vocoder analysis files.\n\u003c/p\u003e\u003cp\u003epvinterp interpolates between the amplitudes and frequencies, on a bin by bin basis, of two phase vocoder analysis files (one from a previously called pvbufread unit and the other from within its own argument list), allowing for user defined transitions between analyzed sounds. It also allows for general scaling of the amplitudes and frequencies of each file separately before the interpolated values are calculated and sent to the resynthesis routines. The kfmod argument in pvinterp performs its frequency scaling on the frequency values after their derivation from the separate scaling and subsequent interpolation is performed so that this acts as an overall scaling value of the new frequency components.\n\u003c/p\u003e\u003cpre\u003e ares  pvinterp  ktimpnt, kfmod, ifile, kfreqscale1, kfreqscale2, \\\n           kampscale1, kampscale2, kfreqinterp, kampinterp\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/pvinterp.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Str -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#pvinterp",
        "fct-type": "function",
        "title": "pvinterp"
      },
      "index": {
        "description": "Interpolates between the amplitudes and frequencies of two phase vocoder analysis files pvinterp interpolates between the amplitudes and frequencies on bin by bin basis of two phase vocoder analysis files one from previously called pvbufread unit and the other from within its own argument list allowing for user defined transitions between analyzed sounds It also allows for general scaling of the amplitudes and frequencies of each file separately before the interpolated values are calculated and sent to the resynthesis routines The kfmod argument in pvinterp performs its frequency scaling on the frequency values after their derivation from the separate scaling and subsequent interpolation is performed so that this acts as an overall scaling value of the new frequency components ares pvinterp ktimpnt kfmod ifile kfreqscale1 kfreqscale2 kampscale1 kampscale2 kfreqinterp kampinterp csound doc http www.csounds.com manual html pvinterp.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "pvinterp",
        "normalized": "Sig-\u003eSig-\u003eStr-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eStr-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:pvoc",
      "description": {
        "fct-descr": "\u003cp\u003eImplements signal reconstruction using an fft-based phase vocoder.\n\u003c/p\u003e\u003cpre\u003e ares  pvoc  ktimpnt, kfmod, ifilcod [, ispecwp] [, iextractmode] \\\n           [, ifreqlim] [, igatefn]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/pvoc.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Str -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#pvoc",
        "fct-type": "function",
        "title": "pvoc"
      },
      "index": {
        "description": "Implements signal reconstruction using an fft-based phase vocoder ares pvoc ktimpnt kfmod ifilcod ispecwp iextractmode ifreqlim igatefn csound doc http www.csounds.com manual html pvoc.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "pvoc",
        "normalized": "Sig-\u003eSig-\u003eStr-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eStr-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:pvread",
      "description": {
        "fct-descr": "\u003cp\u003eReads from a phase vocoder analysis file and returns the frequency and amplitude from a single analysis channel or bin.\n\u003c/p\u003e\u003cp\u003epvread reads from a pvoc file and returns the frequency and amplitude from a single analysis channel or bin. The returned values can be used anywhere else in the Csound instrument. For example, one can use them as arguments to an oscillator to synthesize a single component from an analyzed signal or a bank of pvreads can be used to resynthesize the analyzed sound using additive synthesis by passing the frequency and magnitude values to a bank of oscillators.\n\u003c/p\u003e\u003cpre\u003e kfreq, kamp  pvread  ktimpnt, ifile, ibin\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/pvread.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Str -\u003e D -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#pvread",
        "fct-type": "function",
        "title": "pvread"
      },
      "index": {
        "description": "Reads from phase vocoder analysis file and returns the frequency and amplitude from single analysis channel or bin pvread reads from pvoc file and returns the frequency and amplitude from single analysis channel or bin The returned values can be used anywhere else in the Csound instrument For example one can use them as arguments to an oscillator to synthesize single component from an analyzed signal or bank of pvreads can be used to resynthesize the analyzed sound using additive synthesis by passing the frequency and magnitude values to bank of oscillators kfreq kamp pvread ktimpnt ifile ibin csound doc http www.csounds.com manual html pvread.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "pvread",
        "normalized": "Sig-\u003eStr-\u003eD-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eStr-\u003eD-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:pvsadsyn",
      "description": {
        "fct-descr": "\u003cp\u003eResynthesize using a fast oscillator-bank.\n\u003c/p\u003e\u003cpre\u003e ares  pvsadsyn  fsrc, inoscs, kfmod [, ibinoffset] [, ibinincr] [, iinit]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/pvsadsyn.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Spec -\u003e D -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#pvsadsyn",
        "fct-type": "function",
        "title": "pvsadsyn"
      },
      "index": {
        "description": "Resynthesize using fast oscillator-bank ares pvsadsyn fsrc inoscs kfmod ibinoffset ibinincr iinit csound doc http www.csounds.com manual html pvsadsyn.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "pvsadsyn",
        "normalized": "Spec-\u003eD-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Spec-\u003eD-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:pvsanal",
      "description": {
        "fct-descr": "\u003cp\u003eGenerate an fsig from a mono audio source ain, using phase vocoder overlap-add analysis.\n\u003c/p\u003e\u003cpre\u003e fsig  pvsanal  ain, ifftsize, ioverlap, iwinsize, iwintype [, iformat] [, iinit]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/pvsanal.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e D -\u003e D -\u003e D -\u003e D -\u003e Spec",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#pvsanal",
        "fct-type": "function",
        "title": "pvsanal"
      },
      "index": {
        "description": "Generate an fsig from mono audio source ain using phase vocoder overlap-add analysis fsig pvsanal ain ifftsize ioverlap iwinsize iwintype iformat iinit csound doc http www.csounds.com manual html pvsanal.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "pvsanal",
        "normalized": "Sig-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSpec",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSpec"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:pvsarp",
      "description": {
        "fct-descr": "\u003cp\u003eArpeggiate the spectral components of a streaming pv signal.\n\u003c/p\u003e\u003cp\u003eThis opcode arpeggiates spectral components, by amplifying one bin and attenuating\n     all the others around it. Used with an LFO it will provide a spectral arpeggiator similar to Trevor Wishart's\n     CDP program specarp.\n\u003c/p\u003e\u003cpre\u003e fsig  pvsarp  fsigin, kbin, kdepth, kgain\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/pvsarp.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Spec -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Spec",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#pvsarp",
        "fct-type": "function",
        "title": "pvsarp"
      },
      "index": {
        "description": "Arpeggiate the spectral components of streaming pv signal This opcode arpeggiates spectral components by amplifying one bin and attenuating all the others around it Used with an LFO it will provide spectral arpeggiator similar to Trevor Wishart CDP program specarp fsig pvsarp fsigin kbin kdepth kgain csound doc http www.csounds.com manual html pvsarp.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "pvsarp",
        "normalized": "Spec-\u003eSig-\u003eSig-\u003eSig-\u003eSpec",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Spec-\u003eSig-\u003eSig-\u003eSig-\u003eSpec"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:pvsbandp",
      "description": {
        "fct-descr": "\u003cp\u003eA band pass filter working in the spectral domain.\n\u003c/p\u003e\u003cp\u003eFilter the pvoc frames, passing bins whose frequency is within a\n       band, and with linear interpolation for transitional bands.\n\u003c/p\u003e\u003cpre\u003e fsig  pvsbandp  fsigin, xlowcut, xlowfull, \\\n           xhighfull, xhighcut[, ktype]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/pvsbandp.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Spec -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Spec",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#pvsbandp",
        "fct-type": "function",
        "title": "pvsbandp"
      },
      "index": {
        "description": "band pass filter working in the spectral domain Filter the pvoc frames passing bins whose frequency is within band and with linear interpolation for transitional bands fsig pvsbandp fsigin xlowcut xlowfull xhighfull xhighcut ktype csound doc http www.csounds.com manual html pvsbandp.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "pvsbandp",
        "normalized": "Spec-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSpec",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Spec-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSpec"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:pvsbandr",
      "description": {
        "fct-descr": "\u003cp\u003eA band reject filter working in the spectral domain.\n\u003c/p\u003e\u003cp\u003eFilter the pvoc frames, rejecting bins whose frequency is within a\n       band, and with linear interpolation for transitional bands.\n\u003c/p\u003e\u003cpre\u003e fsig  pvsbandr  fsigin, xlowcut, xlowfull, \\\n           xhighfull, xhighcut[, ktype]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/pvsbandr.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Spec -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Spec",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#pvsbandr",
        "fct-type": "function",
        "title": "pvsbandr"
      },
      "index": {
        "description": "band reject filter working in the spectral domain Filter the pvoc frames rejecting bins whose frequency is within band and with linear interpolation for transitional bands fsig pvsbandr fsigin xlowcut xlowfull xhighfull xhighcut ktype csound doc http www.csounds.com manual html pvsbandr.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "pvsbandr",
        "normalized": "Spec-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSpec",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Spec-\u003eSig-\u003eSig-\u003eSig-\u003eSig-\u003eSpec"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:pvsbin",
      "description": {
        "fct-descr": "\u003cp\u003eObtain the amp and freq values off a PVS signal bin.\n\u003c/p\u003e\u003cp\u003eObtain the amp and freq values off a PVS signal bin as k-rate variables.\n\u003c/p\u003e\u003cpre\u003e kamp, kfr  pvsbin  fsig, kbin\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/pvsbin.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Spec -\u003e Sig -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#pvsbin",
        "fct-type": "function",
        "title": "pvsbin"
      },
      "index": {
        "description": "Obtain the amp and freq values off PVS signal bin Obtain the amp and freq values off PVS signal bin as k-rate variables kamp kfr pvsbin fsig kbin csound doc http www.csounds.com manual html pvsbin.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "pvsbin",
        "normalized": "Spec-\u003eSig-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Spec-\u003eSig-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:pvsblur",
      "description": {
        "fct-descr": "\u003cp\u003eAverage the amp/freq time functions of each analysis channel for\n     a specified time.\n\u003c/p\u003e\u003cp\u003eAverage the amp/freq time functions of each analysis channel for\n     a specified time (truncated to number of frames). As a side-effect\n     the input pvoc stream will be delayed by that amount.\n\u003c/p\u003e\u003cpre\u003e fsig  pvsblur  fsigin, kblurtime, imaxdel\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/pvsblur.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Spec -\u003e Sig -\u003e D -\u003e Spec",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#pvsblur",
        "fct-type": "function",
        "title": "pvsblur"
      },
      "index": {
        "description": "Average the amp freq time functions of each analysis channel for specified time Average the amp freq time functions of each analysis channel for specified time truncated to number of frames As side-effect the input pvoc stream will be delayed by that amount fsig pvsblur fsigin kblurtime imaxdel csound doc http www.csounds.com manual html pvsblur.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "pvsblur",
        "normalized": "Spec-\u003eSig-\u003eD-\u003eSpec",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Spec-\u003eSig-\u003eD-\u003eSpec"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:pvsbuffer",
      "description": {
        "fct-descr": "\u003cp\u003eThis opcode creates and writes to a circular buffer for f-signals (streaming PV signals).\n\u003c/p\u003e\u003cp\u003eThis opcode sets up and writes to a circular buffer of length ilen (secs),\n         giving a handle for the buffer and a time pointer, which holds the\n         current write position (also in seconds). It can be used with one or \n         more pvsbufread opcodes. Writing is circular, wrapping around at the\n         end of the buffer.\n\u003c/p\u003e\u003cpre\u003e ihandle, ktime   pvsbuffer  fsig, ilen \n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/pvsbuffer.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Spec -\u003e D -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#pvsbuffer",
        "fct-type": "function",
        "title": "pvsbuffer"
      },
      "index": {
        "description": "This opcode creates and writes to circular buffer for f-signals streaming PV signals This opcode sets up and writes to circular buffer of length ilen secs giving handle for the buffer and time pointer which holds the current write position also in seconds It can be used with one or more pvsbufread opcodes Writing is circular wrapping around at the end of the buffer ihandle ktime pvsbuffer fsig ilen csound doc http www.csounds.com manual html pvsbuffer.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "pvsbuffer",
        "normalized": "Spec-\u003eD-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Spec-\u003eD-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:pvsbufread",
      "description": {
        "fct-descr": "\u003cp\u003eThis opcode reads a circular buffer of f-signals (streaming PV signals).\n\u003c/p\u003e\u003cp\u003eThis opcode reads from a circular buffer of length ilen (secs),\n       taking a handle for the buffer and a time pointer, which holds the\n       current read position (also in seconds). It is used in conjunction with a\n       pvsbuffer opocde. \n       Reading is circular, wrapping around at the end of the buffer.\n\u003c/p\u003e\u003cpre\u003e fsig  pvsbufread   ktime, khandle[, ilo, ihi, iclear] \n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/pvsbufread.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Spec",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#pvsbufread",
        "fct-type": "function",
        "title": "pvsbufread"
      },
      "index": {
        "description": "This opcode reads circular buffer of f-signals streaming PV signals This opcode reads from circular buffer of length ilen secs taking handle for the buffer and time pointer which holds the current read position also in seconds It is used in conjunction with pvsbuffer opocde Reading is circular wrapping around at the end of the buffer fsig pvsbufread ktime khandle ilo ihi iclear csound doc http www.csounds.com manual html pvsbufread.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "pvsbufread",
        "normalized": "Sig-\u003eSig-\u003eSpec",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSpec"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:pvsbufread2",
      "description": {
        "fct-descr": "\u003cp\u003eThis opcode reads a circular buffer of f-signals (streaming PV signals), with binwise additional delays.\n\u003c/p\u003e\u003cp\u003eThis opcode reads from a circular buffer of length ilen (secs),\n       taking a handle for the buffer and a time pointer, which holds the\n       current read position (also in seconds). It is used in conjunction with a pvsbuffer opocde. \n       Reading is circular, wrapping around at the end of the buffer. Extra delay times are taken from\n       a function table, with each point on it defining a delay time in seconds affecting the corresponding bin.\n\u003c/p\u003e\u003cpre\u003e fsig  pvsbufread2   ktime, khandle, ift1, ift2 \n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/pvsbufread2.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e D -\u003e D -\u003e Spec",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#pvsbufread2",
        "fct-type": "function",
        "title": "pvsbufread2"
      },
      "index": {
        "description": "This opcode reads circular buffer of f-signals streaming PV signals with binwise additional delays This opcode reads from circular buffer of length ilen secs taking handle for the buffer and time pointer which holds the current read position also in seconds It is used in conjunction with pvsbuffer opocde Reading is circular wrapping around at the end of the buffer Extra delay times are taken from function table with each point on it defining delay time in seconds affecting the corresponding bin fsig pvsbufread2 ktime khandle ift1 ift2 csound doc http www.csounds.com manual html pvsbufread2.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "pvsbufread2",
        "normalized": "Sig-\u003eSig-\u003eD-\u003eD-\u003eSpec",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eD-\u003eD-\u003eSpec"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:pvscale",
      "description": {
        "fct-descr": "\u003cp\u003eScale the frequency components of a pv stream.\n\u003c/p\u003e\u003cp\u003eScale the frequency components of a pv stream, resulting\n       in pitch shift. Output amplitudes can be optionally modified in order\n       to attempt formant preservation.\n\u003c/p\u003e\u003cpre\u003e fsig  pvscale  fsigin, kscal[, kkeepform, kgain, kcoefs]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/pvscale.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Spec -\u003e Sig -\u003e Spec",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#pvscale",
        "fct-type": "function",
        "title": "pvscale"
      },
      "index": {
        "description": "Scale the frequency components of pv stream Scale the frequency components of pv stream resulting in pitch shift Output amplitudes can be optionally modified in order to attempt formant preservation fsig pvscale fsigin kscal kkeepform kgain kcoefs csound doc http www.csounds.com manual html pvscale.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "pvscale",
        "normalized": "Spec-\u003eSig-\u003eSpec",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Spec-\u003eSig-\u003eSpec"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:pvscent",
      "description": {
        "fct-descr": "\u003cp\u003eCalculate the spectral centroid of a signal.\n\u003c/p\u003e\u003cp\u003eCalculate the spectral centroid of a signal from its discrete Fourier transform.\n\u003c/p\u003e\u003cpre\u003e kcent  pvscent  fsig\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/pvscent.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Spec -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#pvscent",
        "fct-type": "function",
        "title": "pvscent"
      },
      "index": {
        "description": "Calculate the spectral centroid of signal Calculate the spectral centroid of signal from its discrete Fourier transform kcent pvscent fsig csound doc http www.csounds.com manual html pvscent.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "pvscent",
        "normalized": "Spec-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Spec-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:pvscross",
      "description": {
        "fct-descr": "\u003cp\u003ePerforms cross-synthesis between two source fsigs.\n\u003c/p\u003e\u003cpre\u003e fsig  pvscross  fsrc, fdest, kamp1, kamp2\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/pvscross.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Spec -\u003e Spec -\u003e Sig -\u003e Sig -\u003e Spec",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#pvscross",
        "fct-type": "function",
        "title": "pvscross"
      },
      "index": {
        "description": "Performs cross-synthesis between two source fsigs fsig pvscross fsrc fdest kamp1 kamp2 csound doc http www.csounds.com manual html pvscross.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "pvscross",
        "normalized": "Spec-\u003eSpec-\u003eSig-\u003eSig-\u003eSpec",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Spec-\u003eSpec-\u003eSig-\u003eSig-\u003eSpec"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:pvsdemix",
      "description": {
        "fct-descr": "\u003cp\u003eSpectral azimuth-based de-mixing of stereo sources.\n\u003c/p\u003e\u003cp\u003eSpectral azimuth-based de-mixing of stereo sources, with a reverse-panning result. This\n       opcode implements the Azimuth Discrimination and Resynthesis (ADRess) algorithm, developed by\n       Dan Barry (Barry et Al. \u003ca\u003eSound Source Separation Azimuth Discrimination and Resynthesis\u003c/a\u003e. DAFx'04, \n       Univ. of Napoli). The source separation, or de-mixing, is controlled by two parameters: an azimuth\n       position (kpos) and a subspace width (kwidth). The first one is used to locate the spectral peaks of \n       individual sources on a stereo mix, whereas the second widens the 'search space', including/exclufing \n       the peaks around kpos. These two parameters can be used interactively to extract source sounds from\n       a stereo mix. The algorithm is particularly successful with studio recordings where individual instruments\n       occupy individual panning positions; it is, in fact, a reverse-panning algorithm.\n\u003c/p\u003e\u003cpre\u003e fsig  pvsdemix  fleft, fright, kpos, kwidth, ipoints\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/pvsdemix.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Spec -\u003e Spec -\u003e Sig -\u003e Sig -\u003e D -\u003e Spec",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#pvsdemix",
        "fct-type": "function",
        "title": "pvsdemix"
      },
      "index": {
        "description": "Spectral azimuth-based de-mixing of stereo sources Spectral azimuth-based de-mixing of stereo sources with reverse-panning result This opcode implements the Azimuth Discrimination and Resynthesis ADRess algorithm developed by Dan Barry Barry et Al Sound Source Separation Azimuth Discrimination and Resynthesis DAFx Univ of Napoli The source separation or de-mixing is controlled by two parameters an azimuth position kpos and subspace width kwidth The first one is used to locate the spectral peaks of individual sources on stereo mix whereas the second widens the search space including exclufing the peaks around kpos These two parameters can be used interactively to extract source sounds from stereo mix The algorithm is particularly successful with studio recordings where individual instruments occupy individual panning positions it is in fact reverse-panning algorithm fsig pvsdemix fleft fright kpos kwidth ipoints csound doc http www.csounds.com manual html pvsdemix.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "pvsdemix",
        "normalized": "Spec-\u003eSpec-\u003eSig-\u003eSig-\u003eD-\u003eSpec",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Spec-\u003eSpec-\u003eSig-\u003eSig-\u003eD-\u003eSpec"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:pvsdiskin",
      "description": {
        "fct-descr": "\u003cp\u003eRead a selected channel from a PVOC-EX analysis file.\n\u003c/p\u003e\u003cp\u003eCreate an fsig stream by reading a selected channel from a PVOC-EX analysis file, with frame interpolation.\n\u003c/p\u003e\u003cpre\u003e fsig  pvsdiskin  SFname,ktscal,kgain[,ioffset, ichan]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/pvsdiskin.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e Sig -\u003e Sig -\u003e Spec",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#pvsdiskin",
        "fct-type": "function",
        "title": "pvsdiskin"
      },
      "index": {
        "description": "Read selected channel from PVOC-EX analysis file Create an fsig stream by reading selected channel from PVOC-EX analysis file with frame interpolation fsig pvsdiskin SFname ktscal kgain ioffset ichan csound doc http www.csounds.com manual html pvsdiskin.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "pvsdiskin",
        "normalized": "Str-\u003eSig-\u003eSig-\u003eSpec",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eSig-\u003eSig-\u003eSpec"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:pvsdisp",
      "description": {
        "fct-descr": "\u003cp\u003eDisplays a PVS signal as an amplitude vs. freq graph.\n\u003c/p\u003e\u003cp\u003eThis opcode will display a PVS signal fsig. Uses X11 or  FLTK windows if enabled, else \n \t  (or if -g flag is set) \n \t  displays are approximated in ASCII characters.\n\u003c/p\u003e\u003cpre\u003e  pvsdisp  fsig[, ibins, iwtflg] \n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/pvsdisp.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Spec -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#pvsdisp",
        "fct-type": "function",
        "title": "pvsdisp"
      },
      "index": {
        "description": "Displays PVS signal as an amplitude vs freq graph This opcode will display PVS signal fsig Uses X11 or FLTK windows if enabled else or if flag is set displays are approximated in ASCII characters pvsdisp fsig ibins iwtflg csound doc http www.csounds.com manual html pvsdisp.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "pvsdisp",
        "normalized": "Spec-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Spec-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:pvsfilter",
      "description": {
        "fct-descr": "\u003cp\u003eMultiply amplitudes of a pvoc stream by those of a second\n pvoc stream, with dynamic scaling.\n\u003c/p\u003e\u003cpre\u003e fsig  pvsfilter  fsigin, fsigfil, kdepth[, igain]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/pvsfilter.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Spec -\u003e Spec -\u003e Sig -\u003e Spec",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#pvsfilter",
        "fct-type": "function",
        "title": "pvsfilter"
      },
      "index": {
        "description": "Multiply amplitudes of pvoc stream by those of second pvoc stream with dynamic scaling fsig pvsfilter fsigin fsigfil kdepth igain csound doc http www.csounds.com manual html pvsfilter.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "pvsfilter",
        "normalized": "Spec-\u003eSpec-\u003eSig-\u003eSpec",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Spec-\u003eSpec-\u003eSig-\u003eSpec"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:pvsfread",
      "description": {
        "fct-descr": "\u003cp\u003eRead a selected channel from a PVOC-EX analysis file.\n\u003c/p\u003e\u003cp\u003eCreate an fsig stream by reading a selected channel from a PVOC-EX analysis file loaded into memory, with frame interpolation. Only format 0 files (amplitude+frequency) are currently supported. The operation of this opcode mirrors that of pvoc, but outputs an fsig instead of a resynthesized signal.\n\u003c/p\u003e\u003cpre\u003e fsig  pvsfread  ktimpt, ifn [, ichan]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/pvsfread.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Tab -\u003e Spec",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#pvsfread",
        "fct-type": "function",
        "title": "pvsfread"
      },
      "index": {
        "description": "Read selected channel from PVOC-EX analysis file Create an fsig stream by reading selected channel from PVOC-EX analysis file loaded into memory with frame interpolation Only format files amplitude frequency are currently supported The operation of this opcode mirrors that of pvoc but outputs an fsig instead of resynthesized signal fsig pvsfread ktimpt ifn ichan csound doc http www.csounds.com manual html pvsfread.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "pvsfread",
        "normalized": "Sig-\u003eTab-\u003eSpec",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eTab-\u003eSpec"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:pvsfreeze",
      "description": {
        "fct-descr": "\u003cp\u003eFreeze the amplitude and frequency time functions of a pv stream according to a control-rate\n       trigger.\n\u003c/p\u003e\u003cp\u003eThis opcodes \u003ccode\u003efreezes\u003c/code\u003e the evolution of pvs stream by locking into steady amplitude and/or\n       frequency values for each bin. The freezing is controlled, independently for amplitudes and\n       frequencies, by a control-rate trigger, which switches the freezing \u003ccode\u003eon\u003c/code\u003e if equal to or above\n       1 and \u003ccode\u003eoff\u003c/code\u003e if below 1.\n\u003c/p\u003e\u003cpre\u003e fsig  pvsfreeze  fsigin, kfreeza, kfreezf\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/pvsfreeze.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Spec -\u003e Sig -\u003e Sig -\u003e Spec",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#pvsfreeze",
        "fct-type": "function",
        "title": "pvsfreeze"
      },
      "index": {
        "description": "Freeze the amplitude and frequency time functions of pv stream according to control-rate trigger This opcodes freezes the evolution of pvs stream by locking into steady amplitude and or frequency values for each bin The freezing is controlled independently for amplitudes and frequencies by control-rate trigger which switches the freezing on if equal to or above and off if below fsig pvsfreeze fsigin kfreeza kfreezf csound doc http www.csounds.com manual html pvsfreeze.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "pvsfreeze",
        "normalized": "Spec-\u003eSig-\u003eSig-\u003eSpec",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Spec-\u003eSig-\u003eSig-\u003eSpec"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:pvsftr",
      "description": {
        "fct-descr": "\u003cp\u003eReads amplitude and/or frequency data from function tables.\n\u003c/p\u003e\u003cpre\u003e  pvsftr  fsrc, ifna [, ifnf]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/pvsftr.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Spec -\u003e Tab -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#pvsftr",
        "fct-type": "function",
        "title": "pvsftr"
      },
      "index": {
        "description": "Reads amplitude and or frequency data from function tables pvsftr fsrc ifna ifnf csound doc http www.csounds.com manual html pvsftr.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "pvsftr",
        "normalized": "Spec-\u003eTab-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Spec-\u003eTab-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:pvsftw",
      "description": {
        "fct-descr": "\u003cp\u003eWrites amplitude and/or frequency data to function tables.\n\u003c/p\u003e\u003cpre\u003e kflag  pvsftw  fsrc, ifna [, ifnf]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/pvsftw.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Spec -\u003e Tab -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#pvsftw",
        "fct-type": "function",
        "title": "pvsftw"
      },
      "index": {
        "description": "Writes amplitude and or frequency data to function tables kflag pvsftw fsrc ifna ifnf csound doc http www.csounds.com manual html pvsftw.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "pvsftw",
        "normalized": "Spec-\u003eTab-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Spec-\u003eTab-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:pvsfwrite",
      "description": {
        "fct-descr": "\u003cp\u003eWrite a fsig to a PVOCEX file.\n\u003c/p\u003e\u003cp\u003eThis opcode writes a fsig to a PVOCEX file (which in turn can be read by pvsfread or other programs that support PVOCEX file input).\n\u003c/p\u003e\u003cpre\u003e  pvsfwrite  fsig, ifile\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/pvsfwrite.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Spec -\u003e Str -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#pvsfwrite",
        "fct-type": "function",
        "title": "pvsfwrite"
      },
      "index": {
        "description": "Write fsig to PVOCEX file This opcode writes fsig to PVOCEX file which in turn can be read by pvsfread or other programs that support PVOCEX file input pvsfwrite fsig ifile csound doc http www.csounds.com manual html pvsfwrite.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "pvsfwrite",
        "normalized": "Spec-\u003eStr-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Spec-\u003eStr-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:pvsgain",
      "description": {
        "fct-descr": "\u003cp\u003eScale the amplitude of a pv stream.\n\u003c/p\u003e\u003cpre\u003e fsig  pvsgain  fsigin, kgain \n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/pvsgain.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Spec -\u003e Sig -\u003e Spec",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#pvsgain",
        "fct-type": "function",
        "title": "pvsgain"
      },
      "index": {
        "description": "Scale the amplitude of pv stream fsig pvsgain fsigin kgain csound doc http www.csounds.com manual html pvsgain.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "pvsgain",
        "normalized": "Spec-\u003eSig-\u003eSpec",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Spec-\u003eSig-\u003eSpec"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:pvshift",
      "description": {
        "fct-descr": "\u003cp\u003eShift the frequency components of a pv stream, stretching/compressing\n       its spectrum.\n\u003c/p\u003e\u003cpre\u003e fsig  pvshift  fsigin, kshift, klowest[, kkeepform, igain, kcoefs]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/pvshift.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Spec -\u003e Sig -\u003e Sig -\u003e Spec",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#pvshift",
        "fct-type": "function",
        "title": "pvshift"
      },
      "index": {
        "description": "Shift the frequency components of pv stream stretching compressing its spectrum fsig pvshift fsigin kshift klowest kkeepform igain kcoefs csound doc http www.csounds.com manual html pvshift.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "pvshift",
        "normalized": "Spec-\u003eSig-\u003eSig-\u003eSpec",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Spec-\u003eSig-\u003eSig-\u003eSpec"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:pvsifd",
      "description": {
        "fct-descr": "\u003cp\u003eInstantaneous Frequency Distribution, magnitude and phase analysis.\n\u003c/p\u003e\u003cp\u003eThe pvsifd opcode takes an input a-rate signal and performs an Instantaneous Frequency,\n   magnitude and phase analysis, using the STFT and pvsifd (Instantaneous Frequency Distribution),\n   as described in Lazzarini et al, \u003ca\u003eTime-stretching using the Instantaneous Frequency Distribution and Partial\n   Tracking\u003c/a\u003e, Proc.of ICMC05, Barcelona. It generates two PV streaming signals, one containing the\n   amplitudes and frequencies (a similar output to pvsanal) and another containing amplitudes and \n   unwrapped phases.\n\u003c/p\u003e\u003cpre\u003e ffr,fphs  pvsifd  ain, ifftsize, ihopsize, iwintype[,iscal]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/pvsifd.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e D -\u003e D -\u003e D -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#pvsifd",
        "fct-type": "function",
        "title": "pvsifd"
      },
      "index": {
        "description": "Instantaneous Frequency Distribution magnitude and phase analysis The pvsifd opcode takes an input a-rate signal and performs an Instantaneous Frequency magnitude and phase analysis using the STFT and pvsifd Instantaneous Frequency Distribution as described in Lazzarini et al Time-stretching using the Instantaneous Frequency Distribution and Partial Tracking Proc.of ICMC05 Barcelona It generates two PV streaming signals one containing the amplitudes and frequencies similar output to pvsanal and another containing amplitudes and unwrapped phases ffr fphs pvsifd ain ifftsize ihopsize iwintype iscal csound doc http www.csounds.com manual html pvsifd.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "pvsifd",
        "normalized": "Sig-\u003eD-\u003eD-\u003eD-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eD-\u003eD-\u003eD-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:pvsin",
      "description": {
        "fct-descr": "\u003cp\u003eRetrieve an fsig from the input software bus; a pvs equivalent to chani.\n\u003c/p\u003e\u003cp\u003eThis opcode retrieves an f-sig from the pvs in software bus, which can be\n       used to get data from an external source, using the Csound 5 API. A channel\n       is created if not already existing. The fsig channel is in that case initialised with\n       the given parameters. It is important to note that the pvs input\n       and output (pvsout opcode) busses are independent and data is not shared between them.\n\u003c/p\u003e\u003cpre\u003e fsig  pvsin  kchan[, isize, iolap, iwinsize, iwintype, iformat]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/pvsin.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Spec",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#pvsin",
        "fct-type": "function",
        "title": "pvsin"
      },
      "index": {
        "description": "Retrieve an fsig from the input software bus pvs equivalent to chani This opcode retrieves an f-sig from the pvs in software bus which can be used to get data from an external source using the Csound API channel is created if not already existing The fsig channel is in that case initialised with the given parameters It is important to note that the pvs input and output pvsout opcode busses are independent and data is not shared between them fsig pvsin kchan isize iolap iwinsize iwintype iformat csound doc http www.csounds.com manual html pvsin.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "pvsin",
        "normalized": "Sig-\u003eSpec",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSpec"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:pvsinfo",
      "description": {
        "fct-descr": "\u003cp\u003eGet information from a PVOC-EX formatted source.\n\u003c/p\u003e\u003cp\u003eGet format information about fsrc, whether created by an opcode such as pvsanal, or obtained from a PVOCEX file by pvsfread. This information is available at init time, and can be used to set parameters for other pvs opcodes, and in particular for creating function tables (e.g. for pvsftw), or setting the number of oscillators for pvsadsyn.\n\u003c/p\u003e\u003cpre\u003e ioverlap, inumbins, iwinsize, iformat  pvsinfo  fsrc\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/pvsinfo.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Spec -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#pvsinfo",
        "fct-type": "function",
        "title": "pvsinfo"
      },
      "index": {
        "description": "Get information from PVOC-EX formatted source Get format information about fsrc whether created by an opcode such as pvsanal or obtained from PVOCEX file by pvsfread This information is available at init time and can be used to set parameters for other pvs opcodes and in particular for creating function tables e.g for pvsftw or setting the number of oscillators for pvsadsyn ioverlap inumbins iwinsize iformat pvsinfo fsrc csound doc http www.csounds.com manual html pvsinfo.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "pvsinfo",
        "normalized": "Spec-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Spec-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:pvsinit",
      "description": {
        "fct-descr": "\u003cp\u003eInitialise a spectral (f) variable to zero.\n\u003c/p\u003e\u003cp\u003ePerforms the equivalent to an init operation on an f-variable.\n\u003c/p\u003e\u003cpre\u003e fsig  pvsinit  isize[, iolap, iwinsize, iwintype, iformat]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/pvsinit.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e Spec",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#pvsinit",
        "fct-type": "function",
        "title": "pvsinit"
      },
      "index": {
        "description": "Initialise spectral variable to zero Performs the equivalent to an init operation on an f-variable fsig pvsinit isize iolap iwinsize iwintype iformat csound doc http www.csounds.com manual html pvsinit.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "pvsinit",
        "normalized": "D-\u003eSpec",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eSpec"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:pvslock",
      "description": {
        "fct-descr": "\u003cp\u003eFrequency lock an input fsig\n\u003c/p\u003e\u003cp\u003eThis opcode searches for spectral peaks and then locks the frequencies around those peaks. This is similar to\n       phase-locking in non-streaming PV processing. It can be used to improve timestretching and pitch-shifting quality in\n       PV processing.\n\u003c/p\u003e\u003cpre\u003e fsig  pvslock  fsigin, klock\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/pvslock.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Spec -\u003e Sig -\u003e Spec",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#pvslock",
        "fct-type": "function",
        "title": "pvslock"
      },
      "index": {
        "description": "Frequency lock an input fsig This opcode searches for spectral peaks and then locks the frequencies around those peaks This is similar to phase-locking in non-streaming PV processing It can be used to improve timestretching and pitch-shifting quality in PV processing fsig pvslock fsigin klock csound doc http www.csounds.com manual html pvslock.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "pvslock",
        "normalized": "Spec-\u003eSig-\u003eSpec",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Spec-\u003eSig-\u003eSpec"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:pvsmaska",
      "description": {
        "fct-descr": "\u003cp\u003eModify amplitudes using a function table, with dynamic scaling.\n\u003c/p\u003e\u003cp\u003eModify amplitudes of fsrc using  function table, with dynamic scaling.\n\u003c/p\u003e\u003cpre\u003e fsig  pvsmaska  fsrc, ifn, kdepth\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/pvsmaska.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Spec -\u003e Tab -\u003e Sig -\u003e Spec",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#pvsmaska",
        "fct-type": "function",
        "title": "pvsmaska"
      },
      "index": {
        "description": "Modify amplitudes using function table with dynamic scaling Modify amplitudes of fsrc using function table with dynamic scaling fsig pvsmaska fsrc ifn kdepth csound doc http www.csounds.com manual html pvsmaska.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "pvsmaska",
        "normalized": "Spec-\u003eTab-\u003eSig-\u003eSpec",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Spec-\u003eTab-\u003eSig-\u003eSpec"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:pvsmix",
      "description": {
        "fct-descr": "\u003cp\u003eMix \u003ccode\u003eseamlessly\u003c/code\u003e two pv signals.\n\u003c/p\u003e\u003cp\u003eMix \u003ccode\u003eseamlessly\u003c/code\u003e two pv signals.  This opcode combines the\n       most prominent components of two pvoc streams into a single\n       mixed stream.\n\u003c/p\u003e\u003cpre\u003e fsig  pvsmix  fsigin1, fsigin2\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/pvsmix.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Spec -\u003e Spec -\u003e Spec",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#pvsmix",
        "fct-type": "function",
        "title": "pvsmix"
      },
      "index": {
        "description": "Mix seamlessly two pv signals Mix seamlessly two pv signals This opcode combines the most prominent components of two pvoc streams into single mixed stream fsig pvsmix fsigin1 fsigin2 csound doc http www.csounds.com manual html pvsmix.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "pvsmix",
        "normalized": "Spec-\u003eSpec-\u003eSpec",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Spec-\u003eSpec-\u003eSpec"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:pvsmooth",
      "description": {
        "fct-descr": "\u003cp\u003eSmooth the amplitude and frequency time functions of a pv stream using parallel 1st order\n       lowpass IIR filters with time-varying cutoff frequency.\n\u003c/p\u003e\u003cp\u003eSmooth the amplitude and frequency time functions of a pv stream using a 1st order\n       lowpass IIR with time-varying cutoff frequency. This opcode uses the same filter \n       as the tone opcode, but this time acting separately on the amplitude and frequency\n       time functions that make up a pv stream. The cutoff frequency parameter runs at the\n       control-rate, but unlike tone and tonek, it is not specified in Hz, but as fractions\n       of 1/2 frame-rate (actually the pv stream sampling rate), which is easier to\n       understand. This means that the highest cutoff frequency is 1 and the lowest 0; the lower\n       the frequency the smoother the functions and more pronounced the effect will be.\n\u003c/p\u003e\u003cpre\u003e fsig  pvsmooth  fsigin, kacf, kfcf\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/pvsmooth.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Spec -\u003e Sig -\u003e Sig -\u003e Spec",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#pvsmooth",
        "fct-type": "function",
        "title": "pvsmooth"
      },
      "index": {
        "description": "Smooth the amplitude and frequency time functions of pv stream using parallel st order lowpass IIR filters with time-varying cutoff frequency Smooth the amplitude and frequency time functions of pv stream using st order lowpass IIR with time-varying cutoff frequency This opcode uses the same filter as the tone opcode but this time acting separately on the amplitude and frequency time functions that make up pv stream The cutoff frequency parameter runs at the control-rate but unlike tone and tonek it is not specified in Hz but as fractions of frame-rate actually the pv stream sampling rate which is easier to understand This means that the highest cutoff frequency is and the lowest the lower the frequency the smoother the functions and more pronounced the effect will be fsig pvsmooth fsigin kacf kfcf csound doc http www.csounds.com manual html pvsmooth.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "pvsmooth",
        "normalized": "Spec-\u003eSig-\u003eSig-\u003eSpec",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Spec-\u003eSig-\u003eSig-\u003eSpec"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:pvsmorph",
      "description": {
        "fct-descr": "\u003cp\u003ePerforms morphing (or interpolation) between two source fsigs.\n\u003c/p\u003e\u003cp\u003ePerforms morphing (or interpolation)  between two source fsigs.\n\u003c/p\u003e\u003cpre\u003e fsig  pvsmorph  fsig1, fsig2, kampint, kfrqint\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/pvsmorph.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Spec -\u003e Spec -\u003e Sig -\u003e Sig -\u003e Spec",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#pvsmorph",
        "fct-type": "function",
        "title": "pvsmorph"
      },
      "index": {
        "description": "Performs morphing or interpolation between two source fsigs Performs morphing or interpolation between two source fsigs fsig pvsmorph fsig1 fsig2 kampint kfrqint csound doc http www.csounds.com manual html pvsmorph.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "pvsmorph",
        "normalized": "Spec-\u003eSpec-\u003eSig-\u003eSig-\u003eSpec",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Spec-\u003eSpec-\u003eSig-\u003eSig-\u003eSpec"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:pvsosc",
      "description": {
        "fct-descr": "\u003cp\u003ePVS-based oscillator simulator.\n\u003c/p\u003e\u003cp\u003eGenerates periodic signal spectra in AMP-FREQ format, with the option of four wave types:\n\u003c/p\u003e\u003cpre\u003e fsig  pvsosc  kamp, kfreq, ktype, isize [,ioverlap] [, iwinsize] [, iwintype] [, iformat]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/pvsosc.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig -\u003e D -\u003e Spec",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#pvsosc",
        "fct-type": "function",
        "title": "pvsosc"
      },
      "index": {
        "description": "PVS-based oscillator simulator Generates periodic signal spectra in AMP-FREQ format with the option of four wave types fsig pvsosc kamp kfreq ktype isize ioverlap iwinsize iwintype iformat csound doc http www.csounds.com manual html pvsosc.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "pvsosc",
        "normalized": "Sig-\u003eSig-\u003eSig-\u003eD-\u003eSpec",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig-\u003eD-\u003eSpec"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:pvsout",
      "description": {
        "fct-descr": "\u003cp\u003eWrite a fsig to the pvs output bus.\n\u003c/p\u003e\u003cp\u003eThis opcode writes a fsig to a channel of the pvs output bus. Note that the pvs out bus and\n \t    the pvs in bus are separate and independent. A new channel is created if non-existent.\n\u003c/p\u003e\u003cpre\u003e  pvsout  fsig, kchan\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/pvsout.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Spec -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#pvsout",
        "fct-type": "function",
        "title": "pvsout"
      },
      "index": {
        "description": "Write fsig to the pvs output bus This opcode writes fsig to channel of the pvs output bus Note that the pvs out bus and the pvs in bus are separate and independent new channel is created if non-existent pvsout fsig kchan csound doc http www.csounds.com manual html pvsout.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "pvsout",
        "normalized": "Spec-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Spec-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:pvspitch",
      "description": {
        "fct-descr": "\u003cp\u003eTrack the pitch and amplitude of a PVS signal.\n\u003c/p\u003e\u003cp\u003eTrack the pitch and amplitude of a PVS signal as k-rate variables.\n\u003c/p\u003e\u003cpre\u003e kfr, kamp  pvspitch  fsig, kthresh\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/pvspitch.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Spec -\u003e Sig -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#pvspitch",
        "fct-type": "function",
        "title": "pvspitch"
      },
      "index": {
        "description": "Track the pitch and amplitude of PVS signal Track the pitch and amplitude of PVS signal as k-rate variables kfr kamp pvspitch fsig kthresh csound doc http www.csounds.com manual html pvspitch.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "pvspitch",
        "normalized": "Spec-\u003eSig-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Spec-\u003eSig-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:pvstencil",
      "description": {
        "fct-descr": "\u003cp\u003eTransforms a pvoc stream according to a masking function table.\n\u003c/p\u003e\u003cp\u003eTransforms a pvoc stream according to a masking function table;\n       if the pvoc stream amplitude falls below the value of the function\n       for a specific pvoc channel, it applies a gain to that channel.\n\u003c/p\u003e\u003cpre\u003e fsig  pvstencil  fsigin, kgain, klevel, iftable\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/pvstencil.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Spec -\u003e Sig -\u003e Sig -\u003e D -\u003e Spec",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#pvstencil",
        "fct-type": "function",
        "title": "pvstencil"
      },
      "index": {
        "description": "Transforms pvoc stream according to masking function table Transforms pvoc stream according to masking function table if the pvoc stream amplitude falls below the value of the function for specific pvoc channel it applies gain to that channel fsig pvstencil fsigin kgain klevel iftable csound doc http www.csounds.com manual html pvstencil.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "pvstencil",
        "normalized": "Spec-\u003eSig-\u003eSig-\u003eD-\u003eSpec",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Spec-\u003eSig-\u003eSig-\u003eD-\u003eSpec"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:pvsvoc",
      "description": {
        "fct-descr": "\u003cp\u003eCombine the spectral envelope of one fsig with the excitation (frequencies) of another.\n\u003c/p\u003e\u003cp\u003eThis opcode provides support for cross-synthesis of amplitudes and frequencies. It takes\n     the amplitudes of one input fsig and combines with frequencies from another. It is a spectral\n     version of the well-known channel vocoder.\n\u003c/p\u003e\u003cpre\u003e fsig  pvsvoc  famp, fexc, kdepth, kgain [,kcoefs]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/pvsvoc.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Spec -\u003e Spec -\u003e Sig -\u003e Sig -\u003e Spec",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#pvsvoc",
        "fct-type": "function",
        "title": "pvsvoc"
      },
      "index": {
        "description": "Combine the spectral envelope of one fsig with the excitation frequencies of another This opcode provides support for cross-synthesis of amplitudes and frequencies It takes the amplitudes of one input fsig and combines with frequencies from another It is spectral version of the well-known channel vocoder fsig pvsvoc famp fexc kdepth kgain kcoefs csound doc http www.csounds.com manual html pvsvoc.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "pvsvoc",
        "normalized": "Spec-\u003eSpec-\u003eSig-\u003eSig-\u003eSpec",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Spec-\u003eSpec-\u003eSig-\u003eSig-\u003eSpec"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:pvswarp",
      "description": {
        "fct-descr": "\u003cp\u003eWarp the spectral envelope of a PVS signal\n\u003c/p\u003e\u003cp\u003eWarp the spectral envelope of a PVS signal by means of shifting and scaling.\n\u003c/p\u003e\u003cpre\u003e fsig  pvswarp  fsigin, kscal, kshift[, klowest, kmeth, kgain, kcoefs]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/pvswarp.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Spec -\u003e Sig -\u003e Sig -\u003e Spec",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#pvswarp",
        "fct-type": "function",
        "title": "pvswarp"
      },
      "index": {
        "description": "Warp the spectral envelope of PVS signal Warp the spectral envelope of PVS signal by means of shifting and scaling fsig pvswarp fsigin kscal kshift klowest kmeth kgain kcoefs csound doc http www.csounds.com manual html pvswarp.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "pvswarp",
        "normalized": "Spec-\u003eSig-\u003eSig-\u003eSpec",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Spec-\u003eSig-\u003eSig-\u003eSpec"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:pvsynth",
      "description": {
        "fct-descr": "\u003cp\u003eResynthesise using a FFT overlap-add.\n\u003c/p\u003e\u003cp\u003eResynthesise phase vocoder data (f-signal) using a FFT overlap-add.\n\u003c/p\u003e\u003cpre\u003e ares  pvsynth  fsrc, [iinit]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/pvsynth.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Spec -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#pvsynth",
        "fct-type": "function",
        "title": "pvsynth"
      },
      "index": {
        "description": "Resynthesise using FFT overlap-add Resynthesise phase vocoder data f-signal using FFT overlap-add ares pvsynth fsrc iinit csound doc http www.csounds.com manual html pvsynth.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "pvsynth",
        "normalized": "Spec-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Spec-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:resyn",
      "description": {
        "fct-descr": "\u003cp\u003eStreaming partial track additive synthesis with cubic phase interpolation with\n pitch control and support for timescale-modified input\n\u003c/p\u003e\u003cp\u003eThe resyn opcode takes an input containg a TRACKS pv streaming signal (as generated,\n   for instance by partials). It resynthesises the signal using linear amplitude and cubic phase\n   interpolation to drive a bank of interpolating oscillators with amplitude and pitch scaling controls. Resyn is\n   a modified version of sinsyn, allowing for the resynthesis of data with pitch and timescale changes.\n\u003c/p\u003e\u003cpre\u003e asig  resyn  fin, kscal, kpitch, kmaxtracks, ifn\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/resyn.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Spec -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Tab -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#resyn",
        "fct-type": "function",
        "title": "resyn"
      },
      "index": {
        "description": "Streaming partial track additive synthesis with cubic phase interpolation with pitch control and support for timescale-modified input The resyn opcode takes an input containg TRACKS pv streaming signal as generated for instance by partials It resynthesises the signal using linear amplitude and cubic phase interpolation to drive bank of interpolating oscillators with amplitude and pitch scaling controls Resyn is modified version of sinsyn allowing for the resynthesis of data with pitch and timescale changes asig resyn fin kscal kpitch kmaxtracks ifn csound doc http www.csounds.com manual html resyn.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "resyn",
        "normalized": "Spec-\u003eSig-\u003eSig-\u003eSig-\u003eTab-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Spec-\u003eSig-\u003eSig-\u003eSig-\u003eTab-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:sinsyn",
      "description": {
        "fct-descr": "\u003cp\u003eStreaming partial track additive synthesis with cubic phase interpolation\n\u003c/p\u003e\u003cp\u003eThe sinsyn opcode takes an input containg a TRACKS pv streaming signal (as generated,\n   for instance by the partials opcode). It resynthesises the signal using linear amplitude and cubic phase\n   interpolation to drive a bank of interpolating oscillators with amplitude scaling control. sinsyn \n   attempts to preserve the phase of the partials in the original signal and in so doing it does not allow for\n   pitch or timescale modifications of the signal.\n\u003c/p\u003e\u003cpre\u003e asig  sinsyn  fin, kscal, kmaxtracks, ifn\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/sinsyn.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Spec -\u003e Sig -\u003e Sig -\u003e Tab -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#sinsyn",
        "fct-type": "function",
        "title": "sinsyn"
      },
      "index": {
        "description": "Streaming partial track additive synthesis with cubic phase interpolation The sinsyn opcode takes an input containg TRACKS pv streaming signal as generated for instance by the partials opcode It resynthesises the signal using linear amplitude and cubic phase interpolation to drive bank of interpolating oscillators with amplitude scaling control sinsyn attempts to preserve the phase of the partials in the original signal and in so doing it does not allow for pitch or timescale modifications of the signal asig sinsyn fin kscal kmaxtracks ifn csound doc http www.csounds.com manual html sinsyn.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "sinsyn",
        "normalized": "Spec-\u003eSig-\u003eSig-\u003eTab-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Spec-\u003eSig-\u003eSig-\u003eTab-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:specaddm",
      "description": {
        "fct-descr": "\u003cp\u003ePerform a weighted add of two input spectra.\n\u003c/p\u003e\u003cpre\u003e wsig  specaddm  wsig1, wsig2 [, imul2]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/specaddm.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Wspec -\u003e Wspec -\u003e Wspec",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#specaddm",
        "fct-type": "function",
        "title": "specaddm"
      },
      "index": {
        "description": "Perform weighted add of two input spectra wsig specaddm wsig1 wsig2 imul2 csound doc http www.csounds.com manual html specaddm.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "specaddm",
        "normalized": "Wspec-\u003eWspec-\u003eWspec",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Wspec-\u003eWspec-\u003eWspec"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:specdiff",
      "description": {
        "fct-descr": "\u003cp\u003eFinds the positive difference values between consecutive spectral frames.\n\u003c/p\u003e\u003cpre\u003e wsig  specdiff  wsigin\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/specdiff.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Wspec -\u003e Wspec",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#specdiff",
        "fct-type": "function",
        "title": "specdiff"
      },
      "index": {
        "description": "Finds the positive difference values between consecutive spectral frames wsig specdiff wsigin csound doc http www.csounds.com manual html specdiff.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "specdiff",
        "normalized": "Wspec-\u003eWspec",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Wspec-\u003eWspec"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:specdisp",
      "description": {
        "fct-descr": "\u003cp\u003eDisplays the magnitude values of the spectrum.\n\u003c/p\u003e\u003cpre\u003e  specdisp  wsig, iprd [, iwtflg]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/specdisp.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Wspec -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#specdisp",
        "fct-type": "function",
        "title": "specdisp"
      },
      "index": {
        "description": "Displays the magnitude values of the spectrum specdisp wsig iprd iwtflg csound doc http www.csounds.com manual html specdisp.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "specdisp",
        "normalized": "Wspec-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Wspec-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:specfilt",
      "description": {
        "fct-descr": "\u003cp\u003eFilters each channel of an input spectrum.\n\u003c/p\u003e\u003cpre\u003e wsig  specfilt  wsigin, ifhtim\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/specfilt.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Wspec -\u003e D -\u003e Wspec",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#specfilt",
        "fct-type": "function",
        "title": "specfilt"
      },
      "index": {
        "description": "Filters each channel of an input spectrum wsig specfilt wsigin ifhtim csound doc http www.csounds.com manual html specfilt.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "specfilt",
        "normalized": "Wspec-\u003eD-\u003eWspec",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Wspec-\u003eD-\u003eWspec"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:spechist",
      "description": {
        "fct-descr": "\u003cp\u003eAccumulates the values of successive spectral frames.\n\u003c/p\u003e\u003cpre\u003e wsig  spechist  wsigin\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/spechist.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Wspec -\u003e Wspec",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#spechist",
        "fct-type": "function",
        "title": "spechist"
      },
      "index": {
        "description": "Accumulates the values of successive spectral frames wsig spechist wsigin csound doc http www.csounds.com manual html spechist.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "spechist",
        "normalized": "Wspec-\u003eWspec",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Wspec-\u003eWspec"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:specptrk",
      "description": {
        "fct-descr": "\u003cp\u003eEstimates the pitch of the most prominent complex tone in the spectrum.\n\u003c/p\u003e\u003cp\u003eEstimate the pitch of the most prominent complex tone in the spectrum.\n\u003c/p\u003e\u003cpre\u003e koct, kamp  specptrk  wsig, kvar, ilo, ihi, istr, idbthresh, inptls, \\\n           irolloff [, iodd] [, iconfs] [, interp] [, ifprd] [, iwtflg]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/specptrk.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Wspec -\u003e Sig -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#specptrk",
        "fct-type": "function",
        "title": "specptrk"
      },
      "index": {
        "description": "Estimates the pitch of the most prominent complex tone in the spectrum Estimate the pitch of the most prominent complex tone in the spectrum koct kamp specptrk wsig kvar ilo ihi istr idbthresh inptls irolloff iodd iconfs interp ifprd iwtflg csound doc http www.csounds.com manual html specptrk.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "specptrk",
        "normalized": "Wspec-\u003eSig-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Wspec-\u003eSig-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:specscal",
      "description": {
        "fct-descr": "\u003cp\u003eScales an input spectral datablock with spectral envelopes.\n\u003c/p\u003e\u003cpre\u003e wsig  specscal  wsigin, ifscale, ifthresh\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/specscal.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Wspec -\u003e D -\u003e D -\u003e Wspec",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#specscal",
        "fct-type": "function",
        "title": "specscal"
      },
      "index": {
        "description": "Scales an input spectral datablock with spectral envelopes wsig specscal wsigin ifscale ifthresh csound doc http www.csounds.com manual html specscal.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "specscal",
        "normalized": "Wspec-\u003eD-\u003eD-\u003eWspec",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Wspec-\u003eD-\u003eD-\u003eWspec"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:specsum",
      "description": {
        "fct-descr": "\u003cp\u003eSums the magnitudes across all channels of the spectrum.\n\u003c/p\u003e\u003cpre\u003e ksum  specsum  wsig [, interp]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/specsum.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Wspec -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#specsum",
        "fct-type": "function",
        "title": "specsum"
      },
      "index": {
        "description": "Sums the magnitudes across all channels of the spectrum ksum specsum wsig interp csound doc http www.csounds.com manual html specsum.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "specsum",
        "normalized": "Wspec-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Wspec-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:spectrum",
      "description": {
        "fct-descr": "\u003cp\u003eGenerate a constant-Q, exponentially-spaced DFT.\n\u003c/p\u003e\u003cp\u003eGenerate a constant-Q, exponentially-spaced DFT across all octaves of a multiply-downsampled control or audio input signal.\n\u003c/p\u003e\u003cpre\u003e wsig  spectrum  xsig, iprd, iocts, ifrqa [, iq] [, ihann] [, idbout] \\\n           [, idsprd] [, idsinrs]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/spectrum.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e D -\u003e D -\u003e D -\u003e Wspec",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#spectrum",
        "fct-type": "function",
        "title": "spectrum"
      },
      "index": {
        "description": "Generate constant-Q exponentially-spaced DFT Generate constant-Q exponentially-spaced DFT across all octaves of multiply-downsampled control or audio input signal wsig spectrum xsig iprd iocts ifrqa iq ihann idbout idsprd idsinrs csound doc http www.csounds.com manual html spectrum.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "spectrum",
        "normalized": "Sig-\u003eD-\u003eD-\u003eD-\u003eWspec",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eD-\u003eD-\u003eD-\u003eWspec"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:tableseg",
      "description": {
        "fct-descr": "\u003cp\u003eCreates a new function table by making linear segments between values in stored function tables.\n\u003c/p\u003e\u003cp\u003etableseg is like linseg but interpolate between values in a stored function tables. The result is a new function table passed internally to any following vpvoc which occurs before a subsequent tableseg (much like lpread/lpreson pairs work). The uses of these are described below under vpvoc.\n\u003c/p\u003e\u003cpre\u003e  tableseg  ifn1, idur1, ifn2 [, idur2] [, ifn3] [...]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/tableseg.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Tab -\u003e D -\u003e Tab -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#tableseg",
        "fct-type": "function",
        "title": "tableseg"
      },
      "index": {
        "description": "Creates new function table by making linear segments between values in stored function tables tableseg is like linseg but interpolate between values in stored function tables The result is new function table passed internally to any following vpvoc which occurs before subsequent tableseg much like lpread lpreson pairs work The uses of these are described below under vpvoc tableseg ifn1 idur1 ifn2 idur2 ifn3 csound doc http www.csounds.com manual html tableseg.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "tableseg",
        "normalized": "Tab-\u003eD-\u003eTab-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Tab-\u003eD-\u003eTab-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:tablexseg",
      "description": {
        "fct-descr": "\u003cp\u003eCreates a new function table by making exponential segments between values in stored function tables.\n\u003c/p\u003e\u003cp\u003etablexseg is like expseg but interpolate between values in a stored function tables. The result is a new function table passed internally to any following vpvoc which occurs before a subsequent tablexseg (much like lpread/lpreson pairs work). The uses of these are described below under vpvoc.\n\u003c/p\u003e\u003cpre\u003e  tablexseg  ifn1, idur1, ifn2 [, idur2] [, ifn3] [...]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/tablexseg.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Tab -\u003e D -\u003e Tab -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#tablexseg",
        "fct-type": "function",
        "title": "tablexseg"
      },
      "index": {
        "description": "Creates new function table by making exponential segments between values in stored function tables tablexseg is like expseg but interpolate between values in stored function tables The result is new function table passed internally to any following vpvoc which occurs before subsequent tablexseg much like lpread lpreson pairs work The uses of these are described below under vpvoc tablexseg ifn1 idur1 ifn2 idur2 ifn3 csound doc http www.csounds.com manual html tablexseg.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "tablexseg",
        "normalized": "Tab-\u003eD-\u003eTab-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Tab-\u003eD-\u003eTab-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:tradsyn",
      "description": {
        "fct-descr": "\u003cp\u003eStreaming partial track additive synthesis\n\u003c/p\u003e\u003cp\u003eThe tradsyn opcode takes an input containg a TRACKS pv streaming signal (as generated,\n       for instance by partials),as described in Lazzarini et al, \u003ca\u003eTime-stretching using the Instantaneous Frequency Distribution and Partial\n       Tracking\u003c/a\u003e, Proc.of ICMC05, Barcelona. It resynthesises the signal using linear amplitude and frequency\n       interpolation to drive a bank of interpolating oscillators with amplitude and pitch scaling controls.\n\u003c/p\u003e\u003cpre\u003e asig  tradsyn  fin, kscal, kpitch, kmaxtracks, ifn\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/tradsyn.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Spec -\u003e Sig -\u003e Sig -\u003e Sig -\u003e Tab -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#tradsyn",
        "fct-type": "function",
        "title": "tradsyn"
      },
      "index": {
        "description": "Streaming partial track additive synthesis The tradsyn opcode takes an input containg TRACKS pv streaming signal as generated for instance by partials as described in Lazzarini et al Time-stretching using the Instantaneous Frequency Distribution and Partial Tracking Proc.of ICMC05 Barcelona It resynthesises the signal using linear amplitude and frequency interpolation to drive bank of interpolating oscillators with amplitude and pitch scaling controls asig tradsyn fin kscal kpitch kmaxtracks ifn csound doc http www.csounds.com manual html tradsyn.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "tradsyn",
        "normalized": "Spec-\u003eSig-\u003eSig-\u003eSig-\u003eTab-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Spec-\u003eSig-\u003eSig-\u003eSig-\u003eTab-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:trcross",
      "description": {
        "fct-descr": "\u003cp\u003eStreaming partial track cross-synthesis.\n\u003c/p\u003e\u003cp\u003eThe trcross opcode takes two inputs containg TRACKS pv streaming signals (as generated,\n       for instance by partials) and cross-synthesises them into a single TRACKS stream. Two\n       different modes of operation are used: mode 0, cross-synthesis by multiplication of\n       the amplitudes of the two inputs and mode 1, cross-synthesis by the substititution of\n       the amplitudes of input 1 by the input 2. Frequencies and phases of input 1 are preserved\n       in the output. The cross-synthesis is done by matching tracks between the two inputs using\n       a 'search interval'. The matching algorithm will look for tracks in the second input that \n       are within the search interval around each track in the first input. This interval can be changed\n       at the control rate. Wider search intervals will find more matches.\n\u003c/p\u003e\u003cpre\u003e fsig  trcross  fin1, fin2, ksearch, kdepth [, kmode] \n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/trcross.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Spec -\u003e Spec -\u003e Sig -\u003e Sig -\u003e Spec",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#trcross",
        "fct-type": "function",
        "title": "trcross"
      },
      "index": {
        "description": "Streaming partial track cross-synthesis The trcross opcode takes two inputs containg TRACKS pv streaming signals as generated for instance by partials and cross-synthesises them into single TRACKS stream Two different modes of operation are used mode cross-synthesis by multiplication of the amplitudes of the two inputs and mode cross-synthesis by the substititution of the amplitudes of input by the input Frequencies and phases of input are preserved in the output The cross-synthesis is done by matching tracks between the two inputs using search interval The matching algorithm will look for tracks in the second input that are within the search interval around each track in the first input This interval can be changed at the control rate Wider search intervals will find more matches fsig trcross fin1 fin2 ksearch kdepth kmode csound doc http www.csounds.com manual html trcross.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "trcross",
        "normalized": "Spec-\u003eSpec-\u003eSig-\u003eSig-\u003eSpec",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Spec-\u003eSpec-\u003eSig-\u003eSig-\u003eSpec"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:trfilter",
      "description": {
        "fct-descr": "\u003cp\u003eStreaming partial track filtering.\n\u003c/p\u003e\u003cp\u003eThe trfilter opcode takes an input containg a TRACKS pv streaming signal (as generated,\n       for instance by partials) and filters it using an amplitude response curve stored in\n       a function table. The function table can have any size (no restriction to powers-of-two).\n       The table lookup is done by linear-interpolation. It is possible to create time-varying\n       filter curves by updating the amlitude response table with a table-writing opcode.\n\u003c/p\u003e\u003cpre\u003e fsig  trfilter  fin, kamnt, ifn\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/trfilter.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Spec -\u003e Sig -\u003e Tab -\u003e Spec",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#trfilter",
        "fct-type": "function",
        "title": "trfilter"
      },
      "index": {
        "description": "Streaming partial track filtering The trfilter opcode takes an input containg TRACKS pv streaming signal as generated for instance by partials and filters it using an amplitude response curve stored in function table The function table can have any size no restriction to powers-of-two The table lookup is done by linear-interpolation It is possible to create time-varying filter curves by updating the amlitude response table with table-writing opcode fsig trfilter fin kamnt ifn csound doc http www.csounds.com manual html trfilter.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "trfilter",
        "normalized": "Spec-\u003eSig-\u003eTab-\u003eSpec",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Spec-\u003eSig-\u003eTab-\u003eSpec"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:trhighest",
      "description": {
        "fct-descr": "\u003cp\u003eExtracts the highest-frequency track from a streaming track input signal.\n\u003c/p\u003e\u003cp\u003eThe trhighest opcode takes an input containg TRACKS pv streaming signals (as generated,\n       for instance by partials) and outputs only the highest track. In addition it outputs\n       two k-rate signals, corresponding to the frequency and amplitude of the highest track\n       signal.\n\u003c/p\u003e\u003cpre\u003e fsig, kfr, kamp  trhighest  fin1, kscal\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/trhighest.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Spec -\u003e Sig -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#trhighest",
        "fct-type": "function",
        "title": "trhighest"
      },
      "index": {
        "description": "Extracts the highest-frequency track from streaming track input signal The trhighest opcode takes an input containg TRACKS pv streaming signals as generated for instance by partials and outputs only the highest track In addition it outputs two k-rate signals corresponding to the frequency and amplitude of the highest track signal fsig kfr kamp trhighest fin1 kscal csound doc http www.csounds.com manual html trhighest.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "trhighest",
        "normalized": "Spec-\u003eSig-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Spec-\u003eSig-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:trlowest",
      "description": {
        "fct-descr": "\u003cp\u003eExtracts the lowest-frequency track from a streaming track input signal.\n\u003c/p\u003e\u003cp\u003eThe trlowest opcode takes an input containg TRACKS pv streaming signals (as generated,\n       for instance by partials) and outputs only the lowest track. In addition it outputs\n       two k-rate signals, corresponding to the frequency and amplitude of the lowest track\n       signal.\n\u003c/p\u003e\u003cpre\u003e fsig, kfr, kamp  trlowest  fin1, kscal\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/trlowest.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Spec -\u003e Sig -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#trlowest",
        "fct-type": "function",
        "title": "trlowest"
      },
      "index": {
        "description": "Extracts the lowest-frequency track from streaming track input signal The trlowest opcode takes an input containg TRACKS pv streaming signals as generated for instance by partials and outputs only the lowest track In addition it outputs two k-rate signals corresponding to the frequency and amplitude of the lowest track signal fsig kfr kamp trlowest fin1 kscal csound doc http www.csounds.com manual html trlowest.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "trlowest",
        "normalized": "Spec-\u003eSig-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Spec-\u003eSig-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:trmix",
      "description": {
        "fct-descr": "\u003cp\u003eStreaming partial track mixing.\n\u003c/p\u003e\u003cp\u003eThe trmix opcode takes two inputs containg TRACKS pv streaming signals (as generated,\n       for instance by partials) and mixes them into a single TRACKS stream. Tracks will be\n       mixed up to the available space (defined by the original number of FFT bins in \n       the analysed signals). If the sum of the input tracks exceeds this space, the higher-ordered\n       tracks in the second input will be pruned.\n\u003c/p\u003e\u003cpre\u003e fsig  trmix  fin1, fin2 \n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/trmix.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Spec -\u003e Spec -\u003e Spec",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#trmix",
        "fct-type": "function",
        "title": "trmix"
      },
      "index": {
        "description": "Streaming partial track mixing The trmix opcode takes two inputs containg TRACKS pv streaming signals as generated for instance by partials and mixes them into single TRACKS stream Tracks will be mixed up to the available space defined by the original number of FFT bins in the analysed signals If the sum of the input tracks exceeds this space the higher-ordered tracks in the second input will be pruned fsig trmix fin1 fin2 csound doc http www.csounds.com manual html trmix.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "trmix",
        "normalized": "Spec-\u003eSpec-\u003eSpec",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Spec-\u003eSpec-\u003eSpec"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:trscale",
      "description": {
        "fct-descr": "\u003cp\u003eStreaming partial track frequency scaling.\n\u003c/p\u003e\u003cp\u003eThe trscale opcode takes an input containg a TRACKS pv streaming signal (as generated,\n       for instance by partials) and scales all frequencies by a k-rate amount. It can also, optionally,\n       scale the gain of the signal by a k-rate amount (default 1). The result is pitch shifting of\n       the input tracks.\n\u003c/p\u003e\u003cpre\u003e fsig  trscale  fin, kpitch[, kgain]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/trscale.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Spec -\u003e Sig -\u003e Spec",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#trscale",
        "fct-type": "function",
        "title": "trscale"
      },
      "index": {
        "description": "Streaming partial track frequency scaling The trscale opcode takes an input containg TRACKS pv streaming signal as generated for instance by partials and scales all frequencies by k-rate amount It can also optionally scale the gain of the signal by k-rate amount default The result is pitch shifting of the input tracks fsig trscale fin kpitch kgain csound doc http www.csounds.com manual html trscale.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "trscale",
        "normalized": "Spec-\u003eSig-\u003eSpec",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Spec-\u003eSig-\u003eSpec"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:trshift",
      "description": {
        "fct-descr": "\u003cp\u003eStreaming partial track frequency scaling.\n\u003c/p\u003e\u003cp\u003eThe trshift opcode takes an input containg a TRACKS pv streaming signal (as generated,\n       for instance by partials) and shifts all frequencies by a k-rate frequency. It can also, optionally,\n       scale the gain of the signal by a k-rate amount (default 1). The result is frequency shifting of\n       the input tracks.\n\u003c/p\u003e\u003cpre\u003e fsig  trshift  fin, kpshift[, kgain]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/trshift.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Spec -\u003e Sig -\u003e Spec",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#trshift",
        "fct-type": "function",
        "title": "trshift"
      },
      "index": {
        "description": "Streaming partial track frequency scaling The trshift opcode takes an input containg TRACKS pv streaming signal as generated for instance by partials and shifts all frequencies by k-rate frequency It can also optionally scale the gain of the signal by k-rate amount default The result is frequency shifting of the input tracks fsig trshift fin kpshift kgain csound doc http www.csounds.com manual html trshift.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "trshift",
        "normalized": "Spec-\u003eSig-\u003eSpec",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Spec-\u003eSig-\u003eSpec"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:trsplit",
      "description": {
        "fct-descr": "\u003cp\u003eStreaming partial track frequency splitting.\n\u003c/p\u003e\u003cp\u003eThe trsplit opcode takes an input containg a TRACKS pv streaming signal (as generated,\n       for instance by partials) and splits it into two signals according to a k-rate frequency 'split point'. \n       The first output will contain all tracks up from 0Hz to the split frequency and the second will \n       contain the tracks from the split frequency up to the Nyquist.\n       It can also, optionally, scale the gain of the output signals by a k-rate amount (default 1). \n       The result is two output signals containing only part of the original spectrum.\n\u003c/p\u003e\u003cpre\u003e fsiglow, fsighi  trsplit  fin, ksplit[, kgainlow, kgainhigh]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/trsplit.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Spec -\u003e Sig -\u003e a",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#trsplit",
        "fct-type": "function",
        "title": "trsplit"
      },
      "index": {
        "description": "Streaming partial track frequency splitting The trsplit opcode takes an input containg TRACKS pv streaming signal as generated for instance by partials and splits it into two signals according to k-rate frequency split point The first output will contain all tracks up from Hz to the split frequency and the second will contain the tracks from the split frequency up to the Nyquist It can also optionally scale the gain of the output signals by k-rate amount default The result is two output signals containing only part of the original spectrum fsiglow fsighi trsplit fin ksplit kgainlow kgainhigh csound doc http www.csounds.com manual html trsplit.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "trsplit",
        "normalized": "Spec-\u003eSig-\u003ea",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Spec-\u003eSig-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-SpectralProcessing.html#v:vpvoc",
      "description": {
        "fct-descr": "\u003cp\u003eImplements signal reconstruction using an fft-based phase vocoder and an extra envelope.\n\u003c/p\u003e\u003cpre\u003e ares  vpvoc  ktimpnt, kfmod, ifile [, ispecwp] [, ifn]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vpvoc.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.SpectralProcessing",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Str -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-SpectralProcessing.html#vpvoc",
        "fct-type": "function",
        "title": "vpvoc"
      },
      "index": {
        "description": "Implements signal reconstruction using an fft-based phase vocoder and an extra envelope ares vpvoc ktimpnt kfmod ifile ispecwp ifn csound doc http www.csounds.com manual html vpvoc.html",
        "hierarchy": "Csound Typed Opcode SpectralProcessing",
        "module": "Csound.Typed.Opcode.SpectralProcessing",
        "name": "vpvoc",
        "normalized": "Sig-\u003eSig-\u003eStr-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eStr-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Strings.html#",
      "description": {
        "fct-module": "Csound.Typed.Opcode.Strings",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "module",
        "fct-source": "src/Csound-Typed-Opcode-Strings.html",
        "fct-type": "module",
        "title": "Strings"
      },
      "index": {
        "description": "",
        "hierarchy": "Csound Typed Opcode Strings",
        "module": "Csound.Typed.Opcode.Strings",
        "name": "Strings",
        "normalized": "",
        "package": "csound-expression-opcodes",
        "partial": "Strings",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Strings.html#v:puts",
      "description": {
        "fct-descr": "\u003cp\u003ePrint a string constant or variable\n\u003c/p\u003e\u003cp\u003eputs prints a string with an optional newline at the end whenever the trigger signal is positive and changes.\n\u003c/p\u003e\u003cpre\u003e  puts  Sstr, ktrig[, inonl]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/puts.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Strings",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-Strings.html#puts",
        "fct-type": "function",
        "title": "puts"
      },
      "index": {
        "description": "Print string constant or variable puts prints string with an optional newline at the end whenever the trigger signal is positive and changes puts Sstr ktrig inonl csound doc http www.csounds.com manual html puts.html",
        "hierarchy": "Csound Typed Opcode Strings",
        "module": "Csound.Typed.Opcode.Strings",
        "name": "puts",
        "normalized": "Str-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Strings.html#v:sprintf",
      "description": {
        "fct-descr": "\u003cp\u003eprintf-style formatted output to a string variable.\n\u003c/p\u003e\u003cp\u003esprintf write printf-style formatted output to a string variable, similarly to the C function sprintf(). sprintf runs at i-time only.\n\u003c/p\u003e\u003cpre\u003e Sdst  sprintf  Sfmt, xarg1[, xarg2[, ... ]]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/sprintf.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Strings",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e Sig -\u003e Str",
        "fct-source": "src/Csound-Typed-Opcode-Strings.html#sprintf",
        "fct-type": "function",
        "title": "sprintf"
      },
      "index": {
        "description": "printf-style formatted output to string variable sprintf write printf-style formatted output to string variable similarly to the function sprintf sprintf runs at i-time only Sdst sprintf Sfmt xarg1 xarg2 csound doc http www.csounds.com manual html sprintf.html",
        "hierarchy": "Csound Typed Opcode Strings",
        "module": "Csound.Typed.Opcode.Strings",
        "name": "sprintf",
        "normalized": "Str-\u003eSig-\u003eStr",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eSig-\u003eStr"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Strings.html#v:sprintfk",
      "description": {
        "fct-descr": "\u003cp\u003eprintf-style formatted output to a string variable at k-rate.\n\u003c/p\u003e\u003cp\u003esprintfk writes printf-style formatted output to a string variable, similarly to the C function sprintf(). sprintfk runs both at initialization and performance time.\n\u003c/p\u003e\u003cpre\u003e Sdst  sprintfk  Sfmt, xarg1[, xarg2[, ... ]]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/sprintfk.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Strings",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e Sig -\u003e Str",
        "fct-source": "src/Csound-Typed-Opcode-Strings.html#sprintfk",
        "fct-type": "function",
        "title": "sprintfk"
      },
      "index": {
        "description": "printf-style formatted output to string variable at k-rate sprintfk writes printf-style formatted output to string variable similarly to the function sprintf sprintfk runs both at initialization and performance time Sdst sprintfk Sfmt xarg1 xarg2 csound doc http www.csounds.com manual html sprintfk.html",
        "hierarchy": "Csound Typed Opcode Strings",
        "module": "Csound.Typed.Opcode.Strings",
        "name": "sprintfk",
        "normalized": "Str-\u003eSig-\u003eStr",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eSig-\u003eStr"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Strings.html#v:strcat",
      "description": {
        "fct-descr": "\u003cp\u003eConcatenate strings\n\u003c/p\u003e\u003cp\u003eConcatenate two strings and store the result in a variable. strcat runs at i-time only. It is allowed for any of the input arguments to be the same as the output variable.\n\u003c/p\u003e\u003cpre\u003e Sdst  strcat  Ssrc1, Ssrc2\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/strcat.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Strings",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e Str -\u003e Str",
        "fct-source": "src/Csound-Typed-Opcode-Strings.html#strcat",
        "fct-type": "function",
        "title": "strcat"
      },
      "index": {
        "description": "Concatenate strings Concatenate two strings and store the result in variable strcat runs at i-time only It is allowed for any of the input arguments to be the same as the output variable Sdst strcat Ssrc1 Ssrc2 csound doc http www.csounds.com manual html strcat.html",
        "hierarchy": "Csound Typed Opcode Strings",
        "module": "Csound.Typed.Opcode.Strings",
        "name": "strcat",
        "normalized": "Str-\u003eStr-\u003eStr",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eStr-\u003eStr"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Strings.html#v:strcatk",
      "description": {
        "fct-descr": "\u003cp\u003eConcatenate strings (k-rate)\n\u003c/p\u003e\u003cp\u003eConcatenate two strings and store the result in a variable. strcatk does the concatenation both at initialization and performance time. It is allowed for any of the input arguments to be the same as the output variable.\n\u003c/p\u003e\u003cpre\u003e Sdst  strcatk  Ssrc1, Ssrc2\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/strcatk.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Strings",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e Str -\u003e Str",
        "fct-source": "src/Csound-Typed-Opcode-Strings.html#strcatk",
        "fct-type": "function",
        "title": "strcatk"
      },
      "index": {
        "description": "Concatenate strings k-rate Concatenate two strings and store the result in variable strcatk does the concatenation both at initialization and performance time It is allowed for any of the input arguments to be the same as the output variable Sdst strcatk Ssrc1 Ssrc2 csound doc http www.csounds.com manual html strcatk.html",
        "hierarchy": "Csound Typed Opcode Strings",
        "module": "Csound.Typed.Opcode.Strings",
        "name": "strcatk",
        "normalized": "Str-\u003eStr-\u003eStr",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eStr-\u003eStr"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Strings.html#v:strchar",
      "description": {
        "fct-descr": "\u003cp\u003eReturn the ASCII code of a character in a string\n\u003c/p\u003e\u003cp\u003eReturn the ASCII code of the character in Sstr at ipos (defaults to zero\n       which means the first character), or zero if ipos is out of range.\n       strchar runs at init time only.\n\u003c/p\u003e\u003cpre\u003e ichr  strchar  Sstr[, ipos]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/strchar.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Strings",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e D",
        "fct-source": "src/Csound-Typed-Opcode-Strings.html#strchar",
        "fct-type": "function",
        "title": "strchar"
      },
      "index": {
        "description": "Return the ASCII code of character in string Return the ASCII code of the character in Sstr at ipos defaults to zero which means the first character or zero if ipos is out of range strchar runs at init time only ichr strchar Sstr ipos csound doc http www.csounds.com manual html strchar.html",
        "hierarchy": "Csound Typed Opcode Strings",
        "module": "Csound.Typed.Opcode.Strings",
        "name": "strchar",
        "normalized": "Str-\u003eD",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eD"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Strings.html#v:strchark",
      "description": {
        "fct-descr": "\u003cp\u003eReturn the ASCII code of a character in a string\n\u003c/p\u003e\u003cp\u003eReturn the ASCII code of the character in Sstr at kpos (defaults to zero\n       which means the first character), or zero if kpos is out of range.\n       strchark runs both at init and performance time.\n\u003c/p\u003e\u003cpre\u003e kchr  strchark  Sstr[, kpos]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/strchark.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Strings",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-Strings.html#strchark",
        "fct-type": "function",
        "title": "strchark"
      },
      "index": {
        "description": "Return the ASCII code of character in string Return the ASCII code of the character in Sstr at kpos defaults to zero which means the first character or zero if kpos is out of range strchark runs both at init and performance time kchr strchark Sstr kpos csound doc http www.csounds.com manual html strchark.html",
        "hierarchy": "Csound Typed Opcode Strings",
        "module": "Csound.Typed.Opcode.Strings",
        "name": "strchark",
        "normalized": "Str-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Strings.html#v:strcmp",
      "description": {
        "fct-descr": "\u003cp\u003eCompare strings\n\u003c/p\u003e\u003cp\u003eCompare strings and set the result to -1, 0, or 1 if the first string is less than, equal to, or greater than the second, respectively. strcmp compares at i-time only.\n\u003c/p\u003e\u003cpre\u003e ires  strcmp  S1, S2\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/strcmp.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Strings",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e Str -\u003e D",
        "fct-source": "src/Csound-Typed-Opcode-Strings.html#strcmp",
        "fct-type": "function",
        "title": "strcmp"
      },
      "index": {
        "description": "Compare strings Compare strings and set the result to or if the first string is less than equal to or greater than the second respectively strcmp compares at i-time only ires strcmp S1 S2 csound doc http www.csounds.com manual html strcmp.html",
        "hierarchy": "Csound Typed Opcode Strings",
        "module": "Csound.Typed.Opcode.Strings",
        "name": "strcmp",
        "normalized": "Str-\u003eStr-\u003eD",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eStr-\u003eD"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Strings.html#v:strcmpk",
      "description": {
        "fct-descr": "\u003cp\u003eCompare strings\n\u003c/p\u003e\u003cp\u003eCompare strings and set the result to -1, 0, or 1 if the first string is less than, equal to, or greater than the second, respectively. strcmpk does the comparison both at initialization and performance time.\n\u003c/p\u003e\u003cpre\u003e kres  strcmpk  S1, S2\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/strcmpk.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Strings",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e Str -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-Strings.html#strcmpk",
        "fct-type": "function",
        "title": "strcmpk"
      },
      "index": {
        "description": "Compare strings Compare strings and set the result to or if the first string is less than equal to or greater than the second respectively strcmpk does the comparison both at initialization and performance time kres strcmpk S1 S2 csound doc http www.csounds.com manual html strcmpk.html",
        "hierarchy": "Csound Typed Opcode Strings",
        "module": "Csound.Typed.Opcode.Strings",
        "name": "strcmpk",
        "normalized": "Str-\u003eStr-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eStr-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Strings.html#v:strcpy",
      "description": {
        "fct-descr": "\u003cp\u003eAssign value to a string variable\n\u003c/p\u003e\u003cp\u003eAssign to a string variable by copying the source which may be a constant or another string variable. strcpy and = copy the string at i-time only.\n\u003c/p\u003e\u003cpre\u003e Sdst  strcpy  Ssrc\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/strcpy.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Strings",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e Str",
        "fct-source": "src/Csound-Typed-Opcode-Strings.html#strcpy",
        "fct-type": "function",
        "title": "strcpy"
      },
      "index": {
        "description": "Assign value to string variable Assign to string variable by copying the source which may be constant or another string variable strcpy and copy the string at i-time only Sdst strcpy Ssrc csound doc http www.csounds.com manual html strcpy.html",
        "hierarchy": "Csound Typed Opcode Strings",
        "module": "Csound.Typed.Opcode.Strings",
        "name": "strcpy",
        "normalized": "Str-\u003eStr",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eStr"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Strings.html#v:strcpyk",
      "description": {
        "fct-descr": "\u003cp\u003eAssign value to a string variable (k-rate)\n\u003c/p\u003e\u003cp\u003eAssign to a string variable by copying the source which may be a constant or another string variable. strcpyk does the assignment both at initialization and performance time.\n\u003c/p\u003e\u003cpre\u003e Sdst  strcpyk  Ssrc\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/strcpyk.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Strings",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e Str",
        "fct-source": "src/Csound-Typed-Opcode-Strings.html#strcpyk",
        "fct-type": "function",
        "title": "strcpyk"
      },
      "index": {
        "description": "Assign value to string variable k-rate Assign to string variable by copying the source which may be constant or another string variable strcpyk does the assignment both at initialization and performance time Sdst strcpyk Ssrc csound doc http www.csounds.com manual html strcpyk.html",
        "hierarchy": "Csound Typed Opcode Strings",
        "module": "Csound.Typed.Opcode.Strings",
        "name": "strcpyk",
        "normalized": "Str-\u003eStr",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eStr"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Strings.html#v:strget",
      "description": {
        "fct-descr": "\u003cp\u003eSet string variable to value from strset table or string p-field\n\u003c/p\u003e\u003cp\u003estrget sets a string variable at initialization time to the value stored in strset table at the specified index, or a string p-field from the score. If there is no string defined for the index, the variable is set to an empty string.\n\u003c/p\u003e\u003cpre\u003e Sdst  strget  indx\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/strget.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Strings",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e Str",
        "fct-source": "src/Csound-Typed-Opcode-Strings.html#strget",
        "fct-type": "function",
        "title": "strget"
      },
      "index": {
        "description": "Set string variable to value from strset table or string p-field strget sets string variable at initialization time to the value stored in strset table at the specified index or string p-field from the score If there is no string defined for the index the variable is set to an empty string Sdst strget indx csound doc http www.csounds.com manual html strget.html",
        "hierarchy": "Csound Typed Opcode Strings",
        "module": "Csound.Typed.Opcode.Strings",
        "name": "strget",
        "normalized": "D-\u003eStr",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eStr"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Strings.html#v:strindex",
      "description": {
        "fct-descr": "\u003cp\u003eReturn the position of the first occurence of a string in another string\n\u003c/p\u003e\u003cp\u003eReturn the position of the first occurence of S2 in S1, or -1 if not\n       found. If S2 is empty, 0 is returned. strindex runs at init time only.\n\u003c/p\u003e\u003cpre\u003e ipos  strindex  S1, S2\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/strindex.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Strings",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e Str -\u003e D",
        "fct-source": "src/Csound-Typed-Opcode-Strings.html#strindex",
        "fct-type": "function",
        "title": "strindex"
      },
      "index": {
        "description": "Return the position of the first occurence of string in another string Return the position of the first occurence of S2 in S1 or if not found If S2 is empty is returned strindex runs at init time only ipos strindex S1 S2 csound doc http www.csounds.com manual html strindex.html",
        "hierarchy": "Csound Typed Opcode Strings",
        "module": "Csound.Typed.Opcode.Strings",
        "name": "strindex",
        "normalized": "Str-\u003eStr-\u003eD",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eStr-\u003eD"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Strings.html#v:strindexk",
      "description": {
        "fct-descr": "\u003cp\u003eReturn the position of the first occurence of a string in another string\n\u003c/p\u003e\u003cp\u003eReturn the position of the first occurence of S2 in S1, or -1 if not\n       found. If S2 is empty, 0 is returned. strindexk runs both at init and\n       performance time.\n\u003c/p\u003e\u003cpre\u003e kpos  strindexk  S1, S2\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/strindexk.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Strings",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e Str -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-Strings.html#strindexk",
        "fct-type": "function",
        "title": "strindexk"
      },
      "index": {
        "description": "Return the position of the first occurence of string in another string Return the position of the first occurence of S2 in S1 or if not found If S2 is empty is returned strindexk runs both at init and performance time kpos strindexk S1 S2 csound doc http www.csounds.com manual html strindexk.html",
        "hierarchy": "Csound Typed Opcode Strings",
        "module": "Csound.Typed.Opcode.Strings",
        "name": "strindexk",
        "normalized": "Str-\u003eStr-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eStr-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Strings.html#v:strlen",
      "description": {
        "fct-descr": "\u003cp\u003eReturn the length of a string\n\u003c/p\u003e\u003cp\u003eReturn the length of a string, or zero if it is empty. strlen runs at init time only.\n\u003c/p\u003e\u003cpre\u003e ilen  strlen  Sstr\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/strlen.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Strings",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e D",
        "fct-source": "src/Csound-Typed-Opcode-Strings.html#strlen",
        "fct-type": "function",
        "title": "strlen"
      },
      "index": {
        "description": "Return the length of string Return the length of string or zero if it is empty strlen runs at init time only ilen strlen Sstr csound doc http www.csounds.com manual html strlen.html",
        "hierarchy": "Csound Typed Opcode Strings",
        "module": "Csound.Typed.Opcode.Strings",
        "name": "strlen",
        "normalized": "Str-\u003eD",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eD"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Strings.html#v:strlenk",
      "description": {
        "fct-descr": "\u003cp\u003eReturn the length of a string\n\u003c/p\u003e\u003cp\u003eReturn the length of a string, or zero if it is empty. strlenk runs both at init and performance time.\n\u003c/p\u003e\u003cpre\u003e klen  strlenk  Sstr\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/strlenk.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Strings",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-Strings.html#strlenk",
        "fct-type": "function",
        "title": "strlenk"
      },
      "index": {
        "description": "Return the length of string Return the length of string or zero if it is empty strlenk runs both at init and performance time klen strlenk Sstr csound doc http www.csounds.com manual html strlenk.html",
        "hierarchy": "Csound Typed Opcode Strings",
        "module": "Csound.Typed.Opcode.Strings",
        "name": "strlenk",
        "normalized": "Str-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Strings.html#v:strlower",
      "description": {
        "fct-descr": "\u003cp\u003eConvert a string to lower case\n\u003c/p\u003e\u003cp\u003eConvert Ssrc to lower case, and write the result to Sdst.\n       strlower runs at init time only.\n\u003c/p\u003e\u003cpre\u003e Sdst  strlower  Ssrc\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/strlower.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Strings",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e Str",
        "fct-source": "src/Csound-Typed-Opcode-Strings.html#strlower",
        "fct-type": "function",
        "title": "strlower"
      },
      "index": {
        "description": "Convert string to lower case Convert Ssrc to lower case and write the result to Sdst strlower runs at init time only Sdst strlower Ssrc csound doc http www.csounds.com manual html strlower.html",
        "hierarchy": "Csound Typed Opcode Strings",
        "module": "Csound.Typed.Opcode.Strings",
        "name": "strlower",
        "normalized": "Str-\u003eStr",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eStr"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Strings.html#v:strlowerk",
      "description": {
        "fct-descr": "\u003cp\u003eConvert a string to lower case\n\u003c/p\u003e\u003cp\u003eConvert Ssrc to lower case, and write the result to Sdst.\n       strlowerk runs both at init and performance time.\n\u003c/p\u003e\u003cpre\u003e Sdst  strlowerk  Ssrc\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/strlowerk.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Strings",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e Str",
        "fct-source": "src/Csound-Typed-Opcode-Strings.html#strlowerk",
        "fct-type": "function",
        "title": "strlowerk"
      },
      "index": {
        "description": "Convert string to lower case Convert Ssrc to lower case and write the result to Sdst strlowerk runs both at init and performance time Sdst strlowerk Ssrc csound doc http www.csounds.com manual html strlowerk.html",
        "hierarchy": "Csound Typed Opcode Strings",
        "module": "Csound.Typed.Opcode.Strings",
        "name": "strlowerk",
        "normalized": "Str-\u003eStr",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eStr"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Strings.html#v:strrindex",
      "description": {
        "fct-descr": "\u003cp\u003eReturn the position of the last occurence of a string in another string\n\u003c/p\u003e\u003cp\u003eReturn the position of the last occurence of S2 in S1, or -1 if not\n       found. If S2 is empty, the length of S1 is returned. strrindex runs\n       at init time only.\n\u003c/p\u003e\u003cpre\u003e ipos  strrindex  S1, S2\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/strrindex.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Strings",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e Str -\u003e D",
        "fct-source": "src/Csound-Typed-Opcode-Strings.html#strrindex",
        "fct-type": "function",
        "title": "strrindex"
      },
      "index": {
        "description": "Return the position of the last occurence of string in another string Return the position of the last occurence of S2 in S1 or if not found If S2 is empty the length of S1 is returned strrindex runs at init time only ipos strrindex S1 S2 csound doc http www.csounds.com manual html strrindex.html",
        "hierarchy": "Csound Typed Opcode Strings",
        "module": "Csound.Typed.Opcode.Strings",
        "name": "strrindex",
        "normalized": "Str-\u003eStr-\u003eD",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eStr-\u003eD"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Strings.html#v:strrindexk",
      "description": {
        "fct-descr": "\u003cp\u003eReturn the position of the last occurence of a string in another string\n\u003c/p\u003e\u003cp\u003eReturn the position of the last occurence of S2 in S1, or -1 if not\n       found. If S2 is empty, the length of S1 is returned. strrindexk runs\n       both at init and performance time.\n\u003c/p\u003e\u003cpre\u003e kpos  strrindexk  S1, S2\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/strrindexk.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Strings",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e Str -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-Strings.html#strrindexk",
        "fct-type": "function",
        "title": "strrindexk"
      },
      "index": {
        "description": "Return the position of the last occurence of string in another string Return the position of the last occurence of S2 in S1 or if not found If S2 is empty the length of S1 is returned strrindexk runs both at init and performance time kpos strrindexk S1 S2 csound doc http www.csounds.com manual html strrindexk.html",
        "hierarchy": "Csound Typed Opcode Strings",
        "module": "Csound.Typed.Opcode.Strings",
        "name": "strrindexk",
        "normalized": "Str-\u003eStr-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eStr-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Strings.html#v:strset",
      "description": {
        "fct-descr": "\u003cp\u003eAllows a string to be linked with a numeric value.\n\u003c/p\u003e\u003cpre\u003e  strset  iarg, istring\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/strset.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Strings",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-Strings.html#strset",
        "fct-type": "function",
        "title": "strset"
      },
      "index": {
        "description": "Allows string to be linked with numeric value strset iarg istring csound doc http www.csounds.com manual html strset.html",
        "hierarchy": "Csound Typed Opcode Strings",
        "module": "Csound.Typed.Opcode.Strings",
        "name": "strset",
        "normalized": "D-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Strings.html#v:strsub",
      "description": {
        "fct-descr": "\u003cp\u003eExtract a substring\n\u003c/p\u003e\u003cp\u003eReturn a substring of the source string. strsub runs at init time only.\n\u003c/p\u003e\u003cpre\u003e Sdst  strsub  Ssrc[, istart[, iend]]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/strsub.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Strings",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e Str",
        "fct-source": "src/Csound-Typed-Opcode-Strings.html#strsub",
        "fct-type": "function",
        "title": "strsub"
      },
      "index": {
        "description": "Extract substring Return substring of the source string strsub runs at init time only Sdst strsub Ssrc istart iend csound doc http www.csounds.com manual html strsub.html",
        "hierarchy": "Csound Typed Opcode Strings",
        "module": "Csound.Typed.Opcode.Strings",
        "name": "strsub",
        "normalized": "Str-\u003eStr",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eStr"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Strings.html#v:strsubk",
      "description": {
        "fct-descr": "\u003cp\u003eExtract a substring\n\u003c/p\u003e\u003cp\u003eReturn a substring of the source string. strsubk runs both at init and\n       performance time.\n\u003c/p\u003e\u003cpre\u003e Sdst  strsubk  Ssrc, kstart, kend\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/strsubk.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Strings",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e Sig -\u003e Sig -\u003e Str",
        "fct-source": "src/Csound-Typed-Opcode-Strings.html#strsubk",
        "fct-type": "function",
        "title": "strsubk"
      },
      "index": {
        "description": "Extract substring Return substring of the source string strsubk runs both at init and performance time Sdst strsubk Ssrc kstart kend csound doc http www.csounds.com manual html strsubk.html",
        "hierarchy": "Csound Typed Opcode Strings",
        "module": "Csound.Typed.Opcode.Strings",
        "name": "strsubk",
        "normalized": "Str-\u003eSig-\u003eSig-\u003eStr",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eSig-\u003eSig-\u003eStr"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Strings.html#v:strtod",
      "description": {
        "fct-descr": "\u003cp\u003eConverts a string to a float (i-rate).\n\u003c/p\u003e\u003cp\u003eConvert a string to a floating point value. It is also possible to\n     pass an strset index or a string p-field from the score instead of a string\n     argument. If the string cannot be parsed as a floating point or integer number, an init or perf error occurs and the instrument is deactivated.\n\u003c/p\u003e\u003cpre\u003e ir  strtod  Sstr\n ir  strtod  indx\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/strtod.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Strings",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e D",
        "fct-source": "src/Csound-Typed-Opcode-Strings.html#strtod",
        "fct-type": "function",
        "title": "strtod"
      },
      "index": {
        "description": "Converts string to float i-rate Convert string to floating point value It is also possible to pass an strset index or string p-field from the score instead of string argument If the string cannot be parsed as floating point or integer number an init or perf error occurs and the instrument is deactivated ir strtod Sstr ir strtod indx csound doc http www.csounds.com manual html strtod.html",
        "hierarchy": "Csound Typed Opcode Strings",
        "module": "Csound.Typed.Opcode.Strings",
        "name": "strtod",
        "normalized": "Str-\u003eD",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eD"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Strings.html#v:strtodk",
      "description": {
        "fct-descr": "\u003cp\u003eConverts a string to a float (k-rate).\n\u003c/p\u003e\u003cp\u003eConvert a string to a floating point value at i- or k-rate. It is also possible to pass an strset index or a string p-field from the score instead of a string\n     argument. If the string cannot be parsed as a floating point or integer number, an init or perf error occurs and the instrument is deactivated.\n\u003c/p\u003e\u003cpre\u003e kr  strtodk  Sstr\n kr  strtodk  kndx\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/strtodk.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Strings",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-Strings.html#strtodk",
        "fct-type": "function",
        "title": "strtodk"
      },
      "index": {
        "description": "Converts string to float k-rate Convert string to floating point value at or k-rate It is also possible to pass an strset index or string p-field from the score instead of string argument If the string cannot be parsed as floating point or integer number an init or perf error occurs and the instrument is deactivated kr strtodk Sstr kr strtodk kndx csound doc http www.csounds.com manual html strtodk.html",
        "hierarchy": "Csound Typed Opcode Strings",
        "module": "Csound.Typed.Opcode.Strings",
        "name": "strtodk",
        "normalized": "Str-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Strings.html#v:strtol",
      "description": {
        "fct-descr": "\u003cp\u003eConverts a string to a signed integer (i-rate).\n\u003c/p\u003e\u003cp\u003eConvert a string to a signed integer value. It is also possible to\n     pass an strset index or a string p-field from the score instead of a string\n     argument. If the string cannot be parsed as an integer number, an init error occurs and the instrument is deactivated.\n\u003c/p\u003e\u003cpre\u003e ir  strtol  Sstr\n ir  strtol  indx\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/strtol.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Strings",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e D",
        "fct-source": "src/Csound-Typed-Opcode-Strings.html#strtol",
        "fct-type": "function",
        "title": "strtol"
      },
      "index": {
        "description": "Converts string to signed integer i-rate Convert string to signed integer value It is also possible to pass an strset index or string p-field from the score instead of string argument If the string cannot be parsed as an integer number an init error occurs and the instrument is deactivated ir strtol Sstr ir strtol indx csound doc http www.csounds.com manual html strtol.html",
        "hierarchy": "Csound Typed Opcode Strings",
        "module": "Csound.Typed.Opcode.Strings",
        "name": "strtol",
        "normalized": "Str-\u003eD",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eD"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Strings.html#v:strtolk",
      "description": {
        "fct-descr": "\u003cp\u003eConverts a string to a signed integer (k-rate).\n\u003c/p\u003e\u003cp\u003eConvert a string to a signed integer value at i- or k-rate. It is also possible to pass an strset index or a string p-field from the score instead of a string\n     argument. If the string cannot be parsed as an integer number, an init or perf error occurs and the instrument is deactivated.\n\u003c/p\u003e\u003cpre\u003e kr  strtolk  Sstr\n kr  strtolk  kndx\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/strtolk.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Strings",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-Strings.html#strtolk",
        "fct-type": "function",
        "title": "strtolk"
      },
      "index": {
        "description": "Converts string to signed integer k-rate Convert string to signed integer value at or k-rate It is also possible to pass an strset index or string p-field from the score instead of string argument If the string cannot be parsed as an integer number an init or perf error occurs and the instrument is deactivated kr strtolk Sstr kr strtolk kndx csound doc http www.csounds.com manual html strtolk.html",
        "hierarchy": "Csound Typed Opcode Strings",
        "module": "Csound.Typed.Opcode.Strings",
        "name": "strtolk",
        "normalized": "Str-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Strings.html#v:strupper",
      "description": {
        "fct-descr": "\u003cp\u003eConvert a string to upper case\n\u003c/p\u003e\u003cp\u003eConvert Ssrc to upper case, and write the result to Sdst.\n       strupper runs at init time only.\n\u003c/p\u003e\u003cpre\u003e Sdst  strupper  Ssrc\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/strupper.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Strings",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e Str",
        "fct-source": "src/Csound-Typed-Opcode-Strings.html#strupper",
        "fct-type": "function",
        "title": "strupper"
      },
      "index": {
        "description": "Convert string to upper case Convert Ssrc to upper case and write the result to Sdst strupper runs at init time only Sdst strupper Ssrc csound doc http www.csounds.com manual html strupper.html",
        "hierarchy": "Csound Typed Opcode Strings",
        "module": "Csound.Typed.Opcode.Strings",
        "name": "strupper",
        "normalized": "Str-\u003eStr",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eStr"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Strings.html#v:strupperk",
      "description": {
        "fct-descr": "\u003cp\u003eConvert a string to upper case\n\u003c/p\u003e\u003cp\u003eConvert Ssrc to upper case, and write the result to Sdst.\n       strupperk runs both at init and performance time.\n\u003c/p\u003e\u003cpre\u003e Sdst  strupperk  Ssrc\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/strupperk.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Strings",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e Str",
        "fct-source": "src/Csound-Typed-Opcode-Strings.html#strupperk",
        "fct-type": "function",
        "title": "strupperk"
      },
      "index": {
        "description": "Convert string to upper case Convert Ssrc to upper case and write the result to Sdst strupperk runs both at init and performance time Sdst strupperk Ssrc csound doc http www.csounds.com manual html strupperk.html",
        "hierarchy": "Csound Typed Opcode Strings",
        "module": "Csound.Typed.Opcode.Strings",
        "name": "strupperk",
        "normalized": "Str-\u003eStr",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eStr"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-TableControl.html#",
      "description": {
        "fct-module": "Csound.Typed.Opcode.TableControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "module",
        "fct-source": "src/Csound-Typed-Opcode-TableControl.html",
        "fct-type": "module",
        "title": "TableControl"
      },
      "index": {
        "description": "",
        "hierarchy": "Csound Typed Opcode TableControl",
        "module": "Csound.Typed.Opcode.TableControl",
        "name": "TableControl",
        "normalized": "",
        "package": "csound-expression-opcodes",
        "partial": "Table Control",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-TableControl.html#v:ftfree",
      "description": {
        "fct-descr": "\u003cp\u003eDeletes function table.\n\u003c/p\u003e\u003cpre\u003e  ftfree  ifno, iwhen\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/ftfree.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.TableControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Tab -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-TableControl.html#ftfree",
        "fct-type": "function",
        "title": "ftfree"
      },
      "index": {
        "description": "Deletes function table ftfree ifno iwhen csound doc http www.csounds.com manual html ftfree.html",
        "hierarchy": "Csound Typed Opcode TableControl",
        "module": "Csound.Typed.Opcode.TableControl",
        "name": "ftfree",
        "normalized": "Tab-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Tab-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-TableControl.html#v:ftgen",
      "description": {
        "fct-descr": "\u003cp\u003eGenerate a score function table from within the orchestra.\n\u003c/p\u003e\u003cpre\u003e gir  ftgen  ifn, itime, isize, igen, iarga [, iargb ] [...]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/ftgen.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.TableControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Tab -\u003e D -\u003e D -\u003e D -\u003e D -\u003e SE D",
        "fct-source": "src/Csound-Typed-Opcode-TableControl.html#ftgen",
        "fct-type": "function",
        "title": "ftgen"
      },
      "index": {
        "description": "Generate score function table from within the orchestra gir ftgen ifn itime isize igen iarga iargb csound doc http www.csounds.com manual html ftgen.html",
        "hierarchy": "Csound Typed Opcode TableControl",
        "module": "Csound.Typed.Opcode.TableControl",
        "name": "ftgen",
        "normalized": "Tab-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSE D",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Tab-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSE D"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-TableControl.html#v:ftgentmp",
      "description": {
        "fct-descr": "\u003cp\u003eGenerate a score function table from within the orchestra, which is deleted at the end of the note.\n\u003c/p\u003e\u003cp\u003eGenerate a score function table from within the orchestra,\n     which is optionally deleted at the end of the note.\n\u003c/p\u003e\u003cpre\u003e ifno  ftgentmp  ip1, ip2dummy, isize, igen, iarga, iargb, ...\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/ftgentmp.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.TableControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e [D] -\u003e Tab",
        "fct-source": "src/Csound-Typed-Opcode-TableControl.html#ftgentmp",
        "fct-type": "function",
        "title": "ftgentmp"
      },
      "index": {
        "description": "Generate score function table from within the orchestra which is deleted at the end of the note Generate score function table from within the orchestra which is optionally deleted at the end of the note ifno ftgentmp ip1 ip2dummy isize igen iarga iargb csound doc http www.csounds.com manual html ftgentmp.html",
        "hierarchy": "Csound Typed Opcode TableControl",
        "module": "Csound.Typed.Opcode.TableControl",
        "name": "ftgentmp",
        "normalized": "D-\u003eD-\u003eD-\u003eD-\u003eD-\u003e[D]-\u003eTab",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eD-\u003eD-\u003eD-\u003e[D]-\u003eTab"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-TableControl.html#v:sndload",
      "description": {
        "fct-descr": "\u003cp\u003eLoads a sound file into memory for use by loscilx\n\u003c/p\u003e\u003cp\u003esndload loads a sound file into memory for use by loscilx.\n\u003c/p\u003e\u003cpre\u003e  sndload  Sfname[, ifmt[, ichns[, isr[, ibas[, iamp[, istrt   \\\n           [, ilpmod[, ilps[, ilpe]]]]]]]]]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/sndload.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.TableControl",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Str -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-TableControl.html#sndload",
        "fct-type": "function",
        "title": "sndload"
      },
      "index": {
        "description": "Loads sound file into memory for use by loscilx sndload loads sound file into memory for use by loscilx sndload Sfname ifmt ichns isr ibas iamp istrt ilpmod ilps ilpe csound doc http www.csounds.com manual html sndload.html",
        "hierarchy": "Csound Typed Opcode TableControl",
        "module": "Csound.Typed.Opcode.TableControl",
        "name": "sndload",
        "normalized": "Str-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Str-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Vectorial.html#",
      "description": {
        "fct-module": "Csound.Typed.Opcode.Vectorial",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "module",
        "fct-source": "src/Csound-Typed-Opcode-Vectorial.html",
        "fct-type": "module",
        "title": "Vectorial"
      },
      "index": {
        "description": "",
        "hierarchy": "Csound Typed Opcode Vectorial",
        "module": "Csound.Typed.Opcode.Vectorial",
        "name": "Vectorial",
        "normalized": "",
        "package": "csound-expression-opcodes",
        "partial": "Vectorial",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Vectorial.html#v:cell",
      "description": {
        "fct-descr": "\u003cp\u003eCellular Automaton\n\u003c/p\u003e\u003cp\u003eOne-Dimensional Cellular Automaton. This opcode is the\n          modified version of vcella by Gabriel Maldonado.\n\u003c/p\u003e\u003cpre\u003e  cell  ktrig, kreinit, ioutFunc, initStateFunc, iRuleFunc, ielements\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/cell.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Vectorial",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e D -\u003e D -\u003e D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-Vectorial.html#cell",
        "fct-type": "function",
        "title": "cell"
      },
      "index": {
        "description": "Cellular Automaton One-Dimensional Cellular Automaton This opcode is the modified version of vcella by Gabriel Maldonado cell ktrig kreinit ioutFunc initStateFunc iRuleFunc ielements csound doc http www.csounds.com manual html cell.html",
        "hierarchy": "Csound Typed Opcode Vectorial",
        "module": "Csound.Typed.Opcode.Vectorial",
        "name": "cell",
        "normalized": "Sig-\u003eSig-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Vectorial.html#v:vadd",
      "description": {
        "fct-descr": "\u003cp\u003eAdds a scalar value to a vector in a table.\n\u003c/p\u003e\u003cpre\u003e  vadd   ifn, kval, kelements [, kdstoffset] [, kverbose]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vadd.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Vectorial",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Tab -\u003e Sig -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-Vectorial.html#vadd",
        "fct-type": "function",
        "title": "vadd"
      },
      "index": {
        "description": "Adds scalar value to vector in table vadd ifn kval kelements kdstoffset kverbose csound doc http www.csounds.com manual html vadd.html",
        "hierarchy": "Csound Typed Opcode Vectorial",
        "module": "Csound.Typed.Opcode.Vectorial",
        "name": "vadd",
        "normalized": "Tab-\u003eSig-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Tab-\u003eSig-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Vectorial.html#v:vadd_i",
      "description": {
        "fct-descr": "\u003cp\u003eAdds a scalar value to a vector in a table.\n\u003c/p\u003e\u003cpre\u003e  vadd_i   ifn, ival, ielements [, idstoffset]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vadd_i.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Vectorial",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Tab -\u003e D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-Vectorial.html#vadd_i",
        "fct-type": "function",
        "title": "vadd_i"
      },
      "index": {
        "description": "Adds scalar value to vector in table vadd ifn ival ielements idstoffset csound doc http www.csounds.com manual html vadd i.html",
        "hierarchy": "Csound Typed Opcode Vectorial",
        "module": "Csound.Typed.Opcode.Vectorial",
        "name": "vadd_i",
        "normalized": "Tab-\u003eD-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Tab-\u003eD-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Vectorial.html#v:vaddv",
      "description": {
        "fct-descr": "\u003cp\u003ePerforms addition between two vectorial control signals.\n\u003c/p\u003e\u003cpre\u003e  vaddv   ifn1, ifn2, kelements [, kdstoffset] [, ksrcoffset] [,kverbose]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vaddv.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Vectorial",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Tab -\u003e Tab -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-Vectorial.html#vaddv",
        "fct-type": "function",
        "title": "vaddv"
      },
      "index": {
        "description": "Performs addition between two vectorial control signals vaddv ifn1 ifn2 kelements kdstoffset ksrcoffset kverbose csound doc http www.csounds.com manual html vaddv.html",
        "hierarchy": "Csound Typed Opcode Vectorial",
        "module": "Csound.Typed.Opcode.Vectorial",
        "name": "vaddv",
        "normalized": "Tab-\u003eTab-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Tab-\u003eTab-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Vectorial.html#v:vaddv_i",
      "description": {
        "fct-descr": "\u003cp\u003ePerforms addition between two vectorial control signals at init time.\n\u003c/p\u003e\u003cpre\u003e  vaddv_i   ifn1, ifn2, ielements [, idstoffset] [, isrcoffset]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vaddv_i.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Vectorial",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Tab -\u003e Tab -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-Vectorial.html#vaddv_i",
        "fct-type": "function",
        "title": "vaddv_i"
      },
      "index": {
        "description": "Performs addition between two vectorial control signals at init time vaddv ifn1 ifn2 ielements idstoffset isrcoffset csound doc http www.csounds.com manual html vaddv i.html",
        "hierarchy": "Csound Typed Opcode Vectorial",
        "module": "Csound.Typed.Opcode.Vectorial",
        "name": "vaddv_i",
        "normalized": "Tab-\u003eTab-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Tab-\u003eTab-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Vectorial.html#v:vcella",
      "description": {
        "fct-descr": "\u003cp\u003eCellular Automata\n\u003c/p\u003e\u003cp\u003eUnidimensional Cellular Automata applied to Csound vectors\n\u003c/p\u003e\u003cpre\u003e  vcella  ktrig, kreinit, ioutFunc, initStateFunc, \\\n           iRuleFunc, ielements, irulelen [, iradius]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vcella.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Vectorial",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e D -\u003e D -\u003e D -\u003e D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-Vectorial.html#vcella",
        "fct-type": "function",
        "title": "vcella"
      },
      "index": {
        "description": "Cellular Automata Unidimensional Cellular Automata applied to Csound vectors vcella ktrig kreinit ioutFunc initStateFunc iRuleFunc ielements irulelen iradius csound doc http www.csounds.com manual html vcella.html",
        "hierarchy": "Csound Typed Opcode Vectorial",
        "module": "Csound.Typed.Opcode.Vectorial",
        "name": "vcella",
        "normalized": "Sig-\u003eSig-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eD-\u003eD-\u003eD-\u003eD-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Vectorial.html#v:vcopy",
      "description": {
        "fct-descr": "\u003cp\u003eCopies between two vectorial control signals\n\u003c/p\u003e\u003cpre\u003e  vcopy   ifn1, ifn2, kelements [, kdstoffset] [, ksrcoffset] [, kverbose]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vcopy.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Vectorial",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Tab -\u003e Tab -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-Vectorial.html#vcopy",
        "fct-type": "function",
        "title": "vcopy"
      },
      "index": {
        "description": "Copies between two vectorial control signals vcopy ifn1 ifn2 kelements kdstoffset ksrcoffset kverbose csound doc http www.csounds.com manual html vcopy.html",
        "hierarchy": "Csound Typed Opcode Vectorial",
        "module": "Csound.Typed.Opcode.Vectorial",
        "name": "vcopy",
        "normalized": "Tab-\u003eTab-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Tab-\u003eTab-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Vectorial.html#v:vcopy_i",
      "description": {
        "fct-descr": "\u003cp\u003eCopies a vector from one table to another.\n\u003c/p\u003e\u003cpre\u003e  vcopy_i   ifn1, ifn2, ielements [,idstoffset, isrcoffset]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vcopy_i.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Vectorial",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Tab -\u003e Tab -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-Vectorial.html#vcopy_i",
        "fct-type": "function",
        "title": "vcopy_i"
      },
      "index": {
        "description": "Copies vector from one table to another vcopy ifn1 ifn2 ielements idstoffset isrcoffset csound doc http www.csounds.com manual html vcopy i.html",
        "hierarchy": "Csound Typed Opcode Vectorial",
        "module": "Csound.Typed.Opcode.Vectorial",
        "name": "vcopy_i",
        "normalized": "Tab-\u003eTab-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Tab-\u003eTab-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Vectorial.html#v:vdelayk",
      "description": {
        "fct-descr": "\u003cp\u003ek-rate variable time delay.\n\u003c/p\u003e\u003cp\u003eVariable delay applied to a k-rate signal\n\u003c/p\u003e\u003cpre\u003e kout  vdelayk   ksig, kdel, imaxdel [, iskip, imode]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vdelayk.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Vectorial",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e D -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-Vectorial.html#vdelayk",
        "fct-type": "function",
        "title": "vdelayk"
      },
      "index": {
        "description": "k-rate variable time delay Variable delay applied to k-rate signal kout vdelayk ksig kdel imaxdel iskip imode csound doc http www.csounds.com manual html vdelayk.html",
        "hierarchy": "Csound Typed Opcode Vectorial",
        "module": "Csound.Typed.Opcode.Vectorial",
        "name": "vdelayk",
        "normalized": "Sig-\u003eSig-\u003eD-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eD-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Vectorial.html#v:vdivv",
      "description": {
        "fct-descr": "\u003cp\u003ePerforms division between two vectorial control signals\n\u003c/p\u003e\u003cpre\u003e  vdivv   ifn1, ifn2, kelements [, kdstoffset] [, ksrcoffset] [,kverbose]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vdivv.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Vectorial",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Tab -\u003e Tab -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-Vectorial.html#vdivv",
        "fct-type": "function",
        "title": "vdivv"
      },
      "index": {
        "description": "Performs division between two vectorial control signals vdivv ifn1 ifn2 kelements kdstoffset ksrcoffset kverbose csound doc http www.csounds.com manual html vdivv.html",
        "hierarchy": "Csound Typed Opcode Vectorial",
        "module": "Csound.Typed.Opcode.Vectorial",
        "name": "vdivv",
        "normalized": "Tab-\u003eTab-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Tab-\u003eTab-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Vectorial.html#v:vdivv_i",
      "description": {
        "fct-descr": "\u003cp\u003ePerforms division between two vectorial control signals at init time.\n\u003c/p\u003e\u003cpre\u003e  vdivv_i   ifn1, ifn2, ielements [, idstoffset] [, isrcoffset]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vdivv_i.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Vectorial",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Tab -\u003e Tab -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-Vectorial.html#vdivv_i",
        "fct-type": "function",
        "title": "vdivv_i"
      },
      "index": {
        "description": "Performs division between two vectorial control signals at init time vdivv ifn1 ifn2 ielements idstoffset isrcoffset csound doc http www.csounds.com manual html vdivv i.html",
        "hierarchy": "Csound Typed Opcode Vectorial",
        "module": "Csound.Typed.Opcode.Vectorial",
        "name": "vdivv_i",
        "normalized": "Tab-\u003eTab-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Tab-\u003eTab-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Vectorial.html#v:vecdelay",
      "description": {
        "fct-descr": "\u003cp\u003eVectorial Control-rate Delay Paths\n\u003c/p\u003e\u003cp\u003eGenerate a sort of \u003ccode\u003evectorial\u003c/code\u003e delay\n\u003c/p\u003e\u003cpre\u003e  vecdelay   ifn, ifnIn, ifnDel, ielements, imaxdel [, iskip]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vecdelay.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Vectorial",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Tab -\u003e Tab -\u003e Tab -\u003e D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-Vectorial.html#vecdelay",
        "fct-type": "function",
        "title": "vecdelay"
      },
      "index": {
        "description": "Vectorial Control-rate Delay Paths Generate sort of vectorial delay vecdelay ifn ifnIn ifnDel ielements imaxdel iskip csound doc http www.csounds.com manual html vecdelay.html",
        "hierarchy": "Csound Typed Opcode Vectorial",
        "module": "Csound.Typed.Opcode.Vectorial",
        "name": "vecdelay",
        "normalized": "Tab-\u003eTab-\u003eTab-\u003eD-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Tab-\u003eTab-\u003eTab-\u003eD-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Vectorial.html#v:vexp",
      "description": {
        "fct-descr": "\u003cp\u003ePerforms power-of operations between a vector and a scalar\n\u003c/p\u003e\u003cpre\u003e  vexp   ifn, kval, kelements [, kdstoffset] [, kverbose]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vexp.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Vectorial",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Tab -\u003e Sig -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-Vectorial.html#vexp",
        "fct-type": "function",
        "title": "vexp"
      },
      "index": {
        "description": "Performs power-of operations between vector and scalar vexp ifn kval kelements kdstoffset kverbose csound doc http www.csounds.com manual html vexp.html",
        "hierarchy": "Csound Typed Opcode Vectorial",
        "module": "Csound.Typed.Opcode.Vectorial",
        "name": "vexp",
        "normalized": "Tab-\u003eSig-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Tab-\u003eSig-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Vectorial.html#v:vexp_i",
      "description": {
        "fct-descr": "\u003cp\u003ePerforms power-of operations between a vector and a scalar\n\u003c/p\u003e\u003cpre\u003e  vexp_i   ifn, ival, ielements[, idstoffset]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vexp_i.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Vectorial",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Tab -\u003e D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-Vectorial.html#vexp_i",
        "fct-type": "function",
        "title": "vexp_i"
      },
      "index": {
        "description": "Performs power-of operations between vector and scalar vexp ifn ival ielements idstoffset csound doc http www.csounds.com manual html vexp i.html",
        "hierarchy": "Csound Typed Opcode Vectorial",
        "module": "Csound.Typed.Opcode.Vectorial",
        "name": "vexp_i",
        "normalized": "Tab-\u003eD-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Tab-\u003eD-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Vectorial.html#v:vexpseg",
      "description": {
        "fct-descr": "\u003cp\u003eVectorial envelope generator\n\u003c/p\u003e\u003cp\u003eGenerate exponential vectorial segments\n\u003c/p\u003e\u003cpre\u003e  vexpseg   ifnout, ielements, ifn1, idur1, ifn2 [, idur2, ifn3 [...]]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vexpseg.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Vectorial",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Tab -\u003e D -\u003e Tab -\u003e D -\u003e Tab -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-Vectorial.html#vexpseg",
        "fct-type": "function",
        "title": "vexpseg"
      },
      "index": {
        "description": "Vectorial envelope generator Generate exponential vectorial segments vexpseg ifnout ielements ifn1 idur1 ifn2 idur2 ifn3 csound doc http www.csounds.com manual html vexpseg.html",
        "hierarchy": "Csound Typed Opcode Vectorial",
        "module": "Csound.Typed.Opcode.Vectorial",
        "name": "vexpseg",
        "normalized": "Tab-\u003eD-\u003eTab-\u003eD-\u003eTab-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Tab-\u003eD-\u003eTab-\u003eD-\u003eTab-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Vectorial.html#v:vexpv",
      "description": {
        "fct-descr": "\u003cp\u003ePerforms exponential operations between two vectorial control signals\n\u003c/p\u003e\u003cpre\u003e  vexpv   ifn1, ifn2, kelements [, kdstoffset] [, ksrcoffset] [,kverbose]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vexpv.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Vectorial",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Tab -\u003e Tab -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-Vectorial.html#vexpv",
        "fct-type": "function",
        "title": "vexpv"
      },
      "index": {
        "description": "Performs exponential operations between two vectorial control signals vexpv ifn1 ifn2 kelements kdstoffset ksrcoffset kverbose csound doc http www.csounds.com manual html vexpv.html",
        "hierarchy": "Csound Typed Opcode Vectorial",
        "module": "Csound.Typed.Opcode.Vectorial",
        "name": "vexpv",
        "normalized": "Tab-\u003eTab-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Tab-\u003eTab-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Vectorial.html#v:vexpv_i",
      "description": {
        "fct-descr": "\u003cp\u003ePerforms exponential operations between two vectorial control signals at init time.\n\u003c/p\u003e\u003cpre\u003e  vexpv_i   ifn1, ifn2, ielements [, idstoffset] [, isrcoffset]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vexpv_i.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Vectorial",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Tab -\u003e Tab -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-Vectorial.html#vexpv_i",
        "fct-type": "function",
        "title": "vexpv_i"
      },
      "index": {
        "description": "Performs exponential operations between two vectorial control signals at init time vexpv ifn1 ifn2 ielements idstoffset isrcoffset csound doc http www.csounds.com manual html vexpv i.html",
        "hierarchy": "Csound Typed Opcode Vectorial",
        "module": "Csound.Typed.Opcode.Vectorial",
        "name": "vexpv_i",
        "normalized": "Tab-\u003eTab-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Tab-\u003eTab-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Vectorial.html#v:vlimit",
      "description": {
        "fct-descr": "\u003cp\u003eLimiting and Wrapping Vectorial Signals\n\u003c/p\u003e\u003cp\u003eLimits elements of vectorial control signals.\n\u003c/p\u003e\u003cpre\u003e  vlimit   ifn, kmin, kmax, ielements\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vlimit.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Vectorial",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Tab -\u003e Sig -\u003e Sig -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-Vectorial.html#vlimit",
        "fct-type": "function",
        "title": "vlimit"
      },
      "index": {
        "description": "Limiting and Wrapping Vectorial Signals Limits elements of vectorial control signals vlimit ifn kmin kmax ielements csound doc http www.csounds.com manual html vlimit.html",
        "hierarchy": "Csound Typed Opcode Vectorial",
        "module": "Csound.Typed.Opcode.Vectorial",
        "name": "vlimit",
        "normalized": "Tab-\u003eSig-\u003eSig-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Tab-\u003eSig-\u003eSig-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Vectorial.html#v:vlinseg",
      "description": {
        "fct-descr": "\u003cp\u003eVectorial envelope generator\n\u003c/p\u003e\u003cp\u003eGenerate linear vectorial segments\n\u003c/p\u003e\u003cpre\u003e  vlinseg   ifnout, ielements, ifn1, idur1, ifn2 [, idur2, ifn3 [...]]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vlinseg.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Vectorial",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Tab -\u003e D -\u003e Tab -\u003e D -\u003e Tab -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-Vectorial.html#vlinseg",
        "fct-type": "function",
        "title": "vlinseg"
      },
      "index": {
        "description": "Vectorial envelope generator Generate linear vectorial segments vlinseg ifnout ielements ifn1 idur1 ifn2 idur2 ifn3 csound doc http www.csounds.com manual html vlinseg.html",
        "hierarchy": "Csound Typed Opcode Vectorial",
        "module": "Csound.Typed.Opcode.Vectorial",
        "name": "vlinseg",
        "normalized": "Tab-\u003eD-\u003eTab-\u003eD-\u003eTab-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Tab-\u003eD-\u003eTab-\u003eD-\u003eTab-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Vectorial.html#v:vmap",
      "description": {
        "fct-descr": "\u003cp\u003eMaps elements from a vector according to indexes contained in another vector.\n\u003c/p\u003e\u003cp\u003eMaps elements from a vector onto another according to the indexes of a this vector.\n\u003c/p\u003e\u003cpre\u003e  vmap   ifn1, ifn2, ielements [,idstoffset, isrcoffset]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vmap.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Vectorial",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Tab -\u003e Tab -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-Vectorial.html#vmap",
        "fct-type": "function",
        "title": "vmap"
      },
      "index": {
        "description": "Maps elements from vector according to indexes contained in another vector Maps elements from vector onto another according to the indexes of this vector vmap ifn1 ifn2 ielements idstoffset isrcoffset csound doc http www.csounds.com manual html vmap.html",
        "hierarchy": "Csound Typed Opcode Vectorial",
        "module": "Csound.Typed.Opcode.Vectorial",
        "name": "vmap",
        "normalized": "Tab-\u003eTab-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Tab-\u003eTab-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Vectorial.html#v:vmirror",
      "description": {
        "fct-descr": "\u003cp\u003eLimiting and Wrapping Vectorial Signals\n\u003c/p\u003e\u003cp\u003e\u003ccode\u003eReflects\u003c/code\u003e elements of vectorial control signals on thresholds.\n\u003c/p\u003e\u003cpre\u003e  vmirror   ifn, kmin, kmax, ielements\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vmirror.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Vectorial",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Tab -\u003e Sig -\u003e Sig -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-Vectorial.html#vmirror",
        "fct-type": "function",
        "title": "vmirror"
      },
      "index": {
        "description": "Limiting and Wrapping Vectorial Signals Reflects elements of vectorial control signals on thresholds vmirror ifn kmin kmax ielements csound doc http www.csounds.com manual html vmirror.html",
        "hierarchy": "Csound Typed Opcode Vectorial",
        "module": "Csound.Typed.Opcode.Vectorial",
        "name": "vmirror",
        "normalized": "Tab-\u003eSig-\u003eSig-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Tab-\u003eSig-\u003eSig-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Vectorial.html#v:vmult",
      "description": {
        "fct-descr": "\u003cp\u003eMultiplies a vector in a table by a scalar value.\n\u003c/p\u003e\u003cpre\u003e  vmult   ifn, kval, kelements [, kdstoffset] [, kverbose]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vmult.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Vectorial",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Tab -\u003e Sig -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-Vectorial.html#vmult",
        "fct-type": "function",
        "title": "vmult"
      },
      "index": {
        "description": "Multiplies vector in table by scalar value vmult ifn kval kelements kdstoffset kverbose csound doc http www.csounds.com manual html vmult.html",
        "hierarchy": "Csound Typed Opcode Vectorial",
        "module": "Csound.Typed.Opcode.Vectorial",
        "name": "vmult",
        "normalized": "Tab-\u003eSig-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Tab-\u003eSig-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Vectorial.html#v:vmult_i",
      "description": {
        "fct-descr": "\u003cp\u003eMultiplies a vector in a table by a scalar value.\n\u003c/p\u003e\u003cpre\u003e  vmult_i   ifn, ival, ielements [, idstoffset]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vmult_i.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Vectorial",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Tab -\u003e D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-Vectorial.html#vmult_i",
        "fct-type": "function",
        "title": "vmult_i"
      },
      "index": {
        "description": "Multiplies vector in table by scalar value vmult ifn ival ielements idstoffset csound doc http www.csounds.com manual html vmult i.html",
        "hierarchy": "Csound Typed Opcode Vectorial",
        "module": "Csound.Typed.Opcode.Vectorial",
        "name": "vmult_i",
        "normalized": "Tab-\u003eD-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Tab-\u003eD-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Vectorial.html#v:vmultv",
      "description": {
        "fct-descr": "\u003cp\u003ePerforms mutiplication between two vectorial control signals\n\u003c/p\u003e\u003cpre\u003e  vmultv   ifn1, ifn2, kelements [, kdstoffset] [, ksrcoffset] [,kverbose]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vmultv.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Vectorial",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Tab -\u003e Tab -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-Vectorial.html#vmultv",
        "fct-type": "function",
        "title": "vmultv"
      },
      "index": {
        "description": "Performs mutiplication between two vectorial control signals vmultv ifn1 ifn2 kelements kdstoffset ksrcoffset kverbose csound doc http www.csounds.com manual html vmultv.html",
        "hierarchy": "Csound Typed Opcode Vectorial",
        "module": "Csound.Typed.Opcode.Vectorial",
        "name": "vmultv",
        "normalized": "Tab-\u003eTab-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Tab-\u003eTab-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Vectorial.html#v:vmultv_i",
      "description": {
        "fct-descr": "\u003cp\u003ePerforms mutiplication between two vectorial control signals at init time.\n\u003c/p\u003e\u003cpre\u003e  vmultv_i   ifn1, ifn2, ielements [, idstoffset] [, isrcoffset]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vmultv_i.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Vectorial",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Tab -\u003e Tab -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-Vectorial.html#vmultv_i",
        "fct-type": "function",
        "title": "vmultv_i"
      },
      "index": {
        "description": "Performs mutiplication between two vectorial control signals at init time vmultv ifn1 ifn2 ielements idstoffset isrcoffset csound doc http www.csounds.com manual html vmultv i.html",
        "hierarchy": "Csound Typed Opcode Vectorial",
        "module": "Csound.Typed.Opcode.Vectorial",
        "name": "vmultv_i",
        "normalized": "Tab-\u003eTab-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Tab-\u003eTab-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Vectorial.html#v:vport",
      "description": {
        "fct-descr": "\u003cp\u003eVectorial Control-rate Delay Paths\n\u003c/p\u003e\u003cp\u003eGenerate a sort of \u003ccode\u003evectorial\u003c/code\u003e portamento\n\u003c/p\u003e\u003cpre\u003e  vport  ifn, khtime, ielements [, ifnInit]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vport.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Vectorial",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Tab -\u003e Sig -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-Vectorial.html#vport",
        "fct-type": "function",
        "title": "vport"
      },
      "index": {
        "description": "Vectorial Control-rate Delay Paths Generate sort of vectorial portamento vport ifn khtime ielements ifnInit csound doc http www.csounds.com manual html vport.html",
        "hierarchy": "Csound Typed Opcode Vectorial",
        "module": "Csound.Typed.Opcode.Vectorial",
        "name": "vport",
        "normalized": "Tab-\u003eSig-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Tab-\u003eSig-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Vectorial.html#v:vpow",
      "description": {
        "fct-descr": "\u003cp\u003eRaises each element of a vector to a scalar power.\n\u003c/p\u003e\u003cpre\u003e  vpow   ifn, kval, kelements [, kdstoffset] [, kverbose]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vpow.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Vectorial",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Tab -\u003e Sig -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-Vectorial.html#vpow",
        "fct-type": "function",
        "title": "vpow"
      },
      "index": {
        "description": "Raises each element of vector to scalar power vpow ifn kval kelements kdstoffset kverbose csound doc http www.csounds.com manual html vpow.html",
        "hierarchy": "Csound Typed Opcode Vectorial",
        "module": "Csound.Typed.Opcode.Vectorial",
        "name": "vpow",
        "normalized": "Tab-\u003eSig-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Tab-\u003eSig-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Vectorial.html#v:vpow_i",
      "description": {
        "fct-descr": "\u003cp\u003eRaises each element of a vector to a scalar power\n\u003c/p\u003e\u003cpre\u003e  vpow_i   ifn, ival, ielements [, idstoffset]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vpow_i.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Vectorial",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Tab -\u003e D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-Vectorial.html#vpow_i",
        "fct-type": "function",
        "title": "vpow_i"
      },
      "index": {
        "description": "Raises each element of vector to scalar power vpow ifn ival ielements idstoffset csound doc http www.csounds.com manual html vpow i.html",
        "hierarchy": "Csound Typed Opcode Vectorial",
        "module": "Csound.Typed.Opcode.Vectorial",
        "name": "vpow_i",
        "normalized": "Tab-\u003eD-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Tab-\u003eD-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Vectorial.html#v:vpowv",
      "description": {
        "fct-descr": "\u003cp\u003ePerforms power-of operations between two vectorial control signals\n\u003c/p\u003e\u003cpre\u003e  vpowv  ifn1, ifn2, kelements [, kdstoffset] [, ksrcoffset] [,kverbose]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vpowv.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Vectorial",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Tab -\u003e Tab -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-Vectorial.html#vpowv",
        "fct-type": "function",
        "title": "vpowv"
      },
      "index": {
        "description": "Performs power-of operations between two vectorial control signals vpowv ifn1 ifn2 kelements kdstoffset ksrcoffset kverbose csound doc http www.csounds.com manual html vpowv.html",
        "hierarchy": "Csound Typed Opcode Vectorial",
        "module": "Csound.Typed.Opcode.Vectorial",
        "name": "vpowv",
        "normalized": "Tab-\u003eTab-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Tab-\u003eTab-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Vectorial.html#v:vpowv_i",
      "description": {
        "fct-descr": "\u003cp\u003ePerforms power-of operations between two vectorial control signals at init time.\n\u003c/p\u003e\u003cpre\u003e  vpowv_i  ifn1, ifn2, ielements [, idstoffset] [, isrcoffset]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vpowv_i.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Vectorial",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Tab -\u003e Tab -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-Vectorial.html#vpowv_i",
        "fct-type": "function",
        "title": "vpowv_i"
      },
      "index": {
        "description": "Performs power-of operations between two vectorial control signals at init time vpowv ifn1 ifn2 ielements idstoffset isrcoffset csound doc http www.csounds.com manual html vpowv i.html",
        "hierarchy": "Csound Typed Opcode Vectorial",
        "module": "Csound.Typed.Opcode.Vectorial",
        "name": "vpowv_i",
        "normalized": "Tab-\u003eTab-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Tab-\u003eTab-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Vectorial.html#v:vrandh",
      "description": {
        "fct-descr": "\u003cp\u003eGenerates a vector of random numbers stored into a table, holding the values for a period of time.\n\u003c/p\u003e\u003cp\u003eGenerates a vector of random numbers stored into a table, holding the values for a period of time. Generates a sort of 'vectorial band-limited noise'.\n\u003c/p\u003e\u003cpre\u003e  vrandh   ifn,  krange, kcps, ielements [, idstoffset] [, iseed] \\\n           [, isize] [, ioffset]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vrandh.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Vectorial",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Tab -\u003e Sig -\u003e Sig -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-Vectorial.html#vrandh",
        "fct-type": "function",
        "title": "vrandh"
      },
      "index": {
        "description": "Generates vector of random numbers stored into table holding the values for period of time Generates vector of random numbers stored into table holding the values for period of time Generates sort of vectorial band-limited noise vrandh ifn krange kcps ielements idstoffset iseed isize ioffset csound doc http www.csounds.com manual html vrandh.html",
        "hierarchy": "Csound Typed Opcode Vectorial",
        "module": "Csound.Typed.Opcode.Vectorial",
        "name": "vrandh",
        "normalized": "Tab-\u003eSig-\u003eSig-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Tab-\u003eSig-\u003eSig-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Vectorial.html#v:vrandi",
      "description": {
        "fct-descr": "\u003cp\u003eGenerate a sort of 'vectorial band-limited noise'\n\u003c/p\u003e\u003cpre\u003e  vrandi   ifn,  krange, kcps, ielements [, idstoffset] [, iseed] \\\n           [, isize] [, ioffset]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vrandi.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Vectorial",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Tab -\u003e Sig -\u003e Sig -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-Vectorial.html#vrandi",
        "fct-type": "function",
        "title": "vrandi"
      },
      "index": {
        "description": "Generate sort of vectorial band-limited noise vrandi ifn krange kcps ielements idstoffset iseed isize ioffset csound doc http www.csounds.com manual html vrandi.html",
        "hierarchy": "Csound Typed Opcode Vectorial",
        "module": "Csound.Typed.Opcode.Vectorial",
        "name": "vrandi",
        "normalized": "Tab-\u003eSig-\u003eSig-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Tab-\u003eSig-\u003eSig-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Vectorial.html#v:vsubv",
      "description": {
        "fct-descr": "\u003cp\u003ePerforms subtraction between two vectorial control signals\n\u003c/p\u003e\u003cpre\u003e  vsubv   ifn1, ifn2, kelements [, kdstoffset] [, ksrcoffset] [,kverbose]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vsubv.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Vectorial",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Tab -\u003e Tab -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-Vectorial.html#vsubv",
        "fct-type": "function",
        "title": "vsubv"
      },
      "index": {
        "description": "Performs subtraction between two vectorial control signals vsubv ifn1 ifn2 kelements kdstoffset ksrcoffset kverbose csound doc http www.csounds.com manual html vsubv.html",
        "hierarchy": "Csound Typed Opcode Vectorial",
        "module": "Csound.Typed.Opcode.Vectorial",
        "name": "vsubv",
        "normalized": "Tab-\u003eTab-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Tab-\u003eTab-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Vectorial.html#v:vsubv_i",
      "description": {
        "fct-descr": "\u003cp\u003ePerforms subtraction between two vectorial control signals at init time.\n\u003c/p\u003e\u003cpre\u003e  vsubv_i   ifn1, ifn2, ielements [, idstoffset] [, isrcoffset]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vsubv_i.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Vectorial",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Tab -\u003e Tab -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-Vectorial.html#vsubv_i",
        "fct-type": "function",
        "title": "vsubv_i"
      },
      "index": {
        "description": "Performs subtraction between two vectorial control signals at init time vsubv ifn1 ifn2 ielements idstoffset isrcoffset csound doc http www.csounds.com manual html vsubv i.html",
        "hierarchy": "Csound Typed Opcode Vectorial",
        "module": "Csound.Typed.Opcode.Vectorial",
        "name": "vsubv_i",
        "normalized": "Tab-\u003eTab-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Tab-\u003eTab-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Vectorial.html#v:vtaba",
      "description": {
        "fct-descr": "\u003cp\u003eRead vectors (from tables -or arrays of vectors).\n\u003c/p\u003e\u003cp\u003eThis opcode reads vectors from tables at a-rate.\n\u003c/p\u003e\u003cpre\u003e  vtaba   andx, ifn, aout1 [, aout2, aout3, .... , aoutN ]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vtaba.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Vectorial",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Tab -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-Vectorial.html#vtaba",
        "fct-type": "function",
        "title": "vtaba"
      },
      "index": {
        "description": "Read vectors from tables or arrays of vectors This opcode reads vectors from tables at a-rate vtaba andx ifn aout1 aout2 aout3 aoutN csound doc http www.csounds.com manual html vtaba.html",
        "hierarchy": "Csound Typed Opcode Vectorial",
        "module": "Csound.Typed.Opcode.Vectorial",
        "name": "vtaba",
        "normalized": "Sig-\u003eTab-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eTab-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Vectorial.html#v:vtabi",
      "description": {
        "fct-descr": "\u003cp\u003eRead vectors (from tables -or arrays of vectors).\n\u003c/p\u003e\u003cp\u003eThis opcode reads vectors from tables.\n\u003c/p\u003e\u003cpre\u003e  vtabi   indx, ifn, iout1 [, iout2, iout3, .... , ioutN ]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vtabi.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Vectorial",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e Tab -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-Vectorial.html#vtabi",
        "fct-type": "function",
        "title": "vtabi"
      },
      "index": {
        "description": "Read vectors from tables or arrays of vectors This opcode reads vectors from tables vtabi indx ifn iout1 iout2 iout3 ioutN csound doc http www.csounds.com manual html vtabi.html",
        "hierarchy": "Csound Typed Opcode Vectorial",
        "module": "Csound.Typed.Opcode.Vectorial",
        "name": "vtabi",
        "normalized": "D-\u003eTab-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eTab-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Vectorial.html#v:vtabk",
      "description": {
        "fct-descr": "\u003cp\u003eRead vectors (from tables -or arrays of vectors).\n\u003c/p\u003e\u003cp\u003eThis opcode reads vectors from tables at k-rate.\n\u003c/p\u003e\u003cpre\u003e  vtabk   kndx, ifn, kout1 [, kout2, kout3, .... , koutN ]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vtabk.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Vectorial",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Tab -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-Vectorial.html#vtabk",
        "fct-type": "function",
        "title": "vtabk"
      },
      "index": {
        "description": "Read vectors from tables or arrays of vectors This opcode reads vectors from tables at k-rate vtabk kndx ifn kout1 kout2 kout3 koutN csound doc http www.csounds.com manual html vtabk.html",
        "hierarchy": "Csound Typed Opcode Vectorial",
        "module": "Csound.Typed.Opcode.Vectorial",
        "name": "vtabk",
        "normalized": "Sig-\u003eTab-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eTab-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Vectorial.html#v:vtable1k",
      "description": {
        "fct-descr": "\u003cp\u003eRead a vector (several scalars simultaneously) from a table.\n\u003c/p\u003e\u003cp\u003eThis opcode reads vectors from tables at k-rate.\n\u003c/p\u003e\u003cpre\u003e  vtable1k   kfn,kout1 [, kout2, kout3, .... , koutN ]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vtable1k.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Vectorial",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Tab -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-Vectorial.html#vtable1k",
        "fct-type": "function",
        "title": "vtable1k"
      },
      "index": {
        "description": "Read vector several scalars simultaneously from table This opcode reads vectors from tables at k-rate vtable1k kfn kout1 kout2 kout3 koutN csound doc http www.csounds.com manual html vtable1k.html",
        "hierarchy": "Csound Typed Opcode Vectorial",
        "module": "Csound.Typed.Opcode.Vectorial",
        "name": "vtable1k",
        "normalized": "Tab-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Tab-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Vectorial.html#v:vtablea",
      "description": {
        "fct-descr": "\u003cp\u003eRead vectors (from tables -or arrays of vectors).\n\u003c/p\u003e\u003cp\u003eThis opcode reads vectors from tables at a-rate.\n\u003c/p\u003e\u003cpre\u003e  vtablea   andx, kfn, kinterp, ixmode, aout1 [, aout2, aout3, .... , aoutN ]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vtablea.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Vectorial",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Tab -\u003e Sig -\u003e D -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-Vectorial.html#vtablea",
        "fct-type": "function",
        "title": "vtablea"
      },
      "index": {
        "description": "Read vectors from tables or arrays of vectors This opcode reads vectors from tables at a-rate vtablea andx kfn kinterp ixmode aout1 aout2 aout3 aoutN csound doc http www.csounds.com manual html vtablea.html",
        "hierarchy": "Csound Typed Opcode Vectorial",
        "module": "Csound.Typed.Opcode.Vectorial",
        "name": "vtablea",
        "normalized": "Sig-\u003eTab-\u003eSig-\u003eD-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eTab-\u003eSig-\u003eD-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Vectorial.html#v:vtablei",
      "description": {
        "fct-descr": "\u003cp\u003eRead vectors (from tables -or arrays of vectors).\n\u003c/p\u003e\u003cp\u003eThis opcode reads vectors from tables.\n\u003c/p\u003e\u003cpre\u003e  vtablei   indx, ifn, interp, ixmode, iout1 [, iout2, iout3, .... , ioutN ]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vtablei.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Vectorial",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e Tab -\u003e D -\u003e D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-Vectorial.html#vtablei",
        "fct-type": "function",
        "title": "vtablei"
      },
      "index": {
        "description": "Read vectors from tables or arrays of vectors This opcode reads vectors from tables vtablei indx ifn interp ixmode iout1 iout2 iout3 ioutN csound doc http www.csounds.com manual html vtablei.html",
        "hierarchy": "Csound Typed Opcode Vectorial",
        "module": "Csound.Typed.Opcode.Vectorial",
        "name": "vtablei",
        "normalized": "D-\u003eTab-\u003eD-\u003eD-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eTab-\u003eD-\u003eD-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Vectorial.html#v:vtablek",
      "description": {
        "fct-descr": "\u003cp\u003eRead vectors (from tables -or arrays of vectors).\n\u003c/p\u003e\u003cp\u003eThis opcode reads vectors from tables at k-rate.\n\u003c/p\u003e\u003cpre\u003e  vtablek   kndx, kfn, kinterp, ixmode, kout1 [, kout2, kout3, .... , koutN ]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vtablek.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Vectorial",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Tab -\u003e Sig -\u003e D -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-Vectorial.html#vtablek",
        "fct-type": "function",
        "title": "vtablek"
      },
      "index": {
        "description": "Read vectors from tables or arrays of vectors This opcode reads vectors from tables at k-rate vtablek kndx kfn kinterp ixmode kout1 kout2 kout3 koutN csound doc http www.csounds.com manual html vtablek.html",
        "hierarchy": "Csound Typed Opcode Vectorial",
        "module": "Csound.Typed.Opcode.Vectorial",
        "name": "vtablek",
        "normalized": "Sig-\u003eTab-\u003eSig-\u003eD-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eTab-\u003eSig-\u003eD-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Vectorial.html#v:vtablewa",
      "description": {
        "fct-descr": "\u003cp\u003eWrite vectors (to tables -or arrays of vectors).\n\u003c/p\u003e\u003cp\u003eThis opcode writes vectors to tables at a-rate.\n\u003c/p\u003e\u003cpre\u003e  vtablewa   andx, kfn, ixmode, ainarg1 [, ainarg2, ainarg3 , .... , ainargN ]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vtablewa.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Vectorial",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Tab -\u003e D -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-Vectorial.html#vtablewa",
        "fct-type": "function",
        "title": "vtablewa"
      },
      "index": {
        "description": "Write vectors to tables or arrays of vectors This opcode writes vectors to tables at a-rate vtablewa andx kfn ixmode ainarg1 ainarg2 ainarg3 ainargN csound doc http www.csounds.com manual html vtablewa.html",
        "hierarchy": "Csound Typed Opcode Vectorial",
        "module": "Csound.Typed.Opcode.Vectorial",
        "name": "vtablewa",
        "normalized": "Sig-\u003eTab-\u003eD-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eTab-\u003eD-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Vectorial.html#v:vtablewi",
      "description": {
        "fct-descr": "\u003cp\u003eWrite vectors (to tables -or arrays of vectors).\n\u003c/p\u003e\u003cp\u003eThis opcode writes vectors to tables at init time.\n\u003c/p\u003e\u003cpre\u003e  vtablewi   indx, ifn, ixmode, inarg1 [, inarg2, inarg3 , .... , inargN ]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vtablewi.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Vectorial",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e Tab -\u003e D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-Vectorial.html#vtablewi",
        "fct-type": "function",
        "title": "vtablewi"
      },
      "index": {
        "description": "Write vectors to tables or arrays of vectors This opcode writes vectors to tables at init time vtablewi indx ifn ixmode inarg1 inarg2 inarg3 inargN csound doc http www.csounds.com manual html vtablewi.html",
        "hierarchy": "Csound Typed Opcode Vectorial",
        "module": "Csound.Typed.Opcode.Vectorial",
        "name": "vtablewi",
        "normalized": "D-\u003eTab-\u003eD-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eTab-\u003eD-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Vectorial.html#v:vtablewk",
      "description": {
        "fct-descr": "\u003cp\u003eWrite vectors (to tables -or arrays of vectors).\n\u003c/p\u003e\u003cp\u003eThis opcode writes vectors to tables at k-rate.\n\u003c/p\u003e\u003cpre\u003e  vtablewk   kndx, kfn, ixmode, kinarg1 [, kinarg2, kinarg3 , .... , kinargN ]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vtablewk.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Vectorial",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Tab -\u003e D -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-Vectorial.html#vtablewk",
        "fct-type": "function",
        "title": "vtablewk"
      },
      "index": {
        "description": "Write vectors to tables or arrays of vectors This opcode writes vectors to tables at k-rate vtablewk kndx kfn ixmode kinarg1 kinarg2 kinarg3 kinargN csound doc http www.csounds.com manual html vtablewk.html",
        "hierarchy": "Csound Typed Opcode Vectorial",
        "module": "Csound.Typed.Opcode.Vectorial",
        "name": "vtablewk",
        "normalized": "Sig-\u003eTab-\u003eD-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eTab-\u003eD-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Vectorial.html#v:vtabwa",
      "description": {
        "fct-descr": "\u003cp\u003eWrite vectors (to tables -or arrays of vectors).\n\u003c/p\u003e\u003cp\u003eThis opcode writes vectors to tables at a-rate.\n\u003c/p\u003e\u003cpre\u003e  vtabwa   andx, ifn, ainarg1 [, ainarg2, ainarg3 , .... , ainargN ]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vtabwa.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Vectorial",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Tab -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-Vectorial.html#vtabwa",
        "fct-type": "function",
        "title": "vtabwa"
      },
      "index": {
        "description": "Write vectors to tables or arrays of vectors This opcode writes vectors to tables at a-rate vtabwa andx ifn ainarg1 ainarg2 ainarg3 ainargN csound doc http www.csounds.com manual html vtabwa.html",
        "hierarchy": "Csound Typed Opcode Vectorial",
        "module": "Csound.Typed.Opcode.Vectorial",
        "name": "vtabwa",
        "normalized": "Sig-\u003eTab-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eTab-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Vectorial.html#v:vtabwi",
      "description": {
        "fct-descr": "\u003cp\u003eWrite vectors (to tables -or arrays of vectors).\n\u003c/p\u003e\u003cp\u003eThis opcode writes vectors to tables at init time.\n\u003c/p\u003e\u003cpre\u003e  vtabwi   indx, ifn, inarg1 [, inarg2, inarg3 , .... , inargN ]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vtabwi.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Vectorial",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e Tab -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-Vectorial.html#vtabwi",
        "fct-type": "function",
        "title": "vtabwi"
      },
      "index": {
        "description": "Write vectors to tables or arrays of vectors This opcode writes vectors to tables at init time vtabwi indx ifn inarg1 inarg2 inarg3 inargN csound doc http www.csounds.com manual html vtabwi.html",
        "hierarchy": "Csound Typed Opcode Vectorial",
        "module": "Csound.Typed.Opcode.Vectorial",
        "name": "vtabwi",
        "normalized": "D-\u003eTab-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eTab-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Vectorial.html#v:vtabwk",
      "description": {
        "fct-descr": "\u003cp\u003eWrite vectors (to tables -or arrays of vectors).\n\u003c/p\u003e\u003cp\u003eThis opcode writes vectors to tables at k-rate.\n\u003c/p\u003e\u003cpre\u003e  vtabwk   kndx, ifn, kinarg1 [, kinarg2, kinarg3 , .... , kinargN ]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vtabwk.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Vectorial",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Tab -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-Vectorial.html#vtabwk",
        "fct-type": "function",
        "title": "vtabwk"
      },
      "index": {
        "description": "Write vectors to tables or arrays of vectors This opcode writes vectors to tables at k-rate vtabwk kndx ifn kinarg1 kinarg2 kinarg3 kinargN csound doc http www.csounds.com manual html vtabwk.html",
        "hierarchy": "Csound Typed Opcode Vectorial",
        "module": "Csound.Typed.Opcode.Vectorial",
        "name": "vtabwk",
        "normalized": "Sig-\u003eTab-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eTab-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-Vectorial.html#v:vwrap",
      "description": {
        "fct-descr": "\u003cp\u003eLimiting and Wrapping Vectorial Signals\n\u003c/p\u003e\u003cp\u003eWraps elements of vectorial control signals.\n\u003c/p\u003e\u003cpre\u003e  vwrap   ifn, kmin, kmax, ielements\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/vwrap.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.Vectorial",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Tab -\u003e Sig -\u003e Sig -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-Vectorial.html#vwrap",
        "fct-type": "function",
        "title": "vwrap"
      },
      "index": {
        "description": "Limiting and Wrapping Vectorial Signals Wraps elements of vectorial control signals vwrap ifn kmin kmax ielements csound doc http www.csounds.com manual html vwrap.html",
        "hierarchy": "Csound Typed Opcode Vectorial",
        "module": "Csound.Typed.Opcode.Vectorial",
        "name": "vwrap",
        "normalized": "Tab-\u003eSig-\u003eSig-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Tab-\u003eSig-\u003eSig-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-ZakPatchSystem.html#",
      "description": {
        "fct-module": "Csound.Typed.Opcode.ZakPatchSystem",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "module",
        "fct-source": "src/Csound-Typed-Opcode-ZakPatchSystem.html",
        "fct-type": "module",
        "title": "ZakPatchSystem"
      },
      "index": {
        "description": "",
        "hierarchy": "Csound Typed Opcode ZakPatchSystem",
        "module": "Csound.Typed.Opcode.ZakPatchSystem",
        "name": "ZakPatchSystem",
        "normalized": "",
        "package": "csound-expression-opcodes",
        "partial": "Zak Patch System",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-ZakPatchSystem.html#v:zacl",
      "description": {
        "fct-descr": "\u003cp\u003eClears one or more variables in the za space.\n\u003c/p\u003e\u003cpre\u003e  zacl  kfirst, klast\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/zacl.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.ZakPatchSystem",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-ZakPatchSystem.html#zacl",
        "fct-type": "function",
        "title": "zacl"
      },
      "index": {
        "description": "Clears one or more variables in the za space zacl kfirst klast csound doc http www.csounds.com manual html zacl.html",
        "hierarchy": "Csound Typed Opcode ZakPatchSystem",
        "module": "Csound.Typed.Opcode.ZakPatchSystem",
        "name": "zacl",
        "normalized": "Sig-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-ZakPatchSystem.html#v:zakinit",
      "description": {
        "fct-descr": "\u003cp\u003eEstablishes zak space.\n\u003c/p\u003e\u003cp\u003eEstablishes zak space. Must be called only once.\n\u003c/p\u003e\u003cpre\u003e  zakinit  isizea, isizek\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/zakinit.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.ZakPatchSystem",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-ZakPatchSystem.html#zakinit",
        "fct-type": "function",
        "title": "zakinit"
      },
      "index": {
        "description": "Establishes zak space Establishes zak space Must be called only once zakinit isizea isizek csound doc http www.csounds.com manual html zakinit.html",
        "hierarchy": "Csound Typed Opcode ZakPatchSystem",
        "module": "Csound.Typed.Opcode.ZakPatchSystem",
        "name": "zakinit",
        "normalized": "D-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-ZakPatchSystem.html#v:zamod",
      "description": {
        "fct-descr": "\u003cp\u003eModulates one a-rate signal by a second one.\n\u003c/p\u003e\u003cpre\u003e ares  zamod  asig, kzamod\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/zamod.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.ZakPatchSystem",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-ZakPatchSystem.html#zamod",
        "fct-type": "function",
        "title": "zamod"
      },
      "index": {
        "description": "Modulates one a-rate signal by second one ares zamod asig kzamod csound doc http www.csounds.com manual html zamod.html",
        "hierarchy": "Csound Typed Opcode ZakPatchSystem",
        "module": "Csound.Typed.Opcode.ZakPatchSystem",
        "name": "zamod",
        "normalized": "Sig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-ZakPatchSystem.html#v:zar",
      "description": {
        "fct-descr": "\u003cp\u003eReads from a location in za space at a-rate.\n\u003c/p\u003e\u003cpre\u003e ares  zar  kndx\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/zar.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.ZakPatchSystem",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-ZakPatchSystem.html#zar",
        "fct-type": "function",
        "title": "zar"
      },
      "index": {
        "description": "Reads from location in za space at a-rate ares zar kndx csound doc http www.csounds.com manual html zar.html",
        "hierarchy": "Csound Typed Opcode ZakPatchSystem",
        "module": "Csound.Typed.Opcode.ZakPatchSystem",
        "name": "zar",
        "normalized": "Sig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-ZakPatchSystem.html#v:zarg",
      "description": {
        "fct-descr": "\u003cp\u003eReads from a location in za space at a-rate, adds some gain.\n\u003c/p\u003e\u003cpre\u003e ares  zarg  kndx, kgain\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/zarg.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.ZakPatchSystem",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-ZakPatchSystem.html#zarg",
        "fct-type": "function",
        "title": "zarg"
      },
      "index": {
        "description": "Reads from location in za space at a-rate adds some gain ares zarg kndx kgain csound doc http www.csounds.com manual html zarg.html",
        "hierarchy": "Csound Typed Opcode ZakPatchSystem",
        "module": "Csound.Typed.Opcode.ZakPatchSystem",
        "name": "zarg",
        "normalized": "Sig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-ZakPatchSystem.html#v:zaw",
      "description": {
        "fct-descr": "\u003cp\u003eWrites to a za variable at a-rate without mixing.\n\u003c/p\u003e\u003cpre\u003e  zaw  asig, kndx\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/zaw.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.ZakPatchSystem",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-ZakPatchSystem.html#zaw",
        "fct-type": "function",
        "title": "zaw"
      },
      "index": {
        "description": "Writes to za variable at a-rate without mixing zaw asig kndx csound doc http www.csounds.com manual html zaw.html",
        "hierarchy": "Csound Typed Opcode ZakPatchSystem",
        "module": "Csound.Typed.Opcode.ZakPatchSystem",
        "name": "zaw",
        "normalized": "Sig-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-ZakPatchSystem.html#v:zawm",
      "description": {
        "fct-descr": "\u003cp\u003eWrites to a za variable at a-rate with mixing.\n\u003c/p\u003e\u003cpre\u003e  zawm  asig, kndx [, imix]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/zawm.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.ZakPatchSystem",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-ZakPatchSystem.html#zawm",
        "fct-type": "function",
        "title": "zawm"
      },
      "index": {
        "description": "Writes to za variable at a-rate with mixing zawm asig kndx imix csound doc http www.csounds.com manual html zawm.html",
        "hierarchy": "Csound Typed Opcode ZakPatchSystem",
        "module": "Csound.Typed.Opcode.ZakPatchSystem",
        "name": "zawm",
        "normalized": "Sig-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-ZakPatchSystem.html#v:zir",
      "description": {
        "fct-descr": "\u003cp\u003eReads from a location in zk space at i-rate.\n\u003c/p\u003e\u003cpre\u003e ir  zir  indx\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/zir.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.ZakPatchSystem",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D",
        "fct-source": "src/Csound-Typed-Opcode-ZakPatchSystem.html#zir",
        "fct-type": "function",
        "title": "zir"
      },
      "index": {
        "description": "Reads from location in zk space at i-rate ir zir indx csound doc http www.csounds.com manual html zir.html",
        "hierarchy": "Csound Typed Opcode ZakPatchSystem",
        "module": "Csound.Typed.Opcode.ZakPatchSystem",
        "name": "zir",
        "normalized": "D-\u003eD",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-ZakPatchSystem.html#v:ziw",
      "description": {
        "fct-descr": "\u003cp\u003eWrites to a zk variable at i-rate without mixing.\n\u003c/p\u003e\u003cpre\u003e  ziw  isig, indx\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/ziw.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.ZakPatchSystem",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-ZakPatchSystem.html#ziw",
        "fct-type": "function",
        "title": "ziw"
      },
      "index": {
        "description": "Writes to zk variable at i-rate without mixing ziw isig indx csound doc http www.csounds.com manual html ziw.html",
        "hierarchy": "Csound Typed Opcode ZakPatchSystem",
        "module": "Csound.Typed.Opcode.ZakPatchSystem",
        "name": "ziw",
        "normalized": "D-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-ZakPatchSystem.html#v:ziwm",
      "description": {
        "fct-descr": "\u003cp\u003eWrites to a zk variable to an i-rate variable with mixing.\n\u003c/p\u003e\u003cpre\u003e  ziwm  isig, indx [, imix]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/ziwm.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.ZakPatchSystem",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "D -\u003e D -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-ZakPatchSystem.html#ziwm",
        "fct-type": "function",
        "title": "ziwm"
      },
      "index": {
        "description": "Writes to zk variable to an i-rate variable with mixing ziwm isig indx imix csound doc http www.csounds.com manual html ziwm.html",
        "hierarchy": "Csound Typed Opcode ZakPatchSystem",
        "module": "Csound.Typed.Opcode.ZakPatchSystem",
        "name": "ziwm",
        "normalized": "D-\u003eD-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "D-\u003eD-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-ZakPatchSystem.html#v:zkcl",
      "description": {
        "fct-descr": "\u003cp\u003eClears one or more variables in the zk space.\n\u003c/p\u003e\u003cpre\u003e  zkcl  kfirst, klast\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/zkcl.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.ZakPatchSystem",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-ZakPatchSystem.html#zkcl",
        "fct-type": "function",
        "title": "zkcl"
      },
      "index": {
        "description": "Clears one or more variables in the zk space zkcl kfirst klast csound doc http www.csounds.com manual html zkcl.html",
        "hierarchy": "Csound Typed Opcode ZakPatchSystem",
        "module": "Csound.Typed.Opcode.ZakPatchSystem",
        "name": "zkcl",
        "normalized": "Sig-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-ZakPatchSystem.html#v:zkmod",
      "description": {
        "fct-descr": "\u003cp\u003eFacilitates the modulation of one signal by another.\n\u003c/p\u003e\u003cpre\u003e kres  zkmod  ksig, kzkmod\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/zkmod.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.ZakPatchSystem",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-ZakPatchSystem.html#zkmod",
        "fct-type": "function",
        "title": "zkmod"
      },
      "index": {
        "description": "Facilitates the modulation of one signal by another kres zkmod ksig kzkmod csound doc http www.csounds.com manual html zkmod.html",
        "hierarchy": "Csound Typed Opcode ZakPatchSystem",
        "module": "Csound.Typed.Opcode.ZakPatchSystem",
        "name": "zkmod",
        "normalized": "Sig-\u003eSig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-ZakPatchSystem.html#v:zkr",
      "description": {
        "fct-descr": "\u003cp\u003eReads from a location in zk space at k-rate.\n\u003c/p\u003e\u003cpre\u003e kres  zkr  kndx\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/zkr.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.ZakPatchSystem",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig",
        "fct-source": "src/Csound-Typed-Opcode-ZakPatchSystem.html#zkr",
        "fct-type": "function",
        "title": "zkr"
      },
      "index": {
        "description": "Reads from location in zk space at k-rate kres zkr kndx csound doc http www.csounds.com manual html zkr.html",
        "hierarchy": "Csound Typed Opcode ZakPatchSystem",
        "module": "Csound.Typed.Opcode.ZakPatchSystem",
        "name": "zkr",
        "normalized": "Sig-\u003eSig",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-ZakPatchSystem.html#v:zkw",
      "description": {
        "fct-descr": "\u003cp\u003eWrites to a zk variable at k-rate without mixing.\n\u003c/p\u003e\u003cpre\u003e  zkw  ksig, kndx\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/zkw.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.ZakPatchSystem",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-ZakPatchSystem.html#zkw",
        "fct-type": "function",
        "title": "zkw"
      },
      "index": {
        "description": "Writes to zk variable at k-rate without mixing zkw ksig kndx csound doc http www.csounds.com manual html zkw.html",
        "hierarchy": "Csound Typed Opcode ZakPatchSystem",
        "module": "Csound.Typed.Opcode.ZakPatchSystem",
        "name": "zkw",
        "normalized": "Sig-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode-ZakPatchSystem.html#v:zkwm",
      "description": {
        "fct-descr": "\u003cp\u003eWrites to a zk variable at k-rate with mixing.\n\u003c/p\u003e\u003cpre\u003e  zkwm  ksig, kndx [, imix]\n\u003c/pre\u003e\u003cp\u003ecsound doc: \u003ca\u003ehttp://www.csounds.com/manual/html/zkwm.html\u003c/a\u003e\n\u003c/p\u003e",
        "fct-module": "Csound.Typed.Opcode.ZakPatchSystem",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "Sig -\u003e Sig -\u003e SE ()",
        "fct-source": "src/Csound-Typed-Opcode-ZakPatchSystem.html#zkwm",
        "fct-type": "function",
        "title": "zkwm"
      },
      "index": {
        "description": "Writes to zk variable at k-rate with mixing zkwm ksig kndx imix csound doc http www.csounds.com manual html zkwm.html",
        "hierarchy": "Csound Typed Opcode ZakPatchSystem",
        "module": "Csound.Typed.Opcode.ZakPatchSystem",
        "name": "zkwm",
        "normalized": "Sig-\u003eSig-\u003eSE()",
        "package": "csound-expression-opcodes",
        "partial": "",
        "signature": "Sig-\u003eSig-\u003eSE()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/csound-expression-opcodes/docs/Csound-Typed-Opcode.html#",
      "description": {
        "fct-module": "Csound.Typed.Opcode",
        "fct-package": "csound-expression-opcodes",
        "fct-signature": "module",
        "fct-source": "src/Csound-Typed-Opcode.html",
        "fct-type": "module",
        "title": "Opcode"
      },
      "index": {
        "description": "",
        "hierarchy": "Csound Typed Opcode",
        "module": "Csound.Typed.Opcode",
        "name": "Opcode",
        "normalized": "",
        "package": "csound-expression-opcodes",
        "partial": "Opcode",
        "signature": ""
      }
    }
  }
]