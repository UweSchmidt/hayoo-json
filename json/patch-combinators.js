[
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/patch-combinators/docs/Data-Patch.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003ePatch combinators: A library for patching functions and data structures\n\u003c/p\u003e\u003cp\u003eA patch can be, for example\n\u003c/p\u003e\u003cul\u003e\u003cli\u003e a type constraint (an identity function with a specific type)\n\u003c/li\u003e\u003cli\u003e a surjective function extending the domain of a function (e.g. turning a\n   function on natural numbers into a function defined for any integer)\n\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eA typical use-case is to constrain the types of a QuickCheck property. Let's\n say we have a property to check associativity of addition:\n\u003c/p\u003e\u003cpre\u003e prop_addAssoc :: (Num a, Ord a) =\u003e a -\u003e a -\u003e a -\u003e Bool\n prop_addAssoc a b c = (a + b) + c == a + (b + c)\n\u003c/pre\u003e\u003cp\u003eIn order to check that this property holds for \u003ccode\u003e\u003ca\u003eInt8\u003c/a\u003e\u003c/code\u003e, we just say:\n\u003c/p\u003e\u003cpre\u003e *Data.Patch\u003e quickCheck (prop_addAssoc -:: tI8 \u003e-\u003e id)\n\u003c/pre\u003e\u003cp\u003eNote that we only had to give a \u003cem\u003epartial\u003c/em\u003e type annotation since all arguments\n are required to have the same type.\n\u003c/p\u003e\u003cp\u003eSometimes properties are only defined for a sub-set of the possible\n arguments. Consider the following property of \u003ccode\u003e\u003ca\u003eenumFromTo\u003c/a\u003e\u003c/code\u003e:\n\u003c/p\u003e\u003cpre\u003e prop_enum m n = enumFromTo 0 m !! n == n\n\u003c/pre\u003e\u003cp\u003eThis property is only valid when \u003ccode\u003em\u003c/code\u003e and \u003ccode\u003en\u003c/code\u003e are natural numbers and \u003ccode\u003en\u003c=m\u003c/code\u003e.\n Instead of rewriting the property to account for arbitrary integers, we can\n simply apply a patch:\n\u003c/p\u003e\u003cpre\u003e quickCheck (prop_enum -:: name (\\m -\u003e abs \u003e-\u003e (min (abs m) . abs) \u003e-\u003e id))\n\u003c/pre\u003e\u003cp\u003eHere \u003ccode\u003e\u003ca\u003ename\u003c/a\u003e\u003c/code\u003e allows us to bind the first argument generated by QuickCheck.\n The patch uses \u003ccode\u003e\u003ca\u003eabs\u003c/a\u003e\u003c/code\u003e to make sure that the values passed to the property are\n natural numbers, and \u003ccode\u003e\u003ccode\u003e\u003ca\u003emin\u003c/a\u003e\u003c/code\u003e (\u003ccode\u003e\u003ca\u003eabs\u003c/a\u003e\u003c/code\u003e m)\u003c/code\u003e to ensure that the second argument\n does not exceed the first.\n\u003c/p\u003e\u003cp\u003eThe library has some similarities with Semantic editor combinators:\n\u003c/p\u003e\u003cp\u003e\u003ca\u003ehttp://conal.net/blog/posts/semantic-editor-combinators\u003c/a\u003e\n\u003c/p\u003e\u003cp\u003eThe main difference is that semantic editors are about locating and changing\n a small part of a data structure, while patches are about changing all parts\n of the structure. (For partial updates, use the \u003ccode\u003e\u003ca\u003eid\u003c/a\u003e\u003c/code\u003e patch to leave\n sub-structures untouched.)\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "Data.Patch",
        "fct-package": "patch-combinators",
        "fct-signature": "module",
        "fct-source": "src/Data-Patch.html",
        "fct-type": "module",
        "title": "Patch"
      },
      "index": {
        "description": "Patch combinators library for patching functions and data structures patch can be for example type constraint an identity function with specific type surjective function extending the domain of function e.g turning function on natural numbers into function defined for any integer typical use-case is to constrain the types of QuickCheck property Let say we have property to check associativity of addition prop addAssoc Num Ord Bool prop addAssoc In order to check that this property holds for Int8 we just say Data.Patch quickCheck prop addAssoc tI8 id Note that we only had to give partial type annotation since all arguments are required to have the same type Sometimes properties are only defined for sub-set of the possible arguments Consider the following property of enumFromTo prop enum enumFromTo This property is only valid when and are natural numbers and Instead of rewriting the property to account for arbitrary integers we can simply apply patch quickCheck prop enum name abs min abs abs id Here name allows us to bind the first argument generated by QuickCheck The patch uses abs to make sure that the values passed to the property are natural numbers and min abs to ensure that the second argument does not exceed the first The library has some similarities with Semantic editor combinators http conal.net blog posts semantic-editor-combinators The main difference is that semantic editors are about locating and changing small part of data structure while patches are about changing all parts of the structure For partial updates use the id patch to leave sub-structures untouched",
        "hierarchy": "Data Patch",
        "module": "Data.Patch",
        "name": "Patch",
        "normalized": "",
        "package": "patch-combinators",
        "partial": "Patch",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/patch-combinators/docs/Data-Patch.html#t:Patch",
      "description": {
        "fct-module": "Data.Patch",
        "fct-package": "patch-combinators",
        "fct-signature": "type",
        "fct-source": "src/Data-Patch.html#Patch",
        "fct-type": "type",
        "title": "Patch"
      },
      "index": {
        "description": "",
        "hierarchy": "Data Patch",
        "module": "Data.Patch",
        "name": "Patch",
        "normalized": "",
        "package": "patch-combinators",
        "partial": "Patch",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/patch-combinators/docs/Data-Patch.html#v:-45-::",
      "description": {
        "fct-descr": "\u003cp\u003ePatch application\n\u003c/p\u003e",
        "fct-module": "Data.Patch",
        "fct-package": "patch-combinators",
        "fct-signature": "a -\u003e Patch a b -\u003e b",
        "fct-source": "src/Data-Patch.html#-%3A%3A",
        "fct-type": "function",
        "title": "(-::)"
      },
      "index": {
        "description": "Patch application",
        "hierarchy": "Data Patch",
        "module": "Data.Patch",
        "name": "(-::) -::",
        "normalized": "a-\u003ePatch a b-\u003eb",
        "package": "patch-combinators",
        "partial": "",
        "signature": "a-\u003ePatch a b-\u003eb"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/patch-combinators/docs/Data-Patch.html#v:-62--45--62-",
      "description": {
        "fct-descr": "\u003cp\u003eFunction patch\n\u003c/p\u003e\u003cp\u003eThe first patch is applied to the argument and the second patch to the\n result.\n\u003c/p\u003e",
        "fct-module": "Data.Patch",
        "fct-package": "patch-combinators",
        "fct-signature": "Patch c a -\u003e Patch b d -\u003e Patch (a -\u003e b) (c -\u003e d)",
        "fct-source": "src/Data-Patch.html#%3E-%3E",
        "fct-type": "function",
        "title": "(\u003e-\u003e)"
      },
      "index": {
        "description": "Function patch The first patch is applied to the argument and the second patch to the result",
        "hierarchy": "Data Patch",
        "module": "Data.Patch",
        "name": "(\u003e-\u003e) \u003e-\u003e",
        "normalized": "Patch a b-\u003ePatch c d-\u003ePatch(b-\u003ec)(a-\u003ed)",
        "package": "patch-combinators",
        "partial": "",
        "signature": "Patch c a-\u003ePatch b d-\u003ePatch(a-\u003eb)(c-\u003ed)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/patch-combinators/docs/Data-Patch.html#v:name",
      "description": {
        "fct-descr": "\u003cp\u003eA patch that depends on the first argument of the resuting function\n\u003c/p\u003e",
        "fct-module": "Data.Patch",
        "fct-package": "patch-combinators",
        "fct-signature": "(c -\u003e Patch (a -\u003e b) (c -\u003e d)) -\u003e Patch (a -\u003e b) (c -\u003e d)",
        "fct-source": "src/Data-Patch.html#name",
        "fct-type": "function",
        "title": "name"
      },
      "index": {
        "description": "patch that depends on the first argument of the resuting function",
        "hierarchy": "Data Patch",
        "module": "Data.Patch",
        "name": "name",
        "normalized": "(a-\u003ePatch(b-\u003ec)(a-\u003ed))-\u003ePatch(b-\u003ec)(a-\u003ed)",
        "package": "patch-combinators",
        "partial": "",
        "signature": "(c-\u003ePatch(a-\u003eb)(c-\u003ed))-\u003ePatch(a-\u003eb)(c-\u003ed)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/patch-combinators/docs/Data-Patch.html#v:tBool",
      "description": {
        "fct-module": "Data.Patch",
        "fct-package": "patch-combinators",
        "fct-signature": "Patch Bool Bool",
        "fct-source": "src/Data-Patch.html#tBool",
        "fct-type": "function",
        "title": "tBool"
      },
      "index": {
        "description": "",
        "hierarchy": "Data Patch",
        "module": "Data.Patch",
        "name": "tBool",
        "normalized": "",
        "package": "patch-combinators",
        "partial": "Bool",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/patch-combinators/docs/Data-Patch.html#v:tComplex",
      "description": {
        "fct-module": "Data.Patch",
        "fct-package": "patch-combinators",
        "fct-signature": "Patch a a -\u003e Patch (Complex a) (Complex a)",
        "fct-source": "src/Data-Patch.html#tComplex",
        "fct-type": "function",
        "title": "tComplex"
      },
      "index": {
        "description": "",
        "hierarchy": "Data Patch",
        "module": "Data.Patch",
        "name": "tComplex",
        "normalized": "Patch a a-\u003ePatch(Complex a)(Complex a)",
        "package": "patch-combinators",
        "partial": "Complex",
        "signature": "Patch a a-\u003ePatch(Complex a)(Complex a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/patch-combinators/docs/Data-Patch.html#v:tCon",
      "description": {
        "fct-descr": "\u003cp\u003eType constructor\n\u003c/p\u003e\u003cp\u003eExample use:\n\u003c/p\u003e\u003cpre\u003e Data.Patch\u003e let Just a = read \"Just 6\" -:: tCon tFloat\n Data.Patch\u003e a\n 6.0\n\u003c/pre\u003e",
        "fct-module": "Data.Patch",
        "fct-package": "patch-combinators",
        "fct-signature": "Patch a a -\u003e Patch (c a) (c a)",
        "fct-source": "src/Data-Patch.html#tCon",
        "fct-type": "function",
        "title": "tCon"
      },
      "index": {
        "description": "Type constructor Example use Data.Patch let Just read Just tCon tFloat Data.Patch",
        "hierarchy": "Data Patch",
        "module": "Data.Patch",
        "name": "tCon",
        "normalized": "Patch a a-\u003ePatch(b a)(b a)",
        "package": "patch-combinators",
        "partial": "Con",
        "signature": "Patch a a-\u003ePatch(c a)(c a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/patch-combinators/docs/Data-Patch.html#v:tDouble",
      "description": {
        "fct-module": "Data.Patch",
        "fct-package": "patch-combinators",
        "fct-signature": "Patch Double Double",
        "fct-source": "src/Data-Patch.html#tDouble",
        "fct-type": "function",
        "title": "tDouble"
      },
      "index": {
        "description": "",
        "hierarchy": "Data Patch",
        "module": "Data.Patch",
        "name": "tDouble",
        "normalized": "",
        "package": "patch-combinators",
        "partial": "Double",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/patch-combinators/docs/Data-Patch.html#v:tFloat",
      "description": {
        "fct-module": "Data.Patch",
        "fct-package": "patch-combinators",
        "fct-signature": "Patch Float Float",
        "fct-source": "src/Data-Patch.html#tFloat",
        "fct-type": "function",
        "title": "tFloat"
      },
      "index": {
        "description": "",
        "hierarchy": "Data Patch",
        "module": "Data.Patch",
        "name": "tFloat",
        "normalized": "",
        "package": "patch-combinators",
        "partial": "Float",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/patch-combinators/docs/Data-Patch.html#v:tI16",
      "description": {
        "fct-module": "Data.Patch",
        "fct-package": "patch-combinators",
        "fct-signature": "Patch Int16 Int16",
        "fct-source": "src/Data-Patch.html#tI16",
        "fct-type": "function",
        "title": "tI16"
      },
      "index": {
        "description": "",
        "hierarchy": "Data Patch",
        "module": "Data.Patch",
        "name": "tI16",
        "normalized": "",
        "package": "patch-combinators",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/patch-combinators/docs/Data-Patch.html#v:tI32",
      "description": {
        "fct-module": "Data.Patch",
        "fct-package": "patch-combinators",
        "fct-signature": "Patch Int32 Int32",
        "fct-source": "src/Data-Patch.html#tI32",
        "fct-type": "function",
        "title": "tI32"
      },
      "index": {
        "description": "",
        "hierarchy": "Data Patch",
        "module": "Data.Patch",
        "name": "tI32",
        "normalized": "",
        "package": "patch-combinators",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/patch-combinators/docs/Data-Patch.html#v:tI8",
      "description": {
        "fct-module": "Data.Patch",
        "fct-package": "patch-combinators",
        "fct-signature": "Patch Int8 Int8",
        "fct-source": "src/Data-Patch.html#tI8",
        "fct-type": "function",
        "title": "tI8"
      },
      "index": {
        "description": "",
        "hierarchy": "Data Patch",
        "module": "Data.Patch",
        "name": "tI8",
        "normalized": "",
        "package": "patch-combinators",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/patch-combinators/docs/Data-Patch.html#v:tInt",
      "description": {
        "fct-module": "Data.Patch",
        "fct-package": "patch-combinators",
        "fct-signature": "Patch Int Int",
        "fct-source": "src/Data-Patch.html#tInt",
        "fct-type": "function",
        "title": "tInt"
      },
      "index": {
        "description": "",
        "hierarchy": "Data Patch",
        "module": "Data.Patch",
        "name": "tInt",
        "normalized": "",
        "package": "patch-combinators",
        "partial": "Int",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/patch-combinators/docs/Data-Patch.html#v:tInteger",
      "description": {
        "fct-module": "Data.Patch",
        "fct-package": "patch-combinators",
        "fct-signature": "Patch Integer Integer",
        "fct-source": "src/Data-Patch.html#tInteger",
        "fct-type": "function",
        "title": "tInteger"
      },
      "index": {
        "description": "",
        "hierarchy": "Data Patch",
        "module": "Data.Patch",
        "name": "tInteger",
        "normalized": "",
        "package": "patch-combinators",
        "partial": "Integer",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/patch-combinators/docs/Data-Patch.html#v:tW16",
      "description": {
        "fct-module": "Data.Patch",
        "fct-package": "patch-combinators",
        "fct-signature": "Patch Word16 Word16",
        "fct-source": "src/Data-Patch.html#tW16",
        "fct-type": "function",
        "title": "tW16"
      },
      "index": {
        "description": "",
        "hierarchy": "Data Patch",
        "module": "Data.Patch",
        "name": "tW16",
        "normalized": "",
        "package": "patch-combinators",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/patch-combinators/docs/Data-Patch.html#v:tW32",
      "description": {
        "fct-module": "Data.Patch",
        "fct-package": "patch-combinators",
        "fct-signature": "Patch Word32 Word32",
        "fct-source": "src/Data-Patch.html#tW32",
        "fct-type": "function",
        "title": "tW32"
      },
      "index": {
        "description": "",
        "hierarchy": "Data Patch",
        "module": "Data.Patch",
        "name": "tW32",
        "normalized": "",
        "package": "patch-combinators",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/patch-combinators/docs/Data-Patch.html#v:tW8",
      "description": {
        "fct-module": "Data.Patch",
        "fct-package": "patch-combinators",
        "fct-signature": "Patch Word8 Word8",
        "fct-source": "src/Data-Patch.html#tW8",
        "fct-type": "function",
        "title": "tW8"
      },
      "index": {
        "description": "",
        "hierarchy": "Data Patch",
        "module": "Data.Patch",
        "name": "tW8",
        "normalized": "",
        "package": "patch-combinators",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/patch-combinators/docs/Data-Patch.html#v:tWord",
      "description": {
        "fct-module": "Data.Patch",
        "fct-package": "patch-combinators",
        "fct-signature": "Patch Word Word",
        "fct-source": "src/Data-Patch.html#tWord",
        "fct-type": "function",
        "title": "tWord"
      },
      "index": {
        "description": "",
        "hierarchy": "Data Patch",
        "module": "Data.Patch",
        "name": "tWord",
        "normalized": "",
        "package": "patch-combinators",
        "partial": "Word",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/patch-combinators/docs/Data-Patch.html#v:tup2",
      "description": {
        "fct-descr": "\u003cp\u003ePair patch (a specialized version of \u003ccode\u003e\u003ca\u003e***\u003c/a\u003e\u003c/code\u003e)\n\u003c/p\u003e",
        "fct-module": "Data.Patch",
        "fct-package": "patch-combinators",
        "fct-signature": "Patch a1 b1 -\u003e Patch a2 b2 -\u003e Patch (a1, a2) (b1, b2)",
        "fct-source": "src/Data-Patch.html#tup2",
        "fct-type": "function",
        "title": "tup2"
      },
      "index": {
        "description": "Pair patch specialized version of",
        "hierarchy": "Data Patch",
        "module": "Data.Patch",
        "name": "tup2",
        "normalized": "Patch a b-\u003ePatch a b-\u003ePatch(a,a)(b,b)",
        "package": "patch-combinators",
        "partial": "",
        "signature": "Patch a b-\u003ePatch a b-\u003ePatch(a,a)(b,b)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/patch-combinators/docs/Data-Patch.html#v:tup3",
      "description": {
        "fct-descr": "\u003cp\u003eAnalogous to \u003ccode\u003e\u003ca\u003etup2\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
        "fct-module": "Data.Patch",
        "fct-package": "patch-combinators",
        "fct-signature": "Patch a1 b1 -\u003e Patch a2 b2 -\u003e Patch a3 b3 -\u003e Patch (a1, a2, a3) (b1, b2, b3)",
        "fct-source": "src/Data-Patch.html#tup3",
        "fct-type": "function",
        "title": "tup3"
      },
      "index": {
        "description": "Analogous to tup2",
        "hierarchy": "Data Patch",
        "module": "Data.Patch",
        "name": "tup3",
        "normalized": "Patch a b-\u003ePatch a b-\u003ePatch a b-\u003ePatch(a,a,a)(b,b,b)",
        "package": "patch-combinators",
        "partial": "",
        "signature": "Patch a b-\u003ePatch a b-\u003ePatch a b-\u003ePatch(a,a,a)(b,b,b)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/patch-combinators/docs/Data-Patch.html#v:tup4",
      "description": {
        "fct-descr": "\u003cp\u003eAnalogous to \u003ccode\u003e\u003ca\u003etup2\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
        "fct-module": "Data.Patch",
        "fct-package": "patch-combinators",
        "fct-signature": "Patch a1 b1 -\u003e Patch a2 b2 -\u003e Patch a3 b3 -\u003e Patch a4 b4 -\u003e Patch (a1, a2, a3, a4) (b1, b2, b3, b4)",
        "fct-source": "src/Data-Patch.html#tup4",
        "fct-type": "function",
        "title": "tup4"
      },
      "index": {
        "description": "Analogous to tup2",
        "hierarchy": "Data Patch",
        "module": "Data.Patch",
        "name": "tup4",
        "normalized": "Patch a b-\u003ePatch a b-\u003ePatch a b-\u003ePatch a b-\u003ePatch(a,a,a,a)(b,b,b,b)",
        "package": "patch-combinators",
        "partial": "",
        "signature": "Patch a b-\u003ePatch a b-\u003ePatch a b-\u003ePatch a b-\u003ePatch(a,a,a,a)(b,b,b,b)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/patch-combinators/docs/Data-Patch.html#v:tup5",
      "description": {
        "fct-descr": "\u003cp\u003eAnalogous to \u003ccode\u003e\u003ca\u003etup2\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
        "fct-module": "Data.Patch",
        "fct-package": "patch-combinators",
        "fct-signature": "Patch a1 b1 -\u003e Patch a2 b2 -\u003e Patch a3 b3 -\u003e Patch a4 b4 -\u003e Patch a5 b5 -\u003e Patch (a1, a2, a3, a4, a5) (b1, b2, b3, b4, b5)",
        "fct-source": "src/Data-Patch.html#tup5",
        "fct-type": "function",
        "title": "tup5"
      },
      "index": {
        "description": "Analogous to tup2",
        "hierarchy": "Data Patch",
        "module": "Data.Patch",
        "name": "tup5",
        "normalized": "Patch a b-\u003ePatch a b-\u003ePatch a b-\u003ePatch a b-\u003ePatch a b-\u003ePatch(a,a,a,a,a)(b,b,b,b,b)",
        "package": "patch-combinators",
        "partial": "",
        "signature": "Patch a b-\u003ePatch a b-\u003ePatch a b-\u003ePatch a b-\u003ePatch a b-\u003ePatch(a,a,a,a,a)(b,b,b,b,b)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/patch-combinators/docs/Data-Patch.html#v:tup6",
      "description": {
        "fct-descr": "\u003cp\u003eAnalogous to \u003ccode\u003e\u003ca\u003etup2\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
        "fct-module": "Data.Patch",
        "fct-package": "patch-combinators",
        "fct-signature": "Patch a1 b1 -\u003e Patch a2 b2 -\u003e Patch a3 b3 -\u003e Patch a4 b4 -\u003e Patch a5 b5 -\u003e Patch a6 b6 -\u003e Patch (a1, a2, a3, a4, a5, a6) (b1, b2, b3, b4, b5, b6)",
        "fct-source": "src/Data-Patch.html#tup6",
        "fct-type": "function",
        "title": "tup6"
      },
      "index": {
        "description": "Analogous to tup2",
        "hierarchy": "Data Patch",
        "module": "Data.Patch",
        "name": "tup6",
        "normalized": "Patch a b-\u003ePatch a b-\u003ePatch a b-\u003ePatch a b-\u003ePatch a b-\u003ePatch a b-\u003ePatch(a,a,a,a,a,a)(b,b,b,b,b,b)",
        "package": "patch-combinators",
        "partial": "",
        "signature": "Patch a b-\u003ePatch a b-\u003ePatch a b-\u003ePatch a b-\u003ePatch a b-\u003ePatch a b-\u003ePatch(a,a,a,a,a,a)(b,b,b,b,b,b)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/patch-combinators/docs/Data-Patch.html#v:tup7",
      "description": {
        "fct-descr": "\u003cp\u003eAnalogous to \u003ccode\u003e\u003ca\u003etup2\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
        "fct-module": "Data.Patch",
        "fct-package": "patch-combinators",
        "fct-signature": "Patch a1 b1 -\u003e Patch a2 b2 -\u003e Patch a3 b3 -\u003e Patch a4 b4 -\u003e Patch a5 b5 -\u003e Patch a6 b6 -\u003e Patch a7 b7 -\u003e Patch (a1, a2, a3, a4, a5, a6, a7) (b1, b2, b3, b4, b5, b6, b7)",
        "fct-source": "src/Data-Patch.html#tup7",
        "fct-type": "function",
        "title": "tup7"
      },
      "index": {
        "description": "Analogous to tup2",
        "hierarchy": "Data Patch",
        "module": "Data.Patch",
        "name": "tup7",
        "normalized": "Patch a b-\u003ePatch a b-\u003ePatch a b-\u003ePatch a b-\u003ePatch a b-\u003ePatch a b-\u003ePatch a b-\u003ePatch(a,a,a,a,a,a,a)(b,b,b,b,b,b,b)",
        "package": "patch-combinators",
        "partial": "",
        "signature": "Patch a b-\u003ePatch a b-\u003ePatch a b-\u003ePatch a b-\u003ePatch a b-\u003ePatch a b-\u003ePatch a b-\u003ePatch(a,a,a,a,a,a,a)(b,b,b,b,b,b,b)"
      }
    }
  }
]