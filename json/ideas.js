[
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Boolean.html#",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Boolean",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Common-Algebra-Boolean.html",
        "fct-type": "module",
        "title": "Boolean"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Boolean",
        "module": "Ideas.Common.Algebra.Boolean",
        "name": "Boolean",
        "normalized": "",
        "package": "ideas",
        "partial": "Boolean",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Boolean.html#t:And",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Boolean",
        "fct-package": "ideas",
        "fct-signature": "newtype",
        "fct-source": "src/Ideas-Common-Algebra-Boolean.html#And",
        "fct-type": "newtype",
        "title": "And"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Boolean",
        "module": "Ideas.Common.Algebra.Boolean",
        "name": "And",
        "normalized": "",
        "package": "ideas",
        "partial": "And",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Boolean.html#t:BoolValue",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Boolean",
        "fct-package": "ideas",
        "fct-signature": "class",
        "fct-source": "src/Ideas-Common-Algebra-Boolean.html#BoolValue",
        "fct-type": "class",
        "title": "BoolValue"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Boolean",
        "module": "Ideas.Common.Algebra.Boolean",
        "name": "BoolValue",
        "normalized": "",
        "package": "ideas",
        "partial": "Bool Value",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Boolean.html#t:Boolean",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Boolean",
        "fct-package": "ideas",
        "fct-signature": "class",
        "fct-source": "src/Ideas-Common-Algebra-Boolean.html#Boolean",
        "fct-type": "class",
        "title": "Boolean"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Boolean",
        "module": "Ideas.Common.Algebra.Boolean",
        "name": "Boolean",
        "normalized": "",
        "package": "ideas",
        "partial": "Boolean",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Boolean.html#t:CoBoolean",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Boolean",
        "fct-package": "ideas",
        "fct-signature": "class",
        "fct-source": "src/Ideas-Common-Algebra-Boolean.html#CoBoolean",
        "fct-type": "class",
        "title": "CoBoolean"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Boolean",
        "module": "Ideas.Common.Algebra.Boolean",
        "name": "CoBoolean",
        "normalized": "",
        "package": "ideas",
        "partial": "Co Boolean",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Boolean.html#t:DualMonoid",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Boolean",
        "fct-package": "ideas",
        "fct-signature": "class",
        "fct-source": "src/Ideas-Common-Algebra-Boolean.html#DualMonoid",
        "fct-type": "class",
        "title": "DualMonoid"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Boolean",
        "module": "Ideas.Common.Algebra.Boolean",
        "name": "DualMonoid",
        "normalized": "",
        "package": "ideas",
        "partial": "Dual Monoid",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Boolean.html#t:Or",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Boolean",
        "fct-package": "ideas",
        "fct-signature": "newtype",
        "fct-source": "src/Ideas-Common-Algebra-Boolean.html#Or",
        "fct-type": "newtype",
        "title": "Or"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Boolean",
        "module": "Ideas.Common.Algebra.Boolean",
        "name": "Or",
        "normalized": "",
        "package": "ideas",
        "partial": "Or",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Boolean.html#v:-60--124--124--62-",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Boolean",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e a -\u003e a",
        "fct-source": "src/Ideas-Common-Algebra-Boolean.html#%3C%7C%7C%3E",
        "fct-type": "method",
        "title": "(\u003c||\u003e)"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Boolean",
        "module": "Ideas.Common.Algebra.Boolean",
        "name": "(\u003c||\u003e) \u003c||\u003e",
        "normalized": "a-\u003ea-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "a-\u003ea-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Boolean.html#v:-60--38--38--62-",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Boolean",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e a -\u003e a",
        "fct-source": "src/Ideas-Common-Algebra-Boolean.html#%3C%26%26%3E",
        "fct-type": "method",
        "title": "(\u003c&&\u003e)"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Boolean",
        "module": "Ideas.Common.Algebra.Boolean",
        "name": "(\u003c&&\u003e) \u003c&&\u003e",
        "normalized": "a-\u003ea-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "a-\u003ea-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Boolean.html#v:-62--60-",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Boolean",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e a -\u003e a",
        "fct-source": "src/Ideas-Common-Algebra-Boolean.html#%3E%3C",
        "fct-type": "method",
        "title": "(\u003e\u003c)"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Boolean",
        "module": "Ideas.Common.Algebra.Boolean",
        "name": "(\u003e\u003c) \u003e\u003c",
        "normalized": "a-\u003ea-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "a-\u003ea-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Boolean.html#v:And",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Boolean",
        "fct-package": "ideas",
        "fct-signature": "And",
        "fct-source": "src/Ideas-Common-Algebra-Boolean.html#And",
        "fct-type": "function",
        "title": "And"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Boolean",
        "module": "Ideas.Common.Algebra.Boolean",
        "name": "And",
        "normalized": "",
        "package": "ideas",
        "partial": "And",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Boolean.html#v:Or",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Boolean",
        "fct-package": "ideas",
        "fct-signature": "Or",
        "fct-source": "src/Ideas-Common-Algebra-Boolean.html#Or",
        "fct-type": "function",
        "title": "Or"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Boolean",
        "module": "Ideas.Common.Algebra.Boolean",
        "name": "Or",
        "normalized": "",
        "package": "ideas",
        "partial": "Or",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Boolean.html#v:ands",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Boolean",
        "fct-package": "ideas",
        "fct-signature": "[a] -\u003e a",
        "fct-source": "src/Ideas-Common-Algebra-Boolean.html#ands",
        "fct-type": "function",
        "title": "ands"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Boolean",
        "module": "Ideas.Common.Algebra.Boolean",
        "name": "ands",
        "normalized": "[a]-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "[a]-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Boolean.html#v:complement",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Boolean",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e a",
        "fct-source": "src/Ideas-Common-Algebra-Boolean.html#complement",
        "fct-type": "method",
        "title": "complement"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Boolean",
        "module": "Ideas.Common.Algebra.Boolean",
        "name": "complement",
        "normalized": "a-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "a-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Boolean.html#v:conjunctions",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Boolean",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e [a]",
        "fct-source": "src/Ideas-Common-Algebra-Boolean.html#conjunctions",
        "fct-type": "function",
        "title": "conjunctions"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Boolean",
        "module": "Ideas.Common.Algebra.Boolean",
        "name": "conjunctions",
        "normalized": "a-\u003e[a]",
        "package": "ideas",
        "partial": "",
        "signature": "a-\u003e[a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Boolean.html#v:disjunctions",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Boolean",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e [a]",
        "fct-source": "src/Ideas-Common-Algebra-Boolean.html#disjunctions",
        "fct-type": "function",
        "title": "disjunctions"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Boolean",
        "module": "Ideas.Common.Algebra.Boolean",
        "name": "disjunctions",
        "normalized": "a-\u003e[a]",
        "package": "ideas",
        "partial": "",
        "signature": "a-\u003e[a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Boolean.html#v:dualCompl",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Boolean",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e a",
        "fct-source": "src/Ideas-Common-Algebra-Boolean.html#dualCompl",
        "fct-type": "method",
        "title": "dualCompl"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Boolean",
        "module": "Ideas.Common.Algebra.Boolean",
        "name": "dualCompl",
        "normalized": "a-\u003ea",
        "package": "ideas",
        "partial": "Compl",
        "signature": "a-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Boolean.html#v:equivalent",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Boolean",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e a -\u003e a",
        "fct-source": "src/Ideas-Common-Algebra-Boolean.html#equivalent",
        "fct-type": "function",
        "title": "equivalent"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Boolean",
        "module": "Ideas.Common.Algebra.Boolean",
        "name": "equivalent",
        "normalized": "a-\u003ea-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "a-\u003ea-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Boolean.html#v:false",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Boolean",
        "fct-package": "ideas",
        "fct-signature": "a",
        "fct-source": "src/Ideas-Common-Algebra-Boolean.html#false",
        "fct-type": "method",
        "title": "false"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Boolean",
        "module": "Ideas.Common.Algebra.Boolean",
        "name": "false",
        "normalized": "",
        "package": "ideas",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Boolean.html#v:fromAnd",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Common.Algebra.Boolean",
        "fct-package": "ideas",
        "fct-signature": "a",
        "fct-source": "src/Ideas-Common-Algebra-Boolean.html#And",
        "fct-type": "function",
        "title": "fromAnd"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Boolean",
        "module": "Ideas.Common.Algebra.Boolean",
        "name": "fromAnd",
        "normalized": "",
        "package": "ideas",
        "partial": "And",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Boolean.html#v:fromBool",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Boolean",
        "fct-package": "ideas",
        "fct-signature": "Bool -\u003e a",
        "fct-source": "src/Ideas-Common-Algebra-Boolean.html#fromBool",
        "fct-type": "method",
        "title": "fromBool"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Boolean",
        "module": "Ideas.Common.Algebra.Boolean",
        "name": "fromBool",
        "normalized": "Bool-\u003ea",
        "package": "ideas",
        "partial": "Bool",
        "signature": "Bool-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Boolean.html#v:fromOr",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Common.Algebra.Boolean",
        "fct-package": "ideas",
        "fct-signature": "a",
        "fct-source": "src/Ideas-Common-Algebra-Boolean.html#Or",
        "fct-type": "function",
        "title": "fromOr"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Boolean",
        "module": "Ideas.Common.Algebra.Boolean",
        "name": "fromOr",
        "normalized": "",
        "package": "ideas",
        "partial": "Or",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Boolean.html#v:implies",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Boolean",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e a -\u003e a",
        "fct-source": "src/Ideas-Common-Algebra-Boolean.html#implies",
        "fct-type": "function",
        "title": "implies"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Boolean",
        "module": "Ideas.Common.Algebra.Boolean",
        "name": "implies",
        "normalized": "a-\u003ea-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "a-\u003ea-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Boolean.html#v:isAnd",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Boolean",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e Maybe (a, a)",
        "fct-source": "src/Ideas-Common-Algebra-Boolean.html#isAnd",
        "fct-type": "method",
        "title": "isAnd"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Boolean",
        "module": "Ideas.Common.Algebra.Boolean",
        "name": "isAnd",
        "normalized": "a-\u003eMaybe(a,a)",
        "package": "ideas",
        "partial": "And",
        "signature": "a-\u003eMaybe(a,a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Boolean.html#v:isComplement",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Boolean",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e Maybe a",
        "fct-source": "src/Ideas-Common-Algebra-Boolean.html#isComplement",
        "fct-type": "method",
        "title": "isComplement"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Boolean",
        "module": "Ideas.Common.Algebra.Boolean",
        "name": "isComplement",
        "normalized": "a-\u003eMaybe a",
        "package": "ideas",
        "partial": "Complement",
        "signature": "a-\u003eMaybe a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Boolean.html#v:isFalse",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Boolean",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e Bool",
        "fct-source": "src/Ideas-Common-Algebra-Boolean.html#isFalse",
        "fct-type": "method",
        "title": "isFalse"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Boolean",
        "module": "Ideas.Common.Algebra.Boolean",
        "name": "isFalse",
        "normalized": "a-\u003eBool",
        "package": "ideas",
        "partial": "False",
        "signature": "a-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Boolean.html#v:isOr",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Boolean",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e Maybe (a, a)",
        "fct-source": "src/Ideas-Common-Algebra-Boolean.html#isOr",
        "fct-type": "method",
        "title": "isOr"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Boolean",
        "module": "Ideas.Common.Algebra.Boolean",
        "name": "isOr",
        "normalized": "a-\u003eMaybe(a,a)",
        "package": "ideas",
        "partial": "Or",
        "signature": "a-\u003eMaybe(a,a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Boolean.html#v:isTrue",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Boolean",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e Bool",
        "fct-source": "src/Ideas-Common-Algebra-Boolean.html#isTrue",
        "fct-type": "method",
        "title": "isTrue"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Boolean",
        "module": "Ideas.Common.Algebra.Boolean",
        "name": "isTrue",
        "normalized": "a-\u003eBool",
        "package": "ideas",
        "partial": "True",
        "signature": "a-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Boolean.html#v:ors",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Boolean",
        "fct-package": "ideas",
        "fct-signature": "[a] -\u003e a",
        "fct-source": "src/Ideas-Common-Algebra-Boolean.html#ors",
        "fct-type": "function",
        "title": "ors"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Boolean",
        "module": "Ideas.Common.Algebra.Boolean",
        "name": "ors",
        "normalized": "[a]-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "[a]-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Boolean.html#v:true",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Boolean",
        "fct-package": "ideas",
        "fct-signature": "a",
        "fct-source": "src/Ideas-Common-Algebra-Boolean.html#true",
        "fct-type": "method",
        "title": "true"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Boolean",
        "module": "Ideas.Common.Algebra.Boolean",
        "name": "true",
        "normalized": "",
        "package": "ideas",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-BooleanLaws.html#",
      "description": {
        "fct-module": "Ideas.Common.Algebra.BooleanLaws",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Common-Algebra-BooleanLaws.html",
        "fct-type": "module",
        "title": "BooleanLaws"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra BooleanLaws",
        "module": "Ideas.Common.Algebra.BooleanLaws",
        "name": "BooleanLaws",
        "normalized": "",
        "package": "ideas",
        "partial": "Boolean Laws",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-BooleanLaws.html#v:absorptionAndLaws",
      "description": {
        "fct-module": "Ideas.Common.Algebra.BooleanLaws",
        "fct-package": "ideas",
        "fct-signature": "[Law a]",
        "fct-source": "src/Ideas-Common-Algebra-BooleanLaws.html#absorptionAndLaws",
        "fct-type": "function",
        "title": "absorptionAndLaws"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra BooleanLaws",
        "module": "Ideas.Common.Algebra.BooleanLaws",
        "name": "absorptionAndLaws",
        "normalized": "[Law a]",
        "package": "ideas",
        "partial": "And Laws",
        "signature": "[Law a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-BooleanLaws.html#v:absorptionOrLaws",
      "description": {
        "fct-module": "Ideas.Common.Algebra.BooleanLaws",
        "fct-package": "ideas",
        "fct-signature": "[Law a]",
        "fct-source": "src/Ideas-Common-Algebra-BooleanLaws.html#absorptionOrLaws",
        "fct-type": "function",
        "title": "absorptionOrLaws"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra BooleanLaws",
        "module": "Ideas.Common.Algebra.BooleanLaws",
        "name": "absorptionOrLaws",
        "normalized": "[Law a]",
        "package": "ideas",
        "partial": "Or Laws",
        "signature": "[Law a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-BooleanLaws.html#v:andOverOrLaws",
      "description": {
        "fct-module": "Ideas.Common.Algebra.BooleanLaws",
        "fct-package": "ideas",
        "fct-signature": "[Law a]",
        "fct-source": "src/Ideas-Common-Algebra-BooleanLaws.html#andOverOrLaws",
        "fct-type": "function",
        "title": "andOverOrLaws"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra BooleanLaws",
        "module": "Ideas.Common.Algebra.BooleanLaws",
        "name": "andOverOrLaws",
        "normalized": "[Law a]",
        "package": "ideas",
        "partial": "Over Or Laws",
        "signature": "[Law a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-BooleanLaws.html#v:booleanLaws",
      "description": {
        "fct-module": "Ideas.Common.Algebra.BooleanLaws",
        "fct-package": "ideas",
        "fct-signature": "[Law a]",
        "fct-source": "src/Ideas-Common-Algebra-BooleanLaws.html#booleanLaws",
        "fct-type": "function",
        "title": "booleanLaws"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra BooleanLaws",
        "module": "Ideas.Common.Algebra.BooleanLaws",
        "name": "booleanLaws",
        "normalized": "[Law a]",
        "package": "ideas",
        "partial": "Laws",
        "signature": "[Law a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-BooleanLaws.html#v:complementAndLaws",
      "description": {
        "fct-module": "Ideas.Common.Algebra.BooleanLaws",
        "fct-package": "ideas",
        "fct-signature": "[Law a]",
        "fct-source": "src/Ideas-Common-Algebra-BooleanLaws.html#complementAndLaws",
        "fct-type": "function",
        "title": "complementAndLaws"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra BooleanLaws",
        "module": "Ideas.Common.Algebra.BooleanLaws",
        "name": "complementAndLaws",
        "normalized": "[Law a]",
        "package": "ideas",
        "partial": "And Laws",
        "signature": "[Law a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-BooleanLaws.html#v:complementFalse",
      "description": {
        "fct-module": "Ideas.Common.Algebra.BooleanLaws",
        "fct-package": "ideas",
        "fct-signature": "Law a",
        "fct-source": "src/Ideas-Common-Algebra-BooleanLaws.html#complementFalse",
        "fct-type": "function",
        "title": "complementFalse"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra BooleanLaws",
        "module": "Ideas.Common.Algebra.BooleanLaws",
        "name": "complementFalse",
        "normalized": "",
        "package": "ideas",
        "partial": "False",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-BooleanLaws.html#v:complementOrLaws",
      "description": {
        "fct-module": "Ideas.Common.Algebra.BooleanLaws",
        "fct-package": "ideas",
        "fct-signature": "[Law a]",
        "fct-source": "src/Ideas-Common-Algebra-BooleanLaws.html#complementOrLaws",
        "fct-type": "function",
        "title": "complementOrLaws"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra BooleanLaws",
        "module": "Ideas.Common.Algebra.BooleanLaws",
        "name": "complementOrLaws",
        "normalized": "[Law a]",
        "package": "ideas",
        "partial": "Or Laws",
        "signature": "[Law a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-BooleanLaws.html#v:complementTrue",
      "description": {
        "fct-module": "Ideas.Common.Algebra.BooleanLaws",
        "fct-package": "ideas",
        "fct-signature": "Law a",
        "fct-source": "src/Ideas-Common-Algebra-BooleanLaws.html#complementTrue",
        "fct-type": "function",
        "title": "complementTrue"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra BooleanLaws",
        "module": "Ideas.Common.Algebra.BooleanLaws",
        "name": "complementTrue",
        "normalized": "",
        "package": "ideas",
        "partial": "True",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-BooleanLaws.html#v:deMorganAnd",
      "description": {
        "fct-module": "Ideas.Common.Algebra.BooleanLaws",
        "fct-package": "ideas",
        "fct-signature": "Law a",
        "fct-source": "src/Ideas-Common-Algebra-BooleanLaws.html#deMorganAnd",
        "fct-type": "function",
        "title": "deMorganAnd"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra BooleanLaws",
        "module": "Ideas.Common.Algebra.BooleanLaws",
        "name": "deMorganAnd",
        "normalized": "",
        "package": "ideas",
        "partial": "Morgan And",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-BooleanLaws.html#v:deMorganOr",
      "description": {
        "fct-module": "Ideas.Common.Algebra.BooleanLaws",
        "fct-package": "ideas",
        "fct-signature": "Law a",
        "fct-source": "src/Ideas-Common-Algebra-BooleanLaws.html#deMorganOr",
        "fct-type": "function",
        "title": "deMorganOr"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra BooleanLaws",
        "module": "Ideas.Common.Algebra.BooleanLaws",
        "name": "deMorganOr",
        "normalized": "",
        "package": "ideas",
        "partial": "Morgan Or",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-BooleanLaws.html#v:doubleComplement",
      "description": {
        "fct-module": "Ideas.Common.Algebra.BooleanLaws",
        "fct-package": "ideas",
        "fct-signature": "Law a",
        "fct-source": "src/Ideas-Common-Algebra-BooleanLaws.html#doubleComplement",
        "fct-type": "function",
        "title": "doubleComplement"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra BooleanLaws",
        "module": "Ideas.Common.Algebra.BooleanLaws",
        "name": "doubleComplement",
        "normalized": "",
        "package": "ideas",
        "partial": "Complement",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-BooleanLaws.html#v:fromAndLaw",
      "description": {
        "fct-module": "Ideas.Common.Algebra.BooleanLaws",
        "fct-package": "ideas",
        "fct-signature": "Law (And a) -\u003e Law a",
        "fct-source": "src/Ideas-Common-Algebra-BooleanLaws.html#fromAndLaw",
        "fct-type": "function",
        "title": "fromAndLaw"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra BooleanLaws",
        "module": "Ideas.Common.Algebra.BooleanLaws",
        "name": "fromAndLaw",
        "normalized": "Law(And a)-\u003eLaw a",
        "package": "ideas",
        "partial": "And Law",
        "signature": "Law(And a)-\u003eLaw a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-BooleanLaws.html#v:fromOrLaw",
      "description": {
        "fct-module": "Ideas.Common.Algebra.BooleanLaws",
        "fct-package": "ideas",
        "fct-signature": "Law (Or a) -\u003e Law a",
        "fct-source": "src/Ideas-Common-Algebra-BooleanLaws.html#fromOrLaw",
        "fct-type": "function",
        "title": "fromOrLaw"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra BooleanLaws",
        "module": "Ideas.Common.Algebra.BooleanLaws",
        "name": "fromOrLaw",
        "normalized": "Law(Or a)-\u003eLaw a",
        "package": "ideas",
        "partial": "Or Law",
        "signature": "Law(Or a)-\u003eLaw a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-BooleanLaws.html#v:orOverAndLaws",
      "description": {
        "fct-module": "Ideas.Common.Algebra.BooleanLaws",
        "fct-package": "ideas",
        "fct-signature": "[Law a]",
        "fct-source": "src/Ideas-Common-Algebra-BooleanLaws.html#orOverAndLaws",
        "fct-type": "function",
        "title": "orOverAndLaws"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra BooleanLaws",
        "module": "Ideas.Common.Algebra.BooleanLaws",
        "name": "orOverAndLaws",
        "normalized": "[Law a]",
        "package": "ideas",
        "partial": "Over And Laws",
        "signature": "[Law a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-BooleanLaws.html#v:propsBoolean",
      "description": {
        "fct-module": "Ideas.Common.Algebra.BooleanLaws",
        "fct-package": "ideas",
        "fct-signature": "[Property]",
        "fct-source": "src/Ideas-Common-Algebra-BooleanLaws.html#propsBoolean",
        "fct-type": "function",
        "title": "propsBoolean"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra BooleanLaws",
        "module": "Ideas.Common.Algebra.BooleanLaws",
        "name": "propsBoolean",
        "normalized": "[Property]",
        "package": "ideas",
        "partial": "Boolean",
        "signature": "[Property]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Field.html#",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Field",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Common-Algebra-Field.html",
        "fct-type": "module",
        "title": "Field"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Field",
        "module": "Ideas.Common.Algebra.Field",
        "name": "Field",
        "normalized": "",
        "package": "ideas",
        "partial": "Field",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Field.html#t:Additive",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Field",
        "fct-package": "ideas",
        "fct-signature": "newtype",
        "fct-source": "src/Ideas-Common-Algebra-Field.html#Additive",
        "fct-type": "newtype",
        "title": "Additive"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Field",
        "module": "Ideas.Common.Algebra.Field",
        "name": "Additive",
        "normalized": "",
        "package": "ideas",
        "partial": "Additive",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Field.html#t:CoField",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Field",
        "fct-package": "ideas",
        "fct-signature": "class",
        "fct-source": "src/Ideas-Common-Algebra-Field.html#CoField",
        "fct-type": "class",
        "title": "CoField"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Field",
        "module": "Ideas.Common.Algebra.Field",
        "name": "CoField",
        "normalized": "",
        "package": "ideas",
        "partial": "Co Field",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Field.html#t:CoRing",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Field",
        "fct-package": "ideas",
        "fct-signature": "class",
        "fct-source": "src/Ideas-Common-Algebra-Field.html#CoRing",
        "fct-type": "class",
        "title": "CoRing"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Field",
        "module": "Ideas.Common.Algebra.Field",
        "name": "CoRing",
        "normalized": "",
        "package": "ideas",
        "partial": "Co Ring",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Field.html#t:CoSemiRing",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Field",
        "fct-package": "ideas",
        "fct-signature": "class",
        "fct-source": "src/Ideas-Common-Algebra-Field.html#CoSemiRing",
        "fct-type": "class",
        "title": "CoSemiRing"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Field",
        "module": "Ideas.Common.Algebra.Field",
        "name": "CoSemiRing",
        "normalized": "",
        "package": "ideas",
        "partial": "Co Semi Ring",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Field.html#t:Field",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Field",
        "fct-package": "ideas",
        "fct-signature": "class",
        "fct-source": "src/Ideas-Common-Algebra-Field.html#Field",
        "fct-type": "class",
        "title": "Field"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Field",
        "module": "Ideas.Common.Algebra.Field",
        "name": "Field",
        "normalized": "",
        "package": "ideas",
        "partial": "Field",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Field.html#t:Multiplicative",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Field",
        "fct-package": "ideas",
        "fct-signature": "newtype",
        "fct-source": "src/Ideas-Common-Algebra-Field.html#Multiplicative",
        "fct-type": "newtype",
        "title": "Multiplicative"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Field",
        "module": "Ideas.Common.Algebra.Field",
        "name": "Multiplicative",
        "normalized": "",
        "package": "ideas",
        "partial": "Multiplicative",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Field.html#t:Ring",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Field",
        "fct-package": "ideas",
        "fct-signature": "class",
        "fct-source": "src/Ideas-Common-Algebra-Field.html#Ring",
        "fct-type": "class",
        "title": "Ring"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Field",
        "module": "Ideas.Common.Algebra.Field",
        "name": "Ring",
        "normalized": "",
        "package": "ideas",
        "partial": "Ring",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Field.html#t:SafeNum",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Field",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Common-Algebra-Field.html#SafeNum",
        "fct-type": "data",
        "title": "SafeNum"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Field",
        "module": "Ideas.Common.Algebra.Field",
        "name": "SafeNum",
        "normalized": "",
        "package": "ideas",
        "partial": "Safe Num",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Field.html#t:SemiRing",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Field",
        "fct-package": "ideas",
        "fct-signature": "class",
        "fct-source": "src/Ideas-Common-Algebra-Field.html#SemiRing",
        "fct-type": "class",
        "title": "SemiRing"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Field",
        "module": "Ideas.Common.Algebra.Field",
        "name": "SemiRing",
        "normalized": "",
        "package": "ideas",
        "partial": "Semi Ring",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Field.html#v:-60--42--62-",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Field",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e a -\u003e a",
        "fct-source": "src/Ideas-Common-Algebra-Field.html#%3C%2A%3E",
        "fct-type": "method",
        "title": "(\u003c*\u003e)"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Field",
        "module": "Ideas.Common.Algebra.Field",
        "name": "(\u003c*\u003e) \u003c*\u003e",
        "normalized": "a-\u003ea-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "a-\u003ea-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Field.html#v:-60--43--62-",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Field",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e a -\u003e a",
        "fct-source": "src/Ideas-Common-Algebra-Field.html#%3C%2B%3E",
        "fct-type": "method",
        "title": "(\u003c+\u003e)"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Field",
        "module": "Ideas.Common.Algebra.Field",
        "name": "(\u003c+\u003e) \u003c+\u003e",
        "normalized": "a-\u003ea-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "a-\u003ea-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Field.html#v:-60--45--62-",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Field",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e a -\u003e a",
        "fct-source": "src/Ideas-Common-Algebra-Field.html#%3C-%3E",
        "fct-type": "method",
        "title": "(\u003c-\u003e)"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Field",
        "module": "Ideas.Common.Algebra.Field",
        "name": "(\u003c-\u003e) \u003c-\u003e",
        "normalized": "a-\u003ea-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "a-\u003ea-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Field.html#v:-60--47--62-",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Field",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e a -\u003e a",
        "fct-source": "src/Ideas-Common-Algebra-Field.html#%3C%2F%3E",
        "fct-type": "method",
        "title": "(\u003c/\u003e)"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Field",
        "module": "Ideas.Common.Algebra.Field",
        "name": "(\u003c/\u003e) \u003c/\u003e",
        "normalized": "a-\u003ea-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "a-\u003ea-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Field.html#v:Additive",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Field",
        "fct-package": "ideas",
        "fct-signature": "Additive",
        "fct-source": "src/Ideas-Common-Algebra-Field.html#Additive",
        "fct-type": "function",
        "title": "Additive"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Field",
        "module": "Ideas.Common.Algebra.Field",
        "name": "Additive",
        "normalized": "",
        "package": "ideas",
        "partial": "Additive",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Field.html#v:Multiplicative",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Field",
        "fct-package": "ideas",
        "fct-signature": "Multiplicative",
        "fct-source": "src/Ideas-Common-Algebra-Field.html#Multiplicative",
        "fct-type": "function",
        "title": "Multiplicative"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Field",
        "module": "Ideas.Common.Algebra.Field",
        "name": "Multiplicative",
        "normalized": "",
        "package": "ideas",
        "partial": "Multiplicative",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Field.html#v:fromAdditive",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Common.Algebra.Field",
        "fct-package": "ideas",
        "fct-signature": "a",
        "fct-source": "src/Ideas-Common-Algebra-Field.html#Additive",
        "fct-type": "function",
        "title": "fromAdditive"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Field",
        "module": "Ideas.Common.Algebra.Field",
        "name": "fromAdditive",
        "normalized": "",
        "package": "ideas",
        "partial": "Additive",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Field.html#v:fromMultiplicative",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Common.Algebra.Field",
        "fct-package": "ideas",
        "fct-signature": "a",
        "fct-source": "src/Ideas-Common-Algebra-Field.html#Multiplicative",
        "fct-type": "function",
        "title": "fromMultiplicative"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Field",
        "module": "Ideas.Common.Algebra.Field",
        "name": "fromMultiplicative",
        "normalized": "",
        "package": "ideas",
        "partial": "Multiplicative",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Field.html#v:isDivision",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Field",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e Maybe (a, a)",
        "fct-source": "src/Ideas-Common-Algebra-Field.html#isDivision",
        "fct-type": "method",
        "title": "isDivision"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Field",
        "module": "Ideas.Common.Algebra.Field",
        "name": "isDivision",
        "normalized": "a-\u003eMaybe(a,a)",
        "package": "ideas",
        "partial": "Division",
        "signature": "a-\u003eMaybe(a,a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Field.html#v:isMinus",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Field",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e Maybe (a, a)",
        "fct-source": "src/Ideas-Common-Algebra-Field.html#isMinus",
        "fct-type": "method",
        "title": "isMinus"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Field",
        "module": "Ideas.Common.Algebra.Field",
        "name": "isMinus",
        "normalized": "a-\u003eMaybe(a,a)",
        "package": "ideas",
        "partial": "Minus",
        "signature": "a-\u003eMaybe(a,a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Field.html#v:isNegate",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Field",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e Maybe a",
        "fct-source": "src/Ideas-Common-Algebra-Field.html#isNegate",
        "fct-type": "method",
        "title": "isNegate"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Field",
        "module": "Ideas.Common.Algebra.Field",
        "name": "isNegate",
        "normalized": "a-\u003eMaybe a",
        "package": "ideas",
        "partial": "Negate",
        "signature": "a-\u003eMaybe a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Field.html#v:isOne",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Field",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e Bool",
        "fct-source": "src/Ideas-Common-Algebra-Field.html#isOne",
        "fct-type": "method",
        "title": "isOne"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Field",
        "module": "Ideas.Common.Algebra.Field",
        "name": "isOne",
        "normalized": "a-\u003eBool",
        "package": "ideas",
        "partial": "One",
        "signature": "a-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Field.html#v:isPlus",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Field",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e Maybe (a, a)",
        "fct-source": "src/Ideas-Common-Algebra-Field.html#isPlus",
        "fct-type": "method",
        "title": "isPlus"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Field",
        "module": "Ideas.Common.Algebra.Field",
        "name": "isPlus",
        "normalized": "a-\u003eMaybe(a,a)",
        "package": "ideas",
        "partial": "Plus",
        "signature": "a-\u003eMaybe(a,a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Field.html#v:isRecip",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Field",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e Maybe a",
        "fct-source": "src/Ideas-Common-Algebra-Field.html#isRecip",
        "fct-type": "method",
        "title": "isRecip"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Field",
        "module": "Ideas.Common.Algebra.Field",
        "name": "isRecip",
        "normalized": "a-\u003eMaybe a",
        "package": "ideas",
        "partial": "Recip",
        "signature": "a-\u003eMaybe a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Field.html#v:isTimes",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Field",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e Maybe (a, a)",
        "fct-source": "src/Ideas-Common-Algebra-Field.html#isTimes",
        "fct-type": "method",
        "title": "isTimes"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Field",
        "module": "Ideas.Common.Algebra.Field",
        "name": "isTimes",
        "normalized": "a-\u003eMaybe(a,a)",
        "package": "ideas",
        "partial": "Times",
        "signature": "a-\u003eMaybe(a,a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Field.html#v:isZero",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Field",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e Bool",
        "fct-source": "src/Ideas-Common-Algebra-Field.html#isZero",
        "fct-type": "method",
        "title": "isZero"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Field",
        "module": "Ideas.Common.Algebra.Field",
        "name": "isZero",
        "normalized": "a-\u003eBool",
        "package": "ideas",
        "partial": "Zero",
        "signature": "a-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Field.html#v:one",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Field",
        "fct-package": "ideas",
        "fct-signature": "a",
        "fct-source": "src/Ideas-Common-Algebra-Field.html#one",
        "fct-type": "method",
        "title": "one"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Field",
        "module": "Ideas.Common.Algebra.Field",
        "name": "one",
        "normalized": "",
        "package": "ideas",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Field.html#v:plusInverse",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Field",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e a",
        "fct-source": "src/Ideas-Common-Algebra-Field.html#plusInverse",
        "fct-type": "method",
        "title": "plusInverse"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Field",
        "module": "Ideas.Common.Algebra.Field",
        "name": "plusInverse",
        "normalized": "a-\u003ea",
        "package": "ideas",
        "partial": "Inverse",
        "signature": "a-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Field.html#v:product",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Field",
        "fct-package": "ideas",
        "fct-signature": "[a] -\u003e a",
        "fct-source": "src/Ideas-Common-Algebra-Field.html#product",
        "fct-type": "method",
        "title": "product"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Field",
        "module": "Ideas.Common.Algebra.Field",
        "name": "product",
        "normalized": "[a]-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "[a]-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Field.html#v:safeNum",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Field",
        "fct-package": "ideas",
        "fct-signature": "SafeNum a -\u003e Either String a",
        "fct-source": "src/Ideas-Common-Algebra-Field.html#safeNum",
        "fct-type": "function",
        "title": "safeNum"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Field",
        "module": "Ideas.Common.Algebra.Field",
        "name": "safeNum",
        "normalized": "SafeNum a-\u003eEither String a",
        "package": "ideas",
        "partial": "Num",
        "signature": "SafeNum a-\u003eEither String a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Field.html#v:sum",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Field",
        "fct-package": "ideas",
        "fct-signature": "[a] -\u003e a",
        "fct-source": "src/Ideas-Common-Algebra-Field.html#sum",
        "fct-type": "method",
        "title": "sum"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Field",
        "module": "Ideas.Common.Algebra.Field",
        "name": "sum",
        "normalized": "[a]-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "[a]-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Field.html#v:timesInverse",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Field",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e a",
        "fct-source": "src/Ideas-Common-Algebra-Field.html#timesInverse",
        "fct-type": "method",
        "title": "timesInverse"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Field",
        "module": "Ideas.Common.Algebra.Field",
        "name": "timesInverse",
        "normalized": "a-\u003ea",
        "package": "ideas",
        "partial": "Inverse",
        "signature": "a-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Field.html#v:zero",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Field",
        "fct-package": "ideas",
        "fct-signature": "a",
        "fct-source": "src/Ideas-Common-Algebra-Field.html#zero",
        "fct-type": "method",
        "title": "zero"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Field",
        "module": "Ideas.Common.Algebra.Field",
        "name": "zero",
        "normalized": "",
        "package": "ideas",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-FieldLaws.html#",
      "description": {
        "fct-module": "Ideas.Common.Algebra.FieldLaws",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Common-Algebra-FieldLaws.html",
        "fct-type": "module",
        "title": "FieldLaws"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra FieldLaws",
        "module": "Ideas.Common.Algebra.FieldLaws",
        "name": "FieldLaws",
        "normalized": "",
        "package": "ideas",
        "partial": "Field Laws",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-FieldLaws.html#v:commutativeRingLaws",
      "description": {
        "fct-module": "Ideas.Common.Algebra.FieldLaws",
        "fct-package": "ideas",
        "fct-signature": "[Law a]",
        "fct-source": "src/Ideas-Common-Algebra-FieldLaws.html#commutativeRingLaws",
        "fct-type": "function",
        "title": "commutativeRingLaws"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra FieldLaws",
        "module": "Ideas.Common.Algebra.FieldLaws",
        "name": "commutativeRingLaws",
        "normalized": "[Law a]",
        "package": "ideas",
        "partial": "Ring Laws",
        "signature": "[Law a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-FieldLaws.html#v:distributiveLaws",
      "description": {
        "fct-module": "Ideas.Common.Algebra.FieldLaws",
        "fct-package": "ideas",
        "fct-signature": "[Law a]",
        "fct-source": "src/Ideas-Common-Algebra-FieldLaws.html#distributiveLaws",
        "fct-type": "function",
        "title": "distributiveLaws"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra FieldLaws",
        "module": "Ideas.Common.Algebra.FieldLaws",
        "name": "distributiveLaws",
        "normalized": "[Law a]",
        "package": "ideas",
        "partial": "Laws",
        "signature": "[Law a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-FieldLaws.html#v:distributiveSubtractionLaws",
      "description": {
        "fct-module": "Ideas.Common.Algebra.FieldLaws",
        "fct-package": "ideas",
        "fct-signature": "[Law a]",
        "fct-source": "src/Ideas-Common-Algebra-FieldLaws.html#distributiveSubtractionLaws",
        "fct-type": "function",
        "title": "distributiveSubtractionLaws"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra FieldLaws",
        "module": "Ideas.Common.Algebra.FieldLaws",
        "name": "distributiveSubtractionLaws",
        "normalized": "[Law a]",
        "package": "ideas",
        "partial": "Subtraction Laws",
        "signature": "[Law a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-FieldLaws.html#v:exchangeInverses",
      "description": {
        "fct-module": "Ideas.Common.Algebra.FieldLaws",
        "fct-package": "ideas",
        "fct-signature": "Law a",
        "fct-source": "src/Ideas-Common-Algebra-FieldLaws.html#exchangeInverses",
        "fct-type": "function",
        "title": "exchangeInverses"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra FieldLaws",
        "module": "Ideas.Common.Algebra.FieldLaws",
        "name": "exchangeInverses",
        "normalized": "",
        "package": "ideas",
        "partial": "Inverses",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-FieldLaws.html#v:fieldLaws",
      "description": {
        "fct-module": "Ideas.Common.Algebra.FieldLaws",
        "fct-package": "ideas",
        "fct-signature": "[Law a]",
        "fct-source": "src/Ideas-Common-Algebra-FieldLaws.html#fieldLaws",
        "fct-type": "function",
        "title": "fieldLaws"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra FieldLaws",
        "module": "Ideas.Common.Algebra.FieldLaws",
        "name": "fieldLaws",
        "normalized": "[Law a]",
        "package": "ideas",
        "partial": "Laws",
        "signature": "[Law a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-FieldLaws.html#v:fromAdditiveLaw",
      "description": {
        "fct-module": "Ideas.Common.Algebra.FieldLaws",
        "fct-package": "ideas",
        "fct-signature": "Law (Additive a) -\u003e Law a",
        "fct-source": "src/Ideas-Common-Algebra-FieldLaws.html#fromAdditiveLaw",
        "fct-type": "function",
        "title": "fromAdditiveLaw"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra FieldLaws",
        "module": "Ideas.Common.Algebra.FieldLaws",
        "name": "fromAdditiveLaw",
        "normalized": "Law(Additive a)-\u003eLaw a",
        "package": "ideas",
        "partial": "Additive Law",
        "signature": "Law(Additive a)-\u003eLaw a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-FieldLaws.html#v:fromMultiplicativeLaw",
      "description": {
        "fct-module": "Ideas.Common.Algebra.FieldLaws",
        "fct-package": "ideas",
        "fct-signature": "Law (Multiplicative a) -\u003e Law a",
        "fct-source": "src/Ideas-Common-Algebra-FieldLaws.html#fromMultiplicativeLaw",
        "fct-type": "function",
        "title": "fromMultiplicativeLaw"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra FieldLaws",
        "module": "Ideas.Common.Algebra.FieldLaws",
        "name": "fromMultiplicativeLaw",
        "normalized": "Law(Multiplicative a)-\u003eLaw a",
        "package": "ideas",
        "partial": "Multiplicative Law",
        "signature": "Law(Multiplicative a)-\u003eLaw a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-FieldLaws.html#v:leftDistributive",
      "description": {
        "fct-module": "Ideas.Common.Algebra.FieldLaws",
        "fct-package": "ideas",
        "fct-signature": "Law a",
        "fct-source": "src/Ideas-Common-Algebra-FieldLaws.html#leftDistributive",
        "fct-type": "function",
        "title": "leftDistributive"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra FieldLaws",
        "module": "Ideas.Common.Algebra.FieldLaws",
        "name": "leftDistributive",
        "normalized": "",
        "package": "ideas",
        "partial": "Distributive",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-FieldLaws.html#v:leftNegateTimes",
      "description": {
        "fct-module": "Ideas.Common.Algebra.FieldLaws",
        "fct-package": "ideas",
        "fct-signature": "Law a",
        "fct-source": "src/Ideas-Common-Algebra-FieldLaws.html#leftNegateTimes",
        "fct-type": "function",
        "title": "leftNegateTimes"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra FieldLaws",
        "module": "Ideas.Common.Algebra.FieldLaws",
        "name": "leftNegateTimes",
        "normalized": "",
        "package": "ideas",
        "partial": "Negate Times",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-FieldLaws.html#v:negateTimesLaws",
      "description": {
        "fct-module": "Ideas.Common.Algebra.FieldLaws",
        "fct-package": "ideas",
        "fct-signature": "[Law a]",
        "fct-source": "src/Ideas-Common-Algebra-FieldLaws.html#negateTimesLaws",
        "fct-type": "function",
        "title": "negateTimesLaws"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra FieldLaws",
        "module": "Ideas.Common.Algebra.FieldLaws",
        "name": "negateTimesLaws",
        "normalized": "[Law a]",
        "package": "ideas",
        "partial": "Times Laws",
        "signature": "[Law a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-FieldLaws.html#v:propsField",
      "description": {
        "fct-module": "Ideas.Common.Algebra.FieldLaws",
        "fct-package": "ideas",
        "fct-signature": "[Property]",
        "fct-source": "src/Ideas-Common-Algebra-FieldLaws.html#propsField",
        "fct-type": "function",
        "title": "propsField"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra FieldLaws",
        "module": "Ideas.Common.Algebra.FieldLaws",
        "name": "propsField",
        "normalized": "[Property]",
        "package": "ideas",
        "partial": "Field",
        "signature": "[Property]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-FieldLaws.html#v:rightDistributive",
      "description": {
        "fct-module": "Ideas.Common.Algebra.FieldLaws",
        "fct-package": "ideas",
        "fct-signature": "Law a",
        "fct-source": "src/Ideas-Common-Algebra-FieldLaws.html#rightDistributive",
        "fct-type": "function",
        "title": "rightDistributive"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra FieldLaws",
        "module": "Ideas.Common.Algebra.FieldLaws",
        "name": "rightDistributive",
        "normalized": "",
        "package": "ideas",
        "partial": "Distributive",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-FieldLaws.html#v:rightNegateTimes",
      "description": {
        "fct-module": "Ideas.Common.Algebra.FieldLaws",
        "fct-package": "ideas",
        "fct-signature": "Law a",
        "fct-source": "src/Ideas-Common-Algebra-FieldLaws.html#rightNegateTimes",
        "fct-type": "function",
        "title": "rightNegateTimes"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra FieldLaws",
        "module": "Ideas.Common.Algebra.FieldLaws",
        "name": "rightNegateTimes",
        "normalized": "",
        "package": "ideas",
        "partial": "Negate Times",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-FieldLaws.html#v:ringLaws",
      "description": {
        "fct-module": "Ideas.Common.Algebra.FieldLaws",
        "fct-package": "ideas",
        "fct-signature": "[Law a]",
        "fct-source": "src/Ideas-Common-Algebra-FieldLaws.html#ringLaws",
        "fct-type": "function",
        "title": "ringLaws"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra FieldLaws",
        "module": "Ideas.Common.Algebra.FieldLaws",
        "name": "ringLaws",
        "normalized": "[Law a]",
        "package": "ideas",
        "partial": "Laws",
        "signature": "[Law a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-FieldLaws.html#v:semiRingLaws",
      "description": {
        "fct-module": "Ideas.Common.Algebra.FieldLaws",
        "fct-package": "ideas",
        "fct-signature": "[Law a]",
        "fct-source": "src/Ideas-Common-Algebra-FieldLaws.html#semiRingLaws",
        "fct-type": "function",
        "title": "semiRingLaws"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra FieldLaws",
        "module": "Ideas.Common.Algebra.FieldLaws",
        "name": "semiRingLaws",
        "normalized": "[Law a]",
        "package": "ideas",
        "partial": "Ring Laws",
        "signature": "[Law a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Group.html#",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Group",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Common-Algebra-Group.html",
        "fct-type": "module",
        "title": "Group"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Group",
        "module": "Ideas.Common.Algebra.Group",
        "name": "Group",
        "normalized": "",
        "package": "ideas",
        "partial": "Group",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Group.html#t:CoGroup",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Group",
        "fct-package": "ideas",
        "fct-signature": "class",
        "fct-source": "src/Ideas-Common-Algebra-Group.html#CoGroup",
        "fct-type": "class",
        "title": "CoGroup"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Group",
        "module": "Ideas.Common.Algebra.Group",
        "name": "CoGroup",
        "normalized": "",
        "package": "ideas",
        "partial": "Co Group",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Group.html#t:CoMonoid",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Group",
        "fct-package": "ideas",
        "fct-signature": "class",
        "fct-source": "src/Ideas-Common-Algebra-Group.html#CoMonoid",
        "fct-type": "class",
        "title": "CoMonoid"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Group",
        "module": "Ideas.Common.Algebra.Group",
        "name": "CoMonoid",
        "normalized": "",
        "package": "ideas",
        "partial": "Co Monoid",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Group.html#t:CoMonoidZero",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Group",
        "fct-package": "ideas",
        "fct-signature": "class",
        "fct-source": "src/Ideas-Common-Algebra-Group.html#CoMonoidZero",
        "fct-type": "class",
        "title": "CoMonoidZero"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Group",
        "module": "Ideas.Common.Algebra.Group",
        "name": "CoMonoidZero",
        "normalized": "",
        "package": "ideas",
        "partial": "Co Monoid Zero",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Group.html#t:Group",
      "description": {
        "fct-descr": "\u003cp\u003eMinimal complete definition: inverse or appendInverse\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Algebra.Group",
        "fct-package": "ideas",
        "fct-signature": "class",
        "fct-source": "src/Ideas-Common-Algebra-Group.html#Group",
        "fct-type": "class",
        "title": "Group"
      },
      "index": {
        "description": "Minimal complete definition inverse or appendInverse",
        "hierarchy": "Ideas Common Algebra Group",
        "module": "Ideas.Common.Algebra.Group",
        "name": "Group",
        "normalized": "",
        "package": "ideas",
        "partial": "Group",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Group.html#t:Monoid",
      "description": {
        "fct-descr": "\u003cp\u003eThe class of monoids (types with an associative binary operation that\n has an identity).  Instances should satisfy the following laws:\n\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cpre\u003emappend mempty x = x\u003c/pre\u003e\u003c/li\u003e\u003cli\u003e\u003cpre\u003emappend x mempty = x\u003c/pre\u003e\u003c/li\u003e\u003cli\u003e\u003cpre\u003emappend x (mappend y z) = mappend (mappend x y) z\u003c/pre\u003e\u003c/li\u003e\u003cli\u003e\u003cpre\u003emconcat = \u003ccode\u003e\u003ca\u003efoldr\u003c/a\u003e\u003c/code\u003e mappend mempty\u003c/pre\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eThe method names refer to the monoid of lists under concatenation,\n but there are many other instances.\n\u003c/p\u003e\u003cp\u003eMinimal complete definition: \u003ccode\u003e\u003ca\u003emempty\u003c/a\u003e\u003c/code\u003e and \u003ccode\u003e\u003ca\u003emappend\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e\u003cp\u003eSome types can be viewed as a monoid in more than one way,\n e.g. both addition and multiplication on numbers.\n In such cases we often define \u003ccode\u003enewtype\u003c/code\u003es and make those instances\n of \u003ccode\u003e\u003ca\u003eMonoid\u003c/a\u003e\u003c/code\u003e, e.g. \u003ccode\u003e\u003ca\u003eSum\u003c/a\u003e\u003c/code\u003e and \u003ccode\u003e\u003ca\u003eProduct\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Algebra.Group",
        "fct-package": "ideas",
        "fct-signature": "class",
        "fct-type": "class",
        "title": "Monoid"
      },
      "index": {
        "description": "The class of monoids types with an associative binary operation that has an identity Instances should satisfy the following laws mappend mempty mappend mempty mappend mappend mappend mappend mconcat foldr mappend mempty The method names refer to the monoid of lists under concatenation but there are many other instances Minimal complete definition mempty and mappend Some types can be viewed as monoid in more than one way e.g both addition and multiplication on numbers In such cases we often define newtype and make those instances of Monoid e.g Sum and Product",
        "hierarchy": "Ideas Common Algebra Group",
        "module": "Ideas.Common.Algebra.Group",
        "name": "Monoid",
        "normalized": "",
        "package": "ideas",
        "partial": "Monoid",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Group.html#t:MonoidZero",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Group",
        "fct-package": "ideas",
        "fct-signature": "class",
        "fct-source": "src/Ideas-Common-Algebra-Group.html#MonoidZero",
        "fct-type": "class",
        "title": "MonoidZero"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Group",
        "module": "Ideas.Common.Algebra.Group",
        "name": "MonoidZero",
        "normalized": "",
        "package": "ideas",
        "partial": "Monoid Zero",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Group.html#t:WithZero",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Group",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Common-Algebra-Group.html#WithZero",
        "fct-type": "data",
        "title": "WithZero"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Group",
        "module": "Ideas.Common.Algebra.Group",
        "name": "WithZero",
        "normalized": "",
        "package": "ideas",
        "partial": "With Zero",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Group.html#v:-60--62-",
      "description": {
        "fct-descr": "\u003cp\u003eAn infix synonym for \u003ccode\u003e\u003ca\u003emappend\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Algebra.Group",
        "fct-package": "ideas",
        "fct-signature": "m -\u003e m -\u003e m",
        "fct-type": "function",
        "title": "(\u003c\u003e)"
      },
      "index": {
        "description": "An infix synonym for mappend",
        "hierarchy": "Ideas Common Algebra Group",
        "module": "Ideas.Common.Algebra.Group",
        "name": "(\u003c\u003e) \u003c\u003e",
        "normalized": "a-\u003ea-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "m-\u003em-\u003em"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Group.html#v:-60--62--45-",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Group",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e a -\u003e a",
        "fct-source": "src/Ideas-Common-Algebra-Group.html#%3C%3E-",
        "fct-type": "function",
        "title": "(\u003c\u003e-)"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Group",
        "module": "Ideas.Common.Algebra.Group",
        "name": "(\u003c\u003e-) \u003c\u003e-",
        "normalized": "a-\u003ea-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "a-\u003ea-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Group.html#v:appendInv",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Group",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e a -\u003e a",
        "fct-source": "src/Ideas-Common-Algebra-Group.html#appendInv",
        "fct-type": "method",
        "title": "appendInv"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Group",
        "module": "Ideas.Common.Algebra.Group",
        "name": "appendInv",
        "normalized": "a-\u003ea-\u003ea",
        "package": "ideas",
        "partial": "Inv",
        "signature": "a-\u003ea-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Group.html#v:associativeList",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Group",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e [a]",
        "fct-source": "src/Ideas-Common-Algebra-Group.html#associativeList",
        "fct-type": "function",
        "title": "associativeList"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Group",
        "module": "Ideas.Common.Algebra.Group",
        "name": "associativeList",
        "normalized": "a-\u003e[a]",
        "package": "ideas",
        "partial": "List",
        "signature": "a-\u003e[a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Group.html#v:fromWithZero",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Group",
        "fct-package": "ideas",
        "fct-signature": "WithZero a -\u003e Maybe a",
        "fct-source": "src/Ideas-Common-Algebra-Group.html#fromWithZero",
        "fct-type": "function",
        "title": "fromWithZero"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Group",
        "module": "Ideas.Common.Algebra.Group",
        "name": "fromWithZero",
        "normalized": "WithZero a-\u003eMaybe a",
        "package": "ideas",
        "partial": "With Zero",
        "signature": "WithZero a-\u003eMaybe a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Group.html#v:inverse",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Group",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e a",
        "fct-source": "src/Ideas-Common-Algebra-Group.html#inverse",
        "fct-type": "method",
        "title": "inverse"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Group",
        "module": "Ideas.Common.Algebra.Group",
        "name": "inverse",
        "normalized": "a-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "a-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Group.html#v:isAppend",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Group",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e Maybe (a, a)",
        "fct-source": "src/Ideas-Common-Algebra-Group.html#isAppend",
        "fct-type": "method",
        "title": "isAppend"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Group",
        "module": "Ideas.Common.Algebra.Group",
        "name": "isAppend",
        "normalized": "a-\u003eMaybe(a,a)",
        "package": "ideas",
        "partial": "Append",
        "signature": "a-\u003eMaybe(a,a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Group.html#v:isAppendInv",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Group",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e Maybe (a, a)",
        "fct-source": "src/Ideas-Common-Algebra-Group.html#isAppendInv",
        "fct-type": "method",
        "title": "isAppendInv"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Group",
        "module": "Ideas.Common.Algebra.Group",
        "name": "isAppendInv",
        "normalized": "a-\u003eMaybe(a,a)",
        "package": "ideas",
        "partial": "Append Inv",
        "signature": "a-\u003eMaybe(a,a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Group.html#v:isEmpty",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Group",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e Bool",
        "fct-source": "src/Ideas-Common-Algebra-Group.html#isEmpty",
        "fct-type": "method",
        "title": "isEmpty"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Group",
        "module": "Ideas.Common.Algebra.Group",
        "name": "isEmpty",
        "normalized": "a-\u003eBool",
        "package": "ideas",
        "partial": "Empty",
        "signature": "a-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Group.html#v:isInverse",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Group",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e Maybe a",
        "fct-source": "src/Ideas-Common-Algebra-Group.html#isInverse",
        "fct-type": "method",
        "title": "isInverse"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Group",
        "module": "Ideas.Common.Algebra.Group",
        "name": "isInverse",
        "normalized": "a-\u003eMaybe a",
        "package": "ideas",
        "partial": "Inverse",
        "signature": "a-\u003eMaybe a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Group.html#v:isMonoidZero",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Group",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e Bool",
        "fct-source": "src/Ideas-Common-Algebra-Group.html#isMonoidZero",
        "fct-type": "method",
        "title": "isMonoidZero"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Group",
        "module": "Ideas.Common.Algebra.Group",
        "name": "isMonoidZero",
        "normalized": "a-\u003eBool",
        "package": "ideas",
        "partial": "Monoid Zero",
        "signature": "a-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Group.html#v:mappend",
      "description": {
        "fct-descr": "\u003cp\u003eAn associative operation\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Algebra.Group",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e a -\u003e a",
        "fct-type": "method",
        "title": "mappend"
      },
      "index": {
        "description": "An associative operation",
        "hierarchy": "Ideas Common Algebra Group",
        "module": "Ideas.Common.Algebra.Group",
        "name": "mappend",
        "normalized": "a-\u003ea-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "a-\u003ea-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Group.html#v:mconcat",
      "description": {
        "fct-descr": "\u003cp\u003eFold a list using the monoid.\n For most types, the default definition for \u003ccode\u003e\u003ca\u003emconcat\u003c/a\u003e\u003c/code\u003e will be\n used, but the function is included in the class definition so\n that an optimized version can be provided for specific types.\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Algebra.Group",
        "fct-package": "ideas",
        "fct-signature": "[a] -\u003e a",
        "fct-type": "method",
        "title": "mconcat"
      },
      "index": {
        "description": "Fold list using the monoid For most types the default definition for mconcat will be used but the function is included in the class definition so that an optimized version can be provided for specific types",
        "hierarchy": "Ideas Common Algebra Group",
        "module": "Ideas.Common.Algebra.Group",
        "name": "mconcat",
        "normalized": "[a]-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "[a]-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Group.html#v:mempty",
      "description": {
        "fct-descr": "\u003cp\u003eIdentity of \u003ccode\u003e\u003ca\u003emappend\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Algebra.Group",
        "fct-package": "ideas",
        "fct-signature": "a",
        "fct-type": "method",
        "title": "mempty"
      },
      "index": {
        "description": "Identity of mappend",
        "hierarchy": "Ideas Common Algebra Group",
        "module": "Ideas.Common.Algebra.Group",
        "name": "mempty",
        "normalized": "",
        "package": "ideas",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Group.html#v:mzero",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Group",
        "fct-package": "ideas",
        "fct-signature": "a",
        "fct-source": "src/Ideas-Common-Algebra-Group.html#mzero",
        "fct-type": "method",
        "title": "mzero"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Group",
        "module": "Ideas.Common.Algebra.Group",
        "name": "mzero",
        "normalized": "",
        "package": "ideas",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-GroupLaws.html#",
      "description": {
        "fct-module": "Ideas.Common.Algebra.GroupLaws",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Common-Algebra-GroupLaws.html",
        "fct-type": "module",
        "title": "GroupLaws"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra GroupLaws",
        "module": "Ideas.Common.Algebra.GroupLaws",
        "name": "GroupLaws",
        "normalized": "",
        "package": "ideas",
        "partial": "Group Laws",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-GroupLaws.html#v:abelianGroupLaws",
      "description": {
        "fct-module": "Ideas.Common.Algebra.GroupLaws",
        "fct-package": "ideas",
        "fct-signature": "[Law a]",
        "fct-source": "src/Ideas-Common-Algebra-GroupLaws.html#abelianGroupLaws",
        "fct-type": "function",
        "title": "abelianGroupLaws"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra GroupLaws",
        "module": "Ideas.Common.Algebra.GroupLaws",
        "name": "abelianGroupLaws",
        "normalized": "[Law a]",
        "package": "ideas",
        "partial": "Group Laws",
        "signature": "[Law a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-GroupLaws.html#v:appendInverseLaws",
      "description": {
        "fct-module": "Ideas.Common.Algebra.GroupLaws",
        "fct-package": "ideas",
        "fct-signature": "[Law a]",
        "fct-source": "src/Ideas-Common-Algebra-GroupLaws.html#appendInverseLaws",
        "fct-type": "function",
        "title": "appendInverseLaws"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra GroupLaws",
        "module": "Ideas.Common.Algebra.GroupLaws",
        "name": "appendInverseLaws",
        "normalized": "[Law a]",
        "package": "ideas",
        "partial": "Inverse Laws",
        "signature": "[Law a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-GroupLaws.html#v:associative",
      "description": {
        "fct-module": "Ideas.Common.Algebra.GroupLaws",
        "fct-package": "ideas",
        "fct-signature": "Law a",
        "fct-source": "src/Ideas-Common-Algebra-GroupLaws.html#associative",
        "fct-type": "function",
        "title": "associative"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra GroupLaws",
        "module": "Ideas.Common.Algebra.GroupLaws",
        "name": "associative",
        "normalized": "",
        "package": "ideas",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-GroupLaws.html#v:associativeFor",
      "description": {
        "fct-module": "Ideas.Common.Algebra.GroupLaws",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e a -\u003e a) -\u003e Law a",
        "fct-source": "src/Ideas-Common-Algebra-GroupLaws.html#associativeFor",
        "fct-type": "function",
        "title": "associativeFor"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra GroupLaws",
        "module": "Ideas.Common.Algebra.GroupLaws",
        "name": "associativeFor",
        "normalized": "(a-\u003ea-\u003ea)-\u003eLaw a",
        "package": "ideas",
        "partial": "For",
        "signature": "(a-\u003ea-\u003ea)-\u003eLaw a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-GroupLaws.html#v:commutative",
      "description": {
        "fct-module": "Ideas.Common.Algebra.GroupLaws",
        "fct-package": "ideas",
        "fct-signature": "Law a",
        "fct-source": "src/Ideas-Common-Algebra-GroupLaws.html#commutative",
        "fct-type": "function",
        "title": "commutative"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra GroupLaws",
        "module": "Ideas.Common.Algebra.GroupLaws",
        "name": "commutative",
        "normalized": "",
        "package": "ideas",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-GroupLaws.html#v:commutativeFor",
      "description": {
        "fct-module": "Ideas.Common.Algebra.GroupLaws",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e a -\u003e a) -\u003e Law a",
        "fct-source": "src/Ideas-Common-Algebra-GroupLaws.html#commutativeFor",
        "fct-type": "function",
        "title": "commutativeFor"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra GroupLaws",
        "module": "Ideas.Common.Algebra.GroupLaws",
        "name": "commutativeFor",
        "normalized": "(a-\u003ea-\u003ea)-\u003eLaw a",
        "package": "ideas",
        "partial": "For",
        "signature": "(a-\u003ea-\u003ea)-\u003eLaw a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-GroupLaws.html#v:commutativeMonoidLaws",
      "description": {
        "fct-module": "Ideas.Common.Algebra.GroupLaws",
        "fct-package": "ideas",
        "fct-signature": "[Law a]",
        "fct-source": "src/Ideas-Common-Algebra-GroupLaws.html#commutativeMonoidLaws",
        "fct-type": "function",
        "title": "commutativeMonoidLaws"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra GroupLaws",
        "module": "Ideas.Common.Algebra.GroupLaws",
        "name": "commutativeMonoidLaws",
        "normalized": "[Law a]",
        "package": "ideas",
        "partial": "Monoid Laws",
        "signature": "[Law a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-GroupLaws.html#v:doubleInverse",
      "description": {
        "fct-module": "Ideas.Common.Algebra.GroupLaws",
        "fct-package": "ideas",
        "fct-signature": "Law a",
        "fct-source": "src/Ideas-Common-Algebra-GroupLaws.html#doubleInverse",
        "fct-type": "function",
        "title": "doubleInverse"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra GroupLaws",
        "module": "Ideas.Common.Algebra.GroupLaws",
        "name": "doubleInverse",
        "normalized": "",
        "package": "ideas",
        "partial": "Inverse",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-GroupLaws.html#v:groupLaws",
      "description": {
        "fct-module": "Ideas.Common.Algebra.GroupLaws",
        "fct-package": "ideas",
        "fct-signature": "[Law a]",
        "fct-source": "src/Ideas-Common-Algebra-GroupLaws.html#groupLaws",
        "fct-type": "function",
        "title": "groupLaws"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra GroupLaws",
        "module": "Ideas.Common.Algebra.GroupLaws",
        "name": "groupLaws",
        "normalized": "[Law a]",
        "package": "ideas",
        "partial": "Laws",
        "signature": "[Law a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-GroupLaws.html#v:idempotent",
      "description": {
        "fct-descr": "\u003cp\u003eNot all monoids are idempotent (see: idempotentFor)\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Algebra.GroupLaws",
        "fct-package": "ideas",
        "fct-signature": "Law a",
        "fct-source": "src/Ideas-Common-Algebra-GroupLaws.html#idempotent",
        "fct-type": "function",
        "title": "idempotent"
      },
      "index": {
        "description": "Not all monoids are idempotent see idempotentFor",
        "hierarchy": "Ideas Common Algebra GroupLaws",
        "module": "Ideas.Common.Algebra.GroupLaws",
        "name": "idempotent",
        "normalized": "",
        "package": "ideas",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-GroupLaws.html#v:idempotentFor",
      "description": {
        "fct-module": "Ideas.Common.Algebra.GroupLaws",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e a -\u003e a) -\u003e Law a",
        "fct-source": "src/Ideas-Common-Algebra-GroupLaws.html#idempotentFor",
        "fct-type": "function",
        "title": "idempotentFor"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra GroupLaws",
        "module": "Ideas.Common.Algebra.GroupLaws",
        "name": "idempotentFor",
        "normalized": "(a-\u003ea-\u003ea)-\u003eLaw a",
        "package": "ideas",
        "partial": "For",
        "signature": "(a-\u003ea-\u003ea)-\u003eLaw a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-GroupLaws.html#v:identityLaws",
      "description": {
        "fct-module": "Ideas.Common.Algebra.GroupLaws",
        "fct-package": "ideas",
        "fct-signature": "[Law a]",
        "fct-source": "src/Ideas-Common-Algebra-GroupLaws.html#identityLaws",
        "fct-type": "function",
        "title": "identityLaws"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra GroupLaws",
        "module": "Ideas.Common.Algebra.GroupLaws",
        "name": "identityLaws",
        "normalized": "[Law a]",
        "package": "ideas",
        "partial": "Laws",
        "signature": "[Law a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-GroupLaws.html#v:inverseDistr",
      "description": {
        "fct-module": "Ideas.Common.Algebra.GroupLaws",
        "fct-package": "ideas",
        "fct-signature": "Law a",
        "fct-source": "src/Ideas-Common-Algebra-GroupLaws.html#inverseDistr",
        "fct-type": "function",
        "title": "inverseDistr"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra GroupLaws",
        "module": "Ideas.Common.Algebra.GroupLaws",
        "name": "inverseDistr",
        "normalized": "",
        "package": "ideas",
        "partial": "Distr",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-GroupLaws.html#v:inverseDistrFlipped",
      "description": {
        "fct-module": "Ideas.Common.Algebra.GroupLaws",
        "fct-package": "ideas",
        "fct-signature": "Law a",
        "fct-source": "src/Ideas-Common-Algebra-GroupLaws.html#inverseDistrFlipped",
        "fct-type": "function",
        "title": "inverseDistrFlipped"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra GroupLaws",
        "module": "Ideas.Common.Algebra.GroupLaws",
        "name": "inverseDistrFlipped",
        "normalized": "",
        "package": "ideas",
        "partial": "Distr Flipped",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-GroupLaws.html#v:inverseIdentity",
      "description": {
        "fct-module": "Ideas.Common.Algebra.GroupLaws",
        "fct-package": "ideas",
        "fct-signature": "Law a",
        "fct-source": "src/Ideas-Common-Algebra-GroupLaws.html#inverseIdentity",
        "fct-type": "function",
        "title": "inverseIdentity"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra GroupLaws",
        "module": "Ideas.Common.Algebra.GroupLaws",
        "name": "inverseIdentity",
        "normalized": "",
        "package": "ideas",
        "partial": "Identity",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-GroupLaws.html#v:inverseLaws",
      "description": {
        "fct-module": "Ideas.Common.Algebra.GroupLaws",
        "fct-package": "ideas",
        "fct-signature": "[Law a]",
        "fct-source": "src/Ideas-Common-Algebra-GroupLaws.html#inverseLaws",
        "fct-type": "function",
        "title": "inverseLaws"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra GroupLaws",
        "module": "Ideas.Common.Algebra.GroupLaws",
        "name": "inverseLaws",
        "normalized": "[Law a]",
        "package": "ideas",
        "partial": "Laws",
        "signature": "[Law a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-GroupLaws.html#v:leftDistributiveFor",
      "description": {
        "fct-module": "Ideas.Common.Algebra.GroupLaws",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e a -\u003e a) -\u003e (a -\u003e a -\u003e a) -\u003e Law a",
        "fct-source": "src/Ideas-Common-Algebra-GroupLaws.html#leftDistributiveFor",
        "fct-type": "function",
        "title": "leftDistributiveFor"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra GroupLaws",
        "module": "Ideas.Common.Algebra.GroupLaws",
        "name": "leftDistributiveFor",
        "normalized": "(a-\u003ea-\u003ea)-\u003e(a-\u003ea-\u003ea)-\u003eLaw a",
        "package": "ideas",
        "partial": "Distributive For",
        "signature": "(a-\u003ea-\u003ea)-\u003e(a-\u003ea-\u003ea)-\u003eLaw a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-GroupLaws.html#v:leftIdentity",
      "description": {
        "fct-module": "Ideas.Common.Algebra.GroupLaws",
        "fct-package": "ideas",
        "fct-signature": "Law a",
        "fct-source": "src/Ideas-Common-Algebra-GroupLaws.html#leftIdentity",
        "fct-type": "function",
        "title": "leftIdentity"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra GroupLaws",
        "module": "Ideas.Common.Algebra.GroupLaws",
        "name": "leftIdentity",
        "normalized": "",
        "package": "ideas",
        "partial": "Identity",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-GroupLaws.html#v:leftInverse",
      "description": {
        "fct-module": "Ideas.Common.Algebra.GroupLaws",
        "fct-package": "ideas",
        "fct-signature": "Law a",
        "fct-source": "src/Ideas-Common-Algebra-GroupLaws.html#leftInverse",
        "fct-type": "function",
        "title": "leftInverse"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra GroupLaws",
        "module": "Ideas.Common.Algebra.GroupLaws",
        "name": "leftInverse",
        "normalized": "",
        "package": "ideas",
        "partial": "Inverse",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-GroupLaws.html#v:leftZero",
      "description": {
        "fct-module": "Ideas.Common.Algebra.GroupLaws",
        "fct-package": "ideas",
        "fct-signature": "Law a",
        "fct-source": "src/Ideas-Common-Algebra-GroupLaws.html#leftZero",
        "fct-type": "function",
        "title": "leftZero"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra GroupLaws",
        "module": "Ideas.Common.Algebra.GroupLaws",
        "name": "leftZero",
        "normalized": "",
        "package": "ideas",
        "partial": "Zero",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-GroupLaws.html#v:monoidLaws",
      "description": {
        "fct-module": "Ideas.Common.Algebra.GroupLaws",
        "fct-package": "ideas",
        "fct-signature": "[Law a]",
        "fct-source": "src/Ideas-Common-Algebra-GroupLaws.html#monoidLaws",
        "fct-type": "function",
        "title": "monoidLaws"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra GroupLaws",
        "module": "Ideas.Common.Algebra.GroupLaws",
        "name": "monoidLaws",
        "normalized": "[Law a]",
        "package": "ideas",
        "partial": "Laws",
        "signature": "[Law a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-GroupLaws.html#v:monoidZeroLaws",
      "description": {
        "fct-module": "Ideas.Common.Algebra.GroupLaws",
        "fct-package": "ideas",
        "fct-signature": "[Law a]",
        "fct-source": "src/Ideas-Common-Algebra-GroupLaws.html#monoidZeroLaws",
        "fct-type": "function",
        "title": "monoidZeroLaws"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra GroupLaws",
        "module": "Ideas.Common.Algebra.GroupLaws",
        "name": "monoidZeroLaws",
        "normalized": "[Law a]",
        "package": "ideas",
        "partial": "Zero Laws",
        "signature": "[Law a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-GroupLaws.html#v:rightDistributiveFor",
      "description": {
        "fct-module": "Ideas.Common.Algebra.GroupLaws",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e a -\u003e a) -\u003e (a -\u003e a -\u003e a) -\u003e Law a",
        "fct-source": "src/Ideas-Common-Algebra-GroupLaws.html#rightDistributiveFor",
        "fct-type": "function",
        "title": "rightDistributiveFor"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra GroupLaws",
        "module": "Ideas.Common.Algebra.GroupLaws",
        "name": "rightDistributiveFor",
        "normalized": "(a-\u003ea-\u003ea)-\u003e(a-\u003ea-\u003ea)-\u003eLaw a",
        "package": "ideas",
        "partial": "Distributive For",
        "signature": "(a-\u003ea-\u003ea)-\u003e(a-\u003ea-\u003ea)-\u003eLaw a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-GroupLaws.html#v:rightIdentity",
      "description": {
        "fct-module": "Ideas.Common.Algebra.GroupLaws",
        "fct-package": "ideas",
        "fct-signature": "Law a",
        "fct-source": "src/Ideas-Common-Algebra-GroupLaws.html#rightIdentity",
        "fct-type": "function",
        "title": "rightIdentity"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra GroupLaws",
        "module": "Ideas.Common.Algebra.GroupLaws",
        "name": "rightIdentity",
        "normalized": "",
        "package": "ideas",
        "partial": "Identity",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-GroupLaws.html#v:rightInverse",
      "description": {
        "fct-module": "Ideas.Common.Algebra.GroupLaws",
        "fct-package": "ideas",
        "fct-signature": "Law a",
        "fct-source": "src/Ideas-Common-Algebra-GroupLaws.html#rightInverse",
        "fct-type": "function",
        "title": "rightInverse"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra GroupLaws",
        "module": "Ideas.Common.Algebra.GroupLaws",
        "name": "rightInverse",
        "normalized": "",
        "package": "ideas",
        "partial": "Inverse",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-GroupLaws.html#v:rightZero",
      "description": {
        "fct-module": "Ideas.Common.Algebra.GroupLaws",
        "fct-package": "ideas",
        "fct-signature": "Law a",
        "fct-source": "src/Ideas-Common-Algebra-GroupLaws.html#rightZero",
        "fct-type": "function",
        "title": "rightZero"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra GroupLaws",
        "module": "Ideas.Common.Algebra.GroupLaws",
        "name": "rightZero",
        "normalized": "",
        "package": "ideas",
        "partial": "Zero",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-GroupLaws.html#v:zeroLaws",
      "description": {
        "fct-module": "Ideas.Common.Algebra.GroupLaws",
        "fct-package": "ideas",
        "fct-signature": "[Law a]",
        "fct-source": "src/Ideas-Common-Algebra-GroupLaws.html#zeroLaws",
        "fct-type": "function",
        "title": "zeroLaws"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra GroupLaws",
        "module": "Ideas.Common.Algebra.GroupLaws",
        "name": "zeroLaws",
        "normalized": "[Law a]",
        "package": "ideas",
        "partial": "Laws",
        "signature": "[Law a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Law.html#",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Law",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Common-Algebra-Law.html",
        "fct-type": "module",
        "title": "Law"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Law",
        "module": "Ideas.Common.Algebra.Law",
        "name": "Law",
        "normalized": "",
        "package": "ideas",
        "partial": "Law",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Law.html#t:Law",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Law",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Common-Algebra-Law.html#Law",
        "fct-type": "data",
        "title": "Law"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Law",
        "module": "Ideas.Common.Algebra.Law",
        "name": "Law",
        "normalized": "",
        "package": "ideas",
        "partial": "Law",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Law.html#t:LawSpec",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Law",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Common-Algebra-Law.html#LawSpec",
        "fct-type": "data",
        "title": "LawSpec"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Law",
        "module": "Ideas.Common.Algebra.Law",
        "name": "LawSpec",
        "normalized": "",
        "package": "ideas",
        "partial": "Law Spec",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Law.html#v::-61--61-:",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Law",
        "fct-package": "ideas",
        "fct-signature": "a :==: a",
        "fct-source": "src/Ideas-Common-Algebra-Law.html#LawSpec",
        "fct-type": "function",
        "title": ":==:"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Law",
        "module": "Ideas.Common.Algebra.Law",
        "name": ":==:",
        "normalized": "",
        "package": "ideas",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Law.html#v:law",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Law",
        "fct-package": "ideas",
        "fct-signature": "String -\u003e l -\u003e Law a",
        "fct-source": "src/Ideas-Common-Algebra-Law.html#law",
        "fct-type": "function",
        "title": "law"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Law",
        "module": "Ideas.Common.Algebra.Law",
        "name": "law",
        "normalized": "String-\u003ea-\u003eLaw b",
        "package": "ideas",
        "partial": "",
        "signature": "String-\u003el-\u003eLaw a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Law.html#v:mapLaw",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Law",
        "fct-package": "ideas",
        "fct-signature": "(b -\u003e a) -\u003e (a -\u003e b) -\u003e Law a -\u003e Law b",
        "fct-source": "src/Ideas-Common-Algebra-Law.html#mapLaw",
        "fct-type": "function",
        "title": "mapLaw"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Law",
        "module": "Ideas.Common.Algebra.Law",
        "name": "mapLaw",
        "normalized": "(a-\u003eb)-\u003e(b-\u003ea)-\u003eLaw b-\u003eLaw a",
        "package": "ideas",
        "partial": "Law",
        "signature": "(b-\u003ea)-\u003e(a-\u003eb)-\u003eLaw a-\u003eLaw b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Law.html#v:propertyLaw",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Law",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e a -\u003e b) -\u003e Law a -\u003e Property",
        "fct-source": "src/Ideas-Common-Algebra-Law.html#propertyLaw",
        "fct-type": "function",
        "title": "propertyLaw"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Law",
        "module": "Ideas.Common.Algebra.Law",
        "name": "propertyLaw",
        "normalized": "(a-\u003ea-\u003eb)-\u003eLaw a-\u003eProperty",
        "package": "ideas",
        "partial": "Law",
        "signature": "(a-\u003ea-\u003eb)-\u003eLaw a-\u003eProperty"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-Law.html#v:rewriteLaw",
      "description": {
        "fct-module": "Ideas.Common.Algebra.Law",
        "fct-package": "ideas",
        "fct-signature": "Law a -\u003e RewriteRule a",
        "fct-source": "src/Ideas-Common-Algebra-Law.html#rewriteLaw",
        "fct-type": "function",
        "title": "rewriteLaw"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra Law",
        "module": "Ideas.Common.Algebra.Law",
        "name": "rewriteLaw",
        "normalized": "Law a-\u003eRewriteRule a",
        "package": "ideas",
        "partial": "Law",
        "signature": "Law a-\u003eRewriteRule a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-SmartGroup.html#",
      "description": {
        "fct-module": "Ideas.Common.Algebra.SmartGroup",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Common-Algebra-SmartGroup.html",
        "fct-type": "module",
        "title": "SmartGroup"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra SmartGroup",
        "module": "Ideas.Common.Algebra.SmartGroup",
        "name": "SmartGroup",
        "normalized": "",
        "package": "ideas",
        "partial": "Smart Group",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-SmartGroup.html#t:Smart",
      "description": {
        "fct-module": "Ideas.Common.Algebra.SmartGroup",
        "fct-package": "ideas",
        "fct-signature": "newtype",
        "fct-source": "src/Ideas-Common-Algebra-SmartGroup.html#Smart",
        "fct-type": "newtype",
        "title": "Smart"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra SmartGroup",
        "module": "Ideas.Common.Algebra.SmartGroup",
        "name": "Smart",
        "normalized": "",
        "package": "ideas",
        "partial": "Smart",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-SmartGroup.html#t:SmartField",
      "description": {
        "fct-module": "Ideas.Common.Algebra.SmartGroup",
        "fct-package": "ideas",
        "fct-signature": "newtype",
        "fct-source": "src/Ideas-Common-Algebra-SmartGroup.html#SmartField",
        "fct-type": "newtype",
        "title": "SmartField"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra SmartGroup",
        "module": "Ideas.Common.Algebra.SmartGroup",
        "name": "SmartField",
        "normalized": "",
        "package": "ideas",
        "partial": "Smart Field",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-SmartGroup.html#t:SmartGroup",
      "description": {
        "fct-module": "Ideas.Common.Algebra.SmartGroup",
        "fct-package": "ideas",
        "fct-signature": "newtype",
        "fct-source": "src/Ideas-Common-Algebra-SmartGroup.html#SmartGroup",
        "fct-type": "newtype",
        "title": "SmartGroup"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra SmartGroup",
        "module": "Ideas.Common.Algebra.SmartGroup",
        "name": "SmartGroup",
        "normalized": "",
        "package": "ideas",
        "partial": "Smart Group",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-SmartGroup.html#t:SmartZero",
      "description": {
        "fct-module": "Ideas.Common.Algebra.SmartGroup",
        "fct-package": "ideas",
        "fct-signature": "newtype",
        "fct-source": "src/Ideas-Common-Algebra-SmartGroup.html#SmartZero",
        "fct-type": "newtype",
        "title": "SmartZero"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra SmartGroup",
        "module": "Ideas.Common.Algebra.SmartGroup",
        "name": "SmartZero",
        "normalized": "",
        "package": "ideas",
        "partial": "Smart Zero",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-SmartGroup.html#v:.-124--124-.",
      "description": {
        "fct-module": "Ideas.Common.Algebra.SmartGroup",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e a -\u003e a",
        "fct-source": "src/Ideas-Common-Algebra-SmartGroup.html#.%7C%7C.",
        "fct-type": "function",
        "title": "(.||.)"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra SmartGroup",
        "module": "Ideas.Common.Algebra.SmartGroup",
        "name": "(.||.) .||.",
        "normalized": "a-\u003ea-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "a-\u003ea-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-SmartGroup.html#v:.-38--38-.",
      "description": {
        "fct-module": "Ideas.Common.Algebra.SmartGroup",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e a -\u003e a",
        "fct-source": "src/Ideas-Common-Algebra-SmartGroup.html#.%26%26.",
        "fct-type": "function",
        "title": "(.&&.)"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra SmartGroup",
        "module": "Ideas.Common.Algebra.SmartGroup",
        "name": "(.&&.) .&&.",
        "normalized": "a-\u003ea-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "a-\u003ea-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-SmartGroup.html#v:.-42-.",
      "description": {
        "fct-module": "Ideas.Common.Algebra.SmartGroup",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e a -\u003e a",
        "fct-source": "src/Ideas-Common-Algebra-SmartGroup.html#.%2A.",
        "fct-type": "function",
        "title": "(.*.)"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra SmartGroup",
        "module": "Ideas.Common.Algebra.SmartGroup",
        "name": "(.*.) .*.",
        "normalized": "a-\u003ea-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "a-\u003ea-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-SmartGroup.html#v:.-43-.",
      "description": {
        "fct-module": "Ideas.Common.Algebra.SmartGroup",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e a -\u003e a",
        "fct-source": "src/Ideas-Common-Algebra-SmartGroup.html#.%2B.",
        "fct-type": "function",
        "title": "(.+.)"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra SmartGroup",
        "module": "Ideas.Common.Algebra.SmartGroup",
        "name": "(.+.) .+.",
        "normalized": "a-\u003ea-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "a-\u003ea-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-SmartGroup.html#v:.-45-.",
      "description": {
        "fct-module": "Ideas.Common.Algebra.SmartGroup",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e a -\u003e a",
        "fct-source": "src/Ideas-Common-Algebra-SmartGroup.html#.-.",
        "fct-type": "function",
        "title": "(.-.)"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra SmartGroup",
        "module": "Ideas.Common.Algebra.SmartGroup",
        "name": "(.-.) .-.",
        "normalized": "a-\u003ea-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "a-\u003ea-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-SmartGroup.html#v:.-47-.",
      "description": {
        "fct-module": "Ideas.Common.Algebra.SmartGroup",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e a -\u003e a",
        "fct-source": "src/Ideas-Common-Algebra-SmartGroup.html#.%2F.",
        "fct-type": "function",
        "title": "(./.)"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra SmartGroup",
        "module": "Ideas.Common.Algebra.SmartGroup",
        "name": "(./.) ./.",
        "normalized": "a-\u003ea-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "a-\u003ea-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-SmartGroup.html#v:Smart",
      "description": {
        "fct-module": "Ideas.Common.Algebra.SmartGroup",
        "fct-package": "ideas",
        "fct-signature": "Smart",
        "fct-source": "src/Ideas-Common-Algebra-SmartGroup.html#Smart",
        "fct-type": "function",
        "title": "Smart"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra SmartGroup",
        "module": "Ideas.Common.Algebra.SmartGroup",
        "name": "Smart",
        "normalized": "",
        "package": "ideas",
        "partial": "Smart",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-SmartGroup.html#v:SmartField",
      "description": {
        "fct-module": "Ideas.Common.Algebra.SmartGroup",
        "fct-package": "ideas",
        "fct-signature": "SmartField",
        "fct-source": "src/Ideas-Common-Algebra-SmartGroup.html#SmartField",
        "fct-type": "function",
        "title": "SmartField"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra SmartGroup",
        "module": "Ideas.Common.Algebra.SmartGroup",
        "name": "SmartField",
        "normalized": "",
        "package": "ideas",
        "partial": "Smart Field",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-SmartGroup.html#v:SmartGroup",
      "description": {
        "fct-module": "Ideas.Common.Algebra.SmartGroup",
        "fct-package": "ideas",
        "fct-signature": "SmartGroup",
        "fct-source": "src/Ideas-Common-Algebra-SmartGroup.html#SmartGroup",
        "fct-type": "function",
        "title": "SmartGroup"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra SmartGroup",
        "module": "Ideas.Common.Algebra.SmartGroup",
        "name": "SmartGroup",
        "normalized": "",
        "package": "ideas",
        "partial": "Smart Group",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-SmartGroup.html#v:SmartZero",
      "description": {
        "fct-module": "Ideas.Common.Algebra.SmartGroup",
        "fct-package": "ideas",
        "fct-signature": "SmartZero",
        "fct-source": "src/Ideas-Common-Algebra-SmartGroup.html#SmartZero",
        "fct-type": "function",
        "title": "SmartZero"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra SmartGroup",
        "module": "Ideas.Common.Algebra.SmartGroup",
        "name": "SmartZero",
        "normalized": "",
        "package": "ideas",
        "partial": "Smart Zero",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-SmartGroup.html#v:fromSmart",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Common.Algebra.SmartGroup",
        "fct-package": "ideas",
        "fct-signature": "a",
        "fct-source": "src/Ideas-Common-Algebra-SmartGroup.html#Smart",
        "fct-type": "function",
        "title": "fromSmart"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra SmartGroup",
        "module": "Ideas.Common.Algebra.SmartGroup",
        "name": "fromSmart",
        "normalized": "",
        "package": "ideas",
        "partial": "Smart",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-SmartGroup.html#v:fromSmartField",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Common.Algebra.SmartGroup",
        "fct-package": "ideas",
        "fct-signature": "a",
        "fct-source": "src/Ideas-Common-Algebra-SmartGroup.html#SmartField",
        "fct-type": "function",
        "title": "fromSmartField"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra SmartGroup",
        "module": "Ideas.Common.Algebra.SmartGroup",
        "name": "fromSmartField",
        "normalized": "",
        "package": "ideas",
        "partial": "Smart Field",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-SmartGroup.html#v:fromSmartGroup",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Common.Algebra.SmartGroup",
        "fct-package": "ideas",
        "fct-signature": "a",
        "fct-source": "src/Ideas-Common-Algebra-SmartGroup.html#SmartGroup",
        "fct-type": "function",
        "title": "fromSmartGroup"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra SmartGroup",
        "module": "Ideas.Common.Algebra.SmartGroup",
        "name": "fromSmartGroup",
        "normalized": "",
        "package": "ideas",
        "partial": "Smart Group",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-SmartGroup.html#v:fromSmartZero",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Common.Algebra.SmartGroup",
        "fct-package": "ideas",
        "fct-signature": "a",
        "fct-source": "src/Ideas-Common-Algebra-SmartGroup.html#SmartZero",
        "fct-type": "function",
        "title": "fromSmartZero"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra SmartGroup",
        "module": "Ideas.Common.Algebra.SmartGroup",
        "name": "fromSmartZero",
        "normalized": "",
        "package": "ideas",
        "partial": "Smart Zero",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Algebra-SmartGroup.html#v:neg",
      "description": {
        "fct-module": "Ideas.Common.Algebra.SmartGroup",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e a",
        "fct-source": "src/Ideas-Common-Algebra-SmartGroup.html#neg",
        "fct-type": "function",
        "title": "neg"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Algebra SmartGroup",
        "module": "Ideas.Common.Algebra.SmartGroup",
        "name": "neg",
        "normalized": "a-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "a-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Classes.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eType classes and instances.\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "Ideas.Common.Classes",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Common-Classes.html",
        "fct-type": "module",
        "title": "Classes"
      },
      "index": {
        "description": "Type classes and instances",
        "hierarchy": "Ideas Common Classes",
        "module": "Ideas.Common.Classes",
        "name": "Classes",
        "normalized": "",
        "package": "ideas",
        "partial": "Classes",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Classes.html#t:Apply",
      "description": {
        "fct-descr": "\u003cp\u003eA type class for functors that can be applied to a value. Transformation,\n Rule, and Strategy are all instances of this type class.\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Classes",
        "fct-package": "ideas",
        "fct-signature": "class",
        "fct-source": "src/Ideas-Common-Classes.html#Apply",
        "fct-type": "class",
        "title": "Apply"
      },
      "index": {
        "description": "type class for functors that can be applied to value Transformation Rule and Strategy are all instances of this type class",
        "hierarchy": "Ideas Common Classes",
        "module": "Ideas.Common.Classes",
        "name": "Apply",
        "normalized": "",
        "package": "ideas",
        "partial": "Apply",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Classes.html#t:BiArrow",
      "description": {
        "fct-descr": "\u003cp\u003eType class for bi-directional arrows. \u003ccode\u003e\u003ca\u003e-\u003c/a\u003e\u003c/code\u003e should be used instead of\n \u003ccode\u003earr\u003c/code\u003e from the arrow interface. Minimal complete definition: \u003ccode\u003e\u003ca\u003e-\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Classes",
        "fct-package": "ideas",
        "fct-signature": "class",
        "fct-source": "src/Ideas-Common-Classes.html#BiArrow",
        "fct-type": "class",
        "title": "BiArrow"
      },
      "index": {
        "description": "Type class for bi-directional arrows should be used instead of arr from the arrow interface Minimal complete definition",
        "hierarchy": "Ideas Common Classes",
        "module": "Ideas.Common.Classes",
        "name": "BiArrow",
        "normalized": "",
        "package": "ideas",
        "partial": "Bi Arrow",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Classes.html#t:BiFunctor",
      "description": {
        "fct-module": "Ideas.Common.Classes",
        "fct-package": "ideas",
        "fct-signature": "class",
        "fct-source": "src/Ideas-Common-Classes.html#BiFunctor",
        "fct-type": "class",
        "title": "BiFunctor"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Classes",
        "module": "Ideas.Common.Classes",
        "name": "BiFunctor",
        "normalized": "",
        "package": "ideas",
        "partial": "Bi Functor",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Classes.html#t:Buggy",
      "description": {
        "fct-module": "Ideas.Common.Classes",
        "fct-package": "ideas",
        "fct-signature": "class",
        "fct-source": "src/Ideas-Common-Classes.html#Buggy",
        "fct-type": "class",
        "title": "Buggy"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Classes",
        "module": "Ideas.Common.Classes",
        "name": "Buggy",
        "normalized": "",
        "package": "ideas",
        "partial": "Buggy",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Classes.html#t:Container",
      "description": {
        "fct-descr": "\u003cp\u003eInstances should satisfy the following law: \u003ccode\u003egetSingleton . singleton == Just\u003c/code\u003e\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Classes",
        "fct-package": "ideas",
        "fct-signature": "class",
        "fct-source": "src/Ideas-Common-Classes.html#Container",
        "fct-type": "class",
        "title": "Container"
      },
      "index": {
        "description": "Instances should satisfy the following law getSingleton singleton Just",
        "hierarchy": "Ideas Common Classes",
        "module": "Ideas.Common.Classes",
        "name": "Container",
        "normalized": "",
        "package": "ideas",
        "partial": "Container",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Classes.html#t:Minor",
      "description": {
        "fct-module": "Ideas.Common.Classes",
        "fct-package": "ideas",
        "fct-signature": "class",
        "fct-source": "src/Ideas-Common-Classes.html#Minor",
        "fct-type": "class",
        "title": "Minor"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Classes",
        "module": "Ideas.Common.Classes",
        "name": "Minor",
        "normalized": "",
        "package": "ideas",
        "partial": "Minor",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Classes.html#v:-33--45--62-",
      "description": {
        "fct-module": "Ideas.Common.Classes",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e b) -\u003e arr a b",
        "fct-source": "src/Ideas-Common-Classes.html#%21-%3E",
        "fct-type": "method",
        "title": "(!-\u003e)"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Classes",
        "module": "Ideas.Common.Classes",
        "name": "(!-\u003e) !-\u003e",
        "normalized": "(a-\u003eb)-\u003ec a b",
        "package": "ideas",
        "partial": "",
        "signature": "(a-\u003eb)-\u003earr a b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Classes.html#v:-60--45--33-",
      "description": {
        "fct-module": "Ideas.Common.Classes",
        "fct-package": "ideas",
        "fct-signature": "(b -\u003e a) -\u003e arr a b",
        "fct-source": "src/Ideas-Common-Classes.html#%3C-%21",
        "fct-type": "method",
        "title": "(\u003c-!)"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Classes",
        "module": "Ideas.Common.Classes",
        "name": "(\u003c-!) \u003c-!",
        "normalized": "(a-\u003eb)-\u003ec b a",
        "package": "ideas",
        "partial": "",
        "signature": "(b-\u003ea)-\u003earr a b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Classes.html#v:-60--45--62-",
      "description": {
        "fct-module": "Ideas.Common.Classes",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e b) -\u003e (b -\u003e a) -\u003e arr a b",
        "fct-source": "src/Ideas-Common-Classes.html#%3C-%3E",
        "fct-type": "method",
        "title": "(\u003c-\u003e)"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Classes",
        "module": "Ideas.Common.Classes",
        "name": "(\u003c-\u003e) \u003c-\u003e",
        "normalized": "(a-\u003eb)-\u003e(b-\u003ea)-\u003ec a b",
        "package": "ideas",
        "partial": "",
        "signature": "(a-\u003eb)-\u003e(b-\u003ea)-\u003earr a b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Classes.html#v:applicable",
      "description": {
        "fct-descr": "\u003cp\u003eChecks whether the functor is applicable (at least one result)\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Classes",
        "fct-package": "ideas",
        "fct-signature": "t a -\u003e a -\u003e Bool",
        "fct-source": "src/Ideas-Common-Classes.html#applicable",
        "fct-type": "function",
        "title": "applicable"
      },
      "index": {
        "description": "Checks whether the functor is applicable at least one result",
        "hierarchy": "Ideas Common Classes",
        "module": "Ideas.Common.Classes",
        "name": "applicable",
        "normalized": "a b-\u003eb-\u003eBool",
        "package": "ideas",
        "partial": "",
        "signature": "t a-\u003ea-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Classes.html#v:apply",
      "description": {
        "fct-descr": "\u003cp\u003eReturns zero or one results\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Classes",
        "fct-package": "ideas",
        "fct-signature": "t a -\u003e a -\u003e Maybe a",
        "fct-source": "src/Ideas-Common-Classes.html#apply",
        "fct-type": "function",
        "title": "apply"
      },
      "index": {
        "description": "Returns zero or one results",
        "hierarchy": "Ideas Common Classes",
        "module": "Ideas.Common.Classes",
        "name": "apply",
        "normalized": "a b-\u003eb-\u003eMaybe b",
        "package": "ideas",
        "partial": "",
        "signature": "t a-\u003ea-\u003eMaybe a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Classes.html#v:applyAll",
      "description": {
        "fct-module": "Ideas.Common.Classes",
        "fct-package": "ideas",
        "fct-signature": "applyAll",
        "fct-source": "src/Ideas-Common-Classes.html#applyAll",
        "fct-type": "method",
        "title": "applyAll"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Classes",
        "module": "Ideas.Common.Classes",
        "name": "applyAll",
        "normalized": "",
        "package": "ideas",
        "partial": "All",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Classes.html#v:applyD",
      "description": {
        "fct-descr": "\u003cp\u003eIf not applicable, return the current value (as default)\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Classes",
        "fct-package": "ideas",
        "fct-signature": "t a -\u003e a -\u003e a",
        "fct-source": "src/Ideas-Common-Classes.html#applyD",
        "fct-type": "function",
        "title": "applyD"
      },
      "index": {
        "description": "If not applicable return the current value as default",
        "hierarchy": "Ideas Common Classes",
        "module": "Ideas.Common.Classes",
        "name": "applyD",
        "normalized": "a b-\u003eb-\u003eb",
        "package": "ideas",
        "partial": "",
        "signature": "t a-\u003ea-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Classes.html#v:applyList",
      "description": {
        "fct-module": "Ideas.Common.Classes",
        "fct-package": "ideas",
        "fct-signature": "[t a] -\u003e a -\u003e Maybe a",
        "fct-source": "src/Ideas-Common-Classes.html#applyList",
        "fct-type": "function",
        "title": "applyList"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Classes",
        "module": "Ideas.Common.Classes",
        "name": "applyList",
        "normalized": "[a b]-\u003eb-\u003eMaybe b",
        "package": "ideas",
        "partial": "List",
        "signature": "[t a]-\u003ea-\u003eMaybe a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Classes.html#v:applyM",
      "description": {
        "fct-descr": "\u003cp\u003eSame as apply, except that the result (at most one) is returned in some monad\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Classes",
        "fct-package": "ideas",
        "fct-signature": "t a -\u003e a -\u003e m a",
        "fct-source": "src/Ideas-Common-Classes.html#applyM",
        "fct-type": "function",
        "title": "applyM"
      },
      "index": {
        "description": "Same as apply except that the result at most one is returned in some monad",
        "hierarchy": "Ideas Common Classes",
        "module": "Ideas.Common.Classes",
        "name": "applyM",
        "normalized": "a b-\u003eb-\u003ec b",
        "package": "ideas",
        "partial": "",
        "signature": "t a-\u003ea-\u003em a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Classes.html#v:biMap",
      "description": {
        "fct-module": "Ideas.Common.Classes",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e c) -\u003e (b -\u003e d) -\u003e f a b -\u003e f c d",
        "fct-source": "src/Ideas-Common-Classes.html#biMap",
        "fct-type": "method",
        "title": "biMap"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Classes",
        "module": "Ideas.Common.Classes",
        "name": "biMap",
        "normalized": "(a-\u003eb)-\u003e(c-\u003ed)-\u003ee a c-\u003ee b d",
        "package": "ideas",
        "partial": "Map",
        "signature": "(a-\u003ec)-\u003e(b-\u003ed)-\u003ef a b-\u003ef c d"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Classes.html#v:buggy",
      "description": {
        "fct-module": "Ideas.Common.Classes",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e a",
        "fct-source": "src/Ideas-Common-Classes.html#buggy",
        "fct-type": "method",
        "title": "buggy"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Classes",
        "module": "Ideas.Common.Classes",
        "name": "buggy",
        "normalized": "a-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "a-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Classes.html#v:getSingleton",
      "description": {
        "fct-module": "Ideas.Common.Classes",
        "fct-package": "ideas",
        "fct-signature": "f a -\u003e Maybe a",
        "fct-source": "src/Ideas-Common-Classes.html#getSingleton",
        "fct-type": "method",
        "title": "getSingleton"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Classes",
        "module": "Ideas.Common.Classes",
        "name": "getSingleton",
        "normalized": "a b-\u003eMaybe b",
        "package": "ideas",
        "partial": "Singleton",
        "signature": "f a-\u003eMaybe a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Classes.html#v:isBuggy",
      "description": {
        "fct-module": "Ideas.Common.Classes",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e Bool",
        "fct-source": "src/Ideas-Common-Classes.html#isBuggy",
        "fct-type": "method",
        "title": "isBuggy"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Classes",
        "module": "Ideas.Common.Classes",
        "name": "isBuggy",
        "normalized": "a-\u003eBool",
        "package": "ideas",
        "partial": "Buggy",
        "signature": "a-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Classes.html#v:isMajor",
      "description": {
        "fct-module": "Ideas.Common.Classes",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e Bool",
        "fct-source": "src/Ideas-Common-Classes.html#isMajor",
        "fct-type": "method",
        "title": "isMajor"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Classes",
        "module": "Ideas.Common.Classes",
        "name": "isMajor",
        "normalized": "a-\u003eBool",
        "package": "ideas",
        "partial": "Major",
        "signature": "a-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Classes.html#v:isMinor",
      "description": {
        "fct-module": "Ideas.Common.Classes",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e Bool",
        "fct-source": "src/Ideas-Common-Classes.html#isMinor",
        "fct-type": "method",
        "title": "isMinor"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Classes",
        "module": "Ideas.Common.Classes",
        "name": "isMinor",
        "normalized": "a-\u003eBool",
        "package": "ideas",
        "partial": "Minor",
        "signature": "a-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Classes.html#v:mapBoth",
      "description": {
        "fct-module": "Ideas.Common.Classes",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e b) -\u003e f a a -\u003e f b b",
        "fct-source": "src/Ideas-Common-Classes.html#mapBoth",
        "fct-type": "function",
        "title": "mapBoth"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Classes",
        "module": "Ideas.Common.Classes",
        "name": "mapBoth",
        "normalized": "(a-\u003eb)-\u003ec a a-\u003ec b b",
        "package": "ideas",
        "partial": "Both",
        "signature": "(a-\u003eb)-\u003ef a a-\u003ef b b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Classes.html#v:mapFirst",
      "description": {
        "fct-module": "Ideas.Common.Classes",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e b) -\u003e f a c -\u003e f b c",
        "fct-source": "src/Ideas-Common-Classes.html#mapFirst",
        "fct-type": "method",
        "title": "mapFirst"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Classes",
        "module": "Ideas.Common.Classes",
        "name": "mapFirst",
        "normalized": "(a-\u003eb)-\u003ec a d-\u003ec b d",
        "package": "ideas",
        "partial": "First",
        "signature": "(a-\u003eb)-\u003ef a c-\u003ef b c"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Classes.html#v:mapSecond",
      "description": {
        "fct-module": "Ideas.Common.Classes",
        "fct-package": "ideas",
        "fct-signature": "(b -\u003e c) -\u003e f a b -\u003e f a c",
        "fct-source": "src/Ideas-Common-Classes.html#mapSecond",
        "fct-type": "method",
        "title": "mapSecond"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Classes",
        "module": "Ideas.Common.Classes",
        "name": "mapSecond",
        "normalized": "(a-\u003eb)-\u003ec d a-\u003ec d b",
        "package": "ideas",
        "partial": "Second",
        "signature": "(b-\u003ec)-\u003ef a b-\u003ef a c"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Classes.html#v:minor",
      "description": {
        "fct-module": "Ideas.Common.Classes",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e a",
        "fct-source": "src/Ideas-Common-Classes.html#minor",
        "fct-type": "method",
        "title": "minor"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Classes",
        "module": "Ideas.Common.Classes",
        "name": "minor",
        "normalized": "a-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "a-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Classes.html#v:setBuggy",
      "description": {
        "fct-module": "Ideas.Common.Classes",
        "fct-package": "ideas",
        "fct-signature": "Bool -\u003e a -\u003e a",
        "fct-source": "src/Ideas-Common-Classes.html#setBuggy",
        "fct-type": "method",
        "title": "setBuggy"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Classes",
        "module": "Ideas.Common.Classes",
        "name": "setBuggy",
        "normalized": "Bool-\u003ea-\u003ea",
        "package": "ideas",
        "partial": "Buggy",
        "signature": "Bool-\u003ea-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Classes.html#v:setMinor",
      "description": {
        "fct-module": "Ideas.Common.Classes",
        "fct-package": "ideas",
        "fct-signature": "Bool -\u003e a -\u003e a",
        "fct-source": "src/Ideas-Common-Classes.html#setMinor",
        "fct-type": "method",
        "title": "setMinor"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Classes",
        "module": "Ideas.Common.Classes",
        "name": "setMinor",
        "normalized": "Bool-\u003ea-\u003ea",
        "package": "ideas",
        "partial": "Minor",
        "signature": "Bool-\u003ea-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Classes.html#v:singleton",
      "description": {
        "fct-module": "Ideas.Common.Classes",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e f a",
        "fct-source": "src/Ideas-Common-Classes.html#singleton",
        "fct-type": "method",
        "title": "singleton"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Classes",
        "module": "Ideas.Common.Classes",
        "name": "singleton",
        "normalized": "a-\u003eb a",
        "package": "ideas",
        "partial": "",
        "signature": "a-\u003ef a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Context.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eA context for a term that maintains an environment of\n key-value pairs. A context is both showable and parsable.\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "Ideas.Common.Context",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Common-Context.html",
        "fct-type": "module",
        "title": "Context"
      },
      "index": {
        "description": "context for term that maintains an environment of key-value pairs context is both showable and parsable",
        "hierarchy": "Ideas Common Context",
        "module": "Ideas.Common.Context",
        "name": "Context",
        "normalized": "",
        "package": "ideas",
        "partial": "Context",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Context.html#t:Context",
      "description": {
        "fct-descr": "\u003cp\u003eAbstract data type for a context: a context stores an envrionent\n (key-value pairs) and a value\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Context",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Common-Context.html#Context",
        "fct-type": "data",
        "title": "Context"
      },
      "index": {
        "description": "Abstract data type for context context stores an envrionent key-value pairs and value",
        "hierarchy": "Ideas Common Context",
        "module": "Ideas.Common.Context",
        "name": "Context",
        "normalized": "",
        "package": "ideas",
        "partial": "Context",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Context.html#t:ContextNavigator",
      "description": {
        "fct-module": "Ideas.Common.Context",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Common-Context.html#ContextNavigator",
        "fct-type": "data",
        "title": "ContextNavigator"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Context",
        "module": "Ideas.Common.Context",
        "name": "ContextNavigator",
        "normalized": "",
        "package": "ideas",
        "partial": "Context Navigator",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Context.html#t:Location",
      "description": {
        "fct-module": "Ideas.Common.Context",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Common-Traversal-Navigator.html#Location",
        "fct-type": "data",
        "title": "Location"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Context",
        "module": "Ideas.Common.Context",
        "name": "Location",
        "normalized": "",
        "package": "ideas",
        "partial": "Location",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Context.html#v:applyTop",
      "description": {
        "fct-descr": "\u003cp\u003eApply a function at top-level. Afterwards, try to return the focus\n to the old position\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Context",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e a) -\u003e Context a -\u003e Context a",
        "fct-source": "src/Ideas-Common-Context.html#applyTop",
        "fct-type": "function",
        "title": "applyTop"
      },
      "index": {
        "description": "Apply function at top-level Afterwards try to return the focus to the old position",
        "hierarchy": "Ideas Common Context",
        "module": "Ideas.Common.Context",
        "name": "applyTop",
        "normalized": "(a-\u003ea)-\u003eContext a-\u003eContext a",
        "package": "ideas",
        "partial": "Top",
        "signature": "(a-\u003ea)-\u003eContext a-\u003eContext a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Context.html#v:changeInContext",
      "description": {
        "fct-module": "Ideas.Common.Context",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e a) -\u003e Context a -\u003e Context a",
        "fct-source": "src/Ideas-Common-Context.html#changeInContext",
        "fct-type": "function",
        "title": "changeInContext"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Context",
        "module": "Ideas.Common.Context",
        "name": "changeInContext",
        "normalized": "(a-\u003ea)-\u003eContext a-\u003eContext a",
        "package": "ideas",
        "partial": "In Context",
        "signature": "(a-\u003ea)-\u003eContext a-\u003eContext a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Context.html#v:changeTerm",
      "description": {
        "fct-module": "Ideas.Common.Context",
        "fct-package": "ideas",
        "fct-signature": "(Term -\u003e Maybe Term) -\u003e Context a -\u003e Maybe (Context a)",
        "fct-source": "src/Ideas-Common-Context.html#changeTerm",
        "fct-type": "function",
        "title": "changeTerm"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Context",
        "module": "Ideas.Common.Context",
        "name": "changeTerm",
        "normalized": "(Term-\u003eMaybe Term)-\u003eContext a-\u003eMaybe(Context a)",
        "package": "ideas",
        "partial": "Term",
        "signature": "(Term-\u003eMaybe Term)-\u003eContext a-\u003eMaybe(Context a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Context.html#v:contextView",
      "description": {
        "fct-module": "Ideas.Common.Context",
        "fct-package": "ideas",
        "fct-signature": "View (Context a) (a, Context a)",
        "fct-source": "src/Ideas-Common-Context.html#contextView",
        "fct-type": "function",
        "title": "contextView"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Context",
        "module": "Ideas.Common.Context",
        "name": "contextView",
        "normalized": "View(Context a)(a,Context a)",
        "package": "ideas",
        "partial": "View",
        "signature": "View(Context a)(a,Context a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Context.html#v:currentInContext",
      "description": {
        "fct-module": "Ideas.Common.Context",
        "fct-package": "ideas",
        "fct-signature": "Context a -\u003e Maybe a",
        "fct-source": "src/Ideas-Common-Context.html#currentInContext",
        "fct-type": "function",
        "title": "currentInContext"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Context",
        "module": "Ideas.Common.Context",
        "name": "currentInContext",
        "normalized": "Context a-\u003eMaybe a",
        "package": "ideas",
        "partial": "In Context",
        "signature": "Context a-\u003eMaybe a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Context.html#v:currentTerm",
      "description": {
        "fct-module": "Ideas.Common.Context",
        "fct-package": "ideas",
        "fct-signature": "Context a -\u003e Maybe Term",
        "fct-source": "src/Ideas-Common-Context.html#currentTerm",
        "fct-type": "function",
        "title": "currentTerm"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Context",
        "module": "Ideas.Common.Context",
        "name": "currentTerm",
        "normalized": "Context a-\u003eMaybe Term",
        "package": "ideas",
        "partial": "Term",
        "signature": "Context a-\u003eMaybe Term"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Context.html#v:fromContext",
      "description": {
        "fct-module": "Ideas.Common.Context",
        "fct-package": "ideas",
        "fct-signature": "Context a -\u003e m a",
        "fct-source": "src/Ideas-Common-Context.html#fromContext",
        "fct-type": "function",
        "title": "fromContext"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Context",
        "module": "Ideas.Common.Context",
        "name": "fromContext",
        "normalized": "Context a-\u003eb a",
        "package": "ideas",
        "partial": "Context",
        "signature": "Context a-\u003em a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Context.html#v:fromContextWith",
      "description": {
        "fct-module": "Ideas.Common.Context",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e b) -\u003e Context a -\u003e m b",
        "fct-source": "src/Ideas-Common-Context.html#fromContextWith",
        "fct-type": "function",
        "title": "fromContextWith"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Context",
        "module": "Ideas.Common.Context",
        "name": "fromContextWith",
        "normalized": "(a-\u003eb)-\u003eContext a-\u003ec b",
        "package": "ideas",
        "partial": "Context With",
        "signature": "(a-\u003eb)-\u003eContext a-\u003em b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Context.html#v:fromContextWith2",
      "description": {
        "fct-module": "Ideas.Common.Context",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e b -\u003e c) -\u003e Context a -\u003e Context b -\u003e m c",
        "fct-source": "src/Ideas-Common-Context.html#fromContextWith2",
        "fct-type": "function",
        "title": "fromContextWith2"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Context",
        "module": "Ideas.Common.Context",
        "name": "fromContextWith2",
        "normalized": "(a-\u003eb-\u003ec)-\u003eContext a-\u003eContext b-\u003ed c",
        "package": "ideas",
        "partial": "Context With",
        "signature": "(a-\u003eb-\u003ec)-\u003eContext a-\u003eContext b-\u003em c"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Context.html#v:liftToContext",
      "description": {
        "fct-descr": "\u003cp\u003eLift a rule to operate on a term in a context\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Context",
        "fct-package": "ideas",
        "fct-signature": "f a -\u003e f (Context a)",
        "fct-source": "src/Ideas-Common-Context.html#liftToContext",
        "fct-type": "function",
        "title": "liftToContext"
      },
      "index": {
        "description": "Lift rule to operate on term in context",
        "hierarchy": "Ideas Common Context",
        "module": "Ideas.Common.Context",
        "name": "liftToContext",
        "normalized": "a b-\u003ea(Context b)",
        "package": "ideas",
        "partial": "To Context",
        "signature": "f a-\u003ef(Context a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Context.html#v:location",
      "description": {
        "fct-module": "Ideas.Common.Context",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e Location",
        "fct-source": "src/Ideas-Common-Traversal-Navigator.html#location",
        "fct-type": "function",
        "title": "location"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Context",
        "module": "Ideas.Common.Context",
        "name": "location",
        "normalized": "a-\u003eLocation",
        "package": "ideas",
        "partial": "",
        "signature": "a-\u003eLocation"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Context.html#v:navigator",
      "description": {
        "fct-module": "Ideas.Common.Context",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e ContextNavigator a",
        "fct-source": "src/Ideas-Common-Context.html#navigator",
        "fct-type": "function",
        "title": "navigator"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Context",
        "module": "Ideas.Common.Context",
        "name": "navigator",
        "normalized": "a-\u003eContextNavigator a",
        "package": "ideas",
        "partial": "",
        "signature": "a-\u003eContextNavigator a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Context.html#v:newContext",
      "description": {
        "fct-descr": "\u003cp\u003eConstruct a context\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Context",
        "fct-package": "ideas",
        "fct-signature": "Environment -\u003e ContextNavigator a -\u003e Context a",
        "fct-source": "src/Ideas-Common-Context.html#newContext",
        "fct-type": "function",
        "title": "newContext"
      },
      "index": {
        "description": "Construct context",
        "hierarchy": "Ideas Common Context",
        "module": "Ideas.Common.Context",
        "name": "newContext",
        "normalized": "Environment-\u003eContextNavigator a-\u003eContext a",
        "package": "ideas",
        "partial": "Context",
        "signature": "Environment-\u003eContextNavigator a-\u003eContext a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Context.html#v:noNavigator",
      "description": {
        "fct-module": "Ideas.Common.Context",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e ContextNavigator a",
        "fct-source": "src/Ideas-Common-Context.html#noNavigator",
        "fct-type": "function",
        "title": "noNavigator"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Context",
        "module": "Ideas.Common.Context",
        "name": "noNavigator",
        "normalized": "a-\u003eContextNavigator a",
        "package": "ideas",
        "partial": "Navigator",
        "signature": "a-\u003eContextNavigator a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Context.html#v:replaceInContext",
      "description": {
        "fct-module": "Ideas.Common.Context",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e Context a -\u003e Context a",
        "fct-source": "src/Ideas-Common-Context.html#replaceInContext",
        "fct-type": "function",
        "title": "replaceInContext"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Context",
        "module": "Ideas.Common.Context",
        "name": "replaceInContext",
        "normalized": "a-\u003eContext a-\u003eContext a",
        "package": "ideas",
        "partial": "In Context",
        "signature": "a-\u003eContext a-\u003eContext a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Context.html#v:termNavigator",
      "description": {
        "fct-module": "Ideas.Common.Context",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e ContextNavigator a",
        "fct-source": "src/Ideas-Common-Context.html#termNavigator",
        "fct-type": "function",
        "title": "termNavigator"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Context",
        "module": "Ideas.Common.Context",
        "name": "termNavigator",
        "normalized": "a-\u003eContextNavigator a",
        "package": "ideas",
        "partial": "Navigator",
        "signature": "a-\u003eContextNavigator a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Context.html#v:use",
      "description": {
        "fct-module": "Ideas.Common.Context",
        "fct-package": "ideas",
        "fct-signature": "f a -\u003e f (Context b)",
        "fct-source": "src/Ideas-Common-Context.html#use",
        "fct-type": "function",
        "title": "use"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Context",
        "module": "Ideas.Common.Context",
        "name": "use",
        "normalized": "a b-\u003ea(Context c)",
        "package": "ideas",
        "partial": "",
        "signature": "f a-\u003ef(Context b)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Context.html#v:useC",
      "description": {
        "fct-module": "Ideas.Common.Context",
        "fct-package": "ideas",
        "fct-signature": "f (Context a) -\u003e f (Context b)",
        "fct-source": "src/Ideas-Common-Context.html#useC",
        "fct-type": "function",
        "title": "useC"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Context",
        "module": "Ideas.Common.Context",
        "name": "useC",
        "normalized": "a(Context b)-\u003ea(Context c)",
        "package": "ideas",
        "partial": "",
        "signature": "f(Context a)-\u003ef(Context b)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Derivation.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eDatatype for representing a derivation (parameterized both in the terms\n and the steps)\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "Ideas.Common.Derivation",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Common-Derivation.html",
        "fct-type": "module",
        "title": "Derivation"
      },
      "index": {
        "description": "Datatype for representing derivation parameterized both in the terms and the steps",
        "hierarchy": "Ideas Common Derivation",
        "module": "Ideas.Common.Derivation",
        "name": "Derivation",
        "normalized": "",
        "package": "ideas",
        "partial": "Derivation",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Derivation.html#t:Derivation",
      "description": {
        "fct-module": "Ideas.Common.Derivation",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Common-Derivation.html#Derivation",
        "fct-type": "data",
        "title": "Derivation"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Derivation",
        "module": "Ideas.Common.Derivation",
        "name": "Derivation",
        "normalized": "",
        "package": "ideas",
        "partial": "Derivation",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Derivation.html#v:derivationLength",
      "description": {
        "fct-descr": "\u003cp\u003eReturns the number of steps in a derivation\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Derivation",
        "fct-package": "ideas",
        "fct-signature": "Derivation s a -\u003e Int",
        "fct-source": "src/Ideas-Common-Derivation.html#derivationLength",
        "fct-type": "function",
        "title": "derivationLength"
      },
      "index": {
        "description": "Returns the number of steps in derivation",
        "hierarchy": "Ideas Common Derivation",
        "module": "Ideas.Common.Derivation",
        "name": "derivationLength",
        "normalized": "Derivation a b-\u003eInt",
        "package": "ideas",
        "partial": "Length",
        "signature": "Derivation s a-\u003eInt"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Derivation.html#v:derivationM",
      "description": {
        "fct-descr": "\u003cp\u003eApply a monadic function to each term, and to each step\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Derivation",
        "fct-package": "ideas",
        "fct-signature": "(s -\u003e m ()) -\u003e (a -\u003e m ()) -\u003e Derivation s a -\u003e m ()",
        "fct-source": "src/Ideas-Common-Derivation.html#derivationM",
        "fct-type": "function",
        "title": "derivationM"
      },
      "index": {
        "description": "Apply monadic function to each term and to each step",
        "hierarchy": "Ideas Common Derivation",
        "module": "Ideas.Common.Derivation",
        "name": "derivationM",
        "normalized": "(a-\u003eb())-\u003e(c-\u003eb())-\u003eDerivation a c-\u003eb()",
        "package": "ideas",
        "partial": "",
        "signature": "(s-\u003em())-\u003e(a-\u003em())-\u003eDerivation s a-\u003em()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Derivation.html#v:emptyDerivation",
      "description": {
        "fct-module": "Ideas.Common.Derivation",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e Derivation s a",
        "fct-source": "src/Ideas-Common-Derivation.html#emptyDerivation",
        "fct-type": "function",
        "title": "emptyDerivation"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Derivation",
        "module": "Ideas.Common.Derivation",
        "name": "emptyDerivation",
        "normalized": "a-\u003eDerivation b a",
        "package": "ideas",
        "partial": "Derivation",
        "signature": "a-\u003eDerivation s a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Derivation.html#v:extend",
      "description": {
        "fct-module": "Ideas.Common.Derivation",
        "fct-package": "ideas",
        "fct-signature": "Derivation s a -\u003e (s, a) -\u003e Derivation s a",
        "fct-source": "src/Ideas-Common-Derivation.html#extend",
        "fct-type": "function",
        "title": "extend"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Derivation",
        "module": "Ideas.Common.Derivation",
        "name": "extend",
        "normalized": "Derivation a b-\u003e(a,b)-\u003eDerivation a b",
        "package": "ideas",
        "partial": "",
        "signature": "Derivation s a-\u003e(s,a)-\u003eDerivation s a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Derivation.html#v:firstTerm",
      "description": {
        "fct-module": "Ideas.Common.Derivation",
        "fct-package": "ideas",
        "fct-signature": "Derivation s a -\u003e a",
        "fct-source": "src/Ideas-Common-Derivation.html#firstTerm",
        "fct-type": "function",
        "title": "firstTerm"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Derivation",
        "module": "Ideas.Common.Derivation",
        "name": "firstTerm",
        "normalized": "Derivation a b-\u003eb",
        "package": "ideas",
        "partial": "Term",
        "signature": "Derivation s a-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Derivation.html#v:isEmpty",
      "description": {
        "fct-descr": "\u003cp\u003eTests whether the derivation is empty\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Derivation",
        "fct-package": "ideas",
        "fct-signature": "Derivation s a -\u003e Bool",
        "fct-source": "src/Ideas-Common-Derivation.html#isEmpty",
        "fct-type": "function",
        "title": "isEmpty"
      },
      "index": {
        "description": "Tests whether the derivation is empty",
        "hierarchy": "Ideas Common Derivation",
        "module": "Ideas.Common.Derivation",
        "name": "isEmpty",
        "normalized": "Derivation a b-\u003eBool",
        "package": "ideas",
        "partial": "Empty",
        "signature": "Derivation s a-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Derivation.html#v:lastStep",
      "description": {
        "fct-module": "Ideas.Common.Derivation",
        "fct-package": "ideas",
        "fct-signature": "Derivation s a -\u003e Maybe s",
        "fct-source": "src/Ideas-Common-Derivation.html#lastStep",
        "fct-type": "function",
        "title": "lastStep"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Derivation",
        "module": "Ideas.Common.Derivation",
        "name": "lastStep",
        "normalized": "Derivation a b-\u003eMaybe a",
        "package": "ideas",
        "partial": "Step",
        "signature": "Derivation s a-\u003eMaybe s"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Derivation.html#v:lastTerm",
      "description": {
        "fct-module": "Ideas.Common.Derivation",
        "fct-package": "ideas",
        "fct-signature": "Derivation s a -\u003e a",
        "fct-source": "src/Ideas-Common-Derivation.html#lastTerm",
        "fct-type": "function",
        "title": "lastTerm"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Derivation",
        "module": "Ideas.Common.Derivation",
        "name": "lastTerm",
        "normalized": "Derivation a b-\u003eb",
        "package": "ideas",
        "partial": "Term",
        "signature": "Derivation s a-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Derivation.html#v:prepend",
      "description": {
        "fct-module": "Ideas.Common.Derivation",
        "fct-package": "ideas",
        "fct-signature": "(a, s) -\u003e Derivation s a -\u003e Derivation s a",
        "fct-source": "src/Ideas-Common-Derivation.html#prepend",
        "fct-type": "function",
        "title": "prepend"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Derivation",
        "module": "Ideas.Common.Derivation",
        "name": "prepend",
        "normalized": "(a,b)-\u003eDerivation b a-\u003eDerivation b a",
        "package": "ideas",
        "partial": "",
        "signature": "(a,s)-\u003eDerivation s a-\u003eDerivation s a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Derivation.html#v:steps",
      "description": {
        "fct-descr": "\u003cp\u003eAll steps in a derivation\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Derivation",
        "fct-package": "ideas",
        "fct-signature": "Derivation s a -\u003e [s]",
        "fct-source": "src/Ideas-Common-Derivation.html#steps",
        "fct-type": "function",
        "title": "steps"
      },
      "index": {
        "description": "All steps in derivation",
        "hierarchy": "Ideas Common Derivation",
        "module": "Ideas.Common.Derivation",
        "name": "steps",
        "normalized": "Derivation a b-\u003e[a]",
        "package": "ideas",
        "partial": "",
        "signature": "Derivation s a-\u003e[s]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Derivation.html#v:terms",
      "description": {
        "fct-descr": "\u003cp\u003eAll terms in a derivation\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Derivation",
        "fct-package": "ideas",
        "fct-signature": "Derivation s a -\u003e [a]",
        "fct-source": "src/Ideas-Common-Derivation.html#terms",
        "fct-type": "function",
        "title": "terms"
      },
      "index": {
        "description": "All terms in derivation",
        "hierarchy": "Ideas Common Derivation",
        "module": "Ideas.Common.Derivation",
        "name": "terms",
        "normalized": "Derivation a b-\u003e[b]",
        "package": "ideas",
        "partial": "",
        "signature": "Derivation s a-\u003e[a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Derivation.html#v:triples",
      "description": {
        "fct-descr": "\u003cp\u003eThe triples of a derivation, consisting of the before term, the\n step, and the after term.\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Derivation",
        "fct-package": "ideas",
        "fct-signature": "Derivation s a -\u003e [(a, s, a)]",
        "fct-source": "src/Ideas-Common-Derivation.html#triples",
        "fct-type": "function",
        "title": "triples"
      },
      "index": {
        "description": "The triples of derivation consisting of the before term the step and the after term",
        "hierarchy": "Ideas Common Derivation",
        "module": "Ideas.Common.Derivation",
        "name": "triples",
        "normalized": "Derivation a b-\u003e[(b,a,b)]",
        "package": "ideas",
        "partial": "",
        "signature": "Derivation s a-\u003e[(a,s,a)]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Derivation.html#v:updateSteps",
      "description": {
        "fct-module": "Ideas.Common.Derivation",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e s -\u003e a -\u003e t) -\u003e Derivation s a -\u003e Derivation t a",
        "fct-source": "src/Ideas-Common-Derivation.html#updateSteps",
        "fct-type": "function",
        "title": "updateSteps"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Derivation",
        "module": "Ideas.Common.Derivation",
        "name": "updateSteps",
        "normalized": "(a-\u003eb-\u003ea-\u003ec)-\u003eDerivation b a-\u003eDerivation c a",
        "package": "ideas",
        "partial": "Steps",
        "signature": "(a-\u003es-\u003ea-\u003et)-\u003eDerivation s a-\u003eDerivation t a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Derivation.html#v:withoutLast",
      "description": {
        "fct-module": "Ideas.Common.Derivation",
        "fct-package": "ideas",
        "fct-signature": "Derivation s a -\u003e Derivation s a",
        "fct-source": "src/Ideas-Common-Derivation.html#withoutLast",
        "fct-type": "function",
        "title": "withoutLast"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Derivation",
        "module": "Ideas.Common.Derivation",
        "name": "withoutLast",
        "normalized": "Derivation a b-\u003eDerivation a b",
        "package": "ideas",
        "partial": "Last",
        "signature": "Derivation s a-\u003eDerivation s a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-DerivationTree.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eDatatype for representing derivations as a tree. The datatype stores all\n intermediate results as well as annotations for the steps.\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "Ideas.Common.DerivationTree",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Common-DerivationTree.html",
        "fct-type": "module",
        "title": "DerivationTree"
      },
      "index": {
        "description": "Datatype for representing derivations as tree The datatype stores all intermediate results as well as annotations for the steps",
        "hierarchy": "Ideas Common DerivationTree",
        "module": "Ideas.Common.DerivationTree",
        "name": "DerivationTree",
        "normalized": "",
        "package": "ideas",
        "partial": "Derivation Tree",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-DerivationTree.html#t:DerivationTree",
      "description": {
        "fct-module": "Ideas.Common.DerivationTree",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Common-DerivationTree.html#DerivationTree",
        "fct-type": "data",
        "title": "DerivationTree"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common DerivationTree",
        "module": "Ideas.Common.DerivationTree",
        "name": "DerivationTree",
        "normalized": "",
        "package": "ideas",
        "partial": "Derivation Tree",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-DerivationTree.html#v:addBranches",
      "description": {
        "fct-descr": "\u003cp\u003eBranches are attached after the existing ones (order matters)\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.DerivationTree",
        "fct-package": "ideas",
        "fct-signature": "[(s, DerivationTree s a)] -\u003e DerivationTree s a -\u003e DerivationTree s a",
        "fct-source": "src/Ideas-Common-DerivationTree.html#addBranches",
        "fct-type": "function",
        "title": "addBranches"
      },
      "index": {
        "description": "Branches are attached after the existing ones order matters",
        "hierarchy": "Ideas Common DerivationTree",
        "module": "Ideas.Common.DerivationTree",
        "name": "addBranches",
        "normalized": "[(a,DerivationTree a b)]-\u003eDerivationTree a b-\u003eDerivationTree a b",
        "package": "ideas",
        "partial": "Branches",
        "signature": "[(s,DerivationTree s a)]-\u003eDerivationTree s a-\u003eDerivationTree s a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-DerivationTree.html#v:branches",
      "description": {
        "fct-descr": "\u003cp\u003eAll branches\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.DerivationTree",
        "fct-package": "ideas",
        "fct-signature": "DerivationTree s a -\u003e [(s, DerivationTree s a)]",
        "fct-source": "src/Ideas-Common-DerivationTree.html#branches",
        "fct-type": "function",
        "title": "branches"
      },
      "index": {
        "description": "All branches",
        "hierarchy": "Ideas Common DerivationTree",
        "module": "Ideas.Common.DerivationTree",
        "name": "branches",
        "normalized": "DerivationTree a b-\u003e[(a,DerivationTree a b)]",
        "package": "ideas",
        "partial": "",
        "signature": "DerivationTree s a-\u003e[(s,DerivationTree s a)]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-DerivationTree.html#v:cutOnStep",
      "description": {
        "fct-module": "Ideas.Common.DerivationTree",
        "fct-package": "ideas",
        "fct-signature": "(s -\u003e Bool) -\u003e DerivationTree s a -\u003e DerivationTree s a",
        "fct-source": "src/Ideas-Common-DerivationTree.html#cutOnStep",
        "fct-type": "function",
        "title": "cutOnStep"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common DerivationTree",
        "module": "Ideas.Common.DerivationTree",
        "name": "cutOnStep",
        "normalized": "(a-\u003eBool)-\u003eDerivationTree a b-\u003eDerivationTree a b",
        "package": "ideas",
        "partial": "On Step",
        "signature": "(s-\u003eBool)-\u003eDerivationTree s a-\u003eDerivationTree s a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-DerivationTree.html#v:cutOnTerm",
      "description": {
        "fct-module": "Ideas.Common.DerivationTree",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e Bool) -\u003e DerivationTree s a -\u003e DerivationTree s a",
        "fct-source": "src/Ideas-Common-DerivationTree.html#cutOnTerm",
        "fct-type": "function",
        "title": "cutOnTerm"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common DerivationTree",
        "module": "Ideas.Common.DerivationTree",
        "name": "cutOnTerm",
        "normalized": "(a-\u003eBool)-\u003eDerivationTree b a-\u003eDerivationTree b a",
        "package": "ideas",
        "partial": "On Term",
        "signature": "(a-\u003eBool)-\u003eDerivationTree s a-\u003eDerivationTree s a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-DerivationTree.html#v:derivation",
      "description": {
        "fct-descr": "\u003cp\u003eThe first derivation (if any)\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.DerivationTree",
        "fct-package": "ideas",
        "fct-signature": "DerivationTree s a -\u003e Maybe (Derivation s a)",
        "fct-source": "src/Ideas-Common-DerivationTree.html#derivation",
        "fct-type": "function",
        "title": "derivation"
      },
      "index": {
        "description": "The first derivation if any",
        "hierarchy": "Ideas Common DerivationTree",
        "module": "Ideas.Common.DerivationTree",
        "name": "derivation",
        "normalized": "DerivationTree a b-\u003eMaybe(Derivation a b)",
        "package": "ideas",
        "partial": "",
        "signature": "DerivationTree s a-\u003eMaybe(Derivation s a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-DerivationTree.html#v:derivations",
      "description": {
        "fct-descr": "\u003cp\u003eAll possible derivations (returned in a list)\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.DerivationTree",
        "fct-package": "ideas",
        "fct-signature": "DerivationTree s a -\u003e [Derivation s a]",
        "fct-source": "src/Ideas-Common-DerivationTree.html#derivations",
        "fct-type": "function",
        "title": "derivations"
      },
      "index": {
        "description": "All possible derivations returned in list",
        "hierarchy": "Ideas Common DerivationTree",
        "module": "Ideas.Common.DerivationTree",
        "name": "derivations",
        "normalized": "DerivationTree a b-\u003e[Derivation a b]",
        "package": "ideas",
        "partial": "",
        "signature": "DerivationTree s a-\u003e[Derivation s a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-DerivationTree.html#v:endpoint",
      "description": {
        "fct-descr": "\u003cp\u003eIs this node an endpoint?\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.DerivationTree",
        "fct-package": "ideas",
        "fct-signature": "DerivationTree s a -\u003e Bool",
        "fct-source": "src/Ideas-Common-DerivationTree.html#endpoint",
        "fct-type": "function",
        "title": "endpoint"
      },
      "index": {
        "description": "Is this node an endpoint",
        "hierarchy": "Ideas Common DerivationTree",
        "module": "Ideas.Common.DerivationTree",
        "name": "endpoint",
        "normalized": "DerivationTree a b-\u003eBool",
        "package": "ideas",
        "partial": "",
        "signature": "DerivationTree s a-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-DerivationTree.html#v:leafs",
      "description": {
        "fct-descr": "\u003cp\u003eReturns all leafs, i.e., final results in derivation. Be careful:\n the returned list may be very long\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.DerivationTree",
        "fct-package": "ideas",
        "fct-signature": "DerivationTree s a -\u003e [a]",
        "fct-source": "src/Ideas-Common-DerivationTree.html#leafs",
        "fct-type": "function",
        "title": "leafs"
      },
      "index": {
        "description": "Returns all leafs i.e final results in derivation Be careful the returned list may be very long",
        "hierarchy": "Ideas Common DerivationTree",
        "module": "Ideas.Common.DerivationTree",
        "name": "leafs",
        "normalized": "DerivationTree a b-\u003e[b]",
        "package": "ideas",
        "partial": "",
        "signature": "DerivationTree s a-\u003e[a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-DerivationTree.html#v:lengthMax",
      "description": {
        "fct-descr": "\u003cp\u003eThe argument supplied is the maximum number of steps; if more steps are\n needed, Nothing is returned\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.DerivationTree",
        "fct-package": "ideas",
        "fct-signature": "Int -\u003e DerivationTree s a -\u003e Maybe Int",
        "fct-source": "src/Ideas-Common-DerivationTree.html#lengthMax",
        "fct-type": "function",
        "title": "lengthMax"
      },
      "index": {
        "description": "The argument supplied is the maximum number of steps if more steps are needed Nothing is returned",
        "hierarchy": "Ideas Common DerivationTree",
        "module": "Ideas.Common.DerivationTree",
        "name": "lengthMax",
        "normalized": "Int-\u003eDerivationTree a b-\u003eMaybe Int",
        "package": "ideas",
        "partial": "Max",
        "signature": "Int-\u003eDerivationTree s a-\u003eMaybe Int"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-DerivationTree.html#v:makeTree",
      "description": {
        "fct-module": "Ideas.Common.DerivationTree",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e (Bool, [(s, a)])) -\u003e a -\u003e DerivationTree s a",
        "fct-source": "src/Ideas-Common-DerivationTree.html#makeTree",
        "fct-type": "function",
        "title": "makeTree"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common DerivationTree",
        "module": "Ideas.Common.DerivationTree",
        "name": "makeTree",
        "normalized": "(a-\u003e(Bool,[(b,a)]))-\u003ea-\u003eDerivationTree b a",
        "package": "ideas",
        "partial": "Tree",
        "signature": "(a-\u003e(Bool,[(s,a)]))-\u003ea-\u003eDerivationTree s a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-DerivationTree.html#v:mergeMaybeSteps",
      "description": {
        "fct-module": "Ideas.Common.DerivationTree",
        "fct-package": "ideas",
        "fct-signature": "DerivationTree (Maybe s) a -\u003e DerivationTree s a",
        "fct-source": "src/Ideas-Common-DerivationTree.html#mergeMaybeSteps",
        "fct-type": "function",
        "title": "mergeMaybeSteps"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common DerivationTree",
        "module": "Ideas.Common.DerivationTree",
        "name": "mergeMaybeSteps",
        "normalized": "DerivationTree(Maybe a)b-\u003eDerivationTree a b",
        "package": "ideas",
        "partial": "Maybe Steps",
        "signature": "DerivationTree(Maybe s)a-\u003eDerivationTree s a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-DerivationTree.html#v:randomDerivation",
      "description": {
        "fct-descr": "\u003cp\u003eReturn  a random derivation (if any exists at all)\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.DerivationTree",
        "fct-package": "ideas",
        "fct-signature": "g -\u003e DerivationTree s a -\u003e Maybe (Derivation s a)",
        "fct-source": "src/Ideas-Common-DerivationTree.html#randomDerivation",
        "fct-type": "function",
        "title": "randomDerivation"
      },
      "index": {
        "description": "Return random derivation if any exists at all",
        "hierarchy": "Ideas Common DerivationTree",
        "module": "Ideas.Common.DerivationTree",
        "name": "randomDerivation",
        "normalized": "a-\u003eDerivationTree b c-\u003eMaybe(Derivation b c)",
        "package": "ideas",
        "partial": "Derivation",
        "signature": "g-\u003eDerivationTree s a-\u003eMaybe(Derivation s a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-DerivationTree.html#v:restrictHeight",
      "description": {
        "fct-descr": "\u003cp\u003eRestrict the height of the tree (by cutting off branches at a certain depth).\n Nodes at this particular depth are turned into endpoints\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.DerivationTree",
        "fct-package": "ideas",
        "fct-signature": "Int -\u003e DerivationTree s a -\u003e DerivationTree s a",
        "fct-source": "src/Ideas-Common-DerivationTree.html#restrictHeight",
        "fct-type": "function",
        "title": "restrictHeight"
      },
      "index": {
        "description": "Restrict the height of the tree by cutting off branches at certain depth Nodes at this particular depth are turned into endpoints",
        "hierarchy": "Ideas Common DerivationTree",
        "module": "Ideas.Common.DerivationTree",
        "name": "restrictHeight",
        "normalized": "Int-\u003eDerivationTree a b-\u003eDerivationTree a b",
        "package": "ideas",
        "partial": "Height",
        "signature": "Int-\u003eDerivationTree s a-\u003eDerivationTree s a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-DerivationTree.html#v:restrictWidth",
      "description": {
        "fct-descr": "\u003cp\u003eRestrict the width of the tree (by cutting off branches).\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.DerivationTree",
        "fct-package": "ideas",
        "fct-signature": "Int -\u003e DerivationTree s a -\u003e DerivationTree s a",
        "fct-source": "src/Ideas-Common-DerivationTree.html#restrictWidth",
        "fct-type": "function",
        "title": "restrictWidth"
      },
      "index": {
        "description": "Restrict the width of the tree by cutting off branches",
        "hierarchy": "Ideas Common DerivationTree",
        "module": "Ideas.Common.DerivationTree",
        "name": "restrictWidth",
        "normalized": "Int-\u003eDerivationTree a b-\u003eDerivationTree a b",
        "package": "ideas",
        "partial": "Width",
        "signature": "Int-\u003eDerivationTree s a-\u003eDerivationTree s a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-DerivationTree.html#v:root",
      "description": {
        "fct-descr": "\u003cp\u003eThe root of the tree\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.DerivationTree",
        "fct-package": "ideas",
        "fct-signature": "DerivationTree s a -\u003e a",
        "fct-source": "src/Ideas-Common-DerivationTree.html#root",
        "fct-type": "function",
        "title": "root"
      },
      "index": {
        "description": "The root of the tree",
        "hierarchy": "Ideas Common DerivationTree",
        "module": "Ideas.Common.DerivationTree",
        "name": "root",
        "normalized": "DerivationTree a b-\u003eb",
        "package": "ideas",
        "partial": "",
        "signature": "DerivationTree s a-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-DerivationTree.html#v:singleNode",
      "description": {
        "fct-descr": "\u003cp\u003eConstructs a node without branches; the boolean indicates whether the\n node is an endpoint or not\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.DerivationTree",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e Bool -\u003e DerivationTree s a",
        "fct-source": "src/Ideas-Common-DerivationTree.html#singleNode",
        "fct-type": "function",
        "title": "singleNode"
      },
      "index": {
        "description": "Constructs node without branches the boolean indicates whether the node is an endpoint or not",
        "hierarchy": "Ideas Common DerivationTree",
        "module": "Ideas.Common.DerivationTree",
        "name": "singleNode",
        "normalized": "a-\u003eBool-\u003eDerivationTree b a",
        "package": "ideas",
        "partial": "Node",
        "signature": "a-\u003eBool-\u003eDerivationTree s a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-DerivationTree.html#v:sortTree",
      "description": {
        "fct-module": "Ideas.Common.DerivationTree",
        "fct-package": "ideas",
        "fct-signature": "(l -\u003e l -\u003e Ordering) -\u003e DerivationTree l a -\u003e DerivationTree l a",
        "fct-source": "src/Ideas-Common-DerivationTree.html#sortTree",
        "fct-type": "function",
        "title": "sortTree"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common DerivationTree",
        "module": "Ideas.Common.DerivationTree",
        "name": "sortTree",
        "normalized": "(a-\u003ea-\u003eOrdering)-\u003eDerivationTree a b-\u003eDerivationTree a b",
        "package": "ideas",
        "partial": "Tree",
        "signature": "(l-\u003el-\u003eOrdering)-\u003eDerivationTree l a-\u003eDerivationTree l a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-DerivationTree.html#v:subtrees",
      "description": {
        "fct-descr": "\u003cp\u003eReturns all subtrees at a given node\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.DerivationTree",
        "fct-package": "ideas",
        "fct-signature": "DerivationTree s a -\u003e [DerivationTree s a]",
        "fct-source": "src/Ideas-Common-DerivationTree.html#subtrees",
        "fct-type": "function",
        "title": "subtrees"
      },
      "index": {
        "description": "Returns all subtrees at given node",
        "hierarchy": "Ideas Common DerivationTree",
        "module": "Ideas.Common.DerivationTree",
        "name": "subtrees",
        "normalized": "DerivationTree a b-\u003e[DerivationTree a b]",
        "package": "ideas",
        "partial": "",
        "signature": "DerivationTree s a-\u003e[DerivationTree s a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-DerivationTree.html#v:updateAnnotations",
      "description": {
        "fct-module": "Ideas.Common.DerivationTree",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e s -\u003e a -\u003e t) -\u003e DerivationTree s a -\u003e DerivationTree t a",
        "fct-source": "src/Ideas-Common-DerivationTree.html#updateAnnotations",
        "fct-type": "function",
        "title": "updateAnnotations"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common DerivationTree",
        "module": "Ideas.Common.DerivationTree",
        "name": "updateAnnotations",
        "normalized": "(a-\u003eb-\u003ea-\u003ec)-\u003eDerivationTree b a-\u003eDerivationTree c a",
        "package": "ideas",
        "partial": "Annotations",
        "signature": "(a-\u003es-\u003ea-\u003et)-\u003eDerivationTree s a-\u003eDerivationTree t a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Environment.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eReferences, bindings, and heterogenous environments\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "Ideas.Common.Environment",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Common-Environment.html",
        "fct-type": "module",
        "title": "Environment"
      },
      "index": {
        "description": "References bindings and heterogenous environments",
        "hierarchy": "Ideas Common Environment",
        "module": "Ideas.Common.Environment",
        "name": "Environment",
        "normalized": "",
        "package": "ideas",
        "partial": "Environment",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Environment.html#t:Binding",
      "description": {
        "fct-module": "Ideas.Common.Environment",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Common-Environment.html#Binding",
        "fct-type": "data",
        "title": "Binding"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Environment",
        "module": "Ideas.Common.Environment",
        "name": "Binding",
        "normalized": "",
        "package": "ideas",
        "partial": "Binding",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Environment.html#t:Environment",
      "description": {
        "fct-module": "Ideas.Common.Environment",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Common-Environment.html#Environment",
        "fct-type": "data",
        "title": "Environment"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Environment",
        "module": "Ideas.Common.Environment",
        "name": "Environment",
        "normalized": "",
        "package": "ideas",
        "partial": "Environment",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Environment.html#t:HasEnvironment",
      "description": {
        "fct-module": "Ideas.Common.Environment",
        "fct-package": "ideas",
        "fct-signature": "class",
        "fct-source": "src/Ideas-Common-Environment.html#HasEnvironment",
        "fct-type": "class",
        "title": "HasEnvironment"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Environment",
        "module": "Ideas.Common.Environment",
        "name": "HasEnvironment",
        "normalized": "",
        "package": "ideas",
        "partial": "Has Environment",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Environment.html#t:HasRefs",
      "description": {
        "fct-module": "Ideas.Common.Environment",
        "fct-package": "ideas",
        "fct-signature": "class",
        "fct-source": "src/Ideas-Common-Environment.html#HasRefs",
        "fct-type": "class",
        "title": "HasRefs"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Environment",
        "module": "Ideas.Common.Environment",
        "name": "HasRefs",
        "normalized": "",
        "package": "ideas",
        "partial": "Has Refs",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Environment.html#t:Ref",
      "description": {
        "fct-descr": "\u003cp\u003eA data type for references (without a value)\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Environment",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Common-Environment.html#Ref",
        "fct-type": "data",
        "title": "Ref"
      },
      "index": {
        "description": "data type for references without value",
        "hierarchy": "Ideas Common Environment",
        "module": "Ideas.Common.Environment",
        "name": "Ref",
        "normalized": "",
        "package": "ideas",
        "partial": "Ref",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Environment.html#t:Reference",
      "description": {
        "fct-descr": "\u003cp\u003eA type class for types as references\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Environment",
        "fct-package": "ideas",
        "fct-signature": "class",
        "fct-source": "src/Ideas-Common-Environment.html#Reference",
        "fct-type": "class",
        "title": "Reference"
      },
      "index": {
        "description": "type class for types as references",
        "hierarchy": "Ideas Common Environment",
        "module": "Ideas.Common.Environment",
        "name": "Reference",
        "normalized": "",
        "package": "ideas",
        "partial": "Reference",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Environment.html#v:-63-",
      "description": {
        "fct-module": "Ideas.Common.Environment",
        "fct-package": "ideas",
        "fct-signature": "Ref a -\u003e env -\u003e Maybe a",
        "fct-source": "src/Ideas-Common-Environment.html#%3F",
        "fct-type": "function",
        "title": "(?)"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Environment",
        "module": "Ideas.Common.Environment",
        "name": "(?) ?",
        "normalized": "Ref a-\u003eb-\u003eMaybe a",
        "package": "ideas",
        "partial": "",
        "signature": "Ref a-\u003eenv-\u003eMaybe a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Environment.html#v:allRefs",
      "description": {
        "fct-module": "Ideas.Common.Environment",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e [Some Ref]",
        "fct-source": "src/Ideas-Common-Environment.html#allRefs",
        "fct-type": "method",
        "title": "allRefs"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Environment",
        "module": "Ideas.Common.Environment",
        "name": "allRefs",
        "normalized": "a-\u003e[Some Ref]",
        "package": "ideas",
        "partial": "Refs",
        "signature": "a-\u003e[Some Ref]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Environment.html#v:bindings",
      "description": {
        "fct-module": "Ideas.Common.Environment",
        "fct-package": "ideas",
        "fct-signature": "env -\u003e [Binding]",
        "fct-source": "src/Ideas-Common-Environment.html#bindings",
        "fct-type": "function",
        "title": "bindings"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Environment",
        "module": "Ideas.Common.Environment",
        "name": "bindings",
        "normalized": "a-\u003e[Binding]",
        "package": "ideas",
        "partial": "",
        "signature": "env-\u003e[Binding]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Environment.html#v:changeRef",
      "description": {
        "fct-module": "Ideas.Common.Environment",
        "fct-package": "ideas",
        "fct-signature": "Ref a -\u003e (a -\u003e a) -\u003e env -\u003e env",
        "fct-source": "src/Ideas-Common-Environment.html#changeRef",
        "fct-type": "method",
        "title": "changeRef"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Environment",
        "module": "Ideas.Common.Environment",
        "name": "changeRef",
        "normalized": "Ref a-\u003e(a-\u003ea)-\u003eb-\u003eb",
        "package": "ideas",
        "partial": "Ref",
        "signature": "Ref a-\u003e(a-\u003ea)-\u003eenv-\u003eenv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Environment.html#v:deleteRef",
      "description": {
        "fct-module": "Ideas.Common.Environment",
        "fct-package": "ideas",
        "fct-signature": "Ref a -\u003e env -\u003e env",
        "fct-source": "src/Ideas-Common-Environment.html#deleteRef",
        "fct-type": "method",
        "title": "deleteRef"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Environment",
        "module": "Ideas.Common.Environment",
        "name": "deleteRef",
        "normalized": "Ref a-\u003eb-\u003eb",
        "package": "ideas",
        "partial": "Ref",
        "signature": "Ref a-\u003eenv-\u003eenv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Environment.html#v:environment",
      "description": {
        "fct-module": "Ideas.Common.Environment",
        "fct-package": "ideas",
        "fct-signature": "env -\u003e Environment",
        "fct-source": "src/Ideas-Common-Environment.html#environment",
        "fct-type": "method",
        "title": "environment"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Environment",
        "module": "Ideas.Common.Environment",
        "name": "environment",
        "normalized": "a-\u003eEnvironment",
        "package": "ideas",
        "partial": "",
        "signature": "env-\u003eEnvironment"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Environment.html#v:fromBinding",
      "description": {
        "fct-module": "Ideas.Common.Environment",
        "fct-package": "ideas",
        "fct-signature": "Binding -\u003e Maybe (Ref a, a)",
        "fct-source": "src/Ideas-Common-Environment.html#fromBinding",
        "fct-type": "function",
        "title": "fromBinding"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Environment",
        "module": "Ideas.Common.Environment",
        "name": "fromBinding",
        "normalized": "Binding-\u003eMaybe(Ref a,a)",
        "package": "ideas",
        "partial": "Binding",
        "signature": "Binding-\u003eMaybe(Ref a,a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Environment.html#v:getRefIds",
      "description": {
        "fct-module": "Ideas.Common.Environment",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e [Id]",
        "fct-source": "src/Ideas-Common-Environment.html#getRefIds",
        "fct-type": "method",
        "title": "getRefIds"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Environment",
        "module": "Ideas.Common.Environment",
        "name": "getRefIds",
        "normalized": "a-\u003e[Id]",
        "package": "ideas",
        "partial": "Ref Ids",
        "signature": "a-\u003e[Id]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Environment.html#v:getRefs",
      "description": {
        "fct-module": "Ideas.Common.Environment",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e [Some Ref]",
        "fct-source": "src/Ideas-Common-Environment.html#getRefs",
        "fct-type": "method",
        "title": "getRefs"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Environment",
        "module": "Ideas.Common.Environment",
        "name": "getRefs",
        "normalized": "a-\u003e[Some Ref]",
        "package": "ideas",
        "partial": "Refs",
        "signature": "a-\u003e[Some Ref]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Environment.html#v:getTermValue",
      "description": {
        "fct-module": "Ideas.Common.Environment",
        "fct-package": "ideas",
        "fct-signature": "Binding -\u003e Term",
        "fct-source": "src/Ideas-Common-Environment.html#getTermValue",
        "fct-type": "function",
        "title": "getTermValue"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Environment",
        "module": "Ideas.Common.Environment",
        "name": "getTermValue",
        "normalized": "Binding-\u003eTerm",
        "package": "ideas",
        "partial": "Term Value",
        "signature": "Binding-\u003eTerm"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Environment.html#v:insertRef",
      "description": {
        "fct-module": "Ideas.Common.Environment",
        "fct-package": "ideas",
        "fct-signature": "Ref a -\u003e a -\u003e env -\u003e env",
        "fct-source": "src/Ideas-Common-Environment.html#insertRef",
        "fct-type": "method",
        "title": "insertRef"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Environment",
        "module": "Ideas.Common.Environment",
        "name": "insertRef",
        "normalized": "Ref a-\u003ea-\u003eb-\u003eb",
        "package": "ideas",
        "partial": "Ref",
        "signature": "Ref a-\u003ea-\u003eenv-\u003eenv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Environment.html#v:makeBinding",
      "description": {
        "fct-module": "Ideas.Common.Environment",
        "fct-package": "ideas",
        "fct-signature": "Ref a -\u003e a -\u003e Binding",
        "fct-source": "src/Ideas-Common-Environment.html#makeBinding",
        "fct-type": "function",
        "title": "makeBinding"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Environment",
        "module": "Ideas.Common.Environment",
        "name": "makeBinding",
        "normalized": "Ref a-\u003ea-\u003eBinding",
        "package": "ideas",
        "partial": "Binding",
        "signature": "Ref a-\u003ea-\u003eBinding"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Environment.html#v:makeEnvironment",
      "description": {
        "fct-module": "Ideas.Common.Environment",
        "fct-package": "ideas",
        "fct-signature": "[Binding] -\u003e Environment",
        "fct-source": "src/Ideas-Common-Environment.html#makeEnvironment",
        "fct-type": "function",
        "title": "makeEnvironment"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Environment",
        "module": "Ideas.Common.Environment",
        "name": "makeEnvironment",
        "normalized": "[Binding]-\u003eEnvironment",
        "package": "ideas",
        "partial": "Environment",
        "signature": "[Binding]-\u003eEnvironment"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Environment.html#v:makeRef",
      "description": {
        "fct-module": "Ideas.Common.Environment",
        "fct-package": "ideas",
        "fct-signature": "n -\u003e Ref a",
        "fct-source": "src/Ideas-Common-Environment.html#makeRef",
        "fct-type": "method",
        "title": "makeRef"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Environment",
        "module": "Ideas.Common.Environment",
        "name": "makeRef",
        "normalized": "a-\u003eRef b",
        "package": "ideas",
        "partial": "Ref",
        "signature": "n-\u003eRef a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Environment.html#v:makeRefList",
      "description": {
        "fct-module": "Ideas.Common.Environment",
        "fct-package": "ideas",
        "fct-signature": "n -\u003e Ref [a]",
        "fct-source": "src/Ideas-Common-Environment.html#makeRefList",
        "fct-type": "method",
        "title": "makeRefList"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Environment",
        "module": "Ideas.Common.Environment",
        "name": "makeRefList",
        "normalized": "a-\u003eRef[b]",
        "package": "ideas",
        "partial": "Ref List",
        "signature": "n-\u003eRef[a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Environment.html#v:noBindings",
      "description": {
        "fct-module": "Ideas.Common.Environment",
        "fct-package": "ideas",
        "fct-signature": "env -\u003e Bool",
        "fct-source": "src/Ideas-Common-Environment.html#noBindings",
        "fct-type": "function",
        "title": "noBindings"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Environment",
        "module": "Ideas.Common.Environment",
        "name": "noBindings",
        "normalized": "a-\u003eBool",
        "package": "ideas",
        "partial": "Bindings",
        "signature": "env-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Environment.html#v:setEnvironment",
      "description": {
        "fct-module": "Ideas.Common.Environment",
        "fct-package": "ideas",
        "fct-signature": "Environment -\u003e env -\u003e env",
        "fct-source": "src/Ideas-Common-Environment.html#setEnvironment",
        "fct-type": "method",
        "title": "setEnvironment"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Environment",
        "module": "Ideas.Common.Environment",
        "name": "setEnvironment",
        "normalized": "Environment-\u003ea-\u003ea",
        "package": "ideas",
        "partial": "Environment",
        "signature": "Environment-\u003eenv-\u003eenv"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Environment.html#v:showValue",
      "description": {
        "fct-module": "Ideas.Common.Environment",
        "fct-package": "ideas",
        "fct-signature": "Binding -\u003e String",
        "fct-source": "src/Ideas-Common-Environment.html#showValue",
        "fct-type": "function",
        "title": "showValue"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Environment",
        "module": "Ideas.Common.Environment",
        "name": "showValue",
        "normalized": "Binding-\u003eString",
        "package": "ideas",
        "partial": "Value",
        "signature": "Binding-\u003eString"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Environment.html#v:singleBinding",
      "description": {
        "fct-module": "Ideas.Common.Environment",
        "fct-package": "ideas",
        "fct-signature": "Ref a -\u003e a -\u003e Environment",
        "fct-source": "src/Ideas-Common-Environment.html#singleBinding",
        "fct-type": "function",
        "title": "singleBinding"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Environment",
        "module": "Ideas.Common.Environment",
        "name": "singleBinding",
        "normalized": "Ref a-\u003ea-\u003eEnvironment",
        "package": "ideas",
        "partial": "Binding",
        "signature": "Ref a-\u003ea-\u003eEnvironment"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Exercise.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eThis module defines the concept of an exercise\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "Ideas.Common.Exercise",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Common-Exercise.html",
        "fct-type": "module",
        "title": "Exercise"
      },
      "index": {
        "description": "This module defines the concept of an exercise",
        "hierarchy": "Ideas Common Exercise",
        "module": "Ideas.Common.Exercise",
        "name": "Exercise",
        "normalized": "",
        "package": "ideas",
        "partial": "Exercise",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Exercise.html#t:Difficulty",
      "description": {
        "fct-module": "Ideas.Common.Exercise",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Common-Exercise.html#Difficulty",
        "fct-type": "data",
        "title": "Difficulty"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Exercise",
        "module": "Ideas.Common.Exercise",
        "name": "Difficulty",
        "normalized": "",
        "package": "ideas",
        "partial": "Difficulty",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Exercise.html#t:Examples",
      "description": {
        "fct-module": "Ideas.Common.Exercise",
        "fct-package": "ideas",
        "fct-signature": "type",
        "fct-source": "src/Ideas-Common-Exercise.html#Examples",
        "fct-type": "type",
        "title": "Examples"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Exercise",
        "module": "Ideas.Common.Exercise",
        "name": "Examples",
        "normalized": "",
        "package": "ideas",
        "partial": "Examples",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Exercise.html#t:Exercise",
      "description": {
        "fct-module": "Ideas.Common.Exercise",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Common-Exercise.html#Exercise",
        "fct-type": "data",
        "title": "Exercise"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Exercise",
        "module": "Ideas.Common.Exercise",
        "name": "Exercise",
        "normalized": "",
        "package": "ideas",
        "partial": "Exercise",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Exercise.html#t:ExerciseDerivation",
      "description": {
        "fct-module": "Ideas.Common.Exercise",
        "fct-package": "ideas",
        "fct-signature": "type",
        "fct-source": "src/Ideas-Common-Exercise.html#ExerciseDerivation",
        "fct-type": "type",
        "title": "ExerciseDerivation"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Exercise",
        "module": "Ideas.Common.Exercise",
        "name": "ExerciseDerivation",
        "normalized": "",
        "package": "ideas",
        "partial": "Exercise Derivation",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Exercise.html#t:Status",
      "description": {
        "fct-module": "Ideas.Common.Exercise",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Common-Exercise.html#Status",
        "fct-type": "data",
        "title": "Status"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Exercise",
        "module": "Ideas.Common.Exercise",
        "name": "Status",
        "normalized": "",
        "package": "ideas",
        "partial": "Status",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Exercise.html#v:Alpha",
      "description": {
        "fct-descr": "\u003cp\u003eAn exercise that is under development\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Exercise",
        "fct-package": "ideas",
        "fct-signature": "Alpha",
        "fct-source": "src/Ideas-Common-Exercise.html#Status",
        "fct-type": "function",
        "title": "Alpha"
      },
      "index": {
        "description": "An exercise that is under development",
        "hierarchy": "Ideas Common Exercise",
        "module": "Ideas.Common.Exercise",
        "name": "Alpha",
        "normalized": "",
        "package": "ideas",
        "partial": "Alpha",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Exercise.html#v:Difficult",
      "description": {
        "fct-module": "Ideas.Common.Exercise",
        "fct-package": "ideas",
        "fct-signature": "Difficult",
        "fct-source": "src/Ideas-Common-Exercise.html#Difficulty",
        "fct-type": "function",
        "title": "Difficult"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Exercise",
        "module": "Ideas.Common.Exercise",
        "name": "Difficult",
        "normalized": "",
        "package": "ideas",
        "partial": "Difficult",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Exercise.html#v:Easy",
      "description": {
        "fct-module": "Ideas.Common.Exercise",
        "fct-package": "ideas",
        "fct-signature": "Easy",
        "fct-source": "src/Ideas-Common-Exercise.html#Difficulty",
        "fct-type": "function",
        "title": "Easy"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Exercise",
        "module": "Ideas.Common.Exercise",
        "name": "Easy",
        "normalized": "",
        "package": "ideas",
        "partial": "Easy",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Exercise.html#v:Experimental",
      "description": {
        "fct-descr": "\u003cp\u003eAn exercise for experimentation purposes only\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Exercise",
        "fct-package": "ideas",
        "fct-signature": "Experimental",
        "fct-source": "src/Ideas-Common-Exercise.html#Status",
        "fct-type": "function",
        "title": "Experimental"
      },
      "index": {
        "description": "An exercise for experimentation purposes only",
        "hierarchy": "Ideas Common Exercise",
        "module": "Ideas.Common.Exercise",
        "name": "Experimental",
        "normalized": "",
        "package": "ideas",
        "partial": "Experimental",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Exercise.html#v:Medium",
      "description": {
        "fct-module": "Ideas.Common.Exercise",
        "fct-package": "ideas",
        "fct-signature": "Medium",
        "fct-source": "src/Ideas-Common-Exercise.html#Difficulty",
        "fct-type": "function",
        "title": "Medium"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Exercise",
        "module": "Ideas.Common.Exercise",
        "name": "Medium",
        "normalized": "",
        "package": "ideas",
        "partial": "Medium",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Exercise.html#v:Provisional",
      "description": {
        "fct-descr": "\u003cp\u003eA released exercise, possibly with some deficiencies\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Exercise",
        "fct-package": "ideas",
        "fct-signature": "Provisional",
        "fct-source": "src/Ideas-Common-Exercise.html#Status",
        "fct-type": "function",
        "title": "Provisional"
      },
      "index": {
        "description": "released exercise possibly with some deficiencies",
        "hierarchy": "Ideas Common Exercise",
        "module": "Ideas.Common.Exercise",
        "name": "Provisional",
        "normalized": "",
        "package": "ideas",
        "partial": "Provisional",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Exercise.html#v:Stable",
      "description": {
        "fct-descr": "\u003cp\u003eA released exercise that has undergone some thorough testing\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Exercise",
        "fct-package": "ideas",
        "fct-signature": "Stable",
        "fct-source": "src/Ideas-Common-Exercise.html#Status",
        "fct-type": "function",
        "title": "Stable"
      },
      "index": {
        "description": "released exercise that has undergone some thorough testing",
        "hierarchy": "Ideas Common Exercise",
        "module": "Ideas.Common.Exercise",
        "name": "Stable",
        "normalized": "",
        "package": "ideas",
        "partial": "Stable",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Exercise.html#v:VeryDifficult",
      "description": {
        "fct-module": "Ideas.Common.Exercise",
        "fct-package": "ideas",
        "fct-signature": "VeryDifficult",
        "fct-source": "src/Ideas-Common-Exercise.html#Difficulty",
        "fct-type": "function",
        "title": "VeryDifficult"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Exercise",
        "module": "Ideas.Common.Exercise",
        "name": "VeryDifficult",
        "normalized": "",
        "package": "ideas",
        "partial": "Very Difficult",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Exercise.html#v:VeryEasy",
      "description": {
        "fct-module": "Ideas.Common.Exercise",
        "fct-package": "ideas",
        "fct-signature": "VeryEasy",
        "fct-source": "src/Ideas-Common-Exercise.html#Difficulty",
        "fct-type": "function",
        "title": "VeryEasy"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Exercise",
        "module": "Ideas.Common.Exercise",
        "name": "VeryEasy",
        "normalized": "",
        "package": "ideas",
        "partial": "Very Easy",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Exercise.html#v:canBeRestarted",
      "description": {
        "fct-module": "Ideas.Common.Exercise",
        "fct-package": "ideas",
        "fct-signature": "Exercise a -\u003e Bool",
        "fct-source": "src/Ideas-Common-Exercise.html#canBeRestarted",
        "fct-type": "function",
        "title": "canBeRestarted"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Exercise",
        "module": "Ideas.Common.Exercise",
        "name": "canBeRestarted",
        "normalized": "Exercise a-\u003eBool",
        "package": "ideas",
        "partial": "Be Restarted",
        "signature": "Exercise a-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Exercise.html#v:castFrom",
      "description": {
        "fct-module": "Ideas.Common.Exercise",
        "fct-package": "ideas",
        "fct-signature": "Exercise a -\u003e a -\u003e Maybe b",
        "fct-source": "src/Ideas-Common-Exercise.html#castFrom",
        "fct-type": "function",
        "title": "castFrom"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Exercise",
        "module": "Ideas.Common.Exercise",
        "name": "castFrom",
        "normalized": "Exercise a-\u003ea-\u003eMaybe b",
        "package": "ideas",
        "partial": "From",
        "signature": "Exercise a-\u003ea-\u003eMaybe b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Exercise.html#v:castTo",
      "description": {
        "fct-module": "Ideas.Common.Exercise",
        "fct-package": "ideas",
        "fct-signature": "Exercise a -\u003e b -\u003e Maybe a",
        "fct-source": "src/Ideas-Common-Exercise.html#castTo",
        "fct-type": "function",
        "title": "castTo"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Exercise",
        "module": "Ideas.Common.Exercise",
        "name": "castTo",
        "normalized": "Exercise a-\u003eb-\u003eMaybe a",
        "package": "ideas",
        "partial": "To",
        "signature": "Exercise a-\u003eb-\u003eMaybe a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Exercise.html#v:checkExamples",
      "description": {
        "fct-module": "Ideas.Common.Exercise",
        "fct-package": "ideas",
        "fct-signature": "Exercise a -\u003e TestSuite",
        "fct-source": "src/Ideas-Common-Exercise.html#checkExamples",
        "fct-type": "function",
        "title": "checkExamples"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Exercise",
        "module": "Ideas.Common.Exercise",
        "name": "checkExamples",
        "normalized": "Exercise a-\u003eTestSuite",
        "package": "ideas",
        "partial": "Examples",
        "signature": "Exercise a-\u003eTestSuite"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Exercise.html#v:checkExercise",
      "description": {
        "fct-module": "Ideas.Common.Exercise",
        "fct-package": "ideas",
        "fct-signature": "Exercise a -\u003e IO ()",
        "fct-source": "src/Ideas-Common-Exercise.html#checkExercise",
        "fct-type": "function",
        "title": "checkExercise"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Exercise",
        "module": "Ideas.Common.Exercise",
        "name": "checkExercise",
        "normalized": "Exercise a-\u003eIO()",
        "package": "ideas",
        "partial": "Exercise",
        "signature": "Exercise a-\u003eIO()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Exercise.html#v:checkParserPretty",
      "description": {
        "fct-module": "Ideas.Common.Exercise",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e a -\u003e Bool) -\u003e (String -\u003e Either String a) -\u003e (a -\u003e String) -\u003e a -\u003e Bool",
        "fct-source": "src/Ideas-Common-Exercise.html#checkParserPretty",
        "fct-type": "function",
        "title": "checkParserPretty"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Exercise",
        "module": "Ideas.Common.Exercise",
        "name": "checkParserPretty",
        "normalized": "(a-\u003ea-\u003eBool)-\u003e(String-\u003eEither String a)-\u003e(a-\u003eString)-\u003ea-\u003eBool",
        "package": "ideas",
        "partial": "Parser Pretty",
        "signature": "(a-\u003ea-\u003eBool)-\u003e(String-\u003eEither String a)-\u003e(a-\u003eString)-\u003ea-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Exercise.html#v:defaultDerivation",
      "description": {
        "fct-module": "Ideas.Common.Exercise",
        "fct-package": "ideas",
        "fct-signature": "Exercise a -\u003e a -\u003e ExerciseDerivation a",
        "fct-source": "src/Ideas-Common-Exercise.html#defaultDerivation",
        "fct-type": "function",
        "title": "defaultDerivation"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Exercise",
        "module": "Ideas.Common.Exercise",
        "name": "defaultDerivation",
        "normalized": "Exercise a-\u003ea-\u003eExerciseDerivation a",
        "package": "ideas",
        "partial": "Derivation",
        "signature": "Exercise a-\u003ea-\u003eExerciseDerivation a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Exercise.html#v:derivationDiffEnv",
      "description": {
        "fct-module": "Ideas.Common.Exercise",
        "fct-package": "ideas",
        "fct-signature": "Derivation s (Context a) -\u003e Derivation (s, Environment) (Context a)",
        "fct-source": "src/Ideas-Common-Exercise.html#derivationDiffEnv",
        "fct-type": "function",
        "title": "derivationDiffEnv"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Exercise",
        "module": "Ideas.Common.Exercise",
        "name": "derivationDiffEnv",
        "normalized": "Derivation a(Context b)-\u003eDerivation(a,Environment)(Context b)",
        "package": "ideas",
        "partial": "Diff Env",
        "signature": "Derivation s(Context a)-\u003eDerivation(s,Environment)(Context a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Exercise.html#v:difference",
      "description": {
        "fct-module": "Ideas.Common.Exercise",
        "fct-package": "ideas",
        "fct-signature": "Exercise a -\u003e a -\u003e a -\u003e Maybe (a, a)",
        "fct-source": "src/Ideas-Common-Exercise.html#difference",
        "fct-type": "function",
        "title": "difference"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Exercise",
        "module": "Ideas.Common.Exercise",
        "name": "difference",
        "normalized": "Exercise a-\u003ea-\u003ea-\u003eMaybe(a,a)",
        "package": "ideas",
        "partial": "",
        "signature": "Exercise a-\u003ea-\u003ea-\u003eMaybe(a,a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Exercise.html#v:differenceEqual",
      "description": {
        "fct-module": "Ideas.Common.Exercise",
        "fct-package": "ideas",
        "fct-signature": "Exercise a -\u003e a -\u003e a -\u003e Maybe (a, a)",
        "fct-source": "src/Ideas-Common-Exercise.html#differenceEqual",
        "fct-type": "function",
        "title": "differenceEqual"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Exercise",
        "module": "Ideas.Common.Exercise",
        "name": "differenceEqual",
        "normalized": "Exercise a-\u003ea-\u003ea-\u003eMaybe(a,a)",
        "package": "ideas",
        "partial": "Equal",
        "signature": "Exercise a-\u003ea-\u003ea-\u003eMaybe(a,a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Exercise.html#v:emptyExercise",
      "description": {
        "fct-module": "Ideas.Common.Exercise",
        "fct-package": "ideas",
        "fct-signature": "Exercise a",
        "fct-source": "src/Ideas-Common-Exercise.html#emptyExercise",
        "fct-type": "function",
        "title": "emptyExercise"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Exercise",
        "module": "Ideas.Common.Exercise",
        "name": "emptyExercise",
        "normalized": "",
        "package": "ideas",
        "partial": "Exercise",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Exercise.html#v:equivalence",
      "description": {
        "fct-module": "Ideas.Common.Exercise",
        "fct-package": "ideas",
        "fct-signature": "Exercise a -\u003e Context a -\u003e Context a -\u003e Bool",
        "fct-source": "src/Ideas-Common-Exercise.html#equivalence",
        "fct-type": "function",
        "title": "equivalence"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Exercise",
        "module": "Ideas.Common.Exercise",
        "name": "equivalence",
        "normalized": "Exercise a-\u003eContext a-\u003eContext a-\u003eBool",
        "package": "ideas",
        "partial": "",
        "signature": "Exercise a-\u003eContext a-\u003eContext a-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Exercise.html#v:examples",
      "description": {
        "fct-module": "Ideas.Common.Exercise",
        "fct-package": "ideas",
        "fct-signature": "Exercise a -\u003e [(Difficulty, a)]",
        "fct-source": "src/Ideas-Common-Exercise.html#examples",
        "fct-type": "function",
        "title": "examples"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Exercise",
        "module": "Ideas.Common.Exercise",
        "name": "examples",
        "normalized": "Exercise a-\u003e[(Difficulty,a)]",
        "package": "ideas",
        "partial": "",
        "signature": "Exercise a-\u003e[(Difficulty,a)]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Exercise.html#v:examplesContext",
      "description": {
        "fct-module": "Ideas.Common.Exercise",
        "fct-package": "ideas",
        "fct-signature": "Exercise a -\u003e Examples (Context a)",
        "fct-source": "src/Ideas-Common-Exercise.html#examplesContext",
        "fct-type": "function",
        "title": "examplesContext"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Exercise",
        "module": "Ideas.Common.Exercise",
        "name": "examplesContext",
        "normalized": "Exercise a-\u003eExamples(Context a)",
        "package": "ideas",
        "partial": "Context",
        "signature": "Exercise a-\u003eExamples(Context a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Exercise.html#v:exerciseId",
      "description": {
        "fct-module": "Ideas.Common.Exercise",
        "fct-package": "ideas",
        "fct-signature": "Exercise a -\u003e Id",
        "fct-source": "src/Ideas-Common-Exercise.html#exerciseId",
        "fct-type": "function",
        "title": "exerciseId"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Exercise",
        "module": "Ideas.Common.Exercise",
        "name": "exerciseId",
        "normalized": "Exercise a-\u003eId",
        "package": "ideas",
        "partial": "Id",
        "signature": "Exercise a-\u003eId"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Exercise.html#v:exerciseTestSuite",
      "description": {
        "fct-module": "Ideas.Common.Exercise",
        "fct-package": "ideas",
        "fct-signature": "Exercise a -\u003e TestSuite",
        "fct-source": "src/Ideas-Common-Exercise.html#exerciseTestSuite",
        "fct-type": "function",
        "title": "exerciseTestSuite"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Exercise",
        "module": "Ideas.Common.Exercise",
        "name": "exerciseTestSuite",
        "normalized": "Exercise a-\u003eTestSuite",
        "package": "ideas",
        "partial": "Test Suite",
        "signature": "Exercise a-\u003eTestSuite"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Exercise.html#v:extraRules",
      "description": {
        "fct-module": "Ideas.Common.Exercise",
        "fct-package": "ideas",
        "fct-signature": "Exercise a -\u003e [Rule (Context a)]",
        "fct-source": "src/Ideas-Common-Exercise.html#extraRules",
        "fct-type": "function",
        "title": "extraRules"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Exercise",
        "module": "Ideas.Common.Exercise",
        "name": "extraRules",
        "normalized": "Exercise a-\u003e[Rule(Context a)]",
        "package": "ideas",
        "partial": "Rules",
        "signature": "Exercise a-\u003e[Rule(Context a)]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Exercise.html#v:getRule",
      "description": {
        "fct-module": "Ideas.Common.Exercise",
        "fct-package": "ideas",
        "fct-signature": "Exercise a -\u003e Id -\u003e m (Rule (Context a))",
        "fct-source": "src/Ideas-Common-Exercise.html#getRule",
        "fct-type": "function",
        "title": "getRule"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Exercise",
        "module": "Ideas.Common.Exercise",
        "name": "getRule",
        "normalized": "Exercise a-\u003eId-\u003eb(Rule(Context a))",
        "package": "ideas",
        "partial": "Rule",
        "signature": "Exercise a-\u003eId-\u003em(Rule(Context a))"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Exercise.html#v:hasTermView",
      "description": {
        "fct-module": "Ideas.Common.Exercise",
        "fct-package": "ideas",
        "fct-signature": "Exercise a -\u003e Maybe (View Term a)",
        "fct-source": "src/Ideas-Common-Exercise.html#hasTermView",
        "fct-type": "function",
        "title": "hasTermView"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Exercise",
        "module": "Ideas.Common.Exercise",
        "name": "hasTermView",
        "normalized": "Exercise a-\u003eMaybe(View Term a)",
        "package": "ideas",
        "partial": "Term View",
        "signature": "Exercise a-\u003eMaybe(View Term a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Exercise.html#v:hasTypeable",
      "description": {
        "fct-module": "Ideas.Common.Exercise",
        "fct-package": "ideas",
        "fct-signature": "Exercise a -\u003e Maybe (IsTypeable a)",
        "fct-source": "src/Ideas-Common-Exercise.html#hasTypeable",
        "fct-type": "function",
        "title": "hasTypeable"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Exercise",
        "module": "Ideas.Common.Exercise",
        "name": "hasTypeable",
        "normalized": "Exercise a-\u003eMaybe(IsTypeable a)",
        "package": "ideas",
        "partial": "Typeable",
        "signature": "Exercise a-\u003eMaybe(IsTypeable a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Exercise.html#v:inContext",
      "description": {
        "fct-descr": "\u003cp\u003ePut a value into an empty environment\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Exercise",
        "fct-package": "ideas",
        "fct-signature": "Exercise a -\u003e a -\u003e Context a",
        "fct-source": "src/Ideas-Common-Exercise.html#inContext",
        "fct-type": "function",
        "title": "inContext"
      },
      "index": {
        "description": "Put value into an empty environment",
        "hierarchy": "Ideas Common Exercise",
        "module": "Ideas.Common.Exercise",
        "name": "inContext",
        "normalized": "Exercise a-\u003ea-\u003eContext a",
        "package": "ideas",
        "partial": "Context",
        "signature": "Exercise a-\u003ea-\u003eContext a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Exercise.html#v:isPrivate",
      "description": {
        "fct-descr": "\u003cp\u003eAn exercise that is not public\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Exercise",
        "fct-package": "ideas",
        "fct-signature": "Exercise a -\u003e Bool",
        "fct-source": "src/Ideas-Common-Exercise.html#isPrivate",
        "fct-type": "function",
        "title": "isPrivate"
      },
      "index": {
        "description": "An exercise that is not public",
        "hierarchy": "Ideas Common Exercise",
        "module": "Ideas.Common.Exercise",
        "name": "isPrivate",
        "normalized": "Exercise a-\u003eBool",
        "package": "ideas",
        "partial": "Private",
        "signature": "Exercise a-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Exercise.html#v:isPublic",
      "description": {
        "fct-descr": "\u003cp\u003eAn exercise with the status \u003ccode\u003eStable\u003c/code\u003e or \u003ccode\u003eProvisional\u003c/code\u003e\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Exercise",
        "fct-package": "ideas",
        "fct-signature": "Exercise a -\u003e Bool",
        "fct-source": "src/Ideas-Common-Exercise.html#isPublic",
        "fct-type": "function",
        "title": "isPublic"
      },
      "index": {
        "description": "An exercise with the status Stable or Provisional",
        "hierarchy": "Ideas Common Exercise",
        "module": "Ideas.Common.Exercise",
        "name": "isPublic",
        "normalized": "Exercise a-\u003eBool",
        "package": "ideas",
        "partial": "Public",
        "signature": "Exercise a-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Exercise.html#v:isReady",
      "description": {
        "fct-module": "Ideas.Common.Exercise",
        "fct-package": "ideas",
        "fct-signature": "Exercise a -\u003e a -\u003e Bool",
        "fct-source": "src/Ideas-Common-Exercise.html#isReady",
        "fct-type": "function",
        "title": "isReady"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Exercise",
        "module": "Ideas.Common.Exercise",
        "name": "isReady",
        "normalized": "Exercise a-\u003ea-\u003eBool",
        "package": "ideas",
        "partial": "Ready",
        "signature": "Exercise a-\u003ea-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Exercise.html#v:isSuitable",
      "description": {
        "fct-module": "Ideas.Common.Exercise",
        "fct-package": "ideas",
        "fct-signature": "Exercise a -\u003e a -\u003e Bool",
        "fct-source": "src/Ideas-Common-Exercise.html#isSuitable",
        "fct-type": "function",
        "title": "isSuitable"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Exercise",
        "module": "Ideas.Common.Exercise",
        "name": "isSuitable",
        "normalized": "Exercise a-\u003ea-\u003eBool",
        "package": "ideas",
        "partial": "Suitable",
        "signature": "Exercise a-\u003ea-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Exercise.html#v:level",
      "description": {
        "fct-module": "Ideas.Common.Exercise",
        "fct-package": "ideas",
        "fct-signature": "Difficulty -\u003e [a] -\u003e Examples a",
        "fct-source": "src/Ideas-Common-Exercise.html#level",
        "fct-type": "function",
        "title": "level"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Exercise",
        "module": "Ideas.Common.Exercise",
        "name": "level",
        "normalized": "Difficulty-\u003e[a]-\u003eExamples a",
        "package": "ideas",
        "partial": "",
        "signature": "Difficulty-\u003e[a]-\u003eExamples a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Exercise.html#v:makeContext",
      "description": {
        "fct-module": "Ideas.Common.Exercise",
        "fct-package": "ideas",
        "fct-signature": "Exercise a -\u003e Environment -\u003e a -\u003e Context a",
        "fct-source": "src/Ideas-Common-Exercise.html#makeContext",
        "fct-type": "function",
        "title": "makeContext"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Exercise",
        "module": "Ideas.Common.Exercise",
        "name": "makeContext",
        "normalized": "Exercise a-\u003eEnvironment-\u003ea-\u003eContext a",
        "package": "ideas",
        "partial": "Context",
        "signature": "Exercise a-\u003eEnvironment-\u003ea-\u003eContext a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Exercise.html#v:makeExercise",
      "description": {
        "fct-module": "Ideas.Common.Exercise",
        "fct-package": "ideas",
        "fct-signature": "Exercise a",
        "fct-source": "src/Ideas-Common-Exercise.html#makeExercise",
        "fct-type": "function",
        "title": "makeExercise"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Exercise",
        "module": "Ideas.Common.Exercise",
        "name": "makeExercise",
        "normalized": "",
        "package": "ideas",
        "partial": "Exercise",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Exercise.html#v:mapExamples",
      "description": {
        "fct-module": "Ideas.Common.Exercise",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e b) -\u003e Examples a -\u003e Examples b",
        "fct-source": "src/Ideas-Common-Exercise.html#mapExamples",
        "fct-type": "function",
        "title": "mapExamples"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Exercise",
        "module": "Ideas.Common.Exercise",
        "name": "mapExamples",
        "normalized": "(a-\u003eb)-\u003eExamples a-\u003eExamples b",
        "package": "ideas",
        "partial": "Examples",
        "signature": "(a-\u003eb)-\u003eExamples a-\u003eExamples b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Exercise.html#v:navigation",
      "description": {
        "fct-module": "Ideas.Common.Exercise",
        "fct-package": "ideas",
        "fct-signature": "Exercise a -\u003e a -\u003e ContextNavigator a",
        "fct-source": "src/Ideas-Common-Exercise.html#navigation",
        "fct-type": "function",
        "title": "navigation"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Exercise",
        "module": "Ideas.Common.Exercise",
        "name": "navigation",
        "normalized": "Exercise a-\u003ea-\u003eContextNavigator a",
        "package": "ideas",
        "partial": "",
        "signature": "Exercise a-\u003ea-\u003eContextNavigator a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Exercise.html#v:parser",
      "description": {
        "fct-module": "Ideas.Common.Exercise",
        "fct-package": "ideas",
        "fct-signature": "Exercise a -\u003e String -\u003e Either String a",
        "fct-source": "src/Ideas-Common-Exercise.html#parser",
        "fct-type": "function",
        "title": "parser"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Exercise",
        "module": "Ideas.Common.Exercise",
        "name": "parser",
        "normalized": "Exercise a-\u003eString-\u003eEither String a",
        "package": "ideas",
        "partial": "",
        "signature": "Exercise a-\u003eString-\u003eEither String a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Exercise.html#v:prettyPrinter",
      "description": {
        "fct-module": "Ideas.Common.Exercise",
        "fct-package": "ideas",
        "fct-signature": "Exercise a -\u003e a -\u003e String",
        "fct-source": "src/Ideas-Common-Exercise.html#prettyPrinter",
        "fct-type": "function",
        "title": "prettyPrinter"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Exercise",
        "module": "Ideas.Common.Exercise",
        "name": "prettyPrinter",
        "normalized": "Exercise a-\u003ea-\u003eString",
        "package": "ideas",
        "partial": "Printer",
        "signature": "Exercise a-\u003ea-\u003eString"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Exercise.html#v:prettyPrinterContext",
      "description": {
        "fct-module": "Ideas.Common.Exercise",
        "fct-package": "ideas",
        "fct-signature": "Exercise a -\u003e Context a -\u003e String",
        "fct-source": "src/Ideas-Common-Exercise.html#prettyPrinterContext",
        "fct-type": "function",
        "title": "prettyPrinterContext"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Exercise",
        "module": "Ideas.Common.Exercise",
        "name": "prettyPrinterContext",
        "normalized": "Exercise a-\u003eContext a-\u003eString",
        "package": "ideas",
        "partial": "Printer Context",
        "signature": "Exercise a-\u003eContext a-\u003eString"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Exercise.html#v:printDerivation",
      "description": {
        "fct-module": "Ideas.Common.Exercise",
        "fct-package": "ideas",
        "fct-signature": "Exercise a -\u003e a -\u003e IO ()",
        "fct-source": "src/Ideas-Common-Exercise.html#printDerivation",
        "fct-type": "function",
        "title": "printDerivation"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Exercise",
        "module": "Ideas.Common.Exercise",
        "name": "printDerivation",
        "normalized": "Exercise a-\u003ea-\u003eIO()",
        "package": "ideas",
        "partial": "Derivation",
        "signature": "Exercise a-\u003ea-\u003eIO()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Exercise.html#v:randomExercise",
      "description": {
        "fct-module": "Ideas.Common.Exercise",
        "fct-package": "ideas",
        "fct-signature": "Exercise a -\u003e Maybe (StdGen -\u003e Maybe Difficulty -\u003e a)",
        "fct-source": "src/Ideas-Common-Exercise.html#randomExercise",
        "fct-type": "function",
        "title": "randomExercise"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Exercise",
        "module": "Ideas.Common.Exercise",
        "name": "randomExercise",
        "normalized": "Exercise a-\u003eMaybe(StdGen-\u003eMaybe Difficulty-\u003ea)",
        "package": "ideas",
        "partial": "Exercise",
        "signature": "Exercise a-\u003eMaybe(StdGen-\u003eMaybe Difficulty-\u003ea)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Exercise.html#v:randomTerm",
      "description": {
        "fct-module": "Ideas.Common.Exercise",
        "fct-package": "ideas",
        "fct-signature": "Exercise a -\u003e Maybe Difficulty -\u003e IO a",
        "fct-source": "src/Ideas-Common-Exercise.html#randomTerm",
        "fct-type": "function",
        "title": "randomTerm"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Exercise",
        "module": "Ideas.Common.Exercise",
        "name": "randomTerm",
        "normalized": "Exercise a-\u003eMaybe Difficulty-\u003eIO a",
        "package": "ideas",
        "partial": "Term",
        "signature": "Exercise a-\u003eMaybe Difficulty-\u003eIO a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Exercise.html#v:randomTermWith",
      "description": {
        "fct-module": "Ideas.Common.Exercise",
        "fct-package": "ideas",
        "fct-signature": "StdGen -\u003e Exercise a -\u003e Maybe Difficulty -\u003e Maybe a",
        "fct-source": "src/Ideas-Common-Exercise.html#randomTermWith",
        "fct-type": "function",
        "title": "randomTermWith"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Exercise",
        "module": "Ideas.Common.Exercise",
        "name": "randomTermWith",
        "normalized": "StdGen-\u003eExercise a-\u003eMaybe Difficulty-\u003eMaybe a",
        "package": "ideas",
        "partial": "Term With",
        "signature": "StdGen-\u003eExercise a-\u003eMaybe Difficulty-\u003eMaybe a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Exercise.html#v:readDifficulty",
      "description": {
        "fct-module": "Ideas.Common.Exercise",
        "fct-package": "ideas",
        "fct-signature": "String -\u003e Maybe Difficulty",
        "fct-source": "src/Ideas-Common-Exercise.html#readDifficulty",
        "fct-type": "function",
        "title": "readDifficulty"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Exercise",
        "module": "Ideas.Common.Exercise",
        "name": "readDifficulty",
        "normalized": "String-\u003eMaybe Difficulty",
        "package": "ideas",
        "partial": "Difficulty",
        "signature": "String-\u003eMaybe Difficulty"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Exercise.html#v:ready",
      "description": {
        "fct-module": "Ideas.Common.Exercise",
        "fct-package": "ideas",
        "fct-signature": "Exercise a -\u003e Predicate a",
        "fct-source": "src/Ideas-Common-Exercise.html#ready",
        "fct-type": "function",
        "title": "ready"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Exercise",
        "module": "Ideas.Common.Exercise",
        "name": "ready",
        "normalized": "Exercise a-\u003ePredicate a",
        "package": "ideas",
        "partial": "",
        "signature": "Exercise a-\u003ePredicate a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Exercise.html#v:recognizeRule",
      "description": {
        "fct-module": "Ideas.Common.Exercise",
        "fct-package": "ideas",
        "fct-signature": "Exercise a -\u003e Rule (Context a) -\u003e Context a -\u003e Context a -\u003e [(Location, Environment)]",
        "fct-source": "src/Ideas-Common-Exercise.html#recognizeRule",
        "fct-type": "function",
        "title": "recognizeRule"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Exercise",
        "module": "Ideas.Common.Exercise",
        "name": "recognizeRule",
        "normalized": "Exercise a-\u003eRule(Context a)-\u003eContext a-\u003eContext a-\u003e[(Location,Environment)]",
        "package": "ideas",
        "partial": "Rule",
        "signature": "Exercise a-\u003eRule(Context a)-\u003eContext a-\u003eContext a-\u003e[(Location,Environment)]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Exercise.html#v:restrictGenerator",
      "description": {
        "fct-module": "Ideas.Common.Exercise",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e Bool) -\u003e Gen a -\u003e Gen a",
        "fct-source": "src/Ideas-Common-Exercise.html#restrictGenerator",
        "fct-type": "function",
        "title": "restrictGenerator"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Exercise",
        "module": "Ideas.Common.Exercise",
        "name": "restrictGenerator",
        "normalized": "(a-\u003eBool)-\u003eGen a-\u003eGen a",
        "package": "ideas",
        "partial": "Generator",
        "signature": "(a-\u003eBool)-\u003eGen a-\u003eGen a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Exercise.html#v:ruleOrdering",
      "description": {
        "fct-module": "Ideas.Common.Exercise",
        "fct-package": "ideas",
        "fct-signature": "Exercise a -\u003e Rule (Context a) -\u003e Rule (Context a) -\u003e Ordering",
        "fct-source": "src/Ideas-Common-Exercise.html#ruleOrdering",
        "fct-type": "function",
        "title": "ruleOrdering"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Exercise",
        "module": "Ideas.Common.Exercise",
        "name": "ruleOrdering",
        "normalized": "Exercise a-\u003eRule(Context a)-\u003eRule(Context a)-\u003eOrdering",
        "package": "ideas",
        "partial": "Ordering",
        "signature": "Exercise a-\u003eRule(Context a)-\u003eRule(Context a)-\u003eOrdering"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Exercise.html#v:ruleOrderingWith",
      "description": {
        "fct-module": "Ideas.Common.Exercise",
        "fct-package": "ideas",
        "fct-signature": "[Rule a] -\u003e Rule a -\u003e Rule a -\u003e Ordering",
        "fct-source": "src/Ideas-Common-Exercise.html#ruleOrderingWith",
        "fct-type": "function",
        "title": "ruleOrderingWith"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Exercise",
        "module": "Ideas.Common.Exercise",
        "name": "ruleOrderingWith",
        "normalized": "[Rule a]-\u003eRule a-\u003eRule a-\u003eOrdering",
        "package": "ideas",
        "partial": "Ordering With",
        "signature": "[Rule a]-\u003eRule a-\u003eRule a-\u003eOrdering"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Exercise.html#v:ruleOrderingWithId",
      "description": {
        "fct-module": "Ideas.Common.Exercise",
        "fct-package": "ideas",
        "fct-signature": "[b] -\u003e Rule a -\u003e Rule a -\u003e Ordering",
        "fct-source": "src/Ideas-Common-Exercise.html#ruleOrderingWithId",
        "fct-type": "function",
        "title": "ruleOrderingWithId"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Exercise",
        "module": "Ideas.Common.Exercise",
        "name": "ruleOrderingWithId",
        "normalized": "[a]-\u003eRule b-\u003eRule b-\u003eOrdering",
        "package": "ideas",
        "partial": "Ordering With Id",
        "signature": "[b]-\u003eRule a-\u003eRule a-\u003eOrdering"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Exercise.html#v:ruleset",
      "description": {
        "fct-module": "Ideas.Common.Exercise",
        "fct-package": "ideas",
        "fct-signature": "Exercise a -\u003e [Rule (Context a)]",
        "fct-source": "src/Ideas-Common-Exercise.html#ruleset",
        "fct-type": "function",
        "title": "ruleset"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Exercise",
        "module": "Ideas.Common.Exercise",
        "name": "ruleset",
        "normalized": "Exercise a-\u003e[Rule(Context a)]",
        "package": "ideas",
        "partial": "",
        "signature": "Exercise a-\u003e[Rule(Context a)]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Exercise.html#v:showDerivation",
      "description": {
        "fct-descr": "\u003cp\u003eShows a derivation for a given start term. The specified rule ordering\n is used for selection.\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Exercise",
        "fct-package": "ideas",
        "fct-signature": "Exercise a -\u003e a -\u003e String",
        "fct-source": "src/Ideas-Common-Exercise.html#showDerivation",
        "fct-type": "function",
        "title": "showDerivation"
      },
      "index": {
        "description": "Shows derivation for given start term The specified rule ordering is used for selection",
        "hierarchy": "Ideas Common Exercise",
        "module": "Ideas.Common.Exercise",
        "name": "showDerivation",
        "normalized": "Exercise a-\u003ea-\u003eString",
        "package": "ideas",
        "partial": "Derivation",
        "signature": "Exercise a-\u003ea-\u003eString"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Exercise.html#v:similarity",
      "description": {
        "fct-module": "Ideas.Common.Exercise",
        "fct-package": "ideas",
        "fct-signature": "Exercise a -\u003e Context a -\u003e Context a -\u003e Bool",
        "fct-source": "src/Ideas-Common-Exercise.html#similarity",
        "fct-type": "function",
        "title": "similarity"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Exercise",
        "module": "Ideas.Common.Exercise",
        "name": "similarity",
        "normalized": "Exercise a-\u003eContext a-\u003eContext a-\u003eBool",
        "package": "ideas",
        "partial": "",
        "signature": "Exercise a-\u003eContext a-\u003eContext a-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Exercise.html#v:simpleEquivalence",
      "description": {
        "fct-descr": "\u003cp\u003eEquivalence on terms without a context\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Exercise",
        "fct-package": "ideas",
        "fct-signature": "Exercise a -\u003e a -\u003e a -\u003e Bool",
        "fct-source": "src/Ideas-Common-Exercise.html#simpleEquivalence",
        "fct-type": "function",
        "title": "simpleEquivalence"
      },
      "index": {
        "description": "Equivalence on terms without context",
        "hierarchy": "Ideas Common Exercise",
        "module": "Ideas.Common.Exercise",
        "name": "simpleEquivalence",
        "normalized": "Exercise a-\u003ea-\u003ea-\u003eBool",
        "package": "ideas",
        "partial": "Equivalence",
        "signature": "Exercise a-\u003ea-\u003ea-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Exercise.html#v:simpleGenerator",
      "description": {
        "fct-module": "Ideas.Common.Exercise",
        "fct-package": "ideas",
        "fct-signature": "Gen a -\u003e Maybe (StdGen -\u003e Maybe Difficulty -\u003e a)",
        "fct-source": "src/Ideas-Common-Exercise.html#simpleGenerator",
        "fct-type": "function",
        "title": "simpleGenerator"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Exercise",
        "module": "Ideas.Common.Exercise",
        "name": "simpleGenerator",
        "normalized": "Gen a-\u003eMaybe(StdGen-\u003eMaybe Difficulty-\u003ea)",
        "package": "ideas",
        "partial": "Generator",
        "signature": "Gen a-\u003eMaybe(StdGen-\u003eMaybe Difficulty-\u003ea)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Exercise.html#v:simpleSimilarity",
      "description": {
        "fct-descr": "\u003cp\u003eSimilarity on terms without a context\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Exercise",
        "fct-package": "ideas",
        "fct-signature": "Exercise a -\u003e a -\u003e a -\u003e Bool",
        "fct-source": "src/Ideas-Common-Exercise.html#simpleSimilarity",
        "fct-type": "function",
        "title": "simpleSimilarity"
      },
      "index": {
        "description": "Similarity on terms without context",
        "hierarchy": "Ideas Common Exercise",
        "module": "Ideas.Common.Exercise",
        "name": "simpleSimilarity",
        "normalized": "Exercise a-\u003ea-\u003ea-\u003eBool",
        "package": "ideas",
        "partial": "Similarity",
        "signature": "Exercise a-\u003ea-\u003ea-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Exercise.html#v:status",
      "description": {
        "fct-module": "Ideas.Common.Exercise",
        "fct-package": "ideas",
        "fct-signature": "Exercise a -\u003e Status",
        "fct-source": "src/Ideas-Common-Exercise.html#status",
        "fct-type": "function",
        "title": "status"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Exercise",
        "module": "Ideas.Common.Exercise",
        "name": "status",
        "normalized": "Exercise a-\u003eStatus",
        "package": "ideas",
        "partial": "",
        "signature": "Exercise a-\u003eStatus"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Exercise.html#v:strategy",
      "description": {
        "fct-module": "Ideas.Common.Exercise",
        "fct-package": "ideas",
        "fct-signature": "Exercise a -\u003e LabeledStrategy (Context a)",
        "fct-source": "src/Ideas-Common-Exercise.html#strategy",
        "fct-type": "function",
        "title": "strategy"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Exercise",
        "module": "Ideas.Common.Exercise",
        "name": "strategy",
        "normalized": "Exercise a-\u003eLabeledStrategy(Context a)",
        "package": "ideas",
        "partial": "",
        "signature": "Exercise a-\u003eLabeledStrategy(Context a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Exercise.html#v:suitable",
      "description": {
        "fct-module": "Ideas.Common.Exercise",
        "fct-package": "ideas",
        "fct-signature": "Exercise a -\u003e Predicate a",
        "fct-source": "src/Ideas-Common-Exercise.html#suitable",
        "fct-type": "function",
        "title": "suitable"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Exercise",
        "module": "Ideas.Common.Exercise",
        "name": "suitable",
        "normalized": "Exercise a-\u003ePredicate a",
        "package": "ideas",
        "partial": "",
        "signature": "Exercise a-\u003ePredicate a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Exercise.html#v:testGenerator",
      "description": {
        "fct-module": "Ideas.Common.Exercise",
        "fct-package": "ideas",
        "fct-signature": "Exercise a -\u003e Maybe (Gen a)",
        "fct-source": "src/Ideas-Common-Exercise.html#testGenerator",
        "fct-type": "function",
        "title": "testGenerator"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Exercise",
        "module": "Ideas.Common.Exercise",
        "name": "testGenerator",
        "normalized": "Exercise a-\u003eMaybe(Gen a)",
        "package": "ideas",
        "partial": "Generator",
        "signature": "Exercise a-\u003eMaybe(Gen a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Exercise.html#v:useGenerator",
      "description": {
        "fct-module": "Ideas.Common.Exercise",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e Bool) -\u003e (Maybe Difficulty -\u003e Gen a) -\u003e Maybe (StdGen -\u003e Maybe Difficulty -\u003e a)",
        "fct-source": "src/Ideas-Common-Exercise.html#useGenerator",
        "fct-type": "function",
        "title": "useGenerator"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Exercise",
        "module": "Ideas.Common.Exercise",
        "name": "useGenerator",
        "normalized": "(a-\u003eBool)-\u003e(Maybe Difficulty-\u003eGen a)-\u003eMaybe(StdGen-\u003eMaybe Difficulty-\u003ea)",
        "package": "ideas",
        "partial": "Generator",
        "signature": "(a-\u003eBool)-\u003e(Maybe Difficulty-\u003eGen a)-\u003eMaybe(StdGen-\u003eMaybe Difficulty-\u003ea)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Exercise.html#v:useTypeable",
      "description": {
        "fct-module": "Ideas.Common.Exercise",
        "fct-package": "ideas",
        "fct-signature": "Maybe (IsTypeable a)",
        "fct-source": "src/Ideas-Common-Exercise.html#useTypeable",
        "fct-type": "function",
        "title": "useTypeable"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Exercise",
        "module": "Ideas.Common.Exercise",
        "name": "useTypeable",
        "normalized": "",
        "package": "ideas",
        "partial": "Typeable",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Exercise.html#v:withoutContext",
      "description": {
        "fct-descr": "\u003cp\u003eFunction for defining equivalence or similarity without taking\n the context into account.\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Exercise",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e a -\u003e Bool) -\u003e Context a -\u003e Context a -\u003e Bool",
        "fct-source": "src/Ideas-Common-Exercise.html#withoutContext",
        "fct-type": "function",
        "title": "withoutContext"
      },
      "index": {
        "description": "Function for defining equivalence or similarity without taking the context into account",
        "hierarchy": "Ideas Common Exercise",
        "module": "Ideas.Common.Exercise",
        "name": "withoutContext",
        "normalized": "(a-\u003ea-\u003eBool)-\u003eContext a-\u003eContext a-\u003eBool",
        "package": "ideas",
        "partial": "Context",
        "signature": "(a-\u003ea-\u003eBool)-\u003eContext a-\u003eContext a-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Id.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eIdentification of entities\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "Ideas.Common.Id",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Common-Id.html",
        "fct-type": "module",
        "title": "Id"
      },
      "index": {
        "description": "Identification of entities",
        "hierarchy": "Ideas Common Id",
        "module": "Ideas.Common.Id",
        "name": "Id",
        "normalized": "",
        "package": "ideas",
        "partial": "Id",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Id.html#t:HasId",
      "description": {
        "fct-module": "Ideas.Common.Id",
        "fct-package": "ideas",
        "fct-signature": "class",
        "fct-source": "src/Ideas-Common-Id.html#HasId",
        "fct-type": "class",
        "title": "HasId"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Id",
        "module": "Ideas.Common.Id",
        "name": "HasId",
        "normalized": "",
        "package": "ideas",
        "partial": "Has Id",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Id.html#t:Id",
      "description": {
        "fct-module": "Ideas.Common.Id",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Common-Id.html#Id",
        "fct-type": "data",
        "title": "Id"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Id",
        "module": "Ideas.Common.Id",
        "name": "Id",
        "normalized": "",
        "package": "ideas",
        "partial": "Id",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Id.html#t:Identify",
      "description": {
        "fct-module": "Ideas.Common.Id",
        "fct-package": "ideas",
        "fct-signature": "class",
        "fct-source": "src/Ideas-Common-Id.html#Identify",
        "fct-type": "class",
        "title": "Identify"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Id",
        "module": "Ideas.Common.Id",
        "name": "Identify",
        "normalized": "",
        "package": "ideas",
        "partial": "Identify",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Id.html#t:IsId",
      "description": {
        "fct-module": "Ideas.Common.Id",
        "fct-package": "ideas",
        "fct-signature": "class",
        "fct-source": "src/Ideas-Common-Id.html#IsId",
        "fct-type": "class",
        "title": "IsId"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Id",
        "module": "Ideas.Common.Id",
        "name": "IsId",
        "normalized": "",
        "package": "ideas",
        "partial": "Is Id",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Id.html#v:-35-",
      "description": {
        "fct-module": "Ideas.Common.Id",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e b -\u003e Id",
        "fct-source": "src/Ideas-Common-Id.html#%23",
        "fct-type": "function",
        "title": "(#)"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Id",
        "module": "Ideas.Common.Id",
        "name": "(#) #",
        "normalized": "a-\u003eb-\u003eId",
        "package": "ideas",
        "partial": "",
        "signature": "a-\u003eb-\u003eId"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Id.html#v:-64--62-",
      "description": {
        "fct-module": "Ideas.Common.Id",
        "fct-package": "ideas",
        "fct-signature": "n -\u003e a -\u003e a",
        "fct-source": "src/Ideas-Common-Id.html#%40%3E",
        "fct-type": "method",
        "title": "(@\u003e)"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Id",
        "module": "Ideas.Common.Id",
        "name": "(@\u003e) @\u003e",
        "normalized": "a-\u003eb-\u003eb",
        "package": "ideas",
        "partial": "",
        "signature": "n-\u003ea-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Id.html#v:changeId",
      "description": {
        "fct-module": "Ideas.Common.Id",
        "fct-package": "ideas",
        "fct-signature": "(Id -\u003e Id) -\u003e a -\u003e a",
        "fct-source": "src/Ideas-Common-Id.html#changeId",
        "fct-type": "method",
        "title": "changeId"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Id",
        "module": "Ideas.Common.Id",
        "name": "changeId",
        "normalized": "(Id-\u003eId)-\u003ea-\u003ea",
        "package": "ideas",
        "partial": "Id",
        "signature": "(Id-\u003eId)-\u003ea-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Id.html#v:compareId",
      "description": {
        "fct-module": "Ideas.Common.Id",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e a -\u003e Ordering",
        "fct-source": "src/Ideas-Common-Id.html#compareId",
        "fct-type": "function",
        "title": "compareId"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Id",
        "module": "Ideas.Common.Id",
        "name": "compareId",
        "normalized": "a-\u003ea-\u003eOrdering",
        "package": "ideas",
        "partial": "Id",
        "signature": "a-\u003ea-\u003eOrdering"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Id.html#v:concatId",
      "description": {
        "fct-module": "Ideas.Common.Id",
        "fct-package": "ideas",
        "fct-signature": "[a] -\u003e Id",
        "fct-source": "src/Ideas-Common-Id.html#concatId",
        "fct-type": "method",
        "title": "concatId"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Id",
        "module": "Ideas.Common.Id",
        "name": "concatId",
        "normalized": "[a]-\u003eId",
        "package": "ideas",
        "partial": "Id",
        "signature": "[a]-\u003eId"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Id.html#v:describe",
      "description": {
        "fct-module": "Ideas.Common.Id",
        "fct-package": "ideas",
        "fct-signature": "String -\u003e a -\u003e a",
        "fct-source": "src/Ideas-Common-Id.html#describe",
        "fct-type": "function",
        "title": "describe"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Id",
        "module": "Ideas.Common.Id",
        "name": "describe",
        "normalized": "String-\u003ea-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "String-\u003ea-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Id.html#v:description",
      "description": {
        "fct-module": "Ideas.Common.Id",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e String",
        "fct-source": "src/Ideas-Common-Id.html#description",
        "fct-type": "function",
        "title": "description"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Id",
        "module": "Ideas.Common.Id",
        "name": "description",
        "normalized": "a-\u003eString",
        "package": "ideas",
        "partial": "",
        "signature": "a-\u003eString"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Id.html#v:getId",
      "description": {
        "fct-module": "Ideas.Common.Id",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e Id",
        "fct-source": "src/Ideas-Common-Id.html#getId",
        "fct-type": "method",
        "title": "getId"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Id",
        "module": "Ideas.Common.Id",
        "name": "getId",
        "normalized": "a-\u003eId",
        "package": "ideas",
        "partial": "Id",
        "signature": "a-\u003eId"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Id.html#v:isEmptyId",
      "description": {
        "fct-module": "Ideas.Common.Id",
        "fct-package": "ideas",
        "fct-signature": "Id -\u003e Bool",
        "fct-source": "src/Ideas-Common-Id.html#isEmptyId",
        "fct-type": "function",
        "title": "isEmptyId"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Id",
        "module": "Ideas.Common.Id",
        "name": "isEmptyId",
        "normalized": "Id-\u003eBool",
        "package": "ideas",
        "partial": "Empty Id",
        "signature": "Id-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Id.html#v:listQualify",
      "description": {
        "fct-module": "Ideas.Common.Id",
        "fct-package": "ideas",
        "fct-signature": "[a] -\u003e b -\u003e Id",
        "fct-source": "src/Ideas-Common-Id.html#listQualify",
        "fct-type": "function",
        "title": "listQualify"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Id",
        "module": "Ideas.Common.Id",
        "name": "listQualify",
        "normalized": "[a]-\u003eb-\u003eId",
        "package": "ideas",
        "partial": "Qualify",
        "signature": "[a]-\u003eb-\u003eId"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Id.html#v:mempty",
      "description": {
        "fct-descr": "\u003cp\u003eIdentity of \u003ccode\u003e\u003ca\u003emappend\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Id",
        "fct-package": "ideas",
        "fct-signature": "a",
        "fct-type": "function",
        "title": "mempty"
      },
      "index": {
        "description": "Identity of mappend",
        "hierarchy": "Ideas Common Id",
        "module": "Ideas.Common.Id",
        "name": "mempty",
        "normalized": "",
        "package": "ideas",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Id.html#v:newId",
      "description": {
        "fct-module": "Ideas.Common.Id",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e Id",
        "fct-source": "src/Ideas-Common-Id.html#newId",
        "fct-type": "method",
        "title": "newId"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Id",
        "module": "Ideas.Common.Id",
        "name": "newId",
        "normalized": "a-\u003eId",
        "package": "ideas",
        "partial": "Id",
        "signature": "a-\u003eId"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Id.html#v:qualification",
      "description": {
        "fct-module": "Ideas.Common.Id",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e String",
        "fct-source": "src/Ideas-Common-Id.html#qualification",
        "fct-type": "function",
        "title": "qualification"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Id",
        "module": "Ideas.Common.Id",
        "name": "qualification",
        "normalized": "a-\u003eString",
        "package": "ideas",
        "partial": "",
        "signature": "a-\u003eString"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Id.html#v:qualifiers",
      "description": {
        "fct-module": "Ideas.Common.Id",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e [String]",
        "fct-source": "src/Ideas-Common-Id.html#qualifiers",
        "fct-type": "function",
        "title": "qualifiers"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Id",
        "module": "Ideas.Common.Id",
        "name": "qualifiers",
        "normalized": "a-\u003e[String]",
        "package": "ideas",
        "partial": "",
        "signature": "a-\u003e[String]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Id.html#v:sameId",
      "description": {
        "fct-module": "Ideas.Common.Id",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e b -\u003e Bool",
        "fct-source": "src/Ideas-Common-Id.html#sameId",
        "fct-type": "function",
        "title": "sameId"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Id",
        "module": "Ideas.Common.Id",
        "name": "sameId",
        "normalized": "a-\u003eb-\u003eBool",
        "package": "ideas",
        "partial": "Id",
        "signature": "a-\u003eb-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Id.html#v:showId",
      "description": {
        "fct-module": "Ideas.Common.Id",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e String",
        "fct-source": "src/Ideas-Common-Id.html#showId",
        "fct-type": "function",
        "title": "showId"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Id",
        "module": "Ideas.Common.Id",
        "name": "showId",
        "normalized": "a-\u003eString",
        "package": "ideas",
        "partial": "Id",
        "signature": "a-\u003eString"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Id.html#v:unqualified",
      "description": {
        "fct-module": "Ideas.Common.Id",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e String",
        "fct-source": "src/Ideas-Common-Id.html#unqualified",
        "fct-type": "function",
        "title": "unqualified"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Id",
        "module": "Ideas.Common.Id",
        "name": "unqualified",
        "normalized": "a-\u003eString",
        "package": "ideas",
        "partial": "",
        "signature": "a-\u003eString"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Library.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eExports most from package Common\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "Ideas.Common.Library",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Common-Library.html",
        "fct-type": "module",
        "title": "Library"
      },
      "index": {
        "description": "Exports most from package Common",
        "hierarchy": "Ideas Common Library",
        "module": "Ideas.Common.Library",
        "name": "Library",
        "normalized": "",
        "package": "ideas",
        "partial": "Library",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Library.html#v:failS",
      "description": {
        "fct-descr": "\u003cp\u003eAlias for strategy combinator \u003ccode\u003efail\u003c/code\u003e\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Library",
        "fct-package": "ideas",
        "fct-signature": "Strategy a",
        "fct-source": "src/Ideas-Common-Library.html#failS",
        "fct-type": "function",
        "title": "failS"
      },
      "index": {
        "description": "Alias for strategy combinator fail",
        "hierarchy": "Ideas Common Library",
        "module": "Ideas.Common.Library",
        "name": "failS",
        "normalized": "",
        "package": "ideas",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Library.html#v:notS",
      "description": {
        "fct-descr": "\u003cp\u003eAlias for strategy combinator \u003ccode\u003enot\u003c/code\u003e\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Library",
        "fct-package": "ideas",
        "fct-signature": "f a -\u003e Strategy a",
        "fct-source": "src/Ideas-Common-Library.html#notS",
        "fct-type": "function",
        "title": "notS"
      },
      "index": {
        "description": "Alias for strategy combinator not",
        "hierarchy": "Ideas Common Library",
        "module": "Ideas.Common.Library",
        "name": "notS",
        "normalized": "a b-\u003eStrategy b",
        "package": "ideas",
        "partial": "",
        "signature": "f a-\u003eStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Library.html#v:repeatS",
      "description": {
        "fct-descr": "\u003cp\u003eAlias for strategy combinator \u003ccode\u003erepeat\u003c/code\u003e\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Library",
        "fct-package": "ideas",
        "fct-signature": "f a -\u003e Strategy a",
        "fct-source": "src/Ideas-Common-Library.html#repeatS",
        "fct-type": "function",
        "title": "repeatS"
      },
      "index": {
        "description": "Alias for strategy combinator repeat",
        "hierarchy": "Ideas Common Library",
        "module": "Ideas.Common.Library",
        "name": "repeatS",
        "normalized": "a b-\u003eStrategy b",
        "package": "ideas",
        "partial": "",
        "signature": "f a-\u003eStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Library.html#v:replicateS",
      "description": {
        "fct-descr": "\u003cp\u003eAlias for strategy combinator \u003ccode\u003ereplicate\u003c/code\u003e\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Library",
        "fct-package": "ideas",
        "fct-signature": "Int -\u003e f a -\u003e Strategy a",
        "fct-source": "src/Ideas-Common-Library.html#replicateS",
        "fct-type": "function",
        "title": "replicateS"
      },
      "index": {
        "description": "Alias for strategy combinator replicate",
        "hierarchy": "Ideas Common Library",
        "module": "Ideas.Common.Library",
        "name": "replicateS",
        "normalized": "Int-\u003ea b-\u003eStrategy b",
        "package": "ideas",
        "partial": "",
        "signature": "Int-\u003ef a-\u003eStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Library.html#v:sequenceS",
      "description": {
        "fct-descr": "\u003cp\u003eAlias for strategy combinator \u003ccode\u003esequence\u003c/code\u003e\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Library",
        "fct-package": "ideas",
        "fct-signature": "[f a] -\u003e Strategy a",
        "fct-source": "src/Ideas-Common-Library.html#sequenceS",
        "fct-type": "function",
        "title": "sequenceS"
      },
      "index": {
        "description": "Alias for strategy combinator sequence",
        "hierarchy": "Ideas Common Library",
        "module": "Ideas.Common.Library",
        "name": "sequenceS",
        "normalized": "[a b]-\u003eStrategy b",
        "package": "ideas",
        "partial": "",
        "signature": "[f a]-\u003eStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Library.html#v:untilS",
      "description": {
        "fct-descr": "\u003cp\u003eAlias for strategy combinator \u003ccode\u003euntil\u003c/code\u003e\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Library",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e Bool) -\u003e f a -\u003e Strategy a",
        "fct-source": "src/Ideas-Common-Library.html#untilS",
        "fct-type": "function",
        "title": "untilS"
      },
      "index": {
        "description": "Alias for strategy combinator until",
        "hierarchy": "Ideas Common Library",
        "module": "Ideas.Common.Library",
        "name": "untilS",
        "normalized": "(a-\u003eBool)-\u003eb a-\u003eStrategy a",
        "package": "ideas",
        "partial": "",
        "signature": "(a-\u003eBool)-\u003ef a-\u003eStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Predicate.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eRepresentation for predicates\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "Ideas.Common.Predicate",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Common-Predicate.html",
        "fct-type": "module",
        "title": "Predicate"
      },
      "index": {
        "description": "Representation for predicates",
        "hierarchy": "Ideas Common Predicate",
        "module": "Ideas.Common.Predicate",
        "name": "Predicate",
        "normalized": "",
        "package": "ideas",
        "partial": "Predicate",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Predicate.html#t:BoolValue",
      "description": {
        "fct-module": "Ideas.Common.Predicate",
        "fct-package": "ideas",
        "fct-signature": "class",
        "fct-source": "src/Ideas-Common-Algebra-Boolean.html#BoolValue",
        "fct-type": "class",
        "title": "BoolValue"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Predicate",
        "module": "Ideas.Common.Predicate",
        "name": "BoolValue",
        "normalized": "",
        "package": "ideas",
        "partial": "Bool Value",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Predicate.html#t:Boolean",
      "description": {
        "fct-module": "Ideas.Common.Predicate",
        "fct-package": "ideas",
        "fct-signature": "class",
        "fct-source": "src/Ideas-Common-Algebra-Boolean.html#Boolean",
        "fct-type": "class",
        "title": "Boolean"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Predicate",
        "module": "Ideas.Common.Predicate",
        "name": "Boolean",
        "normalized": "",
        "package": "ideas",
        "partial": "Boolean",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Predicate.html#t:Predicate",
      "description": {
        "fct-module": "Ideas.Common.Predicate",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Common-Predicate.html#Predicate",
        "fct-type": "data",
        "title": "Predicate"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Predicate",
        "module": "Ideas.Common.Predicate",
        "name": "Predicate",
        "normalized": "",
        "package": "ideas",
        "partial": "Predicate",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Predicate.html#v:-60--124--124--62-",
      "description": {
        "fct-module": "Ideas.Common.Predicate",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e a -\u003e a",
        "fct-source": "src/Ideas-Common-Algebra-Boolean.html#%3C%7C%7C%3E",
        "fct-type": "method",
        "title": "(\u003c||\u003e)"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Predicate",
        "module": "Ideas.Common.Predicate",
        "name": "(\u003c||\u003e) \u003c||\u003e",
        "normalized": "a-\u003ea-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "a-\u003ea-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Predicate.html#v:-60--38--38--62-",
      "description": {
        "fct-module": "Ideas.Common.Predicate",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e a -\u003e a",
        "fct-source": "src/Ideas-Common-Algebra-Boolean.html#%3C%26%26%3E",
        "fct-type": "method",
        "title": "(\u003c&&\u003e)"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Predicate",
        "module": "Ideas.Common.Predicate",
        "name": "(\u003c&&\u003e) \u003c&&\u003e",
        "normalized": "a-\u003ea-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "a-\u003ea-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Predicate.html#v:ands",
      "description": {
        "fct-module": "Ideas.Common.Predicate",
        "fct-package": "ideas",
        "fct-signature": "[a] -\u003e a",
        "fct-source": "src/Ideas-Common-Algebra-Boolean.html#ands",
        "fct-type": "function",
        "title": "ands"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Predicate",
        "module": "Ideas.Common.Predicate",
        "name": "ands",
        "normalized": "[a]-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "[a]-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Predicate.html#v:complement",
      "description": {
        "fct-module": "Ideas.Common.Predicate",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e a",
        "fct-source": "src/Ideas-Common-Algebra-Boolean.html#complement",
        "fct-type": "method",
        "title": "complement"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Predicate",
        "module": "Ideas.Common.Predicate",
        "name": "complement",
        "normalized": "a-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "a-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Predicate.html#v:equivalent",
      "description": {
        "fct-module": "Ideas.Common.Predicate",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e a -\u003e a",
        "fct-source": "src/Ideas-Common-Algebra-Boolean.html#equivalent",
        "fct-type": "function",
        "title": "equivalent"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Predicate",
        "module": "Ideas.Common.Predicate",
        "name": "equivalent",
        "normalized": "a-\u003ea-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "a-\u003ea-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Predicate.html#v:evalPredicate",
      "description": {
        "fct-module": "Ideas.Common.Predicate",
        "fct-package": "ideas",
        "fct-signature": "Predicate a -\u003e a -\u003e Bool",
        "fct-source": "src/Ideas-Common-Predicate.html#evalPredicate",
        "fct-type": "function",
        "title": "evalPredicate"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Predicate",
        "module": "Ideas.Common.Predicate",
        "name": "evalPredicate",
        "normalized": "Predicate a-\u003ea-\u003eBool",
        "package": "ideas",
        "partial": "Predicate",
        "signature": "Predicate a-\u003ea-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Predicate.html#v:false",
      "description": {
        "fct-module": "Ideas.Common.Predicate",
        "fct-package": "ideas",
        "fct-signature": "a",
        "fct-source": "src/Ideas-Common-Algebra-Boolean.html#false",
        "fct-type": "method",
        "title": "false"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Predicate",
        "module": "Ideas.Common.Predicate",
        "name": "false",
        "normalized": "",
        "package": "ideas",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Predicate.html#v:fromBool",
      "description": {
        "fct-module": "Ideas.Common.Predicate",
        "fct-package": "ideas",
        "fct-signature": "Bool -\u003e a",
        "fct-source": "src/Ideas-Common-Algebra-Boolean.html#fromBool",
        "fct-type": "method",
        "title": "fromBool"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Predicate",
        "module": "Ideas.Common.Predicate",
        "name": "fromBool",
        "normalized": "Bool-\u003ea",
        "package": "ideas",
        "partial": "Bool",
        "signature": "Bool-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Predicate.html#v:implies",
      "description": {
        "fct-module": "Ideas.Common.Predicate",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e a -\u003e a",
        "fct-source": "src/Ideas-Common-Algebra-Boolean.html#implies",
        "fct-type": "function",
        "title": "implies"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Predicate",
        "module": "Ideas.Common.Predicate",
        "name": "implies",
        "normalized": "a-\u003ea-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "a-\u003ea-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Predicate.html#v:isFalse",
      "description": {
        "fct-module": "Ideas.Common.Predicate",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e Bool",
        "fct-source": "src/Ideas-Common-Algebra-Boolean.html#isFalse",
        "fct-type": "method",
        "title": "isFalse"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Predicate",
        "module": "Ideas.Common.Predicate",
        "name": "isFalse",
        "normalized": "a-\u003eBool",
        "package": "ideas",
        "partial": "False",
        "signature": "a-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Predicate.html#v:isTrue",
      "description": {
        "fct-module": "Ideas.Common.Predicate",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e Bool",
        "fct-source": "src/Ideas-Common-Algebra-Boolean.html#isTrue",
        "fct-type": "method",
        "title": "isTrue"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Predicate",
        "module": "Ideas.Common.Predicate",
        "name": "isTrue",
        "normalized": "a-\u003eBool",
        "package": "ideas",
        "partial": "True",
        "signature": "a-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Predicate.html#v:ors",
      "description": {
        "fct-module": "Ideas.Common.Predicate",
        "fct-package": "ideas",
        "fct-signature": "[a] -\u003e a",
        "fct-source": "src/Ideas-Common-Algebra-Boolean.html#ors",
        "fct-type": "function",
        "title": "ors"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Predicate",
        "module": "Ideas.Common.Predicate",
        "name": "ors",
        "normalized": "[a]-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "[a]-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Predicate.html#v:predicate",
      "description": {
        "fct-module": "Ideas.Common.Predicate",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e Bool) -\u003e Predicate a",
        "fct-source": "src/Ideas-Common-Predicate.html#predicate",
        "fct-type": "function",
        "title": "predicate"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Predicate",
        "module": "Ideas.Common.Predicate",
        "name": "predicate",
        "normalized": "(a-\u003eBool)-\u003ePredicate a",
        "package": "ideas",
        "partial": "",
        "signature": "(a-\u003eBool)-\u003ePredicate a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Predicate.html#v:predicateView",
      "description": {
        "fct-module": "Ideas.Common.Predicate",
        "fct-package": "ideas",
        "fct-signature": "View a b -\u003e Predicate a",
        "fct-source": "src/Ideas-Common-Predicate.html#predicateView",
        "fct-type": "function",
        "title": "predicateView"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Predicate",
        "module": "Ideas.Common.Predicate",
        "name": "predicateView",
        "normalized": "View a b-\u003ePredicate a",
        "package": "ideas",
        "partial": "View",
        "signature": "View a b-\u003ePredicate a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Predicate.html#v:true",
      "description": {
        "fct-module": "Ideas.Common.Predicate",
        "fct-package": "ideas",
        "fct-signature": "a",
        "fct-source": "src/Ideas-Common-Algebra-Boolean.html#true",
        "fct-type": "method",
        "title": "true"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Predicate",
        "module": "Ideas.Common.Predicate",
        "name": "true",
        "normalized": "",
        "package": "ideas",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-AC.html#",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.AC",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Common-Rewriting-AC.html",
        "fct-type": "module",
        "title": "AC"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting AC",
        "module": "Ideas.Common.Rewriting.AC",
        "name": "AC",
        "normalized": "",
        "package": "ideas",
        "partial": "AC",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-AC.html#t:Pairings",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.AC",
        "fct-package": "ideas",
        "fct-signature": "type",
        "fct-source": "src/Ideas-Common-Rewriting-AC.html#Pairings",
        "fct-type": "type",
        "title": "Pairings"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting AC",
        "module": "Ideas.Common.Rewriting.AC",
        "name": "Pairings",
        "normalized": "",
        "package": "ideas",
        "partial": "Pairings",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-AC.html#t:PairingsList",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.AC",
        "fct-package": "ideas",
        "fct-signature": "type",
        "fct-source": "src/Ideas-Common-Rewriting-AC.html#PairingsList",
        "fct-type": "type",
        "title": "PairingsList"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting AC",
        "module": "Ideas.Common.Rewriting.AC",
        "name": "PairingsList",
        "normalized": "",
        "package": "ideas",
        "partial": "Pairings List",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-AC.html#t:PairingsPair",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.AC",
        "fct-package": "ideas",
        "fct-signature": "type",
        "fct-source": "src/Ideas-Common-Rewriting-AC.html#PairingsPair",
        "fct-type": "type",
        "title": "PairingsPair"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting AC",
        "module": "Ideas.Common.Rewriting.AC",
        "name": "PairingsPair",
        "normalized": "",
        "package": "ideas",
        "partial": "Pairings Pair",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-AC.html#v:pairingsA",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.AC",
        "fct-package": "ideas",
        "fct-signature": "Bool -\u003e PairingsList a b",
        "fct-source": "src/Ideas-Common-Rewriting-AC.html#pairingsA",
        "fct-type": "function",
        "title": "pairingsA"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting AC",
        "module": "Ideas.Common.Rewriting.AC",
        "name": "pairingsA",
        "normalized": "Bool-\u003ePairingsList a b",
        "package": "ideas",
        "partial": "",
        "signature": "Bool-\u003ePairingsList a b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-AC.html#v:pairingsAC",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.AC",
        "fct-package": "ideas",
        "fct-signature": "Bool -\u003e PairingsList a b",
        "fct-source": "src/Ideas-Common-Rewriting-AC.html#pairingsAC",
        "fct-type": "function",
        "title": "pairingsAC"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting AC",
        "module": "Ideas.Common.Rewriting.AC",
        "name": "pairingsAC",
        "normalized": "Bool-\u003ePairingsList a b",
        "package": "ideas",
        "partial": "AC",
        "signature": "Bool-\u003ePairingsList a b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-AC.html#v:pairingsC",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.AC",
        "fct-package": "ideas",
        "fct-signature": "PairingsPair a b",
        "fct-source": "src/Ideas-Common-Rewriting-AC.html#pairingsC",
        "fct-type": "function",
        "title": "pairingsC"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting AC",
        "module": "Ideas.Common.Rewriting.AC",
        "name": "pairingsC",
        "normalized": "",
        "package": "ideas",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-AC.html#v:pairingsMatchA",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.AC",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e [b] -\u003e c) -\u003e [a] -\u003e [b] -\u003e [[c]]",
        "fct-source": "src/Ideas-Common-Rewriting-AC.html#pairingsMatchA",
        "fct-type": "function",
        "title": "pairingsMatchA"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting AC",
        "module": "Ideas.Common.Rewriting.AC",
        "name": "pairingsMatchA",
        "normalized": "(a-\u003e[b]-\u003ec)-\u003e[a]-\u003e[b]-\u003e[[c]]",
        "package": "ideas",
        "partial": "Match",
        "signature": "(a-\u003e[b]-\u003ec)-\u003e[a]-\u003e[b]-\u003e[[c]]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-AC.html#v:pairingsNone",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.AC",
        "fct-package": "ideas",
        "fct-signature": "PairingsPair a b",
        "fct-source": "src/Ideas-Common-Rewriting-AC.html#pairingsNone",
        "fct-type": "function",
        "title": "pairingsNone"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting AC",
        "module": "Ideas.Common.Rewriting.AC",
        "name": "pairingsNone",
        "normalized": "",
        "package": "ideas",
        "partial": "None",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Confluence.html#",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.Confluence",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Common-Rewriting-Confluence.html",
        "fct-type": "module",
        "title": "Confluence"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting Confluence",
        "module": "Ideas.Common.Rewriting.Confluence",
        "name": "Confluence",
        "normalized": "",
        "package": "ideas",
        "partial": "Confluence",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Confluence.html#t:Config",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.Confluence",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Common-Rewriting-Confluence.html#Config",
        "fct-type": "data",
        "title": "Config"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting Confluence",
        "module": "Ideas.Common.Rewriting.Confluence",
        "name": "Config",
        "normalized": "",
        "package": "ideas",
        "partial": "Config",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Confluence.html#v:checkConfluence",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.Confluence",
        "fct-package": "ideas",
        "fct-signature": "[RewriteRule a] -\u003e IO ()",
        "fct-source": "src/Ideas-Common-Rewriting-Confluence.html#checkConfluence",
        "fct-type": "function",
        "title": "checkConfluence"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting Confluence",
        "module": "Ideas.Common.Rewriting.Confluence",
        "name": "checkConfluence",
        "normalized": "[RewriteRule a]-\u003eIO()",
        "package": "ideas",
        "partial": "Confluence",
        "signature": "[RewriteRule a]-\u003eIO()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Confluence.html#v:checkConfluenceWith",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.Confluence",
        "fct-package": "ideas",
        "fct-signature": "Config -\u003e [RewriteRule a] -\u003e IO ()",
        "fct-source": "src/Ideas-Common-Rewriting-Confluence.html#checkConfluenceWith",
        "fct-type": "function",
        "title": "checkConfluenceWith"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting Confluence",
        "module": "Ideas.Common.Rewriting.Confluence",
        "name": "checkConfluenceWith",
        "normalized": "Config-\u003e[RewriteRule a]-\u003eIO()",
        "package": "ideas",
        "partial": "Confluence With",
        "signature": "Config-\u003e[RewriteRule a]-\u003eIO()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Confluence.html#v:complexity",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.Confluence",
        "fct-package": "ideas",
        "fct-signature": "Config -\u003e Term -\u003e Int",
        "fct-source": "src/Ideas-Common-Rewriting-Confluence.html#complexity",
        "fct-type": "function",
        "title": "complexity"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting Confluence",
        "module": "Ideas.Common.Rewriting.Confluence",
        "name": "complexity",
        "normalized": "Config-\u003eTerm-\u003eInt",
        "package": "ideas",
        "partial": "",
        "signature": "Config-\u003eTerm-\u003eInt"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Confluence.html#v:defaultConfig",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.Confluence",
        "fct-package": "ideas",
        "fct-signature": "Config",
        "fct-source": "src/Ideas-Common-Rewriting-Confluence.html#defaultConfig",
        "fct-type": "function",
        "title": "defaultConfig"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting Confluence",
        "module": "Ideas.Common.Rewriting.Confluence",
        "name": "defaultConfig",
        "normalized": "",
        "package": "ideas",
        "partial": "Config",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Confluence.html#v:isConfluent",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.Confluence",
        "fct-package": "ideas",
        "fct-signature": "[RewriteRule a] -\u003e Bool",
        "fct-source": "src/Ideas-Common-Rewriting-Confluence.html#isConfluent",
        "fct-type": "function",
        "title": "isConfluent"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting Confluence",
        "module": "Ideas.Common.Rewriting.Confluence",
        "name": "isConfluent",
        "normalized": "[RewriteRule a]-\u003eBool",
        "package": "ideas",
        "partial": "Confluent",
        "signature": "[RewriteRule a]-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Confluence.html#v:showTerm",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.Confluence",
        "fct-package": "ideas",
        "fct-signature": "Config -\u003e Term -\u003e String",
        "fct-source": "src/Ideas-Common-Rewriting-Confluence.html#showTerm",
        "fct-type": "function",
        "title": "showTerm"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting Confluence",
        "module": "Ideas.Common.Rewriting.Confluence",
        "name": "showTerm",
        "normalized": "Config-\u003eTerm-\u003eString",
        "package": "ideas",
        "partial": "Term",
        "signature": "Config-\u003eTerm-\u003eString"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Confluence.html#v:somewhereM",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.Confluence",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e [a]) -\u003e a -\u003e [a]",
        "fct-source": "src/Ideas-Common-Rewriting-Confluence.html#somewhereM",
        "fct-type": "function",
        "title": "somewhereM"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting Confluence",
        "module": "Ideas.Common.Rewriting.Confluence",
        "name": "somewhereM",
        "normalized": "(a-\u003e[a])-\u003ea-\u003e[a]",
        "package": "ideas",
        "partial": "",
        "signature": "(a-\u003e[a])-\u003ea-\u003e[a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Confluence.html#v:termEquality",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.Confluence",
        "fct-package": "ideas",
        "fct-signature": "Config -\u003e Term -\u003e Term -\u003e Bool",
        "fct-source": "src/Ideas-Common-Rewriting-Confluence.html#termEquality",
        "fct-type": "function",
        "title": "termEquality"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting Confluence",
        "module": "Ideas.Common.Rewriting.Confluence",
        "name": "termEquality",
        "normalized": "Config-\u003eTerm-\u003eTerm-\u003eBool",
        "package": "ideas",
        "partial": "Equality",
        "signature": "Config-\u003eTerm-\u003eTerm-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Difference.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eCompute the difference of two terms generically, taking associativity\n into account.\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "Ideas.Common.Rewriting.Difference",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Common-Rewriting-Difference.html",
        "fct-type": "module",
        "title": "Difference"
      },
      "index": {
        "description": "Compute the difference of two terms generically taking associativity into account",
        "hierarchy": "Ideas Common Rewriting Difference",
        "module": "Ideas.Common.Rewriting.Difference",
        "name": "Difference",
        "normalized": "",
        "package": "ideas",
        "partial": "Difference",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Difference.html#v:difference",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.Difference",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e a -\u003e Maybe (a, a)",
        "fct-source": "src/Ideas-Common-Rewriting-Difference.html#difference",
        "fct-type": "function",
        "title": "difference"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting Difference",
        "module": "Ideas.Common.Rewriting.Difference",
        "name": "difference",
        "normalized": "a-\u003ea-\u003eMaybe(a,a)",
        "package": "ideas",
        "partial": "",
        "signature": "a-\u003ea-\u003eMaybe(a,a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Difference.html#v:differenceEqual",
      "description": {
        "fct-descr": "\u003cp\u003eThis function returns the difference, except that the\n returned terms should be logically equivalent. Nothing can signal that\n there is no difference, or that the terms to start with are not equivalent.\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Rewriting.Difference",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e a -\u003e Bool) -\u003e a -\u003e a -\u003e Maybe (a, a)",
        "fct-source": "src/Ideas-Common-Rewriting-Difference.html#differenceEqual",
        "fct-type": "function",
        "title": "differenceEqual"
      },
      "index": {
        "description": "This function returns the difference except that the returned terms should be logically equivalent Nothing can signal that there is no difference or that the terms to start with are not equivalent",
        "hierarchy": "Ideas Common Rewriting Difference",
        "module": "Ideas.Common.Rewriting.Difference",
        "name": "differenceEqual",
        "normalized": "(a-\u003ea-\u003eBool)-\u003ea-\u003ea-\u003eMaybe(a,a)",
        "package": "ideas",
        "partial": "Equal",
        "signature": "(a-\u003ea-\u003eBool)-\u003ea-\u003ea-\u003eMaybe(a,a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Difference.html#v:differenceEqualWith",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.Difference",
        "fct-package": "ideas",
        "fct-signature": "View Term a -\u003e (a -\u003e a -\u003e Bool) -\u003e a -\u003e a -\u003e Maybe (a, a)",
        "fct-source": "src/Ideas-Common-Rewriting-Difference.html#differenceEqualWith",
        "fct-type": "function",
        "title": "differenceEqualWith"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting Difference",
        "module": "Ideas.Common.Rewriting.Difference",
        "name": "differenceEqualWith",
        "normalized": "View Term a-\u003e(a-\u003ea-\u003eBool)-\u003ea-\u003ea-\u003eMaybe(a,a)",
        "package": "ideas",
        "partial": "Equal With",
        "signature": "View Term a-\u003e(a-\u003ea-\u003eBool)-\u003ea-\u003ea-\u003eMaybe(a,a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Difference.html#v:differenceWith",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.Difference",
        "fct-package": "ideas",
        "fct-signature": "View Term a -\u003e a -\u003e a -\u003e Maybe (a, a)",
        "fct-source": "src/Ideas-Common-Rewriting-Difference.html#differenceWith",
        "fct-type": "function",
        "title": "differenceWith"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting Difference",
        "module": "Ideas.Common.Rewriting.Difference",
        "name": "differenceWith",
        "normalized": "View Term a-\u003ea-\u003ea-\u003eMaybe(a,a)",
        "package": "ideas",
        "partial": "With",
        "signature": "View Term a-\u003ea-\u003ea-\u003eMaybe(a,a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-RewriteRule.html#",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.RewriteRule",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Common-Rewriting-RewriteRule.html",
        "fct-type": "module",
        "title": "RewriteRule"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting RewriteRule",
        "module": "Ideas.Common.Rewriting.RewriteRule",
        "name": "RewriteRule",
        "normalized": "",
        "package": "ideas",
        "partial": "Rewrite Rule",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-RewriteRule.html#t:Different",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.RewriteRule",
        "fct-package": "ideas",
        "fct-signature": "class",
        "fct-source": "src/Ideas-Common-Rewriting-RewriteRule.html#Different",
        "fct-type": "class",
        "title": "Different"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting RewriteRule",
        "module": "Ideas.Common.Rewriting.RewriteRule",
        "name": "Different",
        "normalized": "",
        "package": "ideas",
        "partial": "Different",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-RewriteRule.html#t:RewriteRule",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.RewriteRule",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Common-Rewriting-RewriteRule.html#RewriteRule",
        "fct-type": "data",
        "title": "RewriteRule"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting RewriteRule",
        "module": "Ideas.Common.Rewriting.RewriteRule",
        "name": "RewriteRule",
        "normalized": "",
        "package": "ideas",
        "partial": "Rewrite Rule",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-RewriteRule.html#t:RuleBuilder",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.RewriteRule",
        "fct-package": "ideas",
        "fct-signature": "class",
        "fct-source": "src/Ideas-Common-Rewriting-RewriteRule.html#RuleBuilder",
        "fct-type": "class",
        "title": "RuleBuilder"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting RewriteRule",
        "module": "Ideas.Common.Rewriting.RewriteRule",
        "name": "RuleBuilder",
        "normalized": "",
        "package": "ideas",
        "partial": "Rule Builder",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-RewriteRule.html#t:RuleSpec",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.RewriteRule",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Common-Rewriting-RewriteRule.html#RuleSpec",
        "fct-type": "data",
        "title": "RuleSpec"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting RewriteRule",
        "module": "Ideas.Common.Rewriting.RewriteRule",
        "name": "RuleSpec",
        "normalized": "",
        "package": "ideas",
        "partial": "Rule Spec",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-RewriteRule.html#v::-126--62-",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.RewriteRule",
        "fct-package": "ideas",
        "fct-signature": "a :~\u003e a",
        "fct-source": "src/Ideas-Common-Rewriting-RewriteRule.html#RuleSpec",
        "fct-type": "function",
        "title": ":~\u003e"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting RewriteRule",
        "module": "Ideas.Common.Rewriting.RewriteRule",
        "name": ":~\u003e",
        "normalized": "",
        "package": "ideas",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-RewriteRule.html#v:buildRuleSpec",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.RewriteRule",
        "fct-package": "ideas",
        "fct-signature": "Int -\u003e t -\u003e RuleSpec Term",
        "fct-source": "src/Ideas-Common-Rewriting-RewriteRule.html#buildRuleSpec",
        "fct-type": "method",
        "title": "buildRuleSpec"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting RewriteRule",
        "module": "Ideas.Common.Rewriting.RewriteRule",
        "name": "buildRuleSpec",
        "normalized": "Int-\u003ea-\u003eRuleSpec Term",
        "package": "ideas",
        "partial": "Rule Spec",
        "signature": "Int-\u003et-\u003eRuleSpec Term"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-RewriteRule.html#v:different",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.RewriteRule",
        "fct-package": "ideas",
        "fct-signature": "(a, a)",
        "fct-source": "src/Ideas-Common-Rewriting-RewriteRule.html#different",
        "fct-type": "method",
        "title": "different"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting RewriteRule",
        "module": "Ideas.Common.Rewriting.RewriteRule",
        "name": "different",
        "normalized": "(a,a)",
        "package": "ideas",
        "partial": "",
        "signature": "(a,a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-RewriteRule.html#v:makeRewriteRule",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.RewriteRule",
        "fct-package": "ideas",
        "fct-signature": "n -\u003e f -\u003e RewriteRule a",
        "fct-source": "src/Ideas-Common-Rewriting-RewriteRule.html#makeRewriteRule",
        "fct-type": "function",
        "title": "makeRewriteRule"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting RewriteRule",
        "module": "Ideas.Common.Rewriting.RewriteRule",
        "name": "makeRewriteRule",
        "normalized": "a-\u003eb-\u003eRewriteRule c",
        "package": "ideas",
        "partial": "Rewrite Rule",
        "signature": "n-\u003ef-\u003eRewriteRule a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-RewriteRule.html#v:metaInRewriteRule",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.RewriteRule",
        "fct-package": "ideas",
        "fct-signature": "RewriteRule a -\u003e [Int]",
        "fct-source": "src/Ideas-Common-Rewriting-RewriteRule.html#metaInRewriteRule",
        "fct-type": "function",
        "title": "metaInRewriteRule"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting RewriteRule",
        "module": "Ideas.Common.Rewriting.RewriteRule",
        "name": "metaInRewriteRule",
        "normalized": "RewriteRule a-\u003e[Int]",
        "package": "ideas",
        "partial": "In Rewrite Rule",
        "signature": "RewriteRule a-\u003e[Int]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-RewriteRule.html#v:renumberRewriteRule",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.RewriteRule",
        "fct-package": "ideas",
        "fct-signature": "Int -\u003e RewriteRule a -\u003e RewriteRule a",
        "fct-source": "src/Ideas-Common-Rewriting-RewriteRule.html#renumberRewriteRule",
        "fct-type": "function",
        "title": "renumberRewriteRule"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting RewriteRule",
        "module": "Ideas.Common.Rewriting.RewriteRule",
        "name": "renumberRewriteRule",
        "normalized": "Int-\u003eRewriteRule a-\u003eRewriteRule a",
        "package": "ideas",
        "partial": "Rewrite Rule",
        "signature": "Int-\u003eRewriteRule a-\u003eRewriteRule a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-RewriteRule.html#v:ruleSpecTerm",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.RewriteRule",
        "fct-package": "ideas",
        "fct-signature": "RewriteRule a -\u003e RuleSpec Term",
        "fct-source": "src/Ideas-Common-Rewriting-RewriteRule.html#ruleSpecTerm",
        "fct-type": "function",
        "title": "ruleSpecTerm"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting RewriteRule",
        "module": "Ideas.Common.Rewriting.RewriteRule",
        "name": "ruleSpecTerm",
        "normalized": "RewriteRule a-\u003eRuleSpec Term",
        "package": "ideas",
        "partial": "Spec Term",
        "signature": "RewriteRule a-\u003eRuleSpec Term"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-RewriteRule.html#v:showRewriteRule",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.RewriteRule",
        "fct-package": "ideas",
        "fct-signature": "Bool -\u003e RewriteRule a -\u003e Maybe String",
        "fct-source": "src/Ideas-Common-Rewriting-RewriteRule.html#showRewriteRule",
        "fct-type": "function",
        "title": "showRewriteRule"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting RewriteRule",
        "module": "Ideas.Common.Rewriting.RewriteRule",
        "name": "showRewriteRule",
        "normalized": "Bool-\u003eRewriteRule a-\u003eMaybe String",
        "package": "ideas",
        "partial": "Rewrite Rule",
        "signature": "Bool-\u003eRewriteRule a-\u003eMaybe String"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-RewriteRule.html#v:symbolBuilder",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.RewriteRule",
        "fct-package": "ideas",
        "fct-signature": "Symbol -\u003e ([Term] -\u003e Term) -\u003e RewriteRule a -\u003e RewriteRule a",
        "fct-source": "src/Ideas-Common-Rewriting-RewriteRule.html#symbolBuilder",
        "fct-type": "function",
        "title": "symbolBuilder"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting RewriteRule",
        "module": "Ideas.Common.Rewriting.RewriteRule",
        "name": "symbolBuilder",
        "normalized": "Symbol-\u003e([Term]-\u003eTerm)-\u003eRewriteRule a-\u003eRewriteRule a",
        "package": "ideas",
        "partial": "Builder",
        "signature": "Symbol-\u003e([Term]-\u003eTerm)-\u003eRewriteRule a-\u003eRewriteRule a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-RewriteRule.html#v:symbolMatcher",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.RewriteRule",
        "fct-package": "ideas",
        "fct-signature": "Symbol -\u003e SymbolMatch -\u003e RewriteRule a -\u003e RewriteRule a",
        "fct-source": "src/Ideas-Common-Rewriting-RewriteRule.html#symbolMatcher",
        "fct-type": "function",
        "title": "symbolMatcher"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting RewriteRule",
        "module": "Ideas.Common.Rewriting.RewriteRule",
        "name": "symbolMatcher",
        "normalized": "Symbol-\u003eSymbolMatch-\u003eRewriteRule a-\u003eRewriteRule a",
        "package": "ideas",
        "partial": "Matcher",
        "signature": "Symbol-\u003eSymbolMatch-\u003eRewriteRule a-\u003eRewriteRule a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Substitution.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eSubstitutions on terms. Substitutions are idempotent, and non-cyclic.\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "Ideas.Common.Rewriting.Substitution",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Common-Rewriting-Substitution.html",
        "fct-type": "module",
        "title": "Substitution"
      },
      "index": {
        "description": "Substitutions on terms Substitutions are idempotent and non-cyclic",
        "hierarchy": "Ideas Common Rewriting Substitution",
        "module": "Ideas.Common.Rewriting.Substitution",
        "name": "Substitution",
        "normalized": "",
        "package": "ideas",
        "partial": "Substitution",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Substitution.html#t:Substitution",
      "description": {
        "fct-descr": "\u003cp\u003eAbstract data type for substitutions\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Rewriting.Substitution",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Common-Rewriting-Substitution.html#Substitution",
        "fct-type": "data",
        "title": "Substitution"
      },
      "index": {
        "description": "Abstract data type for substitutions",
        "hierarchy": "Ideas Common Rewriting Substitution",
        "module": "Ideas.Common.Rewriting.Substitution",
        "name": "Substitution",
        "normalized": "",
        "package": "ideas",
        "partial": "Substitution",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Substitution.html#v:-124--45--62-",
      "description": {
        "fct-descr": "\u003cp\u003eApply the substitution\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Rewriting.Substitution",
        "fct-package": "ideas",
        "fct-signature": "Substitution -\u003e Term -\u003e Term",
        "fct-source": "src/Ideas-Common-Rewriting-Substitution.html#%7C-%3E",
        "fct-type": "function",
        "title": "(|-\u003e)"
      },
      "index": {
        "description": "Apply the substitution",
        "hierarchy": "Ideas Common Rewriting Substitution",
        "module": "Ideas.Common.Rewriting.Substitution",
        "name": "(|-\u003e) |-\u003e",
        "normalized": "Substitution-\u003eTerm-\u003eTerm",
        "package": "ideas",
        "partial": "",
        "signature": "Substitution-\u003eTerm-\u003eTerm"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Substitution.html#v:-64--43--64-",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.Substitution",
        "fct-package": "ideas",
        "fct-signature": "Substitution -\u003e Substitution -\u003e Maybe Substitution",
        "fct-source": "src/Ideas-Common-Rewriting-Substitution.html#%40%2B%40",
        "fct-type": "function",
        "title": "(@+@)"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting Substitution",
        "module": "Ideas.Common.Rewriting.Substitution",
        "name": "(@+@) @+@",
        "normalized": "Substitution-\u003eSubstitution-\u003eMaybe Substitution",
        "package": "ideas",
        "partial": "",
        "signature": "Substitution-\u003eSubstitution-\u003eMaybe Substitution"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Substitution.html#v:-64--64-",
      "description": {
        "fct-descr": "\u003cp\u003eCombines two substitutions. The left-hand side substitution is first applied to\n the co-domain of the right-hand side substitution\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Rewriting.Substitution",
        "fct-package": "ideas",
        "fct-signature": "Substitution -\u003e Substitution -\u003e Substitution",
        "fct-source": "src/Ideas-Common-Rewriting-Substitution.html#%40%40",
        "fct-type": "function",
        "title": "(@@)"
      },
      "index": {
        "description": "Combines two substitutions The left-hand side substitution is first applied to the co-domain of the right-hand side substitution",
        "hierarchy": "Ideas Common Rewriting Substitution",
        "module": "Ideas.Common.Rewriting.Substitution",
        "name": "(@@) @@",
        "normalized": "Substitution-\u003eSubstitution-\u003eSubstitution",
        "package": "ideas",
        "partial": "",
        "signature": "Substitution-\u003eSubstitution-\u003eSubstitution"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Substitution.html#v:composable",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.Substitution",
        "fct-package": "ideas",
        "fct-signature": "Substitution -\u003e Substitution -\u003e Bool",
        "fct-source": "src/Ideas-Common-Rewriting-Substitution.html#composable",
        "fct-type": "function",
        "title": "composable"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting Substitution",
        "module": "Ideas.Common.Rewriting.Substitution",
        "name": "composable",
        "normalized": "Substitution-\u003eSubstitution-\u003eBool",
        "package": "ideas",
        "partial": "",
        "signature": "Substitution-\u003eSubstitution-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Substitution.html#v:dom",
      "description": {
        "fct-descr": "\u003cp\u003eReturns the domain of a substitution (as a set)\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Rewriting.Substitution",
        "fct-package": "ideas",
        "fct-signature": "Substitution -\u003e IntSet",
        "fct-source": "src/Ideas-Common-Rewriting-Substitution.html#dom",
        "fct-type": "function",
        "title": "dom"
      },
      "index": {
        "description": "Returns the domain of substitution as set",
        "hierarchy": "Ideas Common Rewriting Substitution",
        "module": "Ideas.Common.Rewriting.Substitution",
        "name": "dom",
        "normalized": "Substitution-\u003eIntSet",
        "package": "ideas",
        "partial": "",
        "signature": "Substitution-\u003eIntSet"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Substitution.html#v:emptySubst",
      "description": {
        "fct-descr": "\u003cp\u003eReturns the empty substitution\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Rewriting.Substitution",
        "fct-package": "ideas",
        "fct-signature": "Substitution",
        "fct-source": "src/Ideas-Common-Rewriting-Substitution.html#emptySubst",
        "fct-type": "function",
        "title": "emptySubst"
      },
      "index": {
        "description": "Returns the empty substitution",
        "hierarchy": "Ideas Common Rewriting Substitution",
        "module": "Ideas.Common.Rewriting.Substitution",
        "name": "emptySubst",
        "normalized": "",
        "package": "ideas",
        "partial": "Subst",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Substitution.html#v:listToSubst",
      "description": {
        "fct-descr": "\u003cp\u003eTurns a list into a substitution\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Rewriting.Substitution",
        "fct-package": "ideas",
        "fct-signature": "[(Int, Term)] -\u003e Substitution",
        "fct-source": "src/Ideas-Common-Rewriting-Substitution.html#listToSubst",
        "fct-type": "function",
        "title": "listToSubst"
      },
      "index": {
        "description": "Turns list into substitution",
        "hierarchy": "Ideas Common Rewriting Substitution",
        "module": "Ideas.Common.Rewriting.Substitution",
        "name": "listToSubst",
        "normalized": "[(Int,Term)]-\u003eSubstitution",
        "package": "ideas",
        "partial": "To Subst",
        "signature": "[(Int,Term)]-\u003eSubstitution"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Substitution.html#v:lookupVar",
      "description": {
        "fct-descr": "\u003cp\u003eLookups a variable in a substitution. Nothing indicates that the variable is\n not in the domain of the substitution\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Rewriting.Substitution",
        "fct-package": "ideas",
        "fct-signature": "Int -\u003e Substitution -\u003e Maybe Term",
        "fct-source": "src/Ideas-Common-Rewriting-Substitution.html#lookupVar",
        "fct-type": "function",
        "title": "lookupVar"
      },
      "index": {
        "description": "Lookups variable in substitution Nothing indicates that the variable is not in the domain of the substitution",
        "hierarchy": "Ideas Common Rewriting Substitution",
        "module": "Ideas.Common.Rewriting.Substitution",
        "name": "lookupVar",
        "normalized": "Int-\u003eSubstitution-\u003eMaybe Term",
        "package": "ideas",
        "partial": "Var",
        "signature": "Int-\u003eSubstitution-\u003eMaybe Term"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Substitution.html#v:singletonSubst",
      "description": {
        "fct-descr": "\u003cp\u003eReturns a singleton substitution\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Rewriting.Substitution",
        "fct-package": "ideas",
        "fct-signature": "Int -\u003e Term -\u003e Substitution",
        "fct-source": "src/Ideas-Common-Rewriting-Substitution.html#singletonSubst",
        "fct-type": "function",
        "title": "singletonSubst"
      },
      "index": {
        "description": "Returns singleton substitution",
        "hierarchy": "Ideas Common Rewriting Substitution",
        "module": "Ideas.Common.Rewriting.Substitution",
        "name": "singletonSubst",
        "normalized": "Int-\u003eTerm-\u003eSubstitution",
        "package": "ideas",
        "partial": "Subst",
        "signature": "Int-\u003eTerm-\u003eSubstitution"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Substitution.html#v:tests",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.Substitution",
        "fct-package": "ideas",
        "fct-signature": "TestSuite",
        "fct-source": "src/Ideas-Common-Rewriting-Substitution.html#tests",
        "fct-type": "function",
        "title": "tests"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting Substitution",
        "module": "Ideas.Common.Rewriting.Substitution",
        "name": "tests",
        "normalized": "",
        "package": "ideas",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Term.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eA simple data type for term rewriting\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "Ideas.Common.Rewriting.Term",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Common-Rewriting-Term.html",
        "fct-type": "module",
        "title": "Term"
      },
      "index": {
        "description": "simple data type for term rewriting",
        "hierarchy": "Ideas Common Rewriting Term",
        "module": "Ideas.Common.Rewriting.Term",
        "name": "Term",
        "normalized": "",
        "package": "ideas",
        "partial": "Term",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Term.html#t:IsTerm",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.Term",
        "fct-package": "ideas",
        "fct-signature": "class",
        "fct-source": "src/Ideas-Common-Rewriting-Term.html#IsTerm",
        "fct-type": "class",
        "title": "IsTerm"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting Term",
        "module": "Ideas.Common.Rewriting.Term",
        "name": "IsTerm",
        "normalized": "",
        "package": "ideas",
        "partial": "Is Term",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Term.html#t:Symbol",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.Term",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Common-Rewriting-Term.html#Symbol",
        "fct-type": "data",
        "title": "Symbol"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting Term",
        "module": "Ideas.Common.Rewriting.Term",
        "name": "Symbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Term.html#t:Term",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.Term",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Common-Rewriting-Term.html#Term",
        "fct-type": "data",
        "title": "Term"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting Term",
        "module": "Ideas.Common.Rewriting.Term",
        "name": "Term",
        "normalized": "",
        "package": "ideas",
        "partial": "Term",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Term.html#t:WithFunctions",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.Term",
        "fct-package": "ideas",
        "fct-signature": "class",
        "fct-source": "src/Ideas-Common-Rewriting-Term.html#WithFunctions",
        "fct-type": "class",
        "title": "WithFunctions"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting Term",
        "module": "Ideas.Common.Rewriting.Term",
        "name": "WithFunctions",
        "normalized": "",
        "package": "ideas",
        "partial": "With Functions",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Term.html#t:WithMetaVars",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.Term",
        "fct-package": "ideas",
        "fct-signature": "class",
        "fct-source": "src/Ideas-Common-Rewriting-Term.html#WithMetaVars",
        "fct-type": "class",
        "title": "WithMetaVars"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting Term",
        "module": "Ideas.Common.Rewriting.Term",
        "name": "WithMetaVars",
        "normalized": "",
        "package": "ideas",
        "partial": "With Meta Vars",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Term.html#t:WithVars",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.Term",
        "fct-package": "ideas",
        "fct-signature": "class",
        "fct-source": "src/Ideas-Common-Rewriting-Term.html#WithVars",
        "fct-type": "class",
        "title": "WithVars"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting Term",
        "module": "Ideas.Common.Rewriting.Term",
        "name": "WithVars",
        "normalized": "",
        "package": "ideas",
        "partial": "With Vars",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Term.html#v:TCon",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.Term",
        "fct-package": "ideas",
        "fct-signature": "TCon Symbol [Term]",
        "fct-source": "src/Ideas-Common-Rewriting-Term.html#Term",
        "fct-type": "function",
        "title": "TCon"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting Term",
        "module": "Ideas.Common.Rewriting.Term",
        "name": "TCon",
        "normalized": "TCon Symbol[Term]",
        "package": "ideas",
        "partial": "TCon",
        "signature": "TCon Symbol[Term]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Term.html#v:TFloat",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.Term",
        "fct-package": "ideas",
        "fct-signature": "TFloat Double",
        "fct-source": "src/Ideas-Common-Rewriting-Term.html#Term",
        "fct-type": "function",
        "title": "TFloat"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting Term",
        "module": "Ideas.Common.Rewriting.Term",
        "name": "TFloat",
        "normalized": "",
        "package": "ideas",
        "partial": "TFloat",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Term.html#v:TList",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.Term",
        "fct-package": "ideas",
        "fct-signature": "TList [Term]",
        "fct-source": "src/Ideas-Common-Rewriting-Term.html#Term",
        "fct-type": "function",
        "title": "TList"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting Term",
        "module": "Ideas.Common.Rewriting.Term",
        "name": "TList",
        "normalized": "TList[Term]",
        "package": "ideas",
        "partial": "TList",
        "signature": "TList[Term]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Term.html#v:TMeta",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.Term",
        "fct-package": "ideas",
        "fct-signature": "TMeta Int",
        "fct-source": "src/Ideas-Common-Rewriting-Term.html#Term",
        "fct-type": "function",
        "title": "TMeta"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting Term",
        "module": "Ideas.Common.Rewriting.Term",
        "name": "TMeta",
        "normalized": "",
        "package": "ideas",
        "partial": "TMeta",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Term.html#v:TNum",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.Term",
        "fct-package": "ideas",
        "fct-signature": "TNum Integer",
        "fct-source": "src/Ideas-Common-Rewriting-Term.html#Term",
        "fct-type": "function",
        "title": "TNum"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting Term",
        "module": "Ideas.Common.Rewriting.Term",
        "name": "TNum",
        "normalized": "",
        "package": "ideas",
        "partial": "TNum",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Term.html#v:TVar",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.Term",
        "fct-package": "ideas",
        "fct-signature": "TVar String",
        "fct-source": "src/Ideas-Common-Rewriting-Term.html#Term",
        "fct-type": "function",
        "title": "TVar"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting Term",
        "module": "Ideas.Common.Rewriting.Term",
        "name": "TVar",
        "normalized": "",
        "package": "ideas",
        "partial": "TVar",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Term.html#v:binary",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.Term",
        "fct-package": "ideas",
        "fct-signature": "Symbol -\u003e a -\u003e a -\u003e a",
        "fct-source": "src/Ideas-Common-Rewriting-Term.html#binary",
        "fct-type": "function",
        "title": "binary"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting Term",
        "module": "Ideas.Common.Rewriting.Term",
        "name": "binary",
        "normalized": "Symbol-\u003ea-\u003ea-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "Symbol-\u003ea-\u003ea-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Term.html#v:fromTerm",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.Term",
        "fct-package": "ideas",
        "fct-signature": "Term -\u003e m a",
        "fct-source": "src/Ideas-Common-Rewriting-Term.html#fromTerm",
        "fct-type": "method",
        "title": "fromTerm"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting Term",
        "module": "Ideas.Common.Rewriting.Term",
        "name": "fromTerm",
        "normalized": "Term-\u003ea b",
        "package": "ideas",
        "partial": "Term",
        "signature": "Term-\u003em a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Term.html#v:fromTermM",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.Term",
        "fct-package": "ideas",
        "fct-signature": "Term -\u003e m a",
        "fct-source": "src/Ideas-Common-Rewriting-Term.html#fromTermM",
        "fct-type": "function",
        "title": "fromTermM"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting Term",
        "module": "Ideas.Common.Rewriting.Term",
        "name": "fromTermM",
        "normalized": "Term-\u003ea b",
        "package": "ideas",
        "partial": "Term",
        "signature": "Term-\u003em a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Term.html#v:fromTermWith",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.Term",
        "fct-package": "ideas",
        "fct-signature": "(Symbol -\u003e [a] -\u003e m a) -\u003e Term -\u003e m a",
        "fct-source": "src/Ideas-Common-Rewriting-Term.html#fromTermWith",
        "fct-type": "function",
        "title": "fromTermWith"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting Term",
        "module": "Ideas.Common.Rewriting.Term",
        "name": "fromTermWith",
        "normalized": "(Symbol-\u003e[a]-\u003eb a)-\u003eTerm-\u003eb a",
        "package": "ideas",
        "partial": "Term With",
        "signature": "(Symbol-\u003e[a]-\u003em a)-\u003eTerm-\u003em a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Term.html#v:function",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.Term",
        "fct-package": "ideas",
        "fct-signature": "Symbol -\u003e [a] -\u003e a",
        "fct-source": "src/Ideas-Common-Rewriting-Term.html#function",
        "fct-type": "method",
        "title": "function"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting Term",
        "module": "Ideas.Common.Rewriting.Term",
        "name": "function",
        "normalized": "Symbol-\u003e[a]-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "Symbol-\u003e[a]-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Term.html#v:getFunction",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.Term",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e m (Symbol, [a])",
        "fct-source": "src/Ideas-Common-Rewriting-Term.html#getFunction",
        "fct-type": "method",
        "title": "getFunction"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting Term",
        "module": "Ideas.Common.Rewriting.Term",
        "name": "getFunction",
        "normalized": "a-\u003eb(Symbol,[a])",
        "package": "ideas",
        "partial": "Function",
        "signature": "a-\u003em(Symbol,[a])"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Term.html#v:getMetaVar",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.Term",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e m Int",
        "fct-source": "src/Ideas-Common-Rewriting-Term.html#getMetaVar",
        "fct-type": "method",
        "title": "getMetaVar"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting Term",
        "module": "Ideas.Common.Rewriting.Term",
        "name": "getMetaVar",
        "normalized": "a-\u003eb Int",
        "package": "ideas",
        "partial": "Meta Var",
        "signature": "a-\u003em Int"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Term.html#v:getSymbol",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.Term",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e m Symbol",
        "fct-source": "src/Ideas-Common-Rewriting-Term.html#getSymbol",
        "fct-type": "method",
        "title": "getSymbol"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting Term",
        "module": "Ideas.Common.Rewriting.Term",
        "name": "getSymbol",
        "normalized": "a-\u003eb Symbol",
        "package": "ideas",
        "partial": "Symbol",
        "signature": "a-\u003em Symbol"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Term.html#v:getVariable",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.Term",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e m String",
        "fct-source": "src/Ideas-Common-Rewriting-Term.html#getVariable",
        "fct-type": "method",
        "title": "getVariable"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting Term",
        "module": "Ideas.Common.Rewriting.Term",
        "name": "getVariable",
        "normalized": "a-\u003eb String",
        "package": "ideas",
        "partial": "Variable",
        "signature": "a-\u003em String"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Term.html#v:hasMetaVar",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.Term",
        "fct-package": "ideas",
        "fct-signature": "Int -\u003e a -\u003e Bool",
        "fct-source": "src/Ideas-Common-Rewriting-Term.html#hasMetaVar",
        "fct-type": "function",
        "title": "hasMetaVar"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting Term",
        "module": "Ideas.Common.Rewriting.Term",
        "name": "hasMetaVar",
        "normalized": "Int-\u003ea-\u003eBool",
        "package": "ideas",
        "partial": "Meta Var",
        "signature": "Int-\u003ea-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Term.html#v:hasNoVar",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.Term",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e Bool",
        "fct-source": "src/Ideas-Common-Rewriting-Term.html#hasNoVar",
        "fct-type": "function",
        "title": "hasNoVar"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting Term",
        "module": "Ideas.Common.Rewriting.Term",
        "name": "hasNoVar",
        "normalized": "a-\u003eBool",
        "package": "ideas",
        "partial": "No Var",
        "signature": "a-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Term.html#v:hasSomeVar",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.Term",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e Bool",
        "fct-source": "src/Ideas-Common-Rewriting-Term.html#hasSomeVar",
        "fct-type": "function",
        "title": "hasSomeVar"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting Term",
        "module": "Ideas.Common.Rewriting.Term",
        "name": "hasSomeVar",
        "normalized": "a-\u003eBool",
        "package": "ideas",
        "partial": "Some Var",
        "signature": "a-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Term.html#v:hasVar",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.Term",
        "fct-package": "ideas",
        "fct-signature": "String -\u003e a -\u003e Bool",
        "fct-source": "src/Ideas-Common-Rewriting-Term.html#hasVar",
        "fct-type": "function",
        "title": "hasVar"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting Term",
        "module": "Ideas.Common.Rewriting.Term",
        "name": "hasVar",
        "normalized": "String-\u003ea-\u003eBool",
        "package": "ideas",
        "partial": "Var",
        "signature": "String-\u003ea-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Term.html#v:isAssociative",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.Term",
        "fct-package": "ideas",
        "fct-signature": "Symbol -\u003e Bool",
        "fct-source": "src/Ideas-Common-Rewriting-Term.html#isAssociative",
        "fct-type": "function",
        "title": "isAssociative"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting Term",
        "module": "Ideas.Common.Rewriting.Term",
        "name": "isAssociative",
        "normalized": "Symbol-\u003eBool",
        "package": "ideas",
        "partial": "Associative",
        "signature": "Symbol-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Term.html#v:isBinary",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.Term",
        "fct-package": "ideas",
        "fct-signature": "Symbol -\u003e a -\u003e m (a, a)",
        "fct-source": "src/Ideas-Common-Rewriting-Term.html#isBinary",
        "fct-type": "function",
        "title": "isBinary"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting Term",
        "module": "Ideas.Common.Rewriting.Term",
        "name": "isBinary",
        "normalized": "Symbol-\u003ea-\u003eb(a,a)",
        "package": "ideas",
        "partial": "Binary",
        "signature": "Symbol-\u003ea-\u003em(a,a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Term.html#v:isFunction",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.Term",
        "fct-package": "ideas",
        "fct-signature": "Symbol -\u003e a -\u003e m [a]",
        "fct-source": "src/Ideas-Common-Rewriting-Term.html#isFunction",
        "fct-type": "function",
        "title": "isFunction"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting Term",
        "module": "Ideas.Common.Rewriting.Term",
        "name": "isFunction",
        "normalized": "Symbol-\u003ea-\u003eb[a]",
        "package": "ideas",
        "partial": "Function",
        "signature": "Symbol-\u003ea-\u003em[a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Term.html#v:isMetaVar",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.Term",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e Bool",
        "fct-source": "src/Ideas-Common-Rewriting-Term.html#isMetaVar",
        "fct-type": "function",
        "title": "isMetaVar"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting Term",
        "module": "Ideas.Common.Rewriting.Term",
        "name": "isMetaVar",
        "normalized": "a-\u003eBool",
        "package": "ideas",
        "partial": "Meta Var",
        "signature": "a-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Term.html#v:isSymbol",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.Term",
        "fct-package": "ideas",
        "fct-signature": "Symbol -\u003e a -\u003e Bool",
        "fct-source": "src/Ideas-Common-Rewriting-Term.html#isSymbol",
        "fct-type": "function",
        "title": "isSymbol"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting Term",
        "module": "Ideas.Common.Rewriting.Term",
        "name": "isSymbol",
        "normalized": "Symbol-\u003ea-\u003eBool",
        "package": "ideas",
        "partial": "Symbol",
        "signature": "Symbol-\u003ea-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Term.html#v:isUnary",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.Term",
        "fct-package": "ideas",
        "fct-signature": "Symbol -\u003e a -\u003e m a",
        "fct-source": "src/Ideas-Common-Rewriting-Term.html#isUnary",
        "fct-type": "function",
        "title": "isUnary"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting Term",
        "module": "Ideas.Common.Rewriting.Term",
        "name": "isUnary",
        "normalized": "Symbol-\u003ea-\u003eb a",
        "package": "ideas",
        "partial": "Unary",
        "signature": "Symbol-\u003ea-\u003em a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Term.html#v:isVariable",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.Term",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e Bool",
        "fct-source": "src/Ideas-Common-Rewriting-Term.html#isVariable",
        "fct-type": "function",
        "title": "isVariable"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting Term",
        "module": "Ideas.Common.Rewriting.Term",
        "name": "isVariable",
        "normalized": "a-\u003eBool",
        "package": "ideas",
        "partial": "Variable",
        "signature": "a-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Term.html#v:makeAssociative",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.Term",
        "fct-package": "ideas",
        "fct-signature": "Symbol -\u003e Symbol",
        "fct-source": "src/Ideas-Common-Rewriting-Term.html#makeAssociative",
        "fct-type": "function",
        "title": "makeAssociative"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting Term",
        "module": "Ideas.Common.Rewriting.Term",
        "name": "makeAssociative",
        "normalized": "Symbol-\u003eSymbol",
        "package": "ideas",
        "partial": "Associative",
        "signature": "Symbol-\u003eSymbol"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Term.html#v:metaVar",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.Term",
        "fct-package": "ideas",
        "fct-signature": "Int -\u003e a",
        "fct-source": "src/Ideas-Common-Rewriting-Term.html#metaVar",
        "fct-type": "method",
        "title": "metaVar"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting Term",
        "module": "Ideas.Common.Rewriting.Term",
        "name": "metaVar",
        "normalized": "Int-\u003ea",
        "package": "ideas",
        "partial": "Var",
        "signature": "Int-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Term.html#v:metaVarSet",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.Term",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e IntSet",
        "fct-source": "src/Ideas-Common-Rewriting-Term.html#metaVarSet",
        "fct-type": "function",
        "title": "metaVarSet"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting Term",
        "module": "Ideas.Common.Rewriting.Term",
        "name": "metaVarSet",
        "normalized": "a-\u003eIntSet",
        "package": "ideas",
        "partial": "Var Set",
        "signature": "a-\u003eIntSet"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Term.html#v:metaVars",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.Term",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e [Int]",
        "fct-source": "src/Ideas-Common-Rewriting-Term.html#metaVars",
        "fct-type": "function",
        "title": "metaVars"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting Term",
        "module": "Ideas.Common.Rewriting.Term",
        "name": "metaVars",
        "normalized": "a-\u003e[Int]",
        "package": "ideas",
        "partial": "Vars",
        "signature": "a-\u003e[Int]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Term.html#v:newSymbol",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.Term",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e Symbol",
        "fct-source": "src/Ideas-Common-Rewriting-Term.html#newSymbol",
        "fct-type": "function",
        "title": "newSymbol"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting Term",
        "module": "Ideas.Common.Rewriting.Term",
        "name": "newSymbol",
        "normalized": "a-\u003eSymbol",
        "package": "ideas",
        "partial": "Symbol",
        "signature": "a-\u003eSymbol"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Term.html#v:nextMetaVar",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.Term",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e Int",
        "fct-source": "src/Ideas-Common-Rewriting-Term.html#nextMetaVar",
        "fct-type": "function",
        "title": "nextMetaVar"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting Term",
        "module": "Ideas.Common.Rewriting.Term",
        "name": "nextMetaVar",
        "normalized": "a-\u003eInt",
        "package": "ideas",
        "partial": "Meta Var",
        "signature": "a-\u003eInt"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Term.html#v:symbol",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.Term",
        "fct-package": "ideas",
        "fct-signature": "Symbol -\u003e a",
        "fct-source": "src/Ideas-Common-Rewriting-Term.html#symbol",
        "fct-type": "method",
        "title": "symbol"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting Term",
        "module": "Ideas.Common.Rewriting.Term",
        "name": "symbol",
        "normalized": "Symbol-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "Symbol-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Term.html#v:termView",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.Term",
        "fct-package": "ideas",
        "fct-signature": "View Term a",
        "fct-source": "src/Ideas-Common-Rewriting-Term.html#termView",
        "fct-type": "function",
        "title": "termView"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting Term",
        "module": "Ideas.Common.Rewriting.Term",
        "name": "termView",
        "normalized": "",
        "package": "ideas",
        "partial": "View",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Term.html#v:toTerm",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.Term",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e Term",
        "fct-source": "src/Ideas-Common-Rewriting-Term.html#toTerm",
        "fct-type": "method",
        "title": "toTerm"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting Term",
        "module": "Ideas.Common.Rewriting.Term",
        "name": "toTerm",
        "normalized": "a-\u003eTerm",
        "package": "ideas",
        "partial": "Term",
        "signature": "a-\u003eTerm"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Term.html#v:unary",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.Term",
        "fct-package": "ideas",
        "fct-signature": "Symbol -\u003e a -\u003e a",
        "fct-source": "src/Ideas-Common-Rewriting-Term.html#unary",
        "fct-type": "function",
        "title": "unary"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting Term",
        "module": "Ideas.Common.Rewriting.Term",
        "name": "unary",
        "normalized": "Symbol-\u003ea-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "Symbol-\u003ea-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Term.html#v:varSet",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.Term",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e Set String",
        "fct-source": "src/Ideas-Common-Rewriting-Term.html#varSet",
        "fct-type": "function",
        "title": "varSet"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting Term",
        "module": "Ideas.Common.Rewriting.Term",
        "name": "varSet",
        "normalized": "a-\u003eSet String",
        "package": "ideas",
        "partial": "Set",
        "signature": "a-\u003eSet String"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Term.html#v:variable",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.Term",
        "fct-package": "ideas",
        "fct-signature": "String -\u003e a",
        "fct-source": "src/Ideas-Common-Rewriting-Term.html#variable",
        "fct-type": "method",
        "title": "variable"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting Term",
        "module": "Ideas.Common.Rewriting.Term",
        "name": "variable",
        "normalized": "String-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "String-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Term.html#v:variableView",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.Term",
        "fct-package": "ideas",
        "fct-signature": "View a String",
        "fct-source": "src/Ideas-Common-Rewriting-Term.html#variableView",
        "fct-type": "function",
        "title": "variableView"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting Term",
        "module": "Ideas.Common.Rewriting.Term",
        "name": "variableView",
        "normalized": "",
        "package": "ideas",
        "partial": "View",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Term.html#v:vars",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.Term",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e [String]",
        "fct-source": "src/Ideas-Common-Rewriting-Term.html#vars",
        "fct-type": "function",
        "title": "vars"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting Term",
        "module": "Ideas.Common.Rewriting.Term",
        "name": "vars",
        "normalized": "a-\u003e[String]",
        "package": "ideas",
        "partial": "",
        "signature": "a-\u003e[String]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Term.html#v:withoutVar",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.Term",
        "fct-package": "ideas",
        "fct-signature": "String -\u003e a -\u003e Bool",
        "fct-source": "src/Ideas-Common-Rewriting-Term.html#withoutVar",
        "fct-type": "function",
        "title": "withoutVar"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting Term",
        "module": "Ideas.Common.Rewriting.Term",
        "name": "withoutVar",
        "normalized": "String-\u003ea-\u003eBool",
        "package": "ideas",
        "partial": "Var",
        "signature": "String-\u003ea-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Unification.html#",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.Unification",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Common-Rewriting-Unification.html",
        "fct-type": "module",
        "title": "Unification"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting Unification",
        "module": "Ideas.Common.Rewriting.Unification",
        "name": "Unification",
        "normalized": "",
        "package": "ideas",
        "partial": "Unification",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Unification.html#t:Match",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.Unification",
        "fct-package": "ideas",
        "fct-signature": "type",
        "fct-source": "src/Ideas-Common-Rewriting-Unification.html#Match",
        "fct-type": "type",
        "title": "Match"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting Unification",
        "module": "Ideas.Common.Rewriting.Unification",
        "name": "Match",
        "normalized": "",
        "package": "ideas",
        "partial": "Match",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Unification.html#t:SymbolMatch",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.Unification",
        "fct-package": "ideas",
        "fct-signature": "type",
        "fct-source": "src/Ideas-Common-Rewriting-Unification.html#SymbolMatch",
        "fct-type": "type",
        "title": "SymbolMatch"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting Unification",
        "module": "Ideas.Common.Rewriting.Unification",
        "name": "SymbolMatch",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol Match",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Unification.html#v:match",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.Unification",
        "fct-package": "ideas",
        "fct-signature": "Term -\u003e Term -\u003e m Substitution",
        "fct-source": "src/Ideas-Common-Rewriting-Unification.html#match",
        "fct-type": "function",
        "title": "match"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting Unification",
        "module": "Ideas.Common.Rewriting.Unification",
        "name": "match",
        "normalized": "Term-\u003eTerm-\u003ea Substitution",
        "package": "ideas",
        "partial": "",
        "signature": "Term-\u003eTerm-\u003em Substitution"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Unification.html#v:matchExtended",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.Unification",
        "fct-package": "ideas",
        "fct-signature": "Map Symbol SymbolMatch -\u003e Term -\u003e Term -\u003e [(Substitution, Maybe Term, Maybe Term)]",
        "fct-source": "src/Ideas-Common-Rewriting-Unification.html#matchExtended",
        "fct-type": "function",
        "title": "matchExtended"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting Unification",
        "module": "Ideas.Common.Rewriting.Unification",
        "name": "matchExtended",
        "normalized": "Map Symbol SymbolMatch-\u003eTerm-\u003eTerm-\u003e[(Substitution,Maybe Term,Maybe Term)]",
        "package": "ideas",
        "partial": "Extended",
        "signature": "Map Symbol SymbolMatch-\u003eTerm-\u003eTerm-\u003e[(Substitution,Maybe Term,Maybe Term)]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Unification.html#v:matchList",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.Unification",
        "fct-package": "ideas",
        "fct-signature": "Match Term -\u003e Match [Term]",
        "fct-source": "src/Ideas-Common-Rewriting-Unification.html#matchList",
        "fct-type": "function",
        "title": "matchList"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting Unification",
        "module": "Ideas.Common.Rewriting.Unification",
        "name": "matchList",
        "normalized": "Match Term-\u003eMatch[Term]",
        "package": "ideas",
        "partial": "List",
        "signature": "Match Term-\u003eMatch[Term]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Unification.html#v:unificationTests",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.Unification",
        "fct-package": "ideas",
        "fct-signature": "TestSuite",
        "fct-source": "src/Ideas-Common-Rewriting-Unification.html#unificationTests",
        "fct-type": "function",
        "title": "unificationTests"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting Unification",
        "module": "Ideas.Common.Rewriting.Unification",
        "name": "unificationTests",
        "normalized": "",
        "package": "ideas",
        "partial": "Tests",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting-Unification.html#v:unify",
      "description": {
        "fct-module": "Ideas.Common.Rewriting.Unification",
        "fct-package": "ideas",
        "fct-signature": "Term -\u003e Term -\u003e Maybe Substitution",
        "fct-source": "src/Ideas-Common-Rewriting-Unification.html#unify",
        "fct-type": "function",
        "title": "unify"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting Unification",
        "module": "Ideas.Common.Rewriting.Unification",
        "name": "unify",
        "normalized": "Term-\u003eTerm-\u003eMaybe Substitution",
        "package": "ideas",
        "partial": "",
        "signature": "Term-\u003eTerm-\u003eMaybe Substitution"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rewriting.html#",
      "description": {
        "fct-module": "Ideas.Common.Rewriting",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Common-Rewriting.html",
        "fct-type": "module",
        "title": "Rewriting"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rewriting",
        "module": "Ideas.Common.Rewriting",
        "name": "Rewriting",
        "normalized": "",
        "package": "ideas",
        "partial": "Rewriting",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-Abstract.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eA rule is just a transformation with some meta-information, such as a name\n (which should be unique) and properties such as \u003ca\u003ebuggy\u003c/a\u003e or \u003ca\u003eminor\u003c/a\u003e. Rules\n can be lifted with a view using the LiftView type class.\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "Ideas.Common.Rule.Abstract",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Common-Rule-Abstract.html",
        "fct-type": "module",
        "title": "Abstract"
      },
      "index": {
        "description": "rule is just transformation with some meta-information such as name which should be unique and properties such as buggy or minor Rules can be lifted with view using the LiftView type class",
        "hierarchy": "Ideas Common Rule Abstract",
        "module": "Ideas.Common.Rule.Abstract",
        "name": "Abstract",
        "normalized": "",
        "package": "ideas",
        "partial": "Abstract",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-Abstract.html#t:Rule",
      "description": {
        "fct-descr": "\u003cp\u003eAbstract data type for representing rules\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Rule.Abstract",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Common-Rule-Abstract.html#Rule",
        "fct-type": "data",
        "title": "Rule"
      },
      "index": {
        "description": "Abstract data type for representing rules",
        "hierarchy": "Ideas Common Rule Abstract",
        "module": "Ideas.Common.Rule.Abstract",
        "name": "Rule",
        "normalized": "",
        "package": "ideas",
        "partial": "Rule",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-Abstract.html#v:addRecognizer",
      "description": {
        "fct-module": "Ideas.Common.Rule.Abstract",
        "fct-package": "ideas",
        "fct-signature": "Recognizer a -\u003e Rule a -\u003e Rule a",
        "fct-source": "src/Ideas-Common-Rule-Abstract.html#addRecognizer",
        "fct-type": "function",
        "title": "addRecognizer"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rule Abstract",
        "module": "Ideas.Common.Rule.Abstract",
        "name": "addRecognizer",
        "normalized": "Recognizer a-\u003eRule a-\u003eRule a",
        "package": "ideas",
        "partial": "Recognizer",
        "signature": "Recognizer a-\u003eRule a-\u003eRule a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-Abstract.html#v:addRecognizerBool",
      "description": {
        "fct-module": "Ideas.Common.Rule.Abstract",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e a -\u003e Bool) -\u003e Rule a -\u003e Rule a",
        "fct-source": "src/Ideas-Common-Rule-Abstract.html#addRecognizerBool",
        "fct-type": "function",
        "title": "addRecognizerBool"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rule Abstract",
        "module": "Ideas.Common.Rule.Abstract",
        "name": "addRecognizerBool",
        "normalized": "(a-\u003ea-\u003eBool)-\u003eRule a-\u003eRule a",
        "package": "ideas",
        "partial": "Recognizer Bool",
        "signature": "(a-\u003ea-\u003eBool)-\u003eRule a-\u003eRule a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-Abstract.html#v:addRecognizerEnvMonad",
      "description": {
        "fct-module": "Ideas.Common.Rule.Abstract",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e a -\u003e EnvMonad ()) -\u003e Rule a -\u003e Rule a",
        "fct-source": "src/Ideas-Common-Rule-Abstract.html#addRecognizerEnvMonad",
        "fct-type": "function",
        "title": "addRecognizerEnvMonad"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rule Abstract",
        "module": "Ideas.Common.Rule.Abstract",
        "name": "addRecognizerEnvMonad",
        "normalized": "(a-\u003ea-\u003eEnvMonad())-\u003eRule a-\u003eRule a",
        "package": "ideas",
        "partial": "Recognizer Env Monad",
        "signature": "(a-\u003ea-\u003eEnvMonad())-\u003eRule a-\u003eRule a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-Abstract.html#v:addTransRecognizer",
      "description": {
        "fct-module": "Ideas.Common.Rule.Abstract",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e a -\u003e Bool) -\u003e Rule a -\u003e Rule a",
        "fct-source": "src/Ideas-Common-Rule-Abstract.html#addTransRecognizer",
        "fct-type": "function",
        "title": "addTransRecognizer"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rule Abstract",
        "module": "Ideas.Common.Rule.Abstract",
        "name": "addTransRecognizer",
        "normalized": "(a-\u003ea-\u003eBool)-\u003eRule a-\u003eRule a",
        "package": "ideas",
        "partial": "Trans Recognizer",
        "signature": "(a-\u003ea-\u003eBool)-\u003eRule a-\u003eRule a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-Abstract.html#v:buggyRule",
      "description": {
        "fct-module": "Ideas.Common.Rule.Abstract",
        "fct-package": "ideas",
        "fct-signature": "n -\u003e (a -\u003e f a) -\u003e Rule a",
        "fct-source": "src/Ideas-Common-Rule-Abstract.html#buggyRule",
        "fct-type": "function",
        "title": "buggyRule"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rule Abstract",
        "module": "Ideas.Common.Rule.Abstract",
        "name": "buggyRule",
        "normalized": "a-\u003e(b-\u003ec b)-\u003eRule b",
        "package": "ideas",
        "partial": "Rule",
        "signature": "n-\u003e(a-\u003ef a)-\u003eRule a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-Abstract.html#v:checkReferences",
      "description": {
        "fct-module": "Ideas.Common.Rule.Abstract",
        "fct-package": "ideas",
        "fct-signature": "Rule a -\u003e Environment -\u003e Maybe String",
        "fct-source": "src/Ideas-Common-Rule-Abstract.html#checkReferences",
        "fct-type": "function",
        "title": "checkReferences"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rule Abstract",
        "module": "Ideas.Common.Rule.Abstract",
        "name": "checkReferences",
        "normalized": "Rule a-\u003eEnvironment-\u003eMaybe String",
        "package": "ideas",
        "partial": "References",
        "signature": "Rule a-\u003eEnvironment-\u003eMaybe String"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-Abstract.html#v:checkRule",
      "description": {
        "fct-descr": "\u003cp\u003eA special (minor) rule that checks a predicate (and returns the identity\n if the predicate holds)\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Rule.Abstract",
        "fct-package": "ideas",
        "fct-signature": "n -\u003e (a -\u003e Bool) -\u003e Rule a",
        "fct-source": "src/Ideas-Common-Rule-Abstract.html#checkRule",
        "fct-type": "function",
        "title": "checkRule"
      },
      "index": {
        "description": "special minor rule that checks predicate and returns the identity if the predicate holds",
        "hierarchy": "Ideas Common Rule Abstract",
        "module": "Ideas.Common.Rule.Abstract",
        "name": "checkRule",
        "normalized": "a-\u003e(b-\u003eBool)-\u003eRule b",
        "package": "ideas",
        "partial": "Rule",
        "signature": "n-\u003e(a-\u003eBool)-\u003eRule a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-Abstract.html#v:doAfter",
      "description": {
        "fct-descr": "\u003cp\u003ePerform the function after the rule has been fired\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Rule.Abstract",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e a) -\u003e Rule a -\u003e Rule a",
        "fct-source": "src/Ideas-Common-Rule-Abstract.html#doAfter",
        "fct-type": "function",
        "title": "doAfter"
      },
      "index": {
        "description": "Perform the function after the rule has been fired",
        "hierarchy": "Ideas Common Rule Abstract",
        "module": "Ideas.Common.Rule.Abstract",
        "name": "doAfter",
        "normalized": "(a-\u003ea)-\u003eRule a-\u003eRule a",
        "package": "ideas",
        "partial": "After",
        "signature": "(a-\u003ea)-\u003eRule a-\u003eRule a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-Abstract.html#v:emptyRule",
      "description": {
        "fct-descr": "\u003cp\u003eA special (minor) rule that is never applicable (i.e., this rule always fails)\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Rule.Abstract",
        "fct-package": "ideas",
        "fct-signature": "n -\u003e Rule a",
        "fct-source": "src/Ideas-Common-Rule-Abstract.html#emptyRule",
        "fct-type": "function",
        "title": "emptyRule"
      },
      "index": {
        "description": "special minor rule that is never applicable i.e this rule always fails",
        "hierarchy": "Ideas Common Rule Abstract",
        "module": "Ideas.Common.Rule.Abstract",
        "name": "emptyRule",
        "normalized": "a-\u003eRule b",
        "package": "ideas",
        "partial": "Rule",
        "signature": "n-\u003eRule a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-Abstract.html#v:idRule",
      "description": {
        "fct-descr": "\u003cp\u003eA special (minor) rule that always returns the identity\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Rule.Abstract",
        "fct-package": "ideas",
        "fct-signature": "n -\u003e Rule a",
        "fct-source": "src/Ideas-Common-Rule-Abstract.html#idRule",
        "fct-type": "function",
        "title": "idRule"
      },
      "index": {
        "description": "special minor rule that always returns the identity",
        "hierarchy": "Ideas Common Rule Abstract",
        "module": "Ideas.Common.Rule.Abstract",
        "name": "idRule",
        "normalized": "a-\u003eRule b",
        "package": "ideas",
        "partial": "Rule",
        "signature": "n-\u003eRule a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-Abstract.html#v:isRecognizer",
      "description": {
        "fct-module": "Ideas.Common.Rule.Abstract",
        "fct-package": "ideas",
        "fct-signature": "Rule a -\u003e Bool",
        "fct-source": "src/Ideas-Common-Rule-Abstract.html#isRecognizer",
        "fct-type": "function",
        "title": "isRecognizer"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rule Abstract",
        "module": "Ideas.Common.Rule.Abstract",
        "name": "isRecognizer",
        "normalized": "Rule a-\u003eBool",
        "package": "ideas",
        "partial": "Recognizer",
        "signature": "Rule a-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-Abstract.html#v:isRewriteRule",
      "description": {
        "fct-module": "Ideas.Common.Rule.Abstract",
        "fct-package": "ideas",
        "fct-signature": "Rule a -\u003e Bool",
        "fct-source": "src/Ideas-Common-Rule-Abstract.html#isRewriteRule",
        "fct-type": "function",
        "title": "isRewriteRule"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rule Abstract",
        "module": "Ideas.Common.Rule.Abstract",
        "name": "isRewriteRule",
        "normalized": "Rule a-\u003eBool",
        "package": "ideas",
        "partial": "Rewrite Rule",
        "signature": "Rule a-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-Abstract.html#v:makeRule",
      "description": {
        "fct-module": "Ideas.Common.Rule.Abstract",
        "fct-package": "ideas",
        "fct-signature": "n -\u003e (a -\u003e f a) -\u003e Rule a",
        "fct-source": "src/Ideas-Common-Rule-Abstract.html#makeRule",
        "fct-type": "function",
        "title": "makeRule"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rule Abstract",
        "module": "Ideas.Common.Rule.Abstract",
        "name": "makeRule",
        "normalized": "a-\u003e(b-\u003ec b)-\u003eRule b",
        "package": "ideas",
        "partial": "Rule",
        "signature": "n-\u003e(a-\u003ef a)-\u003eRule a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-Abstract.html#v:minorRule",
      "description": {
        "fct-module": "Ideas.Common.Rule.Abstract",
        "fct-package": "ideas",
        "fct-signature": "n -\u003e (a -\u003e f a) -\u003e Rule a",
        "fct-source": "src/Ideas-Common-Rule-Abstract.html#minorRule",
        "fct-type": "function",
        "title": "minorRule"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rule Abstract",
        "module": "Ideas.Common.Rule.Abstract",
        "name": "minorRule",
        "normalized": "a-\u003e(b-\u003ec b)-\u003eRule b",
        "package": "ideas",
        "partial": "Rule",
        "signature": "n-\u003e(a-\u003ef a)-\u003eRule a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-Abstract.html#v:recognizer",
      "description": {
        "fct-module": "Ideas.Common.Rule.Abstract",
        "fct-package": "ideas",
        "fct-signature": "f a -\u003e Recognizer a",
        "fct-source": "src/Ideas-Common-Rule-Recognizer.html#recognizer",
        "fct-type": "function",
        "title": "recognizer"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rule Abstract",
        "module": "Ideas.Common.Rule.Abstract",
        "name": "recognizer",
        "normalized": "a b-\u003eRecognizer b",
        "package": "ideas",
        "partial": "",
        "signature": "f a-\u003eRecognizer a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-Abstract.html#v:rewriteRule",
      "description": {
        "fct-module": "Ideas.Common.Rule.Abstract",
        "fct-package": "ideas",
        "fct-signature": "n -\u003e f -\u003e Rule a",
        "fct-source": "src/Ideas-Common-Rule-Abstract.html#rewriteRule",
        "fct-type": "function",
        "title": "rewriteRule"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rule Abstract",
        "module": "Ideas.Common.Rule.Abstract",
        "name": "rewriteRule",
        "normalized": "a-\u003eb-\u003eRule c",
        "package": "ideas",
        "partial": "Rule",
        "signature": "n-\u003ef-\u003eRule a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-Abstract.html#v:rewriteRules",
      "description": {
        "fct-module": "Ideas.Common.Rule.Abstract",
        "fct-package": "ideas",
        "fct-signature": "n -\u003e [f] -\u003e Rule a",
        "fct-source": "src/Ideas-Common-Rule-Abstract.html#rewriteRules",
        "fct-type": "function",
        "title": "rewriteRules"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rule Abstract",
        "module": "Ideas.Common.Rule.Abstract",
        "name": "rewriteRules",
        "normalized": "a-\u003e[b]-\u003eRule c",
        "package": "ideas",
        "partial": "Rules",
        "signature": "n-\u003e[f]-\u003eRule a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-Abstract.html#v:ruleList",
      "description": {
        "fct-module": "Ideas.Common.Rule.Abstract",
        "fct-package": "ideas",
        "fct-signature": "n -\u003e (a -\u003e [a]) -\u003e Rule a",
        "fct-source": "src/Ideas-Common-Rule-Abstract.html#ruleList",
        "fct-type": "function",
        "title": "ruleList"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rule Abstract",
        "module": "Ideas.Common.Rule.Abstract",
        "name": "ruleList",
        "normalized": "a-\u003e(b-\u003e[b])-\u003eRule b",
        "package": "ideas",
        "partial": "List",
        "signature": "n-\u003e(a-\u003e[a])-\u003eRule a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-Abstract.html#v:ruleMaybe",
      "description": {
        "fct-module": "Ideas.Common.Rule.Abstract",
        "fct-package": "ideas",
        "fct-signature": "n -\u003e (a -\u003e Maybe a) -\u003e Rule a",
        "fct-source": "src/Ideas-Common-Rule-Abstract.html#ruleMaybe",
        "fct-type": "function",
        "title": "ruleMaybe"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rule Abstract",
        "module": "Ideas.Common.Rule.Abstract",
        "name": "ruleMaybe",
        "normalized": "a-\u003e(b-\u003eMaybe b)-\u003eRule b",
        "package": "ideas",
        "partial": "Maybe",
        "signature": "n-\u003e(a-\u003eMaybe a)-\u003eRule a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-Abstract.html#v:ruleRewrite",
      "description": {
        "fct-module": "Ideas.Common.Rule.Abstract",
        "fct-package": "ideas",
        "fct-signature": "RewriteRule a -\u003e Rule a",
        "fct-source": "src/Ideas-Common-Rule-Abstract.html#ruleRewrite",
        "fct-type": "function",
        "title": "ruleRewrite"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rule Abstract",
        "module": "Ideas.Common.Rule.Abstract",
        "name": "ruleRewrite",
        "normalized": "RewriteRule a-\u003eRule a",
        "package": "ideas",
        "partial": "Rewrite",
        "signature": "RewriteRule a-\u003eRule a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-Abstract.html#v:ruleSiblings",
      "description": {
        "fct-module": "Ideas.Common.Rule.Abstract",
        "fct-package": "ideas",
        "fct-signature": "Rule a -\u003e [Id]",
        "fct-source": "src/Ideas-Common-Rule-Abstract.html#ruleSiblings",
        "fct-type": "function",
        "title": "ruleSiblings"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rule Abstract",
        "module": "Ideas.Common.Rule.Abstract",
        "name": "ruleSiblings",
        "normalized": "Rule a-\u003e[Id]",
        "package": "ideas",
        "partial": "Siblings",
        "signature": "Rule a-\u003e[Id]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-Abstract.html#v:ruleTrans",
      "description": {
        "fct-module": "Ideas.Common.Rule.Abstract",
        "fct-package": "ideas",
        "fct-signature": "n -\u003e Transformation a -\u003e Rule a",
        "fct-source": "src/Ideas-Common-Rule-Abstract.html#ruleTrans",
        "fct-type": "function",
        "title": "ruleTrans"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rule Abstract",
        "module": "Ideas.Common.Rule.Abstract",
        "name": "ruleTrans",
        "normalized": "a-\u003eTransformation b-\u003eRule b",
        "package": "ideas",
        "partial": "Trans",
        "signature": "n-\u003eTransformation a-\u003eRule a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-Abstract.html#v:siblingOf",
      "description": {
        "fct-module": "Ideas.Common.Rule.Abstract",
        "fct-package": "ideas",
        "fct-signature": "b -\u003e Rule a -\u003e Rule a",
        "fct-source": "src/Ideas-Common-Rule-Abstract.html#siblingOf",
        "fct-type": "function",
        "title": "siblingOf"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rule Abstract",
        "module": "Ideas.Common.Rule.Abstract",
        "name": "siblingOf",
        "normalized": "a-\u003eRule b-\u003eRule b",
        "package": "ideas",
        "partial": "Of",
        "signature": "b-\u003eRule a-\u003eRule a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-Abstract.html#v:transformation",
      "description": {
        "fct-module": "Ideas.Common.Rule.Abstract",
        "fct-package": "ideas",
        "fct-signature": "Rule a -\u003e Transformation a",
        "fct-source": "src/Ideas-Common-Rule-Abstract.html#transformation",
        "fct-type": "function",
        "title": "transformation"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rule Abstract",
        "module": "Ideas.Common.Rule.Abstract",
        "name": "transformation",
        "normalized": "Rule a-\u003eTransformation a",
        "package": "ideas",
        "partial": "",
        "signature": "Rule a-\u003eTransformation a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-EnvironmentMonad.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eState monad for environments\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "Ideas.Common.Rule.EnvironmentMonad",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Common-Rule-EnvironmentMonad.html",
        "fct-type": "module",
        "title": "EnvironmentMonad"
      },
      "index": {
        "description": "State monad for environments",
        "hierarchy": "Ideas Common Rule EnvironmentMonad",
        "module": "Ideas.Common.Rule.EnvironmentMonad",
        "name": "EnvironmentMonad",
        "normalized": "",
        "package": "ideas",
        "partial": "Environment Monad",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-EnvironmentMonad.html#t:EnvMonad",
      "description": {
        "fct-module": "Ideas.Common.Rule.EnvironmentMonad",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Common-Rule-EnvironmentMonad.html#EnvMonad",
        "fct-type": "data",
        "title": "EnvMonad"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rule EnvironmentMonad",
        "module": "Ideas.Common.Rule.EnvironmentMonad",
        "name": "EnvMonad",
        "normalized": "",
        "package": "ideas",
        "partial": "Env Monad",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-EnvironmentMonad.html#v::-126-",
      "description": {
        "fct-module": "Ideas.Common.Rule.EnvironmentMonad",
        "fct-package": "ideas",
        "fct-signature": "Ref a -\u003e (a -\u003e a) -\u003e EnvMonad ()",
        "fct-source": "src/Ideas-Common-Rule-EnvironmentMonad.html#EnvMonad",
        "fct-type": "function",
        "title": ":~"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rule EnvironmentMonad",
        "module": "Ideas.Common.Rule.EnvironmentMonad",
        "name": ":~",
        "normalized": "Ref a-\u003e(a-\u003ea)-\u003eEnvMonad()",
        "package": "ideas",
        "partial": "",
        "signature": "Ref a-\u003e(a-\u003ea)-\u003eEnvMonad()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-EnvironmentMonad.html#v::-61-",
      "description": {
        "fct-module": "Ideas.Common.Rule.EnvironmentMonad",
        "fct-package": "ideas",
        "fct-signature": "Ref a -\u003e a -\u003e EnvMonad ()",
        "fct-source": "src/Ideas-Common-Rule-EnvironmentMonad.html#EnvMonad",
        "fct-type": "function",
        "title": ":="
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rule EnvironmentMonad",
        "module": "Ideas.Common.Rule.EnvironmentMonad",
        "name": ":=",
        "normalized": "Ref a-\u003ea-\u003eEnvMonad()",
        "package": "ideas",
        "partial": "",
        "signature": "Ref a-\u003ea-\u003eEnvMonad()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-EnvironmentMonad.html#v::-63-",
      "description": {
        "fct-module": "Ideas.Common.Rule.EnvironmentMonad",
        "fct-package": "ideas",
        "fct-signature": "Ref a -\u003e a -\u003e EnvMonad a",
        "fct-source": "src/Ideas-Common-Rule-EnvironmentMonad.html#EnvMonad",
        "fct-type": "function",
        "title": ":?"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rule EnvironmentMonad",
        "module": "Ideas.Common.Rule.EnvironmentMonad",
        "name": ":?",
        "normalized": "Ref a-\u003ea-\u003eEnvMonad a",
        "package": "ideas",
        "partial": "",
        "signature": "Ref a-\u003ea-\u003eEnvMonad a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-EnvironmentMonad.html#v:envMonadFunctionRefs",
      "description": {
        "fct-module": "Ideas.Common.Rule.EnvironmentMonad",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e EnvMonad b) -\u003e [Some Ref]",
        "fct-source": "src/Ideas-Common-Rule-EnvironmentMonad.html#envMonadFunctionRefs",
        "fct-type": "function",
        "title": "envMonadFunctionRefs"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rule EnvironmentMonad",
        "module": "Ideas.Common.Rule.EnvironmentMonad",
        "name": "envMonadFunctionRefs",
        "normalized": "(a-\u003eEnvMonad b)-\u003e[Some Ref]",
        "package": "ideas",
        "partial": "Monad Function Refs",
        "signature": "(a-\u003eEnvMonad b)-\u003e[Some Ref]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-EnvironmentMonad.html#v:envMonadRefs",
      "description": {
        "fct-module": "Ideas.Common.Rule.EnvironmentMonad",
        "fct-package": "ideas",
        "fct-signature": "EnvMonad a -\u003e [Some Ref]",
        "fct-source": "src/Ideas-Common-Rule-EnvironmentMonad.html#envMonadRefs",
        "fct-type": "function",
        "title": "envMonadRefs"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rule EnvironmentMonad",
        "module": "Ideas.Common.Rule.EnvironmentMonad",
        "name": "envMonadRefs",
        "normalized": "EnvMonad a-\u003e[Some Ref]",
        "package": "ideas",
        "partial": "Monad Refs",
        "signature": "EnvMonad a-\u003e[Some Ref]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-EnvironmentMonad.html#v:evalEnvMonad",
      "description": {
        "fct-module": "Ideas.Common.Rule.EnvironmentMonad",
        "fct-package": "ideas",
        "fct-signature": "EnvMonad a -\u003e Environment -\u003e [a]",
        "fct-source": "src/Ideas-Common-Rule-EnvironmentMonad.html#evalEnvMonad",
        "fct-type": "function",
        "title": "evalEnvMonad"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rule EnvironmentMonad",
        "module": "Ideas.Common.Rule.EnvironmentMonad",
        "name": "evalEnvMonad",
        "normalized": "EnvMonad a-\u003eEnvironment-\u003e[a]",
        "package": "ideas",
        "partial": "Env Monad",
        "signature": "EnvMonad a-\u003eEnvironment-\u003e[a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-EnvironmentMonad.html#v:execEnvMonad",
      "description": {
        "fct-module": "Ideas.Common.Rule.EnvironmentMonad",
        "fct-package": "ideas",
        "fct-signature": "EnvMonad a -\u003e Environment -\u003e [Environment]",
        "fct-source": "src/Ideas-Common-Rule-EnvironmentMonad.html#execEnvMonad",
        "fct-type": "function",
        "title": "execEnvMonad"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rule EnvironmentMonad",
        "module": "Ideas.Common.Rule.EnvironmentMonad",
        "name": "execEnvMonad",
        "normalized": "EnvMonad a-\u003eEnvironment-\u003e[Environment]",
        "package": "ideas",
        "partial": "Env Monad",
        "signature": "EnvMonad a-\u003eEnvironment-\u003e[Environment]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-EnvironmentMonad.html#v:getRef",
      "description": {
        "fct-module": "Ideas.Common.Rule.EnvironmentMonad",
        "fct-package": "ideas",
        "fct-signature": "Ref a -\u003e EnvMonad a",
        "fct-source": "src/Ideas-Common-Rule-EnvironmentMonad.html#getRef",
        "fct-type": "function",
        "title": "getRef"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rule EnvironmentMonad",
        "module": "Ideas.Common.Rule.EnvironmentMonad",
        "name": "getRef",
        "normalized": "Ref a-\u003eEnvMonad a",
        "package": "ideas",
        "partial": "Ref",
        "signature": "Ref a-\u003eEnvMonad a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-EnvironmentMonad.html#v:runEnvMonad",
      "description": {
        "fct-module": "Ideas.Common.Rule.EnvironmentMonad",
        "fct-package": "ideas",
        "fct-signature": "EnvMonad a -\u003e Environment -\u003e [(a, Environment)]",
        "fct-source": "src/Ideas-Common-Rule-EnvironmentMonad.html#runEnvMonad",
        "fct-type": "function",
        "title": "runEnvMonad"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rule EnvironmentMonad",
        "module": "Ideas.Common.Rule.EnvironmentMonad",
        "name": "runEnvMonad",
        "normalized": "EnvMonad a-\u003eEnvironment-\u003e[(a,Environment)]",
        "package": "ideas",
        "partial": "Env Monad",
        "signature": "EnvMonad a-\u003eEnvironment-\u003e[(a,Environment)]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-EnvironmentMonad.html#v:updateRefs",
      "description": {
        "fct-module": "Ideas.Common.Rule.EnvironmentMonad",
        "fct-package": "ideas",
        "fct-signature": "[EnvMonad a] -\u003e Environment -\u003e m Environment",
        "fct-source": "src/Ideas-Common-Rule-EnvironmentMonad.html#updateRefs",
        "fct-type": "function",
        "title": "updateRefs"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rule EnvironmentMonad",
        "module": "Ideas.Common.Rule.EnvironmentMonad",
        "name": "updateRefs",
        "normalized": "[EnvMonad a]-\u003eEnvironment-\u003eb Environment",
        "package": "ideas",
        "partial": "Refs",
        "signature": "[EnvMonad a]-\u003eEnvironment-\u003em Environment"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-Parameter.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eThis module defines transformations. Given a term, a transformation returns\n a list of results (often a singleton list or the empty list). A\n transformation can be parameterized with one or more Bindables.\n Transformations rules can be lifted to work on more complex domains with\n the LiftView type class.\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "Ideas.Common.Rule.Parameter",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Common-Rule-Parameter.html",
        "fct-type": "module",
        "title": "Parameter"
      },
      "index": {
        "description": "This module defines transformations Given term transformation returns list of results often singleton list or the empty list transformation can be parameterized with one or more Bindables Transformations rules can be lifted to work on more complex domains with the LiftView type class",
        "hierarchy": "Ideas Common Rule Parameter",
        "module": "Ideas.Common.Rule.Parameter",
        "name": "Parameter",
        "normalized": "",
        "package": "ideas",
        "partial": "Parameter",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-Parameter.html#t:ParamTrans",
      "description": {
        "fct-module": "Ideas.Common.Rule.Parameter",
        "fct-package": "ideas",
        "fct-signature": "type",
        "fct-source": "src/Ideas-Common-Rule-Parameter.html#ParamTrans",
        "fct-type": "type",
        "title": "ParamTrans"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rule Parameter",
        "module": "Ideas.Common.Rule.Parameter",
        "name": "ParamTrans",
        "normalized": "",
        "package": "ideas",
        "partial": "Param Trans",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-Parameter.html#v:parameter1",
      "description": {
        "fct-module": "Ideas.Common.Rule.Parameter",
        "fct-package": "ideas",
        "fct-signature": "n1 -\u003e (a -\u003e Transformation b) -\u003e ParamTrans a b",
        "fct-source": "src/Ideas-Common-Rule-Parameter.html#parameter1",
        "fct-type": "function",
        "title": "parameter1"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rule Parameter",
        "module": "Ideas.Common.Rule.Parameter",
        "name": "parameter1",
        "normalized": "a-\u003e(b-\u003eTransformation c)-\u003eParamTrans b c",
        "package": "ideas",
        "partial": "",
        "signature": "n-\u003e(a-\u003eTransformation b)-\u003eParamTrans a b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-Parameter.html#v:parameter2",
      "description": {
        "fct-module": "Ideas.Common.Rule.Parameter",
        "fct-package": "ideas",
        "fct-signature": "n1 -\u003e n2 -\u003e (a -\u003e b -\u003e Transformation c) -\u003e ParamTrans (a, b) c",
        "fct-source": "src/Ideas-Common-Rule-Parameter.html#parameter2",
        "fct-type": "function",
        "title": "parameter2"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rule Parameter",
        "module": "Ideas.Common.Rule.Parameter",
        "name": "parameter2",
        "normalized": "a-\u003ea-\u003e(b-\u003ec-\u003eTransformation d)-\u003eParamTrans(b,c)d",
        "package": "ideas",
        "partial": "",
        "signature": "n-\u003en-\u003e(a-\u003eb-\u003eTransformation c)-\u003eParamTrans(a,b)c"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-Parameter.html#v:parameter3",
      "description": {
        "fct-module": "Ideas.Common.Rule.Parameter",
        "fct-package": "ideas",
        "fct-signature": "n1 -\u003e n2 -\u003e n3 -\u003e (a -\u003e b -\u003e c -\u003e Transformation d) -\u003e ParamTrans (a, b, c) d",
        "fct-source": "src/Ideas-Common-Rule-Parameter.html#parameter3",
        "fct-type": "function",
        "title": "parameter3"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rule Parameter",
        "module": "Ideas.Common.Rule.Parameter",
        "name": "parameter3",
        "normalized": "a-\u003ea-\u003ea-\u003e(b-\u003ec-\u003ed-\u003eTransformation e)-\u003eParamTrans(b,c,d)e",
        "package": "ideas",
        "partial": "",
        "signature": "n-\u003en-\u003en-\u003e(a-\u003eb-\u003ec-\u003eTransformation d)-\u003eParamTrans(a,b,c)d"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-Parameter.html#v:supplyContextParameters",
      "description": {
        "fct-module": "Ideas.Common.Rule.Parameter",
        "fct-package": "ideas",
        "fct-signature": "ParamTrans b a -\u003e (a -\u003e EnvMonad b) -\u003e Transformation (Context a)",
        "fct-source": "src/Ideas-Common-Rule-Parameter.html#supplyContextParameters",
        "fct-type": "function",
        "title": "supplyContextParameters"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rule Parameter",
        "module": "Ideas.Common.Rule.Parameter",
        "name": "supplyContextParameters",
        "normalized": "ParamTrans a b-\u003e(b-\u003eEnvMonad a)-\u003eTransformation(Context b)",
        "package": "ideas",
        "partial": "Context Parameters",
        "signature": "ParamTrans b a-\u003e(a-\u003eEnvMonad b)-\u003eTransformation(Context a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-Parameter.html#v:supplyParameters",
      "description": {
        "fct-module": "Ideas.Common.Rule.Parameter",
        "fct-package": "ideas",
        "fct-signature": "ParamTrans b a -\u003e (a -\u003e Maybe b) -\u003e Transformation a",
        "fct-source": "src/Ideas-Common-Rule-Parameter.html#supplyParameters",
        "fct-type": "function",
        "title": "supplyParameters"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rule Parameter",
        "module": "Ideas.Common.Rule.Parameter",
        "name": "supplyParameters",
        "normalized": "ParamTrans a b-\u003e(b-\u003eMaybe a)-\u003eTransformation b",
        "package": "ideas",
        "partial": "Parameters",
        "signature": "ParamTrans b a-\u003e(a-\u003eMaybe b)-\u003eTransformation a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-Recognizer.html#",
      "description": {
        "fct-module": "Ideas.Common.Rule.Recognizer",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Common-Rule-Recognizer.html",
        "fct-type": "module",
        "title": "Recognizer"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rule Recognizer",
        "module": "Ideas.Common.Rule.Recognizer",
        "name": "Recognizer",
        "normalized": "",
        "package": "ideas",
        "partial": "Recognizer",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-Recognizer.html#t:Recognizable",
      "description": {
        "fct-module": "Ideas.Common.Rule.Recognizer",
        "fct-package": "ideas",
        "fct-signature": "class",
        "fct-source": "src/Ideas-Common-Rule-Recognizer.html#Recognizable",
        "fct-type": "class",
        "title": "Recognizable"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rule Recognizer",
        "module": "Ideas.Common.Rule.Recognizer",
        "name": "Recognizable",
        "normalized": "",
        "package": "ideas",
        "partial": "Recognizable",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-Recognizer.html#t:Recognizer",
      "description": {
        "fct-module": "Ideas.Common.Rule.Recognizer",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Common-Rule-Recognizer.html#Recognizer",
        "fct-type": "data",
        "title": "Recognizer"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rule Recognizer",
        "module": "Ideas.Common.Rule.Recognizer",
        "name": "Recognizer",
        "normalized": "",
        "package": "ideas",
        "partial": "Recognizer",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-Recognizer.html#v:makeRecognizer",
      "description": {
        "fct-module": "Ideas.Common.Rule.Recognizer",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e a -\u003e Bool) -\u003e Recognizer a",
        "fct-source": "src/Ideas-Common-Rule-Recognizer.html#makeRecognizer",
        "fct-type": "function",
        "title": "makeRecognizer"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rule Recognizer",
        "module": "Ideas.Common.Rule.Recognizer",
        "name": "makeRecognizer",
        "normalized": "(a-\u003ea-\u003eBool)-\u003eRecognizer a",
        "package": "ideas",
        "partial": "Recognizer",
        "signature": "(a-\u003ea-\u003eBool)-\u003eRecognizer a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-Recognizer.html#v:makeRecognizerEnvMonad",
      "description": {
        "fct-module": "Ideas.Common.Rule.Recognizer",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e a -\u003e EnvMonad ()) -\u003e Recognizer a",
        "fct-source": "src/Ideas-Common-Rule-Recognizer.html#makeRecognizerEnvMonad",
        "fct-type": "function",
        "title": "makeRecognizerEnvMonad"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rule Recognizer",
        "module": "Ideas.Common.Rule.Recognizer",
        "name": "makeRecognizerEnvMonad",
        "normalized": "(a-\u003ea-\u003eEnvMonad())-\u003eRecognizer a",
        "package": "ideas",
        "partial": "Recognizer Env Monad",
        "signature": "(a-\u003ea-\u003eEnvMonad())-\u003eRecognizer a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-Recognizer.html#v:makeRecognizerTrans",
      "description": {
        "fct-module": "Ideas.Common.Rule.Recognizer",
        "fct-package": "ideas",
        "fct-signature": "Trans (a, a) () -\u003e Recognizer a",
        "fct-source": "src/Ideas-Common-Rule-Recognizer.html#makeRecognizerTrans",
        "fct-type": "function",
        "title": "makeRecognizerTrans"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rule Recognizer",
        "module": "Ideas.Common.Rule.Recognizer",
        "name": "makeRecognizerTrans",
        "normalized": "Trans(a,a)()-\u003eRecognizer a",
        "package": "ideas",
        "partial": "Recognizer Trans",
        "signature": "Trans(a,a)()-\u003eRecognizer a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-Recognizer.html#v:recognize",
      "description": {
        "fct-module": "Ideas.Common.Rule.Recognizer",
        "fct-package": "ideas",
        "fct-signature": "f a -\u003e a -\u003e a -\u003e Maybe Environment",
        "fct-source": "src/Ideas-Common-Rule-Recognizer.html#recognize",
        "fct-type": "method",
        "title": "recognize"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rule Recognizer",
        "module": "Ideas.Common.Rule.Recognizer",
        "name": "recognize",
        "normalized": "a b-\u003eb-\u003eb-\u003eMaybe Environment",
        "package": "ideas",
        "partial": "",
        "signature": "f a-\u003ea-\u003ea-\u003eMaybe Environment"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-Recognizer.html#v:recognizeAll",
      "description": {
        "fct-module": "Ideas.Common.Rule.Recognizer",
        "fct-package": "ideas",
        "fct-signature": "f a -\u003e a -\u003e a -\u003e [Environment]",
        "fct-source": "src/Ideas-Common-Rule-Recognizer.html#recognizeAll",
        "fct-type": "method",
        "title": "recognizeAll"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rule Recognizer",
        "module": "Ideas.Common.Rule.Recognizer",
        "name": "recognizeAll",
        "normalized": "a b-\u003eb-\u003eb-\u003e[Environment]",
        "package": "ideas",
        "partial": "All",
        "signature": "f a-\u003ea-\u003ea-\u003e[Environment]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-Recognizer.html#v:recognizeTrans",
      "description": {
        "fct-module": "Ideas.Common.Rule.Recognizer",
        "fct-package": "ideas",
        "fct-signature": "f a -\u003e Trans (a, a) ()",
        "fct-source": "src/Ideas-Common-Rule-Recognizer.html#recognizeTrans",
        "fct-type": "method",
        "title": "recognizeTrans"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rule Recognizer",
        "module": "Ideas.Common.Rule.Recognizer",
        "name": "recognizeTrans",
        "normalized": "a b-\u003eTrans(b,b)()",
        "package": "ideas",
        "partial": "Trans",
        "signature": "f a-\u003eTrans(a,a)()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-Recognizer.html#v:recognizer",
      "description": {
        "fct-module": "Ideas.Common.Rule.Recognizer",
        "fct-package": "ideas",
        "fct-signature": "f a -\u003e Recognizer a",
        "fct-source": "src/Ideas-Common-Rule-Recognizer.html#recognizer",
        "fct-type": "method",
        "title": "recognizer"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rule Recognizer",
        "module": "Ideas.Common.Rule.Recognizer",
        "name": "recognizer",
        "normalized": "a b-\u003eRecognizer b",
        "package": "ideas",
        "partial": "",
        "signature": "f a-\u003eRecognizer a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-Transformation.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eThis module defines transformations. Given a term, a transformation returns\n a list of results (often a singleton list or the empty list).\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "Ideas.Common.Rule.Transformation",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Common-Rule-Transformation.html",
        "fct-type": "module",
        "title": "Transformation"
      },
      "index": {
        "description": "This module defines transformations Given term transformation returns list of results often singleton list or the empty list",
        "hierarchy": "Ideas Common Rule Transformation",
        "module": "Ideas.Common.Rule.Transformation",
        "name": "Transformation",
        "normalized": "",
        "package": "ideas",
        "partial": "Transformation",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-Transformation.html#t:MakeTrans",
      "description": {
        "fct-descr": "\u003cp\u003eA type class for constructing a transformation. If possible, \u003ccode\u003emakeTrans\u003c/code\u003e\n should be used. Use specialized constructor functions for disambiguation.\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Rule.Transformation",
        "fct-package": "ideas",
        "fct-signature": "class",
        "fct-source": "src/Ideas-Common-Rule-Transformation.html#MakeTrans",
        "fct-type": "class",
        "title": "MakeTrans"
      },
      "index": {
        "description": "type class for constructing transformation If possible makeTrans should be used Use specialized constructor functions for disambiguation",
        "hierarchy": "Ideas Common Rule Transformation",
        "module": "Ideas.Common.Rule.Transformation",
        "name": "MakeTrans",
        "normalized": "",
        "package": "ideas",
        "partial": "Make Trans",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-Transformation.html#t:Trans",
      "description": {
        "fct-module": "Ideas.Common.Rule.Transformation",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Common-Rule-Transformation.html#Trans",
        "fct-type": "data",
        "title": "Trans"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rule Transformation",
        "module": "Ideas.Common.Rule.Transformation",
        "name": "Trans",
        "normalized": "",
        "package": "ideas",
        "partial": "Trans",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-Transformation.html#t:Transformation",
      "description": {
        "fct-module": "Ideas.Common.Rule.Transformation",
        "fct-package": "ideas",
        "fct-signature": "type",
        "fct-source": "src/Ideas-Common-Rule-Transformation.html#Transformation",
        "fct-type": "type",
        "title": "Transformation"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rule Transformation",
        "module": "Ideas.Common.Rule.Transformation",
        "name": "Transformation",
        "normalized": "",
        "package": "ideas",
        "partial": "Transformation",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-Transformation.html#v:getRewriteRules",
      "description": {
        "fct-module": "Ideas.Common.Rule.Transformation",
        "fct-package": "ideas",
        "fct-signature": "Trans a b -\u003e [Some RewriteRule]",
        "fct-source": "src/Ideas-Common-Rule-Transformation.html#getRewriteRules",
        "fct-type": "function",
        "title": "getRewriteRules"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rule Transformation",
        "module": "Ideas.Common.Rule.Transformation",
        "name": "getRewriteRules",
        "normalized": "Trans a b-\u003e[Some RewriteRule]",
        "package": "ideas",
        "partial": "Rewrite Rules",
        "signature": "Trans a b-\u003e[Some RewriteRule]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-Transformation.html#v:isZeroTrans",
      "description": {
        "fct-module": "Ideas.Common.Rule.Transformation",
        "fct-package": "ideas",
        "fct-signature": "Trans a b -\u003e Bool",
        "fct-source": "src/Ideas-Common-Rule-Transformation.html#isZeroTrans",
        "fct-type": "function",
        "title": "isZeroTrans"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rule Transformation",
        "module": "Ideas.Common.Rule.Transformation",
        "name": "isZeroTrans",
        "normalized": "Trans a b-\u003eBool",
        "package": "ideas",
        "partial": "Zero Trans",
        "signature": "Trans a b-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-Transformation.html#v:makeTrans",
      "description": {
        "fct-module": "Ideas.Common.Rule.Transformation",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e f b) -\u003e Trans a b",
        "fct-source": "src/Ideas-Common-Rule-Transformation.html#makeTrans",
        "fct-type": "method",
        "title": "makeTrans"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rule Transformation",
        "module": "Ideas.Common.Rule.Transformation",
        "name": "makeTrans",
        "normalized": "(a-\u003eb c)-\u003eTrans a c",
        "package": "ideas",
        "partial": "Trans",
        "signature": "(a-\u003ef b)-\u003eTrans a b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-Transformation.html#v:makeTransLiftContext",
      "description": {
        "fct-descr": "\u003cp\u003eOverloaded variant of \u003ccode\u003etransLiftContext\u003c/code\u003e\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Rule.Transformation",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e f a) -\u003e Transformation (Context a)",
        "fct-source": "src/Ideas-Common-Rule-Transformation.html#makeTransLiftContext",
        "fct-type": "function",
        "title": "makeTransLiftContext"
      },
      "index": {
        "description": "Overloaded variant of transLiftContext",
        "hierarchy": "Ideas Common Rule Transformation",
        "module": "Ideas.Common.Rule.Transformation",
        "name": "makeTransLiftContext",
        "normalized": "(a-\u003eb a)-\u003eTransformation(Context a)",
        "package": "ideas",
        "partial": "Trans Lift Context",
        "signature": "(a-\u003ef a)-\u003eTransformation(Context a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-Transformation.html#v:makeTransLiftContext_",
      "description": {
        "fct-descr": "\u003cp\u003eOverloaded variant of \u003ccode\u003etransLiftContext\u003c/code\u003e; ignores result\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Rule.Transformation",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e f ()) -\u003e Transformation (Context a)",
        "fct-source": "src/Ideas-Common-Rule-Transformation.html#makeTransLiftContext_",
        "fct-type": "function",
        "title": "makeTransLiftContext_"
      },
      "index": {
        "description": "Overloaded variant of transLiftContext ignores result",
        "hierarchy": "Ideas Common Rule Transformation",
        "module": "Ideas.Common.Rule.Transformation",
        "name": "makeTransLiftContext_",
        "normalized": "(a-\u003eb())-\u003eTransformation(Context a)",
        "package": "ideas",
        "partial": "Trans Lift Context",
        "signature": "(a-\u003ef())-\u003eTransformation(Context a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-Transformation.html#v:transApply",
      "description": {
        "fct-module": "Ideas.Common.Rule.Transformation",
        "fct-package": "ideas",
        "fct-signature": "Trans a b -\u003e a -\u003e [(b, Environment)]",
        "fct-source": "src/Ideas-Common-Rule-Transformation.html#transApply",
        "fct-type": "function",
        "title": "transApply"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rule Transformation",
        "module": "Ideas.Common.Rule.Transformation",
        "name": "transApply",
        "normalized": "Trans a b-\u003ea-\u003e[(b,Environment)]",
        "package": "ideas",
        "partial": "Apply",
        "signature": "Trans a b-\u003ea-\u003e[(b,Environment)]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-Transformation.html#v:transApplyWith",
      "description": {
        "fct-module": "Ideas.Common.Rule.Transformation",
        "fct-package": "ideas",
        "fct-signature": "Environment -\u003e Trans a b -\u003e a -\u003e [(b, Environment)]",
        "fct-source": "src/Ideas-Common-Rule-Transformation.html#transApplyWith",
        "fct-type": "function",
        "title": "transApplyWith"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rule Transformation",
        "module": "Ideas.Common.Rule.Transformation",
        "name": "transApplyWith",
        "normalized": "Environment-\u003eTrans a b-\u003ea-\u003e[(b,Environment)]",
        "package": "ideas",
        "partial": "Apply With",
        "signature": "Environment-\u003eTrans a b-\u003ea-\u003e[(b,Environment)]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-Transformation.html#v:transEnvMonad",
      "description": {
        "fct-module": "Ideas.Common.Rule.Transformation",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e EnvMonad b) -\u003e Trans a b",
        "fct-source": "src/Ideas-Common-Rule-Transformation.html#transEnvMonad",
        "fct-type": "function",
        "title": "transEnvMonad"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rule Transformation",
        "module": "Ideas.Common.Rule.Transformation",
        "name": "transEnvMonad",
        "normalized": "(a-\u003eEnvMonad b)-\u003eTrans a b",
        "package": "ideas",
        "partial": "Env Monad",
        "signature": "(a-\u003eEnvMonad b)-\u003eTrans a b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-Transformation.html#v:transLiftContext",
      "description": {
        "fct-module": "Ideas.Common.Rule.Transformation",
        "fct-package": "ideas",
        "fct-signature": "Transformation a -\u003e Transformation (Context a)",
        "fct-source": "src/Ideas-Common-Rule-Transformation.html#transLiftContext",
        "fct-type": "function",
        "title": "transLiftContext"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rule Transformation",
        "module": "Ideas.Common.Rule.Transformation",
        "name": "transLiftContext",
        "normalized": "Transformation a-\u003eTransformation(Context a)",
        "package": "ideas",
        "partial": "Lift Context",
        "signature": "Transformation a-\u003eTransformation(Context a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-Transformation.html#v:transLiftContextIn",
      "description": {
        "fct-module": "Ideas.Common.Rule.Transformation",
        "fct-package": "ideas",
        "fct-signature": "Transformation (a, Environment) -\u003e Transformation (Context a)",
        "fct-source": "src/Ideas-Common-Rule-Transformation.html#transLiftContextIn",
        "fct-type": "function",
        "title": "transLiftContextIn"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rule Transformation",
        "module": "Ideas.Common.Rule.Transformation",
        "name": "transLiftContextIn",
        "normalized": "Transformation(a,Environment)-\u003eTransformation(Context a)",
        "package": "ideas",
        "partial": "Lift Context In",
        "signature": "Transformation(a,Environment)-\u003eTransformation(Context a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-Transformation.html#v:transLiftView",
      "description": {
        "fct-module": "Ideas.Common.Rule.Transformation",
        "fct-package": "ideas",
        "fct-signature": "View a b -\u003e Transformation b -\u003e Transformation a",
        "fct-source": "src/Ideas-Common-Rule-Transformation.html#transLiftView",
        "fct-type": "function",
        "title": "transLiftView"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rule Transformation",
        "module": "Ideas.Common.Rule.Transformation",
        "name": "transLiftView",
        "normalized": "View a b-\u003eTransformation b-\u003eTransformation a",
        "package": "ideas",
        "partial": "Lift View",
        "signature": "View a b-\u003eTransformation b-\u003eTransformation a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-Transformation.html#v:transLiftViewIn",
      "description": {
        "fct-module": "Ideas.Common.Rule.Transformation",
        "fct-package": "ideas",
        "fct-signature": "View a (b, c) -\u003e Transformation b -\u003e Transformation a",
        "fct-source": "src/Ideas-Common-Rule-Transformation.html#transLiftViewIn",
        "fct-type": "function",
        "title": "transLiftViewIn"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rule Transformation",
        "module": "Ideas.Common.Rule.Transformation",
        "name": "transLiftViewIn",
        "normalized": "View a(b,c)-\u003eTransformation b-\u003eTransformation a",
        "package": "ideas",
        "partial": "Lift View In",
        "signature": "View a(b,c)-\u003eTransformation b-\u003eTransformation a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-Transformation.html#v:transList",
      "description": {
        "fct-module": "Ideas.Common.Rule.Transformation",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e [b]) -\u003e Trans a b",
        "fct-source": "src/Ideas-Common-Rule-Transformation.html#transList",
        "fct-type": "function",
        "title": "transList"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rule Transformation",
        "module": "Ideas.Common.Rule.Transformation",
        "name": "transList",
        "normalized": "(a-\u003e[b])-\u003eTrans a b",
        "package": "ideas",
        "partial": "List",
        "signature": "(a-\u003e[b])-\u003eTrans a b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-Transformation.html#v:transMaybe",
      "description": {
        "fct-module": "Ideas.Common.Rule.Transformation",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e Maybe b) -\u003e Trans a b",
        "fct-source": "src/Ideas-Common-Rule-Transformation.html#transMaybe",
        "fct-type": "function",
        "title": "transMaybe"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rule Transformation",
        "module": "Ideas.Common.Rule.Transformation",
        "name": "transMaybe",
        "normalized": "(a-\u003eMaybe b)-\u003eTrans a b",
        "package": "ideas",
        "partial": "Maybe",
        "signature": "(a-\u003eMaybe b)-\u003eTrans a b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-Transformation.html#v:transPure",
      "description": {
        "fct-module": "Ideas.Common.Rule.Transformation",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e b) -\u003e Trans a b",
        "fct-source": "src/Ideas-Common-Rule-Transformation.html#transPure",
        "fct-type": "function",
        "title": "transPure"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rule Transformation",
        "module": "Ideas.Common.Rule.Transformation",
        "name": "transPure",
        "normalized": "(a-\u003eb)-\u003eTrans a b",
        "package": "ideas",
        "partial": "Pure",
        "signature": "(a-\u003eb)-\u003eTrans a b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-Transformation.html#v:transRef",
      "description": {
        "fct-module": "Ideas.Common.Rule.Transformation",
        "fct-package": "ideas",
        "fct-signature": "Ref a -\u003e Trans a a",
        "fct-source": "src/Ideas-Common-Rule-Transformation.html#transRef",
        "fct-type": "function",
        "title": "transRef"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rule Transformation",
        "module": "Ideas.Common.Rule.Transformation",
        "name": "transRef",
        "normalized": "Ref a-\u003eTrans a a",
        "package": "ideas",
        "partial": "Ref",
        "signature": "Ref a-\u003eTrans a a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-Transformation.html#v:transRewrite",
      "description": {
        "fct-module": "Ideas.Common.Rule.Transformation",
        "fct-package": "ideas",
        "fct-signature": "RewriteRule a -\u003e Trans a a",
        "fct-source": "src/Ideas-Common-Rule-Transformation.html#transRewrite",
        "fct-type": "function",
        "title": "transRewrite"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rule Transformation",
        "module": "Ideas.Common.Rule.Transformation",
        "name": "transRewrite",
        "normalized": "RewriteRule a-\u003eTrans a a",
        "package": "ideas",
        "partial": "Rewrite",
        "signature": "RewriteRule a-\u003eTrans a a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule-Transformation.html#v:transUseEnvironment",
      "description": {
        "fct-module": "Ideas.Common.Rule.Transformation",
        "fct-package": "ideas",
        "fct-signature": "Trans a b -\u003e Trans (a, Environment) (b, Environment)",
        "fct-source": "src/Ideas-Common-Rule-Transformation.html#transUseEnvironment",
        "fct-type": "function",
        "title": "transUseEnvironment"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rule Transformation",
        "module": "Ideas.Common.Rule.Transformation",
        "name": "transUseEnvironment",
        "normalized": "Trans a b-\u003eTrans(a,Environment)(b,Environment)",
        "package": "ideas",
        "partial": "Use Environment",
        "signature": "Trans a b-\u003eTrans(a,Environment)(b,Environment)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Rule.html#",
      "description": {
        "fct-module": "Ideas.Common.Rule",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Common-Rule.html",
        "fct-type": "module",
        "title": "Rule"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Rule",
        "module": "Ideas.Common.Rule",
        "name": "Rule",
        "normalized": "",
        "package": "ideas",
        "partial": "Rule",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Abstract.html#",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Abstract",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Common-Strategy-Abstract.html",
        "fct-type": "module",
        "title": "Abstract"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Abstract",
        "module": "Ideas.Common.Strategy.Abstract",
        "name": "Abstract",
        "normalized": "",
        "package": "ideas",
        "partial": "Abstract",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Abstract.html#t:IsLabeled",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Abstract",
        "fct-package": "ideas",
        "fct-signature": "class",
        "fct-source": "src/Ideas-Common-Strategy-Abstract.html#IsLabeled",
        "fct-type": "class",
        "title": "IsLabeled"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Abstract",
        "module": "Ideas.Common.Strategy.Abstract",
        "name": "IsLabeled",
        "normalized": "",
        "package": "ideas",
        "partial": "Is Labeled",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Abstract.html#t:IsStrategy",
      "description": {
        "fct-descr": "\u003cp\u003eType class to turn values into strategies\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy.Abstract",
        "fct-package": "ideas",
        "fct-signature": "class",
        "fct-source": "src/Ideas-Common-Strategy-Abstract.html#IsStrategy",
        "fct-type": "class",
        "title": "IsStrategy"
      },
      "index": {
        "description": "Type class to turn values into strategies",
        "hierarchy": "Ideas Common Strategy Abstract",
        "module": "Ideas.Common.Strategy.Abstract",
        "name": "IsStrategy",
        "normalized": "",
        "package": "ideas",
        "partial": "Is Strategy",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Abstract.html#t:LabelInfo",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Abstract",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Common-Strategy-Abstract.html#LabelInfo",
        "fct-type": "data",
        "title": "LabelInfo"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Abstract",
        "module": "Ideas.Common.Strategy.Abstract",
        "name": "LabelInfo",
        "normalized": "",
        "package": "ideas",
        "partial": "Label Info",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Abstract.html#t:LabeledStrategy",
      "description": {
        "fct-descr": "\u003cp\u003eA strategy which is labeled with a string\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy.Abstract",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Common-Strategy-Abstract.html#LabeledStrategy",
        "fct-type": "data",
        "title": "LabeledStrategy"
      },
      "index": {
        "description": "strategy which is labeled with string",
        "hierarchy": "Ideas Common Strategy Abstract",
        "module": "Ideas.Common.Strategy.Abstract",
        "name": "LabeledStrategy",
        "normalized": "",
        "package": "ideas",
        "partial": "Labeled Strategy",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Abstract.html#t:Strategy",
      "description": {
        "fct-descr": "\u003cp\u003eAbstract data type for strategies\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy.Abstract",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Common-Strategy-Abstract.html#Strategy",
        "fct-type": "data",
        "title": "Strategy"
      },
      "index": {
        "description": "Abstract data type for strategies",
        "hierarchy": "Ideas Common Strategy Abstract",
        "module": "Ideas.Common.Strategy.Abstract",
        "name": "Strategy",
        "normalized": "",
        "package": "ideas",
        "partial": "Strategy",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Abstract.html#v:changeInfo",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Abstract",
        "fct-package": "ideas",
        "fct-signature": "(LabelInfo -\u003e LabelInfo) -\u003e f a -\u003e LabeledStrategy a",
        "fct-source": "src/Ideas-Common-Strategy-Abstract.html#changeInfo",
        "fct-type": "function",
        "title": "changeInfo"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Abstract",
        "module": "Ideas.Common.Strategy.Abstract",
        "name": "changeInfo",
        "normalized": "(LabelInfo-\u003eLabelInfo)-\u003ea b-\u003eLabeledStrategy b",
        "package": "ideas",
        "partial": "Info",
        "signature": "(LabelInfo-\u003eLabelInfo)-\u003ef a-\u003eLabeledStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Abstract.html#v:cleanUpStrategy",
      "description": {
        "fct-descr": "\u003cp\u003eUse a function as do-after hook for all rules in a labeled strategy, but\n also use the function beforehand\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy.Abstract",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e a) -\u003e LabeledStrategy a -\u003e LabeledStrategy a",
        "fct-source": "src/Ideas-Common-Strategy-Abstract.html#cleanUpStrategy",
        "fct-type": "function",
        "title": "cleanUpStrategy"
      },
      "index": {
        "description": "Use function as do-after hook for all rules in labeled strategy but also use the function beforehand",
        "hierarchy": "Ideas Common Strategy Abstract",
        "module": "Ideas.Common.Strategy.Abstract",
        "name": "cleanUpStrategy",
        "normalized": "(a-\u003ea)-\u003eLabeledStrategy a-\u003eLabeledStrategy a",
        "package": "ideas",
        "partial": "Up Strategy",
        "signature": "(a-\u003ea)-\u003eLabeledStrategy a-\u003eLabeledStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Abstract.html#v:cleanUpStrategyAfter",
      "description": {
        "fct-descr": "\u003cp\u003eUse a function as do-after hook for all rules in a labeled strategy\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy.Abstract",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e a) -\u003e LabeledStrategy a -\u003e LabeledStrategy a",
        "fct-source": "src/Ideas-Common-Strategy-Abstract.html#cleanUpStrategyAfter",
        "fct-type": "function",
        "title": "cleanUpStrategyAfter"
      },
      "index": {
        "description": "Use function as do-after hook for all rules in labeled strategy",
        "hierarchy": "Ideas Common Strategy Abstract",
        "module": "Ideas.Common.Strategy.Abstract",
        "name": "cleanUpStrategyAfter",
        "normalized": "(a-\u003ea)-\u003eLabeledStrategy a-\u003eLabeledStrategy a",
        "package": "ideas",
        "partial": "Up Strategy After",
        "signature": "(a-\u003ea)-\u003eLabeledStrategy a-\u003eLabeledStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Abstract.html#v:collapsed",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Abstract",
        "fct-package": "ideas",
        "fct-signature": "LabelInfo -\u003e Bool",
        "fct-source": "src/Ideas-Common-Strategy-Abstract.html#collapsed",
        "fct-type": "function",
        "title": "collapsed"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Abstract",
        "module": "Ideas.Common.Strategy.Abstract",
        "name": "collapsed",
        "normalized": "LabelInfo-\u003eBool",
        "package": "ideas",
        "partial": "",
        "signature": "LabelInfo-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Abstract.html#v:derivationTree",
      "description": {
        "fct-descr": "\u003cp\u003eReturns the derivation tree for a strategy and a term with only major rules\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy.Abstract",
        "fct-package": "ideas",
        "fct-signature": "Bool -\u003e f a -\u003e a -\u003e DerivationTree (Rule a, Environment) a",
        "fct-source": "src/Ideas-Common-Strategy-Abstract.html#derivationTree",
        "fct-type": "function",
        "title": "derivationTree"
      },
      "index": {
        "description": "Returns the derivation tree for strategy and term with only major rules",
        "hierarchy": "Ideas Common Strategy Abstract",
        "module": "Ideas.Common.Strategy.Abstract",
        "name": "derivationTree",
        "normalized": "Bool-\u003ea b-\u003eb-\u003eDerivationTree(Rule b,Environment)b",
        "package": "ideas",
        "partial": "Tree",
        "signature": "Bool-\u003ef a-\u003ea-\u003eDerivationTree(Rule a,Environment)a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Abstract.html#v:fromCore",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Abstract",
        "fct-package": "ideas",
        "fct-signature": "Core LabelInfo a -\u003e Strategy a",
        "fct-source": "src/Ideas-Common-Strategy-Abstract.html#fromCore",
        "fct-type": "function",
        "title": "fromCore"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Abstract",
        "module": "Ideas.Common.Strategy.Abstract",
        "name": "fromCore",
        "normalized": "Core LabelInfo a-\u003eStrategy a",
        "package": "ideas",
        "partial": "Core",
        "signature": "Core LabelInfo a-\u003eStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Abstract.html#v:fullDerivationTree",
      "description": {
        "fct-descr": "\u003cp\u003eReturns the derivation tree for a strategy and a term, including all\n minor rules\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy.Abstract",
        "fct-package": "ideas",
        "fct-signature": "Bool -\u003e f a -\u003e a -\u003e DerivationTree (Step LabelInfo a) a",
        "fct-source": "src/Ideas-Common-Strategy-Abstract.html#fullDerivationTree",
        "fct-type": "function",
        "title": "fullDerivationTree"
      },
      "index": {
        "description": "Returns the derivation tree for strategy and term including all minor rules",
        "hierarchy": "Ideas Common Strategy Abstract",
        "module": "Ideas.Common.Strategy.Abstract",
        "name": "fullDerivationTree",
        "normalized": "Bool-\u003ea b-\u003eb-\u003eDerivationTree(Step LabelInfo b)b",
        "package": "ideas",
        "partial": "Derivation Tree",
        "signature": "Bool-\u003ef a-\u003ea-\u003eDerivationTree(Step LabelInfo a)a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Abstract.html#v:hidden",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Abstract",
        "fct-package": "ideas",
        "fct-signature": "LabelInfo -\u003e Bool",
        "fct-source": "src/Ideas-Common-Strategy-Abstract.html#hidden",
        "fct-type": "function",
        "title": "hidden"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Abstract",
        "module": "Ideas.Common.Strategy.Abstract",
        "name": "hidden",
        "normalized": "LabelInfo-\u003eBool",
        "package": "ideas",
        "partial": "",
        "signature": "LabelInfo-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Abstract.html#v:label",
      "description": {
        "fct-descr": "\u003cp\u003eLabels a strategy with a string\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy.Abstract",
        "fct-package": "ideas",
        "fct-signature": "l -\u003e f a -\u003e LabeledStrategy a",
        "fct-source": "src/Ideas-Common-Strategy-Abstract.html#label",
        "fct-type": "function",
        "title": "label"
      },
      "index": {
        "description": "Labels strategy with string",
        "hierarchy": "Ideas Common Strategy Abstract",
        "module": "Ideas.Common.Strategy.Abstract",
        "name": "label",
        "normalized": "a-\u003eb c-\u003eLabeledStrategy c",
        "package": "ideas",
        "partial": "",
        "signature": "l-\u003ef a-\u003eLabeledStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Abstract.html#v:liftCore",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Abstract",
        "fct-package": "ideas",
        "fct-signature": "(Core LabelInfo a -\u003e Core LabelInfo a) -\u003e f a -\u003e Strategy a",
        "fct-source": "src/Ideas-Common-Strategy-Abstract.html#liftCore",
        "fct-type": "function",
        "title": "liftCore"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Abstract",
        "module": "Ideas.Common.Strategy.Abstract",
        "name": "liftCore",
        "normalized": "(Core LabelInfo a-\u003eCore LabelInfo a)-\u003eb a-\u003eStrategy a",
        "package": "ideas",
        "partial": "Core",
        "signature": "(Core LabelInfo a-\u003eCore LabelInfo a)-\u003ef a-\u003eStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Abstract.html#v:liftCore2",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Abstract",
        "fct-package": "ideas",
        "fct-signature": "(Core LabelInfo a -\u003e Core LabelInfo a -\u003e Core LabelInfo a) -\u003e f a -\u003e g a -\u003e Strategy a",
        "fct-source": "src/Ideas-Common-Strategy-Abstract.html#liftCore2",
        "fct-type": "function",
        "title": "liftCore2"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Abstract",
        "module": "Ideas.Common.Strategy.Abstract",
        "name": "liftCore2",
        "normalized": "(Core LabelInfo a-\u003eCore LabelInfo a-\u003eCore LabelInfo a)-\u003eb a-\u003ec a-\u003eStrategy a",
        "package": "ideas",
        "partial": "Core",
        "signature": "(Core LabelInfo a-\u003eCore LabelInfo a-\u003eCore LabelInfo a)-\u003ef a-\u003eg a-\u003eStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Abstract.html#v:makeInfo",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Abstract",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e LabelInfo",
        "fct-source": "src/Ideas-Common-Strategy-Abstract.html#makeInfo",
        "fct-type": "function",
        "title": "makeInfo"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Abstract",
        "module": "Ideas.Common.Strategy.Abstract",
        "name": "makeInfo",
        "normalized": "a-\u003eLabelInfo",
        "package": "ideas",
        "partial": "Info",
        "signature": "a-\u003eLabelInfo"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Abstract.html#v:makeLabeledStrategy",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Abstract",
        "fct-package": "ideas",
        "fct-signature": "LabelInfo -\u003e f a -\u003e LabeledStrategy a",
        "fct-source": "src/Ideas-Common-Strategy-Abstract.html#makeLabeledStrategy",
        "fct-type": "function",
        "title": "makeLabeledStrategy"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Abstract",
        "module": "Ideas.Common.Strategy.Abstract",
        "name": "makeLabeledStrategy",
        "normalized": "LabelInfo-\u003ea b-\u003eLabeledStrategy b",
        "package": "ideas",
        "partial": "Labeled Strategy",
        "signature": "LabelInfo-\u003ef a-\u003eLabeledStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Abstract.html#v:mapRules",
      "description": {
        "fct-descr": "\u003cp\u003eApply a function to all the rules that make up a labeled strategy\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy.Abstract",
        "fct-package": "ideas",
        "fct-signature": "(Rule a -\u003e Rule b) -\u003e LabeledStrategy a -\u003e LabeledStrategy b",
        "fct-source": "src/Ideas-Common-Strategy-Abstract.html#mapRules",
        "fct-type": "function",
        "title": "mapRules"
      },
      "index": {
        "description": "Apply function to all the rules that make up labeled strategy",
        "hierarchy": "Ideas Common Strategy Abstract",
        "module": "Ideas.Common.Strategy.Abstract",
        "name": "mapRules",
        "normalized": "(Rule a-\u003eRule b)-\u003eLabeledStrategy a-\u003eLabeledStrategy b",
        "package": "ideas",
        "partial": "Rules",
        "signature": "(Rule a-\u003eRule b)-\u003eLabeledStrategy a-\u003eLabeledStrategy b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Abstract.html#v:mapRulesS",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Abstract",
        "fct-package": "ideas",
        "fct-signature": "(Rule a -\u003e Rule b) -\u003e Strategy a -\u003e Strategy b",
        "fct-source": "src/Ideas-Common-Strategy-Abstract.html#mapRulesS",
        "fct-type": "function",
        "title": "mapRulesS"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Abstract",
        "module": "Ideas.Common.Strategy.Abstract",
        "name": "mapRulesS",
        "normalized": "(Rule a-\u003eRule b)-\u003eStrategy a-\u003eStrategy b",
        "package": "ideas",
        "partial": "Rules",
        "signature": "(Rule a-\u003eRule b)-\u003eStrategy a-\u003eStrategy b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Abstract.html#v:noInterleaving",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Abstract",
        "fct-package": "ideas",
        "fct-signature": "f a -\u003e Strategy a",
        "fct-source": "src/Ideas-Common-Strategy-Abstract.html#noInterleaving",
        "fct-type": "function",
        "title": "noInterleaving"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Abstract",
        "module": "Ideas.Common.Strategy.Abstract",
        "name": "noInterleaving",
        "normalized": "a b-\u003eStrategy b",
        "package": "ideas",
        "partial": "Interleaving",
        "signature": "f a-\u003eStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Abstract.html#v:processLabelInfo",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Abstract",
        "fct-package": "ideas",
        "fct-signature": "(l -\u003e LabelInfo) -\u003e Core l a -\u003e Core l a",
        "fct-source": "src/Ideas-Common-Strategy-Abstract.html#processLabelInfo",
        "fct-type": "function",
        "title": "processLabelInfo"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Abstract",
        "module": "Ideas.Common.Strategy.Abstract",
        "name": "processLabelInfo",
        "normalized": "(a-\u003eLabelInfo)-\u003eCore a b-\u003eCore a b",
        "package": "ideas",
        "partial": "Label Info",
        "signature": "(l-\u003eLabelInfo)-\u003eCore l a-\u003eCore l a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Abstract.html#v:removed",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Abstract",
        "fct-package": "ideas",
        "fct-signature": "LabelInfo -\u003e Bool",
        "fct-source": "src/Ideas-Common-Strategy-Abstract.html#removed",
        "fct-type": "function",
        "title": "removed"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Abstract",
        "module": "Ideas.Common.Strategy.Abstract",
        "name": "removed",
        "normalized": "LabelInfo-\u003eBool",
        "package": "ideas",
        "partial": "",
        "signature": "LabelInfo-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Abstract.html#v:rulesInStrategy",
      "description": {
        "fct-descr": "\u003cp\u003eReturns a list of all major rules that are part of a labeled strategy\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy.Abstract",
        "fct-package": "ideas",
        "fct-signature": "f a -\u003e [Rule a]",
        "fct-source": "src/Ideas-Common-Strategy-Abstract.html#rulesInStrategy",
        "fct-type": "function",
        "title": "rulesInStrategy"
      },
      "index": {
        "description": "Returns list of all major rules that are part of labeled strategy",
        "hierarchy": "Ideas Common Strategy Abstract",
        "module": "Ideas.Common.Strategy.Abstract",
        "name": "rulesInStrategy",
        "normalized": "a b-\u003e[Rule b]",
        "package": "ideas",
        "partial": "In Strategy",
        "signature": "f a-\u003e[Rule a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Abstract.html#v:toCore",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Abstract",
        "fct-package": "ideas",
        "fct-signature": "Strategy a -\u003e Core LabelInfo a",
        "fct-source": "src/Ideas-Common-Strategy-Abstract.html#toCore",
        "fct-type": "function",
        "title": "toCore"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Abstract",
        "module": "Ideas.Common.Strategy.Abstract",
        "name": "toCore",
        "normalized": "Strategy a-\u003eCore LabelInfo a",
        "package": "ideas",
        "partial": "Core",
        "signature": "Strategy a-\u003eCore LabelInfo a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Abstract.html#v:toLabeled",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Abstract",
        "fct-package": "ideas",
        "fct-signature": "f a -\u003e LabeledStrategy a",
        "fct-source": "src/Ideas-Common-Strategy-Abstract.html#toLabeled",
        "fct-type": "method",
        "title": "toLabeled"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Abstract",
        "module": "Ideas.Common.Strategy.Abstract",
        "name": "toLabeled",
        "normalized": "a b-\u003eLabeledStrategy b",
        "package": "ideas",
        "partial": "Labeled",
        "signature": "f a-\u003eLabeledStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Abstract.html#v:toLabeledStrategy",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Abstract",
        "fct-package": "ideas",
        "fct-signature": "Strategy a -\u003e m (LabeledStrategy a)",
        "fct-source": "src/Ideas-Common-Strategy-Abstract.html#toLabeledStrategy",
        "fct-type": "function",
        "title": "toLabeledStrategy"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Abstract",
        "module": "Ideas.Common.Strategy.Abstract",
        "name": "toLabeledStrategy",
        "normalized": "Strategy a-\u003eb(LabeledStrategy a)",
        "package": "ideas",
        "partial": "Labeled Strategy",
        "signature": "Strategy a-\u003em(LabeledStrategy a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Abstract.html#v:toStrategy",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Abstract",
        "fct-package": "ideas",
        "fct-signature": "f a -\u003e Strategy a",
        "fct-source": "src/Ideas-Common-Strategy-Abstract.html#toStrategy",
        "fct-type": "method",
        "title": "toStrategy"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Abstract",
        "module": "Ideas.Common.Strategy.Abstract",
        "name": "toStrategy",
        "normalized": "a b-\u003eStrategy b",
        "package": "ideas",
        "partial": "Strategy",
        "signature": "f a-\u003eStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Abstract.html#v:unlabel",
      "description": {
        "fct-descr": "\u003cp\u003eRemoves the label from a strategy\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy.Abstract",
        "fct-package": "ideas",
        "fct-signature": "LabeledStrategy a -\u003e Strategy a",
        "fct-source": "src/Ideas-Common-Strategy-Abstract.html#unlabel",
        "fct-type": "function",
        "title": "unlabel"
      },
      "index": {
        "description": "Removes the label from strategy",
        "hierarchy": "Ideas Common Strategy Abstract",
        "module": "Ideas.Common.Strategy.Abstract",
        "name": "unlabel",
        "normalized": "LabeledStrategy a-\u003eStrategy a",
        "package": "ideas",
        "partial": "",
        "signature": "LabeledStrategy a-\u003eStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Combinators.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eA collection of strategy combinators: all lifted to work on different\n data types\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "Ideas.Common.Strategy.Combinators",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Common-Strategy-Combinators.html",
        "fct-type": "module",
        "title": "Combinators"
      },
      "index": {
        "description": "collection of strategy combinators all lifted to work on different data types",
        "hierarchy": "Ideas Common Strategy Combinators",
        "module": "Ideas.Common.Strategy.Combinators",
        "name": "Combinators",
        "normalized": "",
        "package": "ideas",
        "partial": "Combinators",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Combinators.html#v:-124--62-",
      "description": {
        "fct-descr": "\u003cp\u003eLeft-biased choice: if the left-operand strategy can be applied, do so. Otherwise,\n   try the right-operand strategy\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy.Combinators",
        "fct-package": "ideas",
        "fct-signature": "f a -\u003e g a -\u003e Strategy a",
        "fct-source": "src/Ideas-Common-Strategy-Combinators.html#%7C%3E",
        "fct-type": "function",
        "title": "(|\u003e)"
      },
      "index": {
        "description": "Left-biased choice if the left-operand strategy can be applied do so Otherwise try the right-operand strategy",
        "hierarchy": "Ideas Common Strategy Combinators",
        "module": "Ideas.Common.Strategy.Combinators",
        "name": "(|\u003e) |\u003e",
        "normalized": "a b-\u003ec b-\u003eStrategy b",
        "package": "ideas",
        "partial": "",
        "signature": "f a-\u003eg a-\u003eStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Combinators.html#v:-60--124--62-",
      "description": {
        "fct-descr": "\u003cp\u003eChoose between the two strategies (either do this or do that)\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy.Combinators",
        "fct-package": "ideas",
        "fct-signature": "f a -\u003e g a -\u003e Strategy a",
        "fct-source": "src/Ideas-Common-Strategy-Combinators.html#%3C%7C%3E",
        "fct-type": "function",
        "title": "(\u003c|\u003e)"
      },
      "index": {
        "description": "Choose between the two strategies either do this or do that",
        "hierarchy": "Ideas Common Strategy Combinators",
        "module": "Ideas.Common.Strategy.Combinators",
        "name": "(\u003c|\u003e) \u003c|\u003e",
        "normalized": "a b-\u003ec b-\u003eStrategy b",
        "package": "ideas",
        "partial": "",
        "signature": "f a-\u003eg a-\u003eStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Combinators.html#v:-60--37--62-",
      "description": {
        "fct-descr": "\u003cp\u003eInterleave two strategies\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy.Combinators",
        "fct-package": "ideas",
        "fct-signature": "f a -\u003e g a -\u003e Strategy a",
        "fct-source": "src/Ideas-Common-Strategy-Combinators.html#%3C%25%3E",
        "fct-type": "function",
        "title": "(\u003c%\u003e)"
      },
      "index": {
        "description": "Interleave two strategies",
        "hierarchy": "Ideas Common Strategy Combinators",
        "module": "Ideas.Common.Strategy.Combinators",
        "name": "(\u003c%\u003e) \u003c%\u003e",
        "normalized": "a b-\u003ec b-\u003eStrategy b",
        "package": "ideas",
        "partial": "",
        "signature": "f a-\u003eg a-\u003eStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Combinators.html#v:-60--42--62-",
      "description": {
        "fct-descr": "\u003cp\u003ePut two strategies in sequence (first do this, then do that)\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy.Combinators",
        "fct-package": "ideas",
        "fct-signature": "f a -\u003e g a -\u003e Strategy a",
        "fct-source": "src/Ideas-Common-Strategy-Combinators.html#%3C%2A%3E",
        "fct-type": "function",
        "title": "(\u003c*\u003e)"
      },
      "index": {
        "description": "Put two strategies in sequence first do this then do that",
        "hierarchy": "Ideas Common Strategy Combinators",
        "module": "Ideas.Common.Strategy.Combinators",
        "name": "(\u003c*\u003e) \u003c*\u003e",
        "normalized": "a b-\u003ec b-\u003eStrategy b",
        "package": "ideas",
        "partial": "",
        "signature": "f a-\u003eg a-\u003eStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Combinators.html#v:alternatives",
      "description": {
        "fct-descr": "\u003cp\u003eCombines a list of alternative strategies\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy.Combinators",
        "fct-package": "ideas",
        "fct-signature": "[f a] -\u003e Strategy a",
        "fct-source": "src/Ideas-Common-Strategy-Combinators.html#alternatives",
        "fct-type": "function",
        "title": "alternatives"
      },
      "index": {
        "description": "Combines list of alternative strategies",
        "hierarchy": "Ideas Common Strategy Combinators",
        "module": "Ideas.Common.Strategy.Combinators",
        "name": "alternatives",
        "normalized": "[a b]-\u003eStrategy b",
        "package": "ideas",
        "partial": "",
        "signature": "[f a]-\u003eStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Combinators.html#v:atomic",
      "description": {
        "fct-descr": "\u003cp\u003eMakes a strategy atomic (w.r.t. parallel composition)\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy.Combinators",
        "fct-package": "ideas",
        "fct-signature": "f a -\u003e Strategy a",
        "fct-source": "src/Ideas-Common-Strategy-Combinators.html#atomic",
        "fct-type": "function",
        "title": "atomic"
      },
      "index": {
        "description": "Makes strategy atomic w.r.t parallel composition",
        "hierarchy": "Ideas Common Strategy Combinators",
        "module": "Ideas.Common.Strategy.Combinators",
        "name": "atomic",
        "normalized": "a b-\u003eStrategy b",
        "package": "ideas",
        "partial": "",
        "signature": "f a-\u003eStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Combinators.html#v:check",
      "description": {
        "fct-descr": "\u003cp\u003eChecks whether a predicate holds for the current term. The\n   check is considered to be a minor step.\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy.Combinators",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e Bool) -\u003e Strategy a",
        "fct-source": "src/Ideas-Common-Strategy-Combinators.html#check",
        "fct-type": "function",
        "title": "check"
      },
      "index": {
        "description": "Checks whether predicate holds for the current term The check is considered to be minor step",
        "hierarchy": "Ideas Common Strategy Combinators",
        "module": "Ideas.Common.Strategy.Combinators",
        "name": "check",
        "normalized": "(a-\u003eBool)-\u003eStrategy a",
        "package": "ideas",
        "partial": "",
        "signature": "(a-\u003eBool)-\u003eStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Combinators.html#v:exhaustive",
      "description": {
        "fct-descr": "\u003cp\u003eApply the strategies from the list exhaustively (until this is no longer possible)\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy.Combinators",
        "fct-package": "ideas",
        "fct-signature": "[f a] -\u003e Strategy a",
        "fct-source": "src/Ideas-Common-Strategy-Combinators.html#exhaustive",
        "fct-type": "function",
        "title": "exhaustive"
      },
      "index": {
        "description": "Apply the strategies from the list exhaustively until this is no longer possible",
        "hierarchy": "Ideas Common Strategy Combinators",
        "module": "Ideas.Common.Strategy.Combinators",
        "name": "exhaustive",
        "normalized": "[a b]-\u003eStrategy b",
        "package": "ideas",
        "partial": "",
        "signature": "[f a]-\u003eStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Combinators.html#v:fail",
      "description": {
        "fct-descr": "\u003cp\u003eThe strategy that always fails\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy.Combinators",
        "fct-package": "ideas",
        "fct-signature": "Strategy a",
        "fct-source": "src/Ideas-Common-Strategy-Combinators.html#fail",
        "fct-type": "function",
        "title": "fail"
      },
      "index": {
        "description": "The strategy that always fails",
        "hierarchy": "Ideas Common Strategy Combinators",
        "module": "Ideas.Common.Strategy.Combinators",
        "name": "fail",
        "normalized": "",
        "package": "ideas",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Combinators.html#v:fix",
      "description": {
        "fct-descr": "\u003cp\u003eA fix-point combinator on strategies (to model recursion). Powerful\n (but dangerous) combinator\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy.Combinators",
        "fct-package": "ideas",
        "fct-signature": "(Strategy a -\u003e Strategy a) -\u003e Strategy a",
        "fct-source": "src/Ideas-Common-Strategy-Combinators.html#fix",
        "fct-type": "function",
        "title": "fix"
      },
      "index": {
        "description": "fix-point combinator on strategies to model recursion Powerful but dangerous combinator",
        "hierarchy": "Ideas Common Strategy Combinators",
        "module": "Ideas.Common.Strategy.Combinators",
        "name": "fix",
        "normalized": "(Strategy a-\u003eStrategy a)-\u003eStrategy a",
        "package": "ideas",
        "partial": "",
        "signature": "(Strategy a-\u003eStrategy a)-\u003eStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Combinators.html#v:interleave",
      "description": {
        "fct-descr": "\u003cp\u003eMerges a list of strategies (in parallel)\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy.Combinators",
        "fct-package": "ideas",
        "fct-signature": "[f a] -\u003e Strategy a",
        "fct-source": "src/Ideas-Common-Strategy-Combinators.html#interleave",
        "fct-type": "function",
        "title": "interleave"
      },
      "index": {
        "description": "Merges list of strategies in parallel",
        "hierarchy": "Ideas Common Strategy Combinators",
        "module": "Ideas.Common.Strategy.Combinators",
        "name": "interleave",
        "normalized": "[a b]-\u003eStrategy b",
        "package": "ideas",
        "partial": "",
        "signature": "[f a]-\u003eStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Combinators.html#v:many",
      "description": {
        "fct-descr": "\u003cp\u003eRepeat a strategy zero or more times (non-greedy)\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy.Combinators",
        "fct-package": "ideas",
        "fct-signature": "f a -\u003e Strategy a",
        "fct-source": "src/Ideas-Common-Strategy-Combinators.html#many",
        "fct-type": "function",
        "title": "many"
      },
      "index": {
        "description": "Repeat strategy zero or more times non-greedy",
        "hierarchy": "Ideas Common Strategy Combinators",
        "module": "Ideas.Common.Strategy.Combinators",
        "name": "many",
        "normalized": "a b-\u003eStrategy b",
        "package": "ideas",
        "partial": "",
        "signature": "f a-\u003eStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Combinators.html#v:many1",
      "description": {
        "fct-descr": "\u003cp\u003eApply a certain strategy at least once (non-greedy)\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy.Combinators",
        "fct-package": "ideas",
        "fct-signature": "f a -\u003e Strategy a",
        "fct-source": "src/Ideas-Common-Strategy-Combinators.html#many1",
        "fct-type": "function",
        "title": "many1"
      },
      "index": {
        "description": "Apply certain strategy at least once non-greedy",
        "hierarchy": "Ideas Common Strategy Combinators",
        "module": "Ideas.Common.Strategy.Combinators",
        "name": "many1",
        "normalized": "a b-\u003eStrategy b",
        "package": "ideas",
        "partial": "",
        "signature": "f a-\u003eStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Combinators.html#v:multi",
      "description": {
        "fct-descr": "\u003cp\u003eApply a strategy at least once, but collapse into a single step\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy.Combinators",
        "fct-package": "ideas",
        "fct-signature": "l -\u003e f a -\u003e LabeledStrategy a",
        "fct-source": "src/Ideas-Common-Strategy-Combinators.html#multi",
        "fct-type": "function",
        "title": "multi"
      },
      "index": {
        "description": "Apply strategy at least once but collapse into single step",
        "hierarchy": "Ideas Common Strategy Combinators",
        "module": "Ideas.Common.Strategy.Combinators",
        "name": "multi",
        "normalized": "a-\u003eb c-\u003eLabeledStrategy c",
        "package": "ideas",
        "partial": "",
        "signature": "l-\u003ef a-\u003eLabeledStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Combinators.html#v:not",
      "description": {
        "fct-descr": "\u003cp\u003eCheck whether or not the argument strategy cannot be applied: the result\n   strategy only succeeds if this is not the case (otherwise it fails).\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy.Combinators",
        "fct-package": "ideas",
        "fct-signature": "f a -\u003e Strategy a",
        "fct-source": "src/Ideas-Common-Strategy-Combinators.html#not",
        "fct-type": "function",
        "title": "not"
      },
      "index": {
        "description": "Check whether or not the argument strategy cannot be applied the result strategy only succeeds if this is not the case otherwise it fails",
        "hierarchy": "Ideas Common Strategy Combinators",
        "module": "Ideas.Common.Strategy.Combinators",
        "name": "not",
        "normalized": "a b-\u003eStrategy b",
        "package": "ideas",
        "partial": "",
        "signature": "f a-\u003eStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Combinators.html#v:option",
      "description": {
        "fct-descr": "\u003cp\u003eApply a certain strategy or do nothing (non-greedy)\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy.Combinators",
        "fct-package": "ideas",
        "fct-signature": "f a -\u003e Strategy a",
        "fct-source": "src/Ideas-Common-Strategy-Combinators.html#option",
        "fct-type": "function",
        "title": "option"
      },
      "index": {
        "description": "Apply certain strategy or do nothing non-greedy",
        "hierarchy": "Ideas Common Strategy Combinators",
        "module": "Ideas.Common.Strategy.Combinators",
        "name": "option",
        "normalized": "a b-\u003eStrategy b",
        "package": "ideas",
        "partial": "",
        "signature": "f a-\u003eStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Combinators.html#v:permute",
      "description": {
        "fct-descr": "\u003cp\u003eAllows all permutations of the list\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy.Combinators",
        "fct-package": "ideas",
        "fct-signature": "[f a] -\u003e Strategy a",
        "fct-source": "src/Ideas-Common-Strategy-Combinators.html#permute",
        "fct-type": "function",
        "title": "permute"
      },
      "index": {
        "description": "Allows all permutations of the list",
        "hierarchy": "Ideas Common Strategy Combinators",
        "module": "Ideas.Common.Strategy.Combinators",
        "name": "permute",
        "normalized": "[a b]-\u003eStrategy b",
        "package": "ideas",
        "partial": "",
        "signature": "[f a]-\u003eStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Combinators.html#v:repeat",
      "description": {
        "fct-descr": "\u003cp\u003eRepeat a strategy zero or more times (greedy version of \u003ccode\u003e\u003ca\u003emany\u003c/a\u003e\u003c/code\u003e)\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy.Combinators",
        "fct-package": "ideas",
        "fct-signature": "f a -\u003e Strategy a",
        "fct-source": "src/Ideas-Common-Strategy-Combinators.html#repeat",
        "fct-type": "function",
        "title": "repeat"
      },
      "index": {
        "description": "Repeat strategy zero or more times greedy version of many",
        "hierarchy": "Ideas Common Strategy Combinators",
        "module": "Ideas.Common.Strategy.Combinators",
        "name": "repeat",
        "normalized": "a b-\u003eStrategy b",
        "package": "ideas",
        "partial": "",
        "signature": "f a-\u003eStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Combinators.html#v:repeat1",
      "description": {
        "fct-descr": "\u003cp\u003eApply a certain strategy at least once (greedy version of \u003ccode\u003e\u003ca\u003emany1\u003c/a\u003e\u003c/code\u003e)\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy.Combinators",
        "fct-package": "ideas",
        "fct-signature": "f a -\u003e Strategy a",
        "fct-source": "src/Ideas-Common-Strategy-Combinators.html#repeat1",
        "fct-type": "function",
        "title": "repeat1"
      },
      "index": {
        "description": "Apply certain strategy at least once greedy version of many1",
        "hierarchy": "Ideas Common Strategy Combinators",
        "module": "Ideas.Common.Strategy.Combinators",
        "name": "repeat1",
        "normalized": "a b-\u003eStrategy b",
        "package": "ideas",
        "partial": "",
        "signature": "f a-\u003eStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Combinators.html#v:replicate",
      "description": {
        "fct-descr": "\u003cp\u003eApply a strategy a certain number of times\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy.Combinators",
        "fct-package": "ideas",
        "fct-signature": "Int -\u003e f a -\u003e Strategy a",
        "fct-source": "src/Ideas-Common-Strategy-Combinators.html#replicate",
        "fct-type": "function",
        "title": "replicate"
      },
      "index": {
        "description": "Apply strategy certain number of times",
        "hierarchy": "Ideas Common Strategy Combinators",
        "module": "Ideas.Common.Strategy.Combinators",
        "name": "replicate",
        "normalized": "Int-\u003ea b-\u003eStrategy b",
        "package": "ideas",
        "partial": "",
        "signature": "Int-\u003ef a-\u003eStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Combinators.html#v:sequence",
      "description": {
        "fct-descr": "\u003cp\u003ePuts a list of strategies into a sequence\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy.Combinators",
        "fct-package": "ideas",
        "fct-signature": "[f a] -\u003e Strategy a",
        "fct-source": "src/Ideas-Common-Strategy-Combinators.html#sequence",
        "fct-type": "function",
        "title": "sequence"
      },
      "index": {
        "description": "Puts list of strategies into sequence",
        "hierarchy": "Ideas Common Strategy Combinators",
        "module": "Ideas.Common.Strategy.Combinators",
        "name": "sequence",
        "normalized": "[a b]-\u003eStrategy b",
        "package": "ideas",
        "partial": "",
        "signature": "[f a]-\u003eStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Combinators.html#v:succeed",
      "description": {
        "fct-descr": "\u003cp\u003eThe strategy that always succeeds (without doing anything)\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy.Combinators",
        "fct-package": "ideas",
        "fct-signature": "Strategy a",
        "fct-source": "src/Ideas-Common-Strategy-Combinators.html#succeed",
        "fct-type": "function",
        "title": "succeed"
      },
      "index": {
        "description": "The strategy that always succeeds without doing anything",
        "hierarchy": "Ideas Common Strategy Combinators",
        "module": "Ideas.Common.Strategy.Combinators",
        "name": "succeed",
        "normalized": "",
        "package": "ideas",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Combinators.html#v:try",
      "description": {
        "fct-descr": "\u003cp\u003eApply a certain strategy if this is possible (greedy version of \u003ccode\u003e\u003ca\u003eoption\u003c/a\u003e\u003c/code\u003e)\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy.Combinators",
        "fct-package": "ideas",
        "fct-signature": "f a -\u003e Strategy a",
        "fct-source": "src/Ideas-Common-Strategy-Combinators.html#try",
        "fct-type": "function",
        "title": "try"
      },
      "index": {
        "description": "Apply certain strategy if this is possible greedy version of option",
        "hierarchy": "Ideas Common Strategy Combinators",
        "module": "Ideas.Common.Strategy.Combinators",
        "name": "try",
        "normalized": "a b-\u003eStrategy b",
        "package": "ideas",
        "partial": "",
        "signature": "f a-\u003eStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Combinators.html#v:until",
      "description": {
        "fct-descr": "\u003cp\u003eRepeat the strategy until the predicate holds\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy.Combinators",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e Bool) -\u003e f a -\u003e Strategy a",
        "fct-source": "src/Ideas-Common-Strategy-Combinators.html#until",
        "fct-type": "function",
        "title": "until"
      },
      "index": {
        "description": "Repeat the strategy until the predicate holds",
        "hierarchy": "Ideas Common Strategy Combinators",
        "module": "Ideas.Common.Strategy.Combinators",
        "name": "until",
        "normalized": "(a-\u003eBool)-\u003eb a-\u003eStrategy a",
        "package": "ideas",
        "partial": "",
        "signature": "(a-\u003eBool)-\u003ef a-\u003eStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Combinators.html#v:while",
      "description": {
        "fct-descr": "\u003cp\u003eRepeat the strategy as long as the predicate holds\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy.Combinators",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e Bool) -\u003e f a -\u003e Strategy a",
        "fct-source": "src/Ideas-Common-Strategy-Combinators.html#while",
        "fct-type": "function",
        "title": "while"
      },
      "index": {
        "description": "Repeat the strategy as long as the predicate holds",
        "hierarchy": "Ideas Common Strategy Combinators",
        "module": "Ideas.Common.Strategy.Combinators",
        "name": "while",
        "normalized": "(a-\u003eBool)-\u003eb a-\u003eStrategy a",
        "package": "ideas",
        "partial": "",
        "signature": "(a-\u003eBool)-\u003ef a-\u003eStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Configuration.html#",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Configuration",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Common-Strategy-Configuration.html",
        "fct-type": "module",
        "title": "Configuration"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Configuration",
        "module": "Ideas.Common.Strategy.Configuration",
        "name": "Configuration",
        "normalized": "",
        "package": "ideas",
        "partial": "Configuration",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Configuration.html#t:ConfigAction",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Configuration",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Common-Strategy-Configuration.html#ConfigAction",
        "fct-type": "data",
        "title": "ConfigAction"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Configuration",
        "module": "Ideas.Common.Strategy.Configuration",
        "name": "ConfigAction",
        "normalized": "",
        "package": "ideas",
        "partial": "Config Action",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Configuration.html#t:ConfigItem",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Configuration",
        "fct-package": "ideas",
        "fct-signature": "type",
        "fct-source": "src/Ideas-Common-Strategy-Configuration.html#ConfigItem",
        "fct-type": "type",
        "title": "ConfigItem"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Configuration",
        "module": "Ideas.Common.Strategy.Configuration",
        "name": "ConfigItem",
        "normalized": "",
        "package": "ideas",
        "partial": "Config Item",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Configuration.html#t:ConfigLocation",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Configuration",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Common-Strategy-Configuration.html#ConfigLocation",
        "fct-type": "data",
        "title": "ConfigLocation"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Configuration",
        "module": "Ideas.Common.Strategy.Configuration",
        "name": "ConfigLocation",
        "normalized": "",
        "package": "ideas",
        "partial": "Config Location",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Configuration.html#t:StrategyConfiguration",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Configuration",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Common-Strategy-Configuration.html#StrategyConfiguration",
        "fct-type": "data",
        "title": "StrategyConfiguration"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Configuration",
        "module": "Ideas.Common.Strategy.Configuration",
        "name": "StrategyConfiguration",
        "normalized": "",
        "package": "ideas",
        "partial": "Strategy Configuration",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Configuration.html#v:Collapse",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Configuration",
        "fct-package": "ideas",
        "fct-signature": "Collapse",
        "fct-source": "src/Ideas-Common-Strategy-Configuration.html#ConfigAction",
        "fct-type": "function",
        "title": "Collapse"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Configuration",
        "module": "Ideas.Common.Strategy.Configuration",
        "name": "Collapse",
        "normalized": "",
        "package": "ideas",
        "partial": "Collapse",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Configuration.html#v:Expand",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Configuration",
        "fct-package": "ideas",
        "fct-signature": "Expand",
        "fct-source": "src/Ideas-Common-Strategy-Configuration.html#ConfigAction",
        "fct-type": "function",
        "title": "Expand"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Configuration",
        "module": "Ideas.Common.Strategy.Configuration",
        "name": "Expand",
        "normalized": "",
        "package": "ideas",
        "partial": "Expand",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Configuration.html#v:Hide",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Configuration",
        "fct-package": "ideas",
        "fct-signature": "Hide",
        "fct-source": "src/Ideas-Common-Strategy-Configuration.html#ConfigAction",
        "fct-type": "function",
        "title": "Hide"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Configuration",
        "module": "Ideas.Common.Strategy.Configuration",
        "name": "Hide",
        "normalized": "",
        "package": "ideas",
        "partial": "Hide",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Configuration.html#v:Reinsert",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Configuration",
        "fct-package": "ideas",
        "fct-signature": "Reinsert",
        "fct-source": "src/Ideas-Common-Strategy-Configuration.html#ConfigAction",
        "fct-type": "function",
        "title": "Reinsert"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Configuration",
        "module": "Ideas.Common.Strategy.Configuration",
        "name": "Reinsert",
        "normalized": "",
        "package": "ideas",
        "partial": "Reinsert",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Configuration.html#v:Remove",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Configuration",
        "fct-package": "ideas",
        "fct-signature": "Remove",
        "fct-source": "src/Ideas-Common-Strategy-Configuration.html#ConfigAction",
        "fct-type": "function",
        "title": "Remove"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Configuration",
        "module": "Ideas.Common.Strategy.Configuration",
        "name": "Remove",
        "normalized": "",
        "package": "ideas",
        "partial": "Remove",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Configuration.html#v:Reveal",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Configuration",
        "fct-package": "ideas",
        "fct-signature": "Reveal",
        "fct-source": "src/Ideas-Common-Strategy-Configuration.html#ConfigAction",
        "fct-type": "function",
        "title": "Reveal"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Configuration",
        "module": "Ideas.Common.Strategy.Configuration",
        "name": "Reveal",
        "normalized": "",
        "package": "ideas",
        "partial": "Reveal",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Configuration.html#v:byGroup",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Configuration",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e ConfigLocation",
        "fct-source": "src/Ideas-Common-Strategy-Configuration.html#byGroup",
        "fct-type": "function",
        "title": "byGroup"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Configuration",
        "module": "Ideas.Common.Strategy.Configuration",
        "name": "byGroup",
        "normalized": "a-\u003eConfigLocation",
        "package": "ideas",
        "partial": "Group",
        "signature": "a-\u003eConfigLocation"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Configuration.html#v:byName",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Configuration",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e ConfigLocation",
        "fct-source": "src/Ideas-Common-Strategy-Configuration.html#byName",
        "fct-type": "function",
        "title": "byName"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Configuration",
        "module": "Ideas.Common.Strategy.Configuration",
        "name": "byName",
        "normalized": "a-\u003eConfigLocation",
        "package": "ideas",
        "partial": "Name",
        "signature": "a-\u003eConfigLocation"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Configuration.html#v:collapse",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Configuration",
        "fct-package": "ideas",
        "fct-signature": "f a -\u003e LabeledStrategy a",
        "fct-source": "src/Ideas-Common-Strategy-Configuration.html#collapse",
        "fct-type": "function",
        "title": "collapse"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Configuration",
        "module": "Ideas.Common.Strategy.Configuration",
        "name": "collapse",
        "normalized": "a b-\u003eLabeledStrategy b",
        "package": "ideas",
        "partial": "",
        "signature": "f a-\u003eLabeledStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Configuration.html#v:configActions",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Configuration",
        "fct-package": "ideas",
        "fct-signature": "[ConfigAction]",
        "fct-source": "src/Ideas-Common-Strategy-Configuration.html#configActions",
        "fct-type": "function",
        "title": "configActions"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Configuration",
        "module": "Ideas.Common.Strategy.Configuration",
        "name": "configActions",
        "normalized": "[ConfigAction]",
        "package": "ideas",
        "partial": "Actions",
        "signature": "[ConfigAction]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Configuration.html#v:configure",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Configuration",
        "fct-package": "ideas",
        "fct-signature": "StrategyConfiguration -\u003e LabeledStrategy a -\u003e LabeledStrategy a",
        "fct-source": "src/Ideas-Common-Strategy-Configuration.html#configure",
        "fct-type": "function",
        "title": "configure"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Configuration",
        "module": "Ideas.Common.Strategy.Configuration",
        "name": "configure",
        "normalized": "StrategyConfiguration-\u003eLabeledStrategy a-\u003eLabeledStrategy a",
        "package": "ideas",
        "partial": "",
        "signature": "StrategyConfiguration-\u003eLabeledStrategy a-\u003eLabeledStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Configuration.html#v:configureNow",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Configuration",
        "fct-package": "ideas",
        "fct-signature": "LabeledStrategy a -\u003e LabeledStrategy a",
        "fct-source": "src/Ideas-Common-Strategy-Configuration.html#configureNow",
        "fct-type": "function",
        "title": "configureNow"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Configuration",
        "module": "Ideas.Common.Strategy.Configuration",
        "name": "configureNow",
        "normalized": "LabeledStrategy a-\u003eLabeledStrategy a",
        "package": "ideas",
        "partial": "Now",
        "signature": "LabeledStrategy a-\u003eLabeledStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Configuration.html#v:expand",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Configuration",
        "fct-package": "ideas",
        "fct-signature": "f a -\u003e LabeledStrategy a",
        "fct-source": "src/Ideas-Common-Strategy-Configuration.html#expand",
        "fct-type": "function",
        "title": "expand"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Configuration",
        "module": "Ideas.Common.Strategy.Configuration",
        "name": "expand",
        "normalized": "a b-\u003eLabeledStrategy b",
        "package": "ideas",
        "partial": "",
        "signature": "f a-\u003eLabeledStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Configuration.html#v:hide",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Configuration",
        "fct-package": "ideas",
        "fct-signature": "f a -\u003e LabeledStrategy a",
        "fct-source": "src/Ideas-Common-Strategy-Configuration.html#hide",
        "fct-type": "function",
        "title": "hide"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Configuration",
        "module": "Ideas.Common.Strategy.Configuration",
        "name": "hide",
        "normalized": "a b-\u003eLabeledStrategy b",
        "package": "ideas",
        "partial": "",
        "signature": "f a-\u003eLabeledStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Configuration.html#v:makeStrategyConfiguration",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Configuration",
        "fct-package": "ideas",
        "fct-signature": "[ConfigItem] -\u003e StrategyConfiguration",
        "fct-source": "src/Ideas-Common-Strategy-Configuration.html#makeStrategyConfiguration",
        "fct-type": "function",
        "title": "makeStrategyConfiguration"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Configuration",
        "module": "Ideas.Common.Strategy.Configuration",
        "name": "makeStrategyConfiguration",
        "normalized": "[ConfigItem]-\u003eStrategyConfiguration",
        "package": "ideas",
        "partial": "Strategy Configuration",
        "signature": "[ConfigItem]-\u003eStrategyConfiguration"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Configuration.html#v:reinsert",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Configuration",
        "fct-package": "ideas",
        "fct-signature": "f a -\u003e LabeledStrategy a",
        "fct-source": "src/Ideas-Common-Strategy-Configuration.html#reinsert",
        "fct-type": "function",
        "title": "reinsert"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Configuration",
        "module": "Ideas.Common.Strategy.Configuration",
        "name": "reinsert",
        "normalized": "a b-\u003eLabeledStrategy b",
        "package": "ideas",
        "partial": "",
        "signature": "f a-\u003eLabeledStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Configuration.html#v:remove",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Configuration",
        "fct-package": "ideas",
        "fct-signature": "f a -\u003e LabeledStrategy a",
        "fct-source": "src/Ideas-Common-Strategy-Configuration.html#remove",
        "fct-type": "function",
        "title": "remove"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Configuration",
        "module": "Ideas.Common.Strategy.Configuration",
        "name": "remove",
        "normalized": "a b-\u003eLabeledStrategy b",
        "package": "ideas",
        "partial": "",
        "signature": "f a-\u003eLabeledStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Configuration.html#v:reveal",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Configuration",
        "fct-package": "ideas",
        "fct-signature": "f a -\u003e LabeledStrategy a",
        "fct-source": "src/Ideas-Common-Strategy-Configuration.html#reveal",
        "fct-type": "function",
        "title": "reveal"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Configuration",
        "module": "Ideas.Common.Strategy.Configuration",
        "name": "reveal",
        "normalized": "a b-\u003eLabeledStrategy b",
        "package": "ideas",
        "partial": "",
        "signature": "f a-\u003eLabeledStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Core.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eThe core strategy combinators. This module defines the interal data\n structure of a strategy, and some utility functions that operate\n directly on it.\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "Ideas.Common.Strategy.Core",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Common-Strategy-Core.html",
        "fct-type": "module",
        "title": "Core"
      },
      "index": {
        "description": "The core strategy combinators This module defines the interal data structure of strategy and some utility functions that operate directly on it",
        "hierarchy": "Ideas Common Strategy Core",
        "module": "Ideas.Common.Strategy.Core",
        "name": "Core",
        "normalized": "",
        "package": "ideas",
        "partial": "Core",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Core.html#t:Core",
      "description": {
        "fct-descr": "\u003cp\u003eCore expression, with rules\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy.Core",
        "fct-package": "ideas",
        "fct-signature": "type",
        "fct-source": "src/Ideas-Common-Strategy-Core.html#Core",
        "fct-type": "type",
        "title": "Core"
      },
      "index": {
        "description": "Core expression with rules",
        "hierarchy": "Ideas Common Strategy Core",
        "module": "Ideas.Common.Strategy.Core",
        "name": "Core",
        "normalized": "",
        "package": "ideas",
        "partial": "Core",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Core.html#t:GCore",
      "description": {
        "fct-descr": "\u003cp\u003eA generalized Core expression, not restricted to rules. This makes GCore\n a (traversable and foldable) functor.\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy.Core",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Common-Strategy-Core.html#GCore",
        "fct-type": "data",
        "title": "GCore"
      },
      "index": {
        "description": "generalized Core expression not restricted to rules This makes GCore traversable and foldable functor",
        "hierarchy": "Ideas Common Strategy Core",
        "module": "Ideas.Common.Strategy.Core",
        "name": "GCore",
        "normalized": "",
        "package": "ideas",
        "partial": "GCore",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Core.html#v:.-124-.",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Core",
        "fct-package": "ideas",
        "fct-signature": "GCore l a -\u003e GCore l a -\u003e GCore l a",
        "fct-source": "src/Ideas-Common-Strategy-Core.html#.%7C.",
        "fct-type": "function",
        "title": "(.|.)"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Core",
        "module": "Ideas.Common.Strategy.Core",
        "name": "(.|.) .|.",
        "normalized": "GCore a b-\u003eGCore a b-\u003eGCore a b",
        "package": "ideas",
        "partial": "",
        "signature": "GCore l a-\u003eGCore l a-\u003eGCore l a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Core.html#v:.-37-.",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Core",
        "fct-package": "ideas",
        "fct-signature": "GCore l a -\u003e GCore l a -\u003e GCore l a",
        "fct-source": "src/Ideas-Common-Strategy-Core.html#.%25.",
        "fct-type": "function",
        "title": "(.%.)"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Core",
        "module": "Ideas.Common.Strategy.Core",
        "name": "(.%.) .%.",
        "normalized": "GCore a b-\u003eGCore a b-\u003eGCore a b",
        "package": "ideas",
        "partial": "",
        "signature": "GCore l a-\u003eGCore l a-\u003eGCore l a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Core.html#v:.-42-.",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Core",
        "fct-package": "ideas",
        "fct-signature": "GCore l a -\u003e GCore l a -\u003e GCore l a",
        "fct-source": "src/Ideas-Common-Strategy-Core.html#.%2A.",
        "fct-type": "function",
        "title": "(.*.)"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Core",
        "module": "Ideas.Common.Strategy.Core",
        "name": "(.*.) .*.",
        "normalized": "GCore a b-\u003eGCore a b-\u003eGCore a b",
        "package": "ideas",
        "partial": "",
        "signature": "GCore l a-\u003eGCore l a-\u003eGCore l a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Core.html#v::-124--62-:",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Core",
        "fct-package": "ideas",
        "fct-signature": "(GCore l a) :|\u003e: (GCore l a)",
        "fct-source": "src/Ideas-Common-Strategy-Core.html#GCore",
        "fct-type": "function",
        "title": ":|\u003e:"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Core",
        "module": "Ideas.Common.Strategy.Core",
        "name": ":|\u003e:",
        "normalized": "",
        "package": "ideas",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Core.html#v::-124-:",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Core",
        "fct-package": "ideas",
        "fct-signature": "(GCore l a) :|: (GCore l a)",
        "fct-source": "src/Ideas-Common-Strategy-Core.html#GCore",
        "fct-type": "function",
        "title": ":|:"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Core",
        "module": "Ideas.Common.Strategy.Core",
        "name": ":|:",
        "normalized": "",
        "package": "ideas",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Core.html#v::-33--37-:",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Core",
        "fct-package": "ideas",
        "fct-signature": "(GCore l a) :!%: (GCore l a)",
        "fct-source": "src/Ideas-Common-Strategy-Core.html#GCore",
        "fct-type": "function",
        "title": ":!%:"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Core",
        "module": "Ideas.Common.Strategy.Core",
        "name": ":!%:",
        "normalized": "",
        "package": "ideas",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Core.html#v::-37-:",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Core",
        "fct-package": "ideas",
        "fct-signature": "(GCore l a) :%: (GCore l a)",
        "fct-source": "src/Ideas-Common-Strategy-Core.html#GCore",
        "fct-type": "function",
        "title": ":%:"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Core",
        "module": "Ideas.Common.Strategy.Core",
        "name": ":%:",
        "normalized": "",
        "package": "ideas",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Core.html#v::-42-:",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Core",
        "fct-package": "ideas",
        "fct-signature": "(GCore l a) :*: (GCore l a)",
        "fct-source": "src/Ideas-Common-Strategy-Core.html#GCore",
        "fct-type": "function",
        "title": ":*:"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Core",
        "module": "Ideas.Common.Strategy.Core",
        "name": ":*:",
        "normalized": "",
        "package": "ideas",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Core.html#v:Atomic",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Core",
        "fct-package": "ideas",
        "fct-signature": "Atomic (GCore l a)",
        "fct-source": "src/Ideas-Common-Strategy-Core.html#GCore",
        "fct-type": "function",
        "title": "Atomic"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Core",
        "module": "Ideas.Common.Strategy.Core",
        "name": "Atomic",
        "normalized": "",
        "package": "ideas",
        "partial": "Atomic",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Core.html#v:Fail",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Core",
        "fct-package": "ideas",
        "fct-signature": "Fail",
        "fct-source": "src/Ideas-Common-Strategy-Core.html#GCore",
        "fct-type": "function",
        "title": "Fail"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Core",
        "module": "Ideas.Common.Strategy.Core",
        "name": "Fail",
        "normalized": "",
        "package": "ideas",
        "partial": "Fail",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Core.html#v:Label",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Core",
        "fct-package": "ideas",
        "fct-signature": "Label l (GCore l a)",
        "fct-source": "src/Ideas-Common-Strategy-Core.html#GCore",
        "fct-type": "function",
        "title": "Label"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Core",
        "module": "Ideas.Common.Strategy.Core",
        "name": "Label",
        "normalized": "",
        "package": "ideas",
        "partial": "Label",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Core.html#v:Many",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Core",
        "fct-package": "ideas",
        "fct-signature": "Many (GCore l a)",
        "fct-source": "src/Ideas-Common-Strategy-Core.html#GCore",
        "fct-type": "function",
        "title": "Many"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Core",
        "module": "Ideas.Common.Strategy.Core",
        "name": "Many",
        "normalized": "",
        "package": "ideas",
        "partial": "Many",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Core.html#v:Not",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Core",
        "fct-package": "ideas",
        "fct-signature": "Not (GCore l a)",
        "fct-source": "src/Ideas-Common-Strategy-Core.html#GCore",
        "fct-type": "function",
        "title": "Not"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Core",
        "module": "Ideas.Common.Strategy.Core",
        "name": "Not",
        "normalized": "",
        "package": "ideas",
        "partial": "Not",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Core.html#v:Rec",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Core",
        "fct-package": "ideas",
        "fct-signature": "Rec Int (GCore l a)",
        "fct-source": "src/Ideas-Common-Strategy-Core.html#GCore",
        "fct-type": "function",
        "title": "Rec"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Core",
        "module": "Ideas.Common.Strategy.Core",
        "name": "Rec",
        "normalized": "",
        "package": "ideas",
        "partial": "Rec",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Core.html#v:Repeat",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Core",
        "fct-package": "ideas",
        "fct-signature": "Repeat (GCore l a)",
        "fct-source": "src/Ideas-Common-Strategy-Core.html#GCore",
        "fct-type": "function",
        "title": "Repeat"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Core",
        "module": "Ideas.Common.Strategy.Core",
        "name": "Repeat",
        "normalized": "",
        "package": "ideas",
        "partial": "Repeat",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Core.html#v:Rule",
      "description": {
        "fct-descr": "\u003cp\u003eGeneralized constructor (not restricted to rules)\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy.Core",
        "fct-package": "ideas",
        "fct-signature": "Rule a",
        "fct-source": "src/Ideas-Common-Strategy-Core.html#GCore",
        "fct-type": "function",
        "title": "Rule"
      },
      "index": {
        "description": "Generalized constructor not restricted to rules",
        "hierarchy": "Ideas Common Strategy Core",
        "module": "Ideas.Common.Strategy.Core",
        "name": "Rule",
        "normalized": "",
        "package": "ideas",
        "partial": "Rule",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Core.html#v:Succeed",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Core",
        "fct-package": "ideas",
        "fct-signature": "Succeed",
        "fct-source": "src/Ideas-Common-Strategy-Core.html#GCore",
        "fct-type": "function",
        "title": "Succeed"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Core",
        "module": "Ideas.Common.Strategy.Core",
        "name": "Succeed",
        "normalized": "",
        "package": "ideas",
        "partial": "Succeed",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Core.html#v:Var",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Core",
        "fct-package": "ideas",
        "fct-signature": "Var Int",
        "fct-source": "src/Ideas-Common-Strategy-Core.html#GCore",
        "fct-type": "function",
        "title": "Var"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Core",
        "module": "Ideas.Common.Strategy.Core",
        "name": "Var",
        "normalized": "",
        "package": "ideas",
        "partial": "Var",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Core.html#v:coreFix",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Core",
        "fct-package": "ideas",
        "fct-signature": "(GCore l a -\u003e GCore l a) -\u003e GCore l a",
        "fct-source": "src/Ideas-Common-Strategy-Core.html#coreFix",
        "fct-type": "function",
        "title": "coreFix"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Core",
        "module": "Ideas.Common.Strategy.Core",
        "name": "coreFix",
        "normalized": "(GCore a b-\u003eGCore a b)-\u003eGCore a b",
        "package": "ideas",
        "partial": "Fix",
        "signature": "(GCore l a-\u003eGCore l a)-\u003eGCore l a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Core.html#v:coreMany",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Core",
        "fct-package": "ideas",
        "fct-signature": "GCore l a -\u003e GCore l a",
        "fct-source": "src/Ideas-Common-Strategy-Core.html#coreMany",
        "fct-type": "function",
        "title": "coreMany"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Core",
        "module": "Ideas.Common.Strategy.Core",
        "name": "coreMany",
        "normalized": "GCore a b-\u003eGCore a b",
        "package": "ideas",
        "partial": "Many",
        "signature": "GCore l a-\u003eGCore l a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Core.html#v:coreOrElse",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Core",
        "fct-package": "ideas",
        "fct-signature": "GCore l a -\u003e GCore l a -\u003e GCore l a",
        "fct-source": "src/Ideas-Common-Strategy-Core.html#coreOrElse",
        "fct-type": "function",
        "title": "coreOrElse"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Core",
        "module": "Ideas.Common.Strategy.Core",
        "name": "coreOrElse",
        "normalized": "GCore a b-\u003eGCore a b-\u003eGCore a b",
        "package": "ideas",
        "partial": "Or Else",
        "signature": "GCore l a-\u003eGCore l a-\u003eGCore l a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Core.html#v:coreRepeat",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Core",
        "fct-package": "ideas",
        "fct-signature": "GCore l a -\u003e GCore l a",
        "fct-source": "src/Ideas-Common-Strategy-Core.html#coreRepeat",
        "fct-type": "function",
        "title": "coreRepeat"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Core",
        "module": "Ideas.Common.Strategy.Core",
        "name": "coreRepeat",
        "normalized": "GCore a b-\u003eGCore a b",
        "package": "ideas",
        "partial": "Repeat",
        "signature": "GCore l a-\u003eGCore l a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Core.html#v:noLabels",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Core",
        "fct-package": "ideas",
        "fct-signature": "GCore l a -\u003e GCore l a",
        "fct-source": "src/Ideas-Common-Strategy-Core.html#noLabels",
        "fct-type": "function",
        "title": "noLabels"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Core",
        "module": "Ideas.Common.Strategy.Core",
        "name": "noLabels",
        "normalized": "GCore a b-\u003eGCore a b",
        "package": "ideas",
        "partial": "Labels",
        "signature": "GCore l a-\u003eGCore l a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Core.html#v:substCoreVar",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Core",
        "fct-package": "ideas",
        "fct-signature": "Int -\u003e GCore l a -\u003e GCore l a -\u003e GCore l a",
        "fct-source": "src/Ideas-Common-Strategy-Core.html#substCoreVar",
        "fct-type": "function",
        "title": "substCoreVar"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Core",
        "module": "Ideas.Common.Strategy.Core",
        "name": "substCoreVar",
        "normalized": "Int-\u003eGCore a b-\u003eGCore a b-\u003eGCore a b",
        "package": "ideas",
        "partial": "Core Var",
        "signature": "Int-\u003eGCore l a-\u003eGCore l a-\u003eGCore l a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Location.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eLocations in a strategy\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "Ideas.Common.Strategy.Location",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Common-Strategy-Location.html",
        "fct-type": "module",
        "title": "Location"
      },
      "index": {
        "description": "Locations in strategy",
        "hierarchy": "Ideas Common Strategy Location",
        "module": "Ideas.Common.Strategy.Location",
        "name": "Location",
        "normalized": "",
        "package": "ideas",
        "partial": "Location",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Location.html#v:nextTaskLocation",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Location",
        "fct-package": "ideas",
        "fct-signature": "LabeledStrategy a -\u003e Id -\u003e Id -\u003e Id",
        "fct-source": "src/Ideas-Common-Strategy-Location.html#nextTaskLocation",
        "fct-type": "function",
        "title": "nextTaskLocation"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Location",
        "module": "Ideas.Common.Strategy.Location",
        "name": "nextTaskLocation",
        "normalized": "LabeledStrategy a-\u003eId-\u003eId-\u003eId",
        "package": "ideas",
        "partial": "Task Location",
        "signature": "LabeledStrategy a-\u003eId-\u003eId-\u003eId"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Location.html#v:strategyLocations",
      "description": {
        "fct-descr": "\u003cp\u003eReturns a list of all strategy locations, paired with the labeled\n substrategy at that location\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy.Location",
        "fct-package": "ideas",
        "fct-signature": "LabeledStrategy a -\u003e [([Int], LabeledStrategy a)]",
        "fct-source": "src/Ideas-Common-Strategy-Location.html#strategyLocations",
        "fct-type": "function",
        "title": "strategyLocations"
      },
      "index": {
        "description": "Returns list of all strategy locations paired with the labeled substrategy at that location",
        "hierarchy": "Ideas Common Strategy Location",
        "module": "Ideas.Common.Strategy.Location",
        "name": "strategyLocations",
        "normalized": "LabeledStrategy a-\u003e[([Int],LabeledStrategy a)]",
        "package": "ideas",
        "partial": "Locations",
        "signature": "LabeledStrategy a-\u003e[([Int],LabeledStrategy a)]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Location.html#v:subStrategy",
      "description": {
        "fct-descr": "\u003cp\u003eReturns the substrategy or rule at a strategy location. Nothing\n indicates that the location is invalid\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy.Location",
        "fct-package": "ideas",
        "fct-signature": "Id -\u003e LabeledStrategy a -\u003e Maybe (LabeledStrategy a)",
        "fct-source": "src/Ideas-Common-Strategy-Location.html#subStrategy",
        "fct-type": "function",
        "title": "subStrategy"
      },
      "index": {
        "description": "Returns the substrategy or rule at strategy location Nothing indicates that the location is invalid",
        "hierarchy": "Ideas Common Strategy Location",
        "module": "Ideas.Common.Strategy.Location",
        "name": "subStrategy",
        "normalized": "Id-\u003eLabeledStrategy a-\u003eMaybe(LabeledStrategy a)",
        "package": "ideas",
        "partial": "Strategy",
        "signature": "Id-\u003eLabeledStrategy a-\u003eMaybe(LabeledStrategy a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Location.html#v:subTaskLocation",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Location",
        "fct-package": "ideas",
        "fct-signature": "LabeledStrategy a -\u003e Id -\u003e Id -\u003e Id",
        "fct-source": "src/Ideas-Common-Strategy-Location.html#subTaskLocation",
        "fct-type": "function",
        "title": "subTaskLocation"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Location",
        "module": "Ideas.Common.Strategy.Location",
        "name": "subTaskLocation",
        "normalized": "LabeledStrategy a-\u003eId-\u003eId-\u003eId",
        "package": "ideas",
        "partial": "Task Location",
        "signature": "LabeledStrategy a-\u003eId-\u003eId-\u003eId"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Parsing.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eBasic machinery for executing a core strategy expression.\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "Ideas.Common.Strategy.Parsing",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Common-Strategy-Parsing.html",
        "fct-type": "module",
        "title": "Parsing"
      },
      "index": {
        "description": "Basic machinery for executing core strategy expression",
        "hierarchy": "Ideas Common Strategy Parsing",
        "module": "Ideas.Common.Strategy.Parsing",
        "name": "Parsing",
        "normalized": "",
        "package": "ideas",
        "partial": "Parsing",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Parsing.html#t:Result",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Parsing",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Common-Strategy-Parsing.html#Result",
        "fct-type": "data",
        "title": "Result"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Parsing",
        "module": "Ideas.Common.Strategy.Parsing",
        "name": "Result",
        "normalized": "",
        "package": "ideas",
        "partial": "Result",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Parsing.html#t:State",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Parsing",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Common-Strategy-Parsing.html#State",
        "fct-type": "data",
        "title": "State"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Parsing",
        "module": "Ideas.Common.Strategy.Parsing",
        "name": "State",
        "normalized": "",
        "package": "ideas",
        "partial": "State",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Parsing.html#t:Step",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Parsing",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Common-Strategy-Parsing.html#Step",
        "fct-type": "data",
        "title": "Step"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Parsing",
        "module": "Ideas.Common.Strategy.Parsing",
        "name": "Step",
        "normalized": "",
        "package": "ideas",
        "partial": "Step",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Parsing.html#v:Enter",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Parsing",
        "fct-package": "ideas",
        "fct-signature": "Enter l",
        "fct-source": "src/Ideas-Common-Strategy-Parsing.html#Step",
        "fct-type": "function",
        "title": "Enter"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Parsing",
        "module": "Ideas.Common.Strategy.Parsing",
        "name": "Enter",
        "normalized": "",
        "package": "ideas",
        "partial": "Enter",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Parsing.html#v:Exit",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Parsing",
        "fct-package": "ideas",
        "fct-signature": "Exit l",
        "fct-source": "src/Ideas-Common-Strategy-Parsing.html#Step",
        "fct-type": "function",
        "title": "Exit"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Parsing",
        "module": "Ideas.Common.Strategy.Parsing",
        "name": "Exit",
        "normalized": "",
        "package": "ideas",
        "partial": "Exit",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Parsing.html#v:Ready",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Parsing",
        "fct-package": "ideas",
        "fct-signature": "Ready",
        "fct-source": "src/Ideas-Common-Strategy-Parsing.html#Result",
        "fct-type": "function",
        "title": "Ready"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Parsing",
        "module": "Ideas.Common.Strategy.Parsing",
        "name": "Ready",
        "normalized": "",
        "package": "ideas",
        "partial": "Ready",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Parsing.html#v:Result",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Parsing",
        "fct-package": "ideas",
        "fct-signature": "Result a",
        "fct-source": "src/Ideas-Common-Strategy-Parsing.html#Result",
        "fct-type": "function",
        "title": "Result"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Parsing",
        "module": "Ideas.Common.Strategy.Parsing",
        "name": "Result",
        "normalized": "",
        "package": "ideas",
        "partial": "Result",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Parsing.html#v:RuleStep",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Parsing",
        "fct-package": "ideas",
        "fct-signature": "RuleStep Environment (Rule a)",
        "fct-source": "src/Ideas-Common-Strategy-Parsing.html#Step",
        "fct-type": "function",
        "title": "RuleStep"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Parsing",
        "module": "Ideas.Common.Strategy.Parsing",
        "name": "RuleStep",
        "normalized": "",
        "package": "ideas",
        "partial": "Rule Step",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Parsing.html#v:choices",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Parsing",
        "fct-package": "ideas",
        "fct-signature": "State l a -\u003e [Bool]",
        "fct-source": "src/Ideas-Common-Strategy-Parsing.html#choices",
        "fct-type": "function",
        "title": "choices"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Parsing",
        "module": "Ideas.Common.Strategy.Parsing",
        "name": "choices",
        "normalized": "State a b-\u003e[Bool]",
        "package": "ideas",
        "partial": "",
        "signature": "State l a-\u003e[Bool]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Parsing.html#v:firsts",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Parsing",
        "fct-package": "ideas",
        "fct-signature": "Bool -\u003e State l a -\u003e [(Result (Step l a), State l a)]",
        "fct-source": "src/Ideas-Common-Strategy-Parsing.html#firsts",
        "fct-type": "function",
        "title": "firsts"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Parsing",
        "module": "Ideas.Common.Strategy.Parsing",
        "name": "firsts",
        "normalized": "Bool-\u003eState a b-\u003e[(Result(Step a b),State a b)]",
        "package": "ideas",
        "partial": "",
        "signature": "Bool-\u003eState l a-\u003e[(Result(Step l a),State l a)]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Parsing.html#v:isReady",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Parsing",
        "fct-package": "ideas",
        "fct-signature": "Result a -\u003e Bool",
        "fct-source": "src/Ideas-Common-Strategy-Parsing.html#isReady",
        "fct-type": "function",
        "title": "isReady"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Parsing",
        "module": "Ideas.Common.Strategy.Parsing",
        "name": "isReady",
        "normalized": "Result a-\u003eBool",
        "package": "ideas",
        "partial": "Ready",
        "signature": "Result a-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Parsing.html#v:makeState",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Parsing",
        "fct-package": "ideas",
        "fct-signature": "Core l a -\u003e a -\u003e State l a",
        "fct-source": "src/Ideas-Common-Strategy-Parsing.html#makeState",
        "fct-type": "function",
        "title": "makeState"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Parsing",
        "module": "Ideas.Common.Strategy.Parsing",
        "name": "makeState",
        "normalized": "Core a b-\u003eb-\u003eState a b",
        "package": "ideas",
        "partial": "State",
        "signature": "Core l a-\u003ea-\u003eState l a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Parsing.html#v:parseDerivationTree",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Parsing",
        "fct-package": "ideas",
        "fct-signature": "Bool -\u003e State l a -\u003e DerivationTree (Step l a) (State l a)",
        "fct-source": "src/Ideas-Common-Strategy-Parsing.html#parseDerivationTree",
        "fct-type": "function",
        "title": "parseDerivationTree"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Parsing",
        "module": "Ideas.Common.Strategy.Parsing",
        "name": "parseDerivationTree",
        "normalized": "Bool-\u003eState a b-\u003eDerivationTree(Step a b)(State a b)",
        "package": "ideas",
        "partial": "Derivation Tree",
        "signature": "Bool-\u003eState l a-\u003eDerivationTree(Step l a)(State l a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Parsing.html#v:replay",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Parsing",
        "fct-package": "ideas",
        "fct-signature": "Int -\u003e [Bool] -\u003e Core l a -\u003e m (State l a)",
        "fct-source": "src/Ideas-Common-Strategy-Parsing.html#replay",
        "fct-type": "function",
        "title": "replay"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Parsing",
        "module": "Ideas.Common.Strategy.Parsing",
        "name": "replay",
        "normalized": "Int-\u003e[Bool]-\u003eCore a b-\u003ec(State a b)",
        "package": "ideas",
        "partial": "",
        "signature": "Int-\u003e[Bool]-\u003eCore l a-\u003em(State l a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Parsing.html#v:runCore",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Parsing",
        "fct-package": "ideas",
        "fct-signature": "Core l a -\u003e a -\u003e [a]",
        "fct-source": "src/Ideas-Common-Strategy-Parsing.html#runCore",
        "fct-type": "function",
        "title": "runCore"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Parsing",
        "module": "Ideas.Common.Strategy.Parsing",
        "name": "runCore",
        "normalized": "Core a b-\u003eb-\u003e[b]",
        "package": "ideas",
        "partial": "Core",
        "signature": "Core l a-\u003ea-\u003e[a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Parsing.html#v:stack",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Parsing",
        "fct-package": "ideas",
        "fct-signature": "State l a -\u003e Stack l a",
        "fct-source": "src/Ideas-Common-Strategy-Parsing.html#stack",
        "fct-type": "function",
        "title": "stack"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Parsing",
        "module": "Ideas.Common.Strategy.Parsing",
        "name": "stack",
        "normalized": "State a b-\u003eStack a b",
        "package": "ideas",
        "partial": "",
        "signature": "State l a-\u003eStack l a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Parsing.html#v:trace",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Parsing",
        "fct-package": "ideas",
        "fct-signature": "State l a -\u003e [Step l a]",
        "fct-source": "src/Ideas-Common-Strategy-Parsing.html#trace",
        "fct-type": "function",
        "title": "trace"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Parsing",
        "module": "Ideas.Common.Strategy.Parsing",
        "name": "trace",
        "normalized": "State a b-\u003e[Step a b]",
        "package": "ideas",
        "partial": "",
        "signature": "State l a-\u003e[Step l a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Parsing.html#v:value",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Parsing",
        "fct-package": "ideas",
        "fct-signature": "State l a -\u003e a",
        "fct-source": "src/Ideas-Common-Strategy-Parsing.html#value",
        "fct-type": "function",
        "title": "value"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Parsing",
        "module": "Ideas.Common.Strategy.Parsing",
        "name": "value",
        "normalized": "State a b-\u003eb",
        "package": "ideas",
        "partial": "",
        "signature": "State l a-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Prefix.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eA prefix encodes a sequence of steps already performed (a so-called trace),\n and allows to continue the derivation at that particular point.\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "Ideas.Common.Strategy.Prefix",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Common-Strategy-Prefix.html",
        "fct-type": "module",
        "title": "Prefix"
      },
      "index": {
        "description": "prefix encodes sequence of steps already performed so-called trace and allows to continue the derivation at that particular point",
        "hierarchy": "Ideas Common Strategy Prefix",
        "module": "Ideas.Common.Strategy.Prefix",
        "name": "Prefix",
        "normalized": "",
        "package": "ideas",
        "partial": "Prefix",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Prefix.html#t:Prefix",
      "description": {
        "fct-descr": "\u003cp\u003eAbstract data type for a (labeled) strategy with a prefix (a sequence of\n executed rules). A prefix is still \u003ca\u003eaware\u003c/a\u003e of the labels that appear in the\n strategy. A prefix is encoded as a list of integers (and can be reconstructed\n from such a list: see \u003ccode\u003emakePrefix\u003c/code\u003e). The list is stored in reversed order.\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy.Prefix",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Common-Strategy-Prefix.html#Prefix",
        "fct-type": "data",
        "title": "Prefix"
      },
      "index": {
        "description": "Abstract data type for labeled strategy with prefix sequence of executed rules prefix is still aware of the labels that appear in the strategy prefix is encoded as list of integers and can be reconstructed from such list see makePrefix The list is stored in reversed order",
        "hierarchy": "Ideas Common Strategy Prefix",
        "module": "Ideas.Common.Strategy.Prefix",
        "name": "Prefix",
        "normalized": "",
        "package": "ideas",
        "partial": "Prefix",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Prefix.html#v:activeLabels",
      "description": {
        "fct-descr": "\u003cp\u003eCalculate the active labels\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy.Prefix",
        "fct-package": "ideas",
        "fct-signature": "Prefix a -\u003e [LabelInfo]",
        "fct-source": "src/Ideas-Common-Strategy-Prefix.html#activeLabels",
        "fct-type": "function",
        "title": "activeLabels"
      },
      "index": {
        "description": "Calculate the active labels",
        "hierarchy": "Ideas Common Strategy Prefix",
        "module": "Ideas.Common.Strategy.Prefix",
        "name": "activeLabels",
        "normalized": "Prefix a-\u003e[LabelInfo]",
        "package": "ideas",
        "partial": "Labels",
        "signature": "Prefix a-\u003e[LabelInfo]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Prefix.html#v:emptyPrefix",
      "description": {
        "fct-descr": "\u003cp\u003eConstruct the empty prefix for a labeled strategy\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy.Prefix",
        "fct-package": "ideas",
        "fct-signature": "LabeledStrategy a -\u003e Prefix a",
        "fct-source": "src/Ideas-Common-Strategy-Prefix.html#emptyPrefix",
        "fct-type": "function",
        "title": "emptyPrefix"
      },
      "index": {
        "description": "Construct the empty prefix for labeled strategy",
        "hierarchy": "Ideas Common Strategy Prefix",
        "module": "Ideas.Common.Strategy.Prefix",
        "name": "emptyPrefix",
        "normalized": "LabeledStrategy a-\u003ePrefix a",
        "package": "ideas",
        "partial": "Prefix",
        "signature": "LabeledStrategy a-\u003ePrefix a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Prefix.html#v:lastStepInPrefix",
      "description": {
        "fct-descr": "\u003cp\u003eReturns the last rule of a prefix (if such a rule exists)\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy.Prefix",
        "fct-package": "ideas",
        "fct-signature": "Prefix a -\u003e Maybe (Step LabelInfo a)",
        "fct-source": "src/Ideas-Common-Strategy-Prefix.html#lastStepInPrefix",
        "fct-type": "function",
        "title": "lastStepInPrefix"
      },
      "index": {
        "description": "Returns the last rule of prefix if such rule exists",
        "hierarchy": "Ideas Common Strategy Prefix",
        "module": "Ideas.Common.Strategy.Prefix",
        "name": "lastStepInPrefix",
        "normalized": "Prefix a-\u003eMaybe(Step LabelInfo a)",
        "package": "ideas",
        "partial": "Step In Prefix",
        "signature": "Prefix a-\u003eMaybe(Step LabelInfo a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Prefix.html#v:makePrefix",
      "description": {
        "fct-descr": "\u003cp\u003eConstruct a prefix for a given list of integers and a labeled strategy.\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy.Prefix",
        "fct-package": "ideas",
        "fct-signature": "[Int] -\u003e LabeledStrategy a -\u003e m (Prefix a)",
        "fct-source": "src/Ideas-Common-Strategy-Prefix.html#makePrefix",
        "fct-type": "function",
        "title": "makePrefix"
      },
      "index": {
        "description": "Construct prefix for given list of integers and labeled strategy",
        "hierarchy": "Ideas Common Strategy Prefix",
        "module": "Ideas.Common.Strategy.Prefix",
        "name": "makePrefix",
        "normalized": "[Int]-\u003eLabeledStrategy a-\u003eb(Prefix a)",
        "package": "ideas",
        "partial": "Prefix",
        "signature": "[Int]-\u003eLabeledStrategy a-\u003em(Prefix a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Prefix.html#v:prefixToSteps",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Prefix",
        "fct-package": "ideas",
        "fct-signature": "Prefix a -\u003e [Step LabelInfo a]",
        "fct-source": "src/Ideas-Common-Strategy-Prefix.html#prefixToSteps",
        "fct-type": "function",
        "title": "prefixToSteps"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Prefix",
        "module": "Ideas.Common.Strategy.Prefix",
        "name": "prefixToSteps",
        "normalized": "Prefix a-\u003e[Step LabelInfo a]",
        "package": "ideas",
        "partial": "To Steps",
        "signature": "Prefix a-\u003e[Step LabelInfo a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Prefix.html#v:prefixTree",
      "description": {
        "fct-descr": "\u003cp\u003eCreate a derivation tree with a \u003ca\u003eprefix\u003c/a\u003e as annotation.\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy.Prefix",
        "fct-package": "ideas",
        "fct-signature": "Bool -\u003e Prefix a -\u003e a -\u003e DerivationTree (Prefix a) a",
        "fct-source": "src/Ideas-Common-Strategy-Prefix.html#prefixTree",
        "fct-type": "function",
        "title": "prefixTree"
      },
      "index": {
        "description": "Create derivation tree with prefix as annotation",
        "hierarchy": "Ideas Common Strategy Prefix",
        "module": "Ideas.Common.Strategy.Prefix",
        "name": "prefixTree",
        "normalized": "Bool-\u003ePrefix a-\u003ea-\u003eDerivationTree(Prefix a)a",
        "package": "ideas",
        "partial": "Tree",
        "signature": "Bool-\u003ePrefix a-\u003ea-\u003eDerivationTree(Prefix a)a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Prefix.html#v:stepsToRules",
      "description": {
        "fct-descr": "\u003cp\u003eRetrieves the rules from a list of steps\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy.Prefix",
        "fct-package": "ideas",
        "fct-signature": "[Step l a] -\u003e [Rule a]",
        "fct-source": "src/Ideas-Common-Strategy-Prefix.html#stepsToRules",
        "fct-type": "function",
        "title": "stepsToRules"
      },
      "index": {
        "description": "Retrieves the rules from list of steps",
        "hierarchy": "Ideas Common Strategy Prefix",
        "module": "Ideas.Common.Strategy.Prefix",
        "name": "stepsToRules",
        "normalized": "[Step a b]-\u003e[Rule b]",
        "package": "ideas",
        "partial": "To Rules",
        "signature": "[Step l a]-\u003e[Rule a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Tests.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eTesting strategy combinator properties\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "Ideas.Common.Strategy.Tests",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Common-Strategy-Tests.html",
        "fct-type": "module",
        "title": "Tests"
      },
      "index": {
        "description": "Testing strategy combinator properties",
        "hierarchy": "Ideas Common Strategy Tests",
        "module": "Ideas.Common.Strategy.Tests",
        "name": "Tests",
        "normalized": "",
        "package": "ideas",
        "partial": "Tests",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Tests.html#v:tests",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Tests",
        "fct-package": "ideas",
        "fct-signature": "TestSuite",
        "fct-source": "src/Ideas-Common-Strategy-Tests.html#tests",
        "fct-type": "function",
        "title": "tests"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Tests",
        "module": "Ideas.Common.Strategy.Tests",
        "name": "tests",
        "normalized": "",
        "package": "ideas",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Traversal.html#",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Traversal",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Common-Strategy-Traversal.html",
        "fct-type": "module",
        "title": "Traversal"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Traversal",
        "module": "Ideas.Common.Strategy.Traversal",
        "name": "Traversal",
        "normalized": "",
        "package": "ideas",
        "partial": "Traversal",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Traversal.html#t:Option",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Traversal",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Common-Strategy-Traversal.html#Option",
        "fct-type": "data",
        "title": "Option"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Traversal",
        "module": "Ideas.Common.Strategy.Traversal",
        "name": "Option",
        "normalized": "",
        "package": "ideas",
        "partial": "Option",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Traversal.html#v:bottomup",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Traversal",
        "fct-package": "ideas",
        "fct-signature": "Option a",
        "fct-source": "src/Ideas-Common-Strategy-Traversal.html#bottomup",
        "fct-type": "function",
        "title": "bottomup"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Traversal",
        "module": "Ideas.Common.Strategy.Traversal",
        "name": "bottomup",
        "normalized": "",
        "package": "ideas",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Traversal.html#v:full",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Traversal",
        "fct-package": "ideas",
        "fct-signature": "Option a",
        "fct-source": "src/Ideas-Common-Strategy-Traversal.html#full",
        "fct-type": "function",
        "title": "full"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Traversal",
        "module": "Ideas.Common.Strategy.Traversal",
        "name": "full",
        "normalized": "",
        "package": "ideas",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Traversal.html#v:fullbu",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Traversal",
        "fct-package": "ideas",
        "fct-signature": "f a -\u003e Strategy a",
        "fct-source": "src/Ideas-Common-Strategy-Traversal.html#fullbu",
        "fct-type": "function",
        "title": "fullbu"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Traversal",
        "module": "Ideas.Common.Strategy.Traversal",
        "name": "fullbu",
        "normalized": "a b-\u003eStrategy b",
        "package": "ideas",
        "partial": "",
        "signature": "f a-\u003eStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Traversal.html#v:fulltd",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Traversal",
        "fct-package": "ideas",
        "fct-signature": "f a -\u003e Strategy a",
        "fct-source": "src/Ideas-Common-Strategy-Traversal.html#fulltd",
        "fct-type": "function",
        "title": "fulltd"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Traversal",
        "module": "Ideas.Common.Strategy.Traversal",
        "name": "fulltd",
        "normalized": "a b-\u003eStrategy b",
        "package": "ideas",
        "partial": "",
        "signature": "f a-\u003eStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Traversal.html#v:innermost",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Traversal",
        "fct-package": "ideas",
        "fct-signature": "f a -\u003e Strategy a",
        "fct-source": "src/Ideas-Common-Strategy-Traversal.html#innermost",
        "fct-type": "function",
        "title": "innermost"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Traversal",
        "module": "Ideas.Common.Strategy.Traversal",
        "name": "innermost",
        "normalized": "a b-\u003eStrategy b",
        "package": "ideas",
        "partial": "",
        "signature": "f a-\u003eStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Traversal.html#v:layer",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Traversal",
        "fct-package": "ideas",
        "fct-signature": "[Option a] -\u003e f a -\u003e Strategy a",
        "fct-source": "src/Ideas-Common-Strategy-Traversal.html#layer",
        "fct-type": "function",
        "title": "layer"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Traversal",
        "module": "Ideas.Common.Strategy.Traversal",
        "name": "layer",
        "normalized": "[Option a]-\u003eb a-\u003eStrategy a",
        "package": "ideas",
        "partial": "",
        "signature": "[Option a]-\u003ef a-\u003eStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Traversal.html#v:leftToRight",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Traversal",
        "fct-package": "ideas",
        "fct-signature": "Option a",
        "fct-source": "src/Ideas-Common-Strategy-Traversal.html#leftToRight",
        "fct-type": "function",
        "title": "leftToRight"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Traversal",
        "module": "Ideas.Common.Strategy.Traversal",
        "name": "leftToRight",
        "normalized": "",
        "package": "ideas",
        "partial": "To Right",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Traversal.html#v:once",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Traversal",
        "fct-package": "ideas",
        "fct-signature": "Option a",
        "fct-source": "src/Ideas-Common-Strategy-Traversal.html#once",
        "fct-type": "function",
        "title": "once"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Traversal",
        "module": "Ideas.Common.Strategy.Traversal",
        "name": "once",
        "normalized": "",
        "package": "ideas",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Traversal.html#v:oncebu",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Traversal",
        "fct-package": "ideas",
        "fct-signature": "f a -\u003e Strategy a",
        "fct-source": "src/Ideas-Common-Strategy-Traversal.html#oncebu",
        "fct-type": "function",
        "title": "oncebu"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Traversal",
        "module": "Ideas.Common.Strategy.Traversal",
        "name": "oncebu",
        "normalized": "a b-\u003eStrategy b",
        "package": "ideas",
        "partial": "",
        "signature": "f a-\u003eStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Traversal.html#v:oncetd",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Traversal",
        "fct-package": "ideas",
        "fct-signature": "f a -\u003e Strategy a",
        "fct-source": "src/Ideas-Common-Strategy-Traversal.html#oncetd",
        "fct-type": "function",
        "title": "oncetd"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Traversal",
        "module": "Ideas.Common.Strategy.Traversal",
        "name": "oncetd",
        "normalized": "a b-\u003eStrategy b",
        "package": "ideas",
        "partial": "",
        "signature": "f a-\u003eStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Traversal.html#v:outermost",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Traversal",
        "fct-package": "ideas",
        "fct-signature": "f a -\u003e Strategy a",
        "fct-source": "src/Ideas-Common-Strategy-Traversal.html#outermost",
        "fct-type": "function",
        "title": "outermost"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Traversal",
        "module": "Ideas.Common.Strategy.Traversal",
        "name": "outermost",
        "normalized": "a b-\u003eStrategy b",
        "package": "ideas",
        "partial": "",
        "signature": "f a-\u003eStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Traversal.html#v:parentFilter",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Traversal",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e [Int]) -\u003e Option a",
        "fct-source": "src/Ideas-Common-Strategy-Traversal.html#parentFilter",
        "fct-type": "function",
        "title": "parentFilter"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Traversal",
        "module": "Ideas.Common.Strategy.Traversal",
        "name": "parentFilter",
        "normalized": "(a-\u003e[Int])-\u003eOption a",
        "package": "ideas",
        "partial": "Filter",
        "signature": "(a-\u003e[Int])-\u003eOption a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Traversal.html#v:rightToLeft",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Traversal",
        "fct-package": "ideas",
        "fct-signature": "Option a",
        "fct-source": "src/Ideas-Common-Strategy-Traversal.html#rightToLeft",
        "fct-type": "function",
        "title": "rightToLeft"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Traversal",
        "module": "Ideas.Common.Strategy.Traversal",
        "name": "rightToLeft",
        "normalized": "",
        "package": "ideas",
        "partial": "To Left",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Traversal.html#v:somewhere",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Traversal",
        "fct-package": "ideas",
        "fct-signature": "f a -\u003e Strategy a",
        "fct-source": "src/Ideas-Common-Strategy-Traversal.html#somewhere",
        "fct-type": "function",
        "title": "somewhere"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Traversal",
        "module": "Ideas.Common.Strategy.Traversal",
        "name": "somewhere",
        "normalized": "a b-\u003eStrategy b",
        "package": "ideas",
        "partial": "",
        "signature": "f a-\u003eStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Traversal.html#v:spine",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Traversal",
        "fct-package": "ideas",
        "fct-signature": "Option a",
        "fct-source": "src/Ideas-Common-Strategy-Traversal.html#spine",
        "fct-type": "function",
        "title": "spine"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Traversal",
        "module": "Ideas.Common.Strategy.Traversal",
        "name": "spine",
        "normalized": "",
        "package": "ideas",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Traversal.html#v:stop",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Traversal",
        "fct-package": "ideas",
        "fct-signature": "Option a",
        "fct-source": "src/Ideas-Common-Strategy-Traversal.html#stop",
        "fct-type": "function",
        "title": "stop"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Traversal",
        "module": "Ideas.Common.Strategy.Traversal",
        "name": "stop",
        "normalized": "",
        "package": "ideas",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Traversal.html#v:topdown",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Traversal",
        "fct-package": "ideas",
        "fct-signature": "Option a",
        "fct-source": "src/Ideas-Common-Strategy-Traversal.html#topdown",
        "fct-type": "function",
        "title": "topdown"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Traversal",
        "module": "Ideas.Common.Strategy.Traversal",
        "name": "topdown",
        "normalized": "",
        "package": "ideas",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Traversal.html#v:traversalFilter",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Traversal",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e Bool) -\u003e Option a",
        "fct-source": "src/Ideas-Common-Strategy-Traversal.html#traversalFilter",
        "fct-type": "function",
        "title": "traversalFilter"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Traversal",
        "module": "Ideas.Common.Strategy.Traversal",
        "name": "traversalFilter",
        "normalized": "(a-\u003eBool)-\u003eOption a",
        "package": "ideas",
        "partial": "Filter",
        "signature": "(a-\u003eBool)-\u003eOption a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy-Traversal.html#v:traverse",
      "description": {
        "fct-module": "Ideas.Common.Strategy.Traversal",
        "fct-package": "ideas",
        "fct-signature": "[Option a] -\u003e f a -\u003e Strategy a",
        "fct-source": "src/Ideas-Common-Strategy-Traversal.html#traverse",
        "fct-type": "function",
        "title": "traverse"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy Traversal",
        "module": "Ideas.Common.Strategy.Traversal",
        "name": "traverse",
        "normalized": "[Option a]-\u003eb a-\u003eStrategy a",
        "package": "ideas",
        "partial": "",
        "signature": "[Option a]-\u003ef a-\u003eStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eA strategy is a context-free grammar with rules as symbols. Strategies can be\n labeled with strings. A type class is introduced to lift all the combinators\n that work on strategies, only to prevent that you have to insert these lifting\n functions yourself.\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "Ideas.Common.Strategy",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Common-Strategy.html",
        "fct-type": "module",
        "title": "Strategy"
      },
      "index": {
        "description": "strategy is context-free grammar with rules as symbols Strategies can be labeled with strings type class is introduced to lift all the combinators that work on strategies only to prevent that you have to insert these lifting functions yourself",
        "hierarchy": "Ideas Common Strategy",
        "module": "Ideas.Common.Strategy",
        "name": "Strategy",
        "normalized": "",
        "package": "ideas",
        "partial": "Strategy",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy.html#t:IsStrategy",
      "description": {
        "fct-descr": "\u003cp\u003eType class to turn values into strategies\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy",
        "fct-package": "ideas",
        "fct-signature": "class",
        "fct-source": "src/Ideas-Common-Strategy-Abstract.html#IsStrategy",
        "fct-type": "class",
        "title": "IsStrategy"
      },
      "index": {
        "description": "Type class to turn values into strategies",
        "hierarchy": "Ideas Common Strategy",
        "module": "Ideas.Common.Strategy",
        "name": "IsStrategy",
        "normalized": "",
        "package": "ideas",
        "partial": "Is Strategy",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy.html#t:LabeledStrategy",
      "description": {
        "fct-descr": "\u003cp\u003eA strategy which is labeled with a string\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Common-Strategy-Abstract.html#LabeledStrategy",
        "fct-type": "data",
        "title": "LabeledStrategy"
      },
      "index": {
        "description": "strategy which is labeled with string",
        "hierarchy": "Ideas Common Strategy",
        "module": "Ideas.Common.Strategy",
        "name": "LabeledStrategy",
        "normalized": "",
        "package": "ideas",
        "partial": "Labeled Strategy",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy.html#t:Prefix",
      "description": {
        "fct-descr": "\u003cp\u003eAbstract data type for a (labeled) strategy with a prefix (a sequence of\n executed rules). A prefix is still \u003ca\u003eaware\u003c/a\u003e of the labels that appear in the\n strategy. A prefix is encoded as a list of integers (and can be reconstructed\n from such a list: see \u003ccode\u003emakePrefix\u003c/code\u003e). The list is stored in reversed order.\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Common-Strategy-Prefix.html#Prefix",
        "fct-type": "data",
        "title": "Prefix"
      },
      "index": {
        "description": "Abstract data type for labeled strategy with prefix sequence of executed rules prefix is still aware of the labels that appear in the strategy prefix is encoded as list of integers and can be reconstructed from such list see makePrefix The list is stored in reversed order",
        "hierarchy": "Ideas Common Strategy",
        "module": "Ideas.Common.Strategy",
        "name": "Prefix",
        "normalized": "",
        "package": "ideas",
        "partial": "Prefix",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy.html#t:Step",
      "description": {
        "fct-module": "Ideas.Common.Strategy",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Common-Strategy-Parsing.html#Step",
        "fct-type": "data",
        "title": "Step"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy",
        "module": "Ideas.Common.Strategy",
        "name": "Step",
        "normalized": "",
        "package": "ideas",
        "partial": "Step",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy.html#t:Strategy",
      "description": {
        "fct-descr": "\u003cp\u003eAbstract data type for strategies\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Common-Strategy-Abstract.html#Strategy",
        "fct-type": "data",
        "title": "Strategy"
      },
      "index": {
        "description": "Abstract data type for strategies",
        "hierarchy": "Ideas Common Strategy",
        "module": "Ideas.Common.Strategy",
        "name": "Strategy",
        "normalized": "",
        "package": "ideas",
        "partial": "Strategy",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy.html#v:-124--62-",
      "description": {
        "fct-descr": "\u003cp\u003eLeft-biased choice: if the left-operand strategy can be applied, do so. Otherwise,\n   try the right-operand strategy\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy",
        "fct-package": "ideas",
        "fct-signature": "f a -\u003e g a -\u003e Strategy a",
        "fct-source": "src/Ideas-Common-Strategy-Combinators.html#%7C%3E",
        "fct-type": "function",
        "title": "(|\u003e)"
      },
      "index": {
        "description": "Left-biased choice if the left-operand strategy can be applied do so Otherwise try the right-operand strategy",
        "hierarchy": "Ideas Common Strategy",
        "module": "Ideas.Common.Strategy",
        "name": "(|\u003e) |\u003e",
        "normalized": "a b-\u003ec b-\u003eStrategy b",
        "package": "ideas",
        "partial": "",
        "signature": "f a-\u003eg a-\u003eStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy.html#v:-60--124--62-",
      "description": {
        "fct-descr": "\u003cp\u003eChoose between the two strategies (either do this or do that)\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy",
        "fct-package": "ideas",
        "fct-signature": "f a -\u003e g a -\u003e Strategy a",
        "fct-source": "src/Ideas-Common-Strategy-Combinators.html#%3C%7C%3E",
        "fct-type": "function",
        "title": "(\u003c|\u003e)"
      },
      "index": {
        "description": "Choose between the two strategies either do this or do that",
        "hierarchy": "Ideas Common Strategy",
        "module": "Ideas.Common.Strategy",
        "name": "(\u003c|\u003e) \u003c|\u003e",
        "normalized": "a b-\u003ec b-\u003eStrategy b",
        "package": "ideas",
        "partial": "",
        "signature": "f a-\u003eg a-\u003eStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy.html#v:-60--37--62-",
      "description": {
        "fct-descr": "\u003cp\u003eInterleave two strategies\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy",
        "fct-package": "ideas",
        "fct-signature": "f a -\u003e g a -\u003e Strategy a",
        "fct-source": "src/Ideas-Common-Strategy-Combinators.html#%3C%25%3E",
        "fct-type": "function",
        "title": "(\u003c%\u003e)"
      },
      "index": {
        "description": "Interleave two strategies",
        "hierarchy": "Ideas Common Strategy",
        "module": "Ideas.Common.Strategy",
        "name": "(\u003c%\u003e) \u003c%\u003e",
        "normalized": "a b-\u003ec b-\u003eStrategy b",
        "package": "ideas",
        "partial": "",
        "signature": "f a-\u003eg a-\u003eStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy.html#v:-60--42--62-",
      "description": {
        "fct-descr": "\u003cp\u003ePut two strategies in sequence (first do this, then do that)\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy",
        "fct-package": "ideas",
        "fct-signature": "f a -\u003e g a -\u003e Strategy a",
        "fct-source": "src/Ideas-Common-Strategy-Combinators.html#%3C%2A%3E",
        "fct-type": "function",
        "title": "(\u003c*\u003e)"
      },
      "index": {
        "description": "Put two strategies in sequence first do this then do that",
        "hierarchy": "Ideas Common Strategy",
        "module": "Ideas.Common.Strategy",
        "name": "(\u003c*\u003e) \u003c*\u003e",
        "normalized": "a b-\u003ec b-\u003eStrategy b",
        "package": "ideas",
        "partial": "",
        "signature": "f a-\u003eg a-\u003eStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy.html#v:Enter",
      "description": {
        "fct-module": "Ideas.Common.Strategy",
        "fct-package": "ideas",
        "fct-signature": "Enter l",
        "fct-source": "src/Ideas-Common-Strategy-Parsing.html#Step",
        "fct-type": "function",
        "title": "Enter"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy",
        "module": "Ideas.Common.Strategy",
        "name": "Enter",
        "normalized": "",
        "package": "ideas",
        "partial": "Enter",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy.html#v:Exit",
      "description": {
        "fct-module": "Ideas.Common.Strategy",
        "fct-package": "ideas",
        "fct-signature": "Exit l",
        "fct-source": "src/Ideas-Common-Strategy-Parsing.html#Step",
        "fct-type": "function",
        "title": "Exit"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy",
        "module": "Ideas.Common.Strategy",
        "name": "Exit",
        "normalized": "",
        "package": "ideas",
        "partial": "Exit",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy.html#v:RuleStep",
      "description": {
        "fct-module": "Ideas.Common.Strategy",
        "fct-package": "ideas",
        "fct-signature": "RuleStep Environment (Rule a)",
        "fct-source": "src/Ideas-Common-Strategy-Parsing.html#Step",
        "fct-type": "function",
        "title": "RuleStep"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy",
        "module": "Ideas.Common.Strategy",
        "name": "RuleStep",
        "normalized": "",
        "package": "ideas",
        "partial": "Rule Step",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy.html#v:alternatives",
      "description": {
        "fct-descr": "\u003cp\u003eCombines a list of alternative strategies\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy",
        "fct-package": "ideas",
        "fct-signature": "[f a] -\u003e Strategy a",
        "fct-source": "src/Ideas-Common-Strategy-Combinators.html#alternatives",
        "fct-type": "function",
        "title": "alternatives"
      },
      "index": {
        "description": "Combines list of alternative strategies",
        "hierarchy": "Ideas Common Strategy",
        "module": "Ideas.Common.Strategy",
        "name": "alternatives",
        "normalized": "[a b]-\u003eStrategy b",
        "package": "ideas",
        "partial": "",
        "signature": "[f a]-\u003eStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy.html#v:atomic",
      "description": {
        "fct-descr": "\u003cp\u003eMakes a strategy atomic (w.r.t. parallel composition)\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy",
        "fct-package": "ideas",
        "fct-signature": "f a -\u003e Strategy a",
        "fct-source": "src/Ideas-Common-Strategy-Combinators.html#atomic",
        "fct-type": "function",
        "title": "atomic"
      },
      "index": {
        "description": "Makes strategy atomic w.r.t parallel composition",
        "hierarchy": "Ideas Common Strategy",
        "module": "Ideas.Common.Strategy",
        "name": "atomic",
        "normalized": "a b-\u003eStrategy b",
        "package": "ideas",
        "partial": "",
        "signature": "f a-\u003eStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy.html#v:check",
      "description": {
        "fct-descr": "\u003cp\u003eChecks whether a predicate holds for the current term. The\n   check is considered to be a minor step.\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e Bool) -\u003e Strategy a",
        "fct-source": "src/Ideas-Common-Strategy-Combinators.html#check",
        "fct-type": "function",
        "title": "check"
      },
      "index": {
        "description": "Checks whether predicate holds for the current term The check is considered to be minor step",
        "hierarchy": "Ideas Common Strategy",
        "module": "Ideas.Common.Strategy",
        "name": "check",
        "normalized": "(a-\u003eBool)-\u003eStrategy a",
        "package": "ideas",
        "partial": "",
        "signature": "(a-\u003eBool)-\u003eStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy.html#v:cleanUpStrategy",
      "description": {
        "fct-descr": "\u003cp\u003eUse a function as do-after hook for all rules in a labeled strategy, but\n also use the function beforehand\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e a) -\u003e LabeledStrategy a -\u003e LabeledStrategy a",
        "fct-source": "src/Ideas-Common-Strategy-Abstract.html#cleanUpStrategy",
        "fct-type": "function",
        "title": "cleanUpStrategy"
      },
      "index": {
        "description": "Use function as do-after hook for all rules in labeled strategy but also use the function beforehand",
        "hierarchy": "Ideas Common Strategy",
        "module": "Ideas.Common.Strategy",
        "name": "cleanUpStrategy",
        "normalized": "(a-\u003ea)-\u003eLabeledStrategy a-\u003eLabeledStrategy a",
        "package": "ideas",
        "partial": "Up Strategy",
        "signature": "(a-\u003ea)-\u003eLabeledStrategy a-\u003eLabeledStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy.html#v:cleanUpStrategyAfter",
      "description": {
        "fct-descr": "\u003cp\u003eUse a function as do-after hook for all rules in a labeled strategy\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e a) -\u003e LabeledStrategy a -\u003e LabeledStrategy a",
        "fct-source": "src/Ideas-Common-Strategy-Abstract.html#cleanUpStrategyAfter",
        "fct-type": "function",
        "title": "cleanUpStrategyAfter"
      },
      "index": {
        "description": "Use function as do-after hook for all rules in labeled strategy",
        "hierarchy": "Ideas Common Strategy",
        "module": "Ideas.Common.Strategy",
        "name": "cleanUpStrategyAfter",
        "normalized": "(a-\u003ea)-\u003eLabeledStrategy a-\u003eLabeledStrategy a",
        "package": "ideas",
        "partial": "Up Strategy After",
        "signature": "(a-\u003ea)-\u003eLabeledStrategy a-\u003eLabeledStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy.html#v:derivationTree",
      "description": {
        "fct-descr": "\u003cp\u003eReturns the derivation tree for a strategy and a term with only major rules\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy",
        "fct-package": "ideas",
        "fct-signature": "Bool -\u003e f a -\u003e a -\u003e DerivationTree (Rule a, Environment) a",
        "fct-source": "src/Ideas-Common-Strategy-Abstract.html#derivationTree",
        "fct-type": "function",
        "title": "derivationTree"
      },
      "index": {
        "description": "Returns the derivation tree for strategy and term with only major rules",
        "hierarchy": "Ideas Common Strategy",
        "module": "Ideas.Common.Strategy",
        "name": "derivationTree",
        "normalized": "Bool-\u003ea b-\u003eb-\u003eDerivationTree(Rule b,Environment)b",
        "package": "ideas",
        "partial": "Tree",
        "signature": "Bool-\u003ef a-\u003ea-\u003eDerivationTree(Rule a,Environment)a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy.html#v:emptyPrefix",
      "description": {
        "fct-descr": "\u003cp\u003eConstruct the empty prefix for a labeled strategy\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy",
        "fct-package": "ideas",
        "fct-signature": "LabeledStrategy a -\u003e Prefix a",
        "fct-source": "src/Ideas-Common-Strategy-Prefix.html#emptyPrefix",
        "fct-type": "function",
        "title": "emptyPrefix"
      },
      "index": {
        "description": "Construct the empty prefix for labeled strategy",
        "hierarchy": "Ideas Common Strategy",
        "module": "Ideas.Common.Strategy",
        "name": "emptyPrefix",
        "normalized": "LabeledStrategy a-\u003ePrefix a",
        "package": "ideas",
        "partial": "Prefix",
        "signature": "LabeledStrategy a-\u003ePrefix a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy.html#v:exhaustive",
      "description": {
        "fct-descr": "\u003cp\u003eApply the strategies from the list exhaustively (until this is no longer possible)\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy",
        "fct-package": "ideas",
        "fct-signature": "[f a] -\u003e Strategy a",
        "fct-source": "src/Ideas-Common-Strategy-Combinators.html#exhaustive",
        "fct-type": "function",
        "title": "exhaustive"
      },
      "index": {
        "description": "Apply the strategies from the list exhaustively until this is no longer possible",
        "hierarchy": "Ideas Common Strategy",
        "module": "Ideas.Common.Strategy",
        "name": "exhaustive",
        "normalized": "[a b]-\u003eStrategy b",
        "package": "ideas",
        "partial": "",
        "signature": "[f a]-\u003eStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy.html#v:fail",
      "description": {
        "fct-descr": "\u003cp\u003eThe strategy that always fails\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy",
        "fct-package": "ideas",
        "fct-signature": "Strategy a",
        "fct-source": "src/Ideas-Common-Strategy-Combinators.html#fail",
        "fct-type": "function",
        "title": "fail"
      },
      "index": {
        "description": "The strategy that always fails",
        "hierarchy": "Ideas Common Strategy",
        "module": "Ideas.Common.Strategy",
        "name": "fail",
        "normalized": "",
        "package": "ideas",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy.html#v:fix",
      "description": {
        "fct-descr": "\u003cp\u003eA fix-point combinator on strategies (to model recursion). Powerful\n (but dangerous) combinator\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy",
        "fct-package": "ideas",
        "fct-signature": "(Strategy a -\u003e Strategy a) -\u003e Strategy a",
        "fct-source": "src/Ideas-Common-Strategy-Combinators.html#fix",
        "fct-type": "function",
        "title": "fix"
      },
      "index": {
        "description": "fix-point combinator on strategies to model recursion Powerful but dangerous combinator",
        "hierarchy": "Ideas Common Strategy",
        "module": "Ideas.Common.Strategy",
        "name": "fix",
        "normalized": "(Strategy a-\u003eStrategy a)-\u003eStrategy a",
        "package": "ideas",
        "partial": "",
        "signature": "(Strategy a-\u003eStrategy a)-\u003eStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy.html#v:fullDerivationTree",
      "description": {
        "fct-descr": "\u003cp\u003eReturns the derivation tree for a strategy and a term, including all\n minor rules\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy",
        "fct-package": "ideas",
        "fct-signature": "Bool -\u003e f a -\u003e a -\u003e DerivationTree (Step LabelInfo a) a",
        "fct-source": "src/Ideas-Common-Strategy-Abstract.html#fullDerivationTree",
        "fct-type": "function",
        "title": "fullDerivationTree"
      },
      "index": {
        "description": "Returns the derivation tree for strategy and term including all minor rules",
        "hierarchy": "Ideas Common Strategy",
        "module": "Ideas.Common.Strategy",
        "name": "fullDerivationTree",
        "normalized": "Bool-\u003ea b-\u003eb-\u003eDerivationTree(Step LabelInfo b)b",
        "package": "ideas",
        "partial": "Derivation Tree",
        "signature": "Bool-\u003ef a-\u003ea-\u003eDerivationTree(Step LabelInfo a)a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy.html#v:interleave",
      "description": {
        "fct-descr": "\u003cp\u003eMerges a list of strategies (in parallel)\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy",
        "fct-package": "ideas",
        "fct-signature": "[f a] -\u003e Strategy a",
        "fct-source": "src/Ideas-Common-Strategy-Combinators.html#interleave",
        "fct-type": "function",
        "title": "interleave"
      },
      "index": {
        "description": "Merges list of strategies in parallel",
        "hierarchy": "Ideas Common Strategy",
        "module": "Ideas.Common.Strategy",
        "name": "interleave",
        "normalized": "[a b]-\u003eStrategy b",
        "package": "ideas",
        "partial": "",
        "signature": "[f a]-\u003eStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy.html#v:label",
      "description": {
        "fct-descr": "\u003cp\u003eLabels a strategy with a string\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy",
        "fct-package": "ideas",
        "fct-signature": "l -\u003e f a -\u003e LabeledStrategy a",
        "fct-source": "src/Ideas-Common-Strategy-Abstract.html#label",
        "fct-type": "function",
        "title": "label"
      },
      "index": {
        "description": "Labels strategy with string",
        "hierarchy": "Ideas Common Strategy",
        "module": "Ideas.Common.Strategy",
        "name": "label",
        "normalized": "a-\u003eb c-\u003eLabeledStrategy c",
        "package": "ideas",
        "partial": "",
        "signature": "l-\u003ef a-\u003eLabeledStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy.html#v:lastStepInPrefix",
      "description": {
        "fct-descr": "\u003cp\u003eReturns the last rule of a prefix (if such a rule exists)\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy",
        "fct-package": "ideas",
        "fct-signature": "Prefix a -\u003e Maybe (Step LabelInfo a)",
        "fct-source": "src/Ideas-Common-Strategy-Prefix.html#lastStepInPrefix",
        "fct-type": "function",
        "title": "lastStepInPrefix"
      },
      "index": {
        "description": "Returns the last rule of prefix if such rule exists",
        "hierarchy": "Ideas Common Strategy",
        "module": "Ideas.Common.Strategy",
        "name": "lastStepInPrefix",
        "normalized": "Prefix a-\u003eMaybe(Step LabelInfo a)",
        "package": "ideas",
        "partial": "Step In Prefix",
        "signature": "Prefix a-\u003eMaybe(Step LabelInfo a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy.html#v:makePrefix",
      "description": {
        "fct-descr": "\u003cp\u003eConstruct a prefix for a given list of integers and a labeled strategy.\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy",
        "fct-package": "ideas",
        "fct-signature": "[Int] -\u003e LabeledStrategy a -\u003e m (Prefix a)",
        "fct-source": "src/Ideas-Common-Strategy-Prefix.html#makePrefix",
        "fct-type": "function",
        "title": "makePrefix"
      },
      "index": {
        "description": "Construct prefix for given list of integers and labeled strategy",
        "hierarchy": "Ideas Common Strategy",
        "module": "Ideas.Common.Strategy",
        "name": "makePrefix",
        "normalized": "[Int]-\u003eLabeledStrategy a-\u003eb(Prefix a)",
        "package": "ideas",
        "partial": "Prefix",
        "signature": "[Int]-\u003eLabeledStrategy a-\u003em(Prefix a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy.html#v:many",
      "description": {
        "fct-descr": "\u003cp\u003eRepeat a strategy zero or more times (non-greedy)\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy",
        "fct-package": "ideas",
        "fct-signature": "f a -\u003e Strategy a",
        "fct-source": "src/Ideas-Common-Strategy-Combinators.html#many",
        "fct-type": "function",
        "title": "many"
      },
      "index": {
        "description": "Repeat strategy zero or more times non-greedy",
        "hierarchy": "Ideas Common Strategy",
        "module": "Ideas.Common.Strategy",
        "name": "many",
        "normalized": "a b-\u003eStrategy b",
        "package": "ideas",
        "partial": "",
        "signature": "f a-\u003eStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy.html#v:many1",
      "description": {
        "fct-descr": "\u003cp\u003eApply a certain strategy at least once (non-greedy)\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy",
        "fct-package": "ideas",
        "fct-signature": "f a -\u003e Strategy a",
        "fct-source": "src/Ideas-Common-Strategy-Combinators.html#many1",
        "fct-type": "function",
        "title": "many1"
      },
      "index": {
        "description": "Apply certain strategy at least once non-greedy",
        "hierarchy": "Ideas Common Strategy",
        "module": "Ideas.Common.Strategy",
        "name": "many1",
        "normalized": "a b-\u003eStrategy b",
        "package": "ideas",
        "partial": "",
        "signature": "f a-\u003eStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy.html#v:multi",
      "description": {
        "fct-descr": "\u003cp\u003eApply a strategy at least once, but collapse into a single step\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy",
        "fct-package": "ideas",
        "fct-signature": "l -\u003e f a -\u003e LabeledStrategy a",
        "fct-source": "src/Ideas-Common-Strategy-Combinators.html#multi",
        "fct-type": "function",
        "title": "multi"
      },
      "index": {
        "description": "Apply strategy at least once but collapse into single step",
        "hierarchy": "Ideas Common Strategy",
        "module": "Ideas.Common.Strategy",
        "name": "multi",
        "normalized": "a-\u003eb c-\u003eLabeledStrategy c",
        "package": "ideas",
        "partial": "",
        "signature": "l-\u003ef a-\u003eLabeledStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy.html#v:nextTaskLocation",
      "description": {
        "fct-module": "Ideas.Common.Strategy",
        "fct-package": "ideas",
        "fct-signature": "LabeledStrategy a -\u003e Id -\u003e Id -\u003e Id",
        "fct-source": "src/Ideas-Common-Strategy-Location.html#nextTaskLocation",
        "fct-type": "function",
        "title": "nextTaskLocation"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy",
        "module": "Ideas.Common.Strategy",
        "name": "nextTaskLocation",
        "normalized": "LabeledStrategy a-\u003eId-\u003eId-\u003eId",
        "package": "ideas",
        "partial": "Task Location",
        "signature": "LabeledStrategy a-\u003eId-\u003eId-\u003eId"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy.html#v:not",
      "description": {
        "fct-descr": "\u003cp\u003eCheck whether or not the argument strategy cannot be applied: the result\n   strategy only succeeds if this is not the case (otherwise it fails).\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy",
        "fct-package": "ideas",
        "fct-signature": "f a -\u003e Strategy a",
        "fct-source": "src/Ideas-Common-Strategy-Combinators.html#not",
        "fct-type": "function",
        "title": "not"
      },
      "index": {
        "description": "Check whether or not the argument strategy cannot be applied the result strategy only succeeds if this is not the case otherwise it fails",
        "hierarchy": "Ideas Common Strategy",
        "module": "Ideas.Common.Strategy",
        "name": "not",
        "normalized": "a b-\u003eStrategy b",
        "package": "ideas",
        "partial": "",
        "signature": "f a-\u003eStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy.html#v:option",
      "description": {
        "fct-descr": "\u003cp\u003eApply a certain strategy or do nothing (non-greedy)\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy",
        "fct-package": "ideas",
        "fct-signature": "f a -\u003e Strategy a",
        "fct-source": "src/Ideas-Common-Strategy-Combinators.html#option",
        "fct-type": "function",
        "title": "option"
      },
      "index": {
        "description": "Apply certain strategy or do nothing non-greedy",
        "hierarchy": "Ideas Common Strategy",
        "module": "Ideas.Common.Strategy",
        "name": "option",
        "normalized": "a b-\u003eStrategy b",
        "package": "ideas",
        "partial": "",
        "signature": "f a-\u003eStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy.html#v:permute",
      "description": {
        "fct-descr": "\u003cp\u003eAllows all permutations of the list\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy",
        "fct-package": "ideas",
        "fct-signature": "[f a] -\u003e Strategy a",
        "fct-source": "src/Ideas-Common-Strategy-Combinators.html#permute",
        "fct-type": "function",
        "title": "permute"
      },
      "index": {
        "description": "Allows all permutations of the list",
        "hierarchy": "Ideas Common Strategy",
        "module": "Ideas.Common.Strategy",
        "name": "permute",
        "normalized": "[a b]-\u003eStrategy b",
        "package": "ideas",
        "partial": "",
        "signature": "[f a]-\u003eStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy.html#v:prefixToSteps",
      "description": {
        "fct-module": "Ideas.Common.Strategy",
        "fct-package": "ideas",
        "fct-signature": "Prefix a -\u003e [Step LabelInfo a]",
        "fct-source": "src/Ideas-Common-Strategy-Prefix.html#prefixToSteps",
        "fct-type": "function",
        "title": "prefixToSteps"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy",
        "module": "Ideas.Common.Strategy",
        "name": "prefixToSteps",
        "normalized": "Prefix a-\u003e[Step LabelInfo a]",
        "package": "ideas",
        "partial": "To Steps",
        "signature": "Prefix a-\u003e[Step LabelInfo a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy.html#v:prefixTree",
      "description": {
        "fct-descr": "\u003cp\u003eCreate a derivation tree with a \u003ca\u003eprefix\u003c/a\u003e as annotation.\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy",
        "fct-package": "ideas",
        "fct-signature": "Bool -\u003e Prefix a -\u003e a -\u003e DerivationTree (Prefix a) a",
        "fct-source": "src/Ideas-Common-Strategy-Prefix.html#prefixTree",
        "fct-type": "function",
        "title": "prefixTree"
      },
      "index": {
        "description": "Create derivation tree with prefix as annotation",
        "hierarchy": "Ideas Common Strategy",
        "module": "Ideas.Common.Strategy",
        "name": "prefixTree",
        "normalized": "Bool-\u003ePrefix a-\u003ea-\u003eDerivationTree(Prefix a)a",
        "package": "ideas",
        "partial": "Tree",
        "signature": "Bool-\u003ePrefix a-\u003ea-\u003eDerivationTree(Prefix a)a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy.html#v:repeat",
      "description": {
        "fct-descr": "\u003cp\u003eRepeat a strategy zero or more times (greedy version of \u003ccode\u003e\u003ca\u003emany\u003c/a\u003e\u003c/code\u003e)\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy",
        "fct-package": "ideas",
        "fct-signature": "f a -\u003e Strategy a",
        "fct-source": "src/Ideas-Common-Strategy-Combinators.html#repeat",
        "fct-type": "function",
        "title": "repeat"
      },
      "index": {
        "description": "Repeat strategy zero or more times greedy version of many",
        "hierarchy": "Ideas Common Strategy",
        "module": "Ideas.Common.Strategy",
        "name": "repeat",
        "normalized": "a b-\u003eStrategy b",
        "package": "ideas",
        "partial": "",
        "signature": "f a-\u003eStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy.html#v:repeat1",
      "description": {
        "fct-descr": "\u003cp\u003eApply a certain strategy at least once (greedy version of \u003ccode\u003e\u003ca\u003emany1\u003c/a\u003e\u003c/code\u003e)\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy",
        "fct-package": "ideas",
        "fct-signature": "f a -\u003e Strategy a",
        "fct-source": "src/Ideas-Common-Strategy-Combinators.html#repeat1",
        "fct-type": "function",
        "title": "repeat1"
      },
      "index": {
        "description": "Apply certain strategy at least once greedy version of many1",
        "hierarchy": "Ideas Common Strategy",
        "module": "Ideas.Common.Strategy",
        "name": "repeat1",
        "normalized": "a b-\u003eStrategy b",
        "package": "ideas",
        "partial": "",
        "signature": "f a-\u003eStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy.html#v:replicate",
      "description": {
        "fct-descr": "\u003cp\u003eApply a strategy a certain number of times\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy",
        "fct-package": "ideas",
        "fct-signature": "Int -\u003e f a -\u003e Strategy a",
        "fct-source": "src/Ideas-Common-Strategy-Combinators.html#replicate",
        "fct-type": "function",
        "title": "replicate"
      },
      "index": {
        "description": "Apply strategy certain number of times",
        "hierarchy": "Ideas Common Strategy",
        "module": "Ideas.Common.Strategy",
        "name": "replicate",
        "normalized": "Int-\u003ea b-\u003eStrategy b",
        "package": "ideas",
        "partial": "",
        "signature": "Int-\u003ef a-\u003eStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy.html#v:rulesInStrategy",
      "description": {
        "fct-descr": "\u003cp\u003eReturns a list of all major rules that are part of a labeled strategy\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy",
        "fct-package": "ideas",
        "fct-signature": "f a -\u003e [Rule a]",
        "fct-source": "src/Ideas-Common-Strategy-Abstract.html#rulesInStrategy",
        "fct-type": "function",
        "title": "rulesInStrategy"
      },
      "index": {
        "description": "Returns list of all major rules that are part of labeled strategy",
        "hierarchy": "Ideas Common Strategy",
        "module": "Ideas.Common.Strategy",
        "name": "rulesInStrategy",
        "normalized": "a b-\u003e[Rule b]",
        "package": "ideas",
        "partial": "In Strategy",
        "signature": "f a-\u003e[Rule a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy.html#v:sequence",
      "description": {
        "fct-descr": "\u003cp\u003ePuts a list of strategies into a sequence\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy",
        "fct-package": "ideas",
        "fct-signature": "[f a] -\u003e Strategy a",
        "fct-source": "src/Ideas-Common-Strategy-Combinators.html#sequence",
        "fct-type": "function",
        "title": "sequence"
      },
      "index": {
        "description": "Puts list of strategies into sequence",
        "hierarchy": "Ideas Common Strategy",
        "module": "Ideas.Common.Strategy",
        "name": "sequence",
        "normalized": "[a b]-\u003eStrategy b",
        "package": "ideas",
        "partial": "",
        "signature": "[f a]-\u003eStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy.html#v:stepsToRules",
      "description": {
        "fct-descr": "\u003cp\u003eRetrieves the rules from a list of steps\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy",
        "fct-package": "ideas",
        "fct-signature": "[Step l a] -\u003e [Rule a]",
        "fct-source": "src/Ideas-Common-Strategy-Prefix.html#stepsToRules",
        "fct-type": "function",
        "title": "stepsToRules"
      },
      "index": {
        "description": "Retrieves the rules from list of steps",
        "hierarchy": "Ideas Common Strategy",
        "module": "Ideas.Common.Strategy",
        "name": "stepsToRules",
        "normalized": "[Step a b]-\u003e[Rule b]",
        "package": "ideas",
        "partial": "To Rules",
        "signature": "[Step l a]-\u003e[Rule a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy.html#v:strategyLocations",
      "description": {
        "fct-descr": "\u003cp\u003eReturns a list of all strategy locations, paired with the labeled\n substrategy at that location\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy",
        "fct-package": "ideas",
        "fct-signature": "LabeledStrategy a -\u003e [([Int], LabeledStrategy a)]",
        "fct-source": "src/Ideas-Common-Strategy-Location.html#strategyLocations",
        "fct-type": "function",
        "title": "strategyLocations"
      },
      "index": {
        "description": "Returns list of all strategy locations paired with the labeled substrategy at that location",
        "hierarchy": "Ideas Common Strategy",
        "module": "Ideas.Common.Strategy",
        "name": "strategyLocations",
        "normalized": "LabeledStrategy a-\u003e[([Int],LabeledStrategy a)]",
        "package": "ideas",
        "partial": "Locations",
        "signature": "LabeledStrategy a-\u003e[([Int],LabeledStrategy a)]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy.html#v:subStrategy",
      "description": {
        "fct-descr": "\u003cp\u003eReturns the substrategy or rule at a strategy location. Nothing\n indicates that the location is invalid\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy",
        "fct-package": "ideas",
        "fct-signature": "Id -\u003e LabeledStrategy a -\u003e Maybe (LabeledStrategy a)",
        "fct-source": "src/Ideas-Common-Strategy-Location.html#subStrategy",
        "fct-type": "function",
        "title": "subStrategy"
      },
      "index": {
        "description": "Returns the substrategy or rule at strategy location Nothing indicates that the location is invalid",
        "hierarchy": "Ideas Common Strategy",
        "module": "Ideas.Common.Strategy",
        "name": "subStrategy",
        "normalized": "Id-\u003eLabeledStrategy a-\u003eMaybe(LabeledStrategy a)",
        "package": "ideas",
        "partial": "Strategy",
        "signature": "Id-\u003eLabeledStrategy a-\u003eMaybe(LabeledStrategy a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy.html#v:subTaskLocation",
      "description": {
        "fct-module": "Ideas.Common.Strategy",
        "fct-package": "ideas",
        "fct-signature": "LabeledStrategy a -\u003e Id -\u003e Id -\u003e Id",
        "fct-source": "src/Ideas-Common-Strategy-Location.html#subTaskLocation",
        "fct-type": "function",
        "title": "subTaskLocation"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy",
        "module": "Ideas.Common.Strategy",
        "name": "subTaskLocation",
        "normalized": "LabeledStrategy a-\u003eId-\u003eId-\u003eId",
        "package": "ideas",
        "partial": "Task Location",
        "signature": "LabeledStrategy a-\u003eId-\u003eId-\u003eId"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy.html#v:succeed",
      "description": {
        "fct-descr": "\u003cp\u003eThe strategy that always succeeds (without doing anything)\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy",
        "fct-package": "ideas",
        "fct-signature": "Strategy a",
        "fct-source": "src/Ideas-Common-Strategy-Combinators.html#succeed",
        "fct-type": "function",
        "title": "succeed"
      },
      "index": {
        "description": "The strategy that always succeeds without doing anything",
        "hierarchy": "Ideas Common Strategy",
        "module": "Ideas.Common.Strategy",
        "name": "succeed",
        "normalized": "",
        "package": "ideas",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy.html#v:toStrategy",
      "description": {
        "fct-module": "Ideas.Common.Strategy",
        "fct-package": "ideas",
        "fct-signature": "f a -\u003e Strategy a",
        "fct-source": "src/Ideas-Common-Strategy-Abstract.html#toStrategy",
        "fct-type": "method",
        "title": "toStrategy"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Strategy",
        "module": "Ideas.Common.Strategy",
        "name": "toStrategy",
        "normalized": "a b-\u003eStrategy b",
        "package": "ideas",
        "partial": "Strategy",
        "signature": "f a-\u003eStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy.html#v:try",
      "description": {
        "fct-descr": "\u003cp\u003eApply a certain strategy if this is possible (greedy version of \u003ccode\u003e\u003ca\u003eoption\u003c/a\u003e\u003c/code\u003e)\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy",
        "fct-package": "ideas",
        "fct-signature": "f a -\u003e Strategy a",
        "fct-source": "src/Ideas-Common-Strategy-Combinators.html#try",
        "fct-type": "function",
        "title": "try"
      },
      "index": {
        "description": "Apply certain strategy if this is possible greedy version of option",
        "hierarchy": "Ideas Common Strategy",
        "module": "Ideas.Common.Strategy",
        "name": "try",
        "normalized": "a b-\u003eStrategy b",
        "package": "ideas",
        "partial": "",
        "signature": "f a-\u003eStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy.html#v:until",
      "description": {
        "fct-descr": "\u003cp\u003eRepeat the strategy until the predicate holds\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e Bool) -\u003e f a -\u003e Strategy a",
        "fct-source": "src/Ideas-Common-Strategy-Combinators.html#until",
        "fct-type": "function",
        "title": "until"
      },
      "index": {
        "description": "Repeat the strategy until the predicate holds",
        "hierarchy": "Ideas Common Strategy",
        "module": "Ideas.Common.Strategy",
        "name": "until",
        "normalized": "(a-\u003eBool)-\u003eb a-\u003eStrategy a",
        "package": "ideas",
        "partial": "",
        "signature": "(a-\u003eBool)-\u003ef a-\u003eStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Strategy.html#v:while",
      "description": {
        "fct-descr": "\u003cp\u003eRepeat the strategy as long as the predicate holds\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Strategy",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e Bool) -\u003e f a -\u003e Strategy a",
        "fct-source": "src/Ideas-Common-Strategy-Combinators.html#while",
        "fct-type": "function",
        "title": "while"
      },
      "index": {
        "description": "Repeat the strategy as long as the predicate holds",
        "hierarchy": "Ideas Common Strategy",
        "module": "Ideas.Common.Strategy",
        "name": "while",
        "normalized": "(a-\u003eBool)-\u003eb a-\u003eStrategy a",
        "package": "ideas",
        "partial": "",
        "signature": "(a-\u003eBool)-\u003ef a-\u003eStrategy a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Iterator.html#",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Iterator",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Common-Traversal-Iterator.html",
        "fct-type": "module",
        "title": "Iterator"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Iterator",
        "module": "Ideas.Common.Traversal.Iterator",
        "name": "Iterator",
        "normalized": "",
        "package": "ideas",
        "partial": "Iterator",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Iterator.html#t:Iterator",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Iterator",
        "fct-package": "ideas",
        "fct-signature": "class",
        "fct-source": "src/Ideas-Common-Traversal-Iterator.html#Iterator",
        "fct-type": "class",
        "title": "Iterator"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Iterator",
        "module": "Ideas.Common.Traversal.Iterator",
        "name": "Iterator",
        "normalized": "",
        "package": "ideas",
        "partial": "Iterator",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Iterator.html#t:ListIterator",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Iterator",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Common-Traversal-Iterator.html#ListIterator",
        "fct-type": "data",
        "title": "ListIterator"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Iterator",
        "module": "Ideas.Common.Traversal.Iterator",
        "name": "ListIterator",
        "normalized": "",
        "package": "ideas",
        "partial": "List Iterator",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Iterator.html#v:final",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Iterator",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e a",
        "fct-source": "src/Ideas-Common-Traversal-Iterator.html#final",
        "fct-type": "method",
        "title": "final"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Iterator",
        "module": "Ideas.Common.Traversal.Iterator",
        "name": "final",
        "normalized": "a-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "a-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Iterator.html#v:first",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Iterator",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e a",
        "fct-source": "src/Ideas-Common-Traversal-Iterator.html#first",
        "fct-type": "method",
        "title": "first"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Iterator",
        "module": "Ideas.Common.Traversal.Iterator",
        "name": "first",
        "normalized": "a-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "a-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Iterator.html#v:hasNext",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Iterator",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e Bool",
        "fct-source": "src/Ideas-Common-Traversal-Iterator.html#hasNext",
        "fct-type": "function",
        "title": "hasNext"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Iterator",
        "module": "Ideas.Common.Traversal.Iterator",
        "name": "hasNext",
        "normalized": "a-\u003eBool",
        "package": "ideas",
        "partial": "Next",
        "signature": "a-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Iterator.html#v:hasPrevious",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Iterator",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e Bool",
        "fct-source": "src/Ideas-Common-Traversal-Iterator.html#hasPrevious",
        "fct-type": "function",
        "title": "hasPrevious"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Iterator",
        "module": "Ideas.Common.Traversal.Iterator",
        "name": "hasPrevious",
        "normalized": "a-\u003eBool",
        "package": "ideas",
        "partial": "Previous",
        "signature": "a-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Iterator.html#v:isFinal",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Iterator",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e Bool",
        "fct-source": "src/Ideas-Common-Traversal-Iterator.html#isFinal",
        "fct-type": "function",
        "title": "isFinal"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Iterator",
        "module": "Ideas.Common.Traversal.Iterator",
        "name": "isFinal",
        "normalized": "a-\u003eBool",
        "package": "ideas",
        "partial": "Final",
        "signature": "a-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Iterator.html#v:isFirst",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Iterator",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e Bool",
        "fct-source": "src/Ideas-Common-Traversal-Iterator.html#isFirst",
        "fct-type": "function",
        "title": "isFirst"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Iterator",
        "module": "Ideas.Common.Traversal.Iterator",
        "name": "isFirst",
        "normalized": "a-\u003eBool",
        "package": "ideas",
        "partial": "First",
        "signature": "a-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Iterator.html#v:next",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Iterator",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e Maybe a",
        "fct-source": "src/Ideas-Common-Traversal-Iterator.html#next",
        "fct-type": "method",
        "title": "next"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Iterator",
        "module": "Ideas.Common.Traversal.Iterator",
        "name": "next",
        "normalized": "a-\u003eMaybe a",
        "package": "ideas",
        "partial": "",
        "signature": "a-\u003eMaybe a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Iterator.html#v:position",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Iterator",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e Int",
        "fct-source": "src/Ideas-Common-Traversal-Iterator.html#position",
        "fct-type": "method",
        "title": "position"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Iterator",
        "module": "Ideas.Common.Traversal.Iterator",
        "name": "position",
        "normalized": "a-\u003eInt",
        "package": "ideas",
        "partial": "",
        "signature": "a-\u003eInt"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Iterator.html#v:previous",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Iterator",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e Maybe a",
        "fct-source": "src/Ideas-Common-Traversal-Iterator.html#previous",
        "fct-type": "method",
        "title": "previous"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Iterator",
        "module": "Ideas.Common.Traversal.Iterator",
        "name": "previous",
        "normalized": "a-\u003eMaybe a",
        "package": "ideas",
        "partial": "",
        "signature": "a-\u003eMaybe a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Iterator.html#v:searchBackward",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Iterator",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e Bool) -\u003e a -\u003e Maybe a",
        "fct-source": "src/Ideas-Common-Traversal-Iterator.html#searchBackward",
        "fct-type": "function",
        "title": "searchBackward"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Iterator",
        "module": "Ideas.Common.Traversal.Iterator",
        "name": "searchBackward",
        "normalized": "(a-\u003eBool)-\u003ea-\u003eMaybe a",
        "package": "ideas",
        "partial": "Backward",
        "signature": "(a-\u003eBool)-\u003ea-\u003eMaybe a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Iterator.html#v:searchForward",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Iterator",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e Bool) -\u003e a -\u003e Maybe a",
        "fct-source": "src/Ideas-Common-Traversal-Iterator.html#searchForward",
        "fct-type": "function",
        "title": "searchForward"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Iterator",
        "module": "Ideas.Common.Traversal.Iterator",
        "name": "searchForward",
        "normalized": "(a-\u003eBool)-\u003ea-\u003eMaybe a",
        "package": "ideas",
        "partial": "Forward",
        "signature": "(a-\u003eBool)-\u003ea-\u003eMaybe a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Iterator.html#v:searchNext",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Iterator",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e Bool) -\u003e a -\u003e Maybe a",
        "fct-source": "src/Ideas-Common-Traversal-Iterator.html#searchNext",
        "fct-type": "function",
        "title": "searchNext"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Iterator",
        "module": "Ideas.Common.Traversal.Iterator",
        "name": "searchNext",
        "normalized": "(a-\u003eBool)-\u003ea-\u003eMaybe a",
        "package": "ideas",
        "partial": "Next",
        "signature": "(a-\u003eBool)-\u003ea-\u003eMaybe a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Iterator.html#v:searchPrevious",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Iterator",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e Bool) -\u003e a -\u003e Maybe a",
        "fct-source": "src/Ideas-Common-Traversal-Iterator.html#searchPrevious",
        "fct-type": "function",
        "title": "searchPrevious"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Iterator",
        "module": "Ideas.Common.Traversal.Iterator",
        "name": "searchPrevious",
        "normalized": "(a-\u003eBool)-\u003ea-\u003eMaybe a",
        "package": "ideas",
        "partial": "Previous",
        "signature": "(a-\u003eBool)-\u003ea-\u003eMaybe a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Iterator.html#v:searchWith",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Iterator",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e Maybe a) -\u003e (a -\u003e Bool) -\u003e a -\u003e Maybe a",
        "fct-source": "src/Ideas-Common-Traversal-Iterator.html#searchWith",
        "fct-type": "function",
        "title": "searchWith"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Iterator",
        "module": "Ideas.Common.Traversal.Iterator",
        "name": "searchWith",
        "normalized": "(a-\u003eMaybe a)-\u003e(a-\u003eBool)-\u003ea-\u003eMaybe a",
        "package": "ideas",
        "partial": "With",
        "signature": "(a-\u003eMaybe a)-\u003e(a-\u003eBool)-\u003ea-\u003eMaybe a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Navigator.html#",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Navigator",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Common-Traversal-Navigator.html",
        "fct-type": "module",
        "title": "Navigator"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Navigator",
        "module": "Ideas.Common.Traversal.Navigator",
        "name": "Navigator",
        "normalized": "",
        "package": "ideas",
        "partial": "Navigator",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Navigator.html#t:Horizontal",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Navigator",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Common-Traversal-Navigator.html#Horizontal",
        "fct-type": "data",
        "title": "Horizontal"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Navigator",
        "module": "Ideas.Common.Traversal.Navigator",
        "name": "Horizontal",
        "normalized": "",
        "package": "ideas",
        "partial": "Horizontal",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Navigator.html#t:Leafs",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Navigator",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Common-Traversal-Navigator.html#Leafs",
        "fct-type": "data",
        "title": "Leafs"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Navigator",
        "module": "Ideas.Common.Traversal.Navigator",
        "name": "Leafs",
        "normalized": "",
        "package": "ideas",
        "partial": "Leafs",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Navigator.html#t:LevelOrder",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Navigator",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Common-Traversal-Navigator.html#LevelOrder",
        "fct-type": "data",
        "title": "LevelOrder"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Navigator",
        "module": "Ideas.Common.Traversal.Navigator",
        "name": "LevelOrder",
        "normalized": "",
        "package": "ideas",
        "partial": "Level Order",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Navigator.html#t:Location",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Navigator",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Common-Traversal-Navigator.html#Location",
        "fct-type": "data",
        "title": "Location"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Navigator",
        "module": "Ideas.Common.Traversal.Navigator",
        "name": "Location",
        "normalized": "",
        "package": "ideas",
        "partial": "Location",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Navigator.html#t:Navigator",
      "description": {
        "fct-descr": "\u003cp\u003eFor a minimal complete definition, provide an implemention for downs or\n allDowns. All other functions need an implementation as well, except for\n change. Note that a constructor (a -\u003e f a) is not included in the type class\n to allow additional type class constraints on type a.\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Traversal.Navigator",
        "fct-package": "ideas",
        "fct-signature": "class",
        "fct-source": "src/Ideas-Common-Traversal-Navigator.html#Navigator",
        "fct-type": "class",
        "title": "Navigator"
      },
      "index": {
        "description": "For minimal complete definition provide an implemention for downs or allDowns All other functions need an implementation as well except for change Note that constructor is not included in the type class to allow additional type class constraints on type",
        "hierarchy": "Ideas Common Traversal Navigator",
        "module": "Ideas.Common.Traversal.Navigator",
        "name": "Navigator",
        "normalized": "",
        "package": "ideas",
        "partial": "Navigator",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Navigator.html#t:PostOrder",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Navigator",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Common-Traversal-Navigator.html#PostOrder",
        "fct-type": "data",
        "title": "PostOrder"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Navigator",
        "module": "Ideas.Common.Traversal.Navigator",
        "name": "PostOrder",
        "normalized": "",
        "package": "ideas",
        "partial": "Post Order",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Navigator.html#t:PreOrder",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Navigator",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Common-Traversal-Navigator.html#PreOrder",
        "fct-type": "data",
        "title": "PreOrder"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Navigator",
        "module": "Ideas.Common.Traversal.Navigator",
        "name": "PreOrder",
        "normalized": "",
        "package": "ideas",
        "partial": "Pre Order",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Navigator.html#t:UniplateNavigator",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Navigator",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Common-Traversal-Navigator.html#UniplateNavigator",
        "fct-type": "data",
        "title": "UniplateNavigator"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Navigator",
        "module": "Ideas.Common.Traversal.Navigator",
        "name": "UniplateNavigator",
        "normalized": "",
        "package": "ideas",
        "partial": "Uniplate Navigator",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Navigator.html#v:arity",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Navigator",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e Int",
        "fct-source": "src/Ideas-Common-Traversal-Navigator.html#arity",
        "fct-type": "function",
        "title": "arity"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Navigator",
        "module": "Ideas.Common.Traversal.Navigator",
        "name": "arity",
        "normalized": "a-\u003eInt",
        "package": "ideas",
        "partial": "",
        "signature": "a-\u003eInt"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Navigator.html#v:childnr",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Navigator",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e Int",
        "fct-source": "src/Ideas-Common-Traversal-Navigator.html#childnr",
        "fct-type": "method",
        "title": "childnr"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Navigator",
        "module": "Ideas.Common.Traversal.Navigator",
        "name": "childnr",
        "normalized": "a-\u003eInt",
        "package": "ideas",
        "partial": "",
        "signature": "a-\u003eInt"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Navigator.html#v:depth",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Navigator",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e Int",
        "fct-source": "src/Ideas-Common-Traversal-Navigator.html#depth",
        "fct-type": "function",
        "title": "depth"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Navigator",
        "module": "Ideas.Common.Traversal.Navigator",
        "name": "depth",
        "normalized": "a-\u003eInt",
        "package": "ideas",
        "partial": "",
        "signature": "a-\u003eInt"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Navigator.html#v:down",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Navigator",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e Maybe a",
        "fct-source": "src/Ideas-Common-Traversal-Navigator.html#down",
        "fct-type": "method",
        "title": "down"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Navigator",
        "module": "Ideas.Common.Traversal.Navigator",
        "name": "down",
        "normalized": "a-\u003eMaybe a",
        "package": "ideas",
        "partial": "",
        "signature": "a-\u003eMaybe a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Navigator.html#v:downLast",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Navigator",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e Maybe a",
        "fct-source": "src/Ideas-Common-Traversal-Navigator.html#downLast",
        "fct-type": "method",
        "title": "downLast"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Navigator",
        "module": "Ideas.Common.Traversal.Navigator",
        "name": "downLast",
        "normalized": "a-\u003eMaybe a",
        "package": "ideas",
        "partial": "Last",
        "signature": "a-\u003eMaybe a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Navigator.html#v:downTo",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Navigator",
        "fct-package": "ideas",
        "fct-signature": "Int -\u003e a -\u003e Maybe a",
        "fct-source": "src/Ideas-Common-Traversal-Navigator.html#downTo",
        "fct-type": "function",
        "title": "downTo"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Navigator",
        "module": "Ideas.Common.Traversal.Navigator",
        "name": "downTo",
        "normalized": "Int-\u003ea-\u003eMaybe a",
        "package": "ideas",
        "partial": "To",
        "signature": "Int-\u003ea-\u003eMaybe a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Navigator.html#v:downs",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Navigator",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e [a]",
        "fct-source": "src/Ideas-Common-Traversal-Navigator.html#downs",
        "fct-type": "function",
        "title": "downs"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Navigator",
        "module": "Ideas.Common.Traversal.Navigator",
        "name": "downs",
        "normalized": "a-\u003e[a]",
        "package": "ideas",
        "partial": "",
        "signature": "a-\u003e[a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Navigator.html#v:fromLocation",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Navigator",
        "fct-package": "ideas",
        "fct-signature": "Location -\u003e [Int]",
        "fct-source": "src/Ideas-Common-Traversal-Navigator.html#fromLocation",
        "fct-type": "function",
        "title": "fromLocation"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Navigator",
        "module": "Ideas.Common.Traversal.Navigator",
        "name": "fromLocation",
        "normalized": "Location-\u003e[Int]",
        "package": "ideas",
        "partial": "Location",
        "signature": "Location-\u003e[Int]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Navigator.html#v:hasDown",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Navigator",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e Bool",
        "fct-source": "src/Ideas-Common-Traversal-Navigator.html#hasDown",
        "fct-type": "function",
        "title": "hasDown"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Navigator",
        "module": "Ideas.Common.Traversal.Navigator",
        "name": "hasDown",
        "normalized": "a-\u003eBool",
        "package": "ideas",
        "partial": "Down",
        "signature": "a-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Navigator.html#v:hasLeft",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Navigator",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e Bool",
        "fct-source": "src/Ideas-Common-Traversal-Navigator.html#hasLeft",
        "fct-type": "function",
        "title": "hasLeft"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Navigator",
        "module": "Ideas.Common.Traversal.Navigator",
        "name": "hasLeft",
        "normalized": "a-\u003eBool",
        "package": "ideas",
        "partial": "Left",
        "signature": "a-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Navigator.html#v:hasRight",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Navigator",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e Bool",
        "fct-source": "src/Ideas-Common-Traversal-Navigator.html#hasRight",
        "fct-type": "function",
        "title": "hasRight"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Navigator",
        "module": "Ideas.Common.Traversal.Navigator",
        "name": "hasRight",
        "normalized": "a-\u003eBool",
        "package": "ideas",
        "partial": "Right",
        "signature": "a-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Navigator.html#v:hasUp",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Navigator",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e Bool",
        "fct-source": "src/Ideas-Common-Traversal-Navigator.html#hasUp",
        "fct-type": "function",
        "title": "hasUp"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Navigator",
        "module": "Ideas.Common.Traversal.Navigator",
        "name": "hasUp",
        "normalized": "a-\u003eBool",
        "package": "ideas",
        "partial": "Up",
        "signature": "a-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Navigator.html#v:isLeaf",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Navigator",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e Bool",
        "fct-source": "src/Ideas-Common-Traversal-Navigator.html#isLeaf",
        "fct-type": "function",
        "title": "isLeaf"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Navigator",
        "module": "Ideas.Common.Traversal.Navigator",
        "name": "isLeaf",
        "normalized": "a-\u003eBool",
        "package": "ideas",
        "partial": "Leaf",
        "signature": "a-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Navigator.html#v:isTop",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Navigator",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e Bool",
        "fct-source": "src/Ideas-Common-Traversal-Navigator.html#isTop",
        "fct-type": "function",
        "title": "isTop"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Navigator",
        "module": "Ideas.Common.Traversal.Navigator",
        "name": "isTop",
        "normalized": "a-\u003eBool",
        "package": "ideas",
        "partial": "Top",
        "signature": "a-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Navigator.html#v:left",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Navigator",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e Maybe a",
        "fct-source": "src/Ideas-Common-Traversal-Navigator.html#left",
        "fct-type": "method",
        "title": "left"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Navigator",
        "module": "Ideas.Common.Traversal.Navigator",
        "name": "left",
        "normalized": "a-\u003eMaybe a",
        "package": "ideas",
        "partial": "",
        "signature": "a-\u003eMaybe a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Navigator.html#v:leftMost",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Navigator",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e a",
        "fct-source": "src/Ideas-Common-Traversal-Navigator.html#leftMost",
        "fct-type": "function",
        "title": "leftMost"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Navigator",
        "module": "Ideas.Common.Traversal.Navigator",
        "name": "leftMost",
        "normalized": "a-\u003ea",
        "package": "ideas",
        "partial": "Most",
        "signature": "a-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Navigator.html#v:leftMostAt",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Navigator",
        "fct-package": "ideas",
        "fct-signature": "Int -\u003e a -\u003e Maybe a",
        "fct-source": "src/Ideas-Common-Traversal-Navigator.html#leftMostAt",
        "fct-type": "function",
        "title": "leftMostAt"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Navigator",
        "module": "Ideas.Common.Traversal.Navigator",
        "name": "leftMostAt",
        "normalized": "Int-\u003ea-\u003eMaybe a",
        "package": "ideas",
        "partial": "Most At",
        "signature": "Int-\u003ea-\u003eMaybe a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Navigator.html#v:leftMostLeaf",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Navigator",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e a",
        "fct-source": "src/Ideas-Common-Traversal-Navigator.html#leftMostLeaf",
        "fct-type": "function",
        "title": "leftMostLeaf"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Navigator",
        "module": "Ideas.Common.Traversal.Navigator",
        "name": "leftMostLeaf",
        "normalized": "a-\u003ea",
        "package": "ideas",
        "partial": "Most Leaf",
        "signature": "a-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Navigator.html#v:level",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Navigator",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e Int",
        "fct-source": "src/Ideas-Common-Traversal-Navigator.html#level",
        "fct-type": "function",
        "title": "level"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Navigator",
        "module": "Ideas.Common.Traversal.Navigator",
        "name": "level",
        "normalized": "a-\u003eInt",
        "package": "ideas",
        "partial": "",
        "signature": "a-\u003eInt"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Navigator.html#v:levelNext",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Navigator",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e Maybe a",
        "fct-source": "src/Ideas-Common-Traversal-Navigator.html#levelNext",
        "fct-type": "function",
        "title": "levelNext"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Navigator",
        "module": "Ideas.Common.Traversal.Navigator",
        "name": "levelNext",
        "normalized": "a-\u003eMaybe a",
        "package": "ideas",
        "partial": "Next",
        "signature": "a-\u003eMaybe a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Navigator.html#v:levelPrevious",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Navigator",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e Maybe a",
        "fct-source": "src/Ideas-Common-Traversal-Navigator.html#levelPrevious",
        "fct-type": "function",
        "title": "levelPrevious"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Navigator",
        "module": "Ideas.Common.Traversal.Navigator",
        "name": "levelPrevious",
        "normalized": "a-\u003eMaybe a",
        "package": "ideas",
        "partial": "Previous",
        "signature": "a-\u003eMaybe a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Navigator.html#v:location",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Navigator",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e Location",
        "fct-source": "src/Ideas-Common-Traversal-Navigator.html#location",
        "fct-type": "method",
        "title": "location"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Navigator",
        "module": "Ideas.Common.Traversal.Navigator",
        "name": "location",
        "normalized": "a-\u003eLocation",
        "package": "ideas",
        "partial": "",
        "signature": "a-\u003eLocation"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Navigator.html#v:makeHorizontal",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Navigator",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e Horizontal a",
        "fct-source": "src/Ideas-Common-Traversal-Navigator.html#makeHorizontal",
        "fct-type": "function",
        "title": "makeHorizontal"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Navigator",
        "module": "Ideas.Common.Traversal.Navigator",
        "name": "makeHorizontal",
        "normalized": "a-\u003eHorizontal a",
        "package": "ideas",
        "partial": "Horizontal",
        "signature": "a-\u003eHorizontal a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Navigator.html#v:makeLeafs",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Navigator",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e Leafs a",
        "fct-source": "src/Ideas-Common-Traversal-Navigator.html#makeLeafs",
        "fct-type": "function",
        "title": "makeLeafs"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Navigator",
        "module": "Ideas.Common.Traversal.Navigator",
        "name": "makeLeafs",
        "normalized": "a-\u003eLeafs a",
        "package": "ideas",
        "partial": "Leafs",
        "signature": "a-\u003eLeafs a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Navigator.html#v:makeLevelOrder",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Navigator",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e LevelOrder a",
        "fct-source": "src/Ideas-Common-Traversal-Navigator.html#makeLevelOrder",
        "fct-type": "function",
        "title": "makeLevelOrder"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Navigator",
        "module": "Ideas.Common.Traversal.Navigator",
        "name": "makeLevelOrder",
        "normalized": "a-\u003eLevelOrder a",
        "package": "ideas",
        "partial": "Level Order",
        "signature": "a-\u003eLevelOrder a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Navigator.html#v:makePostOrder",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Navigator",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e PostOrder a",
        "fct-source": "src/Ideas-Common-Traversal-Navigator.html#makePostOrder",
        "fct-type": "function",
        "title": "makePostOrder"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Navigator",
        "module": "Ideas.Common.Traversal.Navigator",
        "name": "makePostOrder",
        "normalized": "a-\u003ePostOrder a",
        "package": "ideas",
        "partial": "Post Order",
        "signature": "a-\u003ePostOrder a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Navigator.html#v:makePreOrder",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Navigator",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e PreOrder a",
        "fct-source": "src/Ideas-Common-Traversal-Navigator.html#makePreOrder",
        "fct-type": "function",
        "title": "makePreOrder"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Navigator",
        "module": "Ideas.Common.Traversal.Navigator",
        "name": "makePreOrder",
        "normalized": "a-\u003ePreOrder a",
        "package": "ideas",
        "partial": "Pre Order",
        "signature": "a-\u003ePreOrder a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Navigator.html#v:navigateTo",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Navigator",
        "fct-package": "ideas",
        "fct-signature": "Location -\u003e a -\u003e Maybe a",
        "fct-source": "src/Ideas-Common-Traversal-Navigator.html#navigateTo",
        "fct-type": "function",
        "title": "navigateTo"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Navigator",
        "module": "Ideas.Common.Traversal.Navigator",
        "name": "navigateTo",
        "normalized": "Location-\u003ea-\u003eMaybe a",
        "package": "ideas",
        "partial": "To",
        "signature": "Location-\u003ea-\u003eMaybe a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Navigator.html#v:navigateTowards",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Navigator",
        "fct-package": "ideas",
        "fct-signature": "Location -\u003e a -\u003e a",
        "fct-source": "src/Ideas-Common-Traversal-Navigator.html#navigateTowards",
        "fct-type": "function",
        "title": "navigateTowards"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Navigator",
        "module": "Ideas.Common.Traversal.Navigator",
        "name": "navigateTowards",
        "normalized": "Location-\u003ea-\u003ea",
        "package": "ideas",
        "partial": "Towards",
        "signature": "Location-\u003ea-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Navigator.html#v:right",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Navigator",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e Maybe a",
        "fct-source": "src/Ideas-Common-Traversal-Navigator.html#right",
        "fct-type": "method",
        "title": "right"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Navigator",
        "module": "Ideas.Common.Traversal.Navigator",
        "name": "right",
        "normalized": "a-\u003eMaybe a",
        "package": "ideas",
        "partial": "",
        "signature": "a-\u003eMaybe a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Navigator.html#v:rightMost",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Navigator",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e a",
        "fct-source": "src/Ideas-Common-Traversal-Navigator.html#rightMost",
        "fct-type": "function",
        "title": "rightMost"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Navigator",
        "module": "Ideas.Common.Traversal.Navigator",
        "name": "rightMost",
        "normalized": "a-\u003ea",
        "package": "ideas",
        "partial": "Most",
        "signature": "a-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Navigator.html#v:rightMostAt",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Navigator",
        "fct-package": "ideas",
        "fct-signature": "Int -\u003e a -\u003e Maybe a",
        "fct-source": "src/Ideas-Common-Traversal-Navigator.html#rightMostAt",
        "fct-type": "function",
        "title": "rightMostAt"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Navigator",
        "module": "Ideas.Common.Traversal.Navigator",
        "name": "rightMostAt",
        "normalized": "Int-\u003ea-\u003eMaybe a",
        "package": "ideas",
        "partial": "Most At",
        "signature": "Int-\u003ea-\u003eMaybe a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Navigator.html#v:rightMostLeaf",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Navigator",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e a",
        "fct-source": "src/Ideas-Common-Traversal-Navigator.html#rightMostLeaf",
        "fct-type": "function",
        "title": "rightMostLeaf"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Navigator",
        "module": "Ideas.Common.Traversal.Navigator",
        "name": "rightMostLeaf",
        "normalized": "a-\u003ea",
        "package": "ideas",
        "partial": "Most Leaf",
        "signature": "a-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Navigator.html#v:toLocation",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Navigator",
        "fct-package": "ideas",
        "fct-signature": "[Int] -\u003e Location",
        "fct-source": "src/Ideas-Common-Traversal-Navigator.html#toLocation",
        "fct-type": "function",
        "title": "toLocation"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Navigator",
        "module": "Ideas.Common.Traversal.Navigator",
        "name": "toLocation",
        "normalized": "[Int]-\u003eLocation",
        "package": "ideas",
        "partial": "Location",
        "signature": "[Int]-\u003eLocation"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Navigator.html#v:top",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Navigator",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e a",
        "fct-source": "src/Ideas-Common-Traversal-Navigator.html#top",
        "fct-type": "function",
        "title": "top"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Navigator",
        "module": "Ideas.Common.Traversal.Navigator",
        "name": "top",
        "normalized": "a-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "a-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Navigator.html#v:up",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Navigator",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e Maybe a",
        "fct-source": "src/Ideas-Common-Traversal-Navigator.html#up",
        "fct-type": "method",
        "title": "up"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Navigator",
        "module": "Ideas.Common.Traversal.Navigator",
        "name": "up",
        "normalized": "a-\u003eMaybe a",
        "package": "ideas",
        "partial": "",
        "signature": "a-\u003eMaybe a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Tests.html#",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Tests",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Common-Traversal-Tests.html",
        "fct-type": "module",
        "title": "Tests"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Tests",
        "module": "Ideas.Common.Traversal.Tests",
        "name": "Tests",
        "normalized": "",
        "package": "ideas",
        "partial": "Tests",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Tests.html#v:listGen",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Tests",
        "fct-package": "ideas",
        "fct-signature": "Gen (ListIterator Int)",
        "fct-source": "src/Ideas-Common-Traversal-Tests.html#listGen",
        "fct-type": "function",
        "title": "listGen"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Tests",
        "module": "Ideas.Common.Traversal.Tests",
        "name": "listGen",
        "normalized": "",
        "package": "ideas",
        "partial": "Gen",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Tests.html#v:testIterator",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Tests",
        "fct-package": "ideas",
        "fct-signature": "String -\u003e Gen a -\u003e TestSuite",
        "fct-source": "src/Ideas-Common-Traversal-Tests.html#testIterator",
        "fct-type": "function",
        "title": "testIterator"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Tests",
        "module": "Ideas.Common.Traversal.Tests",
        "name": "testIterator",
        "normalized": "String-\u003eGen a-\u003eTestSuite",
        "package": "ideas",
        "partial": "Iterator",
        "signature": "String-\u003eGen a-\u003eTestSuite"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Tests.html#v:testNavigator",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Tests",
        "fct-package": "ideas",
        "fct-signature": "String -\u003e Gen a -\u003e TestSuite",
        "fct-source": "src/Ideas-Common-Traversal-Tests.html#testNavigator",
        "fct-type": "function",
        "title": "testNavigator"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Tests",
        "module": "Ideas.Common.Traversal.Tests",
        "name": "testNavigator",
        "normalized": "String-\u003eGen a-\u003eTestSuite",
        "package": "ideas",
        "partial": "Navigator",
        "signature": "String-\u003eGen a-\u003eTestSuite"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Tests.html#v:tests",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Tests",
        "fct-package": "ideas",
        "fct-signature": "TestSuite",
        "fct-source": "src/Ideas-Common-Traversal-Tests.html#tests",
        "fct-type": "function",
        "title": "tests"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Tests",
        "module": "Ideas.Common.Traversal.Tests",
        "name": "tests",
        "normalized": "",
        "package": "ideas",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Tests.html#v:uniGen",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Tests",
        "fct-package": "ideas",
        "fct-signature": "Gen (UniplateNavigator (T Int))",
        "fct-source": "src/Ideas-Common-Traversal-Tests.html#uniGen",
        "fct-type": "function",
        "title": "uniGen"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Tests",
        "module": "Ideas.Common.Traversal.Tests",
        "name": "uniGen",
        "normalized": "",
        "package": "ideas",
        "partial": "Gen",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Utils.html#",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Utils",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Common-Traversal-Utils.html",
        "fct-type": "module",
        "title": "Utils"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Utils",
        "module": "Ideas.Common.Traversal.Utils",
        "name": "Utils",
        "normalized": "",
        "package": "ideas",
        "partial": "Utils",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Utils.html#t:Focus",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Utils",
        "fct-package": "ideas",
        "fct-signature": "class",
        "fct-source": "src/Ideas-Common-Traversal-Utils.html#Focus",
        "fct-type": "class",
        "title": "Focus"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Utils",
        "module": "Ideas.Common.Traversal.Utils",
        "name": "Focus",
        "normalized": "",
        "package": "ideas",
        "partial": "Focus",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Utils.html#t:Mirror",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Utils",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Common-Traversal-Utils.html#Mirror",
        "fct-type": "data",
        "title": "Mirror"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Utils",
        "module": "Ideas.Common.Traversal.Utils",
        "name": "Mirror",
        "normalized": "",
        "package": "ideas",
        "partial": "Mirror",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Utils.html#t:Update",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Utils",
        "fct-package": "ideas",
        "fct-signature": "class",
        "fct-source": "src/Ideas-Common-Traversal-Utils.html#Update",
        "fct-type": "class",
        "title": "Update"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Utils",
        "module": "Ideas.Common.Traversal.Utils",
        "name": "Update",
        "normalized": "",
        "package": "ideas",
        "partial": "Update",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Utils.html#t:Wrapper",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Utils",
        "fct-package": "ideas",
        "fct-signature": "class",
        "fct-source": "src/Ideas-Common-Traversal-Utils.html#Wrapper",
        "fct-type": "class",
        "title": "Wrapper"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Utils",
        "module": "Ideas.Common.Traversal.Utils",
        "name": "Wrapper",
        "normalized": "",
        "package": "ideas",
        "partial": "Wrapper",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Utils.html#v:-62--124--60-",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Utils",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e Maybe a) -\u003e (a -\u003e Maybe a) -\u003e a -\u003e Maybe a",
        "fct-source": "src/Ideas-Common-Traversal-Utils.html#%3E%7C%3C",
        "fct-type": "function",
        "title": "(\u003e|\u003c)"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Utils",
        "module": "Ideas.Common.Traversal.Utils",
        "name": "(\u003e|\u003c) \u003e|\u003c",
        "normalized": "(a-\u003eMaybe a)-\u003e(a-\u003eMaybe a)-\u003ea-\u003eMaybe a",
        "package": "ideas",
        "partial": "",
        "signature": "(a-\u003eMaybe a)-\u003e(a-\u003eMaybe a)-\u003ea-\u003eMaybe a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Utils.html#v:-62--61--62-",
      "description": {
        "fct-descr": "\u003cp\u003eLeft-to-right Kleisli composition of monads.\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Traversal.Utils",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e m b) -\u003e (b -\u003e m c) -\u003e a -\u003e m c",
        "fct-type": "function",
        "title": "(\u003e=\u003e)"
      },
      "index": {
        "description": "Left-to-right Kleisli composition of monads",
        "hierarchy": "Ideas Common Traversal Utils",
        "module": "Ideas.Common.Traversal.Utils",
        "name": "(\u003e=\u003e) \u003e=\u003e",
        "normalized": "(a-\u003eb c)-\u003e(c-\u003eb d)-\u003ea-\u003eb d",
        "package": "ideas",
        "partial": "",
        "signature": "(a-\u003em b)-\u003e(b-\u003em c)-\u003ea-\u003em c"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Utils.html#v:change",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Utils",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e a) -\u003e f a -\u003e f a",
        "fct-source": "src/Ideas-Common-Traversal-Utils.html#change",
        "fct-type": "function",
        "title": "change"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Utils",
        "module": "Ideas.Common.Traversal.Utils",
        "name": "change",
        "normalized": "(a-\u003ea)-\u003eb a-\u003eb a",
        "package": "ideas",
        "partial": "",
        "signature": "(a-\u003ea)-\u003ef a-\u003ef a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Utils.html#v:changeG",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Utils",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e g a) -\u003e f a -\u003e g (f a)",
        "fct-source": "src/Ideas-Common-Traversal-Utils.html#changeG",
        "fct-type": "function",
        "title": "changeG"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Utils",
        "module": "Ideas.Common.Traversal.Utils",
        "name": "changeG",
        "normalized": "(a-\u003eb a)-\u003ec a-\u003eb(c a)",
        "package": "ideas",
        "partial": "",
        "signature": "(a-\u003eg a)-\u003ef a-\u003eg(f a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Utils.html#v:changeM",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Utils",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e Maybe a) -\u003e f a -\u003e Maybe (f a)",
        "fct-source": "src/Ideas-Common-Traversal-Utils.html#changeM",
        "fct-type": "function",
        "title": "changeM"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Utils",
        "module": "Ideas.Common.Traversal.Utils",
        "name": "changeM",
        "normalized": "(a-\u003eMaybe a)-\u003eb a-\u003eMaybe(b a)",
        "package": "ideas",
        "partial": "",
        "signature": "(a-\u003eMaybe a)-\u003ef a-\u003eMaybe(f a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Utils.html#v:current",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Utils",
        "fct-package": "ideas",
        "fct-signature": "f a -\u003e a",
        "fct-source": "src/Ideas-Common-Traversal-Utils.html#current",
        "fct-type": "function",
        "title": "current"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Utils",
        "module": "Ideas.Common.Traversal.Utils",
        "name": "current",
        "normalized": "a b-\u003eb",
        "package": "ideas",
        "partial": "",
        "signature": "f a-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Utils.html#v:fixp",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Utils",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e Maybe a) -\u003e a -\u003e a",
        "fct-source": "src/Ideas-Common-Traversal-Utils.html#fixp",
        "fct-type": "function",
        "title": "fixp"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Utils",
        "module": "Ideas.Common.Traversal.Utils",
        "name": "fixp",
        "normalized": "(a-\u003eMaybe a)-\u003ea-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "(a-\u003eMaybe a)-\u003ea-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Utils.html#v:fixpl",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Utils",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e Maybe a) -\u003e a -\u003e [a]",
        "fct-source": "src/Ideas-Common-Traversal-Utils.html#fixpl",
        "fct-type": "function",
        "title": "fixpl"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Utils",
        "module": "Ideas.Common.Traversal.Utils",
        "name": "fixpl",
        "normalized": "(a-\u003eMaybe a)-\u003ea-\u003e[a]",
        "package": "ideas",
        "partial": "",
        "signature": "(a-\u003eMaybe a)-\u003ea-\u003e[a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Utils.html#v:focus",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Utils",
        "fct-package": "ideas",
        "fct-signature": "Unfocus a -\u003e a",
        "fct-source": "src/Ideas-Common-Traversal-Utils.html#focus",
        "fct-type": "method",
        "title": "focus"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Utils",
        "module": "Ideas.Common.Traversal.Utils",
        "name": "focus",
        "normalized": "Unfocus a-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "Unfocus a-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Utils.html#v:focusM",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Utils",
        "fct-package": "ideas",
        "fct-signature": "Unfocus a -\u003e Maybe a",
        "fct-source": "src/Ideas-Common-Traversal-Utils.html#focusM",
        "fct-type": "method",
        "title": "focusM"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Utils",
        "module": "Ideas.Common.Traversal.Utils",
        "name": "focusM",
        "normalized": "Unfocus a-\u003eMaybe a",
        "package": "ideas",
        "partial": "",
        "signature": "Unfocus a-\u003eMaybe a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Utils.html#v:liftFocus",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Utils",
        "fct-package": "ideas",
        "fct-signature": "(Unfocus a -\u003e Maybe (Unfocus a)) -\u003e a -\u003e Maybe a",
        "fct-source": "src/Ideas-Common-Traversal-Utils.html#liftFocus",
        "fct-type": "function",
        "title": "liftFocus"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Utils",
        "module": "Ideas.Common.Traversal.Utils",
        "name": "liftFocus",
        "normalized": "(Unfocus a-\u003eMaybe(Unfocus a))-\u003ea-\u003eMaybe a",
        "package": "ideas",
        "partial": "Focus",
        "signature": "(Unfocus a-\u003eMaybe(Unfocus a))-\u003ea-\u003eMaybe a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Utils.html#v:liftWrapper",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Utils",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e m a) -\u003e f a -\u003e m (f a)",
        "fct-source": "src/Ideas-Common-Traversal-Utils.html#liftWrapper",
        "fct-type": "function",
        "title": "liftWrapper"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Utils",
        "module": "Ideas.Common.Traversal.Utils",
        "name": "liftWrapper",
        "normalized": "(a-\u003eb a)-\u003ec a-\u003eb(c a)",
        "package": "ideas",
        "partial": "Wrapper",
        "signature": "(a-\u003em a)-\u003ef a-\u003em(f a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Utils.html#v:makeMirror",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Utils",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e Mirror a",
        "fct-source": "src/Ideas-Common-Traversal-Utils.html#makeMirror",
        "fct-type": "function",
        "title": "makeMirror"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Utils",
        "module": "Ideas.Common.Traversal.Utils",
        "name": "makeMirror",
        "normalized": "a-\u003eMirror a",
        "package": "ideas",
        "partial": "Mirror",
        "signature": "a-\u003eMirror a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Utils.html#v:mapWrapper",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Utils",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e a) -\u003e f a -\u003e f a",
        "fct-source": "src/Ideas-Common-Traversal-Utils.html#mapWrapper",
        "fct-type": "function",
        "title": "mapWrapper"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Utils",
        "module": "Ideas.Common.Traversal.Utils",
        "name": "mapWrapper",
        "normalized": "(a-\u003ea)-\u003eb a-\u003eb a",
        "package": "ideas",
        "partial": "Wrapper",
        "signature": "(a-\u003ea)-\u003ef a-\u003ef a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Utils.html#v:mplus",
      "description": {
        "fct-descr": "\u003cp\u003ean associative operation\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Traversal.Utils",
        "fct-package": "ideas",
        "fct-signature": "forall a.  m a -\u003e m a -\u003e m a",
        "fct-type": "function",
        "title": "mplus"
      },
      "index": {
        "description": "an associative operation",
        "hierarchy": "Ideas Common Traversal Utils",
        "module": "Ideas.Common.Traversal.Utils",
        "name": "mplus",
        "normalized": "a b c d-\u003ec d-\u003ec d",
        "package": "ideas",
        "partial": "",
        "signature": "forall a. m a-\u003em a-\u003em a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Utils.html#v:replace",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Utils",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e f a -\u003e f a",
        "fct-source": "src/Ideas-Common-Traversal-Utils.html#replace",
        "fct-type": "function",
        "title": "replace"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Utils",
        "module": "Ideas.Common.Traversal.Utils",
        "name": "replace",
        "normalized": "a-\u003eb a-\u003eb a",
        "package": "ideas",
        "partial": "",
        "signature": "a-\u003ef a-\u003ef a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Utils.html#v:safe",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Utils",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e Maybe a) -\u003e a -\u003e a",
        "fct-source": "src/Ideas-Common-Traversal-Utils.html#safe",
        "fct-type": "function",
        "title": "safe"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Utils",
        "module": "Ideas.Common.Traversal.Utils",
        "name": "safe",
        "normalized": "(a-\u003eMaybe a)-\u003ea-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "(a-\u003eMaybe a)-\u003ea-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Utils.html#v:unfocus",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Utils",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e Unfocus a",
        "fct-source": "src/Ideas-Common-Traversal-Utils.html#unfocus",
        "fct-type": "method",
        "title": "unfocus"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Utils",
        "module": "Ideas.Common.Traversal.Utils",
        "name": "unfocus",
        "normalized": "a-\u003eUnfocus a",
        "package": "ideas",
        "partial": "",
        "signature": "a-\u003eUnfocus a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Utils.html#v:unliftFocus",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Utils",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e Maybe a) -\u003e Unfocus a -\u003e Maybe (Unfocus a)",
        "fct-source": "src/Ideas-Common-Traversal-Utils.html#unliftFocus",
        "fct-type": "function",
        "title": "unliftFocus"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Utils",
        "module": "Ideas.Common.Traversal.Utils",
        "name": "unliftFocus",
        "normalized": "(a-\u003eMaybe a)-\u003eUnfocus a-\u003eMaybe(Unfocus a)",
        "package": "ideas",
        "partial": "Focus",
        "signature": "(a-\u003eMaybe a)-\u003eUnfocus a-\u003eMaybe(Unfocus a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Utils.html#v:unliftWrapper",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Utils",
        "fct-package": "ideas",
        "fct-signature": "(f a -\u003e m (f a)) -\u003e a -\u003e m a",
        "fct-source": "src/Ideas-Common-Traversal-Utils.html#unliftWrapper",
        "fct-type": "function",
        "title": "unliftWrapper"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Utils",
        "module": "Ideas.Common.Traversal.Utils",
        "name": "unliftWrapper",
        "normalized": "(a b-\u003ec(a b))-\u003eb-\u003ec b",
        "package": "ideas",
        "partial": "Wrapper",
        "signature": "(f a-\u003em(f a))-\u003ea-\u003em a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Utils.html#v:unwrap",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Utils",
        "fct-package": "ideas",
        "fct-signature": "f a -\u003e a",
        "fct-source": "src/Ideas-Common-Traversal-Utils.html#unwrap",
        "fct-type": "method",
        "title": "unwrap"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Utils",
        "module": "Ideas.Common.Traversal.Utils",
        "name": "unwrap",
        "normalized": "a b-\u003eb",
        "package": "ideas",
        "partial": "",
        "signature": "f a-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Utils.html#v:update",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Utils",
        "fct-package": "ideas",
        "fct-signature": "f a -\u003e (a, a -\u003e f a)",
        "fct-source": "src/Ideas-Common-Traversal-Utils.html#update",
        "fct-type": "method",
        "title": "update"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Utils",
        "module": "Ideas.Common.Traversal.Utils",
        "name": "update",
        "normalized": "a b-\u003e(b,b-\u003ea b)",
        "package": "ideas",
        "partial": "",
        "signature": "f a-\u003e(a,a-\u003ef a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Traversal-Utils.html#v:wrap",
      "description": {
        "fct-module": "Ideas.Common.Traversal.Utils",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e f a",
        "fct-source": "src/Ideas-Common-Traversal-Utils.html#wrap",
        "fct-type": "method",
        "title": "wrap"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Traversal Utils",
        "module": "Ideas.Common.Traversal.Utils",
        "name": "wrap",
        "normalized": "a-\u003eb a",
        "package": "ideas",
        "partial": "",
        "signature": "a-\u003ef a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils-QuickCheck.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eExtensions to the QuickCheck library\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "Ideas.Common.Utils.QuickCheck",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Common-Utils-QuickCheck.html",
        "fct-type": "module",
        "title": "QuickCheck"
      },
      "index": {
        "description": "Extensions to the QuickCheck library",
        "hierarchy": "Ideas Common Utils QuickCheck",
        "module": "Ideas.Common.Utils.QuickCheck",
        "name": "QuickCheck",
        "normalized": "",
        "package": "ideas",
        "partial": "Quick Check",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils-QuickCheck.html#t:ArbGen",
      "description": {
        "fct-module": "Ideas.Common.Utils.QuickCheck",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Common-Utils-QuickCheck.html#ArbGen",
        "fct-type": "data",
        "title": "ArbGen"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Utils QuickCheck",
        "module": "Ideas.Common.Utils.QuickCheck",
        "name": "ArbGen",
        "normalized": "",
        "package": "ideas",
        "partial": "Arb Gen",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils-QuickCheck.html#v:arbGen",
      "description": {
        "fct-module": "Ideas.Common.Utils.QuickCheck",
        "fct-package": "ideas",
        "fct-signature": "(b -\u003e a) -\u003e ArbGen a",
        "fct-source": "src/Ideas-Common-Utils-QuickCheck.html#arbGen",
        "fct-type": "function",
        "title": "arbGen"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Utils QuickCheck",
        "module": "Ideas.Common.Utils.QuickCheck",
        "name": "arbGen",
        "normalized": "(a-\u003eb)-\u003eArbGen b",
        "package": "ideas",
        "partial": "Gen",
        "signature": "(b-\u003ea)-\u003eArbGen a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils-QuickCheck.html#v:binaryGen",
      "description": {
        "fct-module": "Ideas.Common.Utils.QuickCheck",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e a -\u003e a) -\u003e ArbGen a",
        "fct-source": "src/Ideas-Common-Utils-QuickCheck.html#binaryGen",
        "fct-type": "function",
        "title": "binaryGen"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Utils QuickCheck",
        "module": "Ideas.Common.Utils.QuickCheck",
        "name": "binaryGen",
        "normalized": "(a-\u003ea-\u003ea)-\u003eArbGen a",
        "package": "ideas",
        "partial": "Gen",
        "signature": "(a-\u003ea-\u003ea)-\u003eArbGen a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils-QuickCheck.html#v:binaryGens",
      "description": {
        "fct-module": "Ideas.Common.Utils.QuickCheck",
        "fct-package": "ideas",
        "fct-signature": "[a -\u003e a -\u003e a] -\u003e ArbGen a",
        "fct-source": "src/Ideas-Common-Utils-QuickCheck.html#binaryGens",
        "fct-type": "function",
        "title": "binaryGens"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Utils QuickCheck",
        "module": "Ideas.Common.Utils.QuickCheck",
        "name": "binaryGens",
        "normalized": "[a-\u003ea-\u003ea]-\u003eArbGen a",
        "package": "ideas",
        "partial": "Gens",
        "signature": "[a-\u003ea-\u003ea]-\u003eArbGen a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils-QuickCheck.html#v:changeFrequency",
      "description": {
        "fct-module": "Ideas.Common.Utils.QuickCheck",
        "fct-package": "ideas",
        "fct-signature": "Rational -\u003e ArbGen a -\u003e ArbGen a",
        "fct-source": "src/Ideas-Common-Utils-QuickCheck.html#changeFrequency",
        "fct-type": "function",
        "title": "changeFrequency"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Utils QuickCheck",
        "module": "Ideas.Common.Utils.QuickCheck",
        "name": "changeFrequency",
        "normalized": "Rational-\u003eArbGen a-\u003eArbGen a",
        "package": "ideas",
        "partial": "Frequency",
        "signature": "Rational-\u003eArbGen a-\u003eArbGen a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils-QuickCheck.html#v:common",
      "description": {
        "fct-module": "Ideas.Common.Utils.QuickCheck",
        "fct-package": "ideas",
        "fct-signature": "ArbGen a -\u003e ArbGen a",
        "fct-source": "src/Ideas-Common-Utils-QuickCheck.html#common",
        "fct-type": "function",
        "title": "common"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Utils QuickCheck",
        "module": "Ideas.Common.Utils.QuickCheck",
        "name": "common",
        "normalized": "ArbGen a-\u003eArbGen a",
        "package": "ideas",
        "partial": "",
        "signature": "ArbGen a-\u003eArbGen a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils-QuickCheck.html#v:constGen",
      "description": {
        "fct-module": "Ideas.Common.Utils.QuickCheck",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e ArbGen a",
        "fct-source": "src/Ideas-Common-Utils-QuickCheck.html#constGen",
        "fct-type": "function",
        "title": "constGen"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Utils QuickCheck",
        "module": "Ideas.Common.Utils.QuickCheck",
        "name": "constGen",
        "normalized": "a-\u003eArbGen a",
        "package": "ideas",
        "partial": "Gen",
        "signature": "a-\u003eArbGen a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils-QuickCheck.html#v:constGens",
      "description": {
        "fct-module": "Ideas.Common.Utils.QuickCheck",
        "fct-package": "ideas",
        "fct-signature": "[a] -\u003e ArbGen a",
        "fct-source": "src/Ideas-Common-Utils-QuickCheck.html#constGens",
        "fct-type": "function",
        "title": "constGens"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Utils QuickCheck",
        "module": "Ideas.Common.Utils.QuickCheck",
        "name": "constGens",
        "normalized": "[a]-\u003eArbGen a",
        "package": "ideas",
        "partial": "Gens",
        "signature": "[a]-\u003eArbGen a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils-QuickCheck.html#v:generator",
      "description": {
        "fct-module": "Ideas.Common.Utils.QuickCheck",
        "fct-package": "ideas",
        "fct-signature": "ArbGen a -\u003e Gen a",
        "fct-source": "src/Ideas-Common-Utils-QuickCheck.html#generator",
        "fct-type": "function",
        "title": "generator"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Utils QuickCheck",
        "module": "Ideas.Common.Utils.QuickCheck",
        "name": "generator",
        "normalized": "ArbGen a-\u003eGen a",
        "package": "ideas",
        "partial": "",
        "signature": "ArbGen a-\u003eGen a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils-QuickCheck.html#v:generators",
      "description": {
        "fct-module": "Ideas.Common.Utils.QuickCheck",
        "fct-package": "ideas",
        "fct-signature": "[ArbGen a] -\u003e Gen a",
        "fct-source": "src/Ideas-Common-Utils-QuickCheck.html#generators",
        "fct-type": "function",
        "title": "generators"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Utils QuickCheck",
        "module": "Ideas.Common.Utils.QuickCheck",
        "name": "generators",
        "normalized": "[ArbGen a]-\u003eGen a",
        "package": "ideas",
        "partial": "",
        "signature": "[ArbGen a]-\u003eGen a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils-QuickCheck.html#v:rare",
      "description": {
        "fct-module": "Ideas.Common.Utils.QuickCheck",
        "fct-package": "ideas",
        "fct-signature": "ArbGen a -\u003e ArbGen a",
        "fct-source": "src/Ideas-Common-Utils-QuickCheck.html#rare",
        "fct-type": "function",
        "title": "rare"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Utils QuickCheck",
        "module": "Ideas.Common.Utils.QuickCheck",
        "name": "rare",
        "normalized": "ArbGen a-\u003eArbGen a",
        "package": "ideas",
        "partial": "",
        "signature": "ArbGen a-\u003eArbGen a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils-QuickCheck.html#v:toArbGen",
      "description": {
        "fct-module": "Ideas.Common.Utils.QuickCheck",
        "fct-package": "ideas",
        "fct-signature": "Gen a -\u003e ArbGen a",
        "fct-source": "src/Ideas-Common-Utils-QuickCheck.html#toArbGen",
        "fct-type": "function",
        "title": "toArbGen"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Utils QuickCheck",
        "module": "Ideas.Common.Utils.QuickCheck",
        "name": "toArbGen",
        "normalized": "Gen a-\u003eArbGen a",
        "package": "ideas",
        "partial": "Arb Gen",
        "signature": "Gen a-\u003eArbGen a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils-QuickCheck.html#v:unaryArbGen",
      "description": {
        "fct-module": "Ideas.Common.Utils.QuickCheck",
        "fct-package": "ideas",
        "fct-signature": "(b -\u003e a -\u003e a) -\u003e ArbGen a",
        "fct-source": "src/Ideas-Common-Utils-QuickCheck.html#unaryArbGen",
        "fct-type": "function",
        "title": "unaryArbGen"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Utils QuickCheck",
        "module": "Ideas.Common.Utils.QuickCheck",
        "name": "unaryArbGen",
        "normalized": "(a-\u003eb-\u003eb)-\u003eArbGen b",
        "package": "ideas",
        "partial": "Arb Gen",
        "signature": "(b-\u003ea-\u003ea)-\u003eArbGen a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils-QuickCheck.html#v:unaryGen",
      "description": {
        "fct-module": "Ideas.Common.Utils.QuickCheck",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e a) -\u003e ArbGen a",
        "fct-source": "src/Ideas-Common-Utils-QuickCheck.html#unaryGen",
        "fct-type": "function",
        "title": "unaryGen"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Utils QuickCheck",
        "module": "Ideas.Common.Utils.QuickCheck",
        "name": "unaryGen",
        "normalized": "(a-\u003ea)-\u003eArbGen a",
        "package": "ideas",
        "partial": "Gen",
        "signature": "(a-\u003ea)-\u003eArbGen a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils-QuickCheck.html#v:unaryGens",
      "description": {
        "fct-module": "Ideas.Common.Utils.QuickCheck",
        "fct-package": "ideas",
        "fct-signature": "[a -\u003e a] -\u003e ArbGen a",
        "fct-source": "src/Ideas-Common-Utils-QuickCheck.html#unaryGens",
        "fct-type": "function",
        "title": "unaryGens"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Utils QuickCheck",
        "module": "Ideas.Common.Utils.QuickCheck",
        "name": "unaryGens",
        "normalized": "[a-\u003ea]-\u003eArbGen a",
        "package": "ideas",
        "partial": "Gens",
        "signature": "[a-\u003ea]-\u003eArbGen a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils-QuickCheck.html#v:uncommon",
      "description": {
        "fct-module": "Ideas.Common.Utils.QuickCheck",
        "fct-package": "ideas",
        "fct-signature": "ArbGen a -\u003e ArbGen a",
        "fct-source": "src/Ideas-Common-Utils-QuickCheck.html#uncommon",
        "fct-type": "function",
        "title": "uncommon"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Utils QuickCheck",
        "module": "Ideas.Common.Utils.QuickCheck",
        "name": "uncommon",
        "normalized": "ArbGen a-\u003eArbGen a",
        "package": "ideas",
        "partial": "",
        "signature": "ArbGen a-\u003eArbGen a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils-StringRef.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eReferences to Strings, proving a fast comparison implementation (Eq and\n Ord) that uses a hash function. Code is based on Daan Leijen's Lazy\n Virutal Machine (LVM) identifiers.\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "Ideas.Common.Utils.StringRef",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Common-Utils-StringRef.html",
        "fct-type": "module",
        "title": "StringRef"
      },
      "index": {
        "description": "References to Strings proving fast comparison implementation Eq and Ord that uses hash function Code is based on Daan Leijen Lazy Virutal Machine LVM identifiers",
        "hierarchy": "Ideas Common Utils StringRef",
        "module": "Ideas.Common.Utils.StringRef",
        "name": "StringRef",
        "normalized": "",
        "package": "ideas",
        "partial": "String Ref",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils-StringRef.html#t:StringRef",
      "description": {
        "fct-module": "Ideas.Common.Utils.StringRef",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Common-Utils-StringRef.html#StringRef",
        "fct-type": "data",
        "title": "StringRef"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Utils StringRef",
        "module": "Ideas.Common.Utils.StringRef",
        "name": "StringRef",
        "normalized": "",
        "package": "ideas",
        "partial": "String Ref",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils-StringRef.html#v:stringRef",
      "description": {
        "fct-module": "Ideas.Common.Utils.StringRef",
        "fct-package": "ideas",
        "fct-signature": "String -\u003e StringRef",
        "fct-source": "src/Ideas-Common-Utils-StringRef.html#stringRef",
        "fct-type": "function",
        "title": "stringRef"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Utils StringRef",
        "module": "Ideas.Common.Utils.StringRef",
        "name": "stringRef",
        "normalized": "String-\u003eStringRef",
        "package": "ideas",
        "partial": "Ref",
        "signature": "String-\u003eStringRef"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils-StringRef.html#v:tableStatus",
      "description": {
        "fct-module": "Ideas.Common.Utils.StringRef",
        "fct-package": "ideas",
        "fct-signature": "IO String",
        "fct-source": "src/Ideas-Common-Utils-StringRef.html#tableStatus",
        "fct-type": "function",
        "title": "tableStatus"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Utils StringRef",
        "module": "Ideas.Common.Utils.StringRef",
        "name": "tableStatus",
        "normalized": "",
        "package": "ideas",
        "partial": "Status",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils-StringRef.html#v:toString",
      "description": {
        "fct-module": "Ideas.Common.Utils.StringRef",
        "fct-package": "ideas",
        "fct-signature": "StringRef -\u003e String",
        "fct-source": "src/Ideas-Common-Utils-StringRef.html#toString",
        "fct-type": "function",
        "title": "toString"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Utils StringRef",
        "module": "Ideas.Common.Utils.StringRef",
        "name": "toString",
        "normalized": "StringRef-\u003eString",
        "package": "ideas",
        "partial": "String",
        "signature": "StringRef-\u003eString"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils-TestSuite.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eA lightweight wrapper around the QuickCheck library. It introduces the\n notion of a test suite, and it stores the test results for later inspection\n (e.g., for the generation of a test report). A test suite has a monadic\n interface.\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "Ideas.Common.Utils.TestSuite",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Common-Utils-TestSuite.html",
        "fct-type": "module",
        "title": "TestSuite"
      },
      "index": {
        "description": "lightweight wrapper around the QuickCheck library It introduces the notion of test suite and it stores the test results for later inspection e.g for the generation of test report test suite has monadic interface",
        "hierarchy": "Ideas Common Utils TestSuite",
        "module": "Ideas.Common.Utils.TestSuite",
        "name": "TestSuite",
        "normalized": "",
        "package": "ideas",
        "partial": "Test Suite",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils-TestSuite.html#t:Message",
      "description": {
        "fct-module": "Ideas.Common.Utils.TestSuite",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Common-Utils-TestSuite.html#Message",
        "fct-type": "data",
        "title": "Message"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Utils TestSuite",
        "module": "Ideas.Common.Utils.TestSuite",
        "name": "Message",
        "normalized": "",
        "package": "ideas",
        "partial": "Message",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils-TestSuite.html#t:MonadIO",
      "description": {
        "fct-descr": "\u003cp\u003eMonads in which \u003ccode\u003e\u003ca\u003eIO\u003c/a\u003e\u003c/code\u003e computations may be embedded.\n Any monad built by applying a sequence of monad transformers to the\n \u003ccode\u003e\u003ca\u003eIO\u003c/a\u003e\u003c/code\u003e monad will be an instance of this class.\n\u003c/p\u003e\u003cp\u003eInstances should satisfy the following laws, which state that \u003ccode\u003e\u003ca\u003eliftIO\u003c/a\u003e\u003c/code\u003e\n is a transformer of monads:\n\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cpre\u003e\u003ccode\u003e\u003ca\u003eliftIO\u003c/a\u003e\u003c/code\u003e . \u003ccode\u003e\u003ca\u003ereturn\u003c/a\u003e\u003c/code\u003e = \u003ccode\u003e\u003ca\u003ereturn\u003c/a\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/li\u003e\u003cli\u003e\u003cpre\u003e\u003ccode\u003e\u003ca\u003eliftIO\u003c/a\u003e\u003c/code\u003e (m \u003e\u003e= f) = \u003ccode\u003e\u003ca\u003eliftIO\u003c/a\u003e\u003c/code\u003e m \u003e\u003e= (\u003ccode\u003e\u003ca\u003eliftIO\u003c/a\u003e\u003c/code\u003e . f)\u003c/pre\u003e\u003c/li\u003e\u003c/ul\u003e",
        "fct-module": "Ideas.Common.Utils.TestSuite",
        "fct-package": "ideas",
        "fct-signature": "class",
        "fct-type": "class",
        "title": "MonadIO"
      },
      "index": {
        "description": "Monads in which IO computations may be embedded Any monad built by applying sequence of monad transformers to the IO monad will be an instance of this class Instances should satisfy the following laws which state that liftIO is transformer of monads liftIO return return liftIO liftIO liftIO",
        "hierarchy": "Ideas Common Utils TestSuite",
        "module": "Ideas.Common.Utils.TestSuite",
        "name": "MonadIO",
        "normalized": "",
        "package": "ideas",
        "partial": "Monad IO",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils-TestSuite.html#t:TestSuite",
      "description": {
        "fct-module": "Ideas.Common.Utils.TestSuite",
        "fct-package": "ideas",
        "fct-signature": "type",
        "fct-source": "src/Ideas-Common-Utils-TestSuite.html#TestSuite",
        "fct-type": "type",
        "title": "TestSuite"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Utils TestSuite",
        "module": "Ideas.Common.Utils.TestSuite",
        "name": "TestSuite",
        "normalized": "",
        "package": "ideas",
        "partial": "Test Suite",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils-TestSuite.html#t:TestSuiteResult",
      "description": {
        "fct-module": "Ideas.Common.Utils.TestSuite",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Common-Utils-TestSuite.html#TestSuiteResult",
        "fct-type": "data",
        "title": "TestSuiteResult"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Utils TestSuite",
        "module": "Ideas.Common.Utils.TestSuite",
        "name": "TestSuiteResult",
        "normalized": "",
        "package": "ideas",
        "partial": "Test Suite Result",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils-TestSuite.html#v:addProperty",
      "description": {
        "fct-descr": "\u003cp\u003eAdd a QuickCheck property to the test suite. The first argument is\n a label for the property\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Utils.TestSuite",
        "fct-package": "ideas",
        "fct-signature": "String -\u003e prop -\u003e TestSuite",
        "fct-source": "src/Ideas-Common-Utils-TestSuite.html#addProperty",
        "fct-type": "function",
        "title": "addProperty"
      },
      "index": {
        "description": "Add QuickCheck property to the test suite The first argument is label for the property",
        "hierarchy": "Ideas Common Utils TestSuite",
        "module": "Ideas.Common.Utils.TestSuite",
        "name": "addProperty",
        "normalized": "String-\u003ea-\u003eTestSuite",
        "package": "ideas",
        "partial": "Property",
        "signature": "String-\u003eprop-\u003eTestSuite"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils-TestSuite.html#v:addPropertyWith",
      "description": {
        "fct-descr": "\u003cp\u003eAdd a QuickCheck property to the test suite, also providing a test\n configuration (Args)\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Utils.TestSuite",
        "fct-package": "ideas",
        "fct-signature": "String -\u003e Args -\u003e prop -\u003e TestSuite",
        "fct-source": "src/Ideas-Common-Utils-TestSuite.html#addPropertyWith",
        "fct-type": "function",
        "title": "addPropertyWith"
      },
      "index": {
        "description": "Add QuickCheck property to the test suite also providing test configuration Args",
        "hierarchy": "Ideas Common Utils TestSuite",
        "module": "Ideas.Common.Utils.TestSuite",
        "name": "addPropertyWith",
        "normalized": "String-\u003eArgs-\u003ea-\u003eTestSuite",
        "package": "ideas",
        "partial": "Property With",
        "signature": "String-\u003eArgs-\u003eprop-\u003eTestSuite"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils-TestSuite.html#v:assertEquals",
      "description": {
        "fct-module": "Ideas.Common.Utils.TestSuite",
        "fct-package": "ideas",
        "fct-signature": "String -\u003e a -\u003e a -\u003e TestSuite",
        "fct-source": "src/Ideas-Common-Utils-TestSuite.html#assertEquals",
        "fct-type": "function",
        "title": "assertEquals"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Utils TestSuite",
        "module": "Ideas.Common.Utils.TestSuite",
        "name": "assertEquals",
        "normalized": "String-\u003ea-\u003ea-\u003eTestSuite",
        "package": "ideas",
        "partial": "Equals",
        "signature": "String-\u003ea-\u003ea-\u003eTestSuite"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils-TestSuite.html#v:assertIO",
      "description": {
        "fct-module": "Ideas.Common.Utils.TestSuite",
        "fct-package": "ideas",
        "fct-signature": "String -\u003e IO Bool -\u003e TestSuite",
        "fct-source": "src/Ideas-Common-Utils-TestSuite.html#assertIO",
        "fct-type": "function",
        "title": "assertIO"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Utils TestSuite",
        "module": "Ideas.Common.Utils.TestSuite",
        "name": "assertIO",
        "normalized": "String-\u003eIO Bool-\u003eTestSuite",
        "package": "ideas",
        "partial": "IO",
        "signature": "String-\u003eIO Bool-\u003eTestSuite"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils-TestSuite.html#v:assertNull",
      "description": {
        "fct-module": "Ideas.Common.Utils.TestSuite",
        "fct-package": "ideas",
        "fct-signature": "String -\u003e [a] -\u003e TestSuite",
        "fct-source": "src/Ideas-Common-Utils-TestSuite.html#assertNull",
        "fct-type": "function",
        "title": "assertNull"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Utils TestSuite",
        "module": "Ideas.Common.Utils.TestSuite",
        "name": "assertNull",
        "normalized": "String-\u003e[a]-\u003eTestSuite",
        "package": "ideas",
        "partial": "Null",
        "signature": "String-\u003e[a]-\u003eTestSuite"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils-TestSuite.html#v:assertTrue",
      "description": {
        "fct-module": "Ideas.Common.Utils.TestSuite",
        "fct-package": "ideas",
        "fct-signature": "String -\u003e Bool -\u003e TestSuite",
        "fct-source": "src/Ideas-Common-Utils-TestSuite.html#assertTrue",
        "fct-type": "function",
        "title": "assertTrue"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Utils TestSuite",
        "module": "Ideas.Common.Utils.TestSuite",
        "name": "assertTrue",
        "normalized": "String-\u003eBool-\u003eTestSuite",
        "package": "ideas",
        "partial": "True",
        "signature": "String-\u003eBool-\u003eTestSuite"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils-TestSuite.html#v:findSubResult",
      "description": {
        "fct-module": "Ideas.Common.Utils.TestSuite",
        "fct-package": "ideas",
        "fct-signature": "String -\u003e TestSuiteResult -\u003e Maybe TestSuiteResult",
        "fct-source": "src/Ideas-Common-Utils-TestSuite.html#findSubResult",
        "fct-type": "function",
        "title": "findSubResult"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Utils TestSuite",
        "module": "Ideas.Common.Utils.TestSuite",
        "name": "findSubResult",
        "normalized": "String-\u003eTestSuiteResult-\u003eMaybe TestSuiteResult",
        "package": "ideas",
        "partial": "Sub Result",
        "signature": "String-\u003eTestSuiteResult-\u003eMaybe TestSuiteResult"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils-TestSuite.html#v:isError",
      "description": {
        "fct-module": "Ideas.Common.Utils.TestSuite",
        "fct-package": "ideas",
        "fct-signature": "Message -\u003e Bool",
        "fct-source": "src/Ideas-Common-Utils-TestSuite.html#isError",
        "fct-type": "function",
        "title": "isError"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Utils TestSuite",
        "module": "Ideas.Common.Utils.TestSuite",
        "name": "isError",
        "normalized": "Message-\u003eBool",
        "package": "ideas",
        "partial": "Error",
        "signature": "Message-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils-TestSuite.html#v:liftIO",
      "description": {
        "fct-descr": "\u003cp\u003eLift a computation from the \u003ccode\u003e\u003ca\u003eIO\u003c/a\u003e\u003c/code\u003e monad.\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Utils.TestSuite",
        "fct-package": "ideas",
        "fct-signature": "IO a -\u003e m a",
        "fct-type": "method",
        "title": "liftIO"
      },
      "index": {
        "description": "Lift computation from the IO monad",
        "hierarchy": "Ideas Common Utils TestSuite",
        "module": "Ideas.Common.Utils.TestSuite",
        "name": "liftIO",
        "normalized": "IO a-\u003eb a",
        "package": "ideas",
        "partial": "IO",
        "signature": "IO a-\u003em a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils-TestSuite.html#v:makeSummary",
      "description": {
        "fct-module": "Ideas.Common.Utils.TestSuite",
        "fct-package": "ideas",
        "fct-signature": "TestSuiteResult -\u003e String",
        "fct-source": "src/Ideas-Common-Utils-TestSuite.html#makeSummary",
        "fct-type": "function",
        "title": "makeSummary"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Utils TestSuite",
        "module": "Ideas.Common.Utils.TestSuite",
        "name": "makeSummary",
        "normalized": "TestSuiteResult-\u003eString",
        "package": "ideas",
        "partial": "Summary",
        "signature": "TestSuiteResult-\u003eString"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils-TestSuite.html#v:messageLabel",
      "description": {
        "fct-module": "Ideas.Common.Utils.TestSuite",
        "fct-package": "ideas",
        "fct-signature": "Message -\u003e Maybe String",
        "fct-source": "src/Ideas-Common-Utils-TestSuite.html#messageLabel",
        "fct-type": "function",
        "title": "messageLabel"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Utils TestSuite",
        "module": "Ideas.Common.Utils.TestSuite",
        "name": "messageLabel",
        "normalized": "Message-\u003eMaybe String",
        "package": "ideas",
        "partial": "Label",
        "signature": "Message-\u003eMaybe String"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils-TestSuite.html#v:messages",
      "description": {
        "fct-module": "Ideas.Common.Utils.TestSuite",
        "fct-package": "ideas",
        "fct-signature": "TestSuiteResult -\u003e [Message]",
        "fct-source": "src/Ideas-Common-Utils-TestSuite.html#messages",
        "fct-type": "function",
        "title": "messages"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Utils TestSuite",
        "module": "Ideas.Common.Utils.TestSuite",
        "name": "messages",
        "normalized": "TestSuiteResult-\u003e[Message]",
        "package": "ideas",
        "partial": "",
        "signature": "TestSuiteResult-\u003e[Message]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils-TestSuite.html#v:newMessage",
      "description": {
        "fct-module": "Ideas.Common.Utils.TestSuite",
        "fct-package": "ideas",
        "fct-signature": "String -\u003e Message",
        "fct-source": "src/Ideas-Common-Utils-TestSuite.html#newMessage",
        "fct-type": "function",
        "title": "newMessage"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Utils TestSuite",
        "module": "Ideas.Common.Utils.TestSuite",
        "name": "newMessage",
        "normalized": "String-\u003eMessage",
        "package": "ideas",
        "partial": "Message",
        "signature": "String-\u003eMessage"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils-TestSuite.html#v:numberOfTests",
      "description": {
        "fct-module": "Ideas.Common.Utils.TestSuite",
        "fct-package": "ideas",
        "fct-signature": "TestSuiteResult -\u003e Int",
        "fct-source": "src/Ideas-Common-Utils-TestSuite.html#numberOfTests",
        "fct-type": "function",
        "title": "numberOfTests"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Utils TestSuite",
        "module": "Ideas.Common.Utils.TestSuite",
        "name": "numberOfTests",
        "normalized": "TestSuiteResult-\u003eInt",
        "package": "ideas",
        "partial": "Of Tests",
        "signature": "TestSuiteResult-\u003eInt"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils-TestSuite.html#v:printSummary",
      "description": {
        "fct-module": "Ideas.Common.Utils.TestSuite",
        "fct-package": "ideas",
        "fct-signature": "TestSuiteResult -\u003e IO ()",
        "fct-source": "src/Ideas-Common-Utils-TestSuite.html#printSummary",
        "fct-type": "function",
        "title": "printSummary"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Utils TestSuite",
        "module": "Ideas.Common.Utils.TestSuite",
        "name": "printSummary",
        "normalized": "TestSuiteResult-\u003eIO()",
        "package": "ideas",
        "partial": "Summary",
        "signature": "TestSuiteResult-\u003eIO()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils-TestSuite.html#v:runTestSuite",
      "description": {
        "fct-module": "Ideas.Common.Utils.TestSuite",
        "fct-package": "ideas",
        "fct-signature": "TestSuite -\u003e IO ()",
        "fct-source": "src/Ideas-Common-Utils-TestSuite.html#runTestSuite",
        "fct-type": "function",
        "title": "runTestSuite"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Utils TestSuite",
        "module": "Ideas.Common.Utils.TestSuite",
        "name": "runTestSuite",
        "normalized": "TestSuite-\u003eIO()",
        "package": "ideas",
        "partial": "Test Suite",
        "signature": "TestSuite-\u003eIO()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils-TestSuite.html#v:runTestSuiteResult",
      "description": {
        "fct-module": "Ideas.Common.Utils.TestSuite",
        "fct-package": "ideas",
        "fct-signature": "TestSuite -\u003e IO TestSuiteResult",
        "fct-source": "src/Ideas-Common-Utils-TestSuite.html#runTestSuiteResult",
        "fct-type": "function",
        "title": "runTestSuiteResult"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Utils TestSuite",
        "module": "Ideas.Common.Utils.TestSuite",
        "name": "runTestSuiteResult",
        "normalized": "TestSuite-\u003eIO TestSuiteResult",
        "package": "ideas",
        "partial": "Test Suite Result",
        "signature": "TestSuite-\u003eIO TestSuiteResult"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils-TestSuite.html#v:subResults",
      "description": {
        "fct-module": "Ideas.Common.Utils.TestSuite",
        "fct-package": "ideas",
        "fct-signature": "TestSuiteResult -\u003e [(String, TestSuiteResult)]",
        "fct-source": "src/Ideas-Common-Utils-TestSuite.html#subResults",
        "fct-type": "function",
        "title": "subResults"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Utils TestSuite",
        "module": "Ideas.Common.Utils.TestSuite",
        "name": "subResults",
        "normalized": "TestSuiteResult-\u003e[(String,TestSuiteResult)]",
        "package": "ideas",
        "partial": "Results",
        "signature": "TestSuiteResult-\u003e[(String,TestSuiteResult)]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils-TestSuite.html#v:suite",
      "description": {
        "fct-descr": "\u003cp\u003eConstruct a (named) test suite containing tests and other suites\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Utils.TestSuite",
        "fct-package": "ideas",
        "fct-signature": "String -\u003e TestSuite -\u003e TestSuite",
        "fct-source": "src/Ideas-Common-Utils-TestSuite.html#suite",
        "fct-type": "function",
        "title": "suite"
      },
      "index": {
        "description": "Construct named test suite containing tests and other suites",
        "hierarchy": "Ideas Common Utils TestSuite",
        "module": "Ideas.Common.Utils.TestSuite",
        "name": "suite",
        "normalized": "String-\u003eTestSuite-\u003eTestSuite",
        "package": "ideas",
        "partial": "",
        "signature": "String-\u003eTestSuite-\u003eTestSuite"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils-TestSuite.html#v:topMessages",
      "description": {
        "fct-module": "Ideas.Common.Utils.TestSuite",
        "fct-package": "ideas",
        "fct-signature": "TestSuiteResult -\u003e [Message]",
        "fct-source": "src/Ideas-Common-Utils-TestSuite.html#topMessages",
        "fct-type": "function",
        "title": "topMessages"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Utils TestSuite",
        "module": "Ideas.Common.Utils.TestSuite",
        "name": "topMessages",
        "normalized": "TestSuiteResult-\u003e[Message]",
        "package": "ideas",
        "partial": "Messages",
        "signature": "TestSuiteResult-\u003e[Message]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils-TestSuite.html#v:warn",
      "description": {
        "fct-module": "Ideas.Common.Utils.TestSuite",
        "fct-package": "ideas",
        "fct-signature": "String -\u003e TestSuite",
        "fct-source": "src/Ideas-Common-Utils-TestSuite.html#warn",
        "fct-type": "function",
        "title": "warn"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Utils TestSuite",
        "module": "Ideas.Common.Utils.TestSuite",
        "name": "warn",
        "normalized": "String-\u003eTestSuite",
        "package": "ideas",
        "partial": "",
        "signature": "String-\u003eTestSuite"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils-TestSuite.html#v:warning",
      "description": {
        "fct-module": "Ideas.Common.Utils.TestSuite",
        "fct-package": "ideas",
        "fct-signature": "Message -\u003e Message",
        "fct-source": "src/Ideas-Common-Utils-TestSuite.html#warning",
        "fct-type": "function",
        "title": "warning"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Utils TestSuite",
        "module": "Ideas.Common.Utils.TestSuite",
        "name": "warning",
        "normalized": "Message-\u003eMessage",
        "package": "ideas",
        "partial": "",
        "signature": "Message-\u003eMessage"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils-Uniplate.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eExports a subset of Data.Generics.Uniplate.Direct (the \u003ccode\u003eUniplate\u003c/code\u003e type\n class and its utility plus constructor functions)\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "Ideas.Common.Utils.Uniplate",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Common-Utils-Uniplate.html",
        "fct-type": "module",
        "title": "Uniplate"
      },
      "index": {
        "description": "Exports subset of Data.Generics.Uniplate.Direct the Uniplate type class and its utility plus constructor functions",
        "hierarchy": "Ideas Common Utils Uniplate",
        "module": "Ideas.Common.Utils.Uniplate",
        "name": "Uniplate",
        "normalized": "",
        "package": "ideas",
        "partial": "Uniplate",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils-Uniplate.html#t:Uniplate",
      "description": {
        "fct-descr": "\u003cp\u003eThe standard Uniplate class, all operations require this. All definitions must\n   define \u003ccode\u003e\u003ca\u003euniplate\u003c/a\u003e\u003c/code\u003e, while \u003ccode\u003e\u003ca\u003edescend\u003c/a\u003e\u003c/code\u003e and \u003ccode\u003e\u003ca\u003edescendM\u003c/a\u003e\u003c/code\u003e are optional.\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Utils.Uniplate",
        "fct-package": "ideas",
        "fct-signature": "class",
        "fct-type": "class",
        "title": "Uniplate"
      },
      "index": {
        "description": "The standard Uniplate class all operations require this All definitions must define uniplate while descend and descendM are optional",
        "hierarchy": "Ideas Common Utils Uniplate",
        "module": "Ideas.Common.Utils.Uniplate",
        "name": "Uniplate",
        "normalized": "",
        "package": "ideas",
        "partial": "Uniplate",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils-Uniplate.html#v:-124--124--42-",
      "description": {
        "fct-descr": "\u003cp\u003eThe field to the right is a list of the type of the target\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Utils.Uniplate",
        "fct-package": "ideas",
        "fct-signature": "Type ([to] -\u003e from) to -\u003e [to] -\u003e Type from to",
        "fct-type": "function",
        "title": "(||*)"
      },
      "index": {
        "description": "The field to the right is list of the type of the target",
        "hierarchy": "Ideas Common Utils Uniplate",
        "module": "Ideas.Common.Utils.Uniplate",
        "name": "(||*) ||*",
        "normalized": "Type([a]-\u003eb)a-\u003e[a]-\u003eType b a",
        "package": "ideas",
        "partial": "",
        "signature": "Type([to]-\u003efrom)to-\u003e[to]-\u003eType from to"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils-Uniplate.html#v:-124--42-",
      "description": {
        "fct-descr": "\u003cp\u003eThe field to the right is the target.\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Utils.Uniplate",
        "fct-package": "ideas",
        "fct-signature": "Type (to -\u003e from) to -\u003e to -\u003e Type from to",
        "fct-type": "function",
        "title": "(|*)"
      },
      "index": {
        "description": "The field to the right is the target",
        "hierarchy": "Ideas Common Utils Uniplate",
        "module": "Ideas.Common.Utils.Uniplate",
        "name": "(|*) |*",
        "normalized": "Type(a-\u003eb)a-\u003ea-\u003eType b a",
        "package": "ideas",
        "partial": "",
        "signature": "Type(to-\u003efrom)to-\u003eto-\u003eType from to"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils-Uniplate.html#v:-124--45-",
      "description": {
        "fct-descr": "\u003cp\u003eThe field to the right \u003cem\u003edoes not\u003c/em\u003e contain the target.\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Utils.Uniplate",
        "fct-package": "ideas",
        "fct-signature": "Type (item -\u003e from) to -\u003e item -\u003e Type from to",
        "fct-type": "function",
        "title": "(|-)"
      },
      "index": {
        "description": "The field to the right does not contain the target",
        "hierarchy": "Ideas Common Utils Uniplate",
        "module": "Ideas.Common.Utils.Uniplate",
        "name": "(|-) |-",
        "normalized": "Type(a-\u003eb)c-\u003ea-\u003eType b c",
        "package": "ideas",
        "partial": "",
        "signature": "Type(item-\u003efrom)to-\u003eitem-\u003eType from to"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils-Uniplate.html#v:children",
      "description": {
        "fct-descr": "\u003cp\u003eGet the direct children of a node. Usually using \u003ccode\u003e\u003ca\u003euniverse\u003c/a\u003e\u003c/code\u003e is more appropriate.\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Utils.Uniplate",
        "fct-package": "ideas",
        "fct-signature": "on -\u003e [on]",
        "fct-type": "function",
        "title": "children"
      },
      "index": {
        "description": "Get the direct children of node Usually using universe is more appropriate",
        "hierarchy": "Ideas Common Utils Uniplate",
        "module": "Ideas.Common.Utils.Uniplate",
        "name": "children",
        "normalized": "a-\u003e[a]",
        "package": "ideas",
        "partial": "",
        "signature": "on-\u003e[on]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils-Uniplate.html#v:contexts",
      "description": {
        "fct-descr": "\u003cp\u003eReturn all the contexts and holes.\n\u003c/p\u003e\u003cpre\u003e universe x == map fst (contexts x)\n all (== x) [b a | (a,b) \u003c- contexts x]\n\u003c/pre\u003e",
        "fct-module": "Ideas.Common.Utils.Uniplate",
        "fct-package": "ideas",
        "fct-signature": "on -\u003e [(on, on -\u003e on)]",
        "fct-type": "function",
        "title": "contexts"
      },
      "index": {
        "description": "Return all the contexts and holes universe map fst contexts all contexts",
        "hierarchy": "Ideas Common Utils Uniplate",
        "module": "Ideas.Common.Utils.Uniplate",
        "name": "contexts",
        "normalized": "a-\u003e[(a,a-\u003ea)]",
        "package": "ideas",
        "partial": "",
        "signature": "on-\u003e[(on,on-\u003eon)]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils-Uniplate.html#v:descend",
      "description": {
        "fct-descr": "\u003cp\u003ePerform a transformation on all the immediate children, then combine them back.\n   This operation allows additional information to be passed downwards, and can be\n   used to provide a top-down transformation. This function can be defined explicitly,\n   or can be provided by automatically in terms of \u003ccode\u003e\u003ca\u003euniplate\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e\u003cp\u003eFor example, on the sample type, we could write:\n\u003c/p\u003e\u003cpre\u003e descend f (Val i  ) = Val i\n descend f (Neg a  ) = Neg (f a)\n descend f (Add a b) = Add (f a) (f b)\n\u003c/pre\u003e",
        "fct-module": "Ideas.Common.Utils.Uniplate",
        "fct-package": "ideas",
        "fct-signature": "(on -\u003e on) -\u003e on -\u003e on",
        "fct-type": "function",
        "title": "descend"
      },
      "index": {
        "description": "Perform transformation on all the immediate children then combine them back This operation allows additional information to be passed downwards and can be used to provide top-down transformation This function can be defined explicitly or can be provided by automatically in terms of uniplate For example on the sample type we could write descend Val Val descend Neg Neg descend Add Add",
        "hierarchy": "Ideas Common Utils Uniplate",
        "module": "Ideas.Common.Utils.Uniplate",
        "name": "descend",
        "normalized": "(a-\u003ea)-\u003ea-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "(on-\u003eon)-\u003eon-\u003eon"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils-Uniplate.html#v:descendM",
      "description": {
        "fct-descr": "\u003cp\u003eMonadic variant of \u003ccode\u003e\u003ca\u003edescend\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Utils.Uniplate",
        "fct-package": "ideas",
        "fct-signature": "(on -\u003e m on) -\u003e on -\u003e m on",
        "fct-type": "function",
        "title": "descendM"
      },
      "index": {
        "description": "Monadic variant of descend",
        "hierarchy": "Ideas Common Utils Uniplate",
        "module": "Ideas.Common.Utils.Uniplate",
        "name": "descendM",
        "normalized": "(a-\u003eb a)-\u003ea-\u003eb a",
        "package": "ideas",
        "partial": "",
        "signature": "(on-\u003em on)-\u003eon-\u003em on"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils-Uniplate.html#v:holes",
      "description": {
        "fct-descr": "\u003cp\u003eThe one depth version of \u003ccode\u003e\u003ca\u003econtexts\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e\u003cpre\u003e children x == map fst (holes x)\n all (== x) [b a | (a,b) \u003c- holes x]\n\u003c/pre\u003e",
        "fct-module": "Ideas.Common.Utils.Uniplate",
        "fct-package": "ideas",
        "fct-signature": "on -\u003e [(on, on -\u003e on)]",
        "fct-type": "function",
        "title": "holes"
      },
      "index": {
        "description": "The one depth version of contexts children map fst holes all holes",
        "hierarchy": "Ideas Common Utils Uniplate",
        "module": "Ideas.Common.Utils.Uniplate",
        "name": "holes",
        "normalized": "a-\u003e[(a,a-\u003ea)]",
        "package": "ideas",
        "partial": "",
        "signature": "on-\u003e[(on,on-\u003eon)]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils-Uniplate.html#v:para",
      "description": {
        "fct-descr": "\u003cp\u003ePerform a fold-like computation on each value,\n   technically a paramorphism\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Utils.Uniplate",
        "fct-package": "ideas",
        "fct-signature": "(on -\u003e [r] -\u003e r) -\u003e on -\u003e r",
        "fct-type": "function",
        "title": "para"
      },
      "index": {
        "description": "Perform fold-like computation on each value technically paramorphism",
        "hierarchy": "Ideas Common Utils Uniplate",
        "module": "Ideas.Common.Utils.Uniplate",
        "name": "para",
        "normalized": "(a-\u003e[b]-\u003eb)-\u003ea-\u003eb",
        "package": "ideas",
        "partial": "",
        "signature": "(on-\u003e[r]-\u003er)-\u003eon-\u003er"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils-Uniplate.html#v:plate",
      "description": {
        "fct-descr": "\u003cp\u003eThe main combinator used to start the chain.\n\u003c/p\u003e\u003cp\u003eThe following rule can be used for optimisation:\n\u003c/p\u003e\u003cpre\u003e plate Ctor |- x == plate (Ctor x)\n\u003c/pre\u003e",
        "fct-module": "Ideas.Common.Utils.Uniplate",
        "fct-package": "ideas",
        "fct-signature": "from -\u003e Type from to",
        "fct-type": "function",
        "title": "plate"
      },
      "index": {
        "description": "The main combinator used to start the chain The following rule can be used for optimisation plate Ctor plate Ctor",
        "hierarchy": "Ideas Common Utils Uniplate",
        "module": "Ideas.Common.Utils.Uniplate",
        "name": "plate",
        "normalized": "a-\u003eType a b",
        "package": "ideas",
        "partial": "",
        "signature": "from-\u003eType from to"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils-Uniplate.html#v:rewrite",
      "description": {
        "fct-descr": "\u003cp\u003eRewrite by applying a rule everywhere you can. Ensures that the rule cannot\n be applied anywhere in the result:\n\u003c/p\u003e\u003cpre\u003e propRewrite r x = all (isNothing . r) (universe (rewrite r x))\n\u003c/pre\u003e\u003cp\u003eUsually \u003ccode\u003e\u003ca\u003etransform\u003c/a\u003e\u003c/code\u003e is more appropriate, but \u003ccode\u003e\u003ca\u003erewrite\u003c/a\u003e\u003c/code\u003e can give better\n compositionality. Given two single transformations \u003ccode\u003ef\u003c/code\u003e and \u003ccode\u003eg\u003c/code\u003e, you can\n construct \u003ccode\u003ef \u003ccode\u003e\u003ca\u003emplus\u003c/a\u003e\u003c/code\u003e g\u003c/code\u003e which performs both rewrites until a fixed point.\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Utils.Uniplate",
        "fct-package": "ideas",
        "fct-signature": "(on -\u003e Maybe on) -\u003e on -\u003e on",
        "fct-type": "function",
        "title": "rewrite"
      },
      "index": {
        "description": "Rewrite by applying rule everywhere you can Ensures that the rule cannot be applied anywhere in the result propRewrite all isNothing universe rewrite Usually transform is more appropriate but rewrite can give better compositionality Given two single transformations and you can construct mplus which performs both rewrites until fixed point",
        "hierarchy": "Ideas Common Utils Uniplate",
        "module": "Ideas.Common.Utils.Uniplate",
        "name": "rewrite",
        "normalized": "(a-\u003eMaybe a)-\u003ea-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "(on-\u003eMaybe on)-\u003eon-\u003eon"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils-Uniplate.html#v:rewriteM",
      "description": {
        "fct-descr": "\u003cp\u003eMonadic variant of \u003ccode\u003e\u003ca\u003erewrite\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Utils.Uniplate",
        "fct-package": "ideas",
        "fct-signature": "(on -\u003e m (Maybe on)) -\u003e on -\u003e m on",
        "fct-type": "function",
        "title": "rewriteM"
      },
      "index": {
        "description": "Monadic variant of rewrite",
        "hierarchy": "Ideas Common Utils Uniplate",
        "module": "Ideas.Common.Utils.Uniplate",
        "name": "rewriteM",
        "normalized": "(a-\u003eb(Maybe a))-\u003ea-\u003eb a",
        "package": "ideas",
        "partial": "",
        "signature": "(on-\u003em(Maybe on))-\u003eon-\u003em on"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils-Uniplate.html#v:transform",
      "description": {
        "fct-descr": "\u003cp\u003eTransform every element in the tree, in a bottom-up manner.\n\u003c/p\u003e\u003cp\u003eFor example, replacing negative literals with literals:\n\u003c/p\u003e\u003cpre\u003e negLits = transform f\n    where f (Neg (Lit i)) = Lit (negate i)\n          f x = x\n\u003c/pre\u003e",
        "fct-module": "Ideas.Common.Utils.Uniplate",
        "fct-package": "ideas",
        "fct-signature": "(on -\u003e on) -\u003e on -\u003e on",
        "fct-type": "function",
        "title": "transform"
      },
      "index": {
        "description": "Transform every element in the tree in bottom-up manner For example replacing negative literals with literals negLits transform where Neg Lit Lit negate",
        "hierarchy": "Ideas Common Utils Uniplate",
        "module": "Ideas.Common.Utils.Uniplate",
        "name": "transform",
        "normalized": "(a-\u003ea)-\u003ea-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "(on-\u003eon)-\u003eon-\u003eon"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils-Uniplate.html#v:transformM",
      "description": {
        "fct-descr": "\u003cp\u003eMonadic variant of \u003ccode\u003e\u003ca\u003etransform\u003c/a\u003e\u003c/code\u003e\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Utils.Uniplate",
        "fct-package": "ideas",
        "fct-signature": "(on -\u003e m on) -\u003e on -\u003e m on",
        "fct-type": "function",
        "title": "transformM"
      },
      "index": {
        "description": "Monadic variant of transform",
        "hierarchy": "Ideas Common Utils Uniplate",
        "module": "Ideas.Common.Utils.Uniplate",
        "name": "transformM",
        "normalized": "(a-\u003eb a)-\u003ea-\u003eb a",
        "package": "ideas",
        "partial": "",
        "signature": "(on-\u003em on)-\u003eon-\u003em on"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils-Uniplate.html#v:uniplate",
      "description": {
        "fct-descr": "\u003cp\u003eThe underlying method in the class.\n   Taking a value, the function should return all the immediate children\n   of the same type, and a function to replace them.\n\u003c/p\u003e\u003cp\u003eGiven \u003ccode\u003euniplate x = (cs, gen)\u003c/code\u003e\n\u003c/p\u003e\u003cp\u003e\u003ccode\u003ecs\u003c/code\u003e should be a \u003ccode\u003eStr on\u003c/code\u003e, constructed of \u003ccode\u003eZero\u003c/code\u003e, \u003ccode\u003eOne\u003c/code\u003e and \u003ccode\u003eTwo\u003c/code\u003e,\n   containing all \u003ccode\u003ex\u003c/code\u003e's direct children of the same type as \u003ccode\u003ex\u003c/code\u003e. \u003ccode\u003egen\u003c/code\u003e\n   should take a \u003ccode\u003eStr on\u003c/code\u003e with exactly the same structure as \u003ccode\u003ecs\u003c/code\u003e,\n   and generate a new element with the children replaced.\n\u003c/p\u003e\u003cp\u003eExample instance:\n\u003c/p\u003e\u003cpre\u003e instance Uniplate Expr where\n     uniplate (Val i  ) = (Zero               , \\Zero                  -\u003e Val i  )\n     uniplate (Neg a  ) = (One a              , \\(One a)               -\u003e Neg a  )\n     uniplate (Add a b) = (Two (One a) (One b), \\(Two (One a) (One b)) -\u003e Add a b)\n\u003c/pre\u003e",
        "fct-module": "Ideas.Common.Utils.Uniplate",
        "fct-package": "ideas",
        "fct-signature": "on -\u003e (Str on, Str on -\u003e on)",
        "fct-type": "function",
        "title": "uniplate"
      },
      "index": {
        "description": "The underlying method in the class Taking value the function should return all the immediate children of the same type and function to replace them Given uniplate cs gen cs should be Str on constructed of Zero One and Two containing all direct children of the same type as gen should take Str on with exactly the same structure as cs and generate new element with the children replaced Example instance instance Uniplate Expr where uniplate Val Zero Zero Val uniplate Neg One One Neg uniplate Add Two One One Two One One Add",
        "hierarchy": "Ideas Common Utils Uniplate",
        "module": "Ideas.Common.Utils.Uniplate",
        "name": "uniplate",
        "normalized": "a-\u003e(Str a,Str a-\u003ea)",
        "package": "ideas",
        "partial": "",
        "signature": "on-\u003e(Str on,Str on-\u003eon)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils-Uniplate.html#v:universe",
      "description": {
        "fct-descr": "\u003cp\u003eGet all the children of a node, including itself and all children.\n\u003c/p\u003e\u003cpre\u003e universe (Add (Val 1) (Neg (Val 2))) =\n     [Add (Val 1) (Neg (Val 2)), Val 1, Neg (Val 2), Val 2]\n\u003c/pre\u003e\u003cp\u003eThis method is often combined with a list comprehension, for example:\n\u003c/p\u003e\u003cpre\u003e vals x = [i | Val i \u003c- universe x]\n\u003c/pre\u003e",
        "fct-module": "Ideas.Common.Utils.Uniplate",
        "fct-package": "ideas",
        "fct-signature": "on -\u003e [on]",
        "fct-type": "function",
        "title": "universe"
      },
      "index": {
        "description": "Get all the children of node including itself and all children universe Add Val Neg Val Add Val Neg Val Val Neg Val Val This method is often combined with list comprehension for example vals Val universe",
        "hierarchy": "Ideas Common Utils Uniplate",
        "module": "Ideas.Common.Utils.Uniplate",
        "name": "universe",
        "normalized": "a-\u003e[a]",
        "package": "ideas",
        "partial": "",
        "signature": "on-\u003e[on]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eA collection of general utility functions\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "Ideas.Common.Utils",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Common-Utils.html",
        "fct-type": "module",
        "title": "Utils"
      },
      "index": {
        "description": "collection of general utility functions",
        "hierarchy": "Ideas Common Utils",
        "module": "Ideas.Common.Utils",
        "name": "Utils",
        "normalized": "",
        "package": "ideas",
        "partial": "Utils",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils.html#t:ShowString",
      "description": {
        "fct-module": "Ideas.Common.Utils",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Common-Utils.html#ShowString",
        "fct-type": "data",
        "title": "ShowString"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Utils",
        "module": "Ideas.Common.Utils",
        "name": "ShowString",
        "normalized": "",
        "package": "ideas",
        "partial": "Show String",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils.html#t:Some",
      "description": {
        "fct-module": "Ideas.Common.Utils",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Common-Utils.html#Some",
        "fct-type": "data",
        "title": "Some"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Utils",
        "module": "Ideas.Common.Utils",
        "name": "Some",
        "normalized": "",
        "package": "ideas",
        "partial": "Some",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils.html#v:ShowString",
      "description": {
        "fct-module": "Ideas.Common.Utils",
        "fct-package": "ideas",
        "fct-signature": "ShowString",
        "fct-source": "src/Ideas-Common-Utils.html#ShowString",
        "fct-type": "function",
        "title": "ShowString"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Utils",
        "module": "Ideas.Common.Utils",
        "name": "ShowString",
        "normalized": "",
        "package": "ideas",
        "partial": "Show String",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils.html#v:Some",
      "description": {
        "fct-module": "Ideas.Common.Utils",
        "fct-package": "ideas",
        "fct-signature": "forall a . Some (f a)",
        "fct-source": "src/Ideas-Common-Utils.html#Some",
        "fct-type": "function",
        "title": "Some"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Utils",
        "module": "Ideas.Common.Utils",
        "name": "Some",
        "normalized": "",
        "package": "ideas",
        "partial": "Some",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils.html#v:allsame",
      "description": {
        "fct-module": "Ideas.Common.Utils",
        "fct-package": "ideas",
        "fct-signature": "[a] -\u003e Bool",
        "fct-source": "src/Ideas-Common-Utils.html#allsame",
        "fct-type": "function",
        "title": "allsame"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Utils",
        "module": "Ideas.Common.Utils",
        "name": "allsame",
        "normalized": "[a]-\u003eBool",
        "package": "ideas",
        "partial": "",
        "signature": "[a]-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils.html#v:cartesian",
      "description": {
        "fct-module": "Ideas.Common.Utils",
        "fct-package": "ideas",
        "fct-signature": "[a] -\u003e [b] -\u003e [(a, b)]",
        "fct-source": "src/Ideas-Common-Utils.html#cartesian",
        "fct-type": "function",
        "title": "cartesian"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Utils",
        "module": "Ideas.Common.Utils",
        "name": "cartesian",
        "normalized": "[a]-\u003e[b]-\u003e[(a,b)]",
        "package": "ideas",
        "partial": "",
        "signature": "[a]-\u003e[b]-\u003e[(a,b)]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils.html#v:changeAt",
      "description": {
        "fct-module": "Ideas.Common.Utils",
        "fct-package": "ideas",
        "fct-signature": "Int -\u003e (a -\u003e a) -\u003e [a] -\u003e m [a]",
        "fct-source": "src/Ideas-Common-Utils.html#changeAt",
        "fct-type": "function",
        "title": "changeAt"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Utils",
        "module": "Ideas.Common.Utils",
        "name": "changeAt",
        "normalized": "Int-\u003e(a-\u003ea)-\u003e[a]-\u003eb[a]",
        "package": "ideas",
        "partial": "At",
        "signature": "Int-\u003e(a-\u003ea)-\u003e[a]-\u003em[a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils.html#v:distinct",
      "description": {
        "fct-module": "Ideas.Common.Utils",
        "fct-package": "ideas",
        "fct-signature": "[a] -\u003e Bool",
        "fct-source": "src/Ideas-Common-Utils.html#distinct",
        "fct-type": "function",
        "title": "distinct"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Utils",
        "module": "Ideas.Common.Utils",
        "name": "distinct",
        "normalized": "[a]-\u003eBool",
        "package": "ideas",
        "partial": "",
        "signature": "[a]-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils.html#v:elementAt",
      "description": {
        "fct-module": "Ideas.Common.Utils",
        "fct-package": "ideas",
        "fct-signature": "Int -\u003e [a] -\u003e m a",
        "fct-source": "src/Ideas-Common-Utils.html#elementAt",
        "fct-type": "function",
        "title": "elementAt"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Utils",
        "module": "Ideas.Common.Utils",
        "name": "elementAt",
        "normalized": "Int-\u003e[a]-\u003eb a",
        "package": "ideas",
        "partial": "At",
        "signature": "Int-\u003e[a]-\u003em a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils.html#v:findIndexM",
      "description": {
        "fct-module": "Ideas.Common.Utils",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e Bool) -\u003e [a] -\u003e m Int",
        "fct-source": "src/Ideas-Common-Utils.html#findIndexM",
        "fct-type": "function",
        "title": "findIndexM"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Utils",
        "module": "Ideas.Common.Utils",
        "name": "findIndexM",
        "normalized": "(a-\u003eBool)-\u003e[a]-\u003eb Int",
        "package": "ideas",
        "partial": "Index",
        "signature": "(a-\u003eBool)-\u003e[a]-\u003em Int"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils.html#v:fixpoint",
      "description": {
        "fct-module": "Ideas.Common.Utils",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e a) -\u003e a -\u003e a",
        "fct-source": "src/Ideas-Common-Utils.html#fixpoint",
        "fct-type": "function",
        "title": "fixpoint"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Utils",
        "module": "Ideas.Common.Utils",
        "name": "fixpoint",
        "normalized": "(a-\u003ea)-\u003ea-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "(a-\u003ea)-\u003ea-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils.html#v:fromShowString",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Common.Utils",
        "fct-package": "ideas",
        "fct-signature": "String",
        "fct-source": "src/Ideas-Common-Utils.html#ShowString",
        "fct-type": "function",
        "title": "fromShowString"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Utils",
        "module": "Ideas.Common.Utils",
        "name": "fromShowString",
        "normalized": "",
        "package": "ideas",
        "partial": "Show String",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils.html#v:fst3",
      "description": {
        "fct-module": "Ideas.Common.Utils",
        "fct-package": "ideas",
        "fct-signature": "(a, b, c) -\u003e a",
        "fct-source": "src/Ideas-Common-Utils.html#fst3",
        "fct-type": "function",
        "title": "fst3"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Utils",
        "module": "Ideas.Common.Utils",
        "name": "fst3",
        "normalized": "(a,b,c)-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "(a,b,c)-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils.html#v:headM",
      "description": {
        "fct-module": "Ideas.Common.Utils",
        "fct-package": "ideas",
        "fct-signature": "[a] -\u003e m a",
        "fct-source": "src/Ideas-Common-Utils.html#headM",
        "fct-type": "function",
        "title": "headM"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Utils",
        "module": "Ideas.Common.Utils",
        "name": "headM",
        "normalized": "[a]-\u003eb a",
        "package": "ideas",
        "partial": "",
        "signature": "[a]-\u003em a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils.html#v:isSubsetOf",
      "description": {
        "fct-module": "Ideas.Common.Utils",
        "fct-package": "ideas",
        "fct-signature": "[a] -\u003e [a] -\u003e Bool",
        "fct-source": "src/Ideas-Common-Utils.html#isSubsetOf",
        "fct-type": "function",
        "title": "isSubsetOf"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Utils",
        "module": "Ideas.Common.Utils",
        "name": "isSubsetOf",
        "normalized": "[a]-\u003e[a]-\u003eBool",
        "package": "ideas",
        "partial": "Subset Of",
        "signature": "[a]-\u003e[a]-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils.html#v:list",
      "description": {
        "fct-module": "Ideas.Common.Utils",
        "fct-package": "ideas",
        "fct-signature": "b -\u003e ([a] -\u003e b) -\u003e [a] -\u003e b",
        "fct-source": "src/Ideas-Common-Utils.html#list",
        "fct-type": "function",
        "title": "list"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Utils",
        "module": "Ideas.Common.Utils",
        "name": "list",
        "normalized": "a-\u003e([b]-\u003ea)-\u003e[b]-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "b-\u003e([a]-\u003eb)-\u003e[a]-\u003eb"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils.html#v:readInt",
      "description": {
        "fct-module": "Ideas.Common.Utils",
        "fct-package": "ideas",
        "fct-signature": "String -\u003e Maybe Int",
        "fct-source": "src/Ideas-Common-Utils.html#readInt",
        "fct-type": "function",
        "title": "readInt"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Utils",
        "module": "Ideas.Common.Utils",
        "name": "readInt",
        "normalized": "String-\u003eMaybe Int",
        "package": "ideas",
        "partial": "Int",
        "signature": "String-\u003eMaybe Int"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils.html#v:readM",
      "description": {
        "fct-module": "Ideas.Common.Utils",
        "fct-package": "ideas",
        "fct-signature": "String -\u003e m a",
        "fct-source": "src/Ideas-Common-Utils.html#readM",
        "fct-type": "function",
        "title": "readM"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Utils",
        "module": "Ideas.Common.Utils",
        "name": "readM",
        "normalized": "String-\u003ea b",
        "package": "ideas",
        "partial": "",
        "signature": "String-\u003em a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils.html#v:replaceAt",
      "description": {
        "fct-module": "Ideas.Common.Utils",
        "fct-package": "ideas",
        "fct-signature": "Int -\u003e a -\u003e [a] -\u003e m [a]",
        "fct-source": "src/Ideas-Common-Utils.html#replaceAt",
        "fct-type": "function",
        "title": "replaceAt"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Utils",
        "module": "Ideas.Common.Utils",
        "name": "replaceAt",
        "normalized": "Int-\u003ea-\u003e[a]-\u003eb[a]",
        "package": "ideas",
        "partial": "At",
        "signature": "Int-\u003ea-\u003e[a]-\u003em[a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils.html#v:snd3",
      "description": {
        "fct-module": "Ideas.Common.Utils",
        "fct-package": "ideas",
        "fct-signature": "(a, b, c) -\u003e b",
        "fct-source": "src/Ideas-Common-Utils.html#snd3",
        "fct-type": "function",
        "title": "snd3"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Utils",
        "module": "Ideas.Common.Utils",
        "name": "snd3",
        "normalized": "(a,b,c)-\u003eb",
        "package": "ideas",
        "partial": "",
        "signature": "(a,b,c)-\u003eb"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils.html#v:splitAtElem",
      "description": {
        "fct-module": "Ideas.Common.Utils",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e [a] -\u003e Maybe ([a], [a])",
        "fct-source": "src/Ideas-Common-Utils.html#splitAtElem",
        "fct-type": "function",
        "title": "splitAtElem"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Utils",
        "module": "Ideas.Common.Utils",
        "name": "splitAtElem",
        "normalized": "a-\u003e[a]-\u003eMaybe([a],[a])",
        "package": "ideas",
        "partial": "At Elem",
        "signature": "a-\u003e[a]-\u003eMaybe([a],[a])"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils.html#v:splitsWithElem",
      "description": {
        "fct-module": "Ideas.Common.Utils",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e [a] -\u003e [[a]]",
        "fct-source": "src/Ideas-Common-Utils.html#splitsWithElem",
        "fct-type": "function",
        "title": "splitsWithElem"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Utils",
        "module": "Ideas.Common.Utils",
        "name": "splitsWithElem",
        "normalized": "a-\u003e[a]-\u003e[[a]]",
        "package": "ideas",
        "partial": "With Elem",
        "signature": "a-\u003e[a]-\u003e[[a]]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils.html#v:subsets",
      "description": {
        "fct-module": "Ideas.Common.Utils",
        "fct-package": "ideas",
        "fct-signature": "[a] -\u003e [[a]]",
        "fct-source": "src/Ideas-Common-Utils.html#subsets",
        "fct-type": "function",
        "title": "subsets"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Utils",
        "module": "Ideas.Common.Utils",
        "name": "subsets",
        "normalized": "[a]-\u003e[[a]]",
        "package": "ideas",
        "partial": "",
        "signature": "[a]-\u003e[[a]]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils.html#v:thd3",
      "description": {
        "fct-module": "Ideas.Common.Utils",
        "fct-package": "ideas",
        "fct-signature": "(a, b, c) -\u003e c",
        "fct-source": "src/Ideas-Common-Utils.html#thd3",
        "fct-type": "function",
        "title": "thd3"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Utils",
        "module": "Ideas.Common.Utils",
        "name": "thd3",
        "normalized": "(a,b,c)-\u003ec",
        "package": "ideas",
        "partial": "",
        "signature": "(a,b,c)-\u003ec"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils.html#v:timedSeconds",
      "description": {
        "fct-module": "Ideas.Common.Utils",
        "fct-package": "ideas",
        "fct-signature": "Int -\u003e IO a -\u003e IO a",
        "fct-source": "src/Ideas-Common-Utils.html#timedSeconds",
        "fct-type": "function",
        "title": "timedSeconds"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common Utils",
        "module": "Ideas.Common.Utils",
        "name": "timedSeconds",
        "normalized": "Int-\u003eIO a-\u003eIO a",
        "package": "ideas",
        "partial": "Seconds",
        "signature": "Int-\u003eIO a-\u003eIO a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-Utils.html#v:useFixedStdGen",
      "description": {
        "fct-descr": "\u003cp\u003eUse a fixed standard \u003ca\u003erandom\u003c/a\u003e number generator. This generator is\n accessible by calling System.Random.getStdGen\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.Utils",
        "fct-package": "ideas",
        "fct-signature": "IO ()",
        "fct-source": "src/Ideas-Common-Utils.html#useFixedStdGen",
        "fct-type": "function",
        "title": "useFixedStdGen"
      },
      "index": {
        "description": "Use fixed standard random number generator This generator is accessible by calling System.Random.getStdGen",
        "hierarchy": "Ideas Common Utils",
        "module": "Ideas.Common.Utils",
        "name": "useFixedStdGen",
        "normalized": "IO()",
        "package": "ideas",
        "partial": "Fixed Std Gen",
        "signature": "IO()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-View.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eThis module defines views on data-types, as described in \u003ca\u003eCanonical Forms\n in Interactive Exercise Assistants\u003c/a\u003e\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "Ideas.Common.View",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Common-View.html",
        "fct-type": "module",
        "title": "View"
      },
      "index": {
        "description": "This module defines views on data-types as described in Canonical Forms in Interactive Exercise Assistants",
        "hierarchy": "Ideas Common View",
        "module": "Ideas.Common.View",
        "name": "View",
        "normalized": "",
        "package": "ideas",
        "partial": "View",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-View.html#t:Arrow",
      "description": {
        "fct-descr": "\u003cp\u003eThe basic arrow class.\n\u003c/p\u003e\u003cp\u003eMinimal complete definition: \u003ccode\u003e\u003ca\u003earr\u003c/a\u003e\u003c/code\u003e and \u003ccode\u003e\u003ca\u003efirst\u003c/a\u003e\u003c/code\u003e, satisfying the laws\n\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cpre\u003e\u003ccode\u003e\u003ca\u003earr\u003c/a\u003e\u003c/code\u003e id = \u003ccode\u003e\u003ca\u003eid\u003c/a\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/li\u003e\u003cli\u003e\u003cpre\u003e\u003ccode\u003e\u003ca\u003earr\u003c/a\u003e\u003c/code\u003e (f \u003e\u003e\u003e g) = \u003ccode\u003e\u003ca\u003earr\u003c/a\u003e\u003c/code\u003e f \u003e\u003e\u003e \u003ccode\u003e\u003ca\u003earr\u003c/a\u003e\u003c/code\u003e g\u003c/pre\u003e\u003c/li\u003e\u003cli\u003e\u003cpre\u003e\u003ccode\u003e\u003ca\u003efirst\u003c/a\u003e\u003c/code\u003e (\u003ccode\u003e\u003ca\u003earr\u003c/a\u003e\u003c/code\u003e f) = \u003ccode\u003e\u003ca\u003earr\u003c/a\u003e\u003c/code\u003e (\u003ccode\u003e\u003ca\u003efirst\u003c/a\u003e\u003c/code\u003e f)\u003c/pre\u003e\u003c/li\u003e\u003cli\u003e\u003cpre\u003e\u003ccode\u003e\u003ca\u003efirst\u003c/a\u003e\u003c/code\u003e (f \u003e\u003e\u003e g) = \u003ccode\u003e\u003ca\u003efirst\u003c/a\u003e\u003c/code\u003e f \u003e\u003e\u003e \u003ccode\u003e\u003ca\u003efirst\u003c/a\u003e\u003c/code\u003e g\u003c/pre\u003e\u003c/li\u003e\u003cli\u003e\u003cpre\u003e\u003ccode\u003e\u003ca\u003efirst\u003c/a\u003e\u003c/code\u003e f \u003e\u003e\u003e \u003ccode\u003e\u003ca\u003earr\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003efst\u003c/a\u003e\u003c/code\u003e = \u003ccode\u003e\u003ca\u003earr\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003efst\u003c/a\u003e\u003c/code\u003e \u003e\u003e\u003e f\u003c/pre\u003e\u003c/li\u003e\u003cli\u003e\u003cpre\u003e\u003ccode\u003e\u003ca\u003efirst\u003c/a\u003e\u003c/code\u003e f \u003e\u003e\u003e \u003ccode\u003e\u003ca\u003earr\u003c/a\u003e\u003c/code\u003e (\u003ccode\u003e\u003ca\u003eid\u003c/a\u003e\u003c/code\u003e *** g) = \u003ccode\u003e\u003ca\u003earr\u003c/a\u003e\u003c/code\u003e (\u003ccode\u003e\u003ca\u003eid\u003c/a\u003e\u003c/code\u003e *** g) \u003e\u003e\u003e \u003ccode\u003e\u003ca\u003efirst\u003c/a\u003e\u003c/code\u003e f\u003c/pre\u003e\u003c/li\u003e\u003cli\u003e\u003cpre\u003e\u003ccode\u003e\u003ca\u003efirst\u003c/a\u003e\u003c/code\u003e (\u003ccode\u003e\u003ca\u003efirst\u003c/a\u003e\u003c/code\u003e f) \u003e\u003e\u003e \u003ccode\u003e\u003ca\u003earr\u003c/a\u003e\u003c/code\u003e \u003ccode\u003eassoc\u003c/code\u003e = \u003ccode\u003e\u003ca\u003earr\u003c/a\u003e\u003c/code\u003e \u003ccode\u003eassoc\u003c/code\u003e \u003e\u003e\u003e \u003ccode\u003e\u003ca\u003efirst\u003c/a\u003e\u003c/code\u003e f\u003c/pre\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003ewhere\n\u003c/p\u003e\u003cpre\u003e assoc ((a,b),c) = (a,(b,c))\n\u003c/pre\u003e\u003cp\u003eThe other combinators have sensible default definitions,\n which may be overridden for efficiency.\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.View",
        "fct-package": "ideas",
        "fct-signature": "class",
        "fct-type": "class",
        "title": "Arrow"
      },
      "index": {
        "description": "The basic arrow class Minimal complete definition arr and first satisfying the laws arr id id arr arr arr first arr arr first first first first first arr fst arr fst first arr id arr id first first first arr assoc arr assoc first where assoc The other combinators have sensible default definitions which may be overridden for efficiency",
        "hierarchy": "Ideas Common View",
        "module": "Ideas.Common.View",
        "name": "Arrow",
        "normalized": "",
        "package": "ideas",
        "partial": "Arrow",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-View.html#t:ArrowChoice",
      "description": {
        "fct-descr": "\u003cp\u003eChoice, for arrows that support it.  This class underlies the\n \u003ccode\u003eif\u003c/code\u003e and \u003ccode\u003ecase\u003c/code\u003e constructs in arrow notation.\n Minimal complete definition: \u003ccode\u003e\u003ca\u003eleft\u003c/a\u003e\u003c/code\u003e, satisfying the laws\n\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cpre\u003e\u003ccode\u003e\u003ca\u003eleft\u003c/a\u003e\u003c/code\u003e (\u003ccode\u003e\u003ca\u003earr\u003c/a\u003e\u003c/code\u003e f) = \u003ccode\u003e\u003ca\u003earr\u003c/a\u003e\u003c/code\u003e (\u003ccode\u003e\u003ca\u003eleft\u003c/a\u003e\u003c/code\u003e f)\u003c/pre\u003e\u003c/li\u003e\u003cli\u003e\u003cpre\u003e\u003ccode\u003e\u003ca\u003eleft\u003c/a\u003e\u003c/code\u003e (f \u003e\u003e\u003e g) = \u003ccode\u003e\u003ca\u003eleft\u003c/a\u003e\u003c/code\u003e f \u003e\u003e\u003e \u003ccode\u003e\u003ca\u003eleft\u003c/a\u003e\u003c/code\u003e g\u003c/pre\u003e\u003c/li\u003e\u003cli\u003e\u003cpre\u003ef \u003e\u003e\u003e \u003ccode\u003e\u003ca\u003earr\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eLeft\u003c/a\u003e\u003c/code\u003e = \u003ccode\u003e\u003ca\u003earr\u003c/a\u003e\u003c/code\u003e \u003ccode\u003e\u003ca\u003eLeft\u003c/a\u003e\u003c/code\u003e \u003e\u003e\u003e \u003ccode\u003e\u003ca\u003eleft\u003c/a\u003e\u003c/code\u003e f\u003c/pre\u003e\u003c/li\u003e\u003cli\u003e\u003cpre\u003e\u003ccode\u003e\u003ca\u003eleft\u003c/a\u003e\u003c/code\u003e f \u003e\u003e\u003e \u003ccode\u003e\u003ca\u003earr\u003c/a\u003e\u003c/code\u003e (\u003ccode\u003e\u003ca\u003eid\u003c/a\u003e\u003c/code\u003e +++ g) = \u003ccode\u003e\u003ca\u003earr\u003c/a\u003e\u003c/code\u003e (\u003ccode\u003e\u003ca\u003eid\u003c/a\u003e\u003c/code\u003e +++ g) \u003e\u003e\u003e \u003ccode\u003e\u003ca\u003eleft\u003c/a\u003e\u003c/code\u003e f\u003c/pre\u003e\u003c/li\u003e\u003cli\u003e\u003cpre\u003e\u003ccode\u003e\u003ca\u003eleft\u003c/a\u003e\u003c/code\u003e (\u003ccode\u003e\u003ca\u003eleft\u003c/a\u003e\u003c/code\u003e f) \u003e\u003e\u003e \u003ccode\u003e\u003ca\u003earr\u003c/a\u003e\u003c/code\u003e \u003ccode\u003eassocsum\u003c/code\u003e = \u003ccode\u003e\u003ca\u003earr\u003c/a\u003e\u003c/code\u003e \u003ccode\u003eassocsum\u003c/code\u003e \u003e\u003e\u003e \u003ccode\u003e\u003ca\u003eleft\u003c/a\u003e\u003c/code\u003e f\u003c/pre\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003ewhere\n\u003c/p\u003e\u003cpre\u003e assocsum (Left (Left x)) = Left x\n assocsum (Left (Right y)) = Right (Left y)\n assocsum (Right z) = Right (Right z)\n\u003c/pre\u003e\u003cp\u003eThe other combinators have sensible default definitions, which may\n be overridden for efficiency.\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.View",
        "fct-package": "ideas",
        "fct-signature": "class",
        "fct-type": "class",
        "title": "ArrowChoice"
      },
      "index": {
        "description": "Choice for arrows that support it This class underlies the if and case constructs in arrow notation Minimal complete definition left satisfying the laws left arr arr left left left left arr Left arr Left left left arr id arr id left left left arr assocsum arr assocsum left where assocsum Left Left Left assocsum Left Right Right Left assocsum Right Right Right The other combinators have sensible default definitions which may be overridden for efficiency",
        "hierarchy": "Ideas Common View",
        "module": "Ideas.Common.View",
        "name": "ArrowChoice",
        "normalized": "",
        "package": "ideas",
        "partial": "Arrow Choice",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-View.html#t:ArrowPlus",
      "description": {
        "fct-descr": "\u003cp\u003eA monoid on arrows.\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.View",
        "fct-package": "ideas",
        "fct-signature": "class",
        "fct-type": "class",
        "title": "ArrowPlus"
      },
      "index": {
        "description": "monoid on arrows",
        "hierarchy": "Ideas Common View",
        "module": "Ideas.Common.View",
        "name": "ArrowPlus",
        "normalized": "",
        "package": "ideas",
        "partial": "Arrow Plus",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-View.html#t:ArrowZero",
      "description": {
        "fct-module": "Ideas.Common.View",
        "fct-package": "ideas",
        "fct-signature": "class",
        "fct-type": "class",
        "title": "ArrowZero"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common View",
        "module": "Ideas.Common.View",
        "name": "ArrowZero",
        "normalized": "",
        "package": "ideas",
        "partial": "Arrow Zero",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-View.html#t:IsMatcher",
      "description": {
        "fct-module": "Ideas.Common.View",
        "fct-package": "ideas",
        "fct-signature": "class",
        "fct-source": "src/Ideas-Common-View.html#IsMatcher",
        "fct-type": "class",
        "title": "IsMatcher"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common View",
        "module": "Ideas.Common.View",
        "name": "IsMatcher",
        "normalized": "",
        "package": "ideas",
        "partial": "Is Matcher",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-View.html#t:IsView",
      "description": {
        "fct-descr": "\u003cp\u003eMinimal complete definition: \u003ccode\u003etoView\u003c/code\u003e or both \u003ccode\u003ematch\u003c/code\u003e and \u003ccode\u003ebuild\u003c/code\u003e.\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.View",
        "fct-package": "ideas",
        "fct-signature": "class",
        "fct-source": "src/Ideas-Common-View.html#IsView",
        "fct-type": "class",
        "title": "IsView"
      },
      "index": {
        "description": "Minimal complete definition toView or both match and build",
        "hierarchy": "Ideas Common View",
        "module": "Ideas.Common.View",
        "name": "IsView",
        "normalized": "",
        "package": "ideas",
        "partial": "Is View",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-View.html#t:Isomorphism",
      "description": {
        "fct-module": "Ideas.Common.View",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Common-View.html#Isomorphism",
        "fct-type": "data",
        "title": "Isomorphism"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common View",
        "module": "Ideas.Common.View",
        "name": "Isomorphism",
        "normalized": "",
        "package": "ideas",
        "partial": "Isomorphism",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-View.html#t:LiftView",
      "description": {
        "fct-module": "Ideas.Common.View",
        "fct-package": "ideas",
        "fct-signature": "class",
        "fct-source": "src/Ideas-Common-View.html#LiftView",
        "fct-type": "class",
        "title": "LiftView"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common View",
        "module": "Ideas.Common.View",
        "name": "LiftView",
        "normalized": "",
        "package": "ideas",
        "partial": "Lift View",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-View.html#t:Matcher",
      "description": {
        "fct-module": "Ideas.Common.View",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Common-View.html#Matcher",
        "fct-type": "data",
        "title": "Matcher"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common View",
        "module": "Ideas.Common.View",
        "name": "Matcher",
        "normalized": "",
        "package": "ideas",
        "partial": "Matcher",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-View.html#t:View",
      "description": {
        "fct-module": "Ideas.Common.View",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Common-View.html#View",
        "fct-type": "data",
        "title": "View"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common View",
        "module": "Ideas.Common.View",
        "name": "View",
        "normalized": "",
        "package": "ideas",
        "partial": "View",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-View.html#t:ViewPackage",
      "description": {
        "fct-module": "Ideas.Common.View",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Common-View.html#ViewPackage",
        "fct-type": "data",
        "title": "ViewPackage"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common View",
        "module": "Ideas.Common.View",
        "name": "ViewPackage",
        "normalized": "",
        "package": "ideas",
        "partial": "View Package",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-View.html#v:-124--124--124-",
      "description": {
        "fct-descr": "\u003cp\u003eFanin: Split the input between the two argument arrows and\n   merge their outputs.\n\u003c/p\u003e\u003cp\u003eThe default definition may be overridden with a more efficient\n   version if desired.\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.View",
        "fct-package": "ideas",
        "fct-signature": "a b d -\u003e a c d -\u003e a (Either b c) d",
        "fct-type": "method",
        "title": "(|||)"
      },
      "index": {
        "description": "Fanin Split the input between the two argument arrows and merge their outputs The default definition may be overridden with more efficient version if desired",
        "hierarchy": "Ideas Common View",
        "module": "Ideas.Common.View",
        "name": "(|||) |||",
        "normalized": "a b c-\u003ea d c-\u003ea(Either b d)c",
        "package": "ideas",
        "partial": "",
        "signature": "a b d-\u003ea c d-\u003ea(Either b c)d"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-View.html#v:-36--60-",
      "description": {
        "fct-module": "Ideas.Common.View",
        "fct-package": "ideas",
        "fct-signature": "View a (f b) -\u003e View b c -\u003e View a (f c)",
        "fct-source": "src/Ideas-Common-View.html#%24%3C",
        "fct-type": "function",
        "title": "($\u003c)"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common View",
        "module": "Ideas.Common.View",
        "name": "($\u003c) $\u003c",
        "normalized": "View a(b c)-\u003eView c d-\u003eView a(b d)",
        "package": "ideas",
        "partial": "",
        "signature": "View a(f b)-\u003eView b c-\u003eView a(f c)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-View.html#v:-38--38--38-",
      "description": {
        "fct-descr": "\u003cp\u003eFanout: send the input to both argument arrows and combine\n   their output.\n\u003c/p\u003e\u003cp\u003eThe default definition may be overridden with a more efficient\n   version if desired.\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.View",
        "fct-package": "ideas",
        "fct-signature": "a b c -\u003e a b c' -\u003e a b (c, c')",
        "fct-type": "method",
        "title": "(&&&)"
      },
      "index": {
        "description": "Fanout send the input to both argument arrows and combine their output The default definition may be overridden with more efficient version if desired",
        "hierarchy": "Ideas Common View",
        "module": "Ideas.Common.View",
        "name": "(&&&) &&&",
        "normalized": "a b c-\u003ea b d-\u003ea b(c,d)",
        "package": "ideas",
        "partial": "",
        "signature": "a b c-\u003ea b c'-\u003ea b(c,c')"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-View.html#v:-42--42--42-",
      "description": {
        "fct-descr": "\u003cp\u003eSplit the input between the two argument arrows and combine\n   their output.  Note that this is in general not a functor.\n\u003c/p\u003e\u003cp\u003eThe default definition may be overridden with a more efficient\n   version if desired.\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.View",
        "fct-package": "ideas",
        "fct-signature": "a b c -\u003e a b' c' -\u003e a (b, b') (c, c')",
        "fct-type": "method",
        "title": "(***)"
      },
      "index": {
        "description": "Split the input between the two argument arrows and combine their output Note that this is in general not functor The default definition may be overridden with more efficient version if desired",
        "hierarchy": "Ideas Common View",
        "module": "Ideas.Common.View",
        "name": "(***) ***",
        "normalized": "a b c-\u003ea d e-\u003ea(b,d)(c,e)",
        "package": "ideas",
        "partial": "",
        "signature": "a b c-\u003ea b' c'-\u003ea(b,b')(c,c')"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-View.html#v:-43--43--43-",
      "description": {
        "fct-descr": "\u003cp\u003eSplit the input between the two argument arrows, retagging\n   and merging their outputs.\n   Note that this is in general not a functor.\n\u003c/p\u003e\u003cp\u003eThe default definition may be overridden with a more efficient\n   version if desired.\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.View",
        "fct-package": "ideas",
        "fct-signature": "a b c -\u003e a b' c' -\u003e a (Either b b') (Either c c')",
        "fct-type": "method",
        "title": "(+++)"
      },
      "index": {
        "description": "Split the input between the two argument arrows retagging and merging their outputs Note that this is in general not functor The default definition may be overridden with more efficient version if desired",
        "hierarchy": "Ideas Common View",
        "module": "Ideas.Common.View",
        "name": "(+++) +++",
        "normalized": "a b c-\u003ea d e-\u003ea(Either b d)(Either c e)",
        "package": "ideas",
        "partial": "",
        "signature": "a b c-\u003ea b' c'-\u003ea(Either b b')(Either c c')"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-View.html#v:-60--43--62-",
      "description": {
        "fct-descr": "\u003cp\u003eAn associative operation with identity \u003ccode\u003e\u003ca\u003ezeroArrow\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.View",
        "fct-package": "ideas",
        "fct-signature": "a b c -\u003e a b c -\u003e a b c",
        "fct-type": "method",
        "title": "(\u003c+\u003e)"
      },
      "index": {
        "description": "An associative operation with identity zeroArrow",
        "hierarchy": "Ideas Common View",
        "module": "Ideas.Common.View",
        "name": "(\u003c+\u003e) \u003c+\u003e",
        "normalized": "a b c-\u003ea b c-\u003ea b c",
        "package": "ideas",
        "partial": "",
        "signature": "a b c-\u003ea b c-\u003ea b c"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-View.html#v:-60--60--60-",
      "description": {
        "fct-descr": "\u003cp\u003eRight-to-left composition\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.View",
        "fct-package": "ideas",
        "fct-signature": "cat b c -\u003e cat a b -\u003e cat a c",
        "fct-type": "function",
        "title": "(\u003c\u003c\u003c)"
      },
      "index": {
        "description": "Right-to-left composition",
        "hierarchy": "Ideas Common View",
        "module": "Ideas.Common.View",
        "name": "(\u003c\u003c\u003c) \u003c\u003c\u003c",
        "normalized": "a b c-\u003ea d b-\u003ea d c",
        "package": "ideas",
        "partial": "",
        "signature": "cat b c-\u003ecat a b-\u003ecat a c"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-View.html#v:-62--62--62-",
      "description": {
        "fct-descr": "\u003cp\u003eLeft-to-right composition\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.View",
        "fct-package": "ideas",
        "fct-signature": "cat a b -\u003e cat b c -\u003e cat a c",
        "fct-type": "function",
        "title": "(\u003e\u003e\u003e)"
      },
      "index": {
        "description": "Left-to-right composition",
        "hierarchy": "Ideas Common View",
        "module": "Ideas.Common.View",
        "name": "(\u003e\u003e\u003e) \u003e\u003e\u003e",
        "normalized": "a b c-\u003ea c d-\u003ea b d",
        "package": "ideas",
        "partial": "",
        "signature": "cat a b-\u003ecat b c-\u003ecat a c"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-View.html#v:ViewPackage",
      "description": {
        "fct-module": "Ideas.Common.View",
        "fct-package": "ideas",
        "fct-signature": "(String -\u003e Maybe a) -\u003e View a b -\u003e ViewPackage",
        "fct-source": "src/Ideas-Common-View.html#ViewPackage",
        "fct-type": "function",
        "title": "ViewPackage"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common View",
        "module": "Ideas.Common.View",
        "name": "ViewPackage",
        "normalized": "(String-\u003eMaybe a)-\u003eView a b-\u003eViewPackage",
        "package": "ideas",
        "partial": "View Package",
        "signature": "(String-\u003eMaybe a)-\u003eView a b-\u003eViewPackage"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-View.html#v:arr",
      "description": {
        "fct-descr": "\u003cp\u003eLift a function to an arrow.\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.View",
        "fct-package": "ideas",
        "fct-signature": "(b -\u003e c) -\u003e a b c",
        "fct-type": "method",
        "title": "arr"
      },
      "index": {
        "description": "Lift function to an arrow",
        "hierarchy": "Ideas Common View",
        "module": "Ideas.Common.View",
        "name": "arr",
        "normalized": "(a-\u003eb)-\u003ec a b",
        "package": "ideas",
        "partial": "",
        "signature": "(b-\u003ec)-\u003ea b c"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-View.html#v:belongsTo",
      "description": {
        "fct-module": "Ideas.Common.View",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e f a b -\u003e Bool",
        "fct-source": "src/Ideas-Common-View.html#belongsTo",
        "fct-type": "function",
        "title": "belongsTo"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common View",
        "module": "Ideas.Common.View",
        "name": "belongsTo",
        "normalized": "a-\u003eb a c-\u003eBool",
        "package": "ideas",
        "partial": "To",
        "signature": "a-\u003ef a b-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-View.html#v:build",
      "description": {
        "fct-module": "Ideas.Common.View",
        "fct-package": "ideas",
        "fct-signature": "f a b -\u003e b -\u003e a",
        "fct-source": "src/Ideas-Common-View.html#build",
        "fct-type": "method",
        "title": "build"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common View",
        "module": "Ideas.Common.View",
        "name": "build",
        "normalized": "a b c-\u003ec-\u003eb",
        "package": "ideas",
        "partial": "",
        "signature": "f a b-\u003eb-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-View.html#v:canonical",
      "description": {
        "fct-module": "Ideas.Common.View",
        "fct-package": "ideas",
        "fct-signature": "f a b -\u003e a -\u003e Maybe a",
        "fct-source": "src/Ideas-Common-View.html#canonical",
        "fct-type": "function",
        "title": "canonical"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common View",
        "module": "Ideas.Common.View",
        "name": "canonical",
        "normalized": "a b c-\u003eb-\u003eMaybe b",
        "package": "ideas",
        "partial": "",
        "signature": "f a b-\u003ea-\u003eMaybe a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-View.html#v:canonicalWith",
      "description": {
        "fct-module": "Ideas.Common.View",
        "fct-package": "ideas",
        "fct-signature": "(b -\u003e b) -\u003e f a b -\u003e a -\u003e Maybe a",
        "fct-source": "src/Ideas-Common-View.html#canonicalWith",
        "fct-type": "function",
        "title": "canonicalWith"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common View",
        "module": "Ideas.Common.View",
        "name": "canonicalWith",
        "normalized": "(a-\u003ea)-\u003eb c a-\u003ec-\u003eMaybe c",
        "package": "ideas",
        "partial": "With",
        "signature": "(b-\u003eb)-\u003ef a b-\u003ea-\u003eMaybe a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-View.html#v:canonicalWithM",
      "description": {
        "fct-module": "Ideas.Common.View",
        "fct-package": "ideas",
        "fct-signature": "(b -\u003e Maybe b) -\u003e f a b -\u003e a -\u003e Maybe a",
        "fct-source": "src/Ideas-Common-View.html#canonicalWithM",
        "fct-type": "function",
        "title": "canonicalWithM"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common View",
        "module": "Ideas.Common.View",
        "name": "canonicalWithM",
        "normalized": "(a-\u003eMaybe a)-\u003eb c a-\u003ec-\u003eMaybe c",
        "package": "ideas",
        "partial": "With",
        "signature": "(b-\u003eMaybe b)-\u003ef a b-\u003ea-\u003eMaybe a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-View.html#v:first",
      "description": {
        "fct-descr": "\u003cp\u003eSend the first component of the input through the argument\n   arrow, and copy the rest unchanged to the output.\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.View",
        "fct-package": "ideas",
        "fct-signature": "a b c -\u003e a (b, d) (c, d)",
        "fct-type": "method",
        "title": "first"
      },
      "index": {
        "description": "Send the first component of the input through the argument arrow and copy the rest unchanged to the output",
        "hierarchy": "Ideas Common View",
        "module": "Ideas.Common.View",
        "name": "first",
        "normalized": "a b c-\u003ea(b,d)(c,d)",
        "package": "ideas",
        "partial": "",
        "signature": "a b c-\u003ea(b,d)(c,d)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-View.html#v:from",
      "description": {
        "fct-module": "Ideas.Common.View",
        "fct-package": "ideas",
        "fct-signature": "Isomorphism a b -\u003e a -\u003e b",
        "fct-source": "src/Ideas-Common-View.html#from",
        "fct-type": "function",
        "title": "from"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common View",
        "module": "Ideas.Common.View",
        "name": "from",
        "normalized": "Isomorphism a b-\u003ea-\u003eb",
        "package": "ideas",
        "partial": "",
        "signature": "Isomorphism a b-\u003ea-\u003eb"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-View.html#v:identity",
      "description": {
        "fct-module": "Ideas.Common.View",
        "fct-package": "ideas",
        "fct-signature": "f a a",
        "fct-source": "src/Ideas-Common-View.html#identity",
        "fct-type": "function",
        "title": "identity"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common View",
        "module": "Ideas.Common.View",
        "name": "identity",
        "normalized": "",
        "package": "ideas",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-View.html#v:inverse",
      "description": {
        "fct-module": "Ideas.Common.View",
        "fct-package": "ideas",
        "fct-signature": "Isomorphism a b -\u003e Isomorphism b a",
        "fct-source": "src/Ideas-Common-View.html#inverse",
        "fct-type": "function",
        "title": "inverse"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common View",
        "module": "Ideas.Common.View",
        "name": "inverse",
        "normalized": "Isomorphism a b-\u003eIsomorphism b a",
        "package": "ideas",
        "partial": "",
        "signature": "Isomorphism a b-\u003eIsomorphism b a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-View.html#v:isCanonical",
      "description": {
        "fct-module": "Ideas.Common.View",
        "fct-package": "ideas",
        "fct-signature": "f a b -\u003e a -\u003e Bool",
        "fct-source": "src/Ideas-Common-View.html#isCanonical",
        "fct-type": "function",
        "title": "isCanonical"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common View",
        "module": "Ideas.Common.View",
        "name": "isCanonical",
        "normalized": "a b c-\u003eb-\u003eBool",
        "package": "ideas",
        "partial": "Canonical",
        "signature": "f a b-\u003ea-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-View.html#v:isCanonicalWith",
      "description": {
        "fct-module": "Ideas.Common.View",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e a -\u003e Bool) -\u003e f a b -\u003e a -\u003e Bool",
        "fct-source": "src/Ideas-Common-View.html#isCanonicalWith",
        "fct-type": "function",
        "title": "isCanonicalWith"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common View",
        "module": "Ideas.Common.View",
        "name": "isCanonicalWith",
        "normalized": "(a-\u003ea-\u003eBool)-\u003eb a c-\u003ea-\u003eBool",
        "package": "ideas",
        "partial": "Canonical With",
        "signature": "(a-\u003ea-\u003eBool)-\u003ef a b-\u003ea-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-View.html#v:left",
      "description": {
        "fct-descr": "\u003cp\u003eFeed marked inputs through the argument arrow, passing the\n   rest through unchanged to the output.\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.View",
        "fct-package": "ideas",
        "fct-signature": "a b c -\u003e a (Either b d) (Either c d)",
        "fct-type": "method",
        "title": "left"
      },
      "index": {
        "description": "Feed marked inputs through the argument arrow passing the rest through unchanged to the output",
        "hierarchy": "Ideas Common View",
        "module": "Ideas.Common.View",
        "name": "left",
        "normalized": "a b c-\u003ea(Either b d)(Either c d)",
        "package": "ideas",
        "partial": "",
        "signature": "a b c-\u003ea(Either b d)(Either c d)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-View.html#v:liftView",
      "description": {
        "fct-module": "Ideas.Common.View",
        "fct-package": "ideas",
        "fct-signature": "View a b -\u003e f b -\u003e f a",
        "fct-source": "src/Ideas-Common-View.html#liftView",
        "fct-type": "method",
        "title": "liftView"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common View",
        "module": "Ideas.Common.View",
        "name": "liftView",
        "normalized": "View a b-\u003ec b-\u003ec a",
        "package": "ideas",
        "partial": "View",
        "signature": "View a b-\u003ef b-\u003ef a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-View.html#v:liftViewIn",
      "description": {
        "fct-module": "Ideas.Common.View",
        "fct-package": "ideas",
        "fct-signature": "View a (b, c) -\u003e f b -\u003e f a",
        "fct-source": "src/Ideas-Common-View.html#liftViewIn",
        "fct-type": "method",
        "title": "liftViewIn"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common View",
        "module": "Ideas.Common.View",
        "name": "liftViewIn",
        "normalized": "View a(b,c)-\u003ed b-\u003ed a",
        "package": "ideas",
        "partial": "View In",
        "signature": "View a(b,c)-\u003ef b-\u003ef a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-View.html#v:listView",
      "description": {
        "fct-descr": "\u003cp\u003eSpecialized version of traverseView\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.View",
        "fct-package": "ideas",
        "fct-signature": "View a b -\u003e View [a] [b]",
        "fct-source": "src/Ideas-Common-View.html#listView",
        "fct-type": "function",
        "title": "listView"
      },
      "index": {
        "description": "Specialized version of traverseView",
        "hierarchy": "Ideas Common View",
        "module": "Ideas.Common.View",
        "name": "listView",
        "normalized": "View a b-\u003eView[a][b]",
        "package": "ideas",
        "partial": "View",
        "signature": "View a b-\u003eView[a][b]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-View.html#v:makeMatcher",
      "description": {
        "fct-module": "Ideas.Common.View",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e Maybe b) -\u003e Matcher a b",
        "fct-source": "src/Ideas-Common-View.html#makeMatcher",
        "fct-type": "function",
        "title": "makeMatcher"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common View",
        "module": "Ideas.Common.View",
        "name": "makeMatcher",
        "normalized": "(a-\u003eMaybe b)-\u003eMatcher a b",
        "package": "ideas",
        "partial": "Matcher",
        "signature": "(a-\u003eMaybe b)-\u003eMatcher a b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-View.html#v:makeView",
      "description": {
        "fct-module": "Ideas.Common.View",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e Maybe b) -\u003e (b -\u003e a) -\u003e View a b",
        "fct-source": "src/Ideas-Common-View.html#makeView",
        "fct-type": "function",
        "title": "makeView"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common View",
        "module": "Ideas.Common.View",
        "name": "makeView",
        "normalized": "(a-\u003eMaybe b)-\u003e(b-\u003ea)-\u003eView a b",
        "package": "ideas",
        "partial": "View",
        "signature": "(a-\u003eMaybe b)-\u003e(b-\u003ea)-\u003eView a b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-View.html#v:match",
      "description": {
        "fct-module": "Ideas.Common.View",
        "fct-package": "ideas",
        "fct-signature": "f a b -\u003e a -\u003e Maybe b",
        "fct-source": "src/Ideas-Common-View.html#match",
        "fct-type": "method",
        "title": "match"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common View",
        "module": "Ideas.Common.View",
        "name": "match",
        "normalized": "a b c-\u003eb-\u003eMaybe c",
        "package": "ideas",
        "partial": "",
        "signature": "f a b-\u003ea-\u003eMaybe b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-View.html#v:matchM",
      "description": {
        "fct-descr": "\u003cp\u003egeneralized monadic variant of \u003ccode\u003ematch\u003c/code\u003e\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.View",
        "fct-package": "ideas",
        "fct-signature": "f a b -\u003e a -\u003e m b",
        "fct-source": "src/Ideas-Common-View.html#matchM",
        "fct-type": "function",
        "title": "matchM"
      },
      "index": {
        "description": "generalized monadic variant of match",
        "hierarchy": "Ideas Common View",
        "module": "Ideas.Common.View",
        "name": "matchM",
        "normalized": "a b c-\u003eb-\u003ed c",
        "package": "ideas",
        "partial": "",
        "signature": "f a b-\u003ea-\u003em b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-View.html#v:matcher",
      "description": {
        "fct-module": "Ideas.Common.View",
        "fct-package": "ideas",
        "fct-signature": "f a b -\u003e Matcher a b",
        "fct-source": "src/Ideas-Common-View.html#matcher",
        "fct-type": "method",
        "title": "matcher"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common View",
        "module": "Ideas.Common.View",
        "name": "matcher",
        "normalized": "a b c-\u003eMatcher b c",
        "package": "ideas",
        "partial": "",
        "signature": "f a b-\u003eMatcher a b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-View.html#v:matcherView",
      "description": {
        "fct-module": "Ideas.Common.View",
        "fct-package": "ideas",
        "fct-signature": "Matcher a b -\u003e (b -\u003e a) -\u003e View a b",
        "fct-source": "src/Ideas-Common-View.html#matcherView",
        "fct-type": "function",
        "title": "matcherView"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common View",
        "module": "Ideas.Common.View",
        "name": "matcherView",
        "normalized": "Matcher a b-\u003e(b-\u003ea)-\u003eView a b",
        "package": "ideas",
        "partial": "View",
        "signature": "Matcher a b-\u003e(b-\u003ea)-\u003eView a b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-View.html#v:propIdempotence",
      "description": {
        "fct-module": "Ideas.Common.View",
        "fct-package": "ideas",
        "fct-signature": "Gen a -\u003e View a b -\u003e Property",
        "fct-source": "src/Ideas-Common-View.html#propIdempotence",
        "fct-type": "function",
        "title": "propIdempotence"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common View",
        "module": "Ideas.Common.View",
        "name": "propIdempotence",
        "normalized": "Gen a-\u003eView a b-\u003eProperty",
        "package": "ideas",
        "partial": "Idempotence",
        "signature": "Gen a-\u003eView a b-\u003eProperty"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-View.html#v:propNormalForm",
      "description": {
        "fct-module": "Ideas.Common.View",
        "fct-package": "ideas",
        "fct-signature": "Gen a -\u003e View a b -\u003e Property",
        "fct-source": "src/Ideas-Common-View.html#propNormalForm",
        "fct-type": "function",
        "title": "propNormalForm"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common View",
        "module": "Ideas.Common.View",
        "name": "propNormalForm",
        "normalized": "Gen a-\u003eView a b-\u003eProperty",
        "package": "ideas",
        "partial": "Normal Form",
        "signature": "Gen a-\u003eView a b-\u003eProperty"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-View.html#v:propSoundness",
      "description": {
        "fct-module": "Ideas.Common.View",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e a -\u003e Bool) -\u003e Gen a -\u003e View a c -\u003e Property",
        "fct-source": "src/Ideas-Common-View.html#propSoundness",
        "fct-type": "function",
        "title": "propSoundness"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common View",
        "module": "Ideas.Common.View",
        "name": "propSoundness",
        "normalized": "(a-\u003ea-\u003eBool)-\u003eGen a-\u003eView a b-\u003eProperty",
        "package": "ideas",
        "partial": "Soundness",
        "signature": "(a-\u003ea-\u003eBool)-\u003eGen a-\u003eView a c-\u003eProperty"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-View.html#v:right",
      "description": {
        "fct-descr": "\u003cp\u003eA mirror image of \u003ccode\u003e\u003ca\u003eleft\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e\u003cp\u003eThe default definition may be overridden with a more efficient\n   version if desired.\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.View",
        "fct-package": "ideas",
        "fct-signature": "a b c -\u003e a (Either d b) (Either d c)",
        "fct-type": "method",
        "title": "right"
      },
      "index": {
        "description": "mirror image of left The default definition may be overridden with more efficient version if desired",
        "hierarchy": "Ideas Common View",
        "module": "Ideas.Common.View",
        "name": "right",
        "normalized": "a b c-\u003ea(Either d b)(Either d c)",
        "package": "ideas",
        "partial": "",
        "signature": "a b c-\u003ea(Either d b)(Either d c)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-View.html#v:second",
      "description": {
        "fct-descr": "\u003cp\u003eA mirror image of \u003ccode\u003e\u003ca\u003efirst\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e\u003cp\u003eThe default definition may be overridden with a more efficient\n   version if desired.\n\u003c/p\u003e",
        "fct-module": "Ideas.Common.View",
        "fct-package": "ideas",
        "fct-signature": "a b c -\u003e a (d, b) (d, c)",
        "fct-type": "method",
        "title": "second"
      },
      "index": {
        "description": "mirror image of first The default definition may be overridden with more efficient version if desired",
        "hierarchy": "Ideas Common View",
        "module": "Ideas.Common.View",
        "name": "second",
        "normalized": "a b c-\u003ea(d,b)(d,c)",
        "package": "ideas",
        "partial": "",
        "signature": "a b c-\u003ea(d,b)(d,c)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-View.html#v:simplify",
      "description": {
        "fct-module": "Ideas.Common.View",
        "fct-package": "ideas",
        "fct-signature": "f a b -\u003e a -\u003e a",
        "fct-source": "src/Ideas-Common-View.html#simplify",
        "fct-type": "function",
        "title": "simplify"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common View",
        "module": "Ideas.Common.View",
        "name": "simplify",
        "normalized": "a b c-\u003eb-\u003eb",
        "package": "ideas",
        "partial": "",
        "signature": "f a b-\u003ea-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-View.html#v:simplifyWith",
      "description": {
        "fct-module": "Ideas.Common.View",
        "fct-package": "ideas",
        "fct-signature": "(b -\u003e b) -\u003e f a b -\u003e a -\u003e a",
        "fct-source": "src/Ideas-Common-View.html#simplifyWith",
        "fct-type": "function",
        "title": "simplifyWith"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common View",
        "module": "Ideas.Common.View",
        "name": "simplifyWith",
        "normalized": "(a-\u003ea)-\u003eb c a-\u003ec-\u003ec",
        "package": "ideas",
        "partial": "With",
        "signature": "(b-\u003eb)-\u003ef a b-\u003ea-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-View.html#v:simplifyWithM",
      "description": {
        "fct-module": "Ideas.Common.View",
        "fct-package": "ideas",
        "fct-signature": "(b -\u003e Maybe b) -\u003e f a b -\u003e a -\u003e a",
        "fct-source": "src/Ideas-Common-View.html#simplifyWithM",
        "fct-type": "function",
        "title": "simplifyWithM"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common View",
        "module": "Ideas.Common.View",
        "name": "simplifyWithM",
        "normalized": "(a-\u003eMaybe a)-\u003eb c a-\u003ec-\u003ec",
        "package": "ideas",
        "partial": "With",
        "signature": "(b-\u003eMaybe b)-\u003ef a b-\u003ea-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-View.html#v:swapView",
      "description": {
        "fct-module": "Ideas.Common.View",
        "fct-package": "ideas",
        "fct-signature": "Isomorphism (a, b) (b, a)",
        "fct-source": "src/Ideas-Common-View.html#swapView",
        "fct-type": "function",
        "title": "swapView"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common View",
        "module": "Ideas.Common.View",
        "name": "swapView",
        "normalized": "Isomorphism(a,b)(b,a)",
        "package": "ideas",
        "partial": "View",
        "signature": "Isomorphism(a,b)(b,a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-View.html#v:to",
      "description": {
        "fct-module": "Ideas.Common.View",
        "fct-package": "ideas",
        "fct-signature": "Isomorphism a b -\u003e b -\u003e a",
        "fct-source": "src/Ideas-Common-View.html#to",
        "fct-type": "function",
        "title": "to"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common View",
        "module": "Ideas.Common.View",
        "name": "to",
        "normalized": "Isomorphism a b-\u003eb-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "Isomorphism a b-\u003eb-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-View.html#v:toView",
      "description": {
        "fct-module": "Ideas.Common.View",
        "fct-package": "ideas",
        "fct-signature": "f a b -\u003e View a b",
        "fct-source": "src/Ideas-Common-View.html#toView",
        "fct-type": "method",
        "title": "toView"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common View",
        "module": "Ideas.Common.View",
        "name": "toView",
        "normalized": "a b c-\u003eView b c",
        "package": "ideas",
        "partial": "View",
        "signature": "f a b-\u003eView a b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-View.html#v:traverseView",
      "description": {
        "fct-module": "Ideas.Common.View",
        "fct-package": "ideas",
        "fct-signature": "View a b -\u003e View (f a) (f b)",
        "fct-source": "src/Ideas-Common-View.html#traverseView",
        "fct-type": "function",
        "title": "traverseView"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common View",
        "module": "Ideas.Common.View",
        "name": "traverseView",
        "normalized": "View a b-\u003eView(c a)(c b)",
        "package": "ideas",
        "partial": "View",
        "signature": "View a b-\u003eView(f a)(f b)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-View.html#v:viewEquivalent",
      "description": {
        "fct-module": "Ideas.Common.View",
        "fct-package": "ideas",
        "fct-signature": "f a b -\u003e a -\u003e a -\u003e Bool",
        "fct-source": "src/Ideas-Common-View.html#viewEquivalent",
        "fct-type": "function",
        "title": "viewEquivalent"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common View",
        "module": "Ideas.Common.View",
        "name": "viewEquivalent",
        "normalized": "a b c-\u003eb-\u003eb-\u003eBool",
        "package": "ideas",
        "partial": "Equivalent",
        "signature": "f a b-\u003ea-\u003ea-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-View.html#v:viewEquivalentWith",
      "description": {
        "fct-module": "Ideas.Common.View",
        "fct-package": "ideas",
        "fct-signature": "(b -\u003e b -\u003e Bool) -\u003e f a b -\u003e a -\u003e a -\u003e Bool",
        "fct-source": "src/Ideas-Common-View.html#viewEquivalentWith",
        "fct-type": "function",
        "title": "viewEquivalentWith"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common View",
        "module": "Ideas.Common.View",
        "name": "viewEquivalentWith",
        "normalized": "(a-\u003ea-\u003eBool)-\u003eb c a-\u003ec-\u003ec-\u003eBool",
        "package": "ideas",
        "partial": "Equivalent With",
        "signature": "(b-\u003eb-\u003eBool)-\u003ef a b-\u003ea-\u003ea-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Common-View.html#v:zeroArrow",
      "description": {
        "fct-module": "Ideas.Common.View",
        "fct-package": "ideas",
        "fct-signature": "a b c",
        "fct-type": "method",
        "title": "zeroArrow"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Common View",
        "module": "Ideas.Common.View",
        "name": "zeroArrow",
        "normalized": "",
        "package": "ideas",
        "partial": "Arrow",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-DecoderJSON.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eServices using JSON notation\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "Ideas.Encoding.DecoderJSON",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Encoding-DecoderJSON.html",
        "fct-type": "module",
        "title": "DecoderJSON"
      },
      "index": {
        "description": "Services using JSON notation",
        "hierarchy": "Ideas Encoding DecoderJSON",
        "module": "Ideas.Encoding.DecoderJSON",
        "name": "DecoderJSON",
        "normalized": "",
        "package": "ideas",
        "partial": "Decoder JSON",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-DecoderJSON.html#t:JSONDecoder",
      "description": {
        "fct-module": "Ideas.Encoding.DecoderJSON",
        "fct-package": "ideas",
        "fct-signature": "type",
        "fct-source": "src/Ideas-Encoding-DecoderJSON.html#JSONDecoder",
        "fct-type": "type",
        "title": "JSONDecoder"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding DecoderJSON",
        "module": "Ideas.Encoding.DecoderJSON",
        "name": "JSONDecoder",
        "normalized": "",
        "package": "ideas",
        "partial": "JSONDecoder",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-DecoderJSON.html#t:JSONDecoderState",
      "description": {
        "fct-module": "Ideas.Encoding.DecoderJSON",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Encoding-DecoderJSON.html#JSONDecoderState",
        "fct-type": "data",
        "title": "JSONDecoderState"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding DecoderJSON",
        "module": "Ideas.Encoding.DecoderJSON",
        "name": "JSONDecoderState",
        "normalized": "",
        "package": "ideas",
        "partial": "JSONDecoder State",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-DecoderJSON.html#v:JSONDecoderState",
      "description": {
        "fct-module": "Ideas.Encoding.DecoderJSON",
        "fct-package": "ideas",
        "fct-signature": "JSONDecoderState",
        "fct-source": "src/Ideas-Encoding-DecoderJSON.html#JSONDecoderState",
        "fct-type": "function",
        "title": "JSONDecoderState"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding DecoderJSON",
        "module": "Ideas.Encoding.DecoderJSON",
        "name": "JSONDecoderState",
        "normalized": "",
        "package": "ideas",
        "partial": "JSONDecoder State",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-DecoderJSON.html#v:getExercise",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Encoding.DecoderJSON",
        "fct-package": "ideas",
        "fct-signature": "Exercise a",
        "fct-source": "src/Ideas-Encoding-DecoderJSON.html#JSONDecoderState",
        "fct-type": "function",
        "title": "getExercise"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding DecoderJSON",
        "module": "Ideas.Encoding.DecoderJSON",
        "name": "getExercise",
        "normalized": "",
        "package": "ideas",
        "partial": "Exercise",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-DecoderJSON.html#v:getScript",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Encoding.DecoderJSON",
        "fct-package": "ideas",
        "fct-signature": "Script",
        "fct-source": "src/Ideas-Encoding-DecoderJSON.html#JSONDecoderState",
        "fct-type": "function",
        "title": "getScript"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding DecoderJSON",
        "module": "Ideas.Encoding.DecoderJSON",
        "name": "getScript",
        "normalized": "",
        "package": "ideas",
        "partial": "Script",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-DecoderJSON.html#v:getStdGen",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Encoding.DecoderJSON",
        "fct-package": "ideas",
        "fct-signature": "StdGen",
        "fct-source": "src/Ideas-Encoding-DecoderJSON.html#JSONDecoderState",
        "fct-type": "function",
        "title": "getStdGen"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding DecoderJSON",
        "module": "Ideas.Encoding.DecoderJSON",
        "name": "getStdGen",
        "normalized": "",
        "package": "ideas",
        "partial": "Std Gen",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-DecoderJSON.html#v:jsonDecoder",
      "description": {
        "fct-module": "Ideas.Encoding.DecoderJSON",
        "fct-package": "ideas",
        "fct-signature": "Type a t -\u003e JSONDecoder a t",
        "fct-source": "src/Ideas-Encoding-DecoderJSON.html#jsonDecoder",
        "fct-type": "function",
        "title": "jsonDecoder"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding DecoderJSON",
        "module": "Ideas.Encoding.DecoderJSON",
        "name": "jsonDecoder",
        "normalized": "Type a b-\u003eJSONDecoder a b",
        "package": "ideas",
        "partial": "Decoder",
        "signature": "Type a t-\u003eJSONDecoder a t"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-DecoderXML.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eServices using XML notation\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "Ideas.Encoding.DecoderXML",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Encoding-DecoderXML.html",
        "fct-type": "module",
        "title": "DecoderXML"
      },
      "index": {
        "description": "Services using XML notation",
        "hierarchy": "Ideas Encoding DecoderXML",
        "module": "Ideas.Encoding.DecoderXML",
        "name": "DecoderXML",
        "normalized": "",
        "package": "ideas",
        "partial": "Decoder XML",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-DecoderXML.html#t:XMLDecoder",
      "description": {
        "fct-module": "Ideas.Encoding.DecoderXML",
        "fct-package": "ideas",
        "fct-signature": "type",
        "fct-source": "src/Ideas-Encoding-DecoderXML.html#XMLDecoder",
        "fct-type": "type",
        "title": "XMLDecoder"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding DecoderXML",
        "module": "Ideas.Encoding.DecoderXML",
        "name": "XMLDecoder",
        "normalized": "",
        "package": "ideas",
        "partial": "XMLDecoder",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-DecoderXML.html#t:XMLDecoderState",
      "description": {
        "fct-module": "Ideas.Encoding.DecoderXML",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Encoding-DecoderXML.html#XMLDecoderState",
        "fct-type": "data",
        "title": "XMLDecoderState"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding DecoderXML",
        "module": "Ideas.Encoding.DecoderXML",
        "name": "XMLDecoderState",
        "normalized": "",
        "package": "ideas",
        "partial": "XMLDecoder State",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-DecoderXML.html#v:XMLDecoderState",
      "description": {
        "fct-module": "Ideas.Encoding.DecoderXML",
        "fct-package": "ideas",
        "fct-signature": "XMLDecoderState",
        "fct-source": "src/Ideas-Encoding-DecoderXML.html#XMLDecoderState",
        "fct-type": "function",
        "title": "XMLDecoderState"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding DecoderXML",
        "module": "Ideas.Encoding.DecoderXML",
        "name": "XMLDecoderState",
        "normalized": "",
        "package": "ideas",
        "partial": "XMLDecoder State",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-DecoderXML.html#v:decodeTerm",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Encoding.DecoderXML",
        "fct-package": "ideas",
        "fct-signature": "XML -\u003e Either String a",
        "fct-source": "src/Ideas-Encoding-DecoderXML.html#XMLDecoderState",
        "fct-type": "function",
        "title": "decodeTerm"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding DecoderXML",
        "module": "Ideas.Encoding.DecoderXML",
        "name": "decodeTerm",
        "normalized": "XML-\u003eEither String a",
        "package": "ideas",
        "partial": "Term",
        "signature": "XML-\u003eEither String a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-DecoderXML.html#v:getExercise",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Encoding.DecoderXML",
        "fct-package": "ideas",
        "fct-signature": "Exercise a",
        "fct-source": "src/Ideas-Encoding-DecoderXML.html#XMLDecoderState",
        "fct-type": "function",
        "title": "getExercise"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding DecoderXML",
        "module": "Ideas.Encoding.DecoderXML",
        "name": "getExercise",
        "normalized": "",
        "package": "ideas",
        "partial": "Exercise",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-DecoderXML.html#v:getScript",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Encoding.DecoderXML",
        "fct-package": "ideas",
        "fct-signature": "Script",
        "fct-source": "src/Ideas-Encoding-DecoderXML.html#XMLDecoderState",
        "fct-type": "function",
        "title": "getScript"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding DecoderXML",
        "module": "Ideas.Encoding.DecoderXML",
        "name": "getScript",
        "normalized": "",
        "package": "ideas",
        "partial": "Script",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-DecoderXML.html#v:getStdGen",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Encoding.DecoderXML",
        "fct-package": "ideas",
        "fct-signature": "StdGen",
        "fct-source": "src/Ideas-Encoding-DecoderXML.html#XMLDecoderState",
        "fct-type": "function",
        "title": "getStdGen"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding DecoderXML",
        "module": "Ideas.Encoding.DecoderXML",
        "name": "getStdGen",
        "normalized": "",
        "package": "ideas",
        "partial": "Std Gen",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-DecoderXML.html#v:isOpenMath",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Encoding.DecoderXML",
        "fct-package": "ideas",
        "fct-signature": "Bool",
        "fct-source": "src/Ideas-Encoding-DecoderXML.html#XMLDecoderState",
        "fct-type": "function",
        "title": "isOpenMath"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding DecoderXML",
        "module": "Ideas.Encoding.DecoderXML",
        "name": "isOpenMath",
        "normalized": "",
        "package": "ideas",
        "partial": "Open Math",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-DecoderXML.html#v:xmlDecoder",
      "description": {
        "fct-module": "Ideas.Encoding.DecoderXML",
        "fct-package": "ideas",
        "fct-signature": "Type a t -\u003e XMLDecoder a t",
        "fct-source": "src/Ideas-Encoding-DecoderXML.html#xmlDecoder",
        "fct-type": "function",
        "title": "xmlDecoder"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding DecoderXML",
        "module": "Ideas.Encoding.DecoderXML",
        "name": "xmlDecoder",
        "normalized": "Type a b-\u003eXMLDecoder a b",
        "package": "ideas",
        "partial": "Decoder",
        "signature": "Type a t-\u003eXMLDecoder a t"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-EncoderHTML.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eEncoding in HTML\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "Ideas.Encoding.EncoderHTML",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Encoding-EncoderHTML.html",
        "fct-type": "module",
        "title": "EncoderHTML"
      },
      "index": {
        "description": "Encoding in HTML",
        "hierarchy": "Ideas Encoding EncoderHTML",
        "module": "Ideas.Encoding.EncoderHTML",
        "name": "EncoderHTML",
        "normalized": "",
        "package": "ideas",
        "partial": "Encoder HTML",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-EncoderHTML.html#v:htmlEncoder",
      "description": {
        "fct-module": "Ideas.Encoding.EncoderHTML",
        "fct-package": "ideas",
        "fct-signature": "LinkManager -\u003e DomainReasoner -\u003e Exercise a -\u003e TypedValue (Type a) -\u003e HTMLPage",
        "fct-source": "src/Ideas-Encoding-EncoderHTML.html#htmlEncoder",
        "fct-type": "function",
        "title": "htmlEncoder"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding EncoderHTML",
        "module": "Ideas.Encoding.EncoderHTML",
        "name": "htmlEncoder",
        "normalized": "LinkManager-\u003eDomainReasoner-\u003eExercise a-\u003eTypedValue(Type a)-\u003eHTMLPage",
        "package": "ideas",
        "partial": "Encoder",
        "signature": "LinkManager-\u003eDomainReasoner-\u003eExercise a-\u003eTypedValue(Type a)-\u003eHTMLPage"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-EncoderJSON.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eServices using JSON notation\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "Ideas.Encoding.EncoderJSON",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Encoding-EncoderJSON.html",
        "fct-type": "module",
        "title": "EncoderJSON"
      },
      "index": {
        "description": "Services using JSON notation",
        "hierarchy": "Ideas Encoding EncoderJSON",
        "module": "Ideas.Encoding.EncoderJSON",
        "name": "EncoderJSON",
        "normalized": "",
        "package": "ideas",
        "partial": "Encoder JSON",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-EncoderJSON.html#v:jsonEncoder",
      "description": {
        "fct-module": "Ideas.Encoding.EncoderJSON",
        "fct-package": "ideas",
        "fct-signature": "JSONEncoder a (TypedValue (Type a))",
        "fct-source": "src/Ideas-Encoding-EncoderJSON.html#jsonEncoder",
        "fct-type": "function",
        "title": "jsonEncoder"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding EncoderJSON",
        "module": "Ideas.Encoding.EncoderJSON",
        "name": "jsonEncoder",
        "normalized": "",
        "package": "ideas",
        "partial": "Encoder",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-EncoderXML.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eServices using XML notation\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "Ideas.Encoding.EncoderXML",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Encoding-EncoderXML.html",
        "fct-type": "module",
        "title": "EncoderXML"
      },
      "index": {
        "description": "Services using XML notation",
        "hierarchy": "Ideas Encoding EncoderXML",
        "module": "Ideas.Encoding.EncoderXML",
        "name": "EncoderXML",
        "normalized": "",
        "package": "ideas",
        "partial": "Encoder XML",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-EncoderXML.html#t:XMLEncoder",
      "description": {
        "fct-module": "Ideas.Encoding.EncoderXML",
        "fct-package": "ideas",
        "fct-signature": "type",
        "fct-source": "src/Ideas-Encoding-EncoderXML.html#XMLEncoder",
        "fct-type": "type",
        "title": "XMLEncoder"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding EncoderXML",
        "module": "Ideas.Encoding.EncoderXML",
        "name": "XMLEncoder",
        "normalized": "",
        "package": "ideas",
        "partial": "XMLEncoder",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-EncoderXML.html#t:XMLEncoderState",
      "description": {
        "fct-module": "Ideas.Encoding.EncoderXML",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Encoding-EncoderXML.html#XMLEncoderState",
        "fct-type": "data",
        "title": "XMLEncoderState"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding EncoderXML",
        "module": "Ideas.Encoding.EncoderXML",
        "name": "XMLEncoderState",
        "normalized": "",
        "package": "ideas",
        "partial": "XMLEncoder State",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-EncoderXML.html#v:XMLEncoderState",
      "description": {
        "fct-module": "Ideas.Encoding.EncoderXML",
        "fct-package": "ideas",
        "fct-signature": "XMLEncoderState",
        "fct-source": "src/Ideas-Encoding-EncoderXML.html#XMLEncoderState",
        "fct-type": "function",
        "title": "XMLEncoderState"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding EncoderXML",
        "module": "Ideas.Encoding.EncoderXML",
        "name": "XMLEncoderState",
        "normalized": "",
        "package": "ideas",
        "partial": "XMLEncoder State",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-EncoderXML.html#v:encodeState",
      "description": {
        "fct-module": "Ideas.Encoding.EncoderXML",
        "fct-package": "ideas",
        "fct-signature": "XMLEncoder a (State a)",
        "fct-source": "src/Ideas-Encoding-EncoderXML.html#encodeState",
        "fct-type": "function",
        "title": "encodeState"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding EncoderXML",
        "module": "Ideas.Encoding.EncoderXML",
        "name": "encodeState",
        "normalized": "",
        "package": "ideas",
        "partial": "State",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-EncoderXML.html#v:encodeTerm",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Encoding.EncoderXML",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e XMLBuilder",
        "fct-source": "src/Ideas-Encoding-EncoderXML.html#XMLEncoderState",
        "fct-type": "function",
        "title": "encodeTerm"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding EncoderXML",
        "module": "Ideas.Encoding.EncoderXML",
        "name": "encodeTerm",
        "normalized": "a-\u003eXMLBuilder",
        "package": "ideas",
        "partial": "Term",
        "signature": "a-\u003eXMLBuilder"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-EncoderXML.html#v:getExercise",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Encoding.EncoderXML",
        "fct-package": "ideas",
        "fct-signature": "Exercise a",
        "fct-source": "src/Ideas-Encoding-EncoderXML.html#XMLEncoderState",
        "fct-type": "function",
        "title": "getExercise"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding EncoderXML",
        "module": "Ideas.Encoding.EncoderXML",
        "name": "getExercise",
        "normalized": "",
        "package": "ideas",
        "partial": "Exercise",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-EncoderXML.html#v:isOpenMath",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Encoding.EncoderXML",
        "fct-package": "ideas",
        "fct-signature": "Bool",
        "fct-source": "src/Ideas-Encoding-EncoderXML.html#XMLEncoderState",
        "fct-type": "function",
        "title": "isOpenMath"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding EncoderXML",
        "module": "Ideas.Encoding.EncoderXML",
        "name": "isOpenMath",
        "normalized": "",
        "package": "ideas",
        "partial": "Open Math",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-EncoderXML.html#v:xmlEncoder",
      "description": {
        "fct-module": "Ideas.Encoding.EncoderXML",
        "fct-package": "ideas",
        "fct-signature": "XMLEncoder a (TypedValue (Type a))",
        "fct-source": "src/Ideas-Encoding-EncoderXML.html#xmlEncoder",
        "fct-type": "function",
        "title": "xmlEncoder"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding EncoderXML",
        "module": "Ideas.Encoding.EncoderXML",
        "name": "xmlEncoder",
        "normalized": "",
        "package": "ideas",
        "partial": "Encoder",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-Evaluator.html#",
      "description": {
        "fct-module": "Ideas.Encoding.Evaluator",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Encoding-Evaluator.html",
        "fct-type": "module",
        "title": "Evaluator"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding Evaluator",
        "module": "Ideas.Encoding.Evaluator",
        "name": "Evaluator",
        "normalized": "",
        "package": "ideas",
        "partial": "Evaluator",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-Evaluator.html#t:EncoderState",
      "description": {
        "fct-module": "Ideas.Encoding.Evaluator",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Encoding-Evaluator.html#EncoderState",
        "fct-type": "data",
        "title": "EncoderState"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding Evaluator",
        "module": "Ideas.Encoding.Evaluator",
        "name": "EncoderState",
        "normalized": "",
        "package": "ideas",
        "partial": "Encoder State",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-Evaluator.html#t:Evaluator",
      "description": {
        "fct-module": "Ideas.Encoding.Evaluator",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Encoding-Evaluator.html#Evaluator",
        "fct-type": "data",
        "title": "Evaluator"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding Evaluator",
        "module": "Ideas.Encoding.Evaluator",
        "name": "Evaluator",
        "normalized": "",
        "package": "ideas",
        "partial": "Evaluator",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-Evaluator.html#v:-47--47-",
      "description": {
        "fct-module": "Ideas.Encoding.Evaluator",
        "fct-package": "ideas",
        "fct-signature": "EncoderState st a c -\u003e a -\u003e EncoderState st b c",
        "fct-source": "src/Ideas-Encoding-Evaluator.html#%2F%2F",
        "fct-type": "function",
        "title": "(//)"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding Evaluator",
        "module": "Ideas.Encoding.Evaluator",
        "name": "(//) //",
        "normalized": "EncoderState a b c-\u003eb-\u003eEncoderState a d c",
        "package": "ideas",
        "partial": "",
        "signature": "EncoderState st a c-\u003ea-\u003eEncoderState st b c"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-Evaluator.html#v:-60--36--62-",
      "description": {
        "fct-descr": "\u003cp\u003eAn infix synonym for \u003ccode\u003e\u003ca\u003efmap\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e",
        "fct-module": "Ideas.Encoding.Evaluator",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e b) -\u003e f a -\u003e f b",
        "fct-type": "function",
        "title": "(\u003c$\u003e)"
      },
      "index": {
        "description": "An infix synonym for fmap",
        "hierarchy": "Ideas Encoding Evaluator",
        "module": "Ideas.Encoding.Evaluator",
        "name": "(\u003c$\u003e) \u003c$\u003e",
        "normalized": "(a-\u003eb)-\u003ec a-\u003ec b",
        "package": "ideas",
        "partial": "",
        "signature": "(a-\u003eb)-\u003ef a-\u003ef b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-Evaluator.html#v:-60--42--42--62-",
      "description": {
        "fct-descr": "\u003cp\u003eA variant of \u003ccode\u003e\u003ca\u003e\u003c*\u003e\u003c/a\u003e\u003c/code\u003e with the arguments reversed.\n\u003c/p\u003e",
        "fct-module": "Ideas.Encoding.Evaluator",
        "fct-package": "ideas",
        "fct-signature": "f a -\u003e f (a -\u003e b) -\u003e f b",
        "fct-type": "function",
        "title": "(\u003c**\u003e)"
      },
      "index": {
        "description": "variant of with the arguments reversed",
        "hierarchy": "Ideas Encoding Evaluator",
        "module": "Ideas.Encoding.Evaluator",
        "name": "(\u003c**\u003e) \u003c**\u003e",
        "normalized": "a b-\u003ea(b-\u003ec)-\u003ea c",
        "package": "ideas",
        "partial": "",
        "signature": "f a-\u003ef(a-\u003eb)-\u003ef b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-Evaluator.html#v:Evaluator",
      "description": {
        "fct-module": "Ideas.Encoding.Evaluator",
        "fct-package": "ideas",
        "fct-signature": "(TypedValue (Type a) -\u003e m b) -\u003e (forall t.  Type a t -\u003e m t) -\u003e Evaluator a m b",
        "fct-source": "src/Ideas-Encoding-Evaluator.html#Evaluator",
        "fct-type": "function",
        "title": "Evaluator"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding Evaluator",
        "module": "Ideas.Encoding.Evaluator",
        "name": "Evaluator",
        "normalized": "(TypedValue(Type a)-\u003eb c)-\u003e(d e Type a f-\u003eb f)-\u003eEvaluator a b c",
        "package": "ideas",
        "partial": "Evaluator",
        "signature": "(TypedValue(Type a)-\u003em b)-\u003e(forall t. Type a t-\u003em t)-\u003eEvaluator a m b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-Evaluator.html#v:eitherEncoder",
      "description": {
        "fct-module": "Ideas.Encoding.Evaluator",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e Either String b) -\u003e EncoderState st a b",
        "fct-source": "src/Ideas-Encoding-Evaluator.html#eitherEncoder",
        "fct-type": "function",
        "title": "eitherEncoder"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding Evaluator",
        "module": "Ideas.Encoding.Evaluator",
        "name": "eitherEncoder",
        "normalized": "(a-\u003eEither String b)-\u003eEncoderState c a b",
        "package": "ideas",
        "partial": "Encoder",
        "signature": "(a-\u003eEither String b)-\u003eEncoderState st a b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-Evaluator.html#v:encodeTyped",
      "description": {
        "fct-module": "Ideas.Encoding.Evaluator",
        "fct-package": "ideas",
        "fct-signature": "EncoderState st t b -\u003e EncoderState st (TypedValue (Type a)) b",
        "fct-source": "src/Ideas-Encoding-Evaluator.html#encodeTyped",
        "fct-type": "function",
        "title": "encodeTyped"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding Evaluator",
        "module": "Ideas.Encoding.Evaluator",
        "name": "encodeTyped",
        "normalized": "EncoderState a b c-\u003eEncoderState a(TypedValue(Type d))c",
        "package": "ideas",
        "partial": "Typed",
        "signature": "EncoderState st t b-\u003eEncoderState st(TypedValue(Type a))b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-Evaluator.html#v:encoderFor",
      "description": {
        "fct-module": "Ideas.Encoding.Evaluator",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e EncoderState st a b) -\u003e EncoderState st a b",
        "fct-source": "src/Ideas-Encoding-Evaluator.html#encoderFor",
        "fct-type": "function",
        "title": "encoderFor"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding Evaluator",
        "module": "Ideas.Encoding.Evaluator",
        "name": "encoderFor",
        "normalized": "(a-\u003eEncoderState b a c)-\u003eEncoderState b a c",
        "package": "ideas",
        "partial": "For",
        "signature": "(a-\u003eEncoderState st a b)-\u003eEncoderState st a b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-Evaluator.html#v:encoderStateFor",
      "description": {
        "fct-module": "Ideas.Encoding.Evaluator",
        "fct-package": "ideas",
        "fct-signature": "(st -\u003e a -\u003e EncoderState st a b) -\u003e EncoderState st a b",
        "fct-source": "src/Ideas-Encoding-Evaluator.html#encoderStateFor",
        "fct-type": "function",
        "title": "encoderStateFor"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding Evaluator",
        "module": "Ideas.Encoding.Evaluator",
        "name": "encoderStateFor",
        "normalized": "(a-\u003eb-\u003eEncoderState a b c)-\u003eEncoderState a b c",
        "package": "ideas",
        "partial": "State For",
        "signature": "(st-\u003ea-\u003eEncoderState st a b)-\u003eEncoderState st a b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-Evaluator.html#v:evalService",
      "description": {
        "fct-module": "Ideas.Encoding.Evaluator",
        "fct-package": "ideas",
        "fct-signature": "Evaluator a m b -\u003e Service -\u003e m b",
        "fct-source": "src/Ideas-Encoding-Evaluator.html#evalService",
        "fct-type": "function",
        "title": "evalService"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding Evaluator",
        "module": "Ideas.Encoding.Evaluator",
        "name": "evalService",
        "normalized": "Evaluator a b c-\u003eService-\u003eb c",
        "package": "ideas",
        "partial": "Service",
        "signature": "Evaluator a m b-\u003eService-\u003em b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-Evaluator.html#v:getState",
      "description": {
        "fct-module": "Ideas.Encoding.Evaluator",
        "fct-package": "ideas",
        "fct-signature": "EncoderState st a st",
        "fct-source": "src/Ideas-Encoding-Evaluator.html#getState",
        "fct-type": "function",
        "title": "getState"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding Evaluator",
        "module": "Ideas.Encoding.Evaluator",
        "name": "getState",
        "normalized": "",
        "package": "ideas",
        "partial": "State",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-Evaluator.html#v:liftA2",
      "description": {
        "fct-descr": "\u003cp\u003eLift a binary function to actions.\n\u003c/p\u003e",
        "fct-module": "Ideas.Encoding.Evaluator",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e b -\u003e c) -\u003e f a -\u003e f b -\u003e f c",
        "fct-type": "function",
        "title": "liftA2"
      },
      "index": {
        "description": "Lift binary function to actions",
        "hierarchy": "Ideas Encoding Evaluator",
        "module": "Ideas.Encoding.Evaluator",
        "name": "liftA2",
        "normalized": "(a-\u003eb-\u003ec)-\u003ed a-\u003ed b-\u003ed c",
        "package": "ideas",
        "partial": "",
        "signature": "(a-\u003eb-\u003ec)-\u003ef a-\u003ef b-\u003ef c"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-Evaluator.html#v:maybeEncoder",
      "description": {
        "fct-module": "Ideas.Encoding.Evaluator",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e Maybe b) -\u003e EncoderState st a b",
        "fct-source": "src/Ideas-Encoding-Evaluator.html#maybeEncoder",
        "fct-type": "function",
        "title": "maybeEncoder"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding Evaluator",
        "module": "Ideas.Encoding.Evaluator",
        "name": "maybeEncoder",
        "normalized": "(a-\u003eMaybe b)-\u003eEncoderState c a b",
        "package": "ideas",
        "partial": "Encoder",
        "signature": "(a-\u003eMaybe b)-\u003eEncoderState st a b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-Evaluator.html#v:pure",
      "description": {
        "fct-descr": "\u003cp\u003eLift a value.\n\u003c/p\u003e",
        "fct-module": "Ideas.Encoding.Evaluator",
        "fct-package": "ideas",
        "fct-signature": "forall a.  a -\u003e f a",
        "fct-type": "function",
        "title": "pure"
      },
      "index": {
        "description": "Lift value",
        "hierarchy": "Ideas Encoding Evaluator",
        "module": "Ideas.Encoding.Evaluator",
        "name": "pure",
        "normalized": "a b c-\u003ed c",
        "package": "ideas",
        "partial": "",
        "signature": "forall a. a-\u003ef a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-Evaluator.html#v:runEncoderState",
      "description": {
        "fct-module": "Ideas.Encoding.Evaluator",
        "fct-package": "ideas",
        "fct-signature": "EncoderState st a b -\u003e st -\u003e a -\u003e Either String b",
        "fct-source": "src/Ideas-Encoding-Evaluator.html#runEncoderState",
        "fct-type": "function",
        "title": "runEncoderState"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding Evaluator",
        "module": "Ideas.Encoding.Evaluator",
        "name": "runEncoderState",
        "normalized": "EncoderState a b c-\u003ea-\u003eb-\u003eEither String c",
        "package": "ideas",
        "partial": "Encoder State",
        "signature": "EncoderState st a b-\u003est-\u003ea-\u003eEither String b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-Evaluator.html#v:runEncoderStateM",
      "description": {
        "fct-module": "Ideas.Encoding.Evaluator",
        "fct-package": "ideas",
        "fct-signature": "EncoderState st a b -\u003e st -\u003e a -\u003e m b",
        "fct-source": "src/Ideas-Encoding-Evaluator.html#runEncoderStateM",
        "fct-type": "function",
        "title": "runEncoderStateM"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding Evaluator",
        "module": "Ideas.Encoding.Evaluator",
        "name": "runEncoderStateM",
        "normalized": "EncoderState a b c-\u003ea-\u003eb-\u003ed c",
        "package": "ideas",
        "partial": "Encoder State",
        "signature": "EncoderState st a b-\u003est-\u003ea-\u003em b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-Evaluator.html#v:simpleEncoder",
      "description": {
        "fct-module": "Ideas.Encoding.Evaluator",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e b) -\u003e EncoderState st a b",
        "fct-source": "src/Ideas-Encoding-Evaluator.html#simpleEncoder",
        "fct-type": "function",
        "title": "simpleEncoder"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding Evaluator",
        "module": "Ideas.Encoding.Evaluator",
        "name": "simpleEncoder",
        "normalized": "(a-\u003eb)-\u003eEncoderState c a b",
        "package": "ideas",
        "partial": "Encoder",
        "signature": "(a-\u003eb)-\u003eEncoderState st a b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-Evaluator.html#v:withState",
      "description": {
        "fct-module": "Ideas.Encoding.Evaluator",
        "fct-package": "ideas",
        "fct-signature": "(st -\u003e b) -\u003e EncoderState st a b",
        "fct-source": "src/Ideas-Encoding-Evaluator.html#withState",
        "fct-type": "function",
        "title": "withState"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding Evaluator",
        "module": "Ideas.Encoding.Evaluator",
        "name": "withState",
        "normalized": "(a-\u003eb)-\u003eEncoderState a c b",
        "package": "ideas",
        "partial": "State",
        "signature": "(st-\u003eb)-\u003eEncoderState st a b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-LinkManager.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eManages links to information\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "Ideas.Encoding.LinkManager",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Encoding-LinkManager.html",
        "fct-type": "module",
        "title": "LinkManager"
      },
      "index": {
        "description": "Manages links to information",
        "hierarchy": "Ideas Encoding LinkManager",
        "module": "Ideas.Encoding.LinkManager",
        "name": "LinkManager",
        "normalized": "",
        "package": "ideas",
        "partial": "Link Manager",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-LinkManager.html#t:LinkManager",
      "description": {
        "fct-module": "Ideas.Encoding.LinkManager",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Encoding-LinkManager.html#LinkManager",
        "fct-type": "data",
        "title": "LinkManager"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding LinkManager",
        "module": "Ideas.Encoding.LinkManager",
        "name": "LinkManager",
        "normalized": "",
        "package": "ideas",
        "partial": "Link Manager",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-LinkManager.html#v:-60--47--62-",
      "description": {
        "fct-module": "Ideas.Encoding.LinkManager",
        "fct-package": "ideas",
        "fct-signature": "String -\u003e FilePath -\u003e FilePath",
        "fct-source": "src/Ideas-Encoding-LinkManager.html#%3C%2F%3E",
        "fct-type": "function",
        "title": "(\u003c/\u003e)"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding LinkManager",
        "module": "Ideas.Encoding.LinkManager",
        "name": "(\u003c/\u003e) \u003c/\u003e",
        "normalized": "String-\u003eFilePath-\u003eFilePath",
        "package": "ideas",
        "partial": "",
        "signature": "String-\u003eFilePath-\u003eFilePath"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-LinkManager.html#v:LinkManager",
      "description": {
        "fct-module": "Ideas.Encoding.LinkManager",
        "fct-package": "ideas",
        "fct-signature": "LinkManager",
        "fct-source": "src/Ideas-Encoding-LinkManager.html#LinkManager",
        "fct-type": "function",
        "title": "LinkManager"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding LinkManager",
        "module": "Ideas.Encoding.LinkManager",
        "name": "LinkManager",
        "normalized": "",
        "package": "ideas",
        "partial": "Link Manager",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-LinkManager.html#v:dynamicLinks",
      "description": {
        "fct-module": "Ideas.Encoding.LinkManager",
        "fct-package": "ideas",
        "fct-signature": "String -\u003e LinkManager",
        "fct-source": "src/Ideas-Encoding-LinkManager.html#dynamicLinks",
        "fct-type": "function",
        "title": "dynamicLinks"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding LinkManager",
        "module": "Ideas.Encoding.LinkManager",
        "name": "dynamicLinks",
        "normalized": "String-\u003eLinkManager",
        "package": "ideas",
        "partial": "Links",
        "signature": "String-\u003eLinkManager"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-LinkManager.html#v:isStatic",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Encoding.LinkManager",
        "fct-package": "ideas",
        "fct-signature": "Bool",
        "fct-source": "src/Ideas-Encoding-LinkManager.html#LinkManager",
        "fct-type": "function",
        "title": "isStatic"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding LinkManager",
        "module": "Ideas.Encoding.LinkManager",
        "name": "isStatic",
        "normalized": "",
        "package": "ideas",
        "partial": "Static",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-LinkManager.html#v:linkToApplications",
      "description": {
        "fct-module": "Ideas.Encoding.LinkManager",
        "fct-package": "ideas",
        "fct-signature": "LinkManager -\u003e State a -\u003e HTMLBuilder -\u003e HTMLBuilder",
        "fct-source": "src/Ideas-Encoding-LinkManager.html#linkToApplications",
        "fct-type": "function",
        "title": "linkToApplications"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding LinkManager",
        "module": "Ideas.Encoding.LinkManager",
        "name": "linkToApplications",
        "normalized": "LinkManager-\u003eState a-\u003eHTMLBuilder-\u003eHTMLBuilder",
        "package": "ideas",
        "partial": "To Applications",
        "signature": "LinkManager-\u003eState a-\u003eHTMLBuilder-\u003eHTMLBuilder"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-LinkManager.html#v:linkToDerivation",
      "description": {
        "fct-module": "Ideas.Encoding.LinkManager",
        "fct-package": "ideas",
        "fct-signature": "LinkManager -\u003e State a -\u003e HTMLBuilder -\u003e HTMLBuilder",
        "fct-source": "src/Ideas-Encoding-LinkManager.html#linkToDerivation",
        "fct-type": "function",
        "title": "linkToDerivation"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding LinkManager",
        "module": "Ideas.Encoding.LinkManager",
        "name": "linkToDerivation",
        "normalized": "LinkManager-\u003eState a-\u003eHTMLBuilder-\u003eHTMLBuilder",
        "package": "ideas",
        "partial": "To Derivation",
        "signature": "LinkManager-\u003eState a-\u003eHTMLBuilder-\u003eHTMLBuilder"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-LinkManager.html#v:linkToDerivations",
      "description": {
        "fct-module": "Ideas.Encoding.LinkManager",
        "fct-package": "ideas",
        "fct-signature": "LinkManager -\u003e Exercise a -\u003e HTMLBuilder -\u003e HTMLBuilder",
        "fct-source": "src/Ideas-Encoding-LinkManager.html#linkToDerivations",
        "fct-type": "function",
        "title": "linkToDerivations"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding LinkManager",
        "module": "Ideas.Encoding.LinkManager",
        "name": "linkToDerivations",
        "normalized": "LinkManager-\u003eExercise a-\u003eHTMLBuilder-\u003eHTMLBuilder",
        "package": "ideas",
        "partial": "To Derivations",
        "signature": "LinkManager-\u003eExercise a-\u003eHTMLBuilder-\u003eHTMLBuilder"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-LinkManager.html#v:linkToExamples",
      "description": {
        "fct-module": "Ideas.Encoding.LinkManager",
        "fct-package": "ideas",
        "fct-signature": "LinkManager -\u003e Exercise a -\u003e HTMLBuilder -\u003e HTMLBuilder",
        "fct-source": "src/Ideas-Encoding-LinkManager.html#linkToExamples",
        "fct-type": "function",
        "title": "linkToExamples"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding LinkManager",
        "module": "Ideas.Encoding.LinkManager",
        "name": "linkToExamples",
        "normalized": "LinkManager-\u003eExercise a-\u003eHTMLBuilder-\u003eHTMLBuilder",
        "package": "ideas",
        "partial": "To Examples",
        "signature": "LinkManager-\u003eExercise a-\u003eHTMLBuilder-\u003eHTMLBuilder"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-LinkManager.html#v:linkToExercise",
      "description": {
        "fct-module": "Ideas.Encoding.LinkManager",
        "fct-package": "ideas",
        "fct-signature": "LinkManager -\u003e Exercise a -\u003e HTMLBuilder -\u003e HTMLBuilder",
        "fct-source": "src/Ideas-Encoding-LinkManager.html#linkToExercise",
        "fct-type": "function",
        "title": "linkToExercise"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding LinkManager",
        "module": "Ideas.Encoding.LinkManager",
        "name": "linkToExercise",
        "normalized": "LinkManager-\u003eExercise a-\u003eHTMLBuilder-\u003eHTMLBuilder",
        "package": "ideas",
        "partial": "To Exercise",
        "signature": "LinkManager-\u003eExercise a-\u003eHTMLBuilder-\u003eHTMLBuilder"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-LinkManager.html#v:linkToExercises",
      "description": {
        "fct-module": "Ideas.Encoding.LinkManager",
        "fct-package": "ideas",
        "fct-signature": "LinkManager -\u003e HTMLBuilder -\u003e HTMLBuilder",
        "fct-source": "src/Ideas-Encoding-LinkManager.html#linkToExercises",
        "fct-type": "function",
        "title": "linkToExercises"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding LinkManager",
        "module": "Ideas.Encoding.LinkManager",
        "name": "linkToExercises",
        "normalized": "LinkManager-\u003eHTMLBuilder-\u003eHTMLBuilder",
        "package": "ideas",
        "partial": "To Exercises",
        "signature": "LinkManager-\u003eHTMLBuilder-\u003eHTMLBuilder"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-LinkManager.html#v:linkToFirsts",
      "description": {
        "fct-module": "Ideas.Encoding.LinkManager",
        "fct-package": "ideas",
        "fct-signature": "LinkManager -\u003e State a -\u003e HTMLBuilder -\u003e HTMLBuilder",
        "fct-source": "src/Ideas-Encoding-LinkManager.html#linkToFirsts",
        "fct-type": "function",
        "title": "linkToFirsts"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding LinkManager",
        "module": "Ideas.Encoding.LinkManager",
        "name": "linkToFirsts",
        "normalized": "LinkManager-\u003eState a-\u003eHTMLBuilder-\u003eHTMLBuilder",
        "package": "ideas",
        "partial": "To Firsts",
        "signature": "LinkManager-\u003eState a-\u003eHTMLBuilder-\u003eHTMLBuilder"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-LinkManager.html#v:linkToIndex",
      "description": {
        "fct-module": "Ideas.Encoding.LinkManager",
        "fct-package": "ideas",
        "fct-signature": "LinkManager -\u003e HTMLBuilder -\u003e HTMLBuilder",
        "fct-source": "src/Ideas-Encoding-LinkManager.html#linkToIndex",
        "fct-type": "function",
        "title": "linkToIndex"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding LinkManager",
        "module": "Ideas.Encoding.LinkManager",
        "name": "linkToIndex",
        "normalized": "LinkManager-\u003eHTMLBuilder-\u003eHTMLBuilder",
        "package": "ideas",
        "partial": "To Index",
        "signature": "LinkManager-\u003eHTMLBuilder-\u003eHTMLBuilder"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-LinkManager.html#v:linkToRandomExample",
      "description": {
        "fct-module": "Ideas.Encoding.LinkManager",
        "fct-package": "ideas",
        "fct-signature": "LinkManager -\u003e Exercise a -\u003e Difficulty -\u003e HTMLBuilder -\u003e HTMLBuilder",
        "fct-source": "src/Ideas-Encoding-LinkManager.html#linkToRandomExample",
        "fct-type": "function",
        "title": "linkToRandomExample"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding LinkManager",
        "module": "Ideas.Encoding.LinkManager",
        "name": "linkToRandomExample",
        "normalized": "LinkManager-\u003eExercise a-\u003eDifficulty-\u003eHTMLBuilder-\u003eHTMLBuilder",
        "package": "ideas",
        "partial": "To Random Example",
        "signature": "LinkManager-\u003eExercise a-\u003eDifficulty-\u003eHTMLBuilder-\u003eHTMLBuilder"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-LinkManager.html#v:linkToRule",
      "description": {
        "fct-module": "Ideas.Encoding.LinkManager",
        "fct-package": "ideas",
        "fct-signature": "LinkManager -\u003e Exercise a -\u003e Rule (Context a) -\u003e HTMLBuilder -\u003e HTMLBuilder",
        "fct-source": "src/Ideas-Encoding-LinkManager.html#linkToRule",
        "fct-type": "function",
        "title": "linkToRule"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding LinkManager",
        "module": "Ideas.Encoding.LinkManager",
        "name": "linkToRule",
        "normalized": "LinkManager-\u003eExercise a-\u003eRule(Context a)-\u003eHTMLBuilder-\u003eHTMLBuilder",
        "package": "ideas",
        "partial": "To Rule",
        "signature": "LinkManager-\u003eExercise a-\u003eRule(Context a)-\u003eHTMLBuilder-\u003eHTMLBuilder"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-LinkManager.html#v:linkToRules",
      "description": {
        "fct-module": "Ideas.Encoding.LinkManager",
        "fct-package": "ideas",
        "fct-signature": "LinkManager -\u003e Exercise a -\u003e HTMLBuilder -\u003e HTMLBuilder",
        "fct-source": "src/Ideas-Encoding-LinkManager.html#linkToRules",
        "fct-type": "function",
        "title": "linkToRules"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding LinkManager",
        "module": "Ideas.Encoding.LinkManager",
        "name": "linkToRules",
        "normalized": "LinkManager-\u003eExercise a-\u003eHTMLBuilder-\u003eHTMLBuilder",
        "package": "ideas",
        "partial": "To Rules",
        "signature": "LinkManager-\u003eExercise a-\u003eHTMLBuilder-\u003eHTMLBuilder"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-LinkManager.html#v:linkToService",
      "description": {
        "fct-module": "Ideas.Encoding.LinkManager",
        "fct-package": "ideas",
        "fct-signature": "LinkManager -\u003e Service -\u003e HTMLBuilder -\u003e HTMLBuilder",
        "fct-source": "src/Ideas-Encoding-LinkManager.html#linkToService",
        "fct-type": "function",
        "title": "linkToService"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding LinkManager",
        "module": "Ideas.Encoding.LinkManager",
        "name": "linkToService",
        "normalized": "LinkManager-\u003eService-\u003eHTMLBuilder-\u003eHTMLBuilder",
        "package": "ideas",
        "partial": "To Service",
        "signature": "LinkManager-\u003eService-\u003eHTMLBuilder-\u003eHTMLBuilder"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-LinkManager.html#v:linkToServices",
      "description": {
        "fct-module": "Ideas.Encoding.LinkManager",
        "fct-package": "ideas",
        "fct-signature": "LinkManager -\u003e HTMLBuilder -\u003e HTMLBuilder",
        "fct-source": "src/Ideas-Encoding-LinkManager.html#linkToServices",
        "fct-type": "function",
        "title": "linkToServices"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding LinkManager",
        "module": "Ideas.Encoding.LinkManager",
        "name": "linkToServices",
        "normalized": "LinkManager-\u003eHTMLBuilder-\u003eHTMLBuilder",
        "package": "ideas",
        "partial": "To Services",
        "signature": "LinkManager-\u003eHTMLBuilder-\u003eHTMLBuilder"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-LinkManager.html#v:linkToState",
      "description": {
        "fct-module": "Ideas.Encoding.LinkManager",
        "fct-package": "ideas",
        "fct-signature": "LinkManager -\u003e State a -\u003e HTMLBuilder -\u003e HTMLBuilder",
        "fct-source": "src/Ideas-Encoding-LinkManager.html#linkToState",
        "fct-type": "function",
        "title": "linkToState"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding LinkManager",
        "module": "Ideas.Encoding.LinkManager",
        "name": "linkToState",
        "normalized": "LinkManager-\u003eState a-\u003eHTMLBuilder-\u003eHTMLBuilder",
        "package": "ideas",
        "partial": "To State",
        "signature": "LinkManager-\u003eState a-\u003eHTMLBuilder-\u003eHTMLBuilder"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-LinkManager.html#v:linkToStrategy",
      "description": {
        "fct-module": "Ideas.Encoding.LinkManager",
        "fct-package": "ideas",
        "fct-signature": "LinkManager -\u003e Exercise a -\u003e HTMLBuilder -\u003e HTMLBuilder",
        "fct-source": "src/Ideas-Encoding-LinkManager.html#linkToStrategy",
        "fct-type": "function",
        "title": "linkToStrategy"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding LinkManager",
        "module": "Ideas.Encoding.LinkManager",
        "name": "linkToStrategy",
        "normalized": "LinkManager-\u003eExercise a-\u003eHTMLBuilder-\u003eHTMLBuilder",
        "package": "ideas",
        "partial": "To Strategy",
        "signature": "LinkManager-\u003eExercise a-\u003eHTMLBuilder-\u003eHTMLBuilder"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-LinkManager.html#v:linksUp",
      "description": {
        "fct-module": "Ideas.Encoding.LinkManager",
        "fct-package": "ideas",
        "fct-signature": "Int -\u003e LinkManager -\u003e LinkManager",
        "fct-source": "src/Ideas-Encoding-LinkManager.html#linksUp",
        "fct-type": "function",
        "title": "linksUp"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding LinkManager",
        "module": "Ideas.Encoding.LinkManager",
        "name": "linksUp",
        "normalized": "Int-\u003eLinkManager-\u003eLinkManager",
        "package": "ideas",
        "partial": "Up",
        "signature": "Int-\u003eLinkManager-\u003eLinkManager"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-LinkManager.html#v:pathLevel",
      "description": {
        "fct-module": "Ideas.Encoding.LinkManager",
        "fct-package": "ideas",
        "fct-signature": "FilePath -\u003e Int",
        "fct-source": "src/Ideas-Encoding-LinkManager.html#pathLevel",
        "fct-type": "function",
        "title": "pathLevel"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding LinkManager",
        "module": "Ideas.Encoding.LinkManager",
        "name": "pathLevel",
        "normalized": "FilePath-\u003eInt",
        "package": "ideas",
        "partial": "Level",
        "signature": "FilePath-\u003eInt"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-LinkManager.html#v:stateToXML",
      "description": {
        "fct-module": "Ideas.Encoding.LinkManager",
        "fct-package": "ideas",
        "fct-signature": "State a -\u003e XMLBuilder",
        "fct-source": "src/Ideas-Encoding-LinkManager.html#stateToXML",
        "fct-type": "function",
        "title": "stateToXML"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding LinkManager",
        "module": "Ideas.Encoding.LinkManager",
        "name": "stateToXML",
        "normalized": "State a-\u003eXMLBuilder",
        "package": "ideas",
        "partial": "To XML",
        "signature": "State a-\u003eXMLBuilder"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-LinkManager.html#v:staticLinks",
      "description": {
        "fct-module": "Ideas.Encoding.LinkManager",
        "fct-package": "ideas",
        "fct-signature": "LinkManager",
        "fct-source": "src/Ideas-Encoding-LinkManager.html#staticLinks",
        "fct-type": "function",
        "title": "staticLinks"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding LinkManager",
        "module": "Ideas.Encoding.LinkManager",
        "name": "staticLinks",
        "normalized": "",
        "package": "ideas",
        "partial": "Links",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-LinkManager.html#v:urlForApplications",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Encoding.LinkManager",
        "fct-package": "ideas",
        "fct-signature": "forall a.  State a -\u003e String",
        "fct-source": "src/Ideas-Encoding-LinkManager.html#LinkManager",
        "fct-type": "function",
        "title": "urlForApplications"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding LinkManager",
        "module": "Ideas.Encoding.LinkManager",
        "name": "urlForApplications",
        "normalized": "a b State c-\u003eString",
        "package": "ideas",
        "partial": "For Applications",
        "signature": "forall a. State a-\u003eString"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-LinkManager.html#v:urlForDerivation",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Encoding.LinkManager",
        "fct-package": "ideas",
        "fct-signature": "forall a.  State a -\u003e String",
        "fct-source": "src/Ideas-Encoding-LinkManager.html#LinkManager",
        "fct-type": "function",
        "title": "urlForDerivation"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding LinkManager",
        "module": "Ideas.Encoding.LinkManager",
        "name": "urlForDerivation",
        "normalized": "a b State c-\u003eString",
        "package": "ideas",
        "partial": "For Derivation",
        "signature": "forall a. State a-\u003eString"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-LinkManager.html#v:urlForDerivations",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Encoding.LinkManager",
        "fct-package": "ideas",
        "fct-signature": "forall a.  Exercise a -\u003e String",
        "fct-source": "src/Ideas-Encoding-LinkManager.html#LinkManager",
        "fct-type": "function",
        "title": "urlForDerivations"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding LinkManager",
        "module": "Ideas.Encoding.LinkManager",
        "name": "urlForDerivations",
        "normalized": "a b Exercise c-\u003eString",
        "package": "ideas",
        "partial": "For Derivations",
        "signature": "forall a. Exercise a-\u003eString"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-LinkManager.html#v:urlForExamples",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Encoding.LinkManager",
        "fct-package": "ideas",
        "fct-signature": "forall a.  Exercise a -\u003e String",
        "fct-source": "src/Ideas-Encoding-LinkManager.html#LinkManager",
        "fct-type": "function",
        "title": "urlForExamples"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding LinkManager",
        "module": "Ideas.Encoding.LinkManager",
        "name": "urlForExamples",
        "normalized": "a b Exercise c-\u003eString",
        "package": "ideas",
        "partial": "For Examples",
        "signature": "forall a. Exercise a-\u003eString"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-LinkManager.html#v:urlForExercise",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Encoding.LinkManager",
        "fct-package": "ideas",
        "fct-signature": "forall a.  Exercise a -\u003e String",
        "fct-source": "src/Ideas-Encoding-LinkManager.html#LinkManager",
        "fct-type": "function",
        "title": "urlForExercise"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding LinkManager",
        "module": "Ideas.Encoding.LinkManager",
        "name": "urlForExercise",
        "normalized": "a b Exercise c-\u003eString",
        "package": "ideas",
        "partial": "For Exercise",
        "signature": "forall a. Exercise a-\u003eString"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-LinkManager.html#v:urlForExercises",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Encoding.LinkManager",
        "fct-package": "ideas",
        "fct-signature": "String",
        "fct-source": "src/Ideas-Encoding-LinkManager.html#LinkManager",
        "fct-type": "function",
        "title": "urlForExercises"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding LinkManager",
        "module": "Ideas.Encoding.LinkManager",
        "name": "urlForExercises",
        "normalized": "",
        "package": "ideas",
        "partial": "For Exercises",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-LinkManager.html#v:urlForFirsts",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Encoding.LinkManager",
        "fct-package": "ideas",
        "fct-signature": "forall a.  State a -\u003e String",
        "fct-source": "src/Ideas-Encoding-LinkManager.html#LinkManager",
        "fct-type": "function",
        "title": "urlForFirsts"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding LinkManager",
        "module": "Ideas.Encoding.LinkManager",
        "name": "urlForFirsts",
        "normalized": "a b State c-\u003eString",
        "package": "ideas",
        "partial": "For Firsts",
        "signature": "forall a. State a-\u003eString"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-LinkManager.html#v:urlForIndex",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Encoding.LinkManager",
        "fct-package": "ideas",
        "fct-signature": "String",
        "fct-source": "src/Ideas-Encoding-LinkManager.html#LinkManager",
        "fct-type": "function",
        "title": "urlForIndex"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding LinkManager",
        "module": "Ideas.Encoding.LinkManager",
        "name": "urlForIndex",
        "normalized": "",
        "package": "ideas",
        "partial": "For Index",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-LinkManager.html#v:urlForRandomExample",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Encoding.LinkManager",
        "fct-package": "ideas",
        "fct-signature": "forall a.  Exercise a -\u003e Difficulty -\u003e String",
        "fct-source": "src/Ideas-Encoding-LinkManager.html#LinkManager",
        "fct-type": "function",
        "title": "urlForRandomExample"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding LinkManager",
        "module": "Ideas.Encoding.LinkManager",
        "name": "urlForRandomExample",
        "normalized": "a b Exercise c-\u003eDifficulty-\u003eString",
        "package": "ideas",
        "partial": "For Random Example",
        "signature": "forall a. Exercise a-\u003eDifficulty-\u003eString"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-LinkManager.html#v:urlForRequest",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Encoding.LinkManager",
        "fct-package": "ideas",
        "fct-signature": "String",
        "fct-source": "src/Ideas-Encoding-LinkManager.html#LinkManager",
        "fct-type": "function",
        "title": "urlForRequest"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding LinkManager",
        "module": "Ideas.Encoding.LinkManager",
        "name": "urlForRequest",
        "normalized": "",
        "package": "ideas",
        "partial": "For Request",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-LinkManager.html#v:urlForResource",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Encoding.LinkManager",
        "fct-package": "ideas",
        "fct-signature": "String -\u003e String",
        "fct-source": "src/Ideas-Encoding-LinkManager.html#LinkManager",
        "fct-type": "function",
        "title": "urlForResource"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding LinkManager",
        "module": "Ideas.Encoding.LinkManager",
        "name": "urlForResource",
        "normalized": "String-\u003eString",
        "package": "ideas",
        "partial": "For Resource",
        "signature": "String-\u003eString"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-LinkManager.html#v:urlForRule",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Encoding.LinkManager",
        "fct-package": "ideas",
        "fct-signature": "forall a.  Exercise a -\u003e Rule (Context a) -\u003e String",
        "fct-source": "src/Ideas-Encoding-LinkManager.html#LinkManager",
        "fct-type": "function",
        "title": "urlForRule"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding LinkManager",
        "module": "Ideas.Encoding.LinkManager",
        "name": "urlForRule",
        "normalized": "a b Exercise c-\u003eRule(Context c)-\u003eString",
        "package": "ideas",
        "partial": "For Rule",
        "signature": "forall a. Exercise a-\u003eRule(Context a)-\u003eString"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-LinkManager.html#v:urlForRules",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Encoding.LinkManager",
        "fct-package": "ideas",
        "fct-signature": "forall a.  Exercise a -\u003e String",
        "fct-source": "src/Ideas-Encoding-LinkManager.html#LinkManager",
        "fct-type": "function",
        "title": "urlForRules"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding LinkManager",
        "module": "Ideas.Encoding.LinkManager",
        "name": "urlForRules",
        "normalized": "a b Exercise c-\u003eString",
        "package": "ideas",
        "partial": "For Rules",
        "signature": "forall a. Exercise a-\u003eString"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-LinkManager.html#v:urlForService",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Encoding.LinkManager",
        "fct-package": "ideas",
        "fct-signature": "Service -\u003e String",
        "fct-source": "src/Ideas-Encoding-LinkManager.html#LinkManager",
        "fct-type": "function",
        "title": "urlForService"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding LinkManager",
        "module": "Ideas.Encoding.LinkManager",
        "name": "urlForService",
        "normalized": "Service-\u003eString",
        "package": "ideas",
        "partial": "For Service",
        "signature": "Service-\u003eString"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-LinkManager.html#v:urlForServices",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Encoding.LinkManager",
        "fct-package": "ideas",
        "fct-signature": "String",
        "fct-source": "src/Ideas-Encoding-LinkManager.html#LinkManager",
        "fct-type": "function",
        "title": "urlForServices"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding LinkManager",
        "module": "Ideas.Encoding.LinkManager",
        "name": "urlForServices",
        "normalized": "",
        "package": "ideas",
        "partial": "For Services",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-LinkManager.html#v:urlForState",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Encoding.LinkManager",
        "fct-package": "ideas",
        "fct-signature": "forall a.  State a -\u003e String",
        "fct-source": "src/Ideas-Encoding-LinkManager.html#LinkManager",
        "fct-type": "function",
        "title": "urlForState"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding LinkManager",
        "module": "Ideas.Encoding.LinkManager",
        "name": "urlForState",
        "normalized": "a b State c-\u003eString",
        "package": "ideas",
        "partial": "For State",
        "signature": "forall a. State a-\u003eString"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-LinkManager.html#v:urlForStrategy",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Encoding.LinkManager",
        "fct-package": "ideas",
        "fct-signature": "forall a.  Exercise a -\u003e String",
        "fct-source": "src/Ideas-Encoding-LinkManager.html#LinkManager",
        "fct-type": "function",
        "title": "urlForStrategy"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding LinkManager",
        "module": "Ideas.Encoding.LinkManager",
        "name": "urlForStrategy",
        "normalized": "a b Exercise c-\u003eString",
        "package": "ideas",
        "partial": "For Strategy",
        "signature": "forall a. Exercise a-\u003eString"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-ModeJSON.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eServices using JSON notation\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "Ideas.Encoding.ModeJSON",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Encoding-ModeJSON.html",
        "fct-type": "module",
        "title": "ModeJSON"
      },
      "index": {
        "description": "Services using JSON notation",
        "hierarchy": "Ideas Encoding ModeJSON",
        "module": "Ideas.Encoding.ModeJSON",
        "name": "ModeJSON",
        "normalized": "",
        "package": "ideas",
        "partial": "Mode JSON",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-ModeJSON.html#v:processJSON",
      "description": {
        "fct-module": "Ideas.Encoding.ModeJSON",
        "fct-package": "ideas",
        "fct-signature": "Bool -\u003e DomainReasoner -\u003e String -\u003e IO (Request, String, String)",
        "fct-source": "src/Ideas-Encoding-ModeJSON.html#processJSON",
        "fct-type": "function",
        "title": "processJSON"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding ModeJSON",
        "module": "Ideas.Encoding.ModeJSON",
        "name": "processJSON",
        "normalized": "Bool-\u003eDomainReasoner-\u003eString-\u003eIO(Request,String,String)",
        "package": "ideas",
        "partial": "JSON",
        "signature": "Bool-\u003eDomainReasoner-\u003eString-\u003eIO(Request,String,String)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-ModeXML.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eServices using XML notation\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "Ideas.Encoding.ModeXML",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Encoding-ModeXML.html",
        "fct-type": "module",
        "title": "ModeXML"
      },
      "index": {
        "description": "Services using XML notation",
        "hierarchy": "Ideas Encoding ModeXML",
        "module": "Ideas.Encoding.ModeXML",
        "name": "ModeXML",
        "normalized": "",
        "package": "ideas",
        "partial": "Mode XML",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-ModeXML.html#v:processXML",
      "description": {
        "fct-module": "Ideas.Encoding.ModeXML",
        "fct-package": "ideas",
        "fct-signature": "DomainReasoner -\u003e Maybe String -\u003e String -\u003e IO (Request, String, String)",
        "fct-source": "src/Ideas-Encoding-ModeXML.html#processXML",
        "fct-type": "function",
        "title": "processXML"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding ModeXML",
        "module": "Ideas.Encoding.ModeXML",
        "name": "processXML",
        "normalized": "DomainReasoner-\u003eMaybe String-\u003eString-\u003eIO(Request,String,String)",
        "package": "ideas",
        "partial": "XML",
        "signature": "DomainReasoner-\u003eMaybe String-\u003eString-\u003eIO(Request,String,String)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-OpenMathSupport.html#",
      "description": {
        "fct-module": "Ideas.Encoding.OpenMathSupport",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Encoding-OpenMathSupport.html",
        "fct-type": "module",
        "title": "OpenMathSupport"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding OpenMathSupport",
        "module": "Ideas.Encoding.OpenMathSupport",
        "name": "OpenMathSupport",
        "normalized": "",
        "package": "ideas",
        "partial": "Open Math Support",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-OpenMathSupport.html#v:fromOMOBJ",
      "description": {
        "fct-module": "Ideas.Encoding.OpenMathSupport",
        "fct-package": "ideas",
        "fct-signature": "OMOBJ -\u003e m a",
        "fct-source": "src/Ideas-Encoding-OpenMathSupport.html#fromOMOBJ",
        "fct-type": "function",
        "title": "fromOMOBJ"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding OpenMathSupport",
        "module": "Ideas.Encoding.OpenMathSupport",
        "name": "fromOMOBJ",
        "normalized": "OMOBJ-\u003ea b",
        "package": "ideas",
        "partial": "OMOBJ",
        "signature": "OMOBJ-\u003em a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-OpenMathSupport.html#v:fromOpenMath",
      "description": {
        "fct-module": "Ideas.Encoding.OpenMathSupport",
        "fct-package": "ideas",
        "fct-signature": "Exercise a -\u003e OMOBJ -\u003e m a",
        "fct-source": "src/Ideas-Encoding-OpenMathSupport.html#fromOpenMath",
        "fct-type": "function",
        "title": "fromOpenMath"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding OpenMathSupport",
        "module": "Ideas.Encoding.OpenMathSupport",
        "name": "fromOpenMath",
        "normalized": "Exercise a-\u003eOMOBJ-\u003eb a",
        "package": "ideas",
        "partial": "Open Math",
        "signature": "Exercise a-\u003eOMOBJ-\u003em a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-OpenMathSupport.html#v:noMixedFractions",
      "description": {
        "fct-module": "Ideas.Encoding.OpenMathSupport",
        "fct-package": "ideas",
        "fct-signature": "OMOBJ -\u003e OMOBJ",
        "fct-source": "src/Ideas-Encoding-OpenMathSupport.html#noMixedFractions",
        "fct-type": "function",
        "title": "noMixedFractions"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding OpenMathSupport",
        "module": "Ideas.Encoding.OpenMathSupport",
        "name": "noMixedFractions",
        "normalized": "OMOBJ-\u003eOMOBJ",
        "package": "ideas",
        "partial": "Mixed Fractions",
        "signature": "OMOBJ-\u003eOMOBJ"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-OpenMathSupport.html#v:toOMOBJ",
      "description": {
        "fct-module": "Ideas.Encoding.OpenMathSupport",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e OMOBJ",
        "fct-source": "src/Ideas-Encoding-OpenMathSupport.html#toOMOBJ",
        "fct-type": "function",
        "title": "toOMOBJ"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding OpenMathSupport",
        "module": "Ideas.Encoding.OpenMathSupport",
        "name": "toOMOBJ",
        "normalized": "a-\u003eOMOBJ",
        "package": "ideas",
        "partial": "OMOBJ",
        "signature": "a-\u003eOMOBJ"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-OpenMathSupport.html#v:toOpenMath",
      "description": {
        "fct-module": "Ideas.Encoding.OpenMathSupport",
        "fct-package": "ideas",
        "fct-signature": "Exercise a -\u003e a -\u003e m OMOBJ",
        "fct-source": "src/Ideas-Encoding-OpenMathSupport.html#toOpenMath",
        "fct-type": "function",
        "title": "toOpenMath"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding OpenMathSupport",
        "module": "Ideas.Encoding.OpenMathSupport",
        "name": "toOpenMath",
        "normalized": "Exercise a-\u003ea-\u003eb OMOBJ",
        "package": "ideas",
        "partial": "Open Math",
        "signature": "Exercise a-\u003ea-\u003em OMOBJ"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-RulePresenter.html#",
      "description": {
        "fct-module": "Ideas.Encoding.RulePresenter",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Encoding-RulePresenter.html",
        "fct-type": "module",
        "title": "RulePresenter"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding RulePresenter",
        "module": "Ideas.Encoding.RulePresenter",
        "name": "RulePresenter",
        "normalized": "",
        "package": "ideas",
        "partial": "Rule Presenter",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-RulePresenter.html#v:ruleToHTML",
      "description": {
        "fct-module": "Ideas.Encoding.RulePresenter",
        "fct-package": "ideas",
        "fct-signature": "Some Exercise -\u003e Rule a -\u003e HTMLBuilder",
        "fct-source": "src/Ideas-Encoding-RulePresenter.html#ruleToHTML",
        "fct-type": "function",
        "title": "ruleToHTML"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding RulePresenter",
        "module": "Ideas.Encoding.RulePresenter",
        "name": "ruleToHTML",
        "normalized": "Some Exercise-\u003eRule a-\u003eHTMLBuilder",
        "package": "ideas",
        "partial": "To HTML",
        "signature": "Some Exercise-\u003eRule a-\u003eHTMLBuilder"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-RulesInfo.html#",
      "description": {
        "fct-module": "Ideas.Encoding.RulesInfo",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Encoding-RulesInfo.html",
        "fct-type": "module",
        "title": "RulesInfo"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding RulesInfo",
        "module": "Ideas.Encoding.RulesInfo",
        "name": "RulesInfo",
        "normalized": "",
        "package": "ideas",
        "partial": "Rules Info",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-RulesInfo.html#t:ExampleMap",
      "description": {
        "fct-module": "Ideas.Encoding.RulesInfo",
        "fct-package": "ideas",
        "fct-signature": "type",
        "fct-source": "src/Ideas-Encoding-RulesInfo.html#ExampleMap",
        "fct-type": "type",
        "title": "ExampleMap"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding RulesInfo",
        "module": "Ideas.Encoding.RulesInfo",
        "name": "ExampleMap",
        "normalized": "",
        "package": "ideas",
        "partial": "Example Map",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-RulesInfo.html#v:collectExamples",
      "description": {
        "fct-module": "Ideas.Encoding.RulesInfo",
        "fct-package": "ideas",
        "fct-signature": "Exercise a -\u003e ExampleMap a",
        "fct-source": "src/Ideas-Encoding-RulesInfo.html#collectExamples",
        "fct-type": "function",
        "title": "collectExamples"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding RulesInfo",
        "module": "Ideas.Encoding.RulesInfo",
        "name": "collectExamples",
        "normalized": "Exercise a-\u003eExampleMap a",
        "package": "ideas",
        "partial": "Examples",
        "signature": "Exercise a-\u003eExampleMap a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-RulesInfo.html#v:rewriteRuleToFMP",
      "description": {
        "fct-module": "Ideas.Encoding.RulesInfo",
        "fct-package": "ideas",
        "fct-signature": "Bool -\u003e RewriteRule a -\u003e FMP",
        "fct-source": "src/Ideas-Encoding-RulesInfo.html#rewriteRuleToFMP",
        "fct-type": "function",
        "title": "rewriteRuleToFMP"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding RulesInfo",
        "module": "Ideas.Encoding.RulesInfo",
        "name": "rewriteRuleToFMP",
        "normalized": "Bool-\u003eRewriteRule a-\u003eFMP",
        "package": "ideas",
        "partial": "Rule To FMP",
        "signature": "Bool-\u003eRewriteRule a-\u003eFMP"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-RulesInfo.html#v:rulesInfoXML",
      "description": {
        "fct-module": "Ideas.Encoding.RulesInfo",
        "fct-package": "ideas",
        "fct-signature": "Exercise a -\u003e (a -\u003e XMLBuilder) -\u003e XMLBuilder",
        "fct-source": "src/Ideas-Encoding-RulesInfo.html#rulesInfoXML",
        "fct-type": "function",
        "title": "rulesInfoXML"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding RulesInfo",
        "module": "Ideas.Encoding.RulesInfo",
        "name": "rulesInfoXML",
        "normalized": "Exercise a-\u003e(a-\u003eXMLBuilder)-\u003eXMLBuilder",
        "package": "ideas",
        "partial": "Info XML",
        "signature": "Exercise a-\u003e(a-\u003eXMLBuilder)-\u003eXMLBuilder"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-StrategyInfo.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eConverting a strategy to XML, and the other way around.\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "Ideas.Encoding.StrategyInfo",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Encoding-StrategyInfo.html",
        "fct-type": "module",
        "title": "StrategyInfo"
      },
      "index": {
        "description": "Converting strategy to XML and the other way around",
        "hierarchy": "Ideas Encoding StrategyInfo",
        "module": "Ideas.Encoding.StrategyInfo",
        "name": "StrategyInfo",
        "normalized": "",
        "package": "ideas",
        "partial": "Strategy Info",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-StrategyInfo.html#v:strategyToXML",
      "description": {
        "fct-module": "Ideas.Encoding.StrategyInfo",
        "fct-package": "ideas",
        "fct-signature": "f a -\u003e XML",
        "fct-source": "src/Ideas-Encoding-StrategyInfo.html#strategyToXML",
        "fct-type": "function",
        "title": "strategyToXML"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding StrategyInfo",
        "module": "Ideas.Encoding.StrategyInfo",
        "name": "strategyToXML",
        "normalized": "a b-\u003eXML",
        "package": "ideas",
        "partial": "To XML",
        "signature": "f a-\u003eXML"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Encoding-StrategyInfo.html#v:xmlToStrategy",
      "description": {
        "fct-module": "Ideas.Encoding.StrategyInfo",
        "fct-package": "ideas",
        "fct-signature": "(String -\u003e Maybe (Rule a)) -\u003e XML -\u003e m (Strategy a)",
        "fct-source": "src/Ideas-Encoding-StrategyInfo.html#xmlToStrategy",
        "fct-type": "function",
        "title": "xmlToStrategy"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Encoding StrategyInfo",
        "module": "Ideas.Encoding.StrategyInfo",
        "name": "xmlToStrategy",
        "normalized": "(String-\u003eMaybe(Rule a))-\u003eXML-\u003eb(Strategy a)",
        "package": "ideas",
        "partial": "To Strategy",
        "signature": "(String-\u003eMaybe(Rule a))-\u003eXML-\u003em(Strategy a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Main-BlackBoxTests.html#",
      "description": {
        "fct-module": "Ideas.Main.BlackBoxTests",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Main-BlackBoxTests.html",
        "fct-type": "module",
        "title": "BlackBoxTests"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Main BlackBoxTests",
        "module": "Ideas.Main.BlackBoxTests",
        "name": "BlackBoxTests",
        "normalized": "",
        "package": "ideas",
        "partial": "Black Box Tests",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Main-BlackBoxTests.html#v:blackBoxTests",
      "description": {
        "fct-module": "Ideas.Main.BlackBoxTests",
        "fct-package": "ideas",
        "fct-signature": "DomainReasoner -\u003e String -\u003e IO TestSuite",
        "fct-source": "src/Ideas-Main-BlackBoxTests.html#blackBoxTests",
        "fct-type": "function",
        "title": "blackBoxTests"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Main BlackBoxTests",
        "module": "Ideas.Main.BlackBoxTests",
        "name": "blackBoxTests",
        "normalized": "DomainReasoner-\u003eString-\u003eIO TestSuite",
        "package": "ideas",
        "partial": "Box Tests",
        "signature": "DomainReasoner-\u003eString-\u003eIO TestSuite"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Main-Default.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eMain module for feedback services\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "Ideas.Main.Default",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Main-Default.html",
        "fct-type": "module",
        "title": "Default"
      },
      "index": {
        "description": "Main module for feedback services",
        "hierarchy": "Ideas Main Default",
        "module": "Ideas.Main.Default",
        "name": "Default",
        "normalized": "",
        "package": "ideas",
        "partial": "Default",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Main-Default.html#v:defaultMain",
      "description": {
        "fct-module": "Ideas.Main.Default",
        "fct-package": "ideas",
        "fct-signature": "DomainReasoner -\u003e IO ()",
        "fct-source": "src/Ideas-Main-Default.html#defaultMain",
        "fct-type": "function",
        "title": "defaultMain"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Main Default",
        "module": "Ideas.Main.Default",
        "name": "defaultMain",
        "normalized": "DomainReasoner-\u003eIO()",
        "package": "ideas",
        "partial": "Main",
        "signature": "DomainReasoner-\u003eIO()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Main-Default.html#v:newDomainReasoner",
      "description": {
        "fct-module": "Ideas.Main.Default",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e DomainReasoner",
        "fct-source": "src/Ideas-Main-Default.html#newDomainReasoner",
        "fct-type": "function",
        "title": "newDomainReasoner"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Main Default",
        "module": "Ideas.Main.Default",
        "name": "newDomainReasoner",
        "normalized": "a-\u003eDomainReasoner",
        "package": "ideas",
        "partial": "Domain Reasoner",
        "signature": "a-\u003eDomainReasoner"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Main-Documentation.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eManages links to information\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "Ideas.Main.Documentation",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Main-Documentation.html",
        "fct-type": "module",
        "title": "Documentation"
      },
      "index": {
        "description": "Manages links to information",
        "hierarchy": "Ideas Main Documentation",
        "module": "Ideas.Main.Documentation",
        "name": "Documentation",
        "normalized": "",
        "package": "ideas",
        "partial": "Documentation",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Main-Documentation.html#v:makeDocumentation",
      "description": {
        "fct-module": "Ideas.Main.Documentation",
        "fct-package": "ideas",
        "fct-signature": "DomainReasoner -\u003e String -\u003e IO ()",
        "fct-source": "src/Ideas-Main-Documentation.html#makeDocumentation",
        "fct-type": "function",
        "title": "makeDocumentation"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Main Documentation",
        "module": "Ideas.Main.Documentation",
        "name": "makeDocumentation",
        "normalized": "DomainReasoner-\u003eString-\u003eIO()",
        "package": "ideas",
        "partial": "Documentation",
        "signature": "DomainReasoner-\u003eString-\u003eIO()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Main-LoggingDatabase.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eFacilities to create a log database\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "Ideas.Main.LoggingDatabase",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Main-LoggingDatabase.html",
        "fct-type": "module",
        "title": "LoggingDatabase"
      },
      "index": {
        "description": "Facilities to create log database",
        "hierarchy": "Ideas Main LoggingDatabase",
        "module": "Ideas.Main.LoggingDatabase",
        "name": "LoggingDatabase",
        "normalized": "",
        "package": "ideas",
        "partial": "Logging Database",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Main-LoggingDatabase.html#v:logEnabled",
      "description": {
        "fct-module": "Ideas.Main.LoggingDatabase",
        "fct-package": "ideas",
        "fct-signature": "Bool",
        "fct-source": "src/Ideas-Main-LoggingDatabase.html#logEnabled",
        "fct-type": "function",
        "title": "logEnabled"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Main LoggingDatabase",
        "module": "Ideas.Main.LoggingDatabase",
        "name": "logEnabled",
        "normalized": "",
        "package": "ideas",
        "partial": "Enabled",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Main-LoggingDatabase.html#v:logMessage",
      "description": {
        "fct-module": "Ideas.Main.LoggingDatabase",
        "fct-package": "ideas",
        "fct-signature": "Request -\u003e String -\u003e String -\u003e String -\u003e UTCTime -\u003e IO ()",
        "fct-source": "src/Ideas-Main-LoggingDatabase.html#logMessage",
        "fct-type": "function",
        "title": "logMessage"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Main LoggingDatabase",
        "module": "Ideas.Main.LoggingDatabase",
        "name": "logMessage",
        "normalized": "Request-\u003eString-\u003eString-\u003eString-\u003eUTCTime-\u003eIO()",
        "package": "ideas",
        "partial": "Message",
        "signature": "Request-\u003eString-\u003eString-\u003eString-\u003eUTCTime-\u003eIO()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Main-Options.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eOptions and command-line flags for services\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "Ideas.Main.Options",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Main-Options.html",
        "fct-type": "module",
        "title": "Options"
      },
      "index": {
        "description": "Options and command-line flags for services",
        "hierarchy": "Ideas Main Options",
        "module": "Ideas.Main.Options",
        "name": "Options",
        "normalized": "",
        "package": "ideas",
        "partial": "Options",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Main-Options.html#t:Flag",
      "description": {
        "fct-module": "Ideas.Main.Options",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Main-Options.html#Flag",
        "fct-type": "data",
        "title": "Flag"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Main Options",
        "module": "Ideas.Main.Options",
        "name": "Flag",
        "normalized": "",
        "package": "ideas",
        "partial": "Flag",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Main-Options.html#v:AnalyzeScript",
      "description": {
        "fct-module": "Ideas.Main.Options",
        "fct-package": "ideas",
        "fct-signature": "AnalyzeScript FilePath",
        "fct-source": "src/Ideas-Main-Options.html#Flag",
        "fct-type": "function",
        "title": "AnalyzeScript"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Main Options",
        "module": "Ideas.Main.Options",
        "name": "AnalyzeScript",
        "normalized": "",
        "package": "ideas",
        "partial": "Analyze Script",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Main-Options.html#v:Help",
      "description": {
        "fct-module": "Ideas.Main.Options",
        "fct-package": "ideas",
        "fct-signature": "Help",
        "fct-source": "src/Ideas-Main-Options.html#Flag",
        "fct-type": "function",
        "title": "Help"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Main Options",
        "module": "Ideas.Main.Options",
        "name": "Help",
        "normalized": "",
        "package": "ideas",
        "partial": "Help",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Main-Options.html#v:InputFile",
      "description": {
        "fct-module": "Ideas.Main.Options",
        "fct-package": "ideas",
        "fct-signature": "InputFile String",
        "fct-source": "src/Ideas-Main-Options.html#Flag",
        "fct-type": "function",
        "title": "InputFile"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Main Options",
        "module": "Ideas.Main.Options",
        "name": "InputFile",
        "normalized": "",
        "package": "ideas",
        "partial": "Input File",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Main-Options.html#v:MakePages",
      "description": {
        "fct-module": "Ideas.Main.Options",
        "fct-package": "ideas",
        "fct-signature": "MakePages FilePath",
        "fct-source": "src/Ideas-Main-Options.html#Flag",
        "fct-type": "function",
        "title": "MakePages"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Main Options",
        "module": "Ideas.Main.Options",
        "name": "MakePages",
        "normalized": "",
        "package": "ideas",
        "partial": "Make Pages",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Main-Options.html#v:MakeScriptFor",
      "description": {
        "fct-module": "Ideas.Main.Options",
        "fct-package": "ideas",
        "fct-signature": "MakeScriptFor String",
        "fct-source": "src/Ideas-Main-Options.html#Flag",
        "fct-type": "function",
        "title": "MakeScriptFor"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Main Options",
        "module": "Ideas.Main.Options",
        "name": "MakeScriptFor",
        "normalized": "",
        "package": "ideas",
        "partial": "Make Script For",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Main-Options.html#v:Test",
      "description": {
        "fct-module": "Ideas.Main.Options",
        "fct-package": "ideas",
        "fct-signature": "Test FilePath",
        "fct-source": "src/Ideas-Main-Options.html#Flag",
        "fct-type": "function",
        "title": "Test"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Main Options",
        "module": "Ideas.Main.Options",
        "name": "Test",
        "normalized": "",
        "package": "ideas",
        "partial": "Test",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Main-Options.html#v:Version",
      "description": {
        "fct-module": "Ideas.Main.Options",
        "fct-package": "ideas",
        "fct-signature": "Version",
        "fct-source": "src/Ideas-Main-Options.html#Flag",
        "fct-type": "function",
        "title": "Version"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Main Options",
        "module": "Ideas.Main.Options",
        "name": "Version",
        "normalized": "",
        "package": "ideas",
        "partial": "Version",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Main-Options.html#v:fullVersion",
      "description": {
        "fct-module": "Ideas.Main.Options",
        "fct-package": "ideas",
        "fct-signature": "String",
        "fct-source": "src/Ideas-Main-Options.html#fullVersion",
        "fct-type": "function",
        "title": "fullVersion"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Main Options",
        "module": "Ideas.Main.Options",
        "name": "fullVersion",
        "normalized": "",
        "package": "ideas",
        "partial": "Version",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Main-Options.html#v:getFlags",
      "description": {
        "fct-module": "Ideas.Main.Options",
        "fct-package": "ideas",
        "fct-signature": "IO [Flag]",
        "fct-source": "src/Ideas-Main-Options.html#getFlags",
        "fct-type": "function",
        "title": "getFlags"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Main Options",
        "module": "Ideas.Main.Options",
        "name": "getFlags",
        "normalized": "IO[Flag]",
        "package": "ideas",
        "partial": "Flags",
        "signature": "IO[Flag]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Main-Options.html#v:helpText",
      "description": {
        "fct-module": "Ideas.Main.Options",
        "fct-package": "ideas",
        "fct-signature": "String",
        "fct-source": "src/Ideas-Main-Options.html#helpText",
        "fct-type": "function",
        "title": "helpText"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Main Options",
        "module": "Ideas.Main.Options",
        "name": "helpText",
        "normalized": "",
        "package": "ideas",
        "partial": "Text",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Main-Options.html#v:shortVersion",
      "description": {
        "fct-module": "Ideas.Main.Options",
        "fct-package": "ideas",
        "fct-signature": "String",
        "fct-source": "src/Ideas-Main-Options.html#shortVersion",
        "fct-type": "function",
        "title": "shortVersion"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Main Options",
        "module": "Ideas.Main.Options",
        "name": "shortVersion",
        "normalized": "",
        "package": "ideas",
        "partial": "Version",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Main-Options.html#v:versionText",
      "description": {
        "fct-module": "Ideas.Main.Options",
        "fct-package": "ideas",
        "fct-signature": "String",
        "fct-source": "src/Ideas-Main-Options.html#versionText",
        "fct-type": "function",
        "title": "versionText"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Main Options",
        "module": "Ideas.Main.Options",
        "name": "versionText",
        "normalized": "",
        "package": "ideas",
        "partial": "Text",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Main-Revision.html#",
      "description": {
        "fct-module": "Ideas.Main.Revision",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Main-Revision.html",
        "fct-type": "module",
        "title": "Revision"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Main Revision",
        "module": "Ideas.Main.Revision",
        "name": "Revision",
        "normalized": "",
        "package": "ideas",
        "partial": "Revision",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Main-Revision.html#v:ideasLastChanged",
      "description": {
        "fct-module": "Ideas.Main.Revision",
        "fct-package": "ideas",
        "fct-signature": "String",
        "fct-source": "src/Ideas-Main-Revision.html#ideasLastChanged",
        "fct-type": "function",
        "title": "ideasLastChanged"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Main Revision",
        "module": "Ideas.Main.Revision",
        "name": "ideasLastChanged",
        "normalized": "",
        "package": "ideas",
        "partial": "Last Changed",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Main-Revision.html#v:ideasRevision",
      "description": {
        "fct-module": "Ideas.Main.Revision",
        "fct-package": "ideas",
        "fct-signature": "Int",
        "fct-source": "src/Ideas-Main-Revision.html#ideasRevision",
        "fct-type": "function",
        "title": "ideasRevision"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Main Revision",
        "module": "Ideas.Main.Revision",
        "name": "ideasRevision",
        "normalized": "",
        "package": "ideas",
        "partial": "Revision",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Main-Revision.html#v:ideasVersion",
      "description": {
        "fct-module": "Ideas.Main.Revision",
        "fct-package": "ideas",
        "fct-signature": "String",
        "fct-source": "src/Ideas-Main-Revision.html#ideasVersion",
        "fct-type": "function",
        "title": "ideasVersion"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Main Revision",
        "module": "Ideas.Main.Revision",
        "name": "ideasVersion",
        "normalized": "",
        "package": "ideas",
        "partial": "Version",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-BasicServices.html#",
      "description": {
        "fct-module": "Ideas.Service.BasicServices",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Service-BasicServices.html",
        "fct-type": "module",
        "title": "BasicServices"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service BasicServices",
        "module": "Ideas.Service.BasicServices",
        "name": "BasicServices",
        "normalized": "",
        "package": "ideas",
        "partial": "Basic Services",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-BasicServices.html#t:StepInfo",
      "description": {
        "fct-module": "Ideas.Service.BasicServices",
        "fct-package": "ideas",
        "fct-signature": "type",
        "fct-source": "src/Ideas-Service-BasicServices.html#StepInfo",
        "fct-type": "type",
        "title": "StepInfo"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service BasicServices",
        "module": "Ideas.Service.BasicServices",
        "name": "StepInfo",
        "normalized": "",
        "package": "ideas",
        "partial": "Step Info",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-BasicServices.html#v:allapplications",
      "description": {
        "fct-module": "Ideas.Service.BasicServices",
        "fct-package": "ideas",
        "fct-signature": "State a -\u003e [(Rule (Context a), Location, State a)]",
        "fct-source": "src/Ideas-Service-BasicServices.html#allapplications",
        "fct-type": "function",
        "title": "allapplications"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service BasicServices",
        "module": "Ideas.Service.BasicServices",
        "name": "allapplications",
        "normalized": "State a-\u003e[(Rule(Context a),Location,State a)]",
        "package": "ideas",
        "partial": "",
        "signature": "State a-\u003e[(Rule(Context a),Location,State a)]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-BasicServices.html#v:allfirsts",
      "description": {
        "fct-module": "Ideas.Service.BasicServices",
        "fct-package": "ideas",
        "fct-signature": "State a -\u003e Either String [(StepInfo a, State a)]",
        "fct-source": "src/Ideas-Service-BasicServices.html#allfirsts",
        "fct-type": "function",
        "title": "allfirsts"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service BasicServices",
        "module": "Ideas.Service.BasicServices",
        "name": "allfirsts",
        "normalized": "State a-\u003eEither String[(StepInfo a,State a)]",
        "package": "ideas",
        "partial": "",
        "signature": "State a-\u003eEither String[(StepInfo a,State a)]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-BasicServices.html#v:applicable",
      "description": {
        "fct-module": "Ideas.Service.BasicServices",
        "fct-package": "ideas",
        "fct-signature": "Location -\u003e State a -\u003e [Rule (Context a)]",
        "fct-source": "src/Ideas-Service-BasicServices.html#applicable",
        "fct-type": "function",
        "title": "applicable"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service BasicServices",
        "module": "Ideas.Service.BasicServices",
        "name": "applicable",
        "normalized": "Location-\u003eState a-\u003e[Rule(Context a)]",
        "package": "ideas",
        "partial": "",
        "signature": "Location-\u003eState a-\u003e[Rule(Context a)]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-BasicServices.html#v:apply",
      "description": {
        "fct-module": "Ideas.Service.BasicServices",
        "fct-package": "ideas",
        "fct-signature": "Rule (Context a) -\u003e Location -\u003e Environment -\u003e State a -\u003e Either String (State a)",
        "fct-source": "src/Ideas-Service-BasicServices.html#apply",
        "fct-type": "function",
        "title": "apply"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service BasicServices",
        "module": "Ideas.Service.BasicServices",
        "name": "apply",
        "normalized": "Rule(Context a)-\u003eLocation-\u003eEnvironment-\u003eState a-\u003eEither String(State a)",
        "package": "ideas",
        "partial": "",
        "signature": "Rule(Context a)-\u003eLocation-\u003eEnvironment-\u003eState a-\u003eEither String(State a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-BasicServices.html#v:derivation",
      "description": {
        "fct-module": "Ideas.Service.BasicServices",
        "fct-package": "ideas",
        "fct-signature": "Maybe StrategyConfiguration -\u003e State a -\u003e Either String (Derivation (Rule (Context a), Environment) (Context a))",
        "fct-source": "src/Ideas-Service-BasicServices.html#derivation",
        "fct-type": "function",
        "title": "derivation"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service BasicServices",
        "module": "Ideas.Service.BasicServices",
        "name": "derivation",
        "normalized": "Maybe StrategyConfiguration-\u003eState a-\u003eEither String(Derivation(Rule(Context a),Environment)(Context a))",
        "package": "ideas",
        "partial": "",
        "signature": "Maybe StrategyConfiguration-\u003eState a-\u003eEither String(Derivation(Rule(Context a),Environment)(Context a))"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-BasicServices.html#v:exampleDerivations",
      "description": {
        "fct-module": "Ideas.Service.BasicServices",
        "fct-package": "ideas",
        "fct-signature": "Exercise a -\u003e Either String [Derivation (Rule (Context a), Environment) (Context a)]",
        "fct-source": "src/Ideas-Service-BasicServices.html#exampleDerivations",
        "fct-type": "function",
        "title": "exampleDerivations"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service BasicServices",
        "module": "Ideas.Service.BasicServices",
        "name": "exampleDerivations",
        "normalized": "Exercise a-\u003eEither String[Derivation(Rule(Context a),Environment)(Context a)]",
        "package": "ideas",
        "partial": "Derivations",
        "signature": "Exercise a-\u003eEither String[Derivation(Rule(Context a),Environment)(Context a)]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-BasicServices.html#v:findbuggyrules",
      "description": {
        "fct-module": "Ideas.Service.BasicServices",
        "fct-package": "ideas",
        "fct-signature": "State a -\u003e Context a -\u003e [(Rule (Context a), Location, Environment)]",
        "fct-source": "src/Ideas-Service-BasicServices.html#findbuggyrules",
        "fct-type": "function",
        "title": "findbuggyrules"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service BasicServices",
        "module": "Ideas.Service.BasicServices",
        "name": "findbuggyrules",
        "normalized": "State a-\u003eContext a-\u003e[(Rule(Context a),Location,Environment)]",
        "package": "ideas",
        "partial": "",
        "signature": "State a-\u003eContext a-\u003e[(Rule(Context a),Location,Environment)]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-BasicServices.html#v:generate",
      "description": {
        "fct-module": "Ideas.Service.BasicServices",
        "fct-package": "ideas",
        "fct-signature": "Exercise a -\u003e Maybe Difficulty -\u003e IO (State a)",
        "fct-source": "src/Ideas-Service-BasicServices.html#generate",
        "fct-type": "function",
        "title": "generate"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service BasicServices",
        "module": "Ideas.Service.BasicServices",
        "name": "generate",
        "normalized": "Exercise a-\u003eMaybe Difficulty-\u003eIO(State a)",
        "package": "ideas",
        "partial": "",
        "signature": "Exercise a-\u003eMaybe Difficulty-\u003eIO(State a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-BasicServices.html#v:generateWith",
      "description": {
        "fct-module": "Ideas.Service.BasicServices",
        "fct-package": "ideas",
        "fct-signature": "StdGen -\u003e Exercise a -\u003e Maybe Difficulty -\u003e Either String (State a)",
        "fct-source": "src/Ideas-Service-BasicServices.html#generateWith",
        "fct-type": "function",
        "title": "generateWith"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service BasicServices",
        "module": "Ideas.Service.BasicServices",
        "name": "generateWith",
        "normalized": "StdGen-\u003eExercise a-\u003eMaybe Difficulty-\u003eEither String(State a)",
        "package": "ideas",
        "partial": "With",
        "signature": "StdGen-\u003eExercise a-\u003eMaybe Difficulty-\u003eEither String(State a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-BasicServices.html#v:onefirst",
      "description": {
        "fct-module": "Ideas.Service.BasicServices",
        "fct-package": "ideas",
        "fct-signature": "State a -\u003e Either String (StepInfo a, State a)",
        "fct-source": "src/Ideas-Service-BasicServices.html#onefirst",
        "fct-type": "function",
        "title": "onefirst"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service BasicServices",
        "module": "Ideas.Service.BasicServices",
        "name": "onefirst",
        "normalized": "State a-\u003eEither String(StepInfo a,State a)",
        "package": "ideas",
        "partial": "",
        "signature": "State a-\u003eEither String(StepInfo a,State a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-BasicServices.html#v:ready",
      "description": {
        "fct-module": "Ideas.Service.BasicServices",
        "fct-package": "ideas",
        "fct-signature": "State a -\u003e Bool",
        "fct-source": "src/Ideas-Service-BasicServices.html#ready",
        "fct-type": "function",
        "title": "ready"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service BasicServices",
        "module": "Ideas.Service.BasicServices",
        "name": "ready",
        "normalized": "State a-\u003eBool",
        "package": "ideas",
        "partial": "",
        "signature": "State a-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-BasicServices.html#v:stepsremaining",
      "description": {
        "fct-module": "Ideas.Service.BasicServices",
        "fct-package": "ideas",
        "fct-signature": "State a -\u003e Either String Int",
        "fct-source": "src/Ideas-Service-BasicServices.html#stepsremaining",
        "fct-type": "function",
        "title": "stepsremaining"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service BasicServices",
        "module": "Ideas.Service.BasicServices",
        "name": "stepsremaining",
        "normalized": "State a-\u003eEither String Int",
        "package": "ideas",
        "partial": "",
        "signature": "State a-\u003eEither String Int"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Diagnose.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eDiagnose a term submitted by a student\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "Ideas.Service.Diagnose",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Service-Diagnose.html",
        "fct-type": "module",
        "title": "Diagnose"
      },
      "index": {
        "description": "Diagnose term submitted by student",
        "hierarchy": "Ideas Service Diagnose",
        "module": "Ideas.Service.Diagnose",
        "name": "Diagnose",
        "normalized": "",
        "package": "ideas",
        "partial": "Diagnose",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Diagnose.html#t:Diagnosis",
      "description": {
        "fct-module": "Ideas.Service.Diagnose",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Service-Diagnose.html#Diagnosis",
        "fct-type": "data",
        "title": "Diagnosis"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Diagnose",
        "module": "Ideas.Service.Diagnose",
        "name": "Diagnosis",
        "normalized": "",
        "package": "ideas",
        "partial": "Diagnosis",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Diagnose.html#v:Buggy",
      "description": {
        "fct-module": "Ideas.Service.Diagnose",
        "fct-package": "ideas",
        "fct-signature": "Buggy Environment (Rule (Context a))",
        "fct-source": "src/Ideas-Service-Diagnose.html#Diagnosis",
        "fct-type": "function",
        "title": "Buggy"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Diagnose",
        "module": "Ideas.Service.Diagnose",
        "name": "Buggy",
        "normalized": "",
        "package": "ideas",
        "partial": "Buggy",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Diagnose.html#v:Correct",
      "description": {
        "fct-module": "Ideas.Service.Diagnose",
        "fct-package": "ideas",
        "fct-signature": "Correct Bool (State a)",
        "fct-source": "src/Ideas-Service-Diagnose.html#Diagnosis",
        "fct-type": "function",
        "title": "Correct"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Diagnose",
        "module": "Ideas.Service.Diagnose",
        "name": "Correct",
        "normalized": "",
        "package": "ideas",
        "partial": "Correct",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Diagnose.html#v:Detour",
      "description": {
        "fct-module": "Ideas.Service.Diagnose",
        "fct-package": "ideas",
        "fct-signature": "Detour Bool (State a) Environment (Rule (Context a))",
        "fct-source": "src/Ideas-Service-Diagnose.html#Diagnosis",
        "fct-type": "function",
        "title": "Detour"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Diagnose",
        "module": "Ideas.Service.Diagnose",
        "name": "Detour",
        "normalized": "",
        "package": "ideas",
        "partial": "Detour",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Diagnose.html#v:Expected",
      "description": {
        "fct-module": "Ideas.Service.Diagnose",
        "fct-package": "ideas",
        "fct-signature": "Expected Bool (State a) (Rule (Context a))",
        "fct-source": "src/Ideas-Service-Diagnose.html#Diagnosis",
        "fct-type": "function",
        "title": "Expected"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Diagnose",
        "module": "Ideas.Service.Diagnose",
        "name": "Expected",
        "normalized": "",
        "package": "ideas",
        "partial": "Expected",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Diagnose.html#v:NotEquivalent",
      "description": {
        "fct-module": "Ideas.Service.Diagnose",
        "fct-package": "ideas",
        "fct-signature": "NotEquivalent",
        "fct-source": "src/Ideas-Service-Diagnose.html#Diagnosis",
        "fct-type": "function",
        "title": "NotEquivalent"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Diagnose",
        "module": "Ideas.Service.Diagnose",
        "name": "NotEquivalent",
        "normalized": "",
        "package": "ideas",
        "partial": "Not Equivalent",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Diagnose.html#v:Similar",
      "description": {
        "fct-module": "Ideas.Service.Diagnose",
        "fct-package": "ideas",
        "fct-signature": "Similar Bool (State a)",
        "fct-source": "src/Ideas-Service-Diagnose.html#Diagnosis",
        "fct-type": "function",
        "title": "Similar"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Diagnose",
        "module": "Ideas.Service.Diagnose",
        "name": "Similar",
        "normalized": "",
        "package": "ideas",
        "partial": "Similar",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Diagnose.html#v:diagnose",
      "description": {
        "fct-module": "Ideas.Service.Diagnose",
        "fct-package": "ideas",
        "fct-signature": "State a -\u003e Context a -\u003e Diagnosis a",
        "fct-source": "src/Ideas-Service-Diagnose.html#diagnose",
        "fct-type": "function",
        "title": "diagnose"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Diagnose",
        "module": "Ideas.Service.Diagnose",
        "name": "diagnose",
        "normalized": "State a-\u003eContext a-\u003eDiagnosis a",
        "package": "ideas",
        "partial": "",
        "signature": "State a-\u003eContext a-\u003eDiagnosis a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Diagnose.html#v:newState",
      "description": {
        "fct-module": "Ideas.Service.Diagnose",
        "fct-package": "ideas",
        "fct-signature": "Diagnosis a -\u003e Maybe (State a)",
        "fct-source": "src/Ideas-Service-Diagnose.html#newState",
        "fct-type": "function",
        "title": "newState"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Diagnose",
        "module": "Ideas.Service.Diagnose",
        "name": "newState",
        "normalized": "Diagnosis a-\u003eMaybe(State a)",
        "package": "ideas",
        "partial": "State",
        "signature": "Diagnosis a-\u003eMaybe(State a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Diagnose.html#v:restartIfNeeded",
      "description": {
        "fct-module": "Ideas.Service.Diagnose",
        "fct-package": "ideas",
        "fct-signature": "State a -\u003e State a",
        "fct-source": "src/Ideas-Service-Diagnose.html#restartIfNeeded",
        "fct-type": "function",
        "title": "restartIfNeeded"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Diagnose",
        "module": "Ideas.Service.Diagnose",
        "name": "restartIfNeeded",
        "normalized": "State a-\u003eState a",
        "package": "ideas",
        "partial": "If Needed",
        "signature": "State a-\u003eState a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-DomainReasoner.html#",
      "description": {
        "fct-module": "Ideas.Service.DomainReasoner",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Service-DomainReasoner.html",
        "fct-type": "module",
        "title": "DomainReasoner"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service DomainReasoner",
        "module": "Ideas.Service.DomainReasoner",
        "name": "DomainReasoner",
        "normalized": "",
        "package": "ideas",
        "partial": "Domain Reasoner",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-DomainReasoner.html#t:DomainReasoner",
      "description": {
        "fct-module": "Ideas.Service.DomainReasoner",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Service-DomainReasoner.html#DomainReasoner",
        "fct-type": "data",
        "title": "DomainReasoner"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service DomainReasoner",
        "module": "Ideas.Service.DomainReasoner",
        "name": "DomainReasoner",
        "normalized": "",
        "package": "ideas",
        "partial": "Domain Reasoner",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-DomainReasoner.html#v:DR",
      "description": {
        "fct-module": "Ideas.Service.DomainReasoner",
        "fct-package": "ideas",
        "fct-signature": "DR",
        "fct-source": "src/Ideas-Service-DomainReasoner.html#DomainReasoner",
        "fct-type": "function",
        "title": "DR"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service DomainReasoner",
        "module": "Ideas.Service.DomainReasoner",
        "name": "DR",
        "normalized": "",
        "package": "ideas",
        "partial": "DR",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-DomainReasoner.html#v:aliases",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Service.DomainReasoner",
        "fct-package": "ideas",
        "fct-signature": "[(Id, Id)]",
        "fct-source": "src/Ideas-Service-DomainReasoner.html#DomainReasoner",
        "fct-type": "function",
        "title": "aliases"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service DomainReasoner",
        "module": "Ideas.Service.DomainReasoner",
        "name": "aliases",
        "normalized": "[(Id,Id)]",
        "package": "ideas",
        "partial": "",
        "signature": "[(Id,Id)]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-DomainReasoner.html#v:defaultScript",
      "description": {
        "fct-module": "Ideas.Service.DomainReasoner",
        "fct-package": "ideas",
        "fct-signature": "DomainReasoner -\u003e Id -\u003e IO Script",
        "fct-source": "src/Ideas-Service-DomainReasoner.html#defaultScript",
        "fct-type": "function",
        "title": "defaultScript"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service DomainReasoner",
        "module": "Ideas.Service.DomainReasoner",
        "name": "defaultScript",
        "normalized": "DomainReasoner-\u003eId-\u003eIO Script",
        "package": "ideas",
        "partial": "Script",
        "signature": "DomainReasoner-\u003eId-\u003eIO Script"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-DomainReasoner.html#v:exercises",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Service.DomainReasoner",
        "fct-package": "ideas",
        "fct-signature": "[Some Exercise]",
        "fct-source": "src/Ideas-Service-DomainReasoner.html#DomainReasoner",
        "fct-type": "function",
        "title": "exercises"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service DomainReasoner",
        "module": "Ideas.Service.DomainReasoner",
        "name": "exercises",
        "normalized": "[Some Exercise]",
        "package": "ideas",
        "partial": "",
        "signature": "[Some Exercise]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-DomainReasoner.html#v:exercisesSorted",
      "description": {
        "fct-module": "Ideas.Service.DomainReasoner",
        "fct-package": "ideas",
        "fct-signature": "DomainReasoner -\u003e [Some Exercise]",
        "fct-source": "src/Ideas-Service-DomainReasoner.html#exercisesSorted",
        "fct-type": "function",
        "title": "exercisesSorted"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service DomainReasoner",
        "module": "Ideas.Service.DomainReasoner",
        "name": "exercisesSorted",
        "normalized": "DomainReasoner-\u003e[Some Exercise]",
        "package": "ideas",
        "partial": "Sorted",
        "signature": "DomainReasoner-\u003e[Some Exercise]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-DomainReasoner.html#v:findExercise",
      "description": {
        "fct-module": "Ideas.Service.DomainReasoner",
        "fct-package": "ideas",
        "fct-signature": "DomainReasoner -\u003e Id -\u003e m (Some Exercise)",
        "fct-source": "src/Ideas-Service-DomainReasoner.html#findExercise",
        "fct-type": "function",
        "title": "findExercise"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service DomainReasoner",
        "module": "Ideas.Service.DomainReasoner",
        "name": "findExercise",
        "normalized": "DomainReasoner-\u003eId-\u003ea(Some Exercise)",
        "package": "ideas",
        "partial": "Exercise",
        "signature": "DomainReasoner-\u003eId-\u003em(Some Exercise)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-DomainReasoner.html#v:findService",
      "description": {
        "fct-module": "Ideas.Service.DomainReasoner",
        "fct-package": "ideas",
        "fct-signature": "DomainReasoner -\u003e Id -\u003e m Service",
        "fct-source": "src/Ideas-Service-DomainReasoner.html#findService",
        "fct-type": "function",
        "title": "findService"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service DomainReasoner",
        "module": "Ideas.Service.DomainReasoner",
        "name": "findService",
        "normalized": "DomainReasoner-\u003eId-\u003ea Service",
        "package": "ideas",
        "partial": "Service",
        "signature": "DomainReasoner-\u003eId-\u003em Service"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-DomainReasoner.html#v:fullVersion",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Service.DomainReasoner",
        "fct-package": "ideas",
        "fct-signature": "String",
        "fct-source": "src/Ideas-Service-DomainReasoner.html#DomainReasoner",
        "fct-type": "function",
        "title": "fullVersion"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service DomainReasoner",
        "module": "Ideas.Service.DomainReasoner",
        "name": "fullVersion",
        "normalized": "",
        "package": "ideas",
        "partial": "Version",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-DomainReasoner.html#v:reasonerId",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Service.DomainReasoner",
        "fct-package": "ideas",
        "fct-signature": "Id",
        "fct-source": "src/Ideas-Service-DomainReasoner.html#DomainReasoner",
        "fct-type": "function",
        "title": "reasonerId"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service DomainReasoner",
        "module": "Ideas.Service.DomainReasoner",
        "name": "reasonerId",
        "normalized": "",
        "package": "ideas",
        "partial": "Id",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-DomainReasoner.html#v:scripts",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Service.DomainReasoner",
        "fct-package": "ideas",
        "fct-signature": "[(Id, FilePath)]",
        "fct-source": "src/Ideas-Service-DomainReasoner.html#DomainReasoner",
        "fct-type": "function",
        "title": "scripts"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service DomainReasoner",
        "module": "Ideas.Service.DomainReasoner",
        "name": "scripts",
        "normalized": "[(Id,FilePath)]",
        "package": "ideas",
        "partial": "",
        "signature": "[(Id,FilePath)]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-DomainReasoner.html#v:services",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Service.DomainReasoner",
        "fct-package": "ideas",
        "fct-signature": "[Service]",
        "fct-source": "src/Ideas-Service-DomainReasoner.html#DomainReasoner",
        "fct-type": "function",
        "title": "services"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service DomainReasoner",
        "module": "Ideas.Service.DomainReasoner",
        "name": "services",
        "normalized": "[Service]",
        "package": "ideas",
        "partial": "",
        "signature": "[Service]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-DomainReasoner.html#v:servicesSorted",
      "description": {
        "fct-module": "Ideas.Service.DomainReasoner",
        "fct-package": "ideas",
        "fct-signature": "DomainReasoner -\u003e [Service]",
        "fct-source": "src/Ideas-Service-DomainReasoner.html#servicesSorted",
        "fct-type": "function",
        "title": "servicesSorted"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service DomainReasoner",
        "module": "Ideas.Service.DomainReasoner",
        "name": "servicesSorted",
        "normalized": "DomainReasoner-\u003e[Service]",
        "package": "ideas",
        "partial": "Sorted",
        "signature": "DomainReasoner-\u003e[Service]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-DomainReasoner.html#v:testSuite",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Service.DomainReasoner",
        "fct-package": "ideas",
        "fct-signature": "TestSuite",
        "fct-source": "src/Ideas-Service-DomainReasoner.html#DomainReasoner",
        "fct-type": "function",
        "title": "testSuite"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service DomainReasoner",
        "module": "Ideas.Service.DomainReasoner",
        "name": "testSuite",
        "normalized": "",
        "package": "ideas",
        "partial": "Suite",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-DomainReasoner.html#v:version",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Service.DomainReasoner",
        "fct-package": "ideas",
        "fct-signature": "String",
        "fct-source": "src/Ideas-Service-DomainReasoner.html#DomainReasoner",
        "fct-type": "function",
        "title": "version"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service DomainReasoner",
        "module": "Ideas.Service.DomainReasoner",
        "name": "version",
        "normalized": "",
        "package": "ideas",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-DomainReasoner.html#v:views",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Service.DomainReasoner",
        "fct-package": "ideas",
        "fct-signature": "[ViewPackage]",
        "fct-source": "src/Ideas-Service-DomainReasoner.html#DomainReasoner",
        "fct-type": "function",
        "title": "views"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service DomainReasoner",
        "module": "Ideas.Service.DomainReasoner",
        "name": "views",
        "normalized": "[ViewPackage]",
        "package": "ideas",
        "partial": "",
        "signature": "[ViewPackage]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-FeedbackScript-Analysis.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eAnalysis of a feedbackscript\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "Ideas.Service.FeedbackScript.Analysis",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Service-FeedbackScript-Analysis.html",
        "fct-type": "module",
        "title": "Analysis"
      },
      "index": {
        "description": "Analysis of feedbackscript",
        "hierarchy": "Ideas Service FeedbackScript Analysis",
        "module": "Ideas.Service.FeedbackScript.Analysis",
        "name": "Analysis",
        "normalized": "",
        "package": "ideas",
        "partial": "Analysis",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-FeedbackScript-Analysis.html#t:Message",
      "description": {
        "fct-module": "Ideas.Service.FeedbackScript.Analysis",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Service-FeedbackScript-Analysis.html#Message",
        "fct-type": "data",
        "title": "Message"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service FeedbackScript Analysis",
        "module": "Ideas.Service.FeedbackScript.Analysis",
        "name": "Message",
        "normalized": "",
        "package": "ideas",
        "partial": "Message",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-FeedbackScript-Analysis.html#v:FeedbackUndefined",
      "description": {
        "fct-module": "Ideas.Service.FeedbackScript.Analysis",
        "fct-package": "ideas",
        "fct-signature": "FeedbackUndefined Id",
        "fct-source": "src/Ideas-Service-FeedbackScript-Analysis.html#Message",
        "fct-type": "function",
        "title": "FeedbackUndefined"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service FeedbackScript Analysis",
        "module": "Ideas.Service.FeedbackScript.Analysis",
        "name": "FeedbackUndefined",
        "normalized": "",
        "package": "ideas",
        "partial": "Feedback Undefined",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-FeedbackScript-Analysis.html#v:NoTextForRule",
      "description": {
        "fct-module": "Ideas.Service.FeedbackScript.Analysis",
        "fct-package": "ideas",
        "fct-signature": "NoTextForRule Id Id",
        "fct-source": "src/Ideas-Service-FeedbackScript-Analysis.html#Message",
        "fct-type": "function",
        "title": "NoTextForRule"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service FeedbackScript Analysis",
        "module": "Ideas.Service.FeedbackScript.Analysis",
        "name": "NoTextForRule",
        "normalized": "",
        "package": "ideas",
        "partial": "No Text For Rule",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-FeedbackScript-Analysis.html#v:UnknownAttribute",
      "description": {
        "fct-module": "Ideas.Service.FeedbackScript.Analysis",
        "fct-package": "ideas",
        "fct-signature": "UnknownAttribute Id",
        "fct-source": "src/Ideas-Service-FeedbackScript-Analysis.html#Message",
        "fct-type": "function",
        "title": "UnknownAttribute"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service FeedbackScript Analysis",
        "module": "Ideas.Service.FeedbackScript.Analysis",
        "name": "UnknownAttribute",
        "normalized": "",
        "package": "ideas",
        "partial": "Unknown Attribute",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-FeedbackScript-Analysis.html#v:UnknownCondAttr",
      "description": {
        "fct-module": "Ideas.Service.FeedbackScript.Analysis",
        "fct-package": "ideas",
        "fct-signature": "UnknownCondAttr Id",
        "fct-source": "src/Ideas-Service-FeedbackScript-Analysis.html#Message",
        "fct-type": "function",
        "title": "UnknownCondAttr"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service FeedbackScript Analysis",
        "module": "Ideas.Service.FeedbackScript.Analysis",
        "name": "UnknownCondAttr",
        "normalized": "",
        "package": "ideas",
        "partial": "Unknown Cond Attr",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-FeedbackScript-Analysis.html#v:UnknownExercise",
      "description": {
        "fct-module": "Ideas.Service.FeedbackScript.Analysis",
        "fct-package": "ideas",
        "fct-signature": "UnknownExercise Id",
        "fct-source": "src/Ideas-Service-FeedbackScript-Analysis.html#Message",
        "fct-type": "function",
        "title": "UnknownExercise"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service FeedbackScript Analysis",
        "module": "Ideas.Service.FeedbackScript.Analysis",
        "name": "UnknownExercise",
        "normalized": "",
        "package": "ideas",
        "partial": "Unknown Exercise",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-FeedbackScript-Analysis.html#v:UnknownFeedback",
      "description": {
        "fct-module": "Ideas.Service.FeedbackScript.Analysis",
        "fct-package": "ideas",
        "fct-signature": "UnknownFeedback Id",
        "fct-source": "src/Ideas-Service-FeedbackScript-Analysis.html#Message",
        "fct-type": "function",
        "title": "UnknownFeedback"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service FeedbackScript Analysis",
        "module": "Ideas.Service.FeedbackScript.Analysis",
        "name": "UnknownFeedback",
        "normalized": "",
        "package": "ideas",
        "partial": "Unknown Feedback",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-FeedbackScript-Analysis.html#v:analyzeScript",
      "description": {
        "fct-module": "Ideas.Service.FeedbackScript.Analysis",
        "fct-package": "ideas",
        "fct-signature": "[Some Exercise] -\u003e Script -\u003e [Message]",
        "fct-source": "src/Ideas-Service-FeedbackScript-Analysis.html#analyzeScript",
        "fct-type": "function",
        "title": "analyzeScript"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service FeedbackScript Analysis",
        "module": "Ideas.Service.FeedbackScript.Analysis",
        "name": "analyzeScript",
        "normalized": "[Some Exercise]-\u003eScript-\u003e[Message]",
        "package": "ideas",
        "partial": "Script",
        "signature": "[Some Exercise]-\u003eScript-\u003e[Message]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-FeedbackScript-Analysis.html#v:makeScriptFor",
      "description": {
        "fct-module": "Ideas.Service.FeedbackScript.Analysis",
        "fct-package": "ideas",
        "fct-signature": "DomainReasoner -\u003e a -\u003e IO ()",
        "fct-source": "src/Ideas-Service-FeedbackScript-Analysis.html#makeScriptFor",
        "fct-type": "function",
        "title": "makeScriptFor"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service FeedbackScript Analysis",
        "module": "Ideas.Service.FeedbackScript.Analysis",
        "name": "makeScriptFor",
        "normalized": "DomainReasoner-\u003ea-\u003eIO()",
        "package": "ideas",
        "partial": "Script For",
        "signature": "DomainReasoner-\u003ea-\u003eIO()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-FeedbackScript-Analysis.html#v:parseAndAnalyzeScript",
      "description": {
        "fct-module": "Ideas.Service.FeedbackScript.Analysis",
        "fct-package": "ideas",
        "fct-signature": "DomainReasoner -\u003e FilePath -\u003e IO ()",
        "fct-source": "src/Ideas-Service-FeedbackScript-Analysis.html#parseAndAnalyzeScript",
        "fct-type": "function",
        "title": "parseAndAnalyzeScript"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service FeedbackScript Analysis",
        "module": "Ideas.Service.FeedbackScript.Analysis",
        "name": "parseAndAnalyzeScript",
        "normalized": "DomainReasoner-\u003eFilePath-\u003eIO()",
        "package": "ideas",
        "partial": "And Analyze Script",
        "signature": "DomainReasoner-\u003eFilePath-\u003eIO()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-FeedbackScript-Parser.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eSimple parser for feedback scripts\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "Ideas.Service.FeedbackScript.Parser",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Service-FeedbackScript-Parser.html",
        "fct-type": "module",
        "title": "Parser"
      },
      "index": {
        "description": "Simple parser for feedback scripts",
        "hierarchy": "Ideas Service FeedbackScript Parser",
        "module": "Ideas.Service.FeedbackScript.Parser",
        "name": "Parser",
        "normalized": "",
        "package": "ideas",
        "partial": "Parser",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-FeedbackScript-Parser.html#t:Script",
      "description": {
        "fct-module": "Ideas.Service.FeedbackScript.Parser",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Service-FeedbackScript-Syntax.html#Script",
        "fct-type": "data",
        "title": "Script"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service FeedbackScript Parser",
        "module": "Ideas.Service.FeedbackScript.Parser",
        "name": "Script",
        "normalized": "",
        "package": "ideas",
        "partial": "Script",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-FeedbackScript-Parser.html#v:parseScript",
      "description": {
        "fct-module": "Ideas.Service.FeedbackScript.Parser",
        "fct-package": "ideas",
        "fct-signature": "FilePath -\u003e IO Script",
        "fct-source": "src/Ideas-Service-FeedbackScript-Parser.html#parseScript",
        "fct-type": "function",
        "title": "parseScript"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service FeedbackScript Parser",
        "module": "Ideas.Service.FeedbackScript.Parser",
        "name": "parseScript",
        "normalized": "FilePath-\u003eIO Script",
        "package": "ideas",
        "partial": "Script",
        "signature": "FilePath-\u003eIO Script"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-FeedbackScript-Parser.html#v:parseScriptSafe",
      "description": {
        "fct-module": "Ideas.Service.FeedbackScript.Parser",
        "fct-package": "ideas",
        "fct-signature": "FilePath -\u003e IO Script",
        "fct-source": "src/Ideas-Service-FeedbackScript-Parser.html#parseScriptSafe",
        "fct-type": "function",
        "title": "parseScriptSafe"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service FeedbackScript Parser",
        "module": "Ideas.Service.FeedbackScript.Parser",
        "name": "parseScriptSafe",
        "normalized": "FilePath-\u003eIO Script",
        "package": "ideas",
        "partial": "Script Safe",
        "signature": "FilePath-\u003eIO Script"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-FeedbackScript-Run.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eRun a feedbackscript\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "Ideas.Service.FeedbackScript.Run",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Service-FeedbackScript-Run.html",
        "fct-type": "module",
        "title": "Run"
      },
      "index": {
        "description": "Run feedbackscript",
        "hierarchy": "Ideas Service FeedbackScript Run",
        "module": "Ideas.Service.FeedbackScript.Run",
        "name": "Run",
        "normalized": "",
        "package": "ideas",
        "partial": "Run",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-FeedbackScript-Run.html#t:Environment",
      "description": {
        "fct-module": "Ideas.Service.FeedbackScript.Run",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Service-FeedbackScript-Run.html#Environment",
        "fct-type": "data",
        "title": "Environment"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service FeedbackScript Run",
        "module": "Ideas.Service.FeedbackScript.Run",
        "name": "Environment",
        "normalized": "",
        "package": "ideas",
        "partial": "Environment",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-FeedbackScript-Run.html#t:Script",
      "description": {
        "fct-module": "Ideas.Service.FeedbackScript.Run",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Service-FeedbackScript-Syntax.html#Script",
        "fct-type": "data",
        "title": "Script"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service FeedbackScript Run",
        "module": "Ideas.Service.FeedbackScript.Run",
        "name": "Script",
        "normalized": "",
        "package": "ideas",
        "partial": "Script",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-FeedbackScript-Run.html#v:Env",
      "description": {
        "fct-module": "Ideas.Service.FeedbackScript.Run",
        "fct-package": "ideas",
        "fct-signature": "Env",
        "fct-source": "src/Ideas-Service-FeedbackScript-Run.html#Environment",
        "fct-type": "function",
        "title": "Env"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service FeedbackScript Run",
        "module": "Ideas.Service.FeedbackScript.Run",
        "name": "Env",
        "normalized": "",
        "package": "ideas",
        "partial": "Env",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-FeedbackScript-Run.html#v:actives",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Service.FeedbackScript.Run",
        "fct-package": "ideas",
        "fct-signature": "Maybe [LabelInfo]",
        "fct-source": "src/Ideas-Service-FeedbackScript-Run.html#Environment",
        "fct-type": "function",
        "title": "actives"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service FeedbackScript Run",
        "module": "Ideas.Service.FeedbackScript.Run",
        "name": "actives",
        "normalized": "Maybe[LabelInfo]",
        "package": "ideas",
        "partial": "",
        "signature": "Maybe[LabelInfo]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-FeedbackScript-Run.html#v:after",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Service.FeedbackScript.Run",
        "fct-package": "ideas",
        "fct-signature": "Maybe Term",
        "fct-source": "src/Ideas-Service-FeedbackScript-Run.html#Environment",
        "fct-type": "function",
        "title": "after"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service FeedbackScript Run",
        "module": "Ideas.Service.FeedbackScript.Run",
        "name": "after",
        "normalized": "",
        "package": "ideas",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-FeedbackScript-Run.html#v:afterText",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Service.FeedbackScript.Run",
        "fct-package": "ideas",
        "fct-signature": "Maybe String",
        "fct-source": "src/Ideas-Service-FeedbackScript-Run.html#Environment",
        "fct-type": "function",
        "title": "afterText"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service FeedbackScript Run",
        "module": "Ideas.Service.FeedbackScript.Run",
        "name": "afterText",
        "normalized": "",
        "package": "ideas",
        "partial": "Text",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-FeedbackScript-Run.html#v:attributeIds",
      "description": {
        "fct-module": "Ideas.Service.FeedbackScript.Run",
        "fct-package": "ideas",
        "fct-signature": "[Id]",
        "fct-source": "src/Ideas-Service-FeedbackScript-Run.html#attributeIds",
        "fct-type": "function",
        "title": "attributeIds"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service FeedbackScript Run",
        "module": "Ideas.Service.FeedbackScript.Run",
        "name": "attributeIds",
        "normalized": "[Id]",
        "package": "ideas",
        "partial": "Ids",
        "signature": "[Id]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-FeedbackScript-Run.html#v:before",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Service.FeedbackScript.Run",
        "fct-package": "ideas",
        "fct-signature": "Maybe Term",
        "fct-source": "src/Ideas-Service-FeedbackScript-Run.html#Environment",
        "fct-type": "function",
        "title": "before"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service FeedbackScript Run",
        "module": "Ideas.Service.FeedbackScript.Run",
        "name": "before",
        "normalized": "",
        "package": "ideas",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-FeedbackScript-Run.html#v:conditionIds",
      "description": {
        "fct-module": "Ideas.Service.FeedbackScript.Run",
        "fct-package": "ideas",
        "fct-signature": "[Id]",
        "fct-source": "src/Ideas-Service-FeedbackScript-Run.html#conditionIds",
        "fct-type": "function",
        "title": "conditionIds"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service FeedbackScript Run",
        "module": "Ideas.Service.FeedbackScript.Run",
        "name": "conditionIds",
        "normalized": "[Id]",
        "package": "ideas",
        "partial": "Ids",
        "signature": "[Id]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-FeedbackScript-Run.html#v:diffPair",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Service.FeedbackScript.Run",
        "fct-package": "ideas",
        "fct-signature": "Maybe (String, String)",
        "fct-source": "src/Ideas-Service-FeedbackScript-Run.html#Environment",
        "fct-type": "function",
        "title": "diffPair"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service FeedbackScript Run",
        "module": "Ideas.Service.FeedbackScript.Run",
        "name": "diffPair",
        "normalized": "Maybe(String,String)",
        "package": "ideas",
        "partial": "Pair",
        "signature": "Maybe(String,String)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-FeedbackScript-Run.html#v:eval",
      "description": {
        "fct-module": "Ideas.Service.FeedbackScript.Run",
        "fct-package": "ideas",
        "fct-signature": "Environment a -\u003e Script -\u003e Either Id Text -\u003e Maybe Text",
        "fct-source": "src/Ideas-Service-FeedbackScript-Run.html#eval",
        "fct-type": "function",
        "title": "eval"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service FeedbackScript Run",
        "module": "Ideas.Service.FeedbackScript.Run",
        "name": "eval",
        "normalized": "Environment a-\u003eScript-\u003eEither Id Text-\u003eMaybe Text",
        "package": "ideas",
        "partial": "",
        "signature": "Environment a-\u003eScript-\u003eEither Id Text-\u003eMaybe Text"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-FeedbackScript-Run.html#v:expected",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Service.FeedbackScript.Run",
        "fct-package": "ideas",
        "fct-signature": "Maybe (Rule (Context a))",
        "fct-source": "src/Ideas-Service-FeedbackScript-Run.html#Environment",
        "fct-type": "function",
        "title": "expected"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service FeedbackScript Run",
        "module": "Ideas.Service.FeedbackScript.Run",
        "name": "expected",
        "normalized": "",
        "package": "ideas",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-FeedbackScript-Run.html#v:feedbackDiagnosis",
      "description": {
        "fct-module": "Ideas.Service.FeedbackScript.Run",
        "fct-package": "ideas",
        "fct-signature": "Diagnosis a -\u003e Environment a -\u003e Script -\u003e Text",
        "fct-source": "src/Ideas-Service-FeedbackScript-Run.html#feedbackDiagnosis",
        "fct-type": "function",
        "title": "feedbackDiagnosis"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service FeedbackScript Run",
        "module": "Ideas.Service.FeedbackScript.Run",
        "name": "feedbackDiagnosis",
        "normalized": "Diagnosis a-\u003eEnvironment a-\u003eScript-\u003eText",
        "package": "ideas",
        "partial": "Diagnosis",
        "signature": "Diagnosis a-\u003eEnvironment a-\u003eScript-\u003eText"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-FeedbackScript-Run.html#v:feedbackHint",
      "description": {
        "fct-module": "Ideas.Service.FeedbackScript.Run",
        "fct-package": "ideas",
        "fct-signature": "Id -\u003e Environment a -\u003e Script -\u003e Text",
        "fct-source": "src/Ideas-Service-FeedbackScript-Run.html#feedbackHint",
        "fct-type": "function",
        "title": "feedbackHint"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service FeedbackScript Run",
        "module": "Ideas.Service.FeedbackScript.Run",
        "name": "feedbackHint",
        "normalized": "Id-\u003eEnvironment a-\u003eScript-\u003eText",
        "package": "ideas",
        "partial": "Hint",
        "signature": "Id-\u003eEnvironment a-\u003eScript-\u003eText"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-FeedbackScript-Run.html#v:feedbackHints",
      "description": {
        "fct-module": "Ideas.Service.FeedbackScript.Run",
        "fct-package": "ideas",
        "fct-signature": "Id -\u003e [((Rule (Context a), b, c), State a)] -\u003e State a -\u003e Script -\u003e [Text]",
        "fct-source": "src/Ideas-Service-FeedbackScript-Run.html#feedbackHints",
        "fct-type": "function",
        "title": "feedbackHints"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service FeedbackScript Run",
        "module": "Ideas.Service.FeedbackScript.Run",
        "name": "feedbackHints",
        "normalized": "Id-\u003e[((Rule(Context a),b,c),State a)]-\u003eState a-\u003eScript-\u003e[Text]",
        "package": "ideas",
        "partial": "Hints",
        "signature": "Id-\u003e[((Rule(Context a),b,c),State a)]-\u003eState a-\u003eScript-\u003e[Text]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-FeedbackScript-Run.html#v:feedbackIds",
      "description": {
        "fct-module": "Ideas.Service.FeedbackScript.Run",
        "fct-package": "ideas",
        "fct-signature": "[Id]",
        "fct-source": "src/Ideas-Service-FeedbackScript-Run.html#feedbackIds",
        "fct-type": "function",
        "title": "feedbackIds"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service FeedbackScript Run",
        "module": "Ideas.Service.FeedbackScript.Run",
        "name": "feedbackIds",
        "normalized": "[Id]",
        "package": "ideas",
        "partial": "Ids",
        "signature": "[Id]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-FeedbackScript-Run.html#v:newEnvironment",
      "description": {
        "fct-module": "Ideas.Service.FeedbackScript.Run",
        "fct-package": "ideas",
        "fct-signature": "State a -\u003e Environment a",
        "fct-source": "src/Ideas-Service-FeedbackScript-Run.html#newEnvironment",
        "fct-type": "function",
        "title": "newEnvironment"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service FeedbackScript Run",
        "module": "Ideas.Service.FeedbackScript.Run",
        "name": "newEnvironment",
        "normalized": "State a-\u003eEnvironment a",
        "package": "ideas",
        "partial": "Environment",
        "signature": "State a-\u003eEnvironment a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-FeedbackScript-Run.html#v:oldReady",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Service.FeedbackScript.Run",
        "fct-package": "ideas",
        "fct-signature": "Bool",
        "fct-source": "src/Ideas-Service-FeedbackScript-Run.html#Environment",
        "fct-type": "function",
        "title": "oldReady"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service FeedbackScript Run",
        "module": "Ideas.Service.FeedbackScript.Run",
        "name": "oldReady",
        "normalized": "",
        "package": "ideas",
        "partial": "Ready",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-FeedbackScript-Run.html#v:recognized",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Service.FeedbackScript.Run",
        "fct-package": "ideas",
        "fct-signature": "Maybe (Rule (Context a))",
        "fct-source": "src/Ideas-Service-FeedbackScript-Run.html#Environment",
        "fct-type": "function",
        "title": "recognized"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service FeedbackScript Run",
        "module": "Ideas.Service.FeedbackScript.Run",
        "name": "recognized",
        "normalized": "",
        "package": "ideas",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-FeedbackScript-Run.html#v:ruleToString",
      "description": {
        "fct-module": "Ideas.Service.FeedbackScript.Run",
        "fct-package": "ideas",
        "fct-signature": "Environment a -\u003e Script -\u003e Rule b -\u003e String",
        "fct-source": "src/Ideas-Service-FeedbackScript-Run.html#ruleToString",
        "fct-type": "function",
        "title": "ruleToString"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service FeedbackScript Run",
        "module": "Ideas.Service.FeedbackScript.Run",
        "name": "ruleToString",
        "normalized": "Environment a-\u003eScript-\u003eRule b-\u003eString",
        "package": "ideas",
        "partial": "To String",
        "signature": "Environment a-\u003eScript-\u003eRule b-\u003eString"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-FeedbackScript-Syntax.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eAbstract syntax for feedback scripts, and pretty-printer (Show instance)\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "Ideas.Service.FeedbackScript.Syntax",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Service-FeedbackScript-Syntax.html",
        "fct-type": "module",
        "title": "Syntax"
      },
      "index": {
        "description": "Abstract syntax for feedback scripts and pretty-printer Show instance",
        "hierarchy": "Ideas Service FeedbackScript Syntax",
        "module": "Ideas.Service.FeedbackScript.Syntax",
        "name": "Syntax",
        "normalized": "",
        "package": "ideas",
        "partial": "Syntax",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-FeedbackScript-Syntax.html#t:Condition",
      "description": {
        "fct-module": "Ideas.Service.FeedbackScript.Syntax",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Service-FeedbackScript-Syntax.html#Condition",
        "fct-type": "data",
        "title": "Condition"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service FeedbackScript Syntax",
        "module": "Ideas.Service.FeedbackScript.Syntax",
        "name": "Condition",
        "normalized": "",
        "package": "ideas",
        "partial": "Condition",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-FeedbackScript-Syntax.html#t:Decl",
      "description": {
        "fct-module": "Ideas.Service.FeedbackScript.Syntax",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Service-FeedbackScript-Syntax.html#Decl",
        "fct-type": "data",
        "title": "Decl"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service FeedbackScript Syntax",
        "module": "Ideas.Service.FeedbackScript.Syntax",
        "name": "Decl",
        "normalized": "",
        "package": "ideas",
        "partial": "Decl",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-FeedbackScript-Syntax.html#t:DeclType",
      "description": {
        "fct-module": "Ideas.Service.FeedbackScript.Syntax",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Service-FeedbackScript-Syntax.html#DeclType",
        "fct-type": "data",
        "title": "DeclType"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service FeedbackScript Syntax",
        "module": "Ideas.Service.FeedbackScript.Syntax",
        "name": "DeclType",
        "normalized": "",
        "package": "ideas",
        "partial": "Decl Type",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-FeedbackScript-Syntax.html#t:Script",
      "description": {
        "fct-module": "Ideas.Service.FeedbackScript.Syntax",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Service-FeedbackScript-Syntax.html#Script",
        "fct-type": "data",
        "title": "Script"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service FeedbackScript Syntax",
        "module": "Ideas.Service.FeedbackScript.Syntax",
        "name": "Script",
        "normalized": "",
        "package": "ideas",
        "partial": "Script",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-FeedbackScript-Syntax.html#t:Text",
      "description": {
        "fct-module": "Ideas.Service.FeedbackScript.Syntax",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Service-FeedbackScript-Syntax.html#Text",
        "fct-type": "data",
        "title": "Text"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service FeedbackScript Syntax",
        "module": "Ideas.Service.FeedbackScript.Syntax",
        "name": "Text",
        "normalized": "",
        "package": "ideas",
        "partial": "Text",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-FeedbackScript-Syntax.html#v::-60--62-:",
      "description": {
        "fct-module": "Ideas.Service.FeedbackScript.Syntax",
        "fct-package": "ideas",
        "fct-signature": "Text :\u003c\u003e: Text",
        "fct-source": "src/Ideas-Service-FeedbackScript-Syntax.html#Text",
        "fct-type": "function",
        "title": ":\u003c\u003e:"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service FeedbackScript Syntax",
        "module": "Ideas.Service.FeedbackScript.Syntax",
        "name": ":\u003c\u003e:",
        "normalized": "",
        "package": "ideas",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-FeedbackScript-Syntax.html#v:CondConst",
      "description": {
        "fct-module": "Ideas.Service.FeedbackScript.Syntax",
        "fct-package": "ideas",
        "fct-signature": "CondConst Bool",
        "fct-source": "src/Ideas-Service-FeedbackScript-Syntax.html#Condition",
        "fct-type": "function",
        "title": "CondConst"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service FeedbackScript Syntax",
        "module": "Ideas.Service.FeedbackScript.Syntax",
        "name": "CondConst",
        "normalized": "",
        "package": "ideas",
        "partial": "Cond Const",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-FeedbackScript-Syntax.html#v:CondNot",
      "description": {
        "fct-module": "Ideas.Service.FeedbackScript.Syntax",
        "fct-package": "ideas",
        "fct-signature": "CondNot Condition",
        "fct-source": "src/Ideas-Service-FeedbackScript-Syntax.html#Condition",
        "fct-type": "function",
        "title": "CondNot"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service FeedbackScript Syntax",
        "module": "Ideas.Service.FeedbackScript.Syntax",
        "name": "CondNot",
        "normalized": "",
        "package": "ideas",
        "partial": "Cond Not",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-FeedbackScript-Syntax.html#v:CondRef",
      "description": {
        "fct-module": "Ideas.Service.FeedbackScript.Syntax",
        "fct-package": "ideas",
        "fct-signature": "CondRef Id",
        "fct-source": "src/Ideas-Service-FeedbackScript-Syntax.html#Condition",
        "fct-type": "function",
        "title": "CondRef"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service FeedbackScript Syntax",
        "module": "Ideas.Service.FeedbackScript.Syntax",
        "name": "CondRef",
        "normalized": "",
        "package": "ideas",
        "partial": "Cond Ref",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-FeedbackScript-Syntax.html#v:Feedback",
      "description": {
        "fct-module": "Ideas.Service.FeedbackScript.Syntax",
        "fct-package": "ideas",
        "fct-signature": "Feedback",
        "fct-source": "src/Ideas-Service-FeedbackScript-Syntax.html#DeclType",
        "fct-type": "function",
        "title": "Feedback"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service FeedbackScript Syntax",
        "module": "Ideas.Service.FeedbackScript.Syntax",
        "name": "Feedback",
        "normalized": "",
        "package": "ideas",
        "partial": "Feedback",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-FeedbackScript-Syntax.html#v:Guarded",
      "description": {
        "fct-module": "Ideas.Service.FeedbackScript.Syntax",
        "fct-package": "ideas",
        "fct-signature": "Guarded DeclType [Id] [(Condition, Text)]",
        "fct-source": "src/Ideas-Service-FeedbackScript-Syntax.html#Decl",
        "fct-type": "function",
        "title": "Guarded"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service FeedbackScript Syntax",
        "module": "Ideas.Service.FeedbackScript.Syntax",
        "name": "Guarded",
        "normalized": "Guarded DeclType[Id][(Condition,Text)]",
        "package": "ideas",
        "partial": "Guarded",
        "signature": "Guarded DeclType[Id][(Condition,Text)]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-FeedbackScript-Syntax.html#v:Include",
      "description": {
        "fct-module": "Ideas.Service.FeedbackScript.Syntax",
        "fct-package": "ideas",
        "fct-signature": "Include [FilePath]",
        "fct-source": "src/Ideas-Service-FeedbackScript-Syntax.html#Decl",
        "fct-type": "function",
        "title": "Include"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service FeedbackScript Syntax",
        "module": "Ideas.Service.FeedbackScript.Syntax",
        "name": "Include",
        "normalized": "Include[FilePath]",
        "package": "ideas",
        "partial": "Include",
        "signature": "Include[FilePath]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-FeedbackScript-Syntax.html#v:NameSpace",
      "description": {
        "fct-module": "Ideas.Service.FeedbackScript.Syntax",
        "fct-package": "ideas",
        "fct-signature": "NameSpace [Id]",
        "fct-source": "src/Ideas-Service-FeedbackScript-Syntax.html#Decl",
        "fct-type": "function",
        "title": "NameSpace"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service FeedbackScript Syntax",
        "module": "Ideas.Service.FeedbackScript.Syntax",
        "name": "NameSpace",
        "normalized": "NameSpace[Id]",
        "package": "ideas",
        "partial": "Name Space",
        "signature": "NameSpace[Id]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-FeedbackScript-Syntax.html#v:RecognizedIs",
      "description": {
        "fct-module": "Ideas.Service.FeedbackScript.Syntax",
        "fct-package": "ideas",
        "fct-signature": "RecognizedIs Id",
        "fct-source": "src/Ideas-Service-FeedbackScript-Syntax.html#Condition",
        "fct-type": "function",
        "title": "RecognizedIs"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service FeedbackScript Syntax",
        "module": "Ideas.Service.FeedbackScript.Syntax",
        "name": "RecognizedIs",
        "normalized": "",
        "package": "ideas",
        "partial": "Recognized Is",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-FeedbackScript-Syntax.html#v:Simple",
      "description": {
        "fct-module": "Ideas.Service.FeedbackScript.Syntax",
        "fct-package": "ideas",
        "fct-signature": "Simple DeclType [Id] Text",
        "fct-source": "src/Ideas-Service-FeedbackScript-Syntax.html#Decl",
        "fct-type": "function",
        "title": "Simple"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service FeedbackScript Syntax",
        "module": "Ideas.Service.FeedbackScript.Syntax",
        "name": "Simple",
        "normalized": "Simple DeclType[Id]Text",
        "package": "ideas",
        "partial": "Simple",
        "signature": "Simple DeclType[Id]Text"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-FeedbackScript-Syntax.html#v:StringDecl",
      "description": {
        "fct-module": "Ideas.Service.FeedbackScript.Syntax",
        "fct-package": "ideas",
        "fct-signature": "StringDecl",
        "fct-source": "src/Ideas-Service-FeedbackScript-Syntax.html#DeclType",
        "fct-type": "function",
        "title": "StringDecl"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service FeedbackScript Syntax",
        "module": "Ideas.Service.FeedbackScript.Syntax",
        "name": "StringDecl",
        "normalized": "",
        "package": "ideas",
        "partial": "String Decl",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-FeedbackScript-Syntax.html#v:Supports",
      "description": {
        "fct-module": "Ideas.Service.FeedbackScript.Syntax",
        "fct-package": "ideas",
        "fct-signature": "Supports [Id]",
        "fct-source": "src/Ideas-Service-FeedbackScript-Syntax.html#Decl",
        "fct-type": "function",
        "title": "Supports"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service FeedbackScript Syntax",
        "module": "Ideas.Service.FeedbackScript.Syntax",
        "name": "Supports",
        "normalized": "Supports[Id]",
        "package": "ideas",
        "partial": "Supports",
        "signature": "Supports[Id]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-FeedbackScript-Syntax.html#v:TextEmpty",
      "description": {
        "fct-module": "Ideas.Service.FeedbackScript.Syntax",
        "fct-package": "ideas",
        "fct-signature": "TextEmpty",
        "fct-source": "src/Ideas-Service-FeedbackScript-Syntax.html#Text",
        "fct-type": "function",
        "title": "TextEmpty"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service FeedbackScript Syntax",
        "module": "Ideas.Service.FeedbackScript.Syntax",
        "name": "TextEmpty",
        "normalized": "",
        "package": "ideas",
        "partial": "Text Empty",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-FeedbackScript-Syntax.html#v:TextForId",
      "description": {
        "fct-module": "Ideas.Service.FeedbackScript.Syntax",
        "fct-package": "ideas",
        "fct-signature": "TextForId",
        "fct-source": "src/Ideas-Service-FeedbackScript-Syntax.html#DeclType",
        "fct-type": "function",
        "title": "TextForId"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service FeedbackScript Syntax",
        "module": "Ideas.Service.FeedbackScript.Syntax",
        "name": "TextForId",
        "normalized": "",
        "package": "ideas",
        "partial": "Text For Id",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-FeedbackScript-Syntax.html#v:TextRef",
      "description": {
        "fct-module": "Ideas.Service.FeedbackScript.Syntax",
        "fct-package": "ideas",
        "fct-signature": "TextRef Id",
        "fct-source": "src/Ideas-Service-FeedbackScript-Syntax.html#Text",
        "fct-type": "function",
        "title": "TextRef"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service FeedbackScript Syntax",
        "module": "Ideas.Service.FeedbackScript.Syntax",
        "name": "TextRef",
        "normalized": "",
        "package": "ideas",
        "partial": "Text Ref",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-FeedbackScript-Syntax.html#v:TextString",
      "description": {
        "fct-module": "Ideas.Service.FeedbackScript.Syntax",
        "fct-package": "ideas",
        "fct-signature": "TextString String",
        "fct-source": "src/Ideas-Service-FeedbackScript-Syntax.html#Text",
        "fct-type": "function",
        "title": "TextString"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service FeedbackScript Syntax",
        "module": "Ideas.Service.FeedbackScript.Syntax",
        "name": "TextString",
        "normalized": "",
        "package": "ideas",
        "partial": "Text String",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-FeedbackScript-Syntax.html#v:TextTerm",
      "description": {
        "fct-module": "Ideas.Service.FeedbackScript.Syntax",
        "fct-package": "ideas",
        "fct-signature": "TextTerm Term",
        "fct-source": "src/Ideas-Service-FeedbackScript-Syntax.html#Text",
        "fct-type": "function",
        "title": "TextTerm"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service FeedbackScript Syntax",
        "module": "Ideas.Service.FeedbackScript.Syntax",
        "name": "TextTerm",
        "normalized": "",
        "package": "ideas",
        "partial": "Text Term",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-FeedbackScript-Syntax.html#v:feedbackDecl",
      "description": {
        "fct-module": "Ideas.Service.FeedbackScript.Syntax",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e Text -\u003e Decl",
        "fct-source": "src/Ideas-Service-FeedbackScript-Syntax.html#feedbackDecl",
        "fct-type": "function",
        "title": "feedbackDecl"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service FeedbackScript Syntax",
        "module": "Ideas.Service.FeedbackScript.Syntax",
        "name": "feedbackDecl",
        "normalized": "a-\u003eText-\u003eDecl",
        "package": "ideas",
        "partial": "Decl",
        "signature": "a-\u003eText-\u003eDecl"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-FeedbackScript-Syntax.html#v:includes",
      "description": {
        "fct-module": "Ideas.Service.FeedbackScript.Syntax",
        "fct-package": "ideas",
        "fct-signature": "Script -\u003e [FilePath]",
        "fct-source": "src/Ideas-Service-FeedbackScript-Syntax.html#includes",
        "fct-type": "function",
        "title": "includes"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service FeedbackScript Syntax",
        "module": "Ideas.Service.FeedbackScript.Syntax",
        "name": "includes",
        "normalized": "Script-\u003e[FilePath]",
        "package": "ideas",
        "partial": "",
        "signature": "Script-\u003e[FilePath]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-FeedbackScript-Syntax.html#v:makeScript",
      "description": {
        "fct-module": "Ideas.Service.FeedbackScript.Syntax",
        "fct-package": "ideas",
        "fct-signature": "[Decl] -\u003e Script",
        "fct-source": "src/Ideas-Service-FeedbackScript-Syntax.html#makeScript",
        "fct-type": "function",
        "title": "makeScript"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service FeedbackScript Syntax",
        "module": "Ideas.Service.FeedbackScript.Syntax",
        "name": "makeScript",
        "normalized": "[Decl]-\u003eScript",
        "package": "ideas",
        "partial": "Script",
        "signature": "[Decl]-\u003eScript"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-FeedbackScript-Syntax.html#v:makeText",
      "description": {
        "fct-module": "Ideas.Service.FeedbackScript.Syntax",
        "fct-package": "ideas",
        "fct-signature": "String -\u003e Text",
        "fct-source": "src/Ideas-Service-FeedbackScript-Syntax.html#makeText",
        "fct-type": "function",
        "title": "makeText"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service FeedbackScript Syntax",
        "module": "Ideas.Service.FeedbackScript.Syntax",
        "name": "makeText",
        "normalized": "String-\u003eText",
        "package": "ideas",
        "partial": "Text",
        "signature": "String-\u003eText"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-FeedbackScript-Syntax.html#v:scriptDecls",
      "description": {
        "fct-module": "Ideas.Service.FeedbackScript.Syntax",
        "fct-package": "ideas",
        "fct-signature": "Script -\u003e [Decl]",
        "fct-source": "src/Ideas-Service-FeedbackScript-Syntax.html#scriptDecls",
        "fct-type": "function",
        "title": "scriptDecls"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service FeedbackScript Syntax",
        "module": "Ideas.Service.FeedbackScript.Syntax",
        "name": "scriptDecls",
        "normalized": "Script-\u003e[Decl]",
        "package": "ideas",
        "partial": "Decls",
        "signature": "Script-\u003e[Decl]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-FeedbackScript-Syntax.html#v:textForIdDecl",
      "description": {
        "fct-module": "Ideas.Service.FeedbackScript.Syntax",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e Text -\u003e Decl",
        "fct-source": "src/Ideas-Service-FeedbackScript-Syntax.html#textForIdDecl",
        "fct-type": "function",
        "title": "textForIdDecl"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service FeedbackScript Syntax",
        "module": "Ideas.Service.FeedbackScript.Syntax",
        "name": "textForIdDecl",
        "normalized": "a-\u003eText-\u003eDecl",
        "package": "ideas",
        "partial": "For Id Decl",
        "signature": "a-\u003eText-\u003eDecl"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-FeedbackScript-Syntax.html#v:textItems",
      "description": {
        "fct-module": "Ideas.Service.FeedbackScript.Syntax",
        "fct-package": "ideas",
        "fct-signature": "Text -\u003e [Text]",
        "fct-source": "src/Ideas-Service-FeedbackScript-Syntax.html#textItems",
        "fct-type": "function",
        "title": "textItems"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service FeedbackScript Syntax",
        "module": "Ideas.Service.FeedbackScript.Syntax",
        "name": "textItems",
        "normalized": "Text-\u003e[Text]",
        "package": "ideas",
        "partial": "Items",
        "signature": "Text-\u003e[Text]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-FeedbackText.html#",
      "description": {
        "fct-module": "Ideas.Service.FeedbackText",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Service-FeedbackText.html",
        "fct-type": "module",
        "title": "FeedbackText"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service FeedbackText",
        "module": "Ideas.Service.FeedbackText",
        "name": "FeedbackText",
        "normalized": "",
        "package": "ideas",
        "partial": "Feedback Text",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-FeedbackText.html#t:Message",
      "description": {
        "fct-module": "Ideas.Service.FeedbackText",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Service-FeedbackText.html#Message",
        "fct-type": "data",
        "title": "Message"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service FeedbackText",
        "module": "Ideas.Service.FeedbackText",
        "name": "Message",
        "normalized": "",
        "package": "ideas",
        "partial": "Message",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-FeedbackText.html#v:accept",
      "description": {
        "fct-module": "Ideas.Service.FeedbackText",
        "fct-package": "ideas",
        "fct-signature": "Message -\u003e Maybe Bool",
        "fct-source": "src/Ideas-Service-FeedbackText.html#accept",
        "fct-type": "function",
        "title": "accept"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service FeedbackText",
        "module": "Ideas.Service.FeedbackText",
        "name": "accept",
        "normalized": "Message-\u003eMaybe Bool",
        "package": "ideas",
        "partial": "",
        "signature": "Message-\u003eMaybe Bool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-FeedbackText.html#v:derivationtext",
      "description": {
        "fct-module": "Ideas.Service.FeedbackText",
        "fct-package": "ideas",
        "fct-signature": "Script -\u003e State a -\u003e Either String (Derivation String (Context a))",
        "fct-source": "src/Ideas-Service-FeedbackText.html#derivationtext",
        "fct-type": "function",
        "title": "derivationtext"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service FeedbackText",
        "module": "Ideas.Service.FeedbackText",
        "name": "derivationtext",
        "normalized": "Script-\u003eState a-\u003eEither String(Derivation String(Context a))",
        "package": "ideas",
        "partial": "",
        "signature": "Script-\u003eState a-\u003eEither String(Derivation String(Context a))"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-FeedbackText.html#v:feedbacktext",
      "description": {
        "fct-module": "Ideas.Service.FeedbackText",
        "fct-package": "ideas",
        "fct-signature": "Script -\u003e State a -\u003e Context a -\u003e (Message, State a)",
        "fct-source": "src/Ideas-Service-FeedbackText.html#feedbacktext",
        "fct-type": "function",
        "title": "feedbacktext"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service FeedbackText",
        "module": "Ideas.Service.FeedbackText",
        "name": "feedbacktext",
        "normalized": "Script-\u003eState a-\u003eContext a-\u003e(Message,State a)",
        "package": "ideas",
        "partial": "",
        "signature": "Script-\u003eState a-\u003eContext a-\u003e(Message,State a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-FeedbackText.html#v:onefirsttext",
      "description": {
        "fct-module": "Ideas.Service.FeedbackText",
        "fct-package": "ideas",
        "fct-signature": "Script -\u003e State a -\u003e Maybe String -\u003e (Message, Maybe (State a))",
        "fct-source": "src/Ideas-Service-FeedbackText.html#onefirsttext",
        "fct-type": "function",
        "title": "onefirsttext"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service FeedbackText",
        "module": "Ideas.Service.FeedbackText",
        "name": "onefirsttext",
        "normalized": "Script-\u003eState a-\u003eMaybe String-\u003e(Message,Maybe(State a))",
        "package": "ideas",
        "partial": "",
        "signature": "Script-\u003eState a-\u003eMaybe String-\u003e(Message,Maybe(State a))"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-FeedbackText.html#v:submittext",
      "description": {
        "fct-module": "Ideas.Service.FeedbackText",
        "fct-package": "ideas",
        "fct-signature": "Script -\u003e State a -\u003e String -\u003e (Message, State a)",
        "fct-source": "src/Ideas-Service-FeedbackText.html#submittext",
        "fct-type": "function",
        "title": "submittext"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service FeedbackText",
        "module": "Ideas.Service.FeedbackText",
        "name": "submittext",
        "normalized": "Script-\u003eState a-\u003eString-\u003e(Message,State a)",
        "package": "ideas",
        "partial": "",
        "signature": "Script-\u003eState a-\u003eString-\u003e(Message,State a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-FeedbackText.html#v:text",
      "description": {
        "fct-module": "Ideas.Service.FeedbackText",
        "fct-package": "ideas",
        "fct-signature": "Message -\u003e Text",
        "fct-source": "src/Ideas-Service-FeedbackText.html#text",
        "fct-type": "function",
        "title": "text"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service FeedbackText",
        "module": "Ideas.Service.FeedbackText",
        "name": "text",
        "normalized": "Message-\u003eText",
        "package": "ideas",
        "partial": "",
        "signature": "Message-\u003eText"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-ProblemDecomposition.html#",
      "description": {
        "fct-module": "Ideas.Service.ProblemDecomposition",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Service-ProblemDecomposition.html",
        "fct-type": "module",
        "title": "ProblemDecomposition"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service ProblemDecomposition",
        "module": "Ideas.Service.ProblemDecomposition",
        "name": "ProblemDecomposition",
        "normalized": "",
        "package": "ideas",
        "partial": "Problem Decomposition",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-ProblemDecomposition.html#t:Reply",
      "description": {
        "fct-module": "Ideas.Service.ProblemDecomposition",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Service-ProblemDecomposition.html#Reply",
        "fct-type": "data",
        "title": "Reply"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service ProblemDecomposition",
        "module": "Ideas.Service.ProblemDecomposition",
        "name": "Reply",
        "normalized": "",
        "package": "ideas",
        "partial": "Reply",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-ProblemDecomposition.html#v:Incorrect",
      "description": {
        "fct-module": "Ideas.Service.ProblemDecomposition",
        "fct-package": "ideas",
        "fct-signature": "Incorrect Bool Id (State a) Environment",
        "fct-source": "src/Ideas-Service-ProblemDecomposition.html#Reply",
        "fct-type": "function",
        "title": "Incorrect"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service ProblemDecomposition",
        "module": "Ideas.Service.ProblemDecomposition",
        "name": "Incorrect",
        "normalized": "",
        "package": "ideas",
        "partial": "Incorrect",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-ProblemDecomposition.html#v:Ok",
      "description": {
        "fct-module": "Ideas.Service.ProblemDecomposition",
        "fct-package": "ideas",
        "fct-signature": "Ok Id (State a)",
        "fct-source": "src/Ideas-Service-ProblemDecomposition.html#Reply",
        "fct-type": "function",
        "title": "Ok"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service ProblemDecomposition",
        "module": "Ideas.Service.ProblemDecomposition",
        "name": "Ok",
        "normalized": "",
        "package": "ideas",
        "partial": "Ok",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-ProblemDecomposition.html#v:problemDecomposition",
      "description": {
        "fct-module": "Ideas.Service.ProblemDecomposition",
        "fct-package": "ideas",
        "fct-signature": "Maybe Id -\u003e State a -\u003e Maybe (Answer a) -\u003e Either String (Reply a)",
        "fct-source": "src/Ideas-Service-ProblemDecomposition.html#problemDecomposition",
        "fct-type": "function",
        "title": "problemDecomposition"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service ProblemDecomposition",
        "module": "Ideas.Service.ProblemDecomposition",
        "name": "problemDecomposition",
        "normalized": "Maybe Id-\u003eState a-\u003eMaybe(Answer a)-\u003eEither String(Reply a)",
        "package": "ideas",
        "partial": "Decomposition",
        "signature": "Maybe Id-\u003eState a-\u003eMaybe(Answer a)-\u003eEither String(Reply a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Request.html#",
      "description": {
        "fct-module": "Ideas.Service.Request",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Service-Request.html",
        "fct-type": "module",
        "title": "Request"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Request",
        "module": "Ideas.Service.Request",
        "name": "Request",
        "normalized": "",
        "package": "ideas",
        "partial": "Request",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Request.html#t:DataFormat",
      "description": {
        "fct-module": "Ideas.Service.Request",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Service-Request.html#DataFormat",
        "fct-type": "data",
        "title": "DataFormat"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Request",
        "module": "Ideas.Service.Request",
        "name": "DataFormat",
        "normalized": "",
        "package": "ideas",
        "partial": "Data Format",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Request.html#t:Encoding",
      "description": {
        "fct-module": "Ideas.Service.Request",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Service-Request.html#Encoding",
        "fct-type": "data",
        "title": "Encoding"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Request",
        "module": "Ideas.Service.Request",
        "name": "Encoding",
        "normalized": "",
        "package": "ideas",
        "partial": "Encoding",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Request.html#t:Request",
      "description": {
        "fct-module": "Ideas.Service.Request",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Service-Request.html#Request",
        "fct-type": "data",
        "title": "Request"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Request",
        "module": "Ideas.Service.Request",
        "name": "Request",
        "normalized": "",
        "package": "ideas",
        "partial": "Request",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Request.html#v:HTMLEncoding",
      "description": {
        "fct-module": "Ideas.Service.Request",
        "fct-package": "ideas",
        "fct-signature": "HTMLEncoding",
        "fct-source": "src/Ideas-Service-Request.html#Encoding",
        "fct-type": "function",
        "title": "HTMLEncoding"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Request",
        "module": "Ideas.Service.Request",
        "name": "HTMLEncoding",
        "normalized": "",
        "package": "ideas",
        "partial": "HTMLEncoding",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Request.html#v:JSON",
      "description": {
        "fct-module": "Ideas.Service.Request",
        "fct-package": "ideas",
        "fct-signature": "JSON",
        "fct-source": "src/Ideas-Service-Request.html#DataFormat",
        "fct-type": "function",
        "title": "JSON"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Request",
        "module": "Ideas.Service.Request",
        "name": "JSON",
        "normalized": "",
        "package": "ideas",
        "partial": "JSON",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Request.html#v:OpenMath",
      "description": {
        "fct-module": "Ideas.Service.Request",
        "fct-package": "ideas",
        "fct-signature": "OpenMath",
        "fct-source": "src/Ideas-Service-Request.html#Encoding",
        "fct-type": "function",
        "title": "OpenMath"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Request",
        "module": "Ideas.Service.Request",
        "name": "OpenMath",
        "normalized": "",
        "package": "ideas",
        "partial": "Open Math",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Request.html#v:Request",
      "description": {
        "fct-module": "Ideas.Service.Request",
        "fct-package": "ideas",
        "fct-signature": "Request",
        "fct-source": "src/Ideas-Service-Request.html#Request",
        "fct-type": "function",
        "title": "Request"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Request",
        "module": "Ideas.Service.Request",
        "name": "Request",
        "normalized": "",
        "package": "ideas",
        "partial": "Request",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Request.html#v:StringEncoding",
      "description": {
        "fct-module": "Ideas.Service.Request",
        "fct-package": "ideas",
        "fct-signature": "StringEncoding",
        "fct-source": "src/Ideas-Service-Request.html#Encoding",
        "fct-type": "function",
        "title": "StringEncoding"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Request",
        "module": "Ideas.Service.Request",
        "name": "StringEncoding",
        "normalized": "",
        "package": "ideas",
        "partial": "String Encoding",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Request.html#v:XML",
      "description": {
        "fct-module": "Ideas.Service.Request",
        "fct-package": "ideas",
        "fct-signature": "XML",
        "fct-source": "src/Ideas-Service-Request.html#DataFormat",
        "fct-type": "function",
        "title": "XML"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Request",
        "module": "Ideas.Service.Request",
        "name": "XML",
        "normalized": "",
        "package": "ideas",
        "partial": "XML",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Request.html#v:dataformat",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Service.Request",
        "fct-package": "ideas",
        "fct-signature": "DataFormat",
        "fct-source": "src/Ideas-Service-Request.html#Request",
        "fct-type": "function",
        "title": "dataformat"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Request",
        "module": "Ideas.Service.Request",
        "name": "dataformat",
        "normalized": "",
        "package": "ideas",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Request.html#v:discoverDataFormat",
      "description": {
        "fct-module": "Ideas.Service.Request",
        "fct-package": "ideas",
        "fct-signature": "String -\u003e m DataFormat",
        "fct-source": "src/Ideas-Service-Request.html#discoverDataFormat",
        "fct-type": "function",
        "title": "discoverDataFormat"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Request",
        "module": "Ideas.Service.Request",
        "name": "discoverDataFormat",
        "normalized": "String-\u003ea DataFormat",
        "package": "ideas",
        "partial": "Data Format",
        "signature": "String-\u003em DataFormat"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Request.html#v:encoding",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Service.Request",
        "fct-package": "ideas",
        "fct-signature": "Maybe Encoding",
        "fct-source": "src/Ideas-Service-Request.html#Request",
        "fct-type": "function",
        "title": "encoding"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Request",
        "module": "Ideas.Service.Request",
        "name": "encoding",
        "normalized": "",
        "package": "ideas",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Request.html#v:exerciseId",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Service.Request",
        "fct-package": "ideas",
        "fct-signature": "Maybe Id",
        "fct-source": "src/Ideas-Service-Request.html#Request",
        "fct-type": "function",
        "title": "exerciseId"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Request",
        "module": "Ideas.Service.Request",
        "name": "exerciseId",
        "normalized": "",
        "package": "ideas",
        "partial": "Id",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Request.html#v:readEncoding",
      "description": {
        "fct-module": "Ideas.Service.Request",
        "fct-package": "ideas",
        "fct-signature": "String -\u003e m Encoding",
        "fct-source": "src/Ideas-Service-Request.html#readEncoding",
        "fct-type": "function",
        "title": "readEncoding"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Request",
        "module": "Ideas.Service.Request",
        "name": "readEncoding",
        "normalized": "String-\u003ea Encoding",
        "package": "ideas",
        "partial": "Encoding",
        "signature": "String-\u003em Encoding"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Request.html#v:service",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Service.Request",
        "fct-package": "ideas",
        "fct-signature": "String",
        "fct-source": "src/Ideas-Service-Request.html#Request",
        "fct-type": "function",
        "title": "service"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Request",
        "module": "Ideas.Service.Request",
        "name": "service",
        "normalized": "",
        "package": "ideas",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Request.html#v:source",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Service.Request",
        "fct-package": "ideas",
        "fct-signature": "Maybe String",
        "fct-source": "src/Ideas-Service-Request.html#Request",
        "fct-type": "function",
        "title": "source"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Request",
        "module": "Ideas.Service.Request",
        "name": "source",
        "normalized": "",
        "package": "ideas",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-ServiceList.html#",
      "description": {
        "fct-module": "Ideas.Service.ServiceList",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Service-ServiceList.html",
        "fct-type": "module",
        "title": "ServiceList"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service ServiceList",
        "module": "Ideas.Service.ServiceList",
        "name": "ServiceList",
        "normalized": "",
        "package": "ideas",
        "partial": "Service List",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-ServiceList.html#v:metaServiceList",
      "description": {
        "fct-module": "Ideas.Service.ServiceList",
        "fct-package": "ideas",
        "fct-signature": "DomainReasoner -\u003e [Service]",
        "fct-source": "src/Ideas-Service-ServiceList.html#metaServiceList",
        "fct-type": "function",
        "title": "metaServiceList"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service ServiceList",
        "module": "Ideas.Service.ServiceList",
        "name": "metaServiceList",
        "normalized": "DomainReasoner-\u003e[Service]",
        "package": "ideas",
        "partial": "Service List",
        "signature": "DomainReasoner-\u003e[Service]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-ServiceList.html#v:serviceList",
      "description": {
        "fct-module": "Ideas.Service.ServiceList",
        "fct-package": "ideas",
        "fct-signature": "[Service]",
        "fct-source": "src/Ideas-Service-ServiceList.html#serviceList",
        "fct-type": "function",
        "title": "serviceList"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service ServiceList",
        "module": "Ideas.Service.ServiceList",
        "name": "serviceList",
        "normalized": "[Service]",
        "package": "ideas",
        "partial": "List",
        "signature": "[Service]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-State.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eThe information maintained for a learner trying to complete a\n derivation.\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "Ideas.Service.State",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Service-State.html",
        "fct-type": "module",
        "title": "State"
      },
      "index": {
        "description": "The information maintained for learner trying to complete derivation",
        "hierarchy": "Ideas Service State",
        "module": "Ideas.Service.State",
        "name": "State",
        "normalized": "",
        "package": "ideas",
        "partial": "State",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-State.html#t:State",
      "description": {
        "fct-module": "Ideas.Service.State",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Service-State.html#State",
        "fct-type": "data",
        "title": "State"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service State",
        "module": "Ideas.Service.State",
        "name": "State",
        "normalized": "",
        "package": "ideas",
        "partial": "State",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-State.html#v:emptyState",
      "description": {
        "fct-module": "Ideas.Service.State",
        "fct-package": "ideas",
        "fct-signature": "Exercise a -\u003e a -\u003e State a",
        "fct-source": "src/Ideas-Service-State.html#emptyState",
        "fct-type": "function",
        "title": "emptyState"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service State",
        "module": "Ideas.Service.State",
        "name": "emptyState",
        "normalized": "Exercise a-\u003ea-\u003eState a",
        "package": "ideas",
        "partial": "State",
        "signature": "Exercise a-\u003ea-\u003eState a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-State.html#v:emptyStateContext",
      "description": {
        "fct-module": "Ideas.Service.State",
        "fct-package": "ideas",
        "fct-signature": "Exercise a -\u003e Context a -\u003e State a",
        "fct-source": "src/Ideas-Service-State.html#emptyStateContext",
        "fct-type": "function",
        "title": "emptyStateContext"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service State",
        "module": "Ideas.Service.State",
        "name": "emptyStateContext",
        "normalized": "Exercise a-\u003eContext a-\u003eState a",
        "package": "ideas",
        "partial": "State Context",
        "signature": "Exercise a-\u003eContext a-\u003eState a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-State.html#v:exercise",
      "description": {
        "fct-module": "Ideas.Service.State",
        "fct-package": "ideas",
        "fct-signature": "State a -\u003e Exercise a",
        "fct-source": "src/Ideas-Service-State.html#exercise",
        "fct-type": "function",
        "title": "exercise"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service State",
        "module": "Ideas.Service.State",
        "name": "exercise",
        "normalized": "State a-\u003eExercise a",
        "package": "ideas",
        "partial": "",
        "signature": "State a-\u003eExercise a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-State.html#v:makeNoState",
      "description": {
        "fct-module": "Ideas.Service.State",
        "fct-package": "ideas",
        "fct-signature": "Exercise a -\u003e Context a -\u003e State a",
        "fct-source": "src/Ideas-Service-State.html#makeNoState",
        "fct-type": "function",
        "title": "makeNoState"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service State",
        "module": "Ideas.Service.State",
        "name": "makeNoState",
        "normalized": "Exercise a-\u003eContext a-\u003eState a",
        "package": "ideas",
        "partial": "No State",
        "signature": "Exercise a-\u003eContext a-\u003eState a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-State.html#v:makeState",
      "description": {
        "fct-module": "Ideas.Service.State",
        "fct-package": "ideas",
        "fct-signature": "Exercise a -\u003e [Prefix (Context a)] -\u003e Context a -\u003e State a",
        "fct-source": "src/Ideas-Service-State.html#makeState",
        "fct-type": "function",
        "title": "makeState"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service State",
        "module": "Ideas.Service.State",
        "name": "makeState",
        "normalized": "Exercise a-\u003e[Prefix(Context a)]-\u003eContext a-\u003eState a",
        "package": "ideas",
        "partial": "State",
        "signature": "Exercise a-\u003e[Prefix(Context a)]-\u003eContext a-\u003eState a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-State.html#v:stateContext",
      "description": {
        "fct-module": "Ideas.Service.State",
        "fct-package": "ideas",
        "fct-signature": "State a -\u003e Context a",
        "fct-source": "src/Ideas-Service-State.html#stateContext",
        "fct-type": "function",
        "title": "stateContext"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service State",
        "module": "Ideas.Service.State",
        "name": "stateContext",
        "normalized": "State a-\u003eContext a",
        "package": "ideas",
        "partial": "Context",
        "signature": "State a-\u003eContext a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-State.html#v:stateLabels",
      "description": {
        "fct-module": "Ideas.Service.State",
        "fct-package": "ideas",
        "fct-signature": "State a -\u003e [[LabelInfo]]",
        "fct-source": "src/Ideas-Service-State.html#stateLabels",
        "fct-type": "function",
        "title": "stateLabels"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service State",
        "module": "Ideas.Service.State",
        "name": "stateLabels",
        "normalized": "State a-\u003e[[LabelInfo]]",
        "package": "ideas",
        "partial": "Labels",
        "signature": "State a-\u003e[[LabelInfo]]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-State.html#v:statePrefixes",
      "description": {
        "fct-module": "Ideas.Service.State",
        "fct-package": "ideas",
        "fct-signature": "State a -\u003e [Prefix (Context a)]",
        "fct-source": "src/Ideas-Service-State.html#statePrefixes",
        "fct-type": "function",
        "title": "statePrefixes"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service State",
        "module": "Ideas.Service.State",
        "name": "statePrefixes",
        "normalized": "State a-\u003e[Prefix(Context a)]",
        "package": "ideas",
        "partial": "Prefixes",
        "signature": "State a-\u003e[Prefix(Context a)]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-State.html#v:stateTerm",
      "description": {
        "fct-module": "Ideas.Service.State",
        "fct-package": "ideas",
        "fct-signature": "State a -\u003e a",
        "fct-source": "src/Ideas-Service-State.html#stateTerm",
        "fct-type": "function",
        "title": "stateTerm"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service State",
        "module": "Ideas.Service.State",
        "name": "stateTerm",
        "normalized": "State a-\u003ea",
        "package": "ideas",
        "partial": "Term",
        "signature": "State a-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Submit.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eDiagnose a term submitted by a student. Deprecated (see diagnose service).\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "Ideas.Service.Submit",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Service-Submit.html",
        "fct-type": "module",
        "title": "Submit"
      },
      "index": {
        "description": "Diagnose term submitted by student Deprecated see diagnose service",
        "hierarchy": "Ideas Service Submit",
        "module": "Ideas.Service.Submit",
        "name": "Submit",
        "normalized": "",
        "package": "ideas",
        "partial": "Submit",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Submit.html#t:Result",
      "description": {
        "fct-module": "Ideas.Service.Submit",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Service-Submit.html#Result",
        "fct-type": "data",
        "title": "Result"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Submit",
        "module": "Ideas.Service.Submit",
        "name": "Result",
        "normalized": "",
        "package": "ideas",
        "partial": "Result",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Submit.html#v:Buggy",
      "description": {
        "fct-module": "Ideas.Service.Submit",
        "fct-package": "ideas",
        "fct-signature": "Buggy [Rule (Context a)]",
        "fct-source": "src/Ideas-Service-Submit.html#Result",
        "fct-type": "function",
        "title": "Buggy"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Submit",
        "module": "Ideas.Service.Submit",
        "name": "Buggy",
        "normalized": "Buggy[Rule(Context a)]",
        "package": "ideas",
        "partial": "Buggy",
        "signature": "Buggy[Rule(Context a)]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Submit.html#v:Detour",
      "description": {
        "fct-module": "Ideas.Service.Submit",
        "fct-package": "ideas",
        "fct-signature": "Detour [Rule (Context a)] (State a)",
        "fct-source": "src/Ideas-Service-Submit.html#Result",
        "fct-type": "function",
        "title": "Detour"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Submit",
        "module": "Ideas.Service.Submit",
        "name": "Detour",
        "normalized": "Detour[Rule(Context a)](State a)",
        "package": "ideas",
        "partial": "Detour",
        "signature": "Detour[Rule(Context a)](State a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Submit.html#v:NotEquivalent",
      "description": {
        "fct-module": "Ideas.Service.Submit",
        "fct-package": "ideas",
        "fct-signature": "NotEquivalent",
        "fct-source": "src/Ideas-Service-Submit.html#Result",
        "fct-type": "function",
        "title": "NotEquivalent"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Submit",
        "module": "Ideas.Service.Submit",
        "name": "NotEquivalent",
        "normalized": "",
        "package": "ideas",
        "partial": "Not Equivalent",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Submit.html#v:Ok",
      "description": {
        "fct-module": "Ideas.Service.Submit",
        "fct-package": "ideas",
        "fct-signature": "Ok [Rule (Context a)] (State a)",
        "fct-source": "src/Ideas-Service-Submit.html#Result",
        "fct-type": "function",
        "title": "Ok"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Submit",
        "module": "Ideas.Service.Submit",
        "name": "Ok",
        "normalized": "Ok[Rule(Context a)](State a)",
        "package": "ideas",
        "partial": "Ok",
        "signature": "Ok[Rule(Context a)](State a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Submit.html#v:Unknown",
      "description": {
        "fct-module": "Ideas.Service.Submit",
        "fct-package": "ideas",
        "fct-signature": "Unknown (State a)",
        "fct-source": "src/Ideas-Service-Submit.html#Result",
        "fct-type": "function",
        "title": "Unknown"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Submit",
        "module": "Ideas.Service.Submit",
        "name": "Unknown",
        "normalized": "",
        "package": "ideas",
        "partial": "Unknown",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Submit.html#v:submit",
      "description": {
        "fct-module": "Ideas.Service.Submit",
        "fct-package": "ideas",
        "fct-signature": "State a -\u003e Context a -\u003e Result a",
        "fct-source": "src/Ideas-Service-Submit.html#submit",
        "fct-type": "function",
        "title": "submit"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Submit",
        "module": "Ideas.Service.Submit",
        "name": "submit",
        "normalized": "State a-\u003eContext a-\u003eResult a",
        "package": "ideas",
        "partial": "",
        "signature": "State a-\u003eContext a-\u003eResult a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Types.html#",
      "description": {
        "fct-module": "Ideas.Service.Types",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Service-Types.html",
        "fct-type": "module",
        "title": "Types"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Types",
        "module": "Ideas.Service.Types",
        "name": "Types",
        "normalized": "",
        "package": "ideas",
        "partial": "Types",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Types.html#t:Const",
      "description": {
        "fct-module": "Ideas.Service.Types",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Service-Types.html#Const",
        "fct-type": "data",
        "title": "Const"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Types",
        "module": "Ideas.Service.Types",
        "name": "Const",
        "normalized": "",
        "package": "ideas",
        "partial": "Const",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Types.html#t:Equal",
      "description": {
        "fct-module": "Ideas.Service.Types",
        "fct-package": "ideas",
        "fct-signature": "class",
        "fct-source": "src/Ideas-Service-Types.html#Equal",
        "fct-type": "class",
        "title": "Equal"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Types",
        "module": "Ideas.Service.Types",
        "name": "Equal",
        "normalized": "",
        "package": "ideas",
        "partial": "Equal",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Types.html#t:Service",
      "description": {
        "fct-module": "Ideas.Service.Types",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Service-Types.html#Service",
        "fct-type": "data",
        "title": "Service"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Types",
        "module": "Ideas.Service.Types",
        "name": "Service",
        "normalized": "",
        "package": "ideas",
        "partial": "Service",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Types.html#t:ShowF",
      "description": {
        "fct-module": "Ideas.Service.Types",
        "fct-package": "ideas",
        "fct-signature": "class",
        "fct-source": "src/Ideas-Service-Types.html#ShowF",
        "fct-type": "class",
        "title": "ShowF"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Types",
        "module": "Ideas.Service.Types",
        "name": "ShowF",
        "normalized": "",
        "package": "ideas",
        "partial": "Show",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Types.html#t:Type",
      "description": {
        "fct-module": "Ideas.Service.Types",
        "fct-package": "ideas",
        "fct-signature": "type",
        "fct-source": "src/Ideas-Service-Types.html#Type",
        "fct-type": "type",
        "title": "Type"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Types",
        "module": "Ideas.Service.Types",
        "name": "Type",
        "normalized": "",
        "package": "ideas",
        "partial": "Type",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Types.html#t:TypeRep",
      "description": {
        "fct-module": "Ideas.Service.Types",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Service-Types.html#TypeRep",
        "fct-type": "data",
        "title": "TypeRep"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Types",
        "module": "Ideas.Service.Types",
        "name": "TypeRep",
        "normalized": "",
        "package": "ideas",
        "partial": "Type Rep",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Types.html#t:Typed",
      "description": {
        "fct-module": "Ideas.Service.Types",
        "fct-package": "ideas",
        "fct-signature": "class",
        "fct-source": "src/Ideas-Service-Types.html#Typed",
        "fct-type": "class",
        "title": "Typed"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Types",
        "module": "Ideas.Service.Types",
        "name": "Typed",
        "normalized": "",
        "package": "ideas",
        "partial": "Typed",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Types.html#t:TypedValue",
      "description": {
        "fct-module": "Ideas.Service.Types",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Service-Types.html#TypedValue",
        "fct-type": "data",
        "title": "TypedValue"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Types",
        "module": "Ideas.Service.Types",
        "name": "TypedValue",
        "normalized": "",
        "package": "ideas",
        "partial": "Typed Value",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Types.html#v::-124-:",
      "description": {
        "fct-module": "Ideas.Service.Types",
        "fct-package": "ideas",
        "fct-signature": "TypeRep f t1 -\u003e TypeRep f t2 -\u003e TypeRep f (Either t1 t2)",
        "fct-source": "src/Ideas-Service-Types.html#TypeRep",
        "fct-type": "function",
        "title": ":|:"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Types",
        "module": "Ideas.Service.Types",
        "name": ":|:",
        "normalized": "TypeRep a b-\u003eTypeRep a b-\u003eTypeRep a(Either b b)",
        "package": "ideas",
        "partial": "",
        "signature": "TypeRep f t-\u003eTypeRep f t-\u003eTypeRep f(Either t t)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Types.html#v::-45--62-",
      "description": {
        "fct-module": "Ideas.Service.Types",
        "fct-package": "ideas",
        "fct-signature": "TypeRep f t1 -\u003e TypeRep f t2 -\u003e TypeRep f (t1 -\u003e t2)",
        "fct-source": "src/Ideas-Service-Types.html#TypeRep",
        "fct-type": "function",
        "title": ":-\u003e"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Types",
        "module": "Ideas.Service.Types",
        "name": ":-\u003e",
        "normalized": "TypeRep a b-\u003eTypeRep a b-\u003eTypeRep a(b-\u003eb)",
        "package": "ideas",
        "partial": "",
        "signature": "TypeRep f t-\u003eTypeRep f t-\u003eTypeRep f(t-\u003et)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Types.html#v::::",
      "description": {
        "fct-module": "Ideas.Service.Types",
        "fct-package": "ideas",
        "fct-signature": "t -\u003e f t -\u003e TypedValue f",
        "fct-source": "src/Ideas-Service-Types.html#TypedValue",
        "fct-type": "function",
        "title": ":::"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Types",
        "module": "Ideas.Service.Types",
        "name": ":::",
        "normalized": "a-\u003eb a-\u003eTypedValue b",
        "package": "ideas",
        "partial": "",
        "signature": "t-\u003ef t-\u003eTypedValue f"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Types.html#v:Bool",
      "description": {
        "fct-module": "Ideas.Service.Types",
        "fct-package": "ideas",
        "fct-signature": "Const a Bool",
        "fct-source": "src/Ideas-Service-Types.html#Const",
        "fct-type": "function",
        "title": "Bool"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Types",
        "module": "Ideas.Service.Types",
        "name": "Bool",
        "normalized": "",
        "package": "ideas",
        "partial": "Bool",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Types.html#v:Const",
      "description": {
        "fct-module": "Ideas.Service.Types",
        "fct-package": "ideas",
        "fct-signature": "f t -\u003e TypeRep f t",
        "fct-source": "src/Ideas-Service-Types.html#TypeRep",
        "fct-type": "function",
        "title": "Const"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Types",
        "module": "Ideas.Service.Types",
        "name": "Const",
        "normalized": "a b-\u003eTypeRep a b",
        "package": "ideas",
        "partial": "Const",
        "signature": "f t-\u003eTypeRep f t"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Types.html#v:Context",
      "description": {
        "fct-module": "Ideas.Service.Types",
        "fct-package": "ideas",
        "fct-signature": "Const a (Context a)",
        "fct-source": "src/Ideas-Service-Types.html#Const",
        "fct-type": "function",
        "title": "Context"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Types",
        "module": "Ideas.Service.Types",
        "name": "Context",
        "normalized": "",
        "package": "ideas",
        "partial": "Context",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Types.html#v:Environment",
      "description": {
        "fct-module": "Ideas.Service.Types",
        "fct-package": "ideas",
        "fct-signature": "Const a Environment",
        "fct-source": "src/Ideas-Service-Types.html#Const",
        "fct-type": "function",
        "title": "Environment"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Types",
        "module": "Ideas.Service.Types",
        "name": "Environment",
        "normalized": "",
        "package": "ideas",
        "partial": "Environment",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Types.html#v:Exercise",
      "description": {
        "fct-module": "Ideas.Service.Types",
        "fct-package": "ideas",
        "fct-signature": "Const a (Exercise a)",
        "fct-source": "src/Ideas-Service-Types.html#Const",
        "fct-type": "function",
        "title": "Exercise"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Types",
        "module": "Ideas.Service.Types",
        "name": "Exercise",
        "normalized": "",
        "package": "ideas",
        "partial": "Exercise",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Types.html#v:Id",
      "description": {
        "fct-module": "Ideas.Service.Types",
        "fct-package": "ideas",
        "fct-signature": "Const a Id",
        "fct-source": "src/Ideas-Service-Types.html#Const",
        "fct-type": "function",
        "title": "Id"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Types",
        "module": "Ideas.Service.Types",
        "name": "Id",
        "normalized": "",
        "package": "ideas",
        "partial": "Id",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Types.html#v:Int",
      "description": {
        "fct-module": "Ideas.Service.Types",
        "fct-package": "ideas",
        "fct-signature": "Const a Int",
        "fct-source": "src/Ideas-Service-Types.html#Const",
        "fct-type": "function",
        "title": "Int"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Types",
        "module": "Ideas.Service.Types",
        "name": "Int",
        "normalized": "",
        "package": "ideas",
        "partial": "Int",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Types.html#v:Iso",
      "description": {
        "fct-module": "Ideas.Service.Types",
        "fct-package": "ideas",
        "fct-signature": "Isomorphism t1 t2 -\u003e TypeRep f t1 -\u003e TypeRep f t2",
        "fct-source": "src/Ideas-Service-Types.html#TypeRep",
        "fct-type": "function",
        "title": "Iso"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Types",
        "module": "Ideas.Service.Types",
        "name": "Iso",
        "normalized": "Isomorphism a a-\u003eTypeRep b a-\u003eTypeRep b a",
        "package": "ideas",
        "partial": "Iso",
        "signature": "Isomorphism t t-\u003eTypeRep f t-\u003eTypeRep f t"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Types.html#v:List",
      "description": {
        "fct-module": "Ideas.Service.Types",
        "fct-package": "ideas",
        "fct-signature": "TypeRep f t -\u003e TypeRep f [t]",
        "fct-source": "src/Ideas-Service-Types.html#TypeRep",
        "fct-type": "function",
        "title": "List"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Types",
        "module": "Ideas.Service.Types",
        "name": "List",
        "normalized": "TypeRep a b-\u003eTypeRep a[b]",
        "package": "ideas",
        "partial": "List",
        "signature": "TypeRep f t-\u003eTypeRep f[t]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Types.html#v:Location",
      "description": {
        "fct-module": "Ideas.Service.Types",
        "fct-package": "ideas",
        "fct-signature": "Const a Location",
        "fct-source": "src/Ideas-Service-Types.html#Const",
        "fct-type": "function",
        "title": "Location"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Types",
        "module": "Ideas.Service.Types",
        "name": "Location",
        "normalized": "",
        "package": "ideas",
        "partial": "Location",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Types.html#v:Pair",
      "description": {
        "fct-module": "Ideas.Service.Types",
        "fct-package": "ideas",
        "fct-signature": "TypeRep f t1 -\u003e TypeRep f t2 -\u003e TypeRep f (t1, t2)",
        "fct-source": "src/Ideas-Service-Types.html#TypeRep",
        "fct-type": "function",
        "title": "Pair"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Types",
        "module": "Ideas.Service.Types",
        "name": "Pair",
        "normalized": "TypeRep a b-\u003eTypeRep a b-\u003eTypeRep a(b,b)",
        "package": "ideas",
        "partial": "Pair",
        "signature": "TypeRep f t-\u003eTypeRep f t-\u003eTypeRep f(t,t)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Types.html#v:Rule",
      "description": {
        "fct-module": "Ideas.Service.Types",
        "fct-package": "ideas",
        "fct-signature": "Const a (Rule (Context a))",
        "fct-source": "src/Ideas-Service-Types.html#Const",
        "fct-type": "function",
        "title": "Rule"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Types",
        "module": "Ideas.Service.Types",
        "name": "Rule",
        "normalized": "",
        "package": "ideas",
        "partial": "Rule",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Types.html#v:Script",
      "description": {
        "fct-module": "Ideas.Service.Types",
        "fct-package": "ideas",
        "fct-signature": "Const a Script",
        "fct-source": "src/Ideas-Service-Types.html#Const",
        "fct-type": "function",
        "title": "Script"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Types",
        "module": "Ideas.Service.Types",
        "name": "Script",
        "normalized": "",
        "package": "ideas",
        "partial": "Script",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Types.html#v:Service",
      "description": {
        "fct-module": "Ideas.Service.Types",
        "fct-package": "ideas",
        "fct-signature": "Const a Service",
        "fct-source": "src/Ideas-Service-Types.html#Const",
        "fct-type": "function",
        "title": "Service"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Types",
        "module": "Ideas.Service.Types",
        "name": "Service",
        "normalized": "",
        "package": "ideas",
        "partial": "Service",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Types.html#v:SomeExercise",
      "description": {
        "fct-module": "Ideas.Service.Types",
        "fct-package": "ideas",
        "fct-signature": "Const a (Some Exercise)",
        "fct-source": "src/Ideas-Service-Types.html#Const",
        "fct-type": "function",
        "title": "SomeExercise"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Types",
        "module": "Ideas.Service.Types",
        "name": "SomeExercise",
        "normalized": "",
        "package": "ideas",
        "partial": "Some Exercise",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Types.html#v:State",
      "description": {
        "fct-module": "Ideas.Service.Types",
        "fct-package": "ideas",
        "fct-signature": "Const a (State a)",
        "fct-source": "src/Ideas-Service-Types.html#Const",
        "fct-type": "function",
        "title": "State"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Types",
        "module": "Ideas.Service.Types",
        "name": "State",
        "normalized": "",
        "package": "ideas",
        "partial": "State",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Types.html#v:StdGen",
      "description": {
        "fct-module": "Ideas.Service.Types",
        "fct-package": "ideas",
        "fct-signature": "Const a StdGen",
        "fct-source": "src/Ideas-Service-Types.html#Const",
        "fct-type": "function",
        "title": "StdGen"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Types",
        "module": "Ideas.Service.Types",
        "name": "StdGen",
        "normalized": "",
        "package": "ideas",
        "partial": "Std Gen",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Types.html#v:StratCfg",
      "description": {
        "fct-module": "Ideas.Service.Types",
        "fct-package": "ideas",
        "fct-signature": "Const a StrategyConfiguration",
        "fct-source": "src/Ideas-Service-Types.html#Const",
        "fct-type": "function",
        "title": "StratCfg"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Types",
        "module": "Ideas.Service.Types",
        "name": "StratCfg",
        "normalized": "",
        "package": "ideas",
        "partial": "Strat Cfg",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Types.html#v:Strategy",
      "description": {
        "fct-module": "Ideas.Service.Types",
        "fct-package": "ideas",
        "fct-signature": "Const a (Strategy (Context a))",
        "fct-source": "src/Ideas-Service-Types.html#Const",
        "fct-type": "function",
        "title": "Strategy"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Types",
        "module": "Ideas.Service.Types",
        "name": "Strategy",
        "normalized": "",
        "package": "ideas",
        "partial": "Strategy",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Types.html#v:String",
      "description": {
        "fct-module": "Ideas.Service.Types",
        "fct-package": "ideas",
        "fct-signature": "Const a String",
        "fct-source": "src/Ideas-Service-Types.html#Const",
        "fct-type": "function",
        "title": "String"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Types",
        "module": "Ideas.Service.Types",
        "name": "String",
        "normalized": "",
        "package": "ideas",
        "partial": "String",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Types.html#v:Tag",
      "description": {
        "fct-module": "Ideas.Service.Types",
        "fct-package": "ideas",
        "fct-signature": "String -\u003e TypeRep f t1 -\u003e TypeRep f t1",
        "fct-source": "src/Ideas-Service-Types.html#TypeRep",
        "fct-type": "function",
        "title": "Tag"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Types",
        "module": "Ideas.Service.Types",
        "name": "Tag",
        "normalized": "String-\u003eTypeRep a b-\u003eTypeRep a b",
        "package": "ideas",
        "partial": "Tag",
        "signature": "String-\u003eTypeRep f t-\u003eTypeRep f t"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Types.html#v:Text",
      "description": {
        "fct-module": "Ideas.Service.Types",
        "fct-package": "ideas",
        "fct-signature": "Const a Text",
        "fct-source": "src/Ideas-Service-Types.html#Const",
        "fct-type": "function",
        "title": "Text"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Types",
        "module": "Ideas.Service.Types",
        "name": "Text",
        "normalized": "",
        "package": "ideas",
        "partial": "Text",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Types.html#v:Unit",
      "description": {
        "fct-module": "Ideas.Service.Types",
        "fct-package": "ideas",
        "fct-signature": "TypeRep f ()",
        "fct-source": "src/Ideas-Service-Types.html#TypeRep",
        "fct-type": "function",
        "title": "Unit"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Types",
        "module": "Ideas.Service.Types",
        "name": "Unit",
        "normalized": "TypeRep a()",
        "package": "ideas",
        "partial": "Unit",
        "signature": "TypeRep f()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Types.html#v:deprecate",
      "description": {
        "fct-module": "Ideas.Service.Types",
        "fct-package": "ideas",
        "fct-signature": "Service -\u003e Service",
        "fct-source": "src/Ideas-Service-Types.html#deprecate",
        "fct-type": "function",
        "title": "deprecate"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Types",
        "module": "Ideas.Service.Types",
        "name": "deprecate",
        "normalized": "Service-\u003eService",
        "package": "ideas",
        "partial": "",
        "signature": "Service-\u003eService"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Types.html#v:equal",
      "description": {
        "fct-module": "Ideas.Service.Types",
        "fct-package": "ideas",
        "fct-signature": "f a -\u003e f b -\u003e Maybe (a -\u003e b)",
        "fct-source": "src/Ideas-Service-Types.html#equal",
        "fct-type": "method",
        "title": "equal"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Types",
        "module": "Ideas.Service.Types",
        "name": "equal",
        "normalized": "a b-\u003ea c-\u003eMaybe(b-\u003ec)",
        "package": "ideas",
        "partial": "",
        "signature": "f a-\u003ef b-\u003eMaybe(a-\u003eb)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Types.html#v:equalM",
      "description": {
        "fct-module": "Ideas.Service.Types",
        "fct-package": "ideas",
        "fct-signature": "Type a t1 -\u003e Type a t2 -\u003e m (t1 -\u003e t2)",
        "fct-source": "src/Ideas-Service-Types.html#equalM",
        "fct-type": "function",
        "title": "equalM"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Types",
        "module": "Ideas.Service.Types",
        "name": "equalM",
        "normalized": "Type a b-\u003eType a b-\u003ec(b-\u003eb)",
        "package": "ideas",
        "partial": "",
        "signature": "Type a t-\u003eType a t-\u003em(t-\u003et)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Types.html#v:makeService",
      "description": {
        "fct-module": "Ideas.Service.Types",
        "fct-package": "ideas",
        "fct-signature": "String -\u003e String -\u003e (forall a.  TypedValue (Type a)) -\u003e Service",
        "fct-source": "src/Ideas-Service-Types.html#makeService",
        "fct-type": "function",
        "title": "makeService"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Types",
        "module": "Ideas.Service.Types",
        "name": "makeService",
        "normalized": "String-\u003eString-\u003e(a b TypedValue(Type c))-\u003eService",
        "package": "ideas",
        "partial": "Service",
        "signature": "String-\u003eString-\u003e(forall a. TypedValue(Type a))-\u003eService"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Types.html#v:serviceDeprecated",
      "description": {
        "fct-module": "Ideas.Service.Types",
        "fct-package": "ideas",
        "fct-signature": "Service -\u003e Bool",
        "fct-source": "src/Ideas-Service-Types.html#serviceDeprecated",
        "fct-type": "function",
        "title": "serviceDeprecated"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Types",
        "module": "Ideas.Service.Types",
        "name": "serviceDeprecated",
        "normalized": "Service-\u003eBool",
        "package": "ideas",
        "partial": "Deprecated",
        "signature": "Service-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Types.html#v:serviceFunction",
      "description": {
        "fct-module": "Ideas.Service.Types",
        "fct-package": "ideas",
        "fct-signature": "Service -\u003e forall a.  TypedValue (Type a)",
        "fct-source": "src/Ideas-Service-Types.html#serviceFunction",
        "fct-type": "function",
        "title": "serviceFunction"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Types",
        "module": "Ideas.Service.Types",
        "name": "serviceFunction",
        "normalized": "Service-\u003ea b TypedValue(Type c)",
        "package": "ideas",
        "partial": "Function",
        "signature": "Service-\u003eforall a. TypedValue(Type a)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Types.html#v:showF",
      "description": {
        "fct-module": "Ideas.Service.Types",
        "fct-package": "ideas",
        "fct-signature": "f a -\u003e String",
        "fct-source": "src/Ideas-Service-Types.html#showF",
        "fct-type": "method",
        "title": "showF"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Types",
        "module": "Ideas.Service.Types",
        "name": "showF",
        "normalized": "a b-\u003eString",
        "package": "ideas",
        "partial": "",
        "signature": "f a-\u003eString"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Types.html#v:typeOf",
      "description": {
        "fct-module": "Ideas.Service.Types",
        "fct-package": "ideas",
        "fct-signature": "t -\u003e Type a t",
        "fct-source": "src/Ideas-Service-Types.html#typeOf",
        "fct-type": "method",
        "title": "typeOf"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Types",
        "module": "Ideas.Service.Types",
        "name": "typeOf",
        "normalized": "a-\u003eType b a",
        "package": "ideas",
        "partial": "Of",
        "signature": "t-\u003eType a t"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Types.html#v:typed",
      "description": {
        "fct-module": "Ideas.Service.Types",
        "fct-package": "ideas",
        "fct-signature": "Type a t",
        "fct-source": "src/Ideas-Service-Types.html#typed",
        "fct-type": "method",
        "title": "typed"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Types",
        "module": "Ideas.Service.Types",
        "name": "typed",
        "normalized": "",
        "package": "ideas",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Service-Types.html#v:typedList",
      "description": {
        "fct-module": "Ideas.Service.Types",
        "fct-package": "ideas",
        "fct-signature": "Type a [t]",
        "fct-source": "src/Ideas-Service-Types.html#typedList",
        "fct-type": "method",
        "title": "typedList"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Service Types",
        "module": "Ideas.Service.Types",
        "name": "typedList",
        "normalized": "Type a[b]",
        "package": "ideas",
        "partial": "List",
        "signature": "Type a[t]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-HTML.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eA minimal interface for constructing simple HTML pages\n See http:\u003cem/\u003ewww.w3.org\u003cem\u003eTR\u003c/em\u003ehtml4/\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "Ideas.Text.HTML",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Text-HTML.html",
        "fct-type": "module",
        "title": "HTML"
      },
      "index": {
        "description": "minimal interface for constructing simple HTML pages See http www.w3.org TR html4",
        "hierarchy": "Ideas Text HTML",
        "module": "Ideas.Text.HTML",
        "name": "HTML",
        "normalized": "",
        "package": "ideas",
        "partial": "HTML",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-HTML.html#t:HTMLBuilder",
      "description": {
        "fct-module": "Ideas.Text.HTML",
        "fct-package": "ideas",
        "fct-signature": "type",
        "fct-source": "src/Ideas-Text-HTML.html#HTMLBuilder",
        "fct-type": "type",
        "title": "HTMLBuilder"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text HTML",
        "module": "Ideas.Text.HTML",
        "name": "HTMLBuilder",
        "normalized": "",
        "package": "ideas",
        "partial": "HTMLBuilder",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-HTML.html#t:HTMLPage",
      "description": {
        "fct-module": "Ideas.Text.HTML",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Text-HTML.html#HTMLPage",
        "fct-type": "data",
        "title": "HTMLPage"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text HTML",
        "module": "Ideas.Text.HTML",
        "name": "HTMLPage",
        "normalized": "",
        "package": "ideas",
        "partial": "HTMLPage",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-HTML.html#v:addCSS",
      "description": {
        "fct-module": "Ideas.Text.HTML",
        "fct-package": "ideas",
        "fct-signature": "FilePath -\u003e HTMLPage -\u003e HTMLPage",
        "fct-source": "src/Ideas-Text-HTML.html#addCSS",
        "fct-type": "function",
        "title": "addCSS"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text HTML",
        "module": "Ideas.Text.HTML",
        "name": "addCSS",
        "normalized": "FilePath-\u003eHTMLPage-\u003eHTMLPage",
        "package": "ideas",
        "partial": "CSS",
        "signature": "FilePath-\u003eHTMLPage-\u003eHTMLPage"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-HTML.html#v:addScript",
      "description": {
        "fct-module": "Ideas.Text.HTML",
        "fct-package": "ideas",
        "fct-signature": "FilePath -\u003e HTMLPage -\u003e HTMLPage",
        "fct-source": "src/Ideas-Text-HTML.html#addScript",
        "fct-type": "function",
        "title": "addScript"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text HTML",
        "module": "Ideas.Text.HTML",
        "name": "addScript",
        "normalized": "FilePath-\u003eHTMLPage-\u003eHTMLPage",
        "package": "ideas",
        "partial": "Script",
        "signature": "FilePath-\u003eHTMLPage-\u003eHTMLPage"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-HTML.html#v:big",
      "description": {
        "fct-module": "Ideas.Text.HTML",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e a",
        "fct-source": "src/Ideas-Text-HTML.html#big",
        "fct-type": "function",
        "title": "big"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text HTML",
        "module": "Ideas.Text.HTML",
        "name": "big",
        "normalized": "a-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "a-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-HTML.html#v:bold",
      "description": {
        "fct-descr": "\u003cp\u003eRenders as bold text style.\n\u003c/p\u003e",
        "fct-module": "Ideas.Text.HTML",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e a",
        "fct-source": "src/Ideas-Text-HTML.html#bold",
        "fct-type": "function",
        "title": "bold"
      },
      "index": {
        "description": "Renders as bold text style",
        "hierarchy": "Ideas Text HTML",
        "module": "Ideas.Text.HTML",
        "name": "bold",
        "normalized": "a-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "a-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-HTML.html#v:br",
      "description": {
        "fct-module": "Ideas.Text.HTML",
        "fct-package": "ideas",
        "fct-signature": "a",
        "fct-source": "src/Ideas-Text-HTML.html#br",
        "fct-type": "function",
        "title": "br"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text HTML",
        "module": "Ideas.Text.HTML",
        "name": "br",
        "normalized": "",
        "package": "ideas",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-HTML.html#v:bullet",
      "description": {
        "fct-module": "Ideas.Text.HTML",
        "fct-package": "ideas",
        "fct-signature": "a",
        "fct-source": "src/Ideas-Text-HTML.html#bullet",
        "fct-type": "function",
        "title": "bullet"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text HTML",
        "module": "Ideas.Text.HTML",
        "name": "bullet",
        "normalized": "",
        "package": "ideas",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-HTML.html#v:classA",
      "description": {
        "fct-module": "Ideas.Text.HTML",
        "fct-package": "ideas",
        "fct-signature": "String -\u003e a",
        "fct-source": "src/Ideas-Text-HTML.html#classA",
        "fct-type": "function",
        "title": "classA"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text HTML",
        "module": "Ideas.Text.HTML",
        "name": "classA",
        "normalized": "String-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "String-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-HTML.html#v:divClass",
      "description": {
        "fct-module": "Ideas.Text.HTML",
        "fct-package": "ideas",
        "fct-signature": "String -\u003e a -\u003e a",
        "fct-source": "src/Ideas-Text-HTML.html#divClass",
        "fct-type": "function",
        "title": "divClass"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text HTML",
        "module": "Ideas.Text.HTML",
        "name": "divClass",
        "normalized": "String-\u003ea-\u003ea",
        "package": "ideas",
        "partial": "Class",
        "signature": "String-\u003ea-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-HTML.html#v:h1",
      "description": {
        "fct-module": "Ideas.Text.HTML",
        "fct-package": "ideas",
        "fct-signature": "String -\u003e a",
        "fct-source": "src/Ideas-Text-HTML.html#h1",
        "fct-type": "function",
        "title": "h1"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text HTML",
        "module": "Ideas.Text.HTML",
        "name": "h1",
        "normalized": "String-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "String-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-HTML.html#v:h2",
      "description": {
        "fct-module": "Ideas.Text.HTML",
        "fct-package": "ideas",
        "fct-signature": "String -\u003e a",
        "fct-source": "src/Ideas-Text-HTML.html#h2",
        "fct-type": "function",
        "title": "h2"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text HTML",
        "module": "Ideas.Text.HTML",
        "name": "h2",
        "normalized": "String-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "String-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-HTML.html#v:h3",
      "description": {
        "fct-module": "Ideas.Text.HTML",
        "fct-package": "ideas",
        "fct-signature": "String -\u003e a",
        "fct-source": "src/Ideas-Text-HTML.html#h3",
        "fct-type": "function",
        "title": "h3"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text HTML",
        "module": "Ideas.Text.HTML",
        "name": "h3",
        "normalized": "String-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "String-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-HTML.html#v:h4",
      "description": {
        "fct-module": "Ideas.Text.HTML",
        "fct-package": "ideas",
        "fct-signature": "String -\u003e a",
        "fct-source": "src/Ideas-Text-HTML.html#h4",
        "fct-type": "function",
        "title": "h4"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text HTML",
        "module": "Ideas.Text.HTML",
        "name": "h4",
        "normalized": "String-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "String-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-HTML.html#v:h5",
      "description": {
        "fct-module": "Ideas.Text.HTML",
        "fct-package": "ideas",
        "fct-signature": "String -\u003e a",
        "fct-source": "src/Ideas-Text-HTML.html#h5",
        "fct-type": "function",
        "title": "h5"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text HTML",
        "module": "Ideas.Text.HTML",
        "name": "h5",
        "normalized": "String-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "String-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-HTML.html#v:h6",
      "description": {
        "fct-module": "Ideas.Text.HTML",
        "fct-package": "ideas",
        "fct-signature": "String -\u003e a",
        "fct-source": "src/Ideas-Text-HTML.html#h6",
        "fct-type": "function",
        "title": "h6"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text HTML",
        "module": "Ideas.Text.HTML",
        "name": "h6",
        "normalized": "String-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "String-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-HTML.html#v:highlightXML",
      "description": {
        "fct-module": "Ideas.Text.HTML",
        "fct-package": "ideas",
        "fct-signature": "Bool -\u003e XML -\u003e HTMLBuilder",
        "fct-source": "src/Ideas-Text-HTML.html#highlightXML",
        "fct-type": "function",
        "title": "highlightXML"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text HTML",
        "module": "Ideas.Text.HTML",
        "name": "highlightXML",
        "normalized": "Bool-\u003eXML-\u003eHTMLBuilder",
        "package": "ideas",
        "partial": "XML",
        "signature": "Bool-\u003eXML-\u003eHTMLBuilder"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-HTML.html#v:hr",
      "description": {
        "fct-module": "Ideas.Text.HTML",
        "fct-package": "ideas",
        "fct-signature": "a",
        "fct-source": "src/Ideas-Text-HTML.html#hr",
        "fct-type": "function",
        "title": "hr"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text HTML",
        "module": "Ideas.Text.HTML",
        "name": "hr",
        "normalized": "",
        "package": "ideas",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-HTML.html#v:htmlPage",
      "description": {
        "fct-module": "Ideas.Text.HTML",
        "fct-package": "ideas",
        "fct-signature": "String -\u003e HTMLBuilder -\u003e HTMLPage",
        "fct-source": "src/Ideas-Text-HTML.html#htmlPage",
        "fct-type": "function",
        "title": "htmlPage"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text HTML",
        "module": "Ideas.Text.HTML",
        "name": "htmlPage",
        "normalized": "String-\u003eHTMLBuilder-\u003eHTMLPage",
        "package": "ideas",
        "partial": "Page",
        "signature": "String-\u003eHTMLBuilder-\u003eHTMLPage"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-HTML.html#v:idA",
      "description": {
        "fct-module": "Ideas.Text.HTML",
        "fct-package": "ideas",
        "fct-signature": "String -\u003e a",
        "fct-source": "src/Ideas-Text-HTML.html#idA",
        "fct-type": "function",
        "title": "idA"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text HTML",
        "module": "Ideas.Text.HTML",
        "name": "idA",
        "normalized": "String-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "String-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-HTML.html#v:image",
      "description": {
        "fct-module": "Ideas.Text.HTML",
        "fct-package": "ideas",
        "fct-signature": "String -\u003e a",
        "fct-source": "src/Ideas-Text-HTML.html#image",
        "fct-type": "function",
        "title": "image"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text HTML",
        "module": "Ideas.Text.HTML",
        "name": "image",
        "normalized": "String-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "String-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-HTML.html#v:italic",
      "description": {
        "fct-descr": "\u003cp\u003eRenders as italic text style.\n\u003c/p\u003e",
        "fct-module": "Ideas.Text.HTML",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e a",
        "fct-source": "src/Ideas-Text-HTML.html#italic",
        "fct-type": "function",
        "title": "italic"
      },
      "index": {
        "description": "Renders as italic text style",
        "hierarchy": "Ideas Text HTML",
        "module": "Ideas.Text.HTML",
        "name": "italic",
        "normalized": "a-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "a-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-HTML.html#v:keyValueTable",
      "description": {
        "fct-module": "Ideas.Text.HTML",
        "fct-package": "ideas",
        "fct-signature": "[(String, a)] -\u003e a",
        "fct-source": "src/Ideas-Text-HTML.html#keyValueTable",
        "fct-type": "function",
        "title": "keyValueTable"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text HTML",
        "module": "Ideas.Text.HTML",
        "name": "keyValueTable",
        "normalized": "[(String,a)]-\u003ea",
        "package": "ideas",
        "partial": "Value Table",
        "signature": "[(String,a)]-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-HTML.html#v:link",
      "description": {
        "fct-module": "Ideas.Text.HTML",
        "fct-package": "ideas",
        "fct-signature": "String -\u003e a -\u003e a",
        "fct-source": "src/Ideas-Text-HTML.html#link",
        "fct-type": "function",
        "title": "link"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text HTML",
        "module": "Ideas.Text.HTML",
        "name": "link",
        "normalized": "String-\u003ea-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "String-\u003ea-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-HTML.html#v:para",
      "description": {
        "fct-module": "Ideas.Text.HTML",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e a",
        "fct-source": "src/Ideas-Text-HTML.html#para",
        "fct-type": "function",
        "title": "para"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text HTML",
        "module": "Ideas.Text.HTML",
        "name": "para",
        "normalized": "a-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "a-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-HTML.html#v:pre",
      "description": {
        "fct-module": "Ideas.Text.HTML",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e a",
        "fct-source": "src/Ideas-Text-HTML.html#pre",
        "fct-type": "function",
        "title": "pre"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text HTML",
        "module": "Ideas.Text.HTML",
        "name": "pre",
        "normalized": "a-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "a-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-HTML.html#v:preText",
      "description": {
        "fct-module": "Ideas.Text.HTML",
        "fct-package": "ideas",
        "fct-signature": "String -\u003e a",
        "fct-source": "src/Ideas-Text-HTML.html#preText",
        "fct-type": "function",
        "title": "preText"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text HTML",
        "module": "Ideas.Text.HTML",
        "name": "preText",
        "normalized": "String-\u003ea",
        "package": "ideas",
        "partial": "Text",
        "signature": "String-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-HTML.html#v:showHTML",
      "description": {
        "fct-module": "Ideas.Text.HTML",
        "fct-package": "ideas",
        "fct-signature": "HTMLPage -\u003e String",
        "fct-source": "src/Ideas-Text-HTML.html#showHTML",
        "fct-type": "function",
        "title": "showHTML"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text HTML",
        "module": "Ideas.Text.HTML",
        "name": "showHTML",
        "normalized": "HTMLPage-\u003eString",
        "package": "ideas",
        "partial": "HTML",
        "signature": "HTMLPage-\u003eString"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-HTML.html#v:small",
      "description": {
        "fct-module": "Ideas.Text.HTML",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e a",
        "fct-source": "src/Ideas-Text-HTML.html#small",
        "fct-type": "function",
        "title": "small"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text HTML",
        "module": "Ideas.Text.HTML",
        "name": "small",
        "normalized": "a-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "a-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-HTML.html#v:space",
      "description": {
        "fct-module": "Ideas.Text.HTML",
        "fct-package": "ideas",
        "fct-signature": "a",
        "fct-source": "src/Ideas-Text-HTML.html#space",
        "fct-type": "function",
        "title": "space"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text HTML",
        "module": "Ideas.Text.HTML",
        "name": "space",
        "normalized": "",
        "package": "ideas",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-HTML.html#v:spaces",
      "description": {
        "fct-module": "Ideas.Text.HTML",
        "fct-package": "ideas",
        "fct-signature": "Int -\u003e a",
        "fct-source": "src/Ideas-Text-HTML.html#spaces",
        "fct-type": "function",
        "title": "spaces"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text HTML",
        "module": "Ideas.Text.HTML",
        "name": "spaces",
        "normalized": "Int-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "Int-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-HTML.html#v:spanClass",
      "description": {
        "fct-module": "Ideas.Text.HTML",
        "fct-package": "ideas",
        "fct-signature": "String -\u003e a -\u003e a",
        "fct-source": "src/Ideas-Text-HTML.html#spanClass",
        "fct-type": "function",
        "title": "spanClass"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text HTML",
        "module": "Ideas.Text.HTML",
        "name": "spanClass",
        "normalized": "String-\u003ea-\u003ea",
        "package": "ideas",
        "partial": "Class",
        "signature": "String-\u003ea-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-HTML.html#v:string",
      "description": {
        "fct-module": "Ideas.Text.HTML",
        "fct-package": "ideas",
        "fct-signature": "String -\u003e a",
        "fct-source": "src/Ideas-Text-XML.html#string",
        "fct-type": "function",
        "title": "string"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text HTML",
        "module": "Ideas.Text.HTML",
        "name": "string",
        "normalized": "String-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "String-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-HTML.html#v:styleA",
      "description": {
        "fct-module": "Ideas.Text.HTML",
        "fct-package": "ideas",
        "fct-signature": "String -\u003e a",
        "fct-source": "src/Ideas-Text-HTML.html#styleA",
        "fct-type": "function",
        "title": "styleA"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text HTML",
        "module": "Ideas.Text.HTML",
        "name": "styleA",
        "normalized": "String-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "String-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-HTML.html#v:table",
      "description": {
        "fct-descr": "\u003cp\u003eFirst argument indicates whether the table has a header or not\n\u003c/p\u003e",
        "fct-module": "Ideas.Text.HTML",
        "fct-package": "ideas",
        "fct-signature": "Bool -\u003e [[a]] -\u003e a",
        "fct-source": "src/Ideas-Text-HTML.html#table",
        "fct-type": "function",
        "title": "table"
      },
      "index": {
        "description": "First argument indicates whether the table has header or not",
        "hierarchy": "Ideas Text HTML",
        "module": "Ideas.Text.HTML",
        "name": "table",
        "normalized": "Bool-\u003e[[a]]-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "Bool-\u003e[[a]]-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-HTML.html#v:text",
      "description": {
        "fct-module": "Ideas.Text.HTML",
        "fct-package": "ideas",
        "fct-signature": "s -\u003e a",
        "fct-source": "src/Ideas-Text-XML.html#text",
        "fct-type": "function",
        "title": "text"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text HTML",
        "module": "Ideas.Text.HTML",
        "name": "text",
        "normalized": "a-\u003eb",
        "package": "ideas",
        "partial": "",
        "signature": "s-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-HTML.html#v:titleA",
      "description": {
        "fct-module": "Ideas.Text.HTML",
        "fct-package": "ideas",
        "fct-signature": "String -\u003e a",
        "fct-source": "src/Ideas-Text-HTML.html#titleA",
        "fct-type": "function",
        "title": "titleA"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text HTML",
        "module": "Ideas.Text.HTML",
        "name": "titleA",
        "normalized": "String-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "String-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-HTML.html#v:tt",
      "description": {
        "fct-descr": "\u003cp\u003eRenders as teletype or monospaced Ideas.Text.\n\u003c/p\u003e",
        "fct-module": "Ideas.Text.HTML",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e a",
        "fct-source": "src/Ideas-Text-HTML.html#tt",
        "fct-type": "function",
        "title": "tt"
      },
      "index": {
        "description": "Renders as teletype or monospaced Ideas.Text",
        "hierarchy": "Ideas Text HTML",
        "module": "Ideas.Text.HTML",
        "name": "tt",
        "normalized": "a-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "a-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-HTML.html#v:ttText",
      "description": {
        "fct-module": "Ideas.Text.HTML",
        "fct-package": "ideas",
        "fct-signature": "String -\u003e a",
        "fct-source": "src/Ideas-Text-HTML.html#ttText",
        "fct-type": "function",
        "title": "ttText"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text HTML",
        "module": "Ideas.Text.HTML",
        "name": "ttText",
        "normalized": "String-\u003ea",
        "package": "ideas",
        "partial": "Text",
        "signature": "String-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-HTML.html#v:ul",
      "description": {
        "fct-module": "Ideas.Text.HTML",
        "fct-package": "ideas",
        "fct-signature": "[a] -\u003e a",
        "fct-source": "src/Ideas-Text-HTML.html#ul",
        "fct-type": "function",
        "title": "ul"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text HTML",
        "module": "Ideas.Text.HTML",
        "name": "ul",
        "normalized": "[a]-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "[a]-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-JSON.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eSupport for JavaScript Object Notation (JSON) and remote procedure calls using\n JSON. JSON is a lightweight alternative for XML.\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "Ideas.Text.JSON",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Text-JSON.html",
        "fct-type": "module",
        "title": "JSON"
      },
      "index": {
        "description": "Support for JavaScript Object Notation JSON and remote procedure calls using JSON JSON is lightweight alternative for XML",
        "hierarchy": "Ideas Text JSON",
        "module": "Ideas.Text.JSON",
        "name": "JSON",
        "normalized": "",
        "package": "ideas",
        "partial": "JSON",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-JSON.html#t:InJSON",
      "description": {
        "fct-module": "Ideas.Text.JSON",
        "fct-package": "ideas",
        "fct-signature": "class",
        "fct-source": "src/Ideas-Text-JSON.html#InJSON",
        "fct-type": "class",
        "title": "InJSON"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text JSON",
        "module": "Ideas.Text.JSON",
        "name": "InJSON",
        "normalized": "",
        "package": "ideas",
        "partial": "In JSON",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-JSON.html#t:JSON",
      "description": {
        "fct-module": "Ideas.Text.JSON",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Text-JSON.html#JSON",
        "fct-type": "data",
        "title": "JSON"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text JSON",
        "module": "Ideas.Text.JSON",
        "name": "JSON",
        "normalized": "",
        "package": "ideas",
        "partial": "JSON",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-JSON.html#t:Key",
      "description": {
        "fct-module": "Ideas.Text.JSON",
        "fct-package": "ideas",
        "fct-signature": "type",
        "fct-source": "src/Ideas-Text-JSON.html#Key",
        "fct-type": "type",
        "title": "Key"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text JSON",
        "module": "Ideas.Text.JSON",
        "name": "Key",
        "normalized": "",
        "package": "ideas",
        "partial": "Key",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-JSON.html#t:Number",
      "description": {
        "fct-module": "Ideas.Text.JSON",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Text-JSON.html#Number",
        "fct-type": "data",
        "title": "Number"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text JSON",
        "module": "Ideas.Text.JSON",
        "name": "Number",
        "normalized": "",
        "package": "ideas",
        "partial": "Number",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-JSON.html#t:RPCHandler",
      "description": {
        "fct-module": "Ideas.Text.JSON",
        "fct-package": "ideas",
        "fct-signature": "type",
        "fct-source": "src/Ideas-Text-JSON.html#RPCHandler",
        "fct-type": "type",
        "title": "RPCHandler"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text JSON",
        "module": "Ideas.Text.JSON",
        "name": "RPCHandler",
        "normalized": "",
        "package": "ideas",
        "partial": "RPCHandler",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-JSON.html#v:Array",
      "description": {
        "fct-module": "Ideas.Text.JSON",
        "fct-package": "ideas",
        "fct-signature": "Array [JSON]",
        "fct-source": "src/Ideas-Text-JSON.html#JSON",
        "fct-type": "function",
        "title": "Array"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text JSON",
        "module": "Ideas.Text.JSON",
        "name": "Array",
        "normalized": "Array[JSON]",
        "package": "ideas",
        "partial": "Array",
        "signature": "Array[JSON]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-JSON.html#v:Boolean",
      "description": {
        "fct-module": "Ideas.Text.JSON",
        "fct-package": "ideas",
        "fct-signature": "Boolean Bool",
        "fct-source": "src/Ideas-Text-JSON.html#JSON",
        "fct-type": "function",
        "title": "Boolean"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text JSON",
        "module": "Ideas.Text.JSON",
        "name": "Boolean",
        "normalized": "",
        "package": "ideas",
        "partial": "Boolean",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-JSON.html#v:D",
      "description": {
        "fct-module": "Ideas.Text.JSON",
        "fct-package": "ideas",
        "fct-signature": "D Double",
        "fct-source": "src/Ideas-Text-JSON.html#Number",
        "fct-type": "function",
        "title": "D"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text JSON",
        "module": "Ideas.Text.JSON",
        "name": "D",
        "normalized": "",
        "package": "ideas",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-JSON.html#v:I",
      "description": {
        "fct-module": "Ideas.Text.JSON",
        "fct-package": "ideas",
        "fct-signature": "I Integer",
        "fct-source": "src/Ideas-Text-JSON.html#Number",
        "fct-type": "function",
        "title": "I"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text JSON",
        "module": "Ideas.Text.JSON",
        "name": "I",
        "normalized": "",
        "package": "ideas",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-JSON.html#v:Null",
      "description": {
        "fct-module": "Ideas.Text.JSON",
        "fct-package": "ideas",
        "fct-signature": "Null",
        "fct-source": "src/Ideas-Text-JSON.html#JSON",
        "fct-type": "function",
        "title": "Null"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text JSON",
        "module": "Ideas.Text.JSON",
        "name": "Null",
        "normalized": "",
        "package": "ideas",
        "partial": "Null",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-JSON.html#v:Number",
      "description": {
        "fct-module": "Ideas.Text.JSON",
        "fct-package": "ideas",
        "fct-signature": "Number Number",
        "fct-source": "src/Ideas-Text-JSON.html#JSON",
        "fct-type": "function",
        "title": "Number"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text JSON",
        "module": "Ideas.Text.JSON",
        "name": "Number",
        "normalized": "",
        "package": "ideas",
        "partial": "Number",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-JSON.html#v:Object",
      "description": {
        "fct-module": "Ideas.Text.JSON",
        "fct-package": "ideas",
        "fct-signature": "Object [(Key, JSON)]",
        "fct-source": "src/Ideas-Text-JSON.html#JSON",
        "fct-type": "function",
        "title": "Object"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text JSON",
        "module": "Ideas.Text.JSON",
        "name": "Object",
        "normalized": "Object[(Key,JSON)]",
        "package": "ideas",
        "partial": "Object",
        "signature": "Object[(Key,JSON)]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-JSON.html#v:String",
      "description": {
        "fct-module": "Ideas.Text.JSON",
        "fct-package": "ideas",
        "fct-signature": "String String",
        "fct-source": "src/Ideas-Text-JSON.html#JSON",
        "fct-type": "function",
        "title": "String"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text JSON",
        "module": "Ideas.Text.JSON",
        "name": "String",
        "normalized": "",
        "package": "ideas",
        "partial": "String",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-JSON.html#v:fromJSON",
      "description": {
        "fct-module": "Ideas.Text.JSON",
        "fct-package": "ideas",
        "fct-signature": "JSON -\u003e m a",
        "fct-source": "src/Ideas-Text-JSON.html#fromJSON",
        "fct-type": "method",
        "title": "fromJSON"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text JSON",
        "module": "Ideas.Text.JSON",
        "name": "fromJSON",
        "normalized": "JSON-\u003ea b",
        "package": "ideas",
        "partial": "JSON",
        "signature": "JSON-\u003em a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-JSON.html#v:jsonRPC",
      "description": {
        "fct-module": "Ideas.Text.JSON",
        "fct-package": "ideas",
        "fct-signature": "JSON -\u003e RPCHandler m -\u003e m RPCResponse",
        "fct-source": "src/Ideas-Text-JSON.html#jsonRPC",
        "fct-type": "function",
        "title": "jsonRPC"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text JSON",
        "module": "Ideas.Text.JSON",
        "name": "jsonRPC",
        "normalized": "JSON-\u003eRPCHandler a-\u003ea RPCResponse",
        "package": "ideas",
        "partial": "RPC",
        "signature": "JSON-\u003eRPCHandler m-\u003em RPCResponse"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-JSON.html#v:listFromJSON",
      "description": {
        "fct-module": "Ideas.Text.JSON",
        "fct-package": "ideas",
        "fct-signature": "JSON -\u003e m [a]",
        "fct-source": "src/Ideas-Text-JSON.html#listFromJSON",
        "fct-type": "method",
        "title": "listFromJSON"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text JSON",
        "module": "Ideas.Text.JSON",
        "name": "listFromJSON",
        "normalized": "JSON-\u003ea[b]",
        "package": "ideas",
        "partial": "From JSON",
        "signature": "JSON-\u003em[a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-JSON.html#v:listToJSON",
      "description": {
        "fct-module": "Ideas.Text.JSON",
        "fct-package": "ideas",
        "fct-signature": "[a] -\u003e JSON",
        "fct-source": "src/Ideas-Text-JSON.html#listToJSON",
        "fct-type": "method",
        "title": "listToJSON"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text JSON",
        "module": "Ideas.Text.JSON",
        "name": "listToJSON",
        "normalized": "[a]-\u003eJSON",
        "package": "ideas",
        "partial": "To JSON",
        "signature": "[a]-\u003eJSON"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-JSON.html#v:lookupM",
      "description": {
        "fct-module": "Ideas.Text.JSON",
        "fct-package": "ideas",
        "fct-signature": "String -\u003e JSON -\u003e m JSON",
        "fct-source": "src/Ideas-Text-JSON.html#lookupM",
        "fct-type": "function",
        "title": "lookupM"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text JSON",
        "module": "Ideas.Text.JSON",
        "name": "lookupM",
        "normalized": "String-\u003eJSON-\u003ea JSON",
        "package": "ideas",
        "partial": "",
        "signature": "String-\u003eJSON-\u003em JSON"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-JSON.html#v:parseJSON",
      "description": {
        "fct-module": "Ideas.Text.JSON",
        "fct-package": "ideas",
        "fct-signature": "String -\u003e Either String JSON",
        "fct-source": "src/Ideas-Text-JSON.html#parseJSON",
        "fct-type": "function",
        "title": "parseJSON"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text JSON",
        "module": "Ideas.Text.JSON",
        "name": "parseJSON",
        "normalized": "String-\u003eEither String JSON",
        "package": "ideas",
        "partial": "JSON",
        "signature": "String-\u003eEither String JSON"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-JSON.html#v:propEncoding",
      "description": {
        "fct-module": "Ideas.Text.JSON",
        "fct-package": "ideas",
        "fct-signature": "Property",
        "fct-source": "src/Ideas-Text-JSON.html#propEncoding",
        "fct-type": "function",
        "title": "propEncoding"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text JSON",
        "module": "Ideas.Text.JSON",
        "name": "propEncoding",
        "normalized": "",
        "package": "ideas",
        "partial": "Encoding",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-JSON.html#v:showCompact",
      "description": {
        "fct-module": "Ideas.Text.JSON",
        "fct-package": "ideas",
        "fct-signature": "JSON -\u003e String",
        "fct-source": "src/Ideas-Text-JSON.html#showCompact",
        "fct-type": "function",
        "title": "showCompact"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text JSON",
        "module": "Ideas.Text.JSON",
        "name": "showCompact",
        "normalized": "JSON-\u003eString",
        "package": "ideas",
        "partial": "Compact",
        "signature": "JSON-\u003eString"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-JSON.html#v:showPretty",
      "description": {
        "fct-module": "Ideas.Text.JSON",
        "fct-package": "ideas",
        "fct-signature": "JSON -\u003e String",
        "fct-source": "src/Ideas-Text-JSON.html#showPretty",
        "fct-type": "function",
        "title": "showPretty"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text JSON",
        "module": "Ideas.Text.JSON",
        "name": "showPretty",
        "normalized": "JSON-\u003eString",
        "package": "ideas",
        "partial": "Pretty",
        "signature": "JSON-\u003eString"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-JSON.html#v:toJSON",
      "description": {
        "fct-module": "Ideas.Text.JSON",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e JSON",
        "fct-source": "src/Ideas-Text-JSON.html#toJSON",
        "fct-type": "method",
        "title": "toJSON"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text JSON",
        "module": "Ideas.Text.JSON",
        "name": "toJSON",
        "normalized": "a-\u003eJSON",
        "package": "ideas",
        "partial": "JSON",
        "signature": "a-\u003eJSON"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Arith1.html#",
      "description": {
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Arith1",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Arith1.html",
        "fct-type": "module",
        "title": "Arith1"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text OpenMath Dictionary Arith1",
        "module": "Ideas.Text.OpenMath.Dictionary.Arith1",
        "name": "Arith1",
        "normalized": "",
        "package": "ideas",
        "partial": "Arith",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Arith1.html#v:absSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eA unary operator which represents the absolute value of its argument. The\nargument should be numerically valued. In the complex case this is often\nreferred to as the modulus. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Arith1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Arith1.html#absSymbol",
        "fct-type": "function",
        "title": "absSymbol"
      },
      "index": {
        "description": "unary operator which represents the absolute value of its argument The argument should be numerically valued In the complex case this is often referred to as the modulus",
        "hierarchy": "Ideas Text OpenMath Dictionary Arith1",
        "module": "Ideas.Text.OpenMath.Dictionary.Arith1",
        "name": "absSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Arith1.html#v:arith1List",
      "description": {
        "fct-descr": "\u003cp\u003eList of symbols defined in arith1 dictionary\n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Arith1",
        "fct-package": "ideas",
        "fct-signature": "[Symbol]",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Arith1.html#arith1List",
        "fct-type": "function",
        "title": "arith1List"
      },
      "index": {
        "description": "List of symbols defined in arith1 dictionary",
        "hierarchy": "Ideas Text OpenMath Dictionary Arith1",
        "module": "Ideas.Text.OpenMath.Dictionary.Arith1",
        "name": "arith1List",
        "normalized": "[Symbol]",
        "package": "ideas",
        "partial": "List",
        "signature": "[Symbol]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Arith1.html#v:divideSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThis symbol represents a (binary) division function denoting the first\nargument right-divided by the second, i.e. divide(a,b)=a*inverse(b). It is the\ninverse of the multiplication function defined by the symbol times in this CD.\n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Arith1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Arith1.html#divideSymbol",
        "fct-type": "function",
        "title": "divideSymbol"
      },
      "index": {
        "description": "This symbol represents binary division function denoting the first argument right-divided by the second i.e divide inverse It is the inverse of the multiplication function defined by the symbol times in this CD",
        "hierarchy": "Ideas Text OpenMath Dictionary Arith1",
        "module": "Ideas.Text.OpenMath.Dictionary.Arith1",
        "name": "divideSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Arith1.html#v:gcdSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThe symbol to represent the n-ary function to return the gcd (greatest\ncommon divisor) of its arguments. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Arith1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Arith1.html#gcdSymbol",
        "fct-type": "function",
        "title": "gcdSymbol"
      },
      "index": {
        "description": "The symbol to represent the n-ary function to return the gcd greatest common divisor of its arguments",
        "hierarchy": "Ideas Text OpenMath Dictionary Arith1",
        "module": "Ideas.Text.OpenMath.Dictionary.Arith1",
        "name": "gcdSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Arith1.html#v:lcmSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThe symbol to represent the n-ary function to return the least common\nmultiple of its arguments. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Arith1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Arith1.html#lcmSymbol",
        "fct-type": "function",
        "title": "lcmSymbol"
      },
      "index": {
        "description": "The symbol to represent the n-ary function to return the least common multiple of its arguments",
        "hierarchy": "Ideas Text OpenMath Dictionary Arith1",
        "module": "Ideas.Text.OpenMath.Dictionary.Arith1",
        "name": "lcmSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Arith1.html#v:minusSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThe symbol representing a binary minus function. This is equivalent to\nadding the additive inverse. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Arith1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Arith1.html#minusSymbol",
        "fct-type": "function",
        "title": "minusSymbol"
      },
      "index": {
        "description": "The symbol representing binary minus function This is equivalent to adding the additive inverse",
        "hierarchy": "Ideas Text OpenMath Dictionary Arith1",
        "module": "Ideas.Text.OpenMath.Dictionary.Arith1",
        "name": "minusSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Arith1.html#v:plusSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThe symbol representing an n-ary commutative function plus. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Arith1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Arith1.html#plusSymbol",
        "fct-type": "function",
        "title": "plusSymbol"
      },
      "index": {
        "description": "The symbol representing an n-ary commutative function plus",
        "hierarchy": "Ideas Text OpenMath Dictionary Arith1",
        "module": "Ideas.Text.OpenMath.Dictionary.Arith1",
        "name": "plusSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Arith1.html#v:powerSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThis symbol represents a power function. The first argument is raised to\nthe power of the second argument. When the second argument is not an integer,\npowering is defined in terms of exponentials and logarithms for the complex\nand real numbers. This operator can represent general powering. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Arith1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Arith1.html#powerSymbol",
        "fct-type": "function",
        "title": "powerSymbol"
      },
      "index": {
        "description": "This symbol represents power function The first argument is raised to the power of the second argument When the second argument is not an integer powering is defined in terms of exponentials and logarithms for the complex and real numbers This operator can represent general powering",
        "hierarchy": "Ideas Text OpenMath Dictionary Arith1",
        "module": "Ideas.Text.OpenMath.Dictionary.Arith1",
        "name": "powerSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Arith1.html#v:productSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eAn operator taking two arguments, the first being the range of\nmultiplication e.g. an integral interval, the second being the function to be\nmultiplied. Note that the product may be over an infinite interval. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Arith1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Arith1.html#productSymbol",
        "fct-type": "function",
        "title": "productSymbol"
      },
      "index": {
        "description": "An operator taking two arguments the first being the range of multiplication e.g an integral interval the second being the function to be multiplied Note that the product may be over an infinite interval",
        "hierarchy": "Ideas Text OpenMath Dictionary Arith1",
        "module": "Ideas.Text.OpenMath.Dictionary.Arith1",
        "name": "productSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Arith1.html#v:rootSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eA binary operator which represents its first argument \u003ca\u003elowered\u003c/a\u003e to its\nn'th root where n is the second argument. This is the inverse of the operation\nrepresented by the power symbol defined in this CD. Care should be taken as to\nthe precise meaning of this operator, in particular which root is represented,\nhowever it is here to represent the general notion of taking n'th roots. As\ninferred by the signature relevant to this symbol, the function represented by\nthis symbol is the single valued function, the specific root returned is the\none indicated by the first CMP. Note also that the converse of the second CMP\nis not valid in general. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Arith1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Arith1.html#rootSymbol",
        "fct-type": "function",
        "title": "rootSymbol"
      },
      "index": {
        "description": "binary operator which represents its first argument lowered to its th root where is the second argument This is the inverse of the operation represented by the power symbol defined in this CD Care should be taken as to the precise meaning of this operator in particular which root is represented however it is here to represent the general notion of taking th roots As inferred by the signature relevant to this symbol the function represented by this symbol is the single valued function the specific root returned is the one indicated by the first CMP Note also that the converse of the second CMP is not valid in general",
        "hierarchy": "Ideas Text OpenMath Dictionary Arith1",
        "module": "Ideas.Text.OpenMath.Dictionary.Arith1",
        "name": "rootSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Arith1.html#v:sumSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eAn operator taking two arguments, the first being the range of summation,\ne.g. an integral interval, the second being the function to be summed. Note\nthat the sum may be over an infinite interval. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Arith1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Arith1.html#sumSymbol",
        "fct-type": "function",
        "title": "sumSymbol"
      },
      "index": {
        "description": "An operator taking two arguments the first being the range of summation e.g an integral interval the second being the function to be summed Note that the sum may be over an infinite interval",
        "hierarchy": "Ideas Text OpenMath Dictionary Arith1",
        "module": "Ideas.Text.OpenMath.Dictionary.Arith1",
        "name": "sumSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Arith1.html#v:timesSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThe symbol representing an n-ary multiplication function. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Arith1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Arith1.html#timesSymbol",
        "fct-type": "function",
        "title": "timesSymbol"
      },
      "index": {
        "description": "The symbol representing an n-ary multiplication function",
        "hierarchy": "Ideas Text OpenMath Dictionary Arith1",
        "module": "Ideas.Text.OpenMath.Dictionary.Arith1",
        "name": "timesSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Arith1.html#v:unaryMinusSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThis symbol denotes unary minus, i.e. the additive inverse. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Arith1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Arith1.html#unaryMinusSymbol",
        "fct-type": "function",
        "title": "unaryMinusSymbol"
      },
      "index": {
        "description": "This symbol denotes unary minus i.e the additive inverse",
        "hierarchy": "Ideas Text OpenMath Dictionary Arith1",
        "module": "Ideas.Text.OpenMath.Dictionary.Arith1",
        "name": "unaryMinusSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Minus Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Calculus1.html#",
      "description": {
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Calculus1",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Calculus1.html",
        "fct-type": "module",
        "title": "Calculus1"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text OpenMath Dictionary Calculus1",
        "module": "Ideas.Text.OpenMath.Dictionary.Calculus1",
        "name": "Calculus1",
        "normalized": "",
        "package": "ideas",
        "partial": "Calculus",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Calculus1.html#v:calculus1List",
      "description": {
        "fct-descr": "\u003cp\u003eList of symbols defined in calculus1 dictionary\n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Calculus1",
        "fct-package": "ideas",
        "fct-signature": "[Symbol]",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Calculus1.html#calculus1List",
        "fct-type": "function",
        "title": "calculus1List"
      },
      "index": {
        "description": "List of symbols defined in calculus1 dictionary",
        "hierarchy": "Ideas Text OpenMath Dictionary Calculus1",
        "module": "Ideas.Text.OpenMath.Dictionary.Calculus1",
        "name": "calculus1List",
        "normalized": "[Symbol]",
        "package": "ideas",
        "partial": "List",
        "signature": "[Symbol]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Calculus1.html#v:defintSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThis symbol is used to represent definite integration of unary functions.\nIt takes two arguments; the first being the range (e.g. a set) of integration,\nand the second the function. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Calculus1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Calculus1.html#defintSymbol",
        "fct-type": "function",
        "title": "defintSymbol"
      },
      "index": {
        "description": "This symbol is used to represent definite integration of unary functions It takes two arguments the first being the range e.g set of integration and the second the function",
        "hierarchy": "Ideas Text OpenMath Dictionary Calculus1",
        "module": "Ideas.Text.OpenMath.Dictionary.Calculus1",
        "name": "defintSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Calculus1.html#v:diffSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThis symbol is used to express ordinary differentiation of a unary\nfunction. The single argument is the unary function. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Calculus1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Calculus1.html#diffSymbol",
        "fct-type": "function",
        "title": "diffSymbol"
      },
      "index": {
        "description": "This symbol is used to express ordinary differentiation of unary function The single argument is the unary function",
        "hierarchy": "Ideas Text OpenMath Dictionary Calculus1",
        "module": "Ideas.Text.OpenMath.Dictionary.Calculus1",
        "name": "diffSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Calculus1.html#v:intSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThis symbol is used to represent indefinite integration of unary\nfunctions. The argument is the unary function. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Calculus1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Calculus1.html#intSymbol",
        "fct-type": "function",
        "title": "intSymbol"
      },
      "index": {
        "description": "This symbol is used to represent indefinite integration of unary functions The argument is the unary function",
        "hierarchy": "Ideas Text OpenMath Dictionary Calculus1",
        "module": "Ideas.Text.OpenMath.Dictionary.Calculus1",
        "name": "intSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Calculus1.html#v:nthdiffSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThis symbol is used to express the nth-iterated ordinary differentiation\nof a unary function. The first argument is n, and the second the unary\nfunction. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Calculus1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Calculus1.html#nthdiffSymbol",
        "fct-type": "function",
        "title": "nthdiffSymbol"
      },
      "index": {
        "description": "This symbol is used to express the nth-iterated ordinary differentiation of unary function The first argument is and the second the unary function",
        "hierarchy": "Ideas Text OpenMath Dictionary Calculus1",
        "module": "Ideas.Text.OpenMath.Dictionary.Calculus1",
        "name": "nthdiffSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Calculus1.html#v:partialdiffSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThis symbol is used to express partial differentiation of a function of\nmore than one variable. It has two arguments, the first is a list of integers\nwhich index the variables of the function, the second is the function. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Calculus1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Calculus1.html#partialdiffSymbol",
        "fct-type": "function",
        "title": "partialdiffSymbol"
      },
      "index": {
        "description": "This symbol is used to express partial differentiation of function of more than one variable It has two arguments the first is list of integers which index the variables of the function the second is the function",
        "hierarchy": "Ideas Text OpenMath Dictionary Calculus1",
        "module": "Ideas.Text.OpenMath.Dictionary.Calculus1",
        "name": "partialdiffSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Fns1.html#",
      "description": {
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Fns1",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Fns1.html",
        "fct-type": "module",
        "title": "Fns1"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text OpenMath Dictionary Fns1",
        "module": "Ideas.Text.OpenMath.Dictionary.Fns1",
        "name": "Fns1",
        "normalized": "",
        "package": "ideas",
        "partial": "Fns",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Fns1.html#v:domainSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThis symbol denotes the domain of a given function, which is the set of\nvalues it is defined over. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Fns1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Fns1.html#domainSymbol",
        "fct-type": "function",
        "title": "domainSymbol"
      },
      "index": {
        "description": "This symbol denotes the domain of given function which is the set of values it is defined over",
        "hierarchy": "Ideas Text OpenMath Dictionary Fns1",
        "module": "Ideas.Text.OpenMath.Dictionary.Fns1",
        "name": "domainSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Fns1.html#v:domainofapplicationSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThe domainofapplication element denotes the domain over which a given\nfunction is being applied. It is intended in MathML to be a more general\nalternative to specification of this domain using such quantifier elements as\nbvar, lowlimit or condition. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Fns1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Fns1.html#domainofapplicationSymbol",
        "fct-type": "function",
        "title": "domainofapplicationSymbol"
      },
      "index": {
        "description": "The domainofapplication element denotes the domain over which given function is being applied It is intended in MathML to be more general alternative to specification of this domain using such quantifier elements as bvar lowlimit or condition",
        "hierarchy": "Ideas Text OpenMath Dictionary Fns1",
        "module": "Ideas.Text.OpenMath.Dictionary.Fns1",
        "name": "domainofapplicationSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Fns1.html#v:fns1List",
      "description": {
        "fct-descr": "\u003cp\u003eList of symbols defined in fns1 dictionary\n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Fns1",
        "fct-package": "ideas",
        "fct-signature": "[Symbol]",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Fns1.html#fns1List",
        "fct-type": "function",
        "title": "fns1List"
      },
      "index": {
        "description": "List of symbols defined in fns1 dictionary",
        "hierarchy": "Ideas Text OpenMath Dictionary Fns1",
        "module": "Ideas.Text.OpenMath.Dictionary.Fns1",
        "name": "fns1List",
        "normalized": "[Symbol]",
        "package": "ideas",
        "partial": "List",
        "signature": "[Symbol]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Fns1.html#v:identitySymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThe identity function, it takes one argument and returns the same value.\n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Fns1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Fns1.html#identitySymbol",
        "fct-type": "function",
        "title": "identitySymbol"
      },
      "index": {
        "description": "The identity function it takes one argument and returns the same value",
        "hierarchy": "Ideas Text OpenMath Dictionary Fns1",
        "module": "Ideas.Text.OpenMath.Dictionary.Fns1",
        "name": "identitySymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Fns1.html#v:imageSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThis symbol denotes the image of a given function, which is the set of\nvalues the domain of the given function maps to. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Fns1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Fns1.html#imageSymbol",
        "fct-type": "function",
        "title": "imageSymbol"
      },
      "index": {
        "description": "This symbol denotes the image of given function which is the set of values the domain of the given function maps to",
        "hierarchy": "Ideas Text OpenMath Dictionary Fns1",
        "module": "Ideas.Text.OpenMath.Dictionary.Fns1",
        "name": "imageSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Fns1.html#v:inverseSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThis symbol is used to describe the inverse of its argument (a function).\nThis inverse may only be partially defined because the function may not have\nbeen surjective. If the function is not surjective the inverse function is\nill-defined without further stipulations. No assumptions are made on the\nsemantics of this inverse. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Fns1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Fns1.html#inverseSymbol",
        "fct-type": "function",
        "title": "inverseSymbol"
      },
      "index": {
        "description": "This symbol is used to describe the inverse of its argument function This inverse may only be partially defined because the function may not have been surjective If the function is not surjective the inverse function is ill-defined without further stipulations No assumptions are made on the semantics of this inverse",
        "hierarchy": "Ideas Text OpenMath Dictionary Fns1",
        "module": "Ideas.Text.OpenMath.Dictionary.Fns1",
        "name": "inverseSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Fns1.html#v:lambdaSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThis symbol is used to represent anonymous functions as lambda expansions.\nIt is used in a binder that takes two further arguments, the first of which is\na list of variables, and the second of which is an expression, and it forms\nthe function which is the lambda extraction of the expression \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Fns1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Fns1.html#lambdaSymbol",
        "fct-type": "function",
        "title": "lambdaSymbol"
      },
      "index": {
        "description": "This symbol is used to represent anonymous functions as lambda expansions It is used in binder that takes two further arguments the first of which is list of variables and the second of which is an expression and it forms the function which is the lambda extraction of the expression",
        "hierarchy": "Ideas Text OpenMath Dictionary Fns1",
        "module": "Ideas.Text.OpenMath.Dictionary.Fns1",
        "name": "lambdaSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Fns1.html#v:leftComposeSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThis symbol represents the function which forms the left-composition of\nits two (function) arguments. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Fns1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Fns1.html#leftComposeSymbol",
        "fct-type": "function",
        "title": "leftComposeSymbol"
      },
      "index": {
        "description": "This symbol represents the function which forms the left-composition of its two function arguments",
        "hierarchy": "Ideas Text OpenMath Dictionary Fns1",
        "module": "Ideas.Text.OpenMath.Dictionary.Fns1",
        "name": "leftComposeSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Compose Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Fns1.html#v:leftInverseSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThis symbol is used to describe the left inverse of its argument (a\nfunction). This inverse may only be partially defined because the function may\nnot have been surjective. If the function is not surjective the left inverse\nfunction is ill-defined without further stipulations. No other assumptions are\nmade on the semantics of this left inverse. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Fns1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Fns1.html#leftInverseSymbol",
        "fct-type": "function",
        "title": "leftInverseSymbol"
      },
      "index": {
        "description": "This symbol is used to describe the left inverse of its argument function This inverse may only be partially defined because the function may not have been surjective If the function is not surjective the left inverse function is ill-defined without further stipulations No other assumptions are made on the semantics of this left inverse",
        "hierarchy": "Ideas Text OpenMath Dictionary Fns1",
        "module": "Ideas.Text.OpenMath.Dictionary.Fns1",
        "name": "leftInverseSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Inverse Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Fns1.html#v:rangeSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThis symbol denotes the range of a function, that is a set that the\nfunction will map to. The single argument should be the function whos range is\nbeing queried. It should be noted that this is not necessarily equal to the\nimage, it is merely required to contain the image. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Fns1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Fns1.html#rangeSymbol",
        "fct-type": "function",
        "title": "rangeSymbol"
      },
      "index": {
        "description": "This symbol denotes the range of function that is set that the function will map to The single argument should be the function whos range is being queried It should be noted that this is not necessarily equal to the image it is merely required to contain the image",
        "hierarchy": "Ideas Text OpenMath Dictionary Fns1",
        "module": "Ideas.Text.OpenMath.Dictionary.Fns1",
        "name": "rangeSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Fns1.html#v:rightInverseSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThis symbol is used to describe the right inverse of its argument (a\nfunction). This inverse may only be partially defined because the function may\nnot have been surjective. If the function is not surjective the right inverse\nfunction is ill-defined without further stipulations. No other assumptions are\nmade on the semantics of this right inverse. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Fns1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Fns1.html#rightInverseSymbol",
        "fct-type": "function",
        "title": "rightInverseSymbol"
      },
      "index": {
        "description": "This symbol is used to describe the right inverse of its argument function This inverse may only be partially defined because the function may not have been surjective If the function is not surjective the right inverse function is ill-defined without further stipulations No other assumptions are made on the semantics of this right inverse",
        "hierarchy": "Ideas Text OpenMath Dictionary Fns1",
        "module": "Ideas.Text.OpenMath.Dictionary.Fns1",
        "name": "rightInverseSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Inverse Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Linalg2.html#",
      "description": {
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Linalg2",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Linalg2.html",
        "fct-type": "module",
        "title": "Linalg2"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text OpenMath Dictionary Linalg2",
        "module": "Ideas.Text.OpenMath.Dictionary.Linalg2",
        "name": "Linalg2",
        "normalized": "",
        "package": "ideas",
        "partial": "Linalg",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Linalg2.html#v:linalg2List",
      "description": {
        "fct-descr": "\u003cp\u003eList of symbols defined in linalg2 dictionary\n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Linalg2",
        "fct-package": "ideas",
        "fct-signature": "[Symbol]",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Linalg2.html#linalg2List",
        "fct-type": "function",
        "title": "linalg2List"
      },
      "index": {
        "description": "List of symbols defined in linalg2 dictionary",
        "hierarchy": "Ideas Text OpenMath Dictionary Linalg2",
        "module": "Ideas.Text.OpenMath.Dictionary.Linalg2",
        "name": "linalg2List",
        "normalized": "[Symbol]",
        "package": "ideas",
        "partial": "List",
        "signature": "[Symbol]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Linalg2.html#v:matrixSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThis symbol is an n-ary matrix constructor which requires matrixrow's as\narguments. It is used to represent matrices. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Linalg2",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Linalg2.html#matrixSymbol",
        "fct-type": "function",
        "title": "matrixSymbol"
      },
      "index": {
        "description": "This symbol is an n-ary matrix constructor which requires matrixrow as arguments It is used to represent matrices",
        "hierarchy": "Ideas Text OpenMath Dictionary Linalg2",
        "module": "Ideas.Text.OpenMath.Dictionary.Linalg2",
        "name": "matrixSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Linalg2.html#v:matrixrowSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThis symbol is an n-ary constructor used to represent rows of matrices.\nIts arguments should be members of a ring. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Linalg2",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Linalg2.html#matrixrowSymbol",
        "fct-type": "function",
        "title": "matrixrowSymbol"
      },
      "index": {
        "description": "This symbol is an n-ary constructor used to represent rows of matrices Its arguments should be members of ring",
        "hierarchy": "Ideas Text OpenMath Dictionary Linalg2",
        "module": "Ideas.Text.OpenMath.Dictionary.Linalg2",
        "name": "matrixrowSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Linalg2.html#v:vectorSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThis symbol represents an n-ary function used to construct (or describe)\nvectors. Vectors in this CD are considered to be row vectors and must\ntherefore be transposed to be considered as column vectors. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Linalg2",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Linalg2.html#vectorSymbol",
        "fct-type": "function",
        "title": "vectorSymbol"
      },
      "index": {
        "description": "This symbol represents an n-ary function used to construct or describe vectors Vectors in this CD are considered to be row vectors and must therefore be transposed to be considered as column vectors",
        "hierarchy": "Ideas Text OpenMath Dictionary Linalg2",
        "module": "Ideas.Text.OpenMath.Dictionary.Linalg2",
        "name": "vectorSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-List1.html#",
      "description": {
        "fct-module": "Ideas.Text.OpenMath.Dictionary.List1",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-List1.html",
        "fct-type": "module",
        "title": "List1"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text OpenMath Dictionary List1",
        "module": "Ideas.Text.OpenMath.Dictionary.List1",
        "name": "List1",
        "normalized": "",
        "package": "ideas",
        "partial": "List",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-List1.html#v:list1List",
      "description": {
        "fct-descr": "\u003cp\u003eList of symbols defined in list1 dictionary\n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.List1",
        "fct-package": "ideas",
        "fct-signature": "[Symbol]",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-List1.html#list1List",
        "fct-type": "function",
        "title": "list1List"
      },
      "index": {
        "description": "List of symbols defined in list1 dictionary",
        "hierarchy": "Ideas Text OpenMath Dictionary List1",
        "module": "Ideas.Text.OpenMath.Dictionary.List1",
        "name": "list1List",
        "normalized": "[Symbol]",
        "package": "ideas",
        "partial": "List",
        "signature": "[Symbol]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-List1.html#v:listSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThis symbol denotes the list construct which is an n-ary function. The\nlist entries must be given explicitly. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.List1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-List1.html#listSymbol",
        "fct-type": "function",
        "title": "listSymbol"
      },
      "index": {
        "description": "This symbol denotes the list construct which is an n-ary function The list entries must be given explicitly",
        "hierarchy": "Ideas Text OpenMath Dictionary List1",
        "module": "Ideas.Text.OpenMath.Dictionary.List1",
        "name": "listSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-List1.html#v:mapSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThis symbol represents a mapping function which may be used to construct\nlists, it takes as arguments a function from X to Y and a list over X in that\norder. The value that is returned is a list of values in Y. The argument list\nmay be a set or an integer_interval. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.List1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-List1.html#mapSymbol",
        "fct-type": "function",
        "title": "mapSymbol"
      },
      "index": {
        "description": "This symbol represents mapping function which may be used to construct lists it takes as arguments function from to and list over in that order The value that is returned is list of values in The argument list may be set or an integer interval",
        "hierarchy": "Ideas Text OpenMath Dictionary List1",
        "module": "Ideas.Text.OpenMath.Dictionary.List1",
        "name": "mapSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-List1.html#v:suchthatSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThis symbol represents the suchthat function which may be used to\nconstruct lists, it takes two arguments. The first argument should be the set\nwhich contains the elements of the list, the second argument should be a\npredicate, that is a function from the set to the booleans which describes if\nan element is to be in the list returned. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.List1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-List1.html#suchthatSymbol",
        "fct-type": "function",
        "title": "suchthatSymbol"
      },
      "index": {
        "description": "This symbol represents the suchthat function which may be used to construct lists it takes two arguments The first argument should be the set which contains the elements of the list the second argument should be predicate that is function from the set to the booleans which describes if an element is to be in the list returned",
        "hierarchy": "Ideas Text OpenMath Dictionary List1",
        "module": "Ideas.Text.OpenMath.Dictionary.List1",
        "name": "suchthatSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Logic1.html#",
      "description": {
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Logic1",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Logic1.html",
        "fct-type": "module",
        "title": "Logic1"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text OpenMath Dictionary Logic1",
        "module": "Ideas.Text.OpenMath.Dictionary.Logic1",
        "name": "Logic1",
        "normalized": "",
        "package": "ideas",
        "partial": "Logic",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Logic1.html#v:andSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThis symbol represents the logical and function which is an n-ary function\ntaking boolean arguments and returning a boolean value. It is true if all\narguments are true or false otherwise. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Logic1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Logic1.html#andSymbol",
        "fct-type": "function",
        "title": "andSymbol"
      },
      "index": {
        "description": "This symbol represents the logical and function which is an n-ary function taking boolean arguments and returning boolean value It is true if all arguments are true or false otherwise",
        "hierarchy": "Ideas Text OpenMath Dictionary Logic1",
        "module": "Ideas.Text.OpenMath.Dictionary.Logic1",
        "name": "andSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Logic1.html#v:equivalentSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThis symbol is used to show that two boolean expressions are logically\nequivalent, that is have the same boolean value for any inputs. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Logic1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Logic1.html#equivalentSymbol",
        "fct-type": "function",
        "title": "equivalentSymbol"
      },
      "index": {
        "description": "This symbol is used to show that two boolean expressions are logically equivalent that is have the same boolean value for any inputs",
        "hierarchy": "Ideas Text OpenMath Dictionary Logic1",
        "module": "Ideas.Text.OpenMath.Dictionary.Logic1",
        "name": "equivalentSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Logic1.html#v:falseSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThis symbol represents the boolean value false. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Logic1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Logic1.html#falseSymbol",
        "fct-type": "function",
        "title": "falseSymbol"
      },
      "index": {
        "description": "This symbol represents the boolean value false",
        "hierarchy": "Ideas Text OpenMath Dictionary Logic1",
        "module": "Ideas.Text.OpenMath.Dictionary.Logic1",
        "name": "falseSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Logic1.html#v:impliesSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThis symbol represents the logical implies function which takes two\nboolean expressions as arguments. It evaluates to false if the first argument\nis true and the second argument is false, otherwise it evaluates to true. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Logic1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Logic1.html#impliesSymbol",
        "fct-type": "function",
        "title": "impliesSymbol"
      },
      "index": {
        "description": "This symbol represents the logical implies function which takes two boolean expressions as arguments It evaluates to false if the first argument is true and the second argument is false otherwise it evaluates to true",
        "hierarchy": "Ideas Text OpenMath Dictionary Logic1",
        "module": "Ideas.Text.OpenMath.Dictionary.Logic1",
        "name": "impliesSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Logic1.html#v:logic1List",
      "description": {
        "fct-descr": "\u003cp\u003eList of symbols defined in logic1 dictionary\n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Logic1",
        "fct-package": "ideas",
        "fct-signature": "[Symbol]",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Logic1.html#logic1List",
        "fct-type": "function",
        "title": "logic1List"
      },
      "index": {
        "description": "List of symbols defined in logic1 dictionary",
        "hierarchy": "Ideas Text OpenMath Dictionary Logic1",
        "module": "Ideas.Text.OpenMath.Dictionary.Logic1",
        "name": "logic1List",
        "normalized": "[Symbol]",
        "package": "ideas",
        "partial": "List",
        "signature": "[Symbol]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Logic1.html#v:notSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThis symbol represents the logical not function which takes one boolean\nargument, and returns the opposite boolean value. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Logic1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Logic1.html#notSymbol",
        "fct-type": "function",
        "title": "notSymbol"
      },
      "index": {
        "description": "This symbol represents the logical not function which takes one boolean argument and returns the opposite boolean value",
        "hierarchy": "Ideas Text OpenMath Dictionary Logic1",
        "module": "Ideas.Text.OpenMath.Dictionary.Logic1",
        "name": "notSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Logic1.html#v:orSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThis symbol represents the logical or function which is an n-ary function\ntaking boolean arguments and returning a boolean value. It is true if any of\nthe arguments are true or false otherwise. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Logic1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Logic1.html#orSymbol",
        "fct-type": "function",
        "title": "orSymbol"
      },
      "index": {
        "description": "This symbol represents the logical or function which is an n-ary function taking boolean arguments and returning boolean value It is true if any of the arguments are true or false otherwise",
        "hierarchy": "Ideas Text OpenMath Dictionary Logic1",
        "module": "Ideas.Text.OpenMath.Dictionary.Logic1",
        "name": "orSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Logic1.html#v:trueSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThis symbol represents the boolean value true. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Logic1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Logic1.html#trueSymbol",
        "fct-type": "function",
        "title": "trueSymbol"
      },
      "index": {
        "description": "This symbol represents the boolean value true",
        "hierarchy": "Ideas Text OpenMath Dictionary Logic1",
        "module": "Ideas.Text.OpenMath.Dictionary.Logic1",
        "name": "trueSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Logic1.html#v:xorSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThis symbol represents the logical xor function which is an n-ary function\ntaking boolean arguments and returning a boolean value. It is true if there\nare an odd number of true arguments or false otherwise. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Logic1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Logic1.html#xorSymbol",
        "fct-type": "function",
        "title": "xorSymbol"
      },
      "index": {
        "description": "This symbol represents the logical xor function which is an n-ary function taking boolean arguments and returning boolean value It is true if there are an odd number of true arguments or false otherwise",
        "hierarchy": "Ideas Text OpenMath Dictionary Logic1",
        "module": "Ideas.Text.OpenMath.Dictionary.Logic1",
        "name": "xorSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Nums1.html#",
      "description": {
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Nums1",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Nums1.html",
        "fct-type": "module",
        "title": "Nums1"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text OpenMath Dictionary Nums1",
        "module": "Ideas.Text.OpenMath.Dictionary.Nums1",
        "name": "Nums1",
        "normalized": "",
        "package": "ideas",
        "partial": "Nums",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Nums1.html#v:basedIntegerSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThis symbol represents the constructor function for integers, specifying\nthe base. It takes two arguments, the first is a positive integer to denote\nthe base to which the number is represented, the second argument is a string\nwhich contains an optional sign and the digits of the integer, using 0-9a-z\n(as a consequence of this no radix greater than 35 is supported). Base 16 and\nbase 10 are already covered in the encodings of integers. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Nums1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Nums1.html#basedIntegerSymbol",
        "fct-type": "function",
        "title": "basedIntegerSymbol"
      },
      "index": {
        "description": "This symbol represents the constructor function for integers specifying the base It takes two arguments the first is positive integer to denote the base to which the number is represented the second argument is string which contains an optional sign and the digits of the integer using a-z as consequence of this no radix greater than is supported Base and base are already covered in the encodings of integers",
        "hierarchy": "Ideas Text OpenMath Dictionary Nums1",
        "module": "Ideas.Text.OpenMath.Dictionary.Nums1",
        "name": "basedIntegerSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Integer Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Nums1.html#v:eSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThis symbol represents the base of the natural logarithm, approximately\n2.718. See Abramowitz and Stegun, Handbook of Mathematical Functions, section\n4.1. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Nums1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Nums1.html#eSymbol",
        "fct-type": "function",
        "title": "eSymbol"
      },
      "index": {
        "description": "This symbol represents the base of the natural logarithm approximately See Abramowitz and Stegun Handbook of Mathematical Functions section",
        "hierarchy": "Ideas Text OpenMath Dictionary Nums1",
        "module": "Ideas.Text.OpenMath.Dictionary.Nums1",
        "name": "eSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Nums1.html#v:gammaSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eA symbol to convey the notion of the gamma constant as defined in\nAbramowitz and Stegun, Handbook of Mathematical Functions, section 6.1.3. It\nis the limit of 1 + 1\u003cem\u003e2 + 1\u003c/em\u003e3 + ... + 1/m - ln m as m tends to infinity, this\nis approximately 0.5772 15664. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Nums1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Nums1.html#gammaSymbol",
        "fct-type": "function",
        "title": "gammaSymbol"
      },
      "index": {
        "description": "symbol to convey the notion of the gamma constant as defined in Abramowitz and Stegun Handbook of Mathematical Functions section It is the limit of ln as tends to infinity this is approximately",
        "hierarchy": "Ideas Text OpenMath Dictionary Nums1",
        "module": "Ideas.Text.OpenMath.Dictionary.Nums1",
        "name": "gammaSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Nums1.html#v:iSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThis symbol represents the square root of -1. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Nums1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Nums1.html#iSymbol",
        "fct-type": "function",
        "title": "iSymbol"
      },
      "index": {
        "description": "This symbol represents the square root of",
        "hierarchy": "Ideas Text OpenMath Dictionary Nums1",
        "module": "Ideas.Text.OpenMath.Dictionary.Nums1",
        "name": "iSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Nums1.html#v:infinitySymbol",
      "description": {
        "fct-descr": "\u003cp\u003eA symbol to represent the notion of infinity. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Nums1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Nums1.html#infinitySymbol",
        "fct-type": "function",
        "title": "infinitySymbol"
      },
      "index": {
        "description": "symbol to represent the notion of infinity",
        "hierarchy": "Ideas Text OpenMath Dictionary Nums1",
        "module": "Ideas.Text.OpenMath.Dictionary.Nums1",
        "name": "infinitySymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Nums1.html#v:naNSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eA symbol to convey the notion of not-a-number. The result of an ill-posed\nfloating computation. See IEEE standard for floating point representations. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Nums1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Nums1.html#naNSymbol",
        "fct-type": "function",
        "title": "naNSymbol"
      },
      "index": {
        "description": "symbol to convey the notion of not-a-number The result of an ill-posed floating computation See IEEE standard for floating point representations",
        "hierarchy": "Ideas Text OpenMath Dictionary Nums1",
        "module": "Ideas.Text.OpenMath.Dictionary.Nums1",
        "name": "naNSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "NSymbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Nums1.html#v:nums1List",
      "description": {
        "fct-descr": "\u003cp\u003eList of symbols defined in nums1 dictionary\n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Nums1",
        "fct-package": "ideas",
        "fct-signature": "[Symbol]",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Nums1.html#nums1List",
        "fct-type": "function",
        "title": "nums1List"
      },
      "index": {
        "description": "List of symbols defined in nums1 dictionary",
        "hierarchy": "Ideas Text OpenMath Dictionary Nums1",
        "module": "Ideas.Text.OpenMath.Dictionary.Nums1",
        "name": "nums1List",
        "normalized": "[Symbol]",
        "package": "ideas",
        "partial": "List",
        "signature": "[Symbol]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Nums1.html#v:piSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eA symbol to convey the notion of pi, approximately 3.142. The ratio of the\ncircumference of a circle to its diameter. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Nums1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Nums1.html#piSymbol",
        "fct-type": "function",
        "title": "piSymbol"
      },
      "index": {
        "description": "symbol to convey the notion of pi approximately The ratio of the circumference of circle to its diameter",
        "hierarchy": "Ideas Text OpenMath Dictionary Nums1",
        "module": "Ideas.Text.OpenMath.Dictionary.Nums1",
        "name": "piSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Nums1.html#v:rationalSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThis symbol represents the constructor function for rational numbers. It\ntakes two arguments, the first is an integer p to denote the numerator and the\nsecond a nonzero integer q to denote the denominator of the rational p/q. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Nums1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Nums1.html#rationalSymbol",
        "fct-type": "function",
        "title": "rationalSymbol"
      },
      "index": {
        "description": "This symbol represents the constructor function for rational numbers It takes two arguments the first is an integer to denote the numerator and the second nonzero integer to denote the denominator of the rational",
        "hierarchy": "Ideas Text OpenMath Dictionary Nums1",
        "module": "Ideas.Text.OpenMath.Dictionary.Nums1",
        "name": "rationalSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Quant1.html#",
      "description": {
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Quant1",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Quant1.html",
        "fct-type": "module",
        "title": "Quant1"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text OpenMath Dictionary Quant1",
        "module": "Ideas.Text.OpenMath.Dictionary.Quant1",
        "name": "Quant1",
        "normalized": "",
        "package": "ideas",
        "partial": "Quant",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Quant1.html#v:existsSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThis symbol represents the existential (\u003ca\u003ethere exists\u003c/a\u003e) quantifier which\ntakes two arguments. It must be placed within an OMBIND element. The first\nargument is the bound variables (placed within an OMBVAR element), and the\nsecond is an expression. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Quant1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Quant1.html#existsSymbol",
        "fct-type": "function",
        "title": "existsSymbol"
      },
      "index": {
        "description": "This symbol represents the existential there exists quantifier which takes two arguments It must be placed within an OMBIND element The first argument is the bound variables placed within an OMBVAR element and the second is an expression",
        "hierarchy": "Ideas Text OpenMath Dictionary Quant1",
        "module": "Ideas.Text.OpenMath.Dictionary.Quant1",
        "name": "existsSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Quant1.html#v:forallSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThis symbol represents the universal (\u003ca\u003efor all\u003c/a\u003e) quantifier which takes\ntwo arguments. It must be placed within an OMBIND element. The first argument\nis the bound variables (placed within an OMBVAR element), and the second is an\nexpression. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Quant1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Quant1.html#forallSymbol",
        "fct-type": "function",
        "title": "forallSymbol"
      },
      "index": {
        "description": "This symbol represents the universal for all quantifier which takes two arguments It must be placed within an OMBIND element The first argument is the bound variables placed within an OMBVAR element and the second is an expression",
        "hierarchy": "Ideas Text OpenMath Dictionary Quant1",
        "module": "Ideas.Text.OpenMath.Dictionary.Quant1",
        "name": "forallSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Quant1.html#v:quant1List",
      "description": {
        "fct-descr": "\u003cp\u003eList of symbols defined in quant1 dictionary\n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Quant1",
        "fct-package": "ideas",
        "fct-signature": "[Symbol]",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Quant1.html#quant1List",
        "fct-type": "function",
        "title": "quant1List"
      },
      "index": {
        "description": "List of symbols defined in quant1 dictionary",
        "hierarchy": "Ideas Text OpenMath Dictionary Quant1",
        "module": "Ideas.Text.OpenMath.Dictionary.Quant1",
        "name": "quant1List",
        "normalized": "[Symbol]",
        "package": "ideas",
        "partial": "List",
        "signature": "[Symbol]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Relation1.html#",
      "description": {
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Relation1",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Relation1.html",
        "fct-type": "module",
        "title": "Relation1"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text OpenMath Dictionary Relation1",
        "module": "Ideas.Text.OpenMath.Dictionary.Relation1",
        "name": "Relation1",
        "normalized": "",
        "package": "ideas",
        "partial": "Relation",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Relation1.html#v:approxSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThis symbol is used to denote the approximate equality of its two\narguments. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Relation1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Relation1.html#approxSymbol",
        "fct-type": "function",
        "title": "approxSymbol"
      },
      "index": {
        "description": "This symbol is used to denote the approximate equality of its two arguments",
        "hierarchy": "Ideas Text OpenMath Dictionary Relation1",
        "module": "Ideas.Text.OpenMath.Dictionary.Relation1",
        "name": "approxSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Relation1.html#v:eqSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThis symbol represents the binary equality function. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Relation1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Relation1.html#eqSymbol",
        "fct-type": "function",
        "title": "eqSymbol"
      },
      "index": {
        "description": "This symbol represents the binary equality function",
        "hierarchy": "Ideas Text OpenMath Dictionary Relation1",
        "module": "Ideas.Text.OpenMath.Dictionary.Relation1",
        "name": "eqSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Relation1.html#v:geqSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThis symbol represents the binary greater than or equal to function which\nreturns true if the first argument is greater than or equal to the second, it\nreturns false otherwise. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Relation1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Relation1.html#geqSymbol",
        "fct-type": "function",
        "title": "geqSymbol"
      },
      "index": {
        "description": "This symbol represents the binary greater than or equal to function which returns true if the first argument is greater than or equal to the second it returns false otherwise",
        "hierarchy": "Ideas Text OpenMath Dictionary Relation1",
        "module": "Ideas.Text.OpenMath.Dictionary.Relation1",
        "name": "geqSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Relation1.html#v:gtSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThis symbol represents the binary greater than function which returns true\nif the first argument is greater than the second, it returns false otherwise.\n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Relation1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Relation1.html#gtSymbol",
        "fct-type": "function",
        "title": "gtSymbol"
      },
      "index": {
        "description": "This symbol represents the binary greater than function which returns true if the first argument is greater than the second it returns false otherwise",
        "hierarchy": "Ideas Text OpenMath Dictionary Relation1",
        "module": "Ideas.Text.OpenMath.Dictionary.Relation1",
        "name": "gtSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Relation1.html#v:leqSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThis symbol represents the binary less than or equal to function which\nreturns true if the first argument is less than or equal to the second, it\nreturns false otherwise. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Relation1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Relation1.html#leqSymbol",
        "fct-type": "function",
        "title": "leqSymbol"
      },
      "index": {
        "description": "This symbol represents the binary less than or equal to function which returns true if the first argument is less than or equal to the second it returns false otherwise",
        "hierarchy": "Ideas Text OpenMath Dictionary Relation1",
        "module": "Ideas.Text.OpenMath.Dictionary.Relation1",
        "name": "leqSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Relation1.html#v:ltSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThis symbol represents the binary less than function which returns true if\nthe first argument is less than the second, it returns false otherwise. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Relation1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Relation1.html#ltSymbol",
        "fct-type": "function",
        "title": "ltSymbol"
      },
      "index": {
        "description": "This symbol represents the binary less than function which returns true if the first argument is less than the second it returns false otherwise",
        "hierarchy": "Ideas Text OpenMath Dictionary Relation1",
        "module": "Ideas.Text.OpenMath.Dictionary.Relation1",
        "name": "ltSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Relation1.html#v:neqSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThis symbol represents the binary inequality function. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Relation1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Relation1.html#neqSymbol",
        "fct-type": "function",
        "title": "neqSymbol"
      },
      "index": {
        "description": "This symbol represents the binary inequality function",
        "hierarchy": "Ideas Text OpenMath Dictionary Relation1",
        "module": "Ideas.Text.OpenMath.Dictionary.Relation1",
        "name": "neqSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Relation1.html#v:relation1List",
      "description": {
        "fct-descr": "\u003cp\u003eList of symbols defined in relation1 dictionary\n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Relation1",
        "fct-package": "ideas",
        "fct-signature": "[Symbol]",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Relation1.html#relation1List",
        "fct-type": "function",
        "title": "relation1List"
      },
      "index": {
        "description": "List of symbols defined in relation1 dictionary",
        "hierarchy": "Ideas Text OpenMath Dictionary Relation1",
        "module": "Ideas.Text.OpenMath.Dictionary.Relation1",
        "name": "relation1List",
        "normalized": "[Symbol]",
        "package": "ideas",
        "partial": "List",
        "signature": "[Symbol]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Transc1.html#",
      "description": {
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Transc1",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Transc1.html",
        "fct-type": "module",
        "title": "Transc1"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text OpenMath Dictionary Transc1",
        "module": "Ideas.Text.OpenMath.Dictionary.Transc1",
        "name": "Transc1",
        "normalized": "",
        "package": "ideas",
        "partial": "Transc",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Transc1.html#v:arccosSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThis symbol represents the arccos function. This is the inverse of the cos\nfunction as described in Abramowitz and Stegun, section 4.4. It takes one\nargument. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Transc1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Transc1.html#arccosSymbol",
        "fct-type": "function",
        "title": "arccosSymbol"
      },
      "index": {
        "description": "This symbol represents the arccos function This is the inverse of the cos function as described in Abramowitz and Stegun section It takes one argument",
        "hierarchy": "Ideas Text OpenMath Dictionary Transc1",
        "module": "Ideas.Text.OpenMath.Dictionary.Transc1",
        "name": "arccosSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Transc1.html#v:arccoshSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThis symbol represents the arccosh function as described in Abramowitz and\nStegun, section 4.6. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Transc1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Transc1.html#arccoshSymbol",
        "fct-type": "function",
        "title": "arccoshSymbol"
      },
      "index": {
        "description": "This symbol represents the arccosh function as described in Abramowitz and Stegun section",
        "hierarchy": "Ideas Text OpenMath Dictionary Transc1",
        "module": "Ideas.Text.OpenMath.Dictionary.Transc1",
        "name": "arccoshSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Transc1.html#v:arccotSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThis symbol represents the arccot function as described in Abramowitz and\nStegun, section 4.4. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Transc1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Transc1.html#arccotSymbol",
        "fct-type": "function",
        "title": "arccotSymbol"
      },
      "index": {
        "description": "This symbol represents the arccot function as described in Abramowitz and Stegun section",
        "hierarchy": "Ideas Text OpenMath Dictionary Transc1",
        "module": "Ideas.Text.OpenMath.Dictionary.Transc1",
        "name": "arccotSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Transc1.html#v:arccothSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThis symbol represents the arccoth function as described in Abramowitz and\nStegun, section 4.6. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Transc1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Transc1.html#arccothSymbol",
        "fct-type": "function",
        "title": "arccothSymbol"
      },
      "index": {
        "description": "This symbol represents the arccoth function as described in Abramowitz and Stegun section",
        "hierarchy": "Ideas Text OpenMath Dictionary Transc1",
        "module": "Ideas.Text.OpenMath.Dictionary.Transc1",
        "name": "arccothSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Transc1.html#v:arccscSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThis symbol represents the arccsc function as described in Abramowitz and\nStegun, section 4.4. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Transc1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Transc1.html#arccscSymbol",
        "fct-type": "function",
        "title": "arccscSymbol"
      },
      "index": {
        "description": "This symbol represents the arccsc function as described in Abramowitz and Stegun section",
        "hierarchy": "Ideas Text OpenMath Dictionary Transc1",
        "module": "Ideas.Text.OpenMath.Dictionary.Transc1",
        "name": "arccscSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Transc1.html#v:arccschSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThis symbol represents the arccsch function as described in Abramowitz and\nStegun, section 4.6. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Transc1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Transc1.html#arccschSymbol",
        "fct-type": "function",
        "title": "arccschSymbol"
      },
      "index": {
        "description": "This symbol represents the arccsch function as described in Abramowitz and Stegun section",
        "hierarchy": "Ideas Text OpenMath Dictionary Transc1",
        "module": "Ideas.Text.OpenMath.Dictionary.Transc1",
        "name": "arccschSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Transc1.html#v:arcsecSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThis symbol represents the arcsec function as described in Abramowitz and\nStegun, section 4.4. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Transc1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Transc1.html#arcsecSymbol",
        "fct-type": "function",
        "title": "arcsecSymbol"
      },
      "index": {
        "description": "This symbol represents the arcsec function as described in Abramowitz and Stegun section",
        "hierarchy": "Ideas Text OpenMath Dictionary Transc1",
        "module": "Ideas.Text.OpenMath.Dictionary.Transc1",
        "name": "arcsecSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Transc1.html#v:arcsechSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThis symbol represents the arcsech function as described in Abramowitz and\nStegun, section 4.6. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Transc1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Transc1.html#arcsechSymbol",
        "fct-type": "function",
        "title": "arcsechSymbol"
      },
      "index": {
        "description": "This symbol represents the arcsech function as described in Abramowitz and Stegun section",
        "hierarchy": "Ideas Text OpenMath Dictionary Transc1",
        "module": "Ideas.Text.OpenMath.Dictionary.Transc1",
        "name": "arcsechSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Transc1.html#v:arcsinSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThis symbol represents the arcsin function. This is the inverse of the sin\nfunction as described in Abramowitz and Stegun, section 4.4. It takes one\nargument. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Transc1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Transc1.html#arcsinSymbol",
        "fct-type": "function",
        "title": "arcsinSymbol"
      },
      "index": {
        "description": "This symbol represents the arcsin function This is the inverse of the sin function as described in Abramowitz and Stegun section It takes one argument",
        "hierarchy": "Ideas Text OpenMath Dictionary Transc1",
        "module": "Ideas.Text.OpenMath.Dictionary.Transc1",
        "name": "arcsinSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Transc1.html#v:arcsinhSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThis symbol represents the arcsinh function as described in Abramowitz and\nStegun, section 4.6. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Transc1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Transc1.html#arcsinhSymbol",
        "fct-type": "function",
        "title": "arcsinhSymbol"
      },
      "index": {
        "description": "This symbol represents the arcsinh function as described in Abramowitz and Stegun section",
        "hierarchy": "Ideas Text OpenMath Dictionary Transc1",
        "module": "Ideas.Text.OpenMath.Dictionary.Transc1",
        "name": "arcsinhSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Transc1.html#v:arctanSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThis symbol represents the arctan function. This is the inverse of the tan\nfunction as described in Abramowitz and Stegun, section 4.4. It takes one\nargument. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Transc1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Transc1.html#arctanSymbol",
        "fct-type": "function",
        "title": "arctanSymbol"
      },
      "index": {
        "description": "This symbol represents the arctan function This is the inverse of the tan function as described in Abramowitz and Stegun section It takes one argument",
        "hierarchy": "Ideas Text OpenMath Dictionary Transc1",
        "module": "Ideas.Text.OpenMath.Dictionary.Transc1",
        "name": "arctanSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Transc1.html#v:arctanhSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThis symbol represents the arctanh function as described in Abramowitz and\nStegun, section 4.6. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Transc1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Transc1.html#arctanhSymbol",
        "fct-type": "function",
        "title": "arctanhSymbol"
      },
      "index": {
        "description": "This symbol represents the arctanh function as described in Abramowitz and Stegun section",
        "hierarchy": "Ideas Text OpenMath Dictionary Transc1",
        "module": "Ideas.Text.OpenMath.Dictionary.Transc1",
        "name": "arctanhSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Transc1.html#v:cosSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThis symbol represents the cos function as described in Abramowitz and\nStegun, section 4.3. It takes one argument. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Transc1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Transc1.html#cosSymbol",
        "fct-type": "function",
        "title": "cosSymbol"
      },
      "index": {
        "description": "This symbol represents the cos function as described in Abramowitz and Stegun section It takes one argument",
        "hierarchy": "Ideas Text OpenMath Dictionary Transc1",
        "module": "Ideas.Text.OpenMath.Dictionary.Transc1",
        "name": "cosSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Transc1.html#v:coshSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThis symbol represents the cosh function as described in Abramowitz and\nStegun, section 4.5. It takes one argument. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Transc1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Transc1.html#coshSymbol",
        "fct-type": "function",
        "title": "coshSymbol"
      },
      "index": {
        "description": "This symbol represents the cosh function as described in Abramowitz and Stegun section It takes one argument",
        "hierarchy": "Ideas Text OpenMath Dictionary Transc1",
        "module": "Ideas.Text.OpenMath.Dictionary.Transc1",
        "name": "coshSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Transc1.html#v:cotSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThis symbol represents the cot function as described in Abramowitz and\nStegun, section 4.3. It takes one argument. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Transc1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Transc1.html#cotSymbol",
        "fct-type": "function",
        "title": "cotSymbol"
      },
      "index": {
        "description": "This symbol represents the cot function as described in Abramowitz and Stegun section It takes one argument",
        "hierarchy": "Ideas Text OpenMath Dictionary Transc1",
        "module": "Ideas.Text.OpenMath.Dictionary.Transc1",
        "name": "cotSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Transc1.html#v:cothSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThis symbol represents the coth function as described in Abramowitz and\nStegun, section 4.5. It takes one argument. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Transc1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Transc1.html#cothSymbol",
        "fct-type": "function",
        "title": "cothSymbol"
      },
      "index": {
        "description": "This symbol represents the coth function as described in Abramowitz and Stegun section It takes one argument",
        "hierarchy": "Ideas Text OpenMath Dictionary Transc1",
        "module": "Ideas.Text.OpenMath.Dictionary.Transc1",
        "name": "cothSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Transc1.html#v:cscSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThis symbol represents the csc function as described in Abramowitz and\nStegun, section 4.3. It takes one argument. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Transc1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Transc1.html#cscSymbol",
        "fct-type": "function",
        "title": "cscSymbol"
      },
      "index": {
        "description": "This symbol represents the csc function as described in Abramowitz and Stegun section It takes one argument",
        "hierarchy": "Ideas Text OpenMath Dictionary Transc1",
        "module": "Ideas.Text.OpenMath.Dictionary.Transc1",
        "name": "cscSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Transc1.html#v:cschSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThis symbol represents the csch function as described in Abramowitz and\nStegun, section 4.5. It takes one argument. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Transc1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Transc1.html#cschSymbol",
        "fct-type": "function",
        "title": "cschSymbol"
      },
      "index": {
        "description": "This symbol represents the csch function as described in Abramowitz and Stegun section It takes one argument",
        "hierarchy": "Ideas Text OpenMath Dictionary Transc1",
        "module": "Ideas.Text.OpenMath.Dictionary.Transc1",
        "name": "cschSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Transc1.html#v:expSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThis symbol represents the exponentiation function as described in\nAbramowitz and Stegun, section 4.2. It takes one argument. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Transc1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Transc1.html#expSymbol",
        "fct-type": "function",
        "title": "expSymbol"
      },
      "index": {
        "description": "This symbol represents the exponentiation function as described in Abramowitz and Stegun section It takes one argument",
        "hierarchy": "Ideas Text OpenMath Dictionary Transc1",
        "module": "Ideas.Text.OpenMath.Dictionary.Transc1",
        "name": "expSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Transc1.html#v:lnSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThis symbol represents the ln function (natural logarithm) as described in\nAbramowitz and Stegun, section 4.1. It takes one argument. Note the\ndescription in the CMP/FMP of the branch cut. If signed zeros are in use, the\ninequality needs to be non-strict. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Transc1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Transc1.html#lnSymbol",
        "fct-type": "function",
        "title": "lnSymbol"
      },
      "index": {
        "description": "This symbol represents the ln function natural logarithm as described in Abramowitz and Stegun section It takes one argument Note the description in the CMP FMP of the branch cut If signed zeros are in use the inequality needs to be non-strict",
        "hierarchy": "Ideas Text OpenMath Dictionary Transc1",
        "module": "Ideas.Text.OpenMath.Dictionary.Transc1",
        "name": "lnSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Transc1.html#v:logSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThis symbol represents a binary log function; the first argument is the\nbase, to which the second argument is log'ed. It is defined in Abramowitz and\nStegun, Handbook of Mathematical Functions, section 4.1 \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Transc1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Transc1.html#logSymbol",
        "fct-type": "function",
        "title": "logSymbol"
      },
      "index": {
        "description": "This symbol represents binary log function the first argument is the base to which the second argument is log ed It is defined in Abramowitz and Stegun Handbook of Mathematical Functions section",
        "hierarchy": "Ideas Text OpenMath Dictionary Transc1",
        "module": "Ideas.Text.OpenMath.Dictionary.Transc1",
        "name": "logSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Transc1.html#v:secSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThis symbol represents the sec function as described in Abramowitz and\nStegun, section 4.3. It takes one argument. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Transc1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Transc1.html#secSymbol",
        "fct-type": "function",
        "title": "secSymbol"
      },
      "index": {
        "description": "This symbol represents the sec function as described in Abramowitz and Stegun section It takes one argument",
        "hierarchy": "Ideas Text OpenMath Dictionary Transc1",
        "module": "Ideas.Text.OpenMath.Dictionary.Transc1",
        "name": "secSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Transc1.html#v:sechSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThis symbol represents the sech function as described in Abramowitz and\nStegun, section 4.5. It takes one argument. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Transc1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Transc1.html#sechSymbol",
        "fct-type": "function",
        "title": "sechSymbol"
      },
      "index": {
        "description": "This symbol represents the sech function as described in Abramowitz and Stegun section It takes one argument",
        "hierarchy": "Ideas Text OpenMath Dictionary Transc1",
        "module": "Ideas.Text.OpenMath.Dictionary.Transc1",
        "name": "sechSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Transc1.html#v:sinSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThis symbol represents the sin function as described in Abramowitz and\nStegun, section 4.3. It takes one argument. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Transc1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Transc1.html#sinSymbol",
        "fct-type": "function",
        "title": "sinSymbol"
      },
      "index": {
        "description": "This symbol represents the sin function as described in Abramowitz and Stegun section It takes one argument",
        "hierarchy": "Ideas Text OpenMath Dictionary Transc1",
        "module": "Ideas.Text.OpenMath.Dictionary.Transc1",
        "name": "sinSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Transc1.html#v:sinhSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThis symbol represents the sinh function as described in Abramowitz and\nStegun, section 4.5. It takes one argument. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Transc1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Transc1.html#sinhSymbol",
        "fct-type": "function",
        "title": "sinhSymbol"
      },
      "index": {
        "description": "This symbol represents the sinh function as described in Abramowitz and Stegun section It takes one argument",
        "hierarchy": "Ideas Text OpenMath Dictionary Transc1",
        "module": "Ideas.Text.OpenMath.Dictionary.Transc1",
        "name": "sinhSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Transc1.html#v:tanSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThis symbol represents the tan function as described in Abramowitz and\nStegun, section 4.3. It takes one argument. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Transc1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Transc1.html#tanSymbol",
        "fct-type": "function",
        "title": "tanSymbol"
      },
      "index": {
        "description": "This symbol represents the tan function as described in Abramowitz and Stegun section It takes one argument",
        "hierarchy": "Ideas Text OpenMath Dictionary Transc1",
        "module": "Ideas.Text.OpenMath.Dictionary.Transc1",
        "name": "tanSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Transc1.html#v:tanhSymbol",
      "description": {
        "fct-descr": "\u003cp\u003eThis symbol represents the tanh function as described in Abramowitz and\nStegun, section 4.5. It takes one argument. \n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Transc1",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Transc1.html#tanhSymbol",
        "fct-type": "function",
        "title": "tanhSymbol"
      },
      "index": {
        "description": "This symbol represents the tanh function as described in Abramowitz and Stegun section It takes one argument",
        "hierarchy": "Ideas Text OpenMath Dictionary Transc1",
        "module": "Ideas.Text.OpenMath.Dictionary.Transc1",
        "name": "tanhSymbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Dictionary-Transc1.html#v:transc1List",
      "description": {
        "fct-descr": "\u003cp\u003eList of symbols defined in transc1 dictionary\n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.Dictionary.Transc1",
        "fct-package": "ideas",
        "fct-signature": "[Symbol]",
        "fct-source": "src/Ideas-Text-OpenMath-Dictionary-Transc1.html#transc1List",
        "fct-type": "function",
        "title": "transc1List"
      },
      "index": {
        "description": "List of symbols defined in transc1 dictionary",
        "hierarchy": "Ideas Text OpenMath Dictionary Transc1",
        "module": "Ideas.Text.OpenMath.Dictionary.Transc1",
        "name": "transc1List",
        "normalized": "[Symbol]",
        "package": "ideas",
        "partial": "List",
        "signature": "[Symbol]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-FMP.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eFormal mathematical properties (FMP)\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "Ideas.Text.OpenMath.FMP",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Text-OpenMath-FMP.html",
        "fct-type": "module",
        "title": "FMP"
      },
      "index": {
        "description": "Formal mathematical properties FMP",
        "hierarchy": "Ideas Text OpenMath FMP",
        "module": "Ideas.Text.OpenMath.FMP",
        "name": "FMP",
        "normalized": "",
        "package": "ideas",
        "partial": "FMP",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-FMP.html#t:FMP",
      "description": {
        "fct-module": "Ideas.Text.OpenMath.FMP",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Text-OpenMath-FMP.html#FMP",
        "fct-type": "data",
        "title": "FMP"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text OpenMath FMP",
        "module": "Ideas.Text.OpenMath.FMP",
        "name": "FMP",
        "normalized": "",
        "package": "ideas",
        "partial": "FMP",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-FMP.html#v:FMP",
      "description": {
        "fct-module": "Ideas.Text.OpenMath.FMP",
        "fct-package": "ideas",
        "fct-signature": "FMP",
        "fct-source": "src/Ideas-Text-OpenMath-FMP.html#FMP",
        "fct-type": "function",
        "title": "FMP"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text OpenMath FMP",
        "module": "Ideas.Text.OpenMath.FMP",
        "name": "FMP",
        "normalized": "",
        "package": "ideas",
        "partial": "FMP",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-FMP.html#v:buggyFMP",
      "description": {
        "fct-descr": "\u003cp\u003eRepresents a common misconception. In certain (most) situations,\n the two objects are not the same.\n\u003c/p\u003e",
        "fct-module": "Ideas.Text.OpenMath.FMP",
        "fct-package": "ideas",
        "fct-signature": "OMOBJ -\u003e OMOBJ -\u003e FMP",
        "fct-source": "src/Ideas-Text-OpenMath-FMP.html#buggyFMP",
        "fct-type": "function",
        "title": "buggyFMP"
      },
      "index": {
        "description": "Represents common misconception In certain most situations the two objects are not the same",
        "hierarchy": "Ideas Text OpenMath FMP",
        "module": "Ideas.Text.OpenMath.FMP",
        "name": "buggyFMP",
        "normalized": "OMOBJ-\u003eOMOBJ-\u003eFMP",
        "package": "ideas",
        "partial": "FMP",
        "signature": "OMOBJ-\u003eOMOBJ-\u003eFMP"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-FMP.html#v:eqFMP",
      "description": {
        "fct-module": "Ideas.Text.OpenMath.FMP",
        "fct-package": "ideas",
        "fct-signature": "OMOBJ -\u003e OMOBJ -\u003e FMP",
        "fct-source": "src/Ideas-Text-OpenMath-FMP.html#eqFMP",
        "fct-type": "function",
        "title": "eqFMP"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text OpenMath FMP",
        "module": "Ideas.Text.OpenMath.FMP",
        "name": "eqFMP",
        "normalized": "OMOBJ-\u003eOMOBJ-\u003eFMP",
        "package": "ideas",
        "partial": "FMP",
        "signature": "OMOBJ-\u003eOMOBJ-\u003eFMP"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-FMP.html#v:leftHandSide",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Text.OpenMath.FMP",
        "fct-package": "ideas",
        "fct-signature": "OMOBJ",
        "fct-source": "src/Ideas-Text-OpenMath-FMP.html#FMP",
        "fct-type": "function",
        "title": "leftHandSide"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text OpenMath FMP",
        "module": "Ideas.Text.OpenMath.FMP",
        "name": "leftHandSide",
        "normalized": "",
        "package": "ideas",
        "partial": "Hand Side",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-FMP.html#v:metaVariables",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Text.OpenMath.FMP",
        "fct-package": "ideas",
        "fct-signature": "[String]",
        "fct-source": "src/Ideas-Text-OpenMath-FMP.html#FMP",
        "fct-type": "function",
        "title": "metaVariables"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text OpenMath FMP",
        "module": "Ideas.Text.OpenMath.FMP",
        "name": "metaVariables",
        "normalized": "[String]",
        "package": "ideas",
        "partial": "Variables",
        "signature": "[String]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-FMP.html#v:quantor",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Text.OpenMath.FMP",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-FMP.html#FMP",
        "fct-type": "function",
        "title": "quantor"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text OpenMath FMP",
        "module": "Ideas.Text.OpenMath.FMP",
        "name": "quantor",
        "normalized": "",
        "package": "ideas",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-FMP.html#v:relation",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Text.OpenMath.FMP",
        "fct-package": "ideas",
        "fct-signature": "Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-FMP.html#FMP",
        "fct-type": "function",
        "title": "relation"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text OpenMath FMP",
        "module": "Ideas.Text.OpenMath.FMP",
        "name": "relation",
        "normalized": "",
        "package": "ideas",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-FMP.html#v:rightHandSide",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Text.OpenMath.FMP",
        "fct-package": "ideas",
        "fct-signature": "OMOBJ",
        "fct-source": "src/Ideas-Text-OpenMath-FMP.html#FMP",
        "fct-type": "function",
        "title": "rightHandSide"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text OpenMath FMP",
        "module": "Ideas.Text.OpenMath.FMP",
        "name": "rightHandSide",
        "normalized": "",
        "package": "ideas",
        "partial": "Hand Side",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-FMP.html#v:toObject",
      "description": {
        "fct-module": "Ideas.Text.OpenMath.FMP",
        "fct-package": "ideas",
        "fct-signature": "FMP -\u003e OMOBJ",
        "fct-source": "src/Ideas-Text-OpenMath-FMP.html#toObject",
        "fct-type": "function",
        "title": "toObject"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text OpenMath FMP",
        "module": "Ideas.Text.OpenMath.FMP",
        "name": "toObject",
        "normalized": "FMP-\u003eOMOBJ",
        "package": "ideas",
        "partial": "Object",
        "signature": "FMP-\u003eOMOBJ"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Object.html#",
      "description": {
        "fct-module": "Ideas.Text.OpenMath.Object",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Text-OpenMath-Object.html",
        "fct-type": "module",
        "title": "Object"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text OpenMath Object",
        "module": "Ideas.Text.OpenMath.Object",
        "name": "Object",
        "normalized": "",
        "package": "ideas",
        "partial": "Object",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Object.html#t:OMOBJ",
      "description": {
        "fct-module": "Ideas.Text.OpenMath.Object",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Text-OpenMath-Object.html#OMOBJ",
        "fct-type": "data",
        "title": "OMOBJ"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text OpenMath Object",
        "module": "Ideas.Text.OpenMath.Object",
        "name": "OMOBJ",
        "normalized": "",
        "package": "ideas",
        "partial": "OMOBJ",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Object.html#v:OMA",
      "description": {
        "fct-module": "Ideas.Text.OpenMath.Object",
        "fct-package": "ideas",
        "fct-signature": "OMA [OMOBJ]",
        "fct-source": "src/Ideas-Text-OpenMath-Object.html#OMOBJ",
        "fct-type": "function",
        "title": "OMA"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text OpenMath Object",
        "module": "Ideas.Text.OpenMath.Object",
        "name": "OMA",
        "normalized": "OMA[OMOBJ]",
        "package": "ideas",
        "partial": "OMA",
        "signature": "OMA[OMOBJ]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Object.html#v:OMBIND",
      "description": {
        "fct-module": "Ideas.Text.OpenMath.Object",
        "fct-package": "ideas",
        "fct-signature": "OMBIND OMOBJ [String] OMOBJ",
        "fct-source": "src/Ideas-Text-OpenMath-Object.html#OMOBJ",
        "fct-type": "function",
        "title": "OMBIND"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text OpenMath Object",
        "module": "Ideas.Text.OpenMath.Object",
        "name": "OMBIND",
        "normalized": "OMBIND OMOBJ[String]OMOBJ",
        "package": "ideas",
        "partial": "OMBIND",
        "signature": "OMBIND OMOBJ[String]OMOBJ"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Object.html#v:OMF",
      "description": {
        "fct-module": "Ideas.Text.OpenMath.Object",
        "fct-package": "ideas",
        "fct-signature": "OMF Double",
        "fct-source": "src/Ideas-Text-OpenMath-Object.html#OMOBJ",
        "fct-type": "function",
        "title": "OMF"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text OpenMath Object",
        "module": "Ideas.Text.OpenMath.Object",
        "name": "OMF",
        "normalized": "",
        "package": "ideas",
        "partial": "OMF",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Object.html#v:OMI",
      "description": {
        "fct-module": "Ideas.Text.OpenMath.Object",
        "fct-package": "ideas",
        "fct-signature": "OMI Integer",
        "fct-source": "src/Ideas-Text-OpenMath-Object.html#OMOBJ",
        "fct-type": "function",
        "title": "OMI"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text OpenMath Object",
        "module": "Ideas.Text.OpenMath.Object",
        "name": "OMI",
        "normalized": "",
        "package": "ideas",
        "partial": "OMI",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Object.html#v:OMS",
      "description": {
        "fct-module": "Ideas.Text.OpenMath.Object",
        "fct-package": "ideas",
        "fct-signature": "OMS Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Object.html#OMOBJ",
        "fct-type": "function",
        "title": "OMS"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text OpenMath Object",
        "module": "Ideas.Text.OpenMath.Object",
        "name": "OMS",
        "normalized": "",
        "package": "ideas",
        "partial": "OMS",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Object.html#v:OMV",
      "description": {
        "fct-module": "Ideas.Text.OpenMath.Object",
        "fct-package": "ideas",
        "fct-signature": "OMV String",
        "fct-source": "src/Ideas-Text-OpenMath-Object.html#OMOBJ",
        "fct-type": "function",
        "title": "OMV"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text OpenMath Object",
        "module": "Ideas.Text.OpenMath.Object",
        "name": "OMV",
        "normalized": "",
        "package": "ideas",
        "partial": "OMV",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Object.html#v:getOMVs",
      "description": {
        "fct-module": "Ideas.Text.OpenMath.Object",
        "fct-package": "ideas",
        "fct-signature": "OMOBJ -\u003e [String]",
        "fct-source": "src/Ideas-Text-OpenMath-Object.html#getOMVs",
        "fct-type": "function",
        "title": "getOMVs"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text OpenMath Object",
        "module": "Ideas.Text.OpenMath.Object",
        "name": "getOMVs",
        "normalized": "OMOBJ-\u003e[String]",
        "package": "ideas",
        "partial": "OMVs",
        "signature": "OMOBJ-\u003e[String]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Object.html#v:omobj2xml",
      "description": {
        "fct-module": "Ideas.Text.OpenMath.Object",
        "fct-package": "ideas",
        "fct-signature": "OMOBJ -\u003e XML",
        "fct-source": "src/Ideas-Text-OpenMath-Object.html#omobj2xml",
        "fct-type": "function",
        "title": "omobj2xml"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text OpenMath Object",
        "module": "Ideas.Text.OpenMath.Object",
        "name": "omobj2xml",
        "normalized": "OMOBJ-\u003eXML",
        "package": "ideas",
        "partial": "",
        "signature": "OMOBJ-\u003eXML"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Object.html#v:xml2omobj",
      "description": {
        "fct-module": "Ideas.Text.OpenMath.Object",
        "fct-package": "ideas",
        "fct-signature": "XML -\u003e Either String OMOBJ",
        "fct-source": "src/Ideas-Text-OpenMath-Object.html#xml2omobj",
        "fct-type": "function",
        "title": "xml2omobj"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text OpenMath Object",
        "module": "Ideas.Text.OpenMath.Object",
        "name": "xml2omobj",
        "normalized": "XML-\u003eEither String OMOBJ",
        "package": "ideas",
        "partial": "",
        "signature": "XML-\u003eEither String OMOBJ"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Symbol.html#",
      "description": {
        "fct-module": "Ideas.Text.OpenMath.Symbol",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Text-OpenMath-Symbol.html",
        "fct-type": "module",
        "title": "Symbol"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text OpenMath Symbol",
        "module": "Ideas.Text.OpenMath.Symbol",
        "name": "Symbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Symbol.html#t:Symbol",
      "description": {
        "fct-module": "Ideas.Text.OpenMath.Symbol",
        "fct-package": "ideas",
        "fct-signature": "type",
        "fct-source": "src/Ideas-Text-OpenMath-Symbol.html#Symbol",
        "fct-type": "type",
        "title": "Symbol"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text OpenMath Symbol",
        "module": "Ideas.Text.OpenMath.Symbol",
        "name": "Symbol",
        "normalized": "",
        "package": "ideas",
        "partial": "Symbol",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Symbol.html#v:dictionary",
      "description": {
        "fct-module": "Ideas.Text.OpenMath.Symbol",
        "fct-package": "ideas",
        "fct-signature": "Symbol -\u003e Maybe String",
        "fct-source": "src/Ideas-Text-OpenMath-Symbol.html#dictionary",
        "fct-type": "function",
        "title": "dictionary"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text OpenMath Symbol",
        "module": "Ideas.Text.OpenMath.Symbol",
        "name": "dictionary",
        "normalized": "Symbol-\u003eMaybe String",
        "package": "ideas",
        "partial": "",
        "signature": "Symbol-\u003eMaybe String"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Symbol.html#v:extraSymbol",
      "description": {
        "fct-module": "Ideas.Text.OpenMath.Symbol",
        "fct-package": "ideas",
        "fct-signature": "String -\u003e Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Symbol.html#extraSymbol",
        "fct-type": "function",
        "title": "extraSymbol"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text OpenMath Symbol",
        "module": "Ideas.Text.OpenMath.Symbol",
        "name": "extraSymbol",
        "normalized": "String-\u003eSymbol",
        "package": "ideas",
        "partial": "Symbol",
        "signature": "String-\u003eSymbol"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Symbol.html#v:makeSymbol",
      "description": {
        "fct-module": "Ideas.Text.OpenMath.Symbol",
        "fct-package": "ideas",
        "fct-signature": "String -\u003e String -\u003e Symbol",
        "fct-source": "src/Ideas-Text-OpenMath-Symbol.html#makeSymbol",
        "fct-type": "function",
        "title": "makeSymbol"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text OpenMath Symbol",
        "module": "Ideas.Text.OpenMath.Symbol",
        "name": "makeSymbol",
        "normalized": "String-\u003eString-\u003eSymbol",
        "package": "ideas",
        "partial": "Symbol",
        "signature": "String-\u003eString-\u003eSymbol"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Symbol.html#v:showSymbol",
      "description": {
        "fct-module": "Ideas.Text.OpenMath.Symbol",
        "fct-package": "ideas",
        "fct-signature": "Symbol -\u003e String",
        "fct-source": "src/Ideas-Text-OpenMath-Symbol.html#showSymbol",
        "fct-type": "function",
        "title": "showSymbol"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text OpenMath Symbol",
        "module": "Ideas.Text.OpenMath.Symbol",
        "name": "showSymbol",
        "normalized": "Symbol-\u003eString",
        "package": "ideas",
        "partial": "Symbol",
        "signature": "Symbol-\u003eString"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Symbol.html#v:symbolName",
      "description": {
        "fct-module": "Ideas.Text.OpenMath.Symbol",
        "fct-package": "ideas",
        "fct-signature": "Symbol -\u003e String",
        "fct-source": "src/Ideas-Text-OpenMath-Symbol.html#symbolName",
        "fct-type": "function",
        "title": "symbolName"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text OpenMath Symbol",
        "module": "Ideas.Text.OpenMath.Symbol",
        "name": "symbolName",
        "normalized": "Symbol-\u003eString",
        "package": "ideas",
        "partial": "Name",
        "signature": "Symbol-\u003eString"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Tests.html#",
      "description": {
        "fct-module": "Ideas.Text.OpenMath.Tests",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Text-OpenMath-Tests.html",
        "fct-type": "module",
        "title": "Tests"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text OpenMath Tests",
        "module": "Ideas.Text.OpenMath.Tests",
        "name": "Tests",
        "normalized": "",
        "package": "ideas",
        "partial": "Tests",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-OpenMath-Tests.html#v:propEncoding",
      "description": {
        "fct-module": "Ideas.Text.OpenMath.Tests",
        "fct-package": "ideas",
        "fct-signature": "Property",
        "fct-source": "src/Ideas-Text-OpenMath-Tests.html#propEncoding",
        "fct-type": "function",
        "title": "propEncoding"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text OpenMath Tests",
        "module": "Ideas.Text.OpenMath.Tests",
        "name": "propEncoding",
        "normalized": "",
        "package": "ideas",
        "partial": "Encoding",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-Parsing.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eUtility functions for parsing with Parsec library\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "Ideas.Text.Parsing",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Text-Parsing.html",
        "fct-type": "module",
        "title": "Parsing"
      },
      "index": {
        "description": "Utility functions for parsing with Parsec library",
        "hierarchy": "Ideas Text Parsing",
        "module": "Ideas.Text.Parsing",
        "name": "Parsing",
        "normalized": "",
        "package": "ideas",
        "partial": "Parsing",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-Parsing.html#t:UnbalancedError",
      "description": {
        "fct-module": "Ideas.Text.Parsing",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Text-Parsing.html#UnbalancedError",
        "fct-type": "data",
        "title": "UnbalancedError"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text Parsing",
        "module": "Ideas.Text.Parsing",
        "name": "UnbalancedError",
        "normalized": "",
        "package": "ideas",
        "partial": "Unbalanced Error",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-Parsing.html#v:-42--62-",
      "description": {
        "fct-descr": "\u003cp\u003eSequence actions, discarding the value of the first argument.\n\u003c/p\u003e",
        "fct-module": "Ideas.Text.Parsing",
        "fct-package": "ideas",
        "fct-signature": "forall a b.  f a -\u003e f b -\u003e f b",
        "fct-type": "function",
        "title": "(*\u003e)"
      },
      "index": {
        "description": "Sequence actions discarding the value of the first argument",
        "hierarchy": "Ideas Text Parsing",
        "module": "Ideas.Text.Parsing",
        "name": "(*\u003e) *\u003e",
        "normalized": "a b c d b-\u003ed e-\u003ed e",
        "package": "ideas",
        "partial": "",
        "signature": "forall a b. f a-\u003ef b-\u003ef b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-Parsing.html#v:-60--36-",
      "description": {
        "fct-descr": "\u003cp\u003eReplace all locations in the input with the same value.\n The default definition is \u003ccode\u003e\u003ccode\u003e\u003ca\u003efmap\u003c/a\u003e\u003c/code\u003e . \u003ccode\u003e\u003ca\u003econst\u003c/a\u003e\u003c/code\u003e\u003c/code\u003e, but this may be\n overridden with a more efficient version.\n\u003c/p\u003e",
        "fct-module": "Ideas.Text.Parsing",
        "fct-package": "ideas",
        "fct-signature": "forall a b.  a -\u003e f b -\u003e f a",
        "fct-type": "function",
        "title": "(\u003c$)"
      },
      "index": {
        "description": "Replace all locations in the input with the same value The default definition is fmap const but this may be overridden with more efficient version",
        "hierarchy": "Ideas Text Parsing",
        "module": "Ideas.Text.Parsing",
        "name": "(\u003c$) \u003c$",
        "normalized": "a b c b-\u003ed e-\u003ed b",
        "package": "ideas",
        "partial": "",
        "signature": "forall a b. a-\u003ef b-\u003ef a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-Parsing.html#v:-60--36--62-",
      "description": {
        "fct-descr": "\u003cp\u003eAn infix synonym for \u003ccode\u003e\u003ca\u003efmap\u003c/a\u003e\u003c/code\u003e.\n\u003c/p\u003e",
        "fct-module": "Ideas.Text.Parsing",
        "fct-package": "ideas",
        "fct-signature": "(a -\u003e b) -\u003e f a -\u003e f b",
        "fct-type": "function",
        "title": "(\u003c$\u003e)"
      },
      "index": {
        "description": "An infix synonym for fmap",
        "hierarchy": "Ideas Text Parsing",
        "module": "Ideas.Text.Parsing",
        "name": "(\u003c$\u003e) \u003c$\u003e",
        "normalized": "(a-\u003eb)-\u003ec a-\u003ec b",
        "package": "ideas",
        "partial": "",
        "signature": "(a-\u003eb)-\u003ef a-\u003ef b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-Parsing.html#v:-60--42-",
      "description": {
        "fct-descr": "\u003cp\u003eSequence actions, discarding the value of the second argument.\n\u003c/p\u003e",
        "fct-module": "Ideas.Text.Parsing",
        "fct-package": "ideas",
        "fct-signature": "forall a b.  f a -\u003e f b -\u003e f a",
        "fct-type": "function",
        "title": "(\u003c*)"
      },
      "index": {
        "description": "Sequence actions discarding the value of the second argument",
        "hierarchy": "Ideas Text Parsing",
        "module": "Ideas.Text.Parsing",
        "name": "(\u003c*) \u003c*",
        "normalized": "a b c d b-\u003ed e-\u003ed b",
        "package": "ideas",
        "partial": "",
        "signature": "forall a b. f a-\u003ef b-\u003ef a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-Parsing.html#v:-60--42--42--62-",
      "description": {
        "fct-descr": "\u003cp\u003eA variant of \u003ccode\u003e\u003ca\u003e\u003c*\u003e\u003c/a\u003e\u003c/code\u003e with the arguments reversed.\n\u003c/p\u003e",
        "fct-module": "Ideas.Text.Parsing",
        "fct-package": "ideas",
        "fct-signature": "f a -\u003e f (a -\u003e b) -\u003e f b",
        "fct-type": "function",
        "title": "(\u003c**\u003e)"
      },
      "index": {
        "description": "variant of with the arguments reversed",
        "hierarchy": "Ideas Text Parsing",
        "module": "Ideas.Text.Parsing",
        "name": "(\u003c**\u003e) \u003c**\u003e",
        "normalized": "a b-\u003ea(b-\u003ec)-\u003ea c",
        "package": "ideas",
        "partial": "",
        "signature": "f a-\u003ef(a-\u003eb)-\u003ef b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-Parsing.html#v:-60--42--62-",
      "description": {
        "fct-descr": "\u003cp\u003eSequential application.\n\u003c/p\u003e",
        "fct-module": "Ideas.Text.Parsing",
        "fct-package": "ideas",
        "fct-signature": "forall a b.  f (a -\u003e b) -\u003e f a -\u003e f b",
        "fct-type": "function",
        "title": "(\u003c*\u003e)"
      },
      "index": {
        "description": "Sequential application",
        "hierarchy": "Ideas Text Parsing",
        "module": "Ideas.Text.Parsing",
        "name": "(\u003c*\u003e) \u003c*\u003e",
        "normalized": "a b c d(b-\u003ee)-\u003ed b-\u003ed e",
        "package": "ideas",
        "partial": "",
        "signature": "forall a b. f(a-\u003eb)-\u003ef a-\u003ef b"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-Parsing.html#v:-60-..-62-",
      "description": {
        "fct-module": "Ideas.Text.Parsing",
        "fct-package": "ideas",
        "fct-signature": "Char -\u003e Char -\u003e Parser Char",
        "fct-source": "src/Ideas-Text-Parsing.html#%3C..%3E",
        "fct-type": "function",
        "title": "(\u003c..\u003e)"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text Parsing",
        "module": "Ideas.Text.Parsing",
        "name": "(\u003c..\u003e) \u003c..\u003e",
        "normalized": "Char-\u003eChar-\u003eParser Char",
        "package": "ideas",
        "partial": "",
        "signature": "Char-\u003eChar-\u003eParser Char"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-Parsing.html#v:NotClosed",
      "description": {
        "fct-module": "Ideas.Text.Parsing",
        "fct-package": "ideas",
        "fct-signature": "NotClosed SourcePos Char",
        "fct-source": "src/Ideas-Text-Parsing.html#UnbalancedError",
        "fct-type": "function",
        "title": "NotClosed"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text Parsing",
        "module": "Ideas.Text.Parsing",
        "name": "NotClosed",
        "normalized": "",
        "package": "ideas",
        "partial": "Not Closed",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-Parsing.html#v:NotOpened",
      "description": {
        "fct-module": "Ideas.Text.Parsing",
        "fct-package": "ideas",
        "fct-signature": "NotOpened SourcePos Char",
        "fct-source": "src/Ideas-Text-Parsing.html#UnbalancedError",
        "fct-type": "function",
        "title": "NotOpened"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text Parsing",
        "module": "Ideas.Text.Parsing",
        "name": "NotOpened",
        "normalized": "",
        "package": "ideas",
        "partial": "Not Opened",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-Parsing.html#v:balanced",
      "description": {
        "fct-module": "Ideas.Text.Parsing",
        "fct-package": "ideas",
        "fct-signature": "[(Char, Char)] -\u003e String -\u003e Maybe UnbalancedError",
        "fct-source": "src/Ideas-Text-Parsing.html#balanced",
        "fct-type": "function",
        "title": "balanced"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text Parsing",
        "module": "Ideas.Text.Parsing",
        "name": "balanced",
        "normalized": "[(Char,Char)]-\u003eString-\u003eMaybe UnbalancedError",
        "package": "ideas",
        "partial": "",
        "signature": "[(Char,Char)]-\u003eString-\u003eMaybe UnbalancedError"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-Parsing.html#v:complete",
      "description": {
        "fct-module": "Ideas.Text.Parsing",
        "fct-package": "ideas",
        "fct-signature": "Parser a -\u003e Parser a",
        "fct-source": "src/Ideas-Text-Parsing.html#complete",
        "fct-type": "function",
        "title": "complete"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text Parsing",
        "module": "Ideas.Text.Parsing",
        "name": "complete",
        "normalized": "Parser a-\u003eParser a",
        "package": "ideas",
        "partial": "",
        "signature": "Parser a-\u003eParser a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-Parsing.html#v:float",
      "description": {
        "fct-module": "Ideas.Text.Parsing",
        "fct-package": "ideas",
        "fct-signature": "Parser Double",
        "fct-source": "src/Ideas-Text-Parsing.html#float",
        "fct-type": "function",
        "title": "float"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text Parsing",
        "module": "Ideas.Text.Parsing",
        "name": "float",
        "normalized": "",
        "package": "ideas",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-Parsing.html#v:naturalOrFloat",
      "description": {
        "fct-module": "Ideas.Text.Parsing",
        "fct-package": "ideas",
        "fct-signature": "Parser (Either Integer Double)",
        "fct-source": "src/Ideas-Text-Parsing.html#naturalOrFloat",
        "fct-type": "function",
        "title": "naturalOrFloat"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text Parsing",
        "module": "Ideas.Text.Parsing",
        "name": "naturalOrFloat",
        "normalized": "",
        "package": "ideas",
        "partial": "Or Float",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-Parsing.html#v:parseSimple",
      "description": {
        "fct-module": "Ideas.Text.Parsing",
        "fct-package": "ideas",
        "fct-signature": "Parser a -\u003e String -\u003e Either String a",
        "fct-source": "src/Ideas-Text-Parsing.html#parseSimple",
        "fct-type": "function",
        "title": "parseSimple"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text Parsing",
        "module": "Ideas.Text.Parsing",
        "name": "parseSimple",
        "normalized": "Parser a-\u003eString-\u003eEither String a",
        "package": "ideas",
        "partial": "Simple",
        "signature": "Parser a-\u003eString-\u003eEither String a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-Parsing.html#v:ranges",
      "description": {
        "fct-module": "Ideas.Text.Parsing",
        "fct-package": "ideas",
        "fct-signature": "[(Char, Char)] -\u003e Parser Char",
        "fct-source": "src/Ideas-Text-Parsing.html#ranges",
        "fct-type": "function",
        "title": "ranges"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text Parsing",
        "module": "Ideas.Text.Parsing",
        "name": "ranges",
        "normalized": "[(Char,Char)]-\u003eParser Char",
        "package": "ideas",
        "partial": "",
        "signature": "[(Char,Char)]-\u003eParser Char"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-Parsing.html#v:skip",
      "description": {
        "fct-module": "Ideas.Text.Parsing",
        "fct-package": "ideas",
        "fct-signature": "Parser a -\u003e Parser ()",
        "fct-source": "src/Ideas-Text-Parsing.html#skip",
        "fct-type": "function",
        "title": "skip"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text Parsing",
        "module": "Ideas.Text.Parsing",
        "name": "skip",
        "normalized": "Parser a-\u003eParser()",
        "package": "ideas",
        "partial": "",
        "signature": "Parser a-\u003eParser()"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-Parsing.html#v:stopOn",
      "description": {
        "fct-module": "Ideas.Text.Parsing",
        "fct-package": "ideas",
        "fct-signature": "[String] -\u003e Parser String",
        "fct-source": "src/Ideas-Text-Parsing.html#stopOn",
        "fct-type": "function",
        "title": "stopOn"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text Parsing",
        "module": "Ideas.Text.Parsing",
        "name": "stopOn",
        "normalized": "[String]-\u003eParser String",
        "package": "ideas",
        "partial": "On",
        "signature": "[String]-\u003eParser String"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-UTF8.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eSupport for the UTF8 encoding\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "Ideas.Text.UTF8",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Text-UTF8.html",
        "fct-type": "module",
        "title": "UTF8"
      },
      "index": {
        "description": "Support for the UTF8 encoding",
        "hierarchy": "Ideas Text UTF8",
        "module": "Ideas.Text.UTF8",
        "name": "UTF8",
        "normalized": "",
        "package": "ideas",
        "partial": "UTF",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-UTF8.html#v:allBytes",
      "description": {
        "fct-descr": "\u003cp\u003eTest whether all characters are in the range 0-255\n\u003c/p\u003e",
        "fct-module": "Ideas.Text.UTF8",
        "fct-package": "ideas",
        "fct-signature": "String -\u003e Bool",
        "fct-source": "src/Ideas-Text-UTF8.html#allBytes",
        "fct-type": "function",
        "title": "allBytes"
      },
      "index": {
        "description": "Test whether all characters are in the range",
        "hierarchy": "Ideas Text UTF8",
        "module": "Ideas.Text.UTF8",
        "name": "allBytes",
        "normalized": "String-\u003eBool",
        "package": "ideas",
        "partial": "Bytes",
        "signature": "String-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-UTF8.html#v:decode",
      "description": {
        "fct-descr": "\u003cp\u003eDecode an UTF8 format string to unicode points\n\u003c/p\u003e",
        "fct-module": "Ideas.Text.UTF8",
        "fct-package": "ideas",
        "fct-signature": "String -\u003e String",
        "fct-source": "src/Ideas-Text-UTF8.html#decode",
        "fct-type": "function",
        "title": "decode"
      },
      "index": {
        "description": "Decode an UTF8 format string to unicode points",
        "hierarchy": "Ideas Text UTF8",
        "module": "Ideas.Text.UTF8",
        "name": "decode",
        "normalized": "String-\u003eString",
        "package": "ideas",
        "partial": "",
        "signature": "String-\u003eString"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-UTF8.html#v:decodeM",
      "description": {
        "fct-descr": "\u003cp\u003eDecode an UTF8 format string to unicode points (monadic)\n\u003c/p\u003e",
        "fct-module": "Ideas.Text.UTF8",
        "fct-package": "ideas",
        "fct-signature": "String -\u003e m String",
        "fct-source": "src/Ideas-Text-UTF8.html#decodeM",
        "fct-type": "function",
        "title": "decodeM"
      },
      "index": {
        "description": "Decode an UTF8 format string to unicode points monadic",
        "hierarchy": "Ideas Text UTF8",
        "module": "Ideas.Text.UTF8",
        "name": "decodeM",
        "normalized": "String-\u003ea String",
        "package": "ideas",
        "partial": "",
        "signature": "String-\u003em String"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-UTF8.html#v:encode",
      "description": {
        "fct-descr": "\u003cp\u003eEncode a string to UTF8 format\n\u003c/p\u003e",
        "fct-module": "Ideas.Text.UTF8",
        "fct-package": "ideas",
        "fct-signature": "String -\u003e String",
        "fct-source": "src/Ideas-Text-UTF8.html#encode",
        "fct-type": "function",
        "title": "encode"
      },
      "index": {
        "description": "Encode string to UTF8 format",
        "hierarchy": "Ideas Text UTF8",
        "module": "Ideas.Text.UTF8",
        "name": "encode",
        "normalized": "String-\u003eString",
        "package": "ideas",
        "partial": "",
        "signature": "String-\u003eString"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-UTF8.html#v:encodeM",
      "description": {
        "fct-descr": "\u003cp\u003eEncode a string to UTF8 format (monadic)\n\u003c/p\u003e",
        "fct-module": "Ideas.Text.UTF8",
        "fct-package": "ideas",
        "fct-signature": "String -\u003e m String",
        "fct-source": "src/Ideas-Text-UTF8.html#encodeM",
        "fct-type": "function",
        "title": "encodeM"
      },
      "index": {
        "description": "Encode string to UTF8 format monadic",
        "hierarchy": "Ideas Text UTF8",
        "module": "Ideas.Text.UTF8",
        "name": "encodeM",
        "normalized": "String-\u003ea String",
        "package": "ideas",
        "partial": "",
        "signature": "String-\u003em String"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-UTF8.html#v:isUTF8",
      "description": {
        "fct-descr": "\u003cp\u003eTest whether the argument is a proper UTF8 string\n\u003c/p\u003e",
        "fct-module": "Ideas.Text.UTF8",
        "fct-package": "ideas",
        "fct-signature": "String -\u003e Bool",
        "fct-source": "src/Ideas-Text-UTF8.html#isUTF8",
        "fct-type": "function",
        "title": "isUTF8"
      },
      "index": {
        "description": "Test whether the argument is proper UTF8 string",
        "hierarchy": "Ideas Text UTF8",
        "module": "Ideas.Text.UTF8",
        "name": "isUTF8",
        "normalized": "String-\u003eBool",
        "package": "ideas",
        "partial": "UTF",
        "signature": "String-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-UTF8.html#v:propEncoding",
      "description": {
        "fct-descr": "\u003cp\u003eQuickCheck internal encoding/decoding functions\n\u003c/p\u003e",
        "fct-module": "Ideas.Text.UTF8",
        "fct-package": "ideas",
        "fct-signature": "Property",
        "fct-source": "src/Ideas-Text-UTF8.html#propEncoding",
        "fct-type": "function",
        "title": "propEncoding"
      },
      "index": {
        "description": "QuickCheck internal encoding decoding functions",
        "hierarchy": "Ideas Text UTF8",
        "module": "Ideas.Text.UTF8",
        "name": "propEncoding",
        "normalized": "",
        "package": "ideas",
        "partial": "Encoding",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eDatatype for representing XML documents\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Text-XML-Document.html",
        "fct-type": "module",
        "title": "Document"
      },
      "index": {
        "description": "Datatype for representing XML documents",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "Document",
        "normalized": "",
        "package": "ideas",
        "partial": "Document",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#t:AttDef",
      "description": {
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "type",
        "fct-source": "src/Ideas-Text-XML-Document.html#AttDef",
        "fct-type": "type",
        "title": "AttDef"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "AttDef",
        "normalized": "",
        "package": "ideas",
        "partial": "Att Def",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#t:AttType",
      "description": {
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Text-XML-Document.html#AttType",
        "fct-type": "data",
        "title": "AttType"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "AttType",
        "normalized": "",
        "package": "ideas",
        "partial": "Att Type",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#t:AttValue",
      "description": {
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "type",
        "fct-source": "src/Ideas-Text-XML-Document.html#AttValue",
        "fct-type": "type",
        "title": "AttValue"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "AttValue",
        "normalized": "",
        "package": "ideas",
        "partial": "Att Value",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#t:Attribute",
      "description": {
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Text-XML-Document.html#Attribute",
        "fct-type": "data",
        "title": "Attribute"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "Attribute",
        "normalized": "",
        "package": "ideas",
        "partial": "Attribute",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#t:Attributes",
      "description": {
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "type",
        "fct-source": "src/Ideas-Text-XML-Document.html#Attributes",
        "fct-type": "type",
        "title": "Attributes"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "Attributes",
        "normalized": "",
        "package": "ideas",
        "partial": "Attributes",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#t:CP",
      "description": {
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Text-XML-Document.html#CP",
        "fct-type": "data",
        "title": "CP"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "CP",
        "normalized": "",
        "package": "ideas",
        "partial": "CP",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#t:Conditional",
      "description": {
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Text-XML-Document.html#Conditional",
        "fct-type": "data",
        "title": "Conditional"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "Conditional",
        "normalized": "",
        "package": "ideas",
        "partial": "Conditional",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#t:Content",
      "description": {
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "type",
        "fct-source": "src/Ideas-Text-XML-Document.html#Content",
        "fct-type": "type",
        "title": "Content"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "Content",
        "normalized": "",
        "package": "ideas",
        "partial": "Content",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#t:ContentSpec",
      "description": {
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Text-XML-Document.html#ContentSpec",
        "fct-type": "data",
        "title": "ContentSpec"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "ContentSpec",
        "normalized": "",
        "package": "ideas",
        "partial": "Content Spec",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#t:DTD",
      "description": {
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Text-XML-Document.html#DTD",
        "fct-type": "data",
        "title": "DTD"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "DTD",
        "normalized": "",
        "package": "ideas",
        "partial": "DTD",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#t:DefaultDecl",
      "description": {
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Text-XML-Document.html#DefaultDecl",
        "fct-type": "data",
        "title": "DefaultDecl"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "DefaultDecl",
        "normalized": "",
        "package": "ideas",
        "partial": "Default Decl",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#t:DocTypeDecl",
      "description": {
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Text-XML-Document.html#DocTypeDecl",
        "fct-type": "data",
        "title": "DocTypeDecl"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "DocTypeDecl",
        "normalized": "",
        "package": "ideas",
        "partial": "Doc Type Decl",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#t:Element",
      "description": {
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Text-XML-Document.html#Element",
        "fct-type": "data",
        "title": "Element"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "Element",
        "normalized": "",
        "package": "ideas",
        "partial": "Element",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#t:EntityDef",
      "description": {
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "type",
        "fct-source": "src/Ideas-Text-XML-Document.html#EntityDef",
        "fct-type": "type",
        "title": "EntityDef"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "EntityDef",
        "normalized": "",
        "package": "ideas",
        "partial": "Entity Def",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#t:EntityValue",
      "description": {
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "type",
        "fct-source": "src/Ideas-Text-XML-Document.html#EntityValue",
        "fct-type": "type",
        "title": "EntityValue"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "EntityValue",
        "normalized": "",
        "package": "ideas",
        "partial": "Entity Value",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#t:External",
      "description": {
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "type",
        "fct-source": "src/Ideas-Text-XML-Document.html#External",
        "fct-type": "type",
        "title": "External"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "External",
        "normalized": "",
        "package": "ideas",
        "partial": "External",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#t:ExternalID",
      "description": {
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Text-XML-Document.html#ExternalID",
        "fct-type": "data",
        "title": "ExternalID"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "ExternalID",
        "normalized": "",
        "package": "ideas",
        "partial": "External ID",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#t:Name",
      "description": {
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "type",
        "fct-source": "src/Ideas-Text-XML-Document.html#Name",
        "fct-type": "type",
        "title": "Name"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "Name",
        "normalized": "",
        "package": "ideas",
        "partial": "Name",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#t:Parameter",
      "description": {
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Text-XML-Document.html#Parameter",
        "fct-type": "data",
        "title": "Parameter"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "Parameter",
        "normalized": "",
        "package": "ideas",
        "partial": "Parameter",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#t:PublicID",
      "description": {
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "type",
        "fct-source": "src/Ideas-Text-XML-Document.html#PublicID",
        "fct-type": "type",
        "title": "PublicID"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "PublicID",
        "normalized": "",
        "package": "ideas",
        "partial": "Public ID",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#t:Reference",
      "description": {
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Text-XML-Document.html#Reference",
        "fct-type": "data",
        "title": "Reference"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "Reference",
        "normalized": "",
        "package": "ideas",
        "partial": "Reference",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#t:TextDecl",
      "description": {
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "type",
        "fct-source": "src/Ideas-Text-XML-Document.html#TextDecl",
        "fct-type": "type",
        "title": "TextDecl"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "TextDecl",
        "normalized": "",
        "package": "ideas",
        "partial": "Text Decl",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#t:XML",
      "description": {
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Text-XML-Document.html#XML",
        "fct-type": "data",
        "title": "XML"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "XML",
        "normalized": "",
        "package": "ideas",
        "partial": "XML",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#t:XMLDoc",
      "description": {
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Text-XML-Document.html#XMLDoc",
        "fct-type": "data",
        "title": "XMLDoc"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "XMLDoc",
        "normalized": "",
        "package": "ideas",
        "partial": "XMLDoc",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#v::-61-",
      "description": {
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "Name := AttValue",
        "fct-source": "src/Ideas-Text-XML-Document.html#Attribute",
        "fct-type": "function",
        "title": ":="
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": ":=",
        "normalized": "",
        "package": "ideas",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#v:Any",
      "description": {
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "Any",
        "fct-source": "src/Ideas-Text-XML-Document.html#ContentSpec",
        "fct-type": "function",
        "title": "Any"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "Any",
        "normalized": "",
        "package": "ideas",
        "partial": "Any",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#v:AttListDecl",
      "description": {
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "AttListDecl Name [AttDef]",
        "fct-source": "src/Ideas-Text-XML-Document.html#DocTypeDecl",
        "fct-type": "function",
        "title": "AttListDecl"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "AttListDecl",
        "normalized": "AttListDecl Name[AttDef]",
        "package": "ideas",
        "partial": "Att List Decl",
        "signature": "AttListDecl Name[AttDef]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#v:CDATA",
      "description": {
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "CDATA String",
        "fct-source": "src/Ideas-Text-XML-Document.html#XML",
        "fct-type": "function",
        "title": "CDATA"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "CDATA",
        "normalized": "",
        "package": "ideas",
        "partial": "CDATA",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#v:CPName",
      "description": {
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "CPName Name",
        "fct-source": "src/Ideas-Text-XML-Document.html#CP",
        "fct-type": "function",
        "title": "CPName"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "CPName",
        "normalized": "",
        "package": "ideas",
        "partial": "CPName",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#v:CharData",
      "description": {
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "CharData String",
        "fct-source": "src/Ideas-Text-XML-Document.html#XML",
        "fct-type": "function",
        "title": "CharData"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "CharData",
        "normalized": "",
        "package": "ideas",
        "partial": "Char Data",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#v:CharRef",
      "description": {
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "CharRef Int",
        "fct-source": "src/Ideas-Text-XML-Document.html#Reference",
        "fct-type": "function",
        "title": "CharRef"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "CharRef",
        "normalized": "",
        "package": "ideas",
        "partial": "Char Ref",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#v:Children",
      "description": {
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "Children CP",
        "fct-source": "src/Ideas-Text-XML-Document.html#ContentSpec",
        "fct-type": "function",
        "title": "Children"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "Children",
        "normalized": "",
        "package": "ideas",
        "partial": "Children",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#v:Choice",
      "description": {
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "Choice [CP]",
        "fct-source": "src/Ideas-Text-XML-Document.html#CP",
        "fct-type": "function",
        "title": "Choice"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "Choice",
        "normalized": "Choice[CP]",
        "package": "ideas",
        "partial": "Choice",
        "signature": "Choice[CP]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#v:DTD",
      "description": {
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "DTD Name (Maybe ExternalID) [DocTypeDecl]",
        "fct-source": "src/Ideas-Text-XML-Document.html#DTD",
        "fct-type": "function",
        "title": "DTD"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "DTD",
        "normalized": "DTD Name(Maybe ExternalID)[DocTypeDecl]",
        "package": "ideas",
        "partial": "DTD",
        "signature": "DTD Name(Maybe ExternalID)[DocTypeDecl]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#v:DTDConditional",
      "description": {
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "DTDConditional Conditional",
        "fct-source": "src/Ideas-Text-XML-Document.html#DocTypeDecl",
        "fct-type": "function",
        "title": "DTDConditional"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "DTDConditional",
        "normalized": "",
        "package": "ideas",
        "partial": "DTDConditional",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#v:DTDParameter",
      "description": {
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "DTDParameter Parameter",
        "fct-source": "src/Ideas-Text-XML-Document.html#DocTypeDecl",
        "fct-type": "function",
        "title": "DTDParameter"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "DTDParameter",
        "normalized": "",
        "package": "ideas",
        "partial": "DTDParameter",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#v:Element",
      "description": {
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "Element",
        "fct-source": "src/Ideas-Text-XML-Document.html#Element",
        "fct-type": "function",
        "title": "Element"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "Element",
        "normalized": "",
        "package": "ideas",
        "partial": "Element",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#v:ElementDecl",
      "description": {
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "ElementDecl Name ContentSpec",
        "fct-source": "src/Ideas-Text-XML-Document.html#DocTypeDecl",
        "fct-type": "function",
        "title": "ElementDecl"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "ElementDecl",
        "normalized": "",
        "package": "ideas",
        "partial": "Element Decl",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#v:Empty",
      "description": {
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "Empty",
        "fct-source": "src/Ideas-Text-XML-Document.html#ContentSpec",
        "fct-type": "function",
        "title": "Empty"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "Empty",
        "normalized": "",
        "package": "ideas",
        "partial": "Empty",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#v:EntitiesType",
      "description": {
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "EntitiesType",
        "fct-source": "src/Ideas-Text-XML-Document.html#AttType",
        "fct-type": "function",
        "title": "EntitiesType"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "EntitiesType",
        "normalized": "",
        "package": "ideas",
        "partial": "Entities Type",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#v:EntityDecl",
      "description": {
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "EntityDecl Bool Name EntityDef",
        "fct-source": "src/Ideas-Text-XML-Document.html#DocTypeDecl",
        "fct-type": "function",
        "title": "EntityDecl"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "EntityDecl",
        "normalized": "",
        "package": "ideas",
        "partial": "Entity Decl",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#v:EntityRef",
      "description": {
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "EntityRef String",
        "fct-source": "src/Ideas-Text-XML-Document.html#Reference",
        "fct-type": "function",
        "title": "EntityRef"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "EntityRef",
        "normalized": "",
        "package": "ideas",
        "partial": "Entity Ref",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#v:EntityType",
      "description": {
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "EntityType",
        "fct-source": "src/Ideas-Text-XML-Document.html#AttType",
        "fct-type": "function",
        "title": "EntityType"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "EntityType",
        "normalized": "",
        "package": "ideas",
        "partial": "Entity Type",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#v:EnumerationType",
      "description": {
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "EnumerationType [String]",
        "fct-source": "src/Ideas-Text-XML-Document.html#AttType",
        "fct-type": "function",
        "title": "EnumerationType"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "EnumerationType",
        "normalized": "EnumerationType[String]",
        "package": "ideas",
        "partial": "Enumeration Type",
        "signature": "EnumerationType[String]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#v:Fixed",
      "description": {
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "Fixed AttValue",
        "fct-source": "src/Ideas-Text-XML-Document.html#DefaultDecl",
        "fct-type": "function",
        "title": "Fixed"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "Fixed",
        "normalized": "",
        "package": "ideas",
        "partial": "Fixed",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#v:IdRefType",
      "description": {
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "IdRefType",
        "fct-source": "src/Ideas-Text-XML-Document.html#AttType",
        "fct-type": "function",
        "title": "IdRefType"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "IdRefType",
        "normalized": "",
        "package": "ideas",
        "partial": "Id Ref Type",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#v:IdRefsType",
      "description": {
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "IdRefsType",
        "fct-source": "src/Ideas-Text-XML-Document.html#AttType",
        "fct-type": "function",
        "title": "IdRefsType"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "IdRefsType",
        "normalized": "",
        "package": "ideas",
        "partial": "Id Refs Type",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#v:IdType",
      "description": {
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "IdType",
        "fct-source": "src/Ideas-Text-XML-Document.html#AttType",
        "fct-type": "function",
        "title": "IdType"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "IdType",
        "normalized": "",
        "package": "ideas",
        "partial": "Id Type",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#v:Ignore",
      "description": {
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "Ignore [String]",
        "fct-source": "src/Ideas-Text-XML-Document.html#Conditional",
        "fct-type": "function",
        "title": "Ignore"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "Ignore",
        "normalized": "Ignore[String]",
        "package": "ideas",
        "partial": "Ignore",
        "signature": "Ignore[String]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#v:Implied",
      "description": {
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "Implied",
        "fct-source": "src/Ideas-Text-XML-Document.html#DefaultDecl",
        "fct-type": "function",
        "title": "Implied"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "Implied",
        "normalized": "",
        "package": "ideas",
        "partial": "Implied",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#v:Include",
      "description": {
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "Include [DocTypeDecl]",
        "fct-source": "src/Ideas-Text-XML-Document.html#Conditional",
        "fct-type": "function",
        "title": "Include"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "Include",
        "normalized": "Include[DocTypeDecl]",
        "package": "ideas",
        "partial": "Include",
        "signature": "Include[DocTypeDecl]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#v:Mixed",
      "description": {
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "Mixed Bool [Name]",
        "fct-source": "src/Ideas-Text-XML-Document.html#ContentSpec",
        "fct-type": "function",
        "title": "Mixed"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "Mixed",
        "normalized": "Mixed Bool[Name]",
        "package": "ideas",
        "partial": "Mixed",
        "signature": "Mixed Bool[Name]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#v:NmTokenType",
      "description": {
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "NmTokenType",
        "fct-source": "src/Ideas-Text-XML-Document.html#AttType",
        "fct-type": "function",
        "title": "NmTokenType"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "NmTokenType",
        "normalized": "",
        "package": "ideas",
        "partial": "Nm Token Type",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#v:NmTokensType",
      "description": {
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "NmTokensType",
        "fct-source": "src/Ideas-Text-XML-Document.html#AttType",
        "fct-type": "function",
        "title": "NmTokensType"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "NmTokensType",
        "normalized": "",
        "package": "ideas",
        "partial": "Nm Tokens Type",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#v:NotationDecl",
      "description": {
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "NotationDecl Name (Either ExternalID PublicID)",
        "fct-source": "src/Ideas-Text-XML-Document.html#DocTypeDecl",
        "fct-type": "function",
        "title": "NotationDecl"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "NotationDecl",
        "normalized": "",
        "package": "ideas",
        "partial": "Notation Decl",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#v:NotationType",
      "description": {
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "NotationType [String]",
        "fct-source": "src/Ideas-Text-XML-Document.html#AttType",
        "fct-type": "function",
        "title": "NotationType"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "NotationType",
        "normalized": "NotationType[String]",
        "package": "ideas",
        "partial": "Notation Type",
        "signature": "NotationType[String]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#v:Parameter",
      "description": {
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "Parameter String",
        "fct-source": "src/Ideas-Text-XML-Document.html#Parameter",
        "fct-type": "function",
        "title": "Parameter"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "Parameter",
        "normalized": "",
        "package": "ideas",
        "partial": "Parameter",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#v:Plus",
      "description": {
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "Plus CP",
        "fct-source": "src/Ideas-Text-XML-Document.html#CP",
        "fct-type": "function",
        "title": "Plus"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "Plus",
        "normalized": "",
        "package": "ideas",
        "partial": "Plus",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#v:Public",
      "description": {
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "Public String String",
        "fct-source": "src/Ideas-Text-XML-Document.html#ExternalID",
        "fct-type": "function",
        "title": "Public"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "Public",
        "normalized": "",
        "package": "ideas",
        "partial": "Public",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#v:QuestionMark",
      "description": {
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "QuestionMark CP",
        "fct-source": "src/Ideas-Text-XML-Document.html#CP",
        "fct-type": "function",
        "title": "QuestionMark"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "QuestionMark",
        "normalized": "",
        "package": "ideas",
        "partial": "Question Mark",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#v:Reference",
      "description": {
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "Reference Reference",
        "fct-source": "src/Ideas-Text-XML-Document.html#XML",
        "fct-type": "function",
        "title": "Reference"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "Reference",
        "normalized": "",
        "package": "ideas",
        "partial": "Reference",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#v:Required",
      "description": {
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "Required",
        "fct-source": "src/Ideas-Text-XML-Document.html#DefaultDecl",
        "fct-type": "function",
        "title": "Required"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "Required",
        "normalized": "",
        "package": "ideas",
        "partial": "Required",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#v:Sequence",
      "description": {
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "Sequence [CP]",
        "fct-source": "src/Ideas-Text-XML-Document.html#CP",
        "fct-type": "function",
        "title": "Sequence"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "Sequence",
        "normalized": "Sequence[CP]",
        "package": "ideas",
        "partial": "Sequence",
        "signature": "Sequence[CP]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#v:Star",
      "description": {
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "Star CP",
        "fct-source": "src/Ideas-Text-XML-Document.html#CP",
        "fct-type": "function",
        "title": "Star"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "Star",
        "normalized": "",
        "package": "ideas",
        "partial": "Star",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#v:StringType",
      "description": {
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "StringType",
        "fct-source": "src/Ideas-Text-XML-Document.html#AttType",
        "fct-type": "function",
        "title": "StringType"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "StringType",
        "normalized": "",
        "package": "ideas",
        "partial": "String Type",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#v:System",
      "description": {
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "System String",
        "fct-source": "src/Ideas-Text-XML-Document.html#ExternalID",
        "fct-type": "function",
        "title": "System"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "System",
        "normalized": "",
        "package": "ideas",
        "partial": "System",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#v:Tagged",
      "description": {
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "Tagged Element",
        "fct-source": "src/Ideas-Text-XML-Document.html#XML",
        "fct-type": "function",
        "title": "Tagged"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "Tagged",
        "normalized": "",
        "package": "ideas",
        "partial": "Tagged",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#v:Value",
      "description": {
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "Value AttValue",
        "fct-source": "src/Ideas-Text-XML-Document.html#DefaultDecl",
        "fct-type": "function",
        "title": "Value"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "Value",
        "normalized": "",
        "package": "ideas",
        "partial": "Value",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#v:XMLDoc",
      "description": {
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "XMLDoc",
        "fct-source": "src/Ideas-Text-XML-Document.html#XMLDoc",
        "fct-type": "function",
        "title": "XMLDoc"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "XMLDoc",
        "normalized": "",
        "package": "ideas",
        "partial": "XMLDoc",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#v:attributes",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "Attributes",
        "fct-source": "src/Ideas-Text-XML-Document.html#Element",
        "fct-type": "function",
        "title": "attributes"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "attributes",
        "normalized": "",
        "package": "ideas",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#v:content",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "Content",
        "fct-source": "src/Ideas-Text-XML-Document.html#Element",
        "fct-type": "function",
        "title": "content"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "content",
        "normalized": "",
        "package": "ideas",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#v:dtd",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "Maybe DTD",
        "fct-source": "src/Ideas-Text-XML-Document.html#XMLDoc",
        "fct-type": "function",
        "title": "dtd"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "dtd",
        "normalized": "",
        "package": "ideas",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#v:encoding",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "Maybe String",
        "fct-source": "src/Ideas-Text-XML-Document.html#XMLDoc",
        "fct-type": "function",
        "title": "encoding"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "encoding",
        "normalized": "",
        "package": "ideas",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#v:externals",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "[(String, External)]",
        "fct-source": "src/Ideas-Text-XML-Document.html#XMLDoc",
        "fct-type": "function",
        "title": "externals"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "externals",
        "normalized": "[(String,External)]",
        "package": "ideas",
        "partial": "",
        "signature": "[(String,External)]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#v:name",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "Name",
        "fct-source": "src/Ideas-Text-XML-Document.html#Element",
        "fct-type": "function",
        "title": "name"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "name",
        "normalized": "",
        "package": "ideas",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#v:root",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "Element",
        "fct-source": "src/Ideas-Text-XML-Document.html#XMLDoc",
        "fct-type": "function",
        "title": "root"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "root",
        "normalized": "",
        "package": "ideas",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#v:standalone",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "Maybe Bool",
        "fct-source": "src/Ideas-Text-XML-Document.html#XMLDoc",
        "fct-type": "function",
        "title": "standalone"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "standalone",
        "normalized": "",
        "package": "ideas",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Document.html#v:versionInfo",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Text.XML.Document",
        "fct-package": "ideas",
        "fct-signature": "Maybe String",
        "fct-source": "src/Ideas-Text-XML-Document.html#XMLDoc",
        "fct-type": "function",
        "title": "versionInfo"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Document",
        "module": "Ideas.Text.XML.Document",
        "name": "versionInfo",
        "normalized": "",
        "package": "ideas",
        "partial": "Info",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Interface.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eCollection of common operation on XML documents\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "Ideas.Text.XML.Interface",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Text-XML-Interface.html",
        "fct-type": "module",
        "title": "Interface"
      },
      "index": {
        "description": "Collection of common operation on XML documents",
        "hierarchy": "Ideas Text XML Interface",
        "module": "Ideas.Text.XML.Interface",
        "name": "Interface",
        "normalized": "",
        "package": "ideas",
        "partial": "Interface",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Interface.html#t:Attribute",
      "description": {
        "fct-module": "Ideas.Text.XML.Interface",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Text-XML-Interface.html#Attribute",
        "fct-type": "data",
        "title": "Attribute"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Interface",
        "module": "Ideas.Text.XML.Interface",
        "name": "Attribute",
        "normalized": "",
        "package": "ideas",
        "partial": "Attribute",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Interface.html#t:Attributes",
      "description": {
        "fct-module": "Ideas.Text.XML.Interface",
        "fct-package": "ideas",
        "fct-signature": "type",
        "fct-source": "src/Ideas-Text-XML-Interface.html#Attributes",
        "fct-type": "type",
        "title": "Attributes"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Interface",
        "module": "Ideas.Text.XML.Interface",
        "name": "Attributes",
        "normalized": "",
        "package": "ideas",
        "partial": "Attributes",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Interface.html#t:Content",
      "description": {
        "fct-module": "Ideas.Text.XML.Interface",
        "fct-package": "ideas",
        "fct-signature": "type",
        "fct-source": "src/Ideas-Text-XML-Interface.html#Content",
        "fct-type": "type",
        "title": "Content"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Interface",
        "module": "Ideas.Text.XML.Interface",
        "name": "Content",
        "normalized": "",
        "package": "ideas",
        "partial": "Content",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Interface.html#t:Element",
      "description": {
        "fct-module": "Ideas.Text.XML.Interface",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Text-XML-Interface.html#Element",
        "fct-type": "data",
        "title": "Element"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Interface",
        "module": "Ideas.Text.XML.Interface",
        "name": "Element",
        "normalized": "",
        "package": "ideas",
        "partial": "Element",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Interface.html#v::-61-",
      "description": {
        "fct-module": "Ideas.Text.XML.Interface",
        "fct-package": "ideas",
        "fct-signature": "Name := String",
        "fct-source": "src/Ideas-Text-XML-Interface.html#Attribute",
        "fct-type": "function",
        "title": ":="
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Interface",
        "module": "Ideas.Text.XML.Interface",
        "name": ":=",
        "normalized": "",
        "package": "ideas",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Interface.html#v:Element",
      "description": {
        "fct-module": "Ideas.Text.XML.Interface",
        "fct-package": "ideas",
        "fct-signature": "Element",
        "fct-source": "src/Ideas-Text-XML-Interface.html#Element",
        "fct-type": "function",
        "title": "Element"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Interface",
        "module": "Ideas.Text.XML.Interface",
        "name": "Element",
        "normalized": "",
        "package": "ideas",
        "partial": "Element",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Interface.html#v:attributes",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Text.XML.Interface",
        "fct-package": "ideas",
        "fct-signature": "Attributes",
        "fct-source": "src/Ideas-Text-XML-Interface.html#Element",
        "fct-type": "function",
        "title": "attributes"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Interface",
        "module": "Ideas.Text.XML.Interface",
        "name": "attributes",
        "normalized": "",
        "package": "ideas",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Interface.html#v:children",
      "description": {
        "fct-module": "Ideas.Text.XML.Interface",
        "fct-package": "ideas",
        "fct-signature": "Element -\u003e [Element]",
        "fct-source": "src/Ideas-Text-XML-Interface.html#children",
        "fct-type": "function",
        "title": "children"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Interface",
        "module": "Ideas.Text.XML.Interface",
        "name": "children",
        "normalized": "Element-\u003e[Element]",
        "package": "ideas",
        "partial": "",
        "signature": "Element-\u003e[Element]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Interface.html#v:content",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Text.XML.Interface",
        "fct-package": "ideas",
        "fct-signature": "Content",
        "fct-source": "src/Ideas-Text-XML-Interface.html#Element",
        "fct-type": "function",
        "title": "content"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Interface",
        "module": "Ideas.Text.XML.Interface",
        "name": "content",
        "normalized": "",
        "package": "ideas",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Interface.html#v:findAttribute",
      "description": {
        "fct-module": "Ideas.Text.XML.Interface",
        "fct-package": "ideas",
        "fct-signature": "String -\u003e Element -\u003e m String",
        "fct-source": "src/Ideas-Text-XML-Interface.html#findAttribute",
        "fct-type": "function",
        "title": "findAttribute"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Interface",
        "module": "Ideas.Text.XML.Interface",
        "name": "findAttribute",
        "normalized": "String-\u003eElement-\u003ea String",
        "package": "ideas",
        "partial": "Attribute",
        "signature": "String-\u003eElement-\u003em String"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Interface.html#v:findChild",
      "description": {
        "fct-module": "Ideas.Text.XML.Interface",
        "fct-package": "ideas",
        "fct-signature": "String -\u003e Element -\u003e m Element",
        "fct-source": "src/Ideas-Text-XML-Interface.html#findChild",
        "fct-type": "function",
        "title": "findChild"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Interface",
        "module": "Ideas.Text.XML.Interface",
        "name": "findChild",
        "normalized": "String-\u003eElement-\u003ea Element",
        "package": "ideas",
        "partial": "Child",
        "signature": "String-\u003eElement-\u003em Element"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Interface.html#v:getData",
      "description": {
        "fct-module": "Ideas.Text.XML.Interface",
        "fct-package": "ideas",
        "fct-signature": "Element -\u003e String",
        "fct-source": "src/Ideas-Text-XML-Interface.html#getData",
        "fct-type": "function",
        "title": "getData"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Interface",
        "module": "Ideas.Text.XML.Interface",
        "name": "getData",
        "normalized": "Element-\u003eString",
        "package": "ideas",
        "partial": "Data",
        "signature": "Element-\u003eString"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Interface.html#v:name",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Text.XML.Interface",
        "fct-package": "ideas",
        "fct-signature": "Name",
        "fct-source": "src/Ideas-Text-XML-Interface.html#Element",
        "fct-type": "function",
        "title": "name"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Interface",
        "module": "Ideas.Text.XML.Interface",
        "name": "name",
        "normalized": "",
        "package": "ideas",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Interface.html#v:normalize",
      "description": {
        "fct-module": "Ideas.Text.XML.Interface",
        "fct-package": "ideas",
        "fct-signature": "XMLDoc -\u003e Element",
        "fct-source": "src/Ideas-Text-XML-Interface.html#normalize",
        "fct-type": "function",
        "title": "normalize"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Interface",
        "module": "Ideas.Text.XML.Interface",
        "name": "normalize",
        "normalized": "XMLDoc-\u003eElement",
        "package": "ideas",
        "partial": "",
        "signature": "XMLDoc-\u003eElement"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Interface.html#v:parseXML",
      "description": {
        "fct-module": "Ideas.Text.XML.Interface",
        "fct-package": "ideas",
        "fct-signature": "String -\u003e Either String Element",
        "fct-source": "src/Ideas-Text-XML-Interface.html#parseXML",
        "fct-type": "function",
        "title": "parseXML"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Interface",
        "module": "Ideas.Text.XML.Interface",
        "name": "parseXML",
        "normalized": "String-\u003eEither String Element",
        "package": "ideas",
        "partial": "XML",
        "signature": "String-\u003eEither String Element"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Parser.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eA parser for XML documents, directly derived from the specification:\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "Ideas.Text.XML.Parser",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Text-XML-Parser.html",
        "fct-type": "module",
        "title": "Parser"
      },
      "index": {
        "description": "parser for XML documents directly derived from the specification",
        "hierarchy": "Ideas Text XML Parser",
        "module": "Ideas.Text.XML.Parser",
        "name": "Parser",
        "normalized": "",
        "package": "ideas",
        "partial": "Parser",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Parser.html#v:document",
      "description": {
        "fct-module": "Ideas.Text.XML.Parser",
        "fct-package": "ideas",
        "fct-signature": "Parser XMLDoc",
        "fct-source": "src/Ideas-Text-XML-Parser.html#document",
        "fct-type": "function",
        "title": "document"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Parser",
        "module": "Ideas.Text.XML.Parser",
        "name": "document",
        "normalized": "",
        "package": "ideas",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Parser.html#v:extParsedEnt",
      "description": {
        "fct-module": "Ideas.Text.XML.Parser",
        "fct-package": "ideas",
        "fct-signature": "Parser (Maybe TextDecl, Content)",
        "fct-source": "src/Ideas-Text-XML-Parser.html#extParsedEnt",
        "fct-type": "function",
        "title": "extParsedEnt"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Parser",
        "module": "Ideas.Text.XML.Parser",
        "name": "extParsedEnt",
        "normalized": "Parser(Maybe TextDecl,Content)",
        "package": "ideas",
        "partial": "Parsed Ent",
        "signature": "Parser(Maybe TextDecl,Content)"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Parser.html#v:extSubset",
      "description": {
        "fct-module": "Ideas.Text.XML.Parser",
        "fct-package": "ideas",
        "fct-signature": "Parser (Maybe TextDecl, [DocTypeDecl])",
        "fct-source": "src/Ideas-Text-XML-Parser.html#extSubset",
        "fct-type": "function",
        "title": "extSubset"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Parser",
        "module": "Ideas.Text.XML.Parser",
        "name": "extSubset",
        "normalized": "Parser(Maybe TextDecl,[DocTypeDecl])",
        "package": "ideas",
        "partial": "Subset",
        "signature": "Parser(Maybe TextDecl,[DocTypeDecl])"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Unicode.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eSupport for Unicode\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "Ideas.Text.XML.Unicode",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Text-XML-Unicode.html",
        "fct-type": "module",
        "title": "Unicode"
      },
      "index": {
        "description": "Support for Unicode",
        "hierarchy": "Ideas Text XML Unicode",
        "module": "Ideas.Text.XML.Unicode",
        "name": "Unicode",
        "normalized": "",
        "package": "ideas",
        "partial": "Unicode",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Unicode.html#v:combiningCharMap",
      "description": {
        "fct-module": "Ideas.Text.XML.Unicode",
        "fct-package": "ideas",
        "fct-signature": "[(Char, Char)]",
        "fct-source": "src/Ideas-Text-XML-Unicode.html#combiningCharMap",
        "fct-type": "function",
        "title": "combiningCharMap"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Unicode",
        "module": "Ideas.Text.XML.Unicode",
        "name": "combiningCharMap",
        "normalized": "[(Char,Char)]",
        "package": "ideas",
        "partial": "Char Map",
        "signature": "[(Char,Char)]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Unicode.html#v:decoding",
      "description": {
        "fct-module": "Ideas.Text.XML.Unicode",
        "fct-package": "ideas",
        "fct-signature": "String -\u003e m String",
        "fct-source": "src/Ideas-Text-XML-Unicode.html#decoding",
        "fct-type": "function",
        "title": "decoding"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Unicode",
        "module": "Ideas.Text.XML.Unicode",
        "name": "decoding",
        "normalized": "String-\u003ea String",
        "package": "ideas",
        "partial": "",
        "signature": "String-\u003em String"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Unicode.html#v:digitMap",
      "description": {
        "fct-module": "Ideas.Text.XML.Unicode",
        "fct-package": "ideas",
        "fct-signature": "[(Char, Char)]",
        "fct-source": "src/Ideas-Text-XML-Unicode.html#digitMap",
        "fct-type": "function",
        "title": "digitMap"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Unicode",
        "module": "Ideas.Text.XML.Unicode",
        "name": "digitMap",
        "normalized": "[(Char,Char)]",
        "package": "ideas",
        "partial": "Map",
        "signature": "[(Char,Char)]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Unicode.html#v:extenderMap",
      "description": {
        "fct-module": "Ideas.Text.XML.Unicode",
        "fct-package": "ideas",
        "fct-signature": "[(Char, Char)]",
        "fct-source": "src/Ideas-Text-XML-Unicode.html#extenderMap",
        "fct-type": "function",
        "title": "extenderMap"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Unicode",
        "module": "Ideas.Text.XML.Unicode",
        "name": "extenderMap",
        "normalized": "[(Char,Char)]",
        "package": "ideas",
        "partial": "Map",
        "signature": "[(Char,Char)]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Unicode.html#v:isCombiningChar",
      "description": {
        "fct-module": "Ideas.Text.XML.Unicode",
        "fct-package": "ideas",
        "fct-signature": "Char -\u003e Bool",
        "fct-source": "src/Ideas-Text-XML-Unicode.html#isCombiningChar",
        "fct-type": "function",
        "title": "isCombiningChar"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Unicode",
        "module": "Ideas.Text.XML.Unicode",
        "name": "isCombiningChar",
        "normalized": "Char-\u003eBool",
        "package": "ideas",
        "partial": "Combining Char",
        "signature": "Char-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Unicode.html#v:isDigit",
      "description": {
        "fct-module": "Ideas.Text.XML.Unicode",
        "fct-package": "ideas",
        "fct-signature": "Char -\u003e Bool",
        "fct-source": "src/Ideas-Text-XML-Unicode.html#isDigit",
        "fct-type": "function",
        "title": "isDigit"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Unicode",
        "module": "Ideas.Text.XML.Unicode",
        "name": "isDigit",
        "normalized": "Char-\u003eBool",
        "package": "ideas",
        "partial": "Digit",
        "signature": "Char-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Unicode.html#v:isExtender",
      "description": {
        "fct-module": "Ideas.Text.XML.Unicode",
        "fct-package": "ideas",
        "fct-signature": "Char -\u003e Bool",
        "fct-source": "src/Ideas-Text-XML-Unicode.html#isExtender",
        "fct-type": "function",
        "title": "isExtender"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Unicode",
        "module": "Ideas.Text.XML.Unicode",
        "name": "isExtender",
        "normalized": "Char-\u003eBool",
        "package": "ideas",
        "partial": "Extender",
        "signature": "Char-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Unicode.html#v:isLetter",
      "description": {
        "fct-module": "Ideas.Text.XML.Unicode",
        "fct-package": "ideas",
        "fct-signature": "Char -\u003e Bool",
        "fct-source": "src/Ideas-Text-XML-Unicode.html#isLetter",
        "fct-type": "function",
        "title": "isLetter"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Unicode",
        "module": "Ideas.Text.XML.Unicode",
        "name": "isLetter",
        "normalized": "Char-\u003eBool",
        "package": "ideas",
        "partial": "Letter",
        "signature": "Char-\u003eBool"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML-Unicode.html#v:letterMap",
      "description": {
        "fct-module": "Ideas.Text.XML.Unicode",
        "fct-package": "ideas",
        "fct-signature": "[(Char, Char)]",
        "fct-source": "src/Ideas-Text-XML-Unicode.html#letterMap",
        "fct-type": "function",
        "title": "letterMap"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML Unicode",
        "module": "Ideas.Text.XML.Unicode",
        "name": "letterMap",
        "normalized": "[(Char,Char)]",
        "package": "ideas",
        "partial": "Map",
        "signature": "[(Char,Char)]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML.html#",
      "description": {
        "fct-descr": "\u003cdiv class=\"doc\"\u003e\u003cp\u003eA datatype, parser, and pretty printer for XML documents. Re-exports\n functions defined elsewhere.\n\u003c/p\u003e\u003c/div\u003e",
        "fct-module": "Ideas.Text.XML",
        "fct-package": "ideas",
        "fct-signature": "module",
        "fct-source": "src/Ideas-Text-XML.html",
        "fct-type": "module",
        "title": "XML"
      },
      "index": {
        "description": "datatype parser and pretty printer for XML documents Re-exports functions defined elsewhere",
        "hierarchy": "Ideas Text XML",
        "module": "Ideas.Text.XML",
        "name": "XML",
        "normalized": "",
        "package": "ideas",
        "partial": "XML",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML.html#t:Attr",
      "description": {
        "fct-module": "Ideas.Text.XML",
        "fct-package": "ideas",
        "fct-signature": "type",
        "fct-source": "src/Ideas-Text-XML.html#Attr",
        "fct-type": "type",
        "title": "Attr"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML",
        "module": "Ideas.Text.XML",
        "name": "Attr",
        "normalized": "",
        "package": "ideas",
        "partial": "Attr",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML.html#t:AttrList",
      "description": {
        "fct-module": "Ideas.Text.XML",
        "fct-package": "ideas",
        "fct-signature": "type",
        "fct-source": "src/Ideas-Text-XML.html#AttrList",
        "fct-type": "type",
        "title": "AttrList"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML",
        "module": "Ideas.Text.XML",
        "name": "AttrList",
        "normalized": "",
        "package": "ideas",
        "partial": "Attr List",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML.html#t:Attribute",
      "description": {
        "fct-module": "Ideas.Text.XML",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Text-XML-Interface.html#Attribute",
        "fct-type": "data",
        "title": "Attribute"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML",
        "module": "Ideas.Text.XML",
        "name": "Attribute",
        "normalized": "",
        "package": "ideas",
        "partial": "Attribute",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML.html#t:BuildXML",
      "description": {
        "fct-module": "Ideas.Text.XML",
        "fct-package": "ideas",
        "fct-signature": "class",
        "fct-source": "src/Ideas-Text-XML.html#BuildXML",
        "fct-type": "class",
        "title": "BuildXML"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML",
        "module": "Ideas.Text.XML",
        "name": "BuildXML",
        "normalized": "",
        "package": "ideas",
        "partial": "Build XML",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML.html#t:Element",
      "description": {
        "fct-module": "Ideas.Text.XML",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Text-XML-Interface.html#Element",
        "fct-type": "data",
        "title": "Element"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML",
        "module": "Ideas.Text.XML",
        "name": "Element",
        "normalized": "",
        "package": "ideas",
        "partial": "Element",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML.html#t:InXML",
      "description": {
        "fct-module": "Ideas.Text.XML",
        "fct-package": "ideas",
        "fct-signature": "class",
        "fct-source": "src/Ideas-Text-XML.html#InXML",
        "fct-type": "class",
        "title": "InXML"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML",
        "module": "Ideas.Text.XML",
        "name": "InXML",
        "normalized": "",
        "package": "ideas",
        "partial": "In XML",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML.html#t:XML",
      "description": {
        "fct-module": "Ideas.Text.XML",
        "fct-package": "ideas",
        "fct-signature": "type",
        "fct-source": "src/Ideas-Text-XML.html#XML",
        "fct-type": "type",
        "title": "XML"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML",
        "module": "Ideas.Text.XML",
        "name": "XML",
        "normalized": "",
        "package": "ideas",
        "partial": "XML",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML.html#t:XMLBuilder",
      "description": {
        "fct-module": "Ideas.Text.XML",
        "fct-package": "ideas",
        "fct-signature": "data",
        "fct-source": "src/Ideas-Text-XML.html#XMLBuilder",
        "fct-type": "data",
        "title": "XMLBuilder"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML",
        "module": "Ideas.Text.XML",
        "name": "XMLBuilder",
        "normalized": "",
        "package": "ideas",
        "partial": "XMLBuilder",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML.html#v:.-61-.",
      "description": {
        "fct-module": "Ideas.Text.XML",
        "fct-package": "ideas",
        "fct-signature": "String -\u003e String -\u003e a",
        "fct-source": "src/Ideas-Text-XML.html#.%3D.",
        "fct-type": "method",
        "title": "(.=.)"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML",
        "module": "Ideas.Text.XML",
        "name": "(.=.) .=.",
        "normalized": "String-\u003eString-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "String-\u003eString-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML.html#v::-61-",
      "description": {
        "fct-module": "Ideas.Text.XML",
        "fct-package": "ideas",
        "fct-signature": "Name := String",
        "fct-source": "src/Ideas-Text-XML-Interface.html#Attribute",
        "fct-type": "function",
        "title": ":="
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML",
        "module": "Ideas.Text.XML",
        "name": ":=",
        "normalized": "",
        "package": "ideas",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML.html#v:Element",
      "description": {
        "fct-module": "Ideas.Text.XML",
        "fct-package": "ideas",
        "fct-signature": "Element",
        "fct-source": "src/Ideas-Text-XML-Interface.html#Element",
        "fct-type": "function",
        "title": "Element"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML",
        "module": "Ideas.Text.XML",
        "name": "Element",
        "normalized": "",
        "package": "ideas",
        "partial": "Element",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML.html#v:attributes",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Text.XML",
        "fct-package": "ideas",
        "fct-signature": "Attributes",
        "fct-source": "src/Ideas-Text-XML-Interface.html#Element",
        "fct-type": "function",
        "title": "attributes"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML",
        "module": "Ideas.Text.XML",
        "name": "attributes",
        "normalized": "",
        "package": "ideas",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML.html#v:builder",
      "description": {
        "fct-module": "Ideas.Text.XML",
        "fct-package": "ideas",
        "fct-signature": "Element -\u003e a",
        "fct-source": "src/Ideas-Text-XML.html#builder",
        "fct-type": "method",
        "title": "builder"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML",
        "module": "Ideas.Text.XML",
        "name": "builder",
        "normalized": "Element-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "Element-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML.html#v:children",
      "description": {
        "fct-module": "Ideas.Text.XML",
        "fct-package": "ideas",
        "fct-signature": "Element -\u003e [Element]",
        "fct-source": "src/Ideas-Text-XML-Interface.html#children",
        "fct-type": "function",
        "title": "children"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML",
        "module": "Ideas.Text.XML",
        "name": "children",
        "normalized": "Element-\u003e[Element]",
        "package": "ideas",
        "partial": "",
        "signature": "Element-\u003e[Element]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML.html#v:compactXML",
      "description": {
        "fct-module": "Ideas.Text.XML",
        "fct-package": "ideas",
        "fct-signature": "XML -\u003e String",
        "fct-source": "src/Ideas-Text-XML.html#compactXML",
        "fct-type": "function",
        "title": "compactXML"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML",
        "module": "Ideas.Text.XML",
        "name": "compactXML",
        "normalized": "XML-\u003eString",
        "package": "ideas",
        "partial": "XML",
        "signature": "XML-\u003eString"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML.html#v:content",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Text.XML",
        "fct-package": "ideas",
        "fct-signature": "Content",
        "fct-source": "src/Ideas-Text-XML-Interface.html#Element",
        "fct-type": "function",
        "title": "content"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML",
        "module": "Ideas.Text.XML",
        "name": "content",
        "normalized": "",
        "package": "ideas",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML.html#v:element",
      "description": {
        "fct-module": "Ideas.Text.XML",
        "fct-package": "ideas",
        "fct-signature": "String -\u003e [a] -\u003e a",
        "fct-source": "src/Ideas-Text-XML.html#element",
        "fct-type": "method",
        "title": "element"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML",
        "module": "Ideas.Text.XML",
        "name": "element",
        "normalized": "String-\u003e[a]-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "String-\u003e[a]-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML.html#v:emptyTag",
      "description": {
        "fct-module": "Ideas.Text.XML",
        "fct-package": "ideas",
        "fct-signature": "String -\u003e a",
        "fct-source": "src/Ideas-Text-XML.html#emptyTag",
        "fct-type": "method",
        "title": "emptyTag"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML",
        "module": "Ideas.Text.XML",
        "name": "emptyTag",
        "normalized": "String-\u003ea",
        "package": "ideas",
        "partial": "Tag",
        "signature": "String-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML.html#v:findAttribute",
      "description": {
        "fct-module": "Ideas.Text.XML",
        "fct-package": "ideas",
        "fct-signature": "String -\u003e Element -\u003e m String",
        "fct-source": "src/Ideas-Text-XML-Interface.html#findAttribute",
        "fct-type": "function",
        "title": "findAttribute"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML",
        "module": "Ideas.Text.XML",
        "name": "findAttribute",
        "normalized": "String-\u003eElement-\u003ea String",
        "package": "ideas",
        "partial": "Attribute",
        "signature": "String-\u003eElement-\u003em String"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML.html#v:findChild",
      "description": {
        "fct-module": "Ideas.Text.XML",
        "fct-package": "ideas",
        "fct-signature": "String -\u003e Element -\u003e m Element",
        "fct-source": "src/Ideas-Text-XML-Interface.html#findChild",
        "fct-type": "function",
        "title": "findChild"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML",
        "module": "Ideas.Text.XML",
        "name": "findChild",
        "normalized": "String-\u003eElement-\u003ea Element",
        "package": "ideas",
        "partial": "Child",
        "signature": "String-\u003eElement-\u003em Element"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML.html#v:fromBuilder",
      "description": {
        "fct-module": "Ideas.Text.XML",
        "fct-package": "ideas",
        "fct-signature": "XMLBuilder -\u003e Maybe Element",
        "fct-source": "src/Ideas-Text-XML.html#fromBuilder",
        "fct-type": "function",
        "title": "fromBuilder"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML",
        "module": "Ideas.Text.XML",
        "name": "fromBuilder",
        "normalized": "XMLBuilder-\u003eMaybe Element",
        "package": "ideas",
        "partial": "Builder",
        "signature": "XMLBuilder-\u003eMaybe Element"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML.html#v:fromXML",
      "description": {
        "fct-module": "Ideas.Text.XML",
        "fct-package": "ideas",
        "fct-signature": "XML -\u003e m a",
        "fct-source": "src/Ideas-Text-XML.html#fromXML",
        "fct-type": "method",
        "title": "fromXML"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML",
        "module": "Ideas.Text.XML",
        "name": "fromXML",
        "normalized": "XML-\u003ea b",
        "package": "ideas",
        "partial": "XML",
        "signature": "XML-\u003em a"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML.html#v:getData",
      "description": {
        "fct-module": "Ideas.Text.XML",
        "fct-package": "ideas",
        "fct-signature": "Element -\u003e String",
        "fct-source": "src/Ideas-Text-XML-Interface.html#getData",
        "fct-type": "function",
        "title": "getData"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML",
        "module": "Ideas.Text.XML",
        "name": "getData",
        "normalized": "Element-\u003eString",
        "package": "ideas",
        "partial": "Data",
        "signature": "Element-\u003eString"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML.html#v:listFromXML",
      "description": {
        "fct-module": "Ideas.Text.XML",
        "fct-package": "ideas",
        "fct-signature": "XML -\u003e m [a]",
        "fct-source": "src/Ideas-Text-XML.html#listFromXML",
        "fct-type": "method",
        "title": "listFromXML"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML",
        "module": "Ideas.Text.XML",
        "name": "listFromXML",
        "normalized": "XML-\u003ea[b]",
        "package": "ideas",
        "partial": "From XML",
        "signature": "XML-\u003em[a]"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML.html#v:listToXML",
      "description": {
        "fct-module": "Ideas.Text.XML",
        "fct-package": "ideas",
        "fct-signature": "[a] -\u003e XML",
        "fct-source": "src/Ideas-Text-XML.html#listToXML",
        "fct-type": "method",
        "title": "listToXML"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML",
        "module": "Ideas.Text.XML",
        "name": "listToXML",
        "normalized": "[a]-\u003eXML",
        "package": "ideas",
        "partial": "To XML",
        "signature": "[a]-\u003eXML"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML.html#v:makeXML",
      "description": {
        "fct-module": "Ideas.Text.XML",
        "fct-package": "ideas",
        "fct-signature": "String -\u003e XMLBuilder -\u003e XML",
        "fct-source": "src/Ideas-Text-XML.html#makeXML",
        "fct-type": "function",
        "title": "makeXML"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML",
        "module": "Ideas.Text.XML",
        "name": "makeXML",
        "normalized": "String-\u003eXMLBuilder-\u003eXML",
        "package": "ideas",
        "partial": "XML",
        "signature": "String-\u003eXMLBuilder-\u003eXML"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML.html#v:munless",
      "description": {
        "fct-module": "Ideas.Text.XML",
        "fct-package": "ideas",
        "fct-signature": "Bool -\u003e a -\u003e a",
        "fct-source": "src/Ideas-Text-XML.html#munless",
        "fct-type": "function",
        "title": "munless"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML",
        "module": "Ideas.Text.XML",
        "name": "munless",
        "normalized": "Bool-\u003ea-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "Bool-\u003ea-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML.html#v:mwhen",
      "description": {
        "fct-module": "Ideas.Text.XML",
        "fct-package": "ideas",
        "fct-signature": "Bool -\u003e a -\u003e a",
        "fct-source": "src/Ideas-Text-XML.html#mwhen",
        "fct-type": "function",
        "title": "mwhen"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML",
        "module": "Ideas.Text.XML",
        "name": "mwhen",
        "normalized": "Bool-\u003ea-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "Bool-\u003ea-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML.html#v:name",
      "description": {
        "fct-descr": "&#160;",
        "fct-module": "Ideas.Text.XML",
        "fct-package": "ideas",
        "fct-signature": "Name",
        "fct-source": "src/Ideas-Text-XML-Interface.html#Element",
        "fct-type": "function",
        "title": "name"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML",
        "module": "Ideas.Text.XML",
        "name": "name",
        "normalized": "",
        "package": "ideas",
        "partial": "",
        "signature": ""
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML.html#v:parseXML",
      "description": {
        "fct-module": "Ideas.Text.XML",
        "fct-package": "ideas",
        "fct-signature": "String -\u003e Either String XML",
        "fct-source": "src/Ideas-Text-XML.html#parseXML",
        "fct-type": "function",
        "title": "parseXML"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML",
        "module": "Ideas.Text.XML",
        "name": "parseXML",
        "normalized": "String-\u003eEither String XML",
        "package": "ideas",
        "partial": "XML",
        "signature": "String-\u003eEither String XML"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML.html#v:showXML",
      "description": {
        "fct-module": "Ideas.Text.XML",
        "fct-package": "ideas",
        "fct-signature": "XML -\u003e String",
        "fct-source": "src/Ideas-Text-XML.html#showXML",
        "fct-type": "function",
        "title": "showXML"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML",
        "module": "Ideas.Text.XML",
        "name": "showXML",
        "normalized": "XML-\u003eString",
        "package": "ideas",
        "partial": "XML",
        "signature": "XML-\u003eString"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML.html#v:string",
      "description": {
        "fct-module": "Ideas.Text.XML",
        "fct-package": "ideas",
        "fct-signature": "String -\u003e a",
        "fct-source": "src/Ideas-Text-XML.html#string",
        "fct-type": "method",
        "title": "string"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML",
        "module": "Ideas.Text.XML",
        "name": "string",
        "normalized": "String-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "String-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML.html#v:tag",
      "description": {
        "fct-module": "Ideas.Text.XML",
        "fct-package": "ideas",
        "fct-signature": "String -\u003e a -\u003e a",
        "fct-source": "src/Ideas-Text-XML.html#tag",
        "fct-type": "method",
        "title": "tag"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML",
        "module": "Ideas.Text.XML",
        "name": "tag",
        "normalized": "String-\u003ea-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "String-\u003ea-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML.html#v:text",
      "description": {
        "fct-module": "Ideas.Text.XML",
        "fct-package": "ideas",
        "fct-signature": "s -\u003e a",
        "fct-source": "src/Ideas-Text-XML.html#text",
        "fct-type": "method",
        "title": "text"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML",
        "module": "Ideas.Text.XML",
        "name": "text",
        "normalized": "a-\u003eb",
        "package": "ideas",
        "partial": "",
        "signature": "s-\u003ea"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML.html#v:toXML",
      "description": {
        "fct-module": "Ideas.Text.XML",
        "fct-package": "ideas",
        "fct-signature": "a -\u003e XML",
        "fct-source": "src/Ideas-Text-XML.html#toXML",
        "fct-type": "method",
        "title": "toXML"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML",
        "module": "Ideas.Text.XML",
        "name": "toXML",
        "normalized": "a-\u003eXML",
        "package": "ideas",
        "partial": "XML",
        "signature": "a-\u003eXML"
      }
    }
  },
  {
    "cmd": "update",
    "document": {
      "uri": "http://hackage.haskell.org/package/ideas/docs/Ideas-Text-XML.html#v:unescaped",
      "description": {
        "fct-module": "Ideas.Text.XML",
        "fct-package": "ideas",
        "fct-signature": "String -\u003e a",
        "fct-source": "src/Ideas-Text-XML.html#unescaped",
        "fct-type": "method",
        "title": "unescaped"
      },
      "index": {
        "description": "",
        "hierarchy": "Ideas Text XML",
        "module": "Ideas.Text.XML",
        "name": "unescaped",
        "normalized": "String-\u003ea",
        "package": "ideas",
        "partial": "",
        "signature": "String-\u003ea"
      }
    }
  }
]